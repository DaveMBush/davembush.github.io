<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://davembush.github.com</id>
    <title>Dave&#39;s Notebook • Posts by &#34;programming best practice&#34; category</title>
    <link href="http://davembush.github.com" />
    <updated>2018-02-20T11:30:35.000Z</updated>
    <category term="project management" />
    <category term="code coverage" />
    <category term="tdd" />
    <category term="unit test" />
    <category term="code" />
    <category term="programming" />
    <category term="angular" />
    <category term="javascript" />
    <category term="performance" />
    <category term="react.js" />
    <category term="agile" />
    <category term="failure" />
    <category term="kanban" />
    <category term="scrum" />
    <category term="interview" />
    <category term="job search" />
    <category term="test driven development" />
    <category term="mvvm" />
    <category term="DRY" />
    <category term="loose coupling" />
    <category term="single responsibility" />
    <category term="c#" />
    <category term="learning" />
    <category term="bug" />
    <category term="ext js" />
    <category term="sencha" />
    <category term="career" />
    <category term="react" />
    <category term="ngrx" />
    <category term="redux" />
    <category term="functional" />
    <category term="reactive" />
    <category term="mvp" />
    <category term="private" />
    <category term="testing" />
    <category term="typescript" />
    <category term="routing" />
    <category term="pointers" />
    <category term="unsafe" />
    <category term="class diagram" />
    <category term="vb.net" />
    <category term="visual studio" />
    <category term="flux" />
    <category term="lazy loading" />
    <category term="scope" />
    <category term="DOM" />
    <category term="ionic" />
    <category term="putty" />
    <category term="ssh" />
    <category term="formgroup" />
    <category term="validation" />
    <category term="angular-cli" />
    <category term="modules" />
    <category term="ngmodule" />
    <category term="observables" />
    <category term="RxJS" />
    <category term="model driven" />
    <category term="reactive forms" />
    <category term="estimating" />
    <category term="story points" />
    <category term="best practices" />
    <category term="design patterns" />
    <category term="architecture" />
    <category term="asp.net" />
    <category term="memory" />
    <category term="angular.js" />
    <category term="iis" />
    <category term="ajax" />
    <category term="json" />
    <category term="controller" />
    <category term="MVC" />
    <category term="view" />
    <category term="404" />
    <category term="application_error" />
    <category term="exceptions" />
    <category term="viewstate" />
    <category term="archietcture" />
    <category term="bll" />
    <category term="dal" />
    <category term="Three Tiered" />
    <category term=".net" />
    <category term="enums" />
    <category term="tutorial" />
    <category term="code quality" />
    <category term="cyclomatic" />
    <category term="halstead" />
    <category term="child component" />
    <category term="CefSharp" />
    <category term="Chromium" />
    <category term="Vista" />
    <category term="VPN" />
    <category term="xp" />
    <category term="get" />
    <category term="properties" />
    <category term="set" />
    <category term="empty" />
    <category term="string" />
    <category term="habits" />
    <category term="application testing" />
    <category term="dependency injection" />
    <category term="debugging" />
    <category term="cms" />
    <category term="dotnetnuke" />
    <category term="WordPress" />
    <category term="authority" />
    <category term="confidence" />
    <category term="datalist" />
    <category term="listview" />
    <category term="comments" />
    <category term="tdd. agile" />
    <category term="bootstrap" />
    <category term="copy &amp;amp; paste" />
    <category term="cross browser" />
    <category term="idisposable" />
    <category term="animation" />
    <category term="css" />
    <category term="html" />
    <category term="debug" />
    <category term="checked" />
    <category term="double" />
    <category term="float" />
    <category term="int" />
    <category term="long" />
    <category term="short" />
    <category term="unchecked" />
    <category term="currency" />
    <category term="decimal" />
    <category term="floating point math" />
    <category term="single" />
    <category term="authentication" />
    <category term="isinrole" />
    <category term="roles" />
    <category term="user" />
    <category term="definition of done" />
    <category term="DoD" />
    <category term="dispose" />
    <category term="finalize" />
    <category term="suppressfinalize" />
    <category term="education" />
    <category term="client side" />
    <category term="development" />
    <category term="class" />
    <category term="dynamic classing" />
    <category term="gridview" />
    <category term="college" />
    <category term="freshman" />
    <category term="babel" />
    <category term="es2015" />
    <category term="es6" />
    <category term="jest" />
    <category term="bdd" />
    <category term="Single Responsibility" />
    <category term="Architecture" />
    <category term="full stack developer" />
    <category term="web development" />
    <category term="formsauthentication" />
    <category term="manual" />
    <category term="redirectfromloginpage" />
    <category term="setauthcookie" />
    <category term="NgRX" />
    <category term="luck" />
    <category term="social skills" />
    <category term="brain" />
    <category term="health" />
    <category term="programmer" />
    <category term="productivity" />
    <category term="QA" />
    <category term="extreme programming" />
    <category term="software" />
    <category term="httpcontext" />
    <category term="items" />
    <category term="session" />
    <category term="naming conventions" />
    <category term="variables" />
    <category term="self improvement" />
    <category term="301" />
    <category term="302" />
    <category term="fiddler" />
    <category term="infinite loop" />
    <category term="images" />
    <category term="iTextSharp" />
    <category term="PDF" />
    <category term="concatenation" />
    <category term="quirks" />
    <category term="parsing" />
    <category term="xhtml" />
    <category term="fonts" />
    <category term="stack" />
    <category term="htmltidy" />
    <category term="tables" />
    <category term="acrofields" />
    <category term="form fields" />
    <category term="outputstream" />
    <category term="pdfreader" />
    <category term="pdfstamper" />
    <category term="bind" />
    <category term="callbacks" />
    <category term="currying" />
    <category term="events" />
    <category term="business rules" />
    <category term="boolean" />
    <category term="fields" />
    <category term="methods" />
    <category term="object" />
    <category term="functions" />
    <category term="inheritance" />
    <category term="prototype" />
    <category term="hoist" />
    <category term="falsy" />
    <category term="truthy" />
    <category term="istanbul" />
    <category term="jasmine" />
    <category term="hoisting" />
    <category term="types" />
    <category term="type conversion" />
    <category term="dialog" />
    <category term="jQuery" />
    <category term="validation controls" />
    <category term="async" />
    <category term="each" />
    <category term="collapse" />
    <category term="expand" />
    <category term="load" />
    <category term="partial content" />
    <category term="tooltip" />
    <category term="regions" />
    <category term="limiting beliefs" />
    <category term="angular material" />
    <category term="linkedin" />
    <category term="social media" />
    <category term="tips" />
    <category term="CI. Continuous Integration" />
    <category term="magic numbers" />
    <category term="magic strings" />
    <category term="flex" />
    <category term="multiview" />
    <category term="wizard" />
    <category term="threading" />
    <category term="intern" />
    <category term="express" />
    <category term="node" />
    <category term="nunit" />
    <category term="object initializers" />
    <category term="video" />
    <category term="reflection" />
    <category term="unity" />
    <category term="best practice" />
    <category term="asp.net postback button" />
    <category term="iText" />
    <category term="property based testing" />
    <category term="cli" />
    <category term="software architecture" />
    <category term="rxjs. angular 2" />
    <category term="redirect" />
    <category term="response" />
    <category term="responsive design" />
    <category term="parallel" />
    <category term="selenium" />
    <category term="Marble Testing" />
    <category term="java" />
    <category term="grid" />
    <category term="hub" />
    <category term="serialization" />
    <category term="specflow" />
    <category term="like" />
    <category term="sql" />
    <category term="tsql" />
    <category term="where clause" />
    <category term="do while" />
    <category term="for next" />
    <category term="ms-sql" />
    <category term="while" />
    <category term="gamification" />
    <category term="paired programming" />
    <category term="reference types" />
    <category term="stringbuilder" />
    <category term="value types" />
    <category term="technical debt" />
    <category term="activetabindex" />
    <category term="postback" />
    <category term="tab control" />
    <category term="tabcontrol" />
    <category term="kata" />
    <category term="extjs" />
    <category term="email" />
    <category term="mailaddress" />
    <category term="mailmessage" />
    <category term="smtpclient" />
    <category term="Quality" />
    <category term="behavior" />
    <category term="psychology" />
    <category term="portal" />
    <category term="web 1.0" />
    <category term="web 2.0" />
    <category term="trace" />
    <category term="compiler" />
    <category term="errror" />
    <category term="warning" />
    <category term="connection string" />
    <category term="dataset" />
    <category term="error" />
    <category term="web.config" />
    <category term="tslint" />
    <category term="emotions" />
    <category term="hiring" />
    <category term="aspnet_regsql" />
    <category term="forms based authentication" />
    <category term="jsdom" />
    <category term="karma" />
    <category term="noTDD" />
    <category term="bundling" />
    <category term="gulp" />
    <category term="minification" />
    <category term="node.js" />
    <category term="file upload" />
    <category term="objects" />
    <category term="hide" />
    <category term="vb.net attributes" />
    <category term="nothing" />
    <category term="nullable" />
    <category term="conditional startup" />
    <category term="windows forms" />
    <category term="winforms" />
    <category term="char" />
    <category term="split" />
    <category term="strict" />
    <category term="clarity" />
    <category term="ui" />
    <category term="ux" />
    <category term="asmx" />
    <category term="error handling" />
    <category term="webservice" />
    <category term="binary" />
    <category term="bitwise" />
    <category term="operators" />
    <category term="automation" />
    <category term="browser" />
    <category term="mstest" />
    <category term="immutable" />
    <category term="global" />
    <category term="await" />
    <category term="webapi" />
    <category term="configuration" />
    <category term="devops" />
    <category term="testcasedata" />
    <category term="testcasesource" />
    <category term="closure" />
    <category term="loops" />
    <category term="certification" />
    <category term="mcsd" />
    <category term="microsoft" />
    <category term="inversion of control" />
    <category term="ioc" />
    <category term="casting" />
    <category term="convert" />
    <category term="arguements" />
    <category term="command line" />
    <category term="main" />
    <category term="yagni" />
    <category term="npm" />
    <category term="nvm" />
    <category term="resumes" />
    <category term="change-detection" />
    <category term="state-management" />
    <category term="web-workers" />
    <category term="libraries" />
    <category term="strong typing" />
    <category term="linting" />
    <category term="constructors" />
    <category term="clean code" />
    <category term="smart-ngrx" />
    <category term="ngrx-store" />
    <category term="ngrx-entity" />
    <category term="ngrx-effects" />
    <category term="TypeScript" />
    <category term="Performance" />
    <entry>
        <id>http://davembush.github.com/how-you-do-anything/</id>
        <title>How you do Anything ...</title>
        <link rel="alternate" href="http://davembush.github.com/how-you-do-anything/"/>
        <content type="html">&lt;p&gt;I’ve been programming now for 30 years. Over those thirty years, and more so over the last five to ten years, I’ve become increasingly frustrated by the attitude of managers and programmers alike toward programming. &lt;/p&gt;
&lt;p&gt;One programmer I know is pretty vocal about this attitude.  All he seems to care about is how fast he can write the code.  “I got that application done in a month!”  And then he’ll complain about how it is everyone else’s fault that he spent the next four months fixing bugs. &lt;/p&gt;
&lt;p&gt;And it is no wonder he has this attitude.  Most of the managers I’ve worked for will acknowledge that there is a lot of technical debt, but the pressure of getting the code written always outweighs the pressure of the debt. &lt;/p&gt;
&lt;p&gt;I’ve said for years that I’m not at all surprised that software has bugs.  What surprises me most is that any of our code works at all.  If we are honest about our code, we recognize that our code is worse than a store front on the wild west.  A nice facade on the front that everyone sees (if we are lucky) but look behind the facade and the store is barely standing up because the design, architecture and lumber is so bad. &lt;/p&gt;
&lt;p&gt;But, if it is true that “How you do anything is how you do everything.”  shouldn’t we spend a little time practicing quality in the not so obvious places so that we can get in the habit of quality?  Maybe a culture of quality will rub off into our code and produce code that really does get written quickly and has very little technical debt.  Not just in the area of bugs, but in flexibility, architecture, and design. &lt;/p&gt;
&lt;p&gt;So, what could we change in our programming practice that wouldn’t require persuading a manager to make a change in how the whole organization worked? &lt;figure&gt;&lt;img src=&#34;/uploads/2018/02/2018-02-20.jpg&#34; title=&#34;How you do anything...&#34;&gt; Photo on &lt;a href=&#34;//visualhunt.com/re/cecba2&#34;&gt;Visualhunt&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;How-do-you-Dress&#34;&gt;&lt;a href=&#34;#How-do-you-Dress&#34; class=&#34;headerlink&#34; title=&#34;How do you Dress?&#34;&gt;&lt;/a&gt;How do you Dress?&lt;/h2&gt;&lt;p&gt;When I first started programming, I had to wear a suit to work.  I forgot my tie one day and actually got reprimanded.  This, despite the fact that the programmers were tucked away in a back room that you had to know existed to get to.  That is, there was no way one of the customers our business worked with was going to find us.  I hated it. &lt;/p&gt;
&lt;p&gt;The pendulum has in the opposite direction.  I’ve been on several interviews where I’ve explicitly been told to NOT wear a suit. &lt;/p&gt;
&lt;p&gt;But I do wonder.  Does how we dress have an impact on our code?  If we don’t care much about how WE look, might we not care that much about what our code looks like?  Does it matter?  I think it might. &lt;/p&gt;
&lt;p&gt;Might it also subconsciously impact other’s view of the quality of code you produce?  You know the adage.  Always dress just below your manager.  But what if your manager dresses like a slob?  Currently, my signature work clothes are black jeans, button down shirt and a sweater.  But, I’m thinking of bumping it up a notch.&lt;/p&gt;
&lt;h2 id=&#34;What-does-your-desk-look-like&#34;&gt;&lt;a href=&#34;#What-does-your-desk-look-like&#34; class=&#34;headerlink&#34; title=&#34;What does your desk look like?&#34;&gt;&lt;/a&gt;What does your desk look like?&lt;/h2&gt;&lt;p&gt;There was a guy I worked with early on in my career who always left his desk in a condition that looked like no one had worked at the desk in months.  Everything was put away.  Several years ago, I decided to take on that habit. &lt;/p&gt;
&lt;p&gt;Funny story.  A couple of gigs ago, a manager from three levels up came down to visit after I had left for the day.  She looked at my desk and said, “Does anyone work here?”  My manager said, “YES!!! Don’t touch anything!”  Guess she was hunting for stray equipment. &lt;/p&gt;
&lt;p&gt;I would say, this simple act was the pivot point for me when I started to care more about my code beyond “Does it work?” &lt;/p&gt;
&lt;p&gt;There is something about working in a clean area slightly dressed up.  Other parts of your life follow along for the ride.&lt;/p&gt;
&lt;h2 id=&#34;Linters&#34;&gt;&lt;a href=&#34;#Linters&#34; class=&#34;headerlink&#34; title=&#34;Linters&#34;&gt;&lt;/a&gt;Linters&lt;/h2&gt;&lt;p&gt;One of those areas is what your code looks like.  A linter can be configured to enforce style rules on your code.  And can also catch dumb mistakes.  The more I use linters, the more convinced I am everyone should use one. &lt;/p&gt;
&lt;p&gt;Here is some of the ways you will benefit, even if you are the only one using a linter.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your code will always follow the same format.  This will make the code easier to read and understand.&lt;/li&gt;
&lt;li&gt;As I mentioned, some rules help catch dumb mistakes before you even run the code.&lt;/li&gt;
&lt;li&gt;Just like a clean desk feels inviting, well formatted code feels inviting.  The converse, poorly formatted code, adds to the stress level of working on the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Learn-Your-Tools&#34;&gt;&lt;a href=&#34;#Learn-Your-Tools&#34; class=&#34;headerlink&#34; title=&#34;Learn Your Tools&#34;&gt;&lt;/a&gt;Learn Your Tools&lt;/h2&gt;&lt;p&gt;I am amazed at how many places I’ve worked where they expect you to learn a particular tool on the fly.  No training.  “We are now using X on this next project.  Download it and start using it!”  And then they wonder why the project is such a disaster.  Bugs everywhere. &lt;/p&gt;
&lt;p&gt;Want to look like a rock star?  Want to be the guy the boss ask “what should we do?”  Be the guy who knows that new tool better than anyone else. &lt;/p&gt;
&lt;p&gt;In the process, you’ll also be the guy who uses the tool the way the people who developed that tool intended it to be used. &lt;/p&gt;
&lt;p&gt;Here’s a truth I’ve observed.  Everyone wants to use whatever tool they’ve just started using like the last tool they used.  And then, when it doesn’t, the new tool “doesn’t work.”  This one truth has done more to hold our industry back than any other one thing I can point to.&lt;/p&gt;
&lt;h2 id=&#34;Design-Patterns&#34;&gt;&lt;a href=&#34;#Design-Patterns&#34; class=&#34;headerlink&#34; title=&#34;Design Patterns&#34;&gt;&lt;/a&gt;Design Patterns&lt;/h2&gt;&lt;p&gt;Learn the basic design patterns for your environment.  But go beyond learning the pattern.  Learn why the pattern exist.  What problem does it solve?  Be able to recognize counterfeits.&lt;/p&gt;
&lt;h2 id=&#34;Architecture&#34;&gt;&lt;a href=&#34;#Architecture&#34; class=&#34;headerlink&#34; title=&#34;Architecture&#34;&gt;&lt;/a&gt;Architecture&lt;/h2&gt;&lt;p&gt;Along with Design Patterns, learn the basics of Architecture.  Here’s a hint.  All good architecture answers the question, “How can I write code that is not dependent on any other code?”  This is one of the reasons I love Functional Programming.  By design, Functional code is not dependent on other code.  Dependencies are passed into the function.  But you can achieve similar objectives using Object Oriented programming languages or even Procedural languages.&lt;/p&gt;
&lt;h2 id=&#34;Single-Responsibility&#34;&gt;&lt;a href=&#34;#Single-Responsibility&#34; class=&#34;headerlink&#34; title=&#34;Single Responsibility&#34;&gt;&lt;/a&gt;Single Responsibility&lt;/h2&gt;&lt;p&gt;Granular is better than Monolithic!  Don’t be afraid to split things up.  Use components.  Compose classes of other classes.  Components of other components.  And most important of all, don’t create a Utils class of any kind.  In some languages this is easier than others.  But if you can, any method you have in a Utils class should be a function in its own file.  If you can’t do that, maybe each function belongs in its own class unless there is a strong argument for putting them together in a class that can be reasonably named in a way that obviously groups those methods. &lt;/p&gt;
&lt;p&gt;Another pet peeve of mine is putting multiple classes or interfaces in one file. Split them up!  Don’t make me go hunting for the source of a class. &lt;/p&gt;
&lt;p&gt;The ONLY time you might be excused from splitting things up is if the only place the code is being used is in the file’s main class.  But once you make that class available to the outside world, out it comes.&lt;/p&gt;
&lt;h2 id=&#34;Alternate-Languages&#34;&gt;&lt;a href=&#34;#Alternate-Languages&#34; class=&#34;headerlink&#34; title=&#34;Alternate Languages&#34;&gt;&lt;/a&gt;Alternate Languages&lt;/h2&gt;&lt;p&gt;This should go without saying.  But the more languages you learn, the better programmer you will become.  I remember when I started learning C++, I had a hard time understanding references.  And then I started learning Clipper (a dBase III compiler) and something they said made references make sense suddenly. &lt;/p&gt;
&lt;p&gt;And this has been my experience all along.  Every new thing I learn helps me see problems in a slightly different perspective.  Making my code in every language I know that much better.&lt;/p&gt;
&lt;h2 id=&#34;Code-Reviews&#34;&gt;&lt;a href=&#34;#Code-Reviews&#34; class=&#34;headerlink&#34; title=&#34;Code Reviews&#34;&gt;&lt;/a&gt;Code Reviews&lt;/h2&gt;&lt;p&gt;So far, everything I’ve mentioned is something you can do on your own.  This last one will require at least one other person.  Maybe you can buddy up with someone at work for this. &lt;/p&gt;
&lt;p&gt;It amazes me that in 30 years of programming, only three of those years have been in an environment where my code was ever reviewed by someone else.  But getting another set of eyes on your code is helpful if for no other reason than someone else has had to try to understand what you did while you still remember instead of waiting years and you’ve forgotten or moved on.  None of us are as smart as all of us.  Take advantage of another pair of eyes on your code, even if that’s not a formal thing where you currently work.&lt;/p&gt;
</content>
        <category term="agile" />
        <category term="best practices" />
        <category term="extreme programming" />
        <updated>2018-02-20T11:30:35.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/the-myth-of-sloppy-code/</id>
        <title>The Myth of Sloppy Code</title>
        <link rel="alternate" href="http://davembush.github.com/the-myth-of-sloppy-code/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;Tightly coupled code runs faster.&lt;/li&gt;
&lt;li&gt;Tightly coupled code is easier to write.&lt;/li&gt;
&lt;li&gt;Test Driven Development increases development time.&lt;/li&gt;
&lt;li&gt;Test Driven Development negatively impacts code design.&lt;/li&gt;
&lt;li&gt;Knowing the names of design patterns isn’t important as long as you can use them.&lt;/li&gt;
&lt;li&gt;All my customer cares about is how soon they can have the product, not how clean the code is.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these statements, and others like them, are excuses for not writing code correctly. And you know what an excuse is, right?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The skin of a reason stuffed with a lie.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;![](/uploads/2016/10/image-1.png &#34;The Myth of Sloppy Code&#34;)&lt;figcaption&gt;Photo credit: [dynamosquito](//www.flickr.com/photos/dynamosquito/5866244470/) via [Visualhunt.com](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;  

&lt;p&gt;Now, I could go through and argue each of the points above. But today, I want to look more at the attitude behind these statements.&lt;/p&gt;
&lt;h2 id=&#34;It’s-All-in-Your-Head&#34;&gt;&lt;a href=&#34;#It’s-All-in-Your-Head&#34; class=&#34;headerlink&#34; title=&#34;It’s All in Your Head&#34;&gt;&lt;/a&gt;It’s All in Your Head&lt;/h2&gt;&lt;p&gt;Man is a funny being. We make decisions with our hearts and justify the decisions with our brains. Once you know this, you can hack it to your favor. But how does this relate to what we’ve been talking about? It is really quite simple. All of the best practices I’ve mentioned above require work to learn. We would rather not invest the time to learn how to do these well, and so rather than just saying, “this is not where I choose to spend my time right now” we say things like, “my management won’t let me do that” or “my way is more efficient” or at times, we even resort to vilifying the practice.&lt;/p&gt;
&lt;p&gt;I have the same issue when I try to convince management that their process needs to change. It took seven years for me to get one company to move their project management system from email to project management software. Why? Because what they were doing “worked” and they couldn’t see that doing something different would work better in any way.&lt;/p&gt;
&lt;h2 id=&#34;A-Skin-of-a-Reason&#34;&gt;&lt;a href=&#34;#A-Skin-of-a-Reason&#34; class=&#34;headerlink&#34; title=&#34;A Skin of a Reason&#34;&gt;&lt;/a&gt;A Skin of a Reason&lt;/h2&gt;&lt;p&gt;So, let’s look at the parts of these myths that are true.&lt;/p&gt;
&lt;p&gt;First, it is true that while you are learning how to use any one of these best practices, it will in fact, take you longer to write your code. Tightly coupled code is easier to reason about and one could argue is therefore easier to write. Test Driven Development is one of the most difficult things to learn. And just like the myth that Agile&amp;#x2F;Scrum&amp;#x2F;Kanban doesn’t work, the myth that Test Driven Development doesn’t work is largely based on misconceptions about what Test Driven Development is. Initially, it will impact the time it takes for you to write your code. But the more interesting argument to me is that testing negatively impacts design. If you mean that you can’t use the design you are used to using and that design involves writing tightly coupled code. Yeah, I guess it does.&lt;/p&gt;
&lt;p&gt;Implementing design patterns is better than not. It is true. But that doesn’t mean you shouldn’t learn the names.&lt;/p&gt;
&lt;p&gt;Yes, your customer cares about how fast you can get the project done. But, that isn’t all they care about.&lt;/p&gt;
&lt;h2 id=&#34;The-Lies&#34;&gt;&lt;a href=&#34;#The-Lies&#34; class=&#34;headerlink&#34; title=&#34;The Lies&#34;&gt;&lt;/a&gt;The Lies&lt;/h2&gt;&lt;p&gt;Just because something takes longer while you are learning how to do it, doesn’t mean it will always take longer. It probably took you a while to learn how to program proficiently too. That didn’t stop you did it? Does it take you as long to program now as when you first started? Of course not! Let’s look at this from another angle. As you’ve learned multiple languages, would you say that it made you a better or worse programmer? Unless you have a very strange perspective, you will probably answer better. Was the new language hard to learn? Of course. Did it take you longer to code using the new language than one you knew previously? Of course. Would you say the result of being proficient in both has made it easier or harder to code in both? Easier, right? Tightly coupled code is easier to write, but as the application grows, tightly coupled code becomes harder to add to and harder to maintain. It lends itself to code duplication and is more likely to be the code base that needs to be rewritten first.&lt;/p&gt;
&lt;p&gt;Tightly coupled code is also the hardest to tests and is probably the reason you don’t want to write test for your code. Because you write tightly coupled code, testing is MUCH harder than it should be. This leads you to have a firm belief that writing tests is hard as well. A vicious cycle.&lt;/p&gt;
&lt;p&gt;And if you believe that tightly coupled code is a proper design, you will believe that tightly coupled code hinders design. But in fact, writing tests will force you to write loosely coupled code. So, instead of hindering design, it actually helps it.&lt;/p&gt;
&lt;p&gt;I used to think not learning the correct names for design patterns didn’t matter. But the advantage of knowing the proper name for things is that we can all talk about something using the name rather than trying to explain what that thing is with lots of words. It saves time. But, there is another much more subtle reason why you need to learn the proper name for things. You might be calling a design pattern you are using by an incorrect name and confusing the people you are communicating with. And, finally, learning the names for all of the design patterns will expose you to design patterns you aren’t aware of, broadening your horizons.&lt;/p&gt;
&lt;p&gt;This last one is, or should be the most obvious. Getting the project done quickly isn’t ALL your customer cares about. It might be a relatively high priority, but I can assure you, if you explain to them that getting the project done as fast as possible will mean you have to rewrite the code if they want any changes, you’ll quickly find out that redoing work they’ve already paid for doesn’t sit well with them either.&lt;/p&gt;
&lt;h2 id=&#34;Benefits&#34;&gt;&lt;a href=&#34;#Benefits&#34; class=&#34;headerlink&#34; title=&#34;Benefits&#34;&gt;&lt;/a&gt;Benefits&lt;/h2&gt;&lt;p&gt;It is a sad, sad truth that by convincing yourself that not investing in these best practices really is best for you and the clients you work for, you’ve also limited yourself to the quality of client you can work for. The places that pay well expect you to know how to do this stuff. They believe in good design. They believe in testing. They know how to implement design patterns.&lt;/p&gt;
&lt;p&gt;And guess what, these places also pay better too. It raises you beyond the level of “commodity programmer” and into the level of “rare gem” How do I know? This past year I’ve been doing a lot of interviewing. For various reasons, I decided to interview for jobs that pay 25% better than what I currently make. In the beginning, I did this because I figured it would expose me to people more like myself who wanted to be better. In the process, I discovered that the interview process is a little harder, but not impossible. I figured out what I still need to learn. And, I managed to beat my goal. Time to notch it up a bit more.&lt;/p&gt;
&lt;h2 id=&#34;Are-You-Dead&#34;&gt;&lt;a href=&#34;#Are-You-Dead&#34; class=&#34;headerlink&#34; title=&#34;Are You Dead?&#34;&gt;&lt;/a&gt;Are You Dead?&lt;/h2&gt;&lt;p&gt;You hear stories all the time about people who can’t find work in our industry. When you ask, you find out that all they know is something that was hot 10 years ago or longer. Well, of course you can’t find a job. And it is no wonder the last company got rid of you. You provide no value.&lt;/p&gt;
&lt;p&gt;This past week I heard someone tell me the equivalent of, “I’m not going to learn anything new. Every time I do, it ends up being hot for a few years and then it is gone.” I was stunned. I fear for this guy. You might as well say, “I’m planning to retire in 10 years or less.” because that is what will happen to you. Worse, if you stop learning completely, you could end up with dementia or worse.&lt;/p&gt;
&lt;p&gt;My plan is to program until I’m at least 75. Longer if I stay healthy enough. Even if I could retire, I won’t. What would I do? I love programming. I love mentoring other programmers. I love learning new stuff.&lt;/p&gt;
&lt;h2 id=&#34;Do-hard-stuff&#34;&gt;&lt;a href=&#34;#Do-hard-stuff&#34; class=&#34;headerlink&#34; title=&#34;Do hard stuff&#34;&gt;&lt;/a&gt;Do hard stuff&lt;/h2&gt;&lt;p&gt;And so what’s the point of all this? Do hard stuff. It will make you a better programmer.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="agile" />
        <category term="design patterns" />
        <updated>2016-10-18T10:30:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/how-to-sabotage-estimates/</id>
        <title>How to Sabotage Estimates</title>
        <link rel="alternate" href="http://davembush.github.com/how-to-sabotage-estimates/"/>
        <content type="html">&lt;p&gt;Over the last week, I’ve been helping other programmers estimate the task they’ve been assigned and this has caused me to reflect on how I estimate software.  What works.  What doesn’t.  What mistakes I see people make.&lt;/p&gt;
&lt;p&gt;There has also been a move to avoid estimates entirely.  The argument goes something along the lines of, “we know the least about a project at the beginning of the project, so we can’t really give an accurate estimate.”  Which is mostly true.  And yet, there are people who need to know “how much is this going to cost?”  What do we do for them?  How do we balance the two realities? And then all of this lead me to think of all the ways we sabotage our estimates, or our estimates are sabotaged for us.&lt;/p&gt;
&lt;p&gt;You might think that estimating projects only applies to project managers.  But the truth is, most places I have worked rely on programmers to give them estimates, and frankly, most of us screw this up.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/08/image-1.png &#34;How to Sabotage Estimates&#34;)&lt;figcaption&gt;Photo credit: [Musée McCord Museum](//www.flickr.com/photos/museemccordmuseum/2918567169/) via [Visual hunt](//visualhunt.com/photos/people/) / [No known copyright restrictions](//flickr.com/commons/usage/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Working-Backwards-from-a-Date&#34;&gt;&lt;a href=&#34;#Working-Backwards-from-a-Date&#34; class=&#34;headerlink&#34; title=&#34;Working Backwards from a Date&#34;&gt;&lt;/a&gt;Working Backwards from a Date&lt;/h2&gt;&lt;p&gt;This is the most obvious, I think, so we’ll get it out of the way first.  But it has some permutations that aren’t quite so obvious that we need to examine as well.&lt;/p&gt;
&lt;p&gt;Now, I get it.  There are some cases where there is a specific end date.  Something that is out of your control is happening on a specific date.  If you don’t deliver the software by that time, then you might as well not create it.  But, in that case, you have to take the golden triangle into consideration.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can have it on a specific date.&lt;/li&gt;
&lt;li&gt;You can do it all.&lt;/li&gt;
&lt;li&gt;You can do it within budget.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, even each of these have limitations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You might be able to release something on a specific date, but it may not be all that was intended.&lt;/li&gt;
&lt;li&gt;Even if you could buy all of the resources you needed, which is hardly ever possible, there will be limitations to using all of the resources.&lt;/li&gt;
&lt;li&gt;If you have a limited budget, doing it all will probably suffer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is where using Scrum has a huge advantage.  Because at least using Scrum, you are constantly picking the next most valuable feature to implement and each feature is released in a potentially deliverable state.  This is quite unlike the project I’m working on where components are being worked on that we can’t even really test because they get called by something that has yet to be built.  Grant it, they’ll eventually be needed to have a viable product, but it is really hard to argue they are the NEXT most valuable feature when they can’t even be tested.&lt;/p&gt;
&lt;p&gt;Now, if you are working backward from a date, this could work if you add more resources, or you cut features.  I’ve worked in some organizations that were really good about figuring out what could be done and making sure the client was on board with the fact that we would only deliver that much.  But there have been other organizations where every time I suggested we not deliver a feature, I’ve been given a hundred reasons why that couldn’t be done.  Needless to say, those projects are doomed.&lt;/p&gt;
&lt;p&gt;Working backwards from a date is largely a management issue or a client issue.  But as they ask programmers for dates in light of the date, I find programmers are inclined to try to give numbers they think their managers want to hear rather than what they expect can really be done.&lt;/p&gt;
&lt;h2 id=&#34;Going-with-Your-Gut&#34;&gt;&lt;a href=&#34;#Going-with-Your-Gut&#34; class=&#34;headerlink&#34; title=&#34;Going with Your Gut&#34;&gt;&lt;/a&gt;Going with Your Gut&lt;/h2&gt;&lt;p&gt;The next most dangerous way of providing an estimate is to just go with your gut feel.  Here’s the thing about your gut.  It’s pretty optimistic.&lt;/p&gt;
&lt;p&gt;I find that everything takes about twice as long as I think it will.  I’ve worked for some people who I quickly learned were only describing half of the project.  In those cases, I’d be off by a factor of four.&lt;/p&gt;
&lt;p&gt;So, I’ve learned to compensate.  Whenever I’m asked for a “rough estimate” I always double whatever my gut thinks.  In some cases, I’ll pad even more.&lt;/p&gt;
&lt;p&gt;But the right thing to do would be to spend a few hours and break the project down into task that take less than a day.  Ideally you want to break those tasks down into half day sized tasks.  Once you have all of the tasks spelled out, you can add up the hours and you’ll have a pretty good idea of just how long the project will take you.&lt;/p&gt;
&lt;p&gt;If you are working in an office, don’t forget to account for meetings, helping others, and other tasks that tend to happen over the course of a week when you provide the date you plan to be done.  Otherwise, you’ll find you’ll end up having gotten the hours right but still end up being late.&lt;/p&gt;
&lt;p&gt;How do you break the plan down?  What I do is I ask a very obvious questions.  What’s the next thing I would need to do? Let’s assume we are starting a new feature.  If you were to sit down and code that feature right now, what is the next thing you’d have to do to code that feature?  It might be, “setup the programming environment” or “setup version control” or “get a test harness in place” or “create a branch from version control” it doesn’t matter that it might take a half an hour to do.   That’s actually good.  Just don’t let it be so big of a task that it is going to take you several days to complete.&lt;/p&gt;
&lt;p&gt;Next, assuming you’ve done the tasks so far, what is the next thing you’ll need to do.&lt;/p&gt;
&lt;p&gt;You just keep doing this until you have a set of task that fit within the half day sized and all fully describe the steps you will take to get the project done.  While breaking task down this way will get you a much more accurate number, I’ve found that I still need to double the time I think it will take.  Especially if I know little or nothing about the project I’m getting in to.  The more you learn about the project, the less padding you should need to do.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-Plan-for-the-Unknown&#34;&gt;&lt;a href=&#34;#Don’t-Plan-for-the-Unknown&#34; class=&#34;headerlink&#34; title=&#34;Don’t Plan for the Unknown&#34;&gt;&lt;/a&gt;Don’t Plan for the Unknown&lt;/h2&gt;&lt;p&gt;But in every project, there will still be some unknowns.  In fact, this past week, I hit one of those.  When I put it on my task list, I put it in as 8 hours figuring there would probably be some refactoring I’d need to do.  But when I got to it, what I found was that the refactoring project was a lot bigger than I had expected.&lt;/p&gt;
&lt;p&gt;In this case, the best thing to do is to raise this new information to the team and adjust your estimate based on the new information.&lt;/p&gt;
&lt;p&gt;At the end of the day, I don’t expect this will actually impact my delivery date because some of my other task are going faster than I was expecting, but I’m still adjusting my estimates to document the fact that it had to be done.&lt;/p&gt;
&lt;h2 id=&#34;Forget-Who-Is-Asking&#34;&gt;&lt;a href=&#34;#Forget-Who-Is-Asking&#34; class=&#34;headerlink&#34; title=&#34;Forget Who Is Asking&#34;&gt;&lt;/a&gt;Forget Who Is Asking&lt;/h2&gt;&lt;p&gt;Most people I work for give me pretty accurate descriptions of the problem I’m going to work on.  I can safely double the amount of time I think it will take and I generally hit my dates.&lt;/p&gt;
&lt;p&gt;But occasionally, there is that client who only tells you half of what he’s actually thinking.  You’ll learn who that is in your life soon enough.  You can either complain that you didn’t get complete enough requirements.  Or you can plan on the requirements being incomplete and pad your estimates accordingly.&lt;/p&gt;
&lt;p&gt;Telling your client or manager (who is your client in most cases) that they did it wrong, may not be the most prudent way of dealing with this issue.  I opt for padding the estimates.&lt;/p&gt;
&lt;h2 id=&#34;Working-from-a-Summary&#34;&gt;&lt;a href=&#34;#Working-from-a-Summary&#34; class=&#34;headerlink&#34; title=&#34;Working from a Summary&#34;&gt;&lt;/a&gt;Working from a Summary&lt;/h2&gt;&lt;p&gt;This kind of gets back to the last two points, but it needs to be called out separately.&lt;/p&gt;
&lt;p&gt;You see, most of the time you’ll be asked for an estimate with enough information to make the call.  But there are other times all you’ll have is a working summary.  I find it best in this case to give the person asking for the estimate such a wide estimate (1 – 8 hours) that it is worthless for anything other than a rough ballpark idea of how much effort the project will take and explain that I would need more information to give a better estimate.&lt;/p&gt;
&lt;p&gt;Most people are pretty understanding when you explain this correctly.  Whatever you do, don’t give a fixed number that you can’t adjust up and down as you discover more information.  In fact, even when you have more information, you should always give your estimates in terms of ranges of time.&lt;/p&gt;
&lt;h2 id=&#34;Assume-it-Will-Work&#34;&gt;&lt;a href=&#34;#Assume-it-Will-Work&#34; class=&#34;headerlink&#34; title=&#34;Assume it Will Work&#34;&gt;&lt;/a&gt;Assume it Will Work&lt;/h2&gt;&lt;p&gt;Even the seasoned programmers make this mistake.  I know one guy who brags about how quickly he can write the code.  But he completely ignores the fact that while he spent a month writing the code, he’s spent three months getting it past the QA department.  So, did he really get the project done it a month?  Oh and those bugs?  God help you if you suggest those bugs are HIS fault! But, I find we all tend to do this in some way or another.&lt;/p&gt;
&lt;p&gt;All I want to say about this here is this.  You can either plan to test your code using some sort of test framework or you need to plan to fix bugs.  Which you plan for is up to you, but those of you who have followed my blog know I’m going to tell you that you’ll save a lot of time if you plan to write and execute tests.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;I’m sure many of you could have written a post like this.  So, I invite you to add to it in the comments below.&lt;/p&gt;
</content>
        <category term="programming" />
        <category term="estimating" />
        <category term="software" />
        <updated>2016-08-23T10:30:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/how-not-to-choose-a-framework/</id>
        <title>How Not to Choose a Framework</title>
        <link rel="alternate" href="http://davembush.github.com/how-not-to-choose-a-framework/"/>
        <content type="html">&lt;p&gt;In my job as a JavaScript architect, trainer and mentor, I’m often asked, “What’s your favorite framework?”  Or “What is the best framework?” And it surprises people when I give them two answers to that question.&lt;/p&gt;
&lt;p&gt;Right now, of the frameworks I’ve looked at, my favorite framework is &lt;a href=&#34;/tags/react-js/&#34;&gt;React JS&lt;/a&gt;.  But if I were picking a corporate framework, at this point I’d probably land on &lt;a href=&#34;/angular-2-first-impressions-compared-to-angular-1/&#34;&gt;Angular 2.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But the question you are probably asking is , “Why two different selections?”  And, I think a more interesting question would be, “How did you select which one to use?” In fact, when I was thinking about writing this post, I was going to title it “How to Choose a JavaScript Framework” but as I considered what I would actually say, I realized that the factors I would use really apply to any language and any time.&lt;/p&gt;
&lt;p&gt;But an even more interesting question is this.  What factors are essential when picking out a framework.  If I ignored these questions, what are the cost? So, I give you…&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/05/image-3.png &#34;How Not to Choose a Framework&#34;)&lt;figcaption&gt;Photo credit: [Tony Webster](//www.flickr.com/photos/diversey/980101167/) via [Visual hunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;How-Not-to-Choose-a-Framework&#34;&gt;&lt;a href=&#34;#How-Not-to-Choose-a-Framework&#34; class=&#34;headerlink&#34; title=&#34;How Not to Choose a Framework&#34;&gt;&lt;/a&gt;How Not to Choose a Framework&lt;/h2&gt;&lt;p&gt;As we progress, I’ll mention frameworks I have experience with.  To be fair, I will let you know my preferences.&lt;/p&gt;
&lt;p&gt;In order, the frameworks I would prefer to use would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React JS&lt;/li&gt;
&lt;li&gt;Angular 2&lt;/li&gt;
&lt;li&gt;Angular 1&lt;/li&gt;
&lt;li&gt;Ext JS 5 or 6&lt;/li&gt;
&lt;li&gt;Ext JS 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I were going to recommend a framework for a large enterprise organization, the order would be slightly different:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Angular 2&lt;/li&gt;
&lt;li&gt;Angular 1&lt;/li&gt;
&lt;li&gt;Ext JS 5 or 6&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Ext JS 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this in mind, here’s what you should pay attention to.&lt;/p&gt;
&lt;h2 id=&#34;Who-Will-Use-The-Framework&#34;&gt;&lt;a href=&#34;#Who-Will-Use-The-Framework&#34; class=&#34;headerlink&#34; title=&#34;Who Will Use The Framework?&#34;&gt;&lt;/a&gt;Who Will Use The Framework?&lt;/h2&gt;&lt;p&gt;At the organization I am working at now, most of the people there are Java programmers.  This means that programming in JavaScript, of any flavor, is going to be as much as a mind-shift as moving from C to C++ or C++ to Java or C#.  Yes, there are similarities to what they are used to, but there are enough differences to consider that you’ll probably gravitate toward a framework that allows them to not have to worry about those differences.  On this point Ext or Angular 2 are probably going to rise to the surface because they, more than any other framework, allow you to work with JavaScript more like it was like Java or C# than any other framework I know about.&lt;/p&gt;
&lt;h2 id=&#34;How-Steep-is-The-Learning-Curve&#34;&gt;&lt;a href=&#34;#How-Steep-is-The-Learning-Curve&#34; class=&#34;headerlink&#34; title=&#34;How Steep is The Learning Curve?&#34;&gt;&lt;/a&gt;How Steep is The Learning Curve?&lt;/h2&gt;&lt;p&gt;Related to who will use the framework is how long will it take them to learn the framework?  For this, you are going to want to look at things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can I buy support so I can get my questions answered?&lt;/li&gt;
&lt;li&gt;How clear is the documentation?&lt;/li&gt;
&lt;li&gt;How popular is the framework?&lt;/li&gt;
&lt;li&gt;Do I already have an expert on my team?&lt;/li&gt;
&lt;li&gt;Is there a public Slack channel for this framework?&lt;/li&gt;
&lt;li&gt;Do the people behind the framework care about the Enterprise?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On this point, depending on the experience of your developers, Ext JS and Angular 2 are probably going to surface as the clear winners while React is going to end up at the very bottom.  As much as I love it personally, I have to admit that learning it has taken me the most amount of time.&lt;/p&gt;
&lt;h2 id=&#34;How-Opinionated-is-the-Framework&#34;&gt;&lt;a href=&#34;#How-Opinionated-is-the-Framework&#34; class=&#34;headerlink&#34; title=&#34;How Opinionated is the Framework?&#34;&gt;&lt;/a&gt;How Opinionated is the Framework?&lt;/h2&gt;&lt;p&gt;I remember when VB 1.0 was first introduced.  The reason everyone gave me for why I should love this new development environment was, “Look how fast I can get something up and running.” Well, yes, but… VB let you write code any way that got the job done.  And coming from C++ and MFC and prior to that, OWL from Borland, I recognized that even though you could still write crappy code using a framework that provided some structure, the amount of crappy code you wrote was inversely proportional to the amount of structure the framework provides.&lt;/p&gt;
&lt;p&gt;When you are working with a large team of developers, something needs to be in place to ensure they are writing code in a highly structured way rather than just getting the job done.&lt;/p&gt;
&lt;p&gt;Once again, this places Angular 2 at the top of the pile of the ones I’ve actually worked with.  Ext sinks to the bottom of the pile.  While Ext does implement something they call MVC and MVVM, they don’t protect the developer from coding outside of what those design patterns are supposed to look like.  In the case of MVC, I’m not even sure the people who wrote it know what MVC is.&lt;/p&gt;
&lt;h2 id=&#34;Industry-Standards&#34;&gt;&lt;a href=&#34;#Industry-Standards&#34; class=&#34;headerlink&#34; title=&#34;Industry Standards&#34;&gt;&lt;/a&gt;Industry Standards&lt;/h2&gt;&lt;p&gt;The easiest way for me to illustrate what I mean here is to point out a few ways this gets violated with the existing frameworks.&lt;/p&gt;
&lt;p&gt;In order to make Ext work more like a desktop development environment, they generate the HTML for you and use their own layout mechanism to control where the various elements appear on the screen.  Every other framework I’ve mentioned lets you control the layout using CSS.  The advantage to Ext is that I don’t have to know HTML or CSS in order to get a screen up that looks nice.  The down side is that if I want to do anything just a bit out of the Ext box, I quickly become frustrated.  It also takes more time to render a screen than if I were using HTML and CSS.  This is particularly true if your components are nested more than 3 deep.&lt;/p&gt;
&lt;p&gt;Further, Ext has enabled JavaScript to look more like Java and C# than JavaScript by implementing a proprietary mechanism for defining a class.  What continually worries me is how well this will continue to work as the ECMAScript standards evolve and provide there own mechanisms for achieving the same results.&lt;/p&gt;
&lt;p&gt;Ext also (sorry, but Ext is the primary violator of this point) uses its own proprietary build process.  It is possible to circumvent their build process for most things.  But the question one has to ask is, “why can’t you just use standards like gulp, grunt or npm scripts?” Even though Angular 2 primarily uses TypeScript, the difference between Angular 2 and Ext is that 1) you don’t HAVE to use TypeScript even though it is highly encourages and 2) TypeScript only implements features that look like they are going to eventually end up in the ECMAScript standards.  So, it is a lot more future proof while adding a lot of the same features that Ext implements in a more proprietary fashion.&lt;/p&gt;
&lt;p&gt;Another framework where this kind of shows up is with React JS.  While everything about building the app is built using industry standards, the unit testing framework doesn’t allow you to use Karma as your test running.  There is another more proprietary implentation called Jest.  However, I also don’t have to use PhantomJS to gets my components.  I wish I could have both.&lt;/p&gt;
&lt;h2 id=&#34;How-Testable-Is-It&#34;&gt;&lt;a href=&#34;#How-Testable-Is-It&#34; class=&#34;headerlink&#34; title=&#34;How Testable Is It?&#34;&gt;&lt;/a&gt;How Testable Is It?&lt;/h2&gt;&lt;p&gt;Anyone who is familiar with my history of posts, who know me personally, know &lt;a href=&#34;/tags/tdd&#34;&gt;I am a huge proponent of TDD&lt;/a&gt;. So, any framework I use has to allow me to unit test. This is why Ext JS 4 ends up dead last on my list. You would think that a framework that says they implement MVC would allow you to test the controller without have the view attached. That’s one of the points of MVC. But Ext doesn’t allow this.&lt;/p&gt;
&lt;p&gt;On the other end of the spectrum, React is testable all the way down. This is why I love it. The only reason I don’t consider it the right choice for the enterprise is because it takes so long to learn and the documentation isn’t very well done.&lt;/p&gt;
&lt;h2 id=&#34;Doing-The-Research&#34;&gt;&lt;a href=&#34;#Doing-The-Research&#34; class=&#34;headerlink&#34; title=&#34;Doing The Research&#34;&gt;&lt;/a&gt;Doing The Research&lt;/h2&gt;&lt;p&gt;OK.  So, this is what you should look for, but when you are looking at the frameworks, how would you know?  Most of this information is only stuff you would find out after your programmers started using the framework.&lt;/p&gt;
&lt;p&gt;One way you can find out is to find people who have used the various frameworks you have under consideration.  One of my first test would be, “How much information can I find on the Internet about this framework?”My second question would be, “How popular is this framework?” and then finally I would look for people who don’t like the framework and try to determine if their points are valid.&lt;/p&gt;
&lt;h2 id=&#34;How-Not-to-Pick-a-Framework&#34;&gt;&lt;a href=&#34;#How-Not-to-Pick-a-Framework&#34; class=&#34;headerlink&#34; title=&#34;How Not to Pick a Framework&#34;&gt;&lt;/a&gt;How Not to Pick a Framework&lt;/h2&gt;&lt;p&gt;If you want to pick the wrong framework, trust the sales literature.  Don’t ask any question.  Ignore the points above.&lt;/p&gt;
&lt;p&gt;Ultimately regret your decision.&lt;/p&gt;
</content>
        <category term="javascript" />
        <category term="react.js" />
        <category term="ext js" />
        <category term="angular.js" />
        <updated>2016-06-02T10:30:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/5-reasons-learning-terminology-increases-your-effectiveness-as-a-programmer/</id>
        <title>5 Reasons Learning Terminology Increases Your Effectiveness [As A Programmer]</title>
        <link rel="alternate" href="http://davembush.github.com/5-reasons-learning-terminology-increases-your-effectiveness-as-a-programmer/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/08/image3.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;A couple of weeks ago I wrote a post “&lt;a href=&#34;/7-c-interview-questions-that-weed-out-the-losers/&#34;&gt;7 C# Interview Questions to Weed out Losers&lt;/a&gt;” which was my most popular post yet.  As of this writing, it has received over 13,000 views.  It also got a lot of comments.&lt;/p&gt;
&lt;p&gt;While there are a lot of things I could respond to, the one I want to focus on today is what I would call, “The fallacy of concepts over terminology.” While none of the comments actually come out and say this, several imply that knowing the concept but not knowing the proper term for it is enough.  In conversations with people I’ve worked with, I’ve received similar feedback.  In fact, as recent as three years ago I actually told someone, “If you want someone who can pass some sort of test, I’m probably not your guy.  If you want someone who is an awesome programmer, I’m your guy.” But three more years of experience has changed my mind.&lt;/p&gt;
&lt;h2 id=&#34;Knowing-the-Proper-Terms-Clarifies-Communication&#34;&gt;&lt;a href=&#34;#Knowing-the-Proper-Terms-Clarifies-Communication&#34; class=&#34;headerlink&#34; title=&#34;Knowing the Proper Terms Clarifies Communication&#34;&gt;&lt;/a&gt;Knowing the Proper Terms Clarifies Communication&lt;/h2&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;blockquote&gt;
&lt;p&gt;“’When &lt;strong&gt;I&lt;/strong&gt; use a word,’ Humpty Dumpty said, in rather a scornful tone, ‘it means just what I choose it to mean — neither more nor less.’” – Through the Looking Glass, by Lewis Carroll&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are just a few examples of how knowing what a term actually means helps communication: As I’ve written before, I’ve been using Sencha’s EXTjs at my day job.  When I first started using this environment, the first thing I was told was that it uses the “MVC Architecture.”  Now, to me, MVC has a very specific meaning and more importantly implies certain qualities about how the code should be written.  Primary among them is that the Model, View, and Controller are loosely coupled.  Anyone who has used EXTjs 4 knows this is not necessarily true.  What they call the “Controller” is more accurately called a “ViewController” but even then, it isn’t really.  You can’t have a controller without having a view, which makes the whole thing quite hard to test.  This whole mislabeling thing set me back about two weeks in my attempt to learn the framework.&lt;/p&gt;
&lt;p&gt;Another example from my work place.  We’ve created our own ORM to access the DB2 database we have to work with.  Why?  Because DB2 doesn’t play nice with Entity Framework.  But here again, I was told that this code implemented a design pattern that it doesn’t really implement.  Since the number of times I have to interact with this code is trivial, it was not as costly to my learning.  But it did cause confusion.&lt;/p&gt;
&lt;p&gt;Probably the most notable misuse of a word in our industry is the word “Agile.”  As I’ve been interviewing, I’ve run into a lot of companies who call themselves “Agile” but I’ve found that what they mean by “Agile” is very different from how the Agile Manifesto defines Agile.  In fact, one of the questions I ask during the interview to companies who have promoted themselves as “Agile” is, “How do you define Agile?”  One of the first places I asked this question replied, “Oh that just means we program iteratively.” So, knowing the proper term for a concept, makes your communication clear.  But that doesn’t explain why I expect someone I’m interviewing to know the term I’m using.&lt;/p&gt;
&lt;h2 id=&#34;Knowing-the-Proper-Term-Shortens-Communication&#34;&gt;&lt;a href=&#34;#Knowing-the-Proper-Term-Shortens-Communication&#34; class=&#34;headerlink&#34; title=&#34;Knowing the Proper Term Shortens Communication&#34;&gt;&lt;/a&gt;Knowing the Proper Term Shortens Communication&lt;/h2&gt;&lt;p&gt;Way back when I was first learning object oriented programming with C++, someone asked me what polymorphism was.  I couldn’t answer because I’d never heard of the word or hadn’t taken the time to find out what it means.  I can’t remember exactly.  But I had the same reaction many of you did.  “I know what virtual functions are and I know how to give a function multiple implementations by changing the signature, I just don’t know the word for it.” But you see, it is much easier to ask, “What is polymorphism?”  Than it is to ask, “What do the keywords ‘overridable’, and ‘overrides’ do?”  And then have to follow up with “what does the ‘new’ keyword do when placed in front of a method declaration?” Spoken languages have terms for the various parts of speech.  If you are a programmer, I’m sure you know about this, even if you can’t name them.  But, let’s say you were a professional writer or an editor.  You probably wouldn’t be able to even get a job if you couldn’t talk about the various parts of speech using the proper terms.  And yet, many of us expect that we should be allowed to write code without having the same ability.&lt;/p&gt;
&lt;p&gt;Which leads to my next reason.&lt;/p&gt;
&lt;h2 id=&#34;Knowing-the-Proper-Term-Aids-in-Learning&#34;&gt;&lt;a href=&#34;#Knowing-the-Proper-Term-Aids-in-Learning&#34; class=&#34;headerlink&#34; title=&#34;Knowing the Proper Term Aids in Learning&#34;&gt;&lt;/a&gt;Knowing the Proper Term Aids in Learning&lt;/h2&gt;&lt;p&gt;My family is a languages family.  My wife knows English, French, Latin (from teaching the kids), and Biblical Greek.  My daughter was an English major and learned Latin during High School.  My oldest son, knows English, Latin, Greek, and a bit of German.  My youngest son knows English, Latin, a bit of Greek and German.  I barely know English well enough to get these post written every week.  Which gives me a unique perspective.&lt;/p&gt;
&lt;p&gt;What I’ve learned as I’ve watched my family play with languages is that because they know the parts of speech in the various languages, as they pick up a new language, they can talk about a word being in a particular tense, or case, or whatever and everyone knows exactly what they are saying, making it that much easier to pick up a new language.&lt;/p&gt;
&lt;p&gt;In fact, while my son was learning German in High School, he would come home and talk to his mom and sister in German and they would be able to make out most of what he was saying because they had enough back ground in other languages and when they didn’t know something they could talk about it using the terms for the various parts of speech.&lt;/p&gt;
&lt;p&gt;This was true for me as I moved from C++ to Java and then to C# and VB.NET.  Because I already knew what polymorphism was, all I needed to know was the mechanisms in the other languages that made that feature happen.&lt;/p&gt;
&lt;h2 id=&#34;If-You-Know-the-Terminology-You-Probably-Know-the-Concept&#34;&gt;&lt;a href=&#34;#If-You-Know-the-Terminology-You-Probably-Know-the-Concept&#34; class=&#34;headerlink&#34; title=&#34;If You Know the Terminology, You Probably Know the Concept&#34;&gt;&lt;/a&gt;If You Know the Terminology, You Probably Know the Concept&lt;/h2&gt;&lt;p&gt;One of the complaints I got specifically accused me of asking questions that only proved that the applicant could pass a test.  And this is true.  If all I were to ask were these questions, this would be a bad interview indeed.  But here’s what I’ve found.  Most of the time, if you can answer the questions I’ve asked in that article, you are much more likely to be able to answer the questions I really care about.  “Are you a hack, or do you really know what you are doing?” The market is flooded with programmers with less than 5 years of experience being presented by recruiters who know nothing about programming.&lt;/p&gt;
&lt;p&gt;Using the metric of charity over what I see coming in for interviews, here is what I think is happening.&lt;/p&gt;
&lt;p&gt;Recruiter sees an applicant that has most of the buzzwords on his resume that the company they are recruiting for is looking for.  But they are missing a critical buzzword, so the recruiter adds this prior to passing the resume on.&lt;/p&gt;
&lt;p&gt;Having been on a lot of interviews over the years, I have to assume that this works enough of the time to make it worthwhile because there are some places that I’ve interviewed where I haven’t had to prove I was technically capable at all.  In fact, I’ve been on a few interviews where the resume they have for me doesn’t look anything like what I gave the recruiter.&lt;/p&gt;
&lt;p&gt;And so, those of us on the receiving end of this have to have some quick way of determining, “do you know anything?”&lt;/p&gt;
&lt;h2 id=&#34;Knowing-the-Concept-Isn’t-Enough&#34;&gt;&lt;a href=&#34;#Knowing-the-Concept-Isn’t-Enough&#34; class=&#34;headerlink&#34; title=&#34;Knowing the Concept Isn’t Enough&#34;&gt;&lt;/a&gt;Knowing the Concept Isn’t Enough&lt;/h2&gt;&lt;p&gt;Keep in mind, I used to think that knowing the concept WAS enough.  But what I’ve come to realize is that if I know a concept but I don’t know the proper terms for it, I probably don’t know the concept as well as I could.  Sure, I can write code all day long.  But, it doesn’t mean I will write the best code that I can.  It just means that I’ll get the job done.&lt;/p&gt;
&lt;p&gt;But once I spend the time to learn not just the concept, but the words that describe the concept, I’ve become a student of my craft.  I’ve proven that this is more than a job.  I’ve become a true professional.  Anything less and I’ve proven that I’m a really good hack at best.&lt;/p&gt;
&lt;p&gt;I realize that this may offend some of you.  So, let me soften this.  I’m not saying you are a bad programmer if you don’t know the proper terms for what you are doing.  What I’m saying is you aren’t as good of a programmer as you could be.  And for those of you who might disagree, the question I have to ask is, “how do you know?”  If you are still defending not having to know this, I have to make the assumption that it is because you are happy not knowing the terms.  Meaning you have nothing to compare where you are to where I am proposing that you should be.  Why not try becoming a student of programming and seeing for yourself if what I am saying has any merit or not.&lt;/p&gt;
</content>
        <category term="programming" />
        <category term="learning" />
        <updated>2015-08-27T11:30:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/15-ways-to-write-beautiful-code-that-have-nothing-to-do-with-testing/</id>
        <title>15 Ways To Write Beautiful Code [That Have Nothing To Do With Testing]</title>
        <link rel="alternate" href="http://davembush.github.com/15-ways-to-write-beautiful-code-that-have-nothing-to-do-with-testing/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/08/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;I got a question this last week that I answered very briefly but I felt that to answer it completely would take a blog post.  So here’s the blog post.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Should the author of a piece of code be responsible for more than just unit testing, or does peer review have a play?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Loaded question, right?  Obviously, the guy asking this question believes that an author should both unit test AND have peer review.  And I agree.  But to limit the role of a programmer to even those two things is a very narrow view of programming. Then I got to thinking about it and realized that most of what we’d be trying to accomplish with a code review encompasses everything we’d want to include in a list of things a developer is responsible for.  Further, a code review is mostly a review that ensures that 1) the code does what it is supposed to do, and 2) the code is easy to maintain in the future.&lt;/p&gt;
&lt;p&gt;In other words, all that the word “Peer review” or “Code review” encompasses is largely about code clarity.&lt;/p&gt;
&lt;p&gt;Code clarity addresses the issue we all have when we pick up a new piece of code.  Can you understand it easily?  I just listened to a &lt;a href=&#34;//dotnetrocks.com/default.aspx?showNum=1172&#34;&gt;DotNetRocks episode&lt;/a&gt; that was all about the fact that we spend most of our time reading code and yet no one is talking about how we might do this better.  One way we can read code better is by writing it more clearly in the first place.&lt;/p&gt;
&lt;p&gt;Here are 15 ways you can make your code easier to read:&lt;/p&gt;
&lt;h2 id=&#34;Make-your-code-pretty&#34;&gt;&lt;a href=&#34;#Make-your-code-pretty&#34; class=&#34;headerlink&#34; title=&#34;Make your code pretty&#34;&gt;&lt;/a&gt;Make your code pretty&lt;/h2&gt;&lt;p&gt;I remember back when I was doing Clipper programming, we had one guy who would always show code that was ready to be printed in a text book.  I mean, regardless of what you had to say about what he had actually coded, the visual presentation of the code was a thing of beauty.  He had us believing that all of his code looked like that.  Then he went to work for some other company and we actually looked at the other code he had written.  It looked just like any other code.&lt;/p&gt;
&lt;p&gt;But it taught me a lesson.  A lesson I, unfortunately still need to be reminded of.  Pretty code is easier to maintain and implies a lot about the quality of the code.  Just like you wouldn’t go to an interview without wearing a suit because how you dress implies something about how you’ll program, your code should imply the quality by what it looks like before you ever start reading it.&lt;/p&gt;
&lt;h2 id=&#34;Establish-and-obey-naming-conventions-for-your-code&#34;&gt;&lt;a href=&#34;#Establish-and-obey-naming-conventions-for-your-code&#34; class=&#34;headerlink&#34; title=&#34;Establish and obey naming conventions for your code.&#34;&gt;&lt;/a&gt;Establish and obey naming conventions for your code.&lt;/h2&gt;&lt;p&gt;I’ve written about this before.  Most notably when .NET first came out in the article about &lt;a href=&#34;/hungarian-notation-use-what-works-spit-out-the-bones/&#34;&gt;Hungarian Notation&lt;/a&gt;.  As I point out in that article, not using Hungarian notation doesn’t mean you don’t have any standards.  Sure, you don’t want to prefix all of your integers with a lower case “I”, because you don’t care what kind of number it is.  But it is valuable to prefix a button with “button” so that it is easier to find in your Intellisense, or if you need to search your code for what you named it, it is much easier to find all of the buttons in your code this way.&lt;/p&gt;
&lt;p&gt;But there is another reason to establish and obey naming conventions.  Once you’ve done this, it makes it easier for everyone who is using those common conventions to read your code.&lt;/p&gt;
&lt;p&gt;For example, where I work, we have what I consider a very odd naming convention.  All of our POCO classes (we generate this ourselves because we are using DB2) are all UPPERCASE_UNDERSCORE_SEPARATED.  And all our properties of POCO collections are named UPPERCASE_UNDERSCORE_SEPARATEDs.  It used to drive me crazy, mostly because I use &lt;a href=&#34;/resharper&#34;&gt;ReSharper&lt;/a&gt; religiously and the default rules aren’t setup to handle this odd convention.  But, it is a standard and, I can tell you now, you open a file that is using a POCO and you know you are dealing with a POCO.  No question about it! While I still don’t recommend the practice, I tell you that example because it illustrates how much a coding standard can instantly tell you something about the code you are working on before you ever start reading the code.&lt;/p&gt;
&lt;h2 id=&#34;Establish-and-obey-a-common-architecture&#34;&gt;&lt;a href=&#34;#Establish-and-obey-a-common-architecture&#34; class=&#34;headerlink&#34; title=&#34;Establish and obey a common architecture.&#34;&gt;&lt;/a&gt;Establish and obey a common architecture.&lt;/h2&gt;&lt;p&gt;One of the biggest problems I have in reading other people’s code is if I can’t understand why they put things where they put them.  But having a common architecture that is easy to explain helps alleviate a lot of this problem.  One of the reasons I like working with frameworks is because much of the time these decisions are already made for you.  For example, just having a simple three tiered architecture that separates the View, Business Rules, and Data Access into different parts of your code can go a long way toward making code easy to read.  Within this basic framework you can layer in Model View Presenter, Model View Controller or any other design patterns.  Follow the mantra, “A place for everything and everything in its place” and your code will be much easier to follow.&lt;/p&gt;
&lt;h2 id=&#34;Name-objects-as-nouns-methods-as-verbs&#34;&gt;&lt;a href=&#34;#Name-objects-as-nouns-methods-as-verbs&#34; class=&#34;headerlink&#34; title=&#34;Name objects as nouns, methods as verbs.&#34;&gt;&lt;/a&gt;Name objects as nouns, methods as verbs.&lt;/h2&gt;&lt;p&gt;This is so basic that I almost feel like I should have to write this here.  But I still see the principle violate all of the time.  So, here it is.  Obviously, if you aren’t following an object oriented methodology.  Say you are doing Functional or Procedural programming, you’ll need to adapt this rule to your environment.  But for OOP guys and gals.  Stop breaking this rule.  It is a sign of immaturity.&lt;/p&gt;
&lt;h2 id=&#34;Name-variable-what-they-are&#34;&gt;&lt;a href=&#34;#Name-variable-what-they-are&#34; class=&#34;headerlink&#34; title=&#34;Name variable what they are.&#34;&gt;&lt;/a&gt;Name variable what they are.&lt;/h2&gt;&lt;p&gt;Similarly, stop with the short variable names unless you are using a language that is still so archaic as to require it.  I’ve written about this before.  Twice actually.  &lt;a href=&#34;/tags/naming-conventions/&#34;&gt;With rants about using i, j and k as variable names&lt;/a&gt;.  The point here is that you want to be able to read your code and to do that your code has to tell you something about what you are doing.  Short variable names almost always never assist in code readability.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-include-a-noun-in-your-method&#34;&gt;&lt;a href=&#34;#Don’t-include-a-noun-in-your-method&#34; class=&#34;headerlink&#34; title=&#34;Don’t include a noun in your method.&#34;&gt;&lt;/a&gt;Don’t include a noun in your method.&lt;/h2&gt;&lt;p&gt;This is different from just saying that method should be verbs.  There are a lot of places where I’ve seen code that has a verb AND a noun as a method name.  If you have a method that has both a noun and a verb in it, your class is probably trying to do too much.&lt;/p&gt;
&lt;p&gt;Wouldn’t it look funny if you had a Person class that had a method in it called FirstNameToLower()?&lt;/p&gt;
&lt;h2 id=&#34;Establish-a-cyclomatic-complexity-threshold-for-your-methods-and-obey-them-religiously&#34;&gt;&lt;a href=&#34;#Establish-a-cyclomatic-complexity-threshold-for-your-methods-and-obey-them-religiously&#34; class=&#34;headerlink&#34; title=&#34;Establish a cyclomatic complexity threshold for your methods and obey them religiously.&#34;&gt;&lt;/a&gt;Establish a &lt;a href=&#34;//en.wikipedia.org/wiki/Cyclomatic_complexity&#34;&gt;cyclomatic complexity&lt;/a&gt; threshold for your methods and obey them religiously.&lt;/h2&gt;&lt;p&gt;Cyclomatic complexity takes into account how many statements have to be executed and, most importantly, how many conditionals have to be executed in your code.  The easiest way to reduce cyclomatic complexity is to reduce the number of conditions.  But aside from that, you can make your code much more readable by eliminating nesting where ever possible.&lt;/p&gt;
&lt;p&gt;One of my favorites is instead of writing code that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SomeMethod&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x != y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// do stuff here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can make your code much more readable by writing it like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SomeMethod&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x == y) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;// do stuff here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, instead of nesting when this doesn’t work, as with while statements that contain other while statements, why not create a method for each while statement?&lt;/p&gt;
&lt;h2 id=&#34;Make-code-“self-documenting”&#34;&gt;&lt;a href=&#34;#Make-code-“self-documenting”&#34; class=&#34;headerlink&#34; title=&#34;Make code “self-documenting”&#34;&gt;&lt;/a&gt;Make code “self-documenting”&lt;/h2&gt;&lt;p&gt;That is, if you feel your code needs a comment, you probably have violated one or more of the other readability suggestions.  This is not to say that you should never add comments, but they should not be a replacement for readable code.  I generally leave comments for WHY I did something and leave the WHAT I did to the code.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-add-comments-for-things-that-you-can-deduce-by-reading-the-code&#34;&gt;&lt;a href=&#34;#Don’t-add-comments-for-things-that-you-can-deduce-by-reading-the-code&#34; class=&#34;headerlink&#34; title=&#34;Don’t add comments for things that you can deduce by reading the code.&#34;&gt;&lt;/a&gt;Don’t add comments for things that you can deduce by reading the code.&lt;/h2&gt;&lt;p&gt;“This next line increments loopVar by 1” does no one any good and could eventually end up being litter in your code that makes the code harder to read.  Why?  Because it is possible for loopVar to get renamed, or removed and the comment could stick around forever.  Until we get compilers that verify our comments as well as our executable code, referencing variables in comments is a generally bad practice that should be avoided.&lt;/p&gt;
&lt;h2 id=&#34;Is-the-code-SOLID&#34;&gt;&lt;a href=&#34;#Is-the-code-SOLID&#34; class=&#34;headerlink&#34; title=&#34;Is the code SOLID?&#34;&gt;&lt;/a&gt;Is the code &lt;a href=&#34;/pluralsightSOLID&#34;&gt;SOLID&lt;/a&gt;?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Single Responsibility of classes&lt;/li&gt;
&lt;li&gt;Open&amp;#x2F;Close Principle&lt;/li&gt;
&lt;li&gt;Liskov Substitution Principle&lt;/li&gt;
&lt;li&gt;Interface Segregation Principle&lt;/li&gt;
&lt;li&gt;Dependency Inversion&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Is-the-code-testable&#34;&gt;&lt;a href=&#34;#Is-the-code-testable&#34; class=&#34;headerlink&#34; title=&#34;Is the code testable?&#34;&gt;&lt;/a&gt;Is the code testable?&lt;/h2&gt;&lt;p&gt;If you follow all the rules above, the code should be easy to test.  But, this is something that you should review your code for explicitly.&lt;/p&gt;
&lt;h2 id=&#34;Will-the-code-fail&#34;&gt;&lt;a href=&#34;#Will-the-code-fail&#34; class=&#34;headerlink&#34; title=&#34;Will the code fail?&#34;&gt;&lt;/a&gt;Will the code fail?&lt;/h2&gt;&lt;p&gt;Can anyone write code that uses any particular method that would make the method crash, throw an exception, or otherwise do something that was never intended?&lt;/p&gt;
&lt;h2 id=&#34;Code-duplications&#34;&gt;&lt;a href=&#34;#Code-duplications&#34; class=&#34;headerlink&#34; title=&#34;Code duplications.&#34;&gt;&lt;/a&gt;Code duplications.&lt;/h2&gt;&lt;p&gt;I don’t know about you, but I’m pretty sure I’ve got code that looks practically the same littered throughout my code base.  One of my current goals is to make myself create a new method any time I’m getting ready to copy and paste more than three lines of code.&lt;/p&gt;
&lt;h2 id=&#34;100-Code-Coverage&#34;&gt;&lt;a href=&#34;#100-Code-Coverage&#34; class=&#34;headerlink&#34; title=&#34;100% Code Coverage&#34;&gt;&lt;/a&gt;100% Code Coverage&lt;/h2&gt;&lt;p&gt;Assuming you have unit test, do you have 100% code coverage on all of the methods that have a cyclomatic complexity score greater than 1?  I’m talking about code you’ve written.  I’ve written before about &lt;a href=&#34;/100-code-coverage/&#34;&gt;what code should be tested&lt;/a&gt; and what code doesn’t need to be tested.&lt;/p&gt;
&lt;h2 id=&#34;Learn-the-vocabulary-of-your-language&#34;&gt;&lt;a href=&#34;#Learn-the-vocabulary-of-your-language&#34; class=&#34;headerlink&#34; title=&#34;Learn the vocabulary of your language&#34;&gt;&lt;/a&gt;Learn the vocabulary of your language&lt;/h2&gt;&lt;p&gt;John Sonmez wrote a very compelling article in 2013 about &lt;a href=&#34;//simpleprogrammer.com/2013/04/14/what-makes-code-readable-not-what-you-think/&#34;&gt;what makes code readable&lt;/a&gt;.  In it he says that just like when we learn to read.  Code that is readable by a senior level developer may not be readable by an entry level developer simply because the entry level developer doesn’t have a firm grasp of the language.  Like John, I’ve been criticized for using the ternary operator because it is too terse.  Not descriptive enough.  Un-readable.  And I’ve always responded that arguing that the syntax isn’t clear is like arguing that a sentence isn’t clear because it uses a word you aren’t familiar with.  The word may actually be the perfect word for what the author is trying to communicate.  Your understanding of that word does not make the writing bad.  It just means the reader has some more learning to do.&lt;/p&gt;
</content>
        <category term="code" />
        <category term="programming" />
        <updated>2015-08-06T11:30:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/debugging-software/</id>
        <title>Debugging Software</title>
        <link rel="alternate" href="http://davembush.github.com/debugging-software/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/06/spider.jpg&#34; alt=&#34;spider&#34; title=&#34;spider&#34;&gt; It amazes me how rare the skill of debugging software is.  It is even more amazing to me that after programming for over 27 years now, I still have trouble with this.  So, as a checklist for myself, and as a possible help to others along the way, I offer you “How to Debug Your Code”&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Is-It-Plugged-In-Is-It-Turned-On&#34;&gt;&lt;a href=&#34;#Is-It-Plugged-In-Is-It-Turned-On&#34; class=&#34;headerlink&#34; title=&#34;Is It Plugged In?  Is It Turned On?&#34;&gt;&lt;/a&gt;Is It Plugged In?  Is It Turned On?&lt;/h2&gt;&lt;p&gt;Another way of stating this is, “Validate your assumptions.”  I learned this phrase while I was traveling with a high school music group as a sound tech.  I was one of two guys who was responsible for making sure the sound equipment got from one site to the other and got setup at each site and was ready to go in time for the group to practice at least once before the performed. The thing with sound equipment is, there are lots of connections.  Lots of places to miss.  There were many times that we would set everything up and test it all out and there would be no sound, or partial sound.  I’m ashamed to tell you how many hours we wasted tracking the problem down only to find that something wasn’t connected.  An amp wasn’t turned on.  A plug had come out of the wall.  Cables had become disconnected. And the same sort of thing happens with our code.  You deploy code to the wrong directory and wonder why it isn’t showing up in the browser.  You deploy code to the right directory, but you forgot to get it from version control before you did.&lt;/p&gt;
&lt;h2 id=&#34;Read-the-Error-Message&#34;&gt;&lt;a href=&#34;#Read-the-Error-Message&#34; class=&#34;headerlink&#34; title=&#34;Read the Error Message&#34;&gt;&lt;/a&gt;Read the Error Message&lt;/h2&gt;&lt;p&gt;This is especially true with .NET but even when all you have is an error code, the error message is useful. In .NET, when you get an error message, it all but tells you what line of code you need to fix.  And even if you don’t understand the error.  You can copy and paste the error into a search engine and you are likely to come up with multiple possible solutions.  Even if all you have is an error code.&lt;/p&gt;
&lt;h2 id=&#34;Sometimes-the-Error-Message-Is-Hidden&#34;&gt;&lt;a href=&#34;#Sometimes-the-Error-Message-Is-Hidden&#34; class=&#34;headerlink&#34; title=&#34;Sometimes the Error Message Is Hidden&#34;&gt;&lt;/a&gt;Sometimes the Error Message Is Hidden&lt;/h2&gt;&lt;p&gt;I was just working on some code last night after putting in a very long day.  My code wasn’t working so I finally decided to pull up the debugger.  In this case, the code was JavaScript and I’m running it in Chrome because what I’m writing is a Chrome plugin.  When I finally loaded the plugin with the debugger active, it was then that I saw the console log message telling me that my variable wasn’t defined.  Talk about stupid mistakes.  My variable was code I meant to enter as a string, but because I didn’t put quotes around it, the JavaScript engine saw it as an undefined variable.&lt;/p&gt;
&lt;h2 id=&#34;Run-the-Debugger&#34;&gt;&lt;a href=&#34;#Run-the-Debugger&#34; class=&#34;headerlink&#34; title=&#34;Run the Debugger&#34;&gt;&lt;/a&gt;Run the Debugger&lt;/h2&gt;&lt;p&gt;Once I’ve eliminated the obvious, the next thing is to pull out the debugger and set break points.  Now, this can be tedious.  How many times have you decided to step over when you should have stepped in?  Arrrgh.  Now I have to start over again. Well, here’s how I speed things up. At the top level function.  I initially step over until I find out what line is causing the problem.  If you have an exception that is being thrown, this is easy to do because you just have to wait for the exception.  If you are getting a wrong answer, it may be a bit more difficult because you’ll have to verify your expected results along the way.  But the point is, you need to find out what line is throwing things off or you will be there all day, stepping through code one line at a time. Once you know which line in that function is causing trouble, you step into that line on the next run and step over each line in the lower level function until you find out what line is causing a problem there. Rinse, lather, repeat, until you find the problem.&lt;/p&gt;
&lt;h2 id=&#34;Step-In-To-Libraries&#34;&gt;&lt;a href=&#34;#Step-In-To-Libraries&#34; class=&#34;headerlink&#34; title=&#34;Step In To Libraries&#34;&gt;&lt;/a&gt;Step In To Libraries&lt;/h2&gt;&lt;p&gt;This goes back to validating your assumptions, but I call it out here separately because we never think that we’ve made an assumption about something that is supposed to be a “black box” when in fact, we have. Back in the day when I was doing a lot of Visual C++ coding, I learned a lot about how MFC worked by stepping into the MFC code.  So much so that I became the expert in my office regarding fixing C++&amp;#x2F;MFC related bugs. Today I’m doing a lot of JavaScript coding.  For the last two years I’ve actually done more JavaScript than C#.  Specifically, I’m writing a lot of EXTjs code.  The thing about EXTjs is that the framework is pretty complex.  I would argue too complex.  But that’s another post.  What I want to point out here is that I’ve fixed a lot of issues with my EXTjs code by stepping into the EXTjs framework code, as painful as that was, to find out why my code was behaving the way it was.&lt;/p&gt;
&lt;h2 id=&#34;The-Search-Engines-Are-Your-Friends&#34;&gt;&lt;a href=&#34;#The-Search-Engines-Are-Your-Friends&#34; class=&#34;headerlink&#34; title=&#34;The Search Engines Are Your Friends&#34;&gt;&lt;/a&gt;The Search Engines Are Your Friends&lt;/h2&gt;&lt;p&gt;This one should be obvious.  But, unfortunately it isn’t. The hardest part about searching is trying to figure out what other people may have used to describe the problem so that you can find the answer that is just sitting out there waiting for you.  I’m convinced that as intelligent as the search engines have become, using them is still a kind of art.&lt;/p&gt;
&lt;h2 id=&#34;Explain-the-Problem-to-a-Co-Worker&#34;&gt;&lt;a href=&#34;#Explain-the-Problem-to-a-Co-Worker&#34; class=&#34;headerlink&#34; title=&#34;Explain the Problem to a Co-Worker&#34;&gt;&lt;/a&gt;Explain the Problem to a Co-Worker&lt;/h2&gt;&lt;p&gt;You would be amazed at how often the act of describing a problem to someone else brings the obvious solution to light.  If you’ve ever done this, you know that often, in the middle of describing the problem, you’ll says, “… oh, never mind.  I know what the problem is now.” Which leads to my alternative solutions…&lt;/p&gt;
&lt;h2 id=&#34;Explain-the-Problem-to-Your-Coffee-Cup&#34;&gt;&lt;a href=&#34;#Explain-the-Problem-to-Your-Coffee-Cup&#34; class=&#34;headerlink&#34; title=&#34;Explain the Problem to Your Coffee Cup&#34;&gt;&lt;/a&gt;Explain the Problem to Your Coffee Cup&lt;/h2&gt;&lt;p&gt;Why?   Because it isn’t your co-worker who helped you solve the problem when you explained it to him.  It was the act of explaining it.  Once you’ve articulated the problem well enough to explain it to someone else, that act actually often hands you the solution.&lt;/p&gt;
&lt;h2 id=&#34;Step-Away-For-a-While&#34;&gt;&lt;a href=&#34;#Step-Away-For-a-While&#34; class=&#34;headerlink&#34; title=&#34;Step Away For a While&#34;&gt;&lt;/a&gt;Step Away For a While&lt;/h2&gt;&lt;p&gt;I don’t know why it is, but for some reason, we seem to think that if we aren’t coding, we aren’t working.  But you can’t work non-stop as a programmer for 4 – 8 hours without taking a break.  And banging your head against a bug when you’ve already done that for 15 minutes probably isn’t going to produce any better results if you do it for another 4 hours. Yeah, you may try a bunch of stuff.  You may look busy.  But the fact of the matter is, you might be better off finding something else to do for an hour or so and then coming back to the problem once you’re brain has had a rest from it. Well, those are my tips for now.  What tips do you have?  Leave them in the comments.  &lt;/p&gt;
</content>
        <category term="debugging" />
        <category term="debug" />
        <updated>2015-06-25T10:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/code-comments-agile-programming/</id>
        <title>Code Comments &amp; Agile Programming</title>
        <link rel="alternate" href="http://davembush.github.com/code-comments-agile-programming/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/PEOP0067.png&#34; alt=&#34;PEOP0067&#34; title=&#34;PEOP0067&#34;&gt;&lt;/p&gt;
&lt;p&gt;A long time ago, in a galaxy far far away, we were forced to name variables and methods with very short names.  When I started my career, I was programming Clipper and C.  Clipper was a dBase compiler, so it only had 10 characters available for variable names.  You could write longer variable names if you wanted, but only the first 10 mattered.  I think at the time, C gave us 32 characters.  But now, we aren’t so limited.  And so the argument goes, if you use long variable names,  you shouldn’t need to comment your code.  I’ve argued as much.&lt;/p&gt;
&lt;p&gt;Of course every time you bring this subject up, you will inevitably find someone who will say, “But don’t we need comments to at least explain what the code was supposed to do?  After all, code is generally hard to read.”  Well, yes I guess it is if you are new to the language.  But should every foreign movie have subtitles?  Would you want native language movies to have subtitles because other people in the room might not understand it?  Must we dumb everything down to the lowest common denominator?  If so, where will it stop?&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Sometimes-Comments-Are-Needed&#34;&gt;&lt;a href=&#34;#Sometimes-Comments-Are-Needed&#34; class=&#34;headerlink&#34; title=&#34;Sometimes Comments Are Needed&#34;&gt;&lt;/a&gt;Sometimes Comments Are Needed&lt;/h2&gt;&lt;p&gt;And yet, I would argue that there are times when comments make sense.  Not so much for what you did, but for explaining why you decided to do it the way you did.  Again, you don’t always have to do this.  But there are times when I write my code that I look at it and think, “If I come back to this three months from now, I’m going to wonder what I was thinking.  I’d better add a comment to make this a bit more clear as to why this statement is here.”&lt;/p&gt;
&lt;p&gt;You see, it is the WHY that we comment.  Not the what.  The what would be described in the code itself.&lt;/p&gt;
&lt;h2 id=&#34;A-Perfect-World&#34;&gt;&lt;a href=&#34;#A-Perfect-World&#34; class=&#34;headerlink&#34; title=&#34;A Perfect World&#34;&gt;&lt;/a&gt;A Perfect World&lt;/h2&gt;&lt;p&gt;But this all assumes a perfect world.  And judging from the comments and blog post I’ve seen on the subject, I believe this is where the real arguments for and against code comments, have their origin.&lt;/p&gt;
&lt;p&gt;First, let’s assume for a second that you are of the persuasion that you need to comment code to tell the reader what it is you are trying to accomplish.  Where else could we put that information?&lt;/p&gt;
&lt;h2 id=&#34;Requirements-in-lieu-of-Comments&#34;&gt;&lt;a href=&#34;#Requirements-in-lieu-of-Comments&#34; class=&#34;headerlink&#34; title=&#34;Requirements in lieu of Comments&#34;&gt;&lt;/a&gt;Requirements in lieu of Comments&lt;/h2&gt;&lt;p&gt;Well, in a perfect world, there would be some kind of requirements document that would state that this feature was needed.  The problem is, of course, it is hard to associate the design document with the code you are writing because most design documents are really long.  Even for the most trivial of programs.  But in an Agile world, there would be some sort of back log.  A list of requirements that are broken down into small enough task that each one can be implemented as a discreet unit.  Even in an environment that is more Scrumerfall than truly Scrum, you could implement this by breaking the requirements down so they all ended up in a task list of some sort.&lt;/p&gt;
&lt;p&gt;But we still lack the ability to associate the code with the feature.&lt;/p&gt;
&lt;p&gt;Well, there are several systems available that allow you to associate task in your backlog with code you’ve checked in.   You just associate the code you are checking in with the backlog item it is associated with and the system established a two way link between the code that was changed and the backlog item that it is associated with.&lt;/p&gt;
&lt;h2 id=&#34;Tests-as-Comments&#34;&gt;&lt;a href=&#34;#Tests-as-Comments&#34; class=&#34;headerlink&#34; title=&#34;Tests as Comments&#34;&gt;&lt;/a&gt;Tests as Comments&lt;/h2&gt;&lt;p&gt;The next place you might associate changes with what it is you are trying to do is by creating Unit Test for the code you are writing.  The way I write my Unit Test, I have one Unit Test class per method and Given&amp;#x2F;Arrange I am testing.  Within that class I have a different test for each When&amp;#x2F;Then or Act&amp;#x2F;Assert the Given or Arrange I am trying to test.  This allows me to write my test in such a way that I know what class and method is being tested and what the test.&lt;/p&gt;
&lt;p&gt;So if I have a Class named Math that has an Add function:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Math&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Math&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Add&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; b&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I might have a test class that looks like:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Math.Math.Add&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;TestFixture&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GivenTwoPositiveNumberAsParameters&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; _math;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [&lt;span class=&#34;meta&#34;&gt;SetUp&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Setup&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            _math = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Math();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [&lt;span class=&#34;meta&#34;&gt;Test&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [&lt;span class=&#34;meta&#34;&gt;TestCase(1,1)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [&lt;span class=&#34;meta&#34;&gt;TestCase(5,7)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ThenTheResultShouldBePositive&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; b&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           Assert.That(_math.Add(a,b), Is.GreaterThan(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Yes, I know the test itself is a weak test.  The point is the structure of the test.  I can find the tests for any one class because the test that are associated with the class are structured in such a way as to find out what the original requirement was for the test.  And so, even if I don’t have any documentation from a backlog or even from a design document.  Because of the structure of the test, it would be relatively simple to write a tool that would let you view your code and the associated test in a hyperlinked fashion so that you could easily identify the tests associated with your code and the code associated with your tests.&lt;/p&gt;
&lt;h2 id=&#34;TDD-as-Comments-–-A-Story&#34;&gt;&lt;a href=&#34;#TDD-as-Comments-–-A-Story&#34; class=&#34;headerlink&#34; title=&#34;TDD as Comments – A Story&#34;&gt;&lt;/a&gt;TDD as Comments – A Story&lt;/h2&gt;&lt;p&gt;Right after the dotCom crash, I ended up working for a company that had a system that they had lost the documentation for.  That is, there was no requirements document and they didn’t want to admit to the client we were working for that they had lost the document.  So, my job eventually became one of perpetual bug fixing.  And of course, since I had no idea what the system was supposed to do, I’m sure every time I fixed a bug, I introduced three more.  This was 15 years ago and I had not yet gotten TDD religion.  But looking back on it now, I see that what I could have been doing from day one is that I could have been writing unit test for each bug that came in.  Eventually, my test suite would be my documentation and there wouldn’t be any more bugs.&lt;/p&gt;
&lt;p&gt;Unlike code comments, if you are running your tests as part of a continuous integration system, you will be forced to keep your test up to date as the code changes.  Obviously, you should be updating the test, or creating new tests before you make changes, but even if you don’t, if you make a change that breaks the test, you will be forced to either fix the code so that the test succeeds or fix the test to match the new requirement.&lt;/p&gt;
&lt;p&gt;But this doesn’t really address the broader code quality issue.  At times we still need comments and they can’t be addressed by writing unit tests.  But this is why we need at least occasional paired programming and systematic code reviews.&lt;/p&gt;
&lt;h2 id=&#34;Code-Reviews&#34;&gt;&lt;a href=&#34;#Code-Reviews&#34; class=&#34;headerlink&#34; title=&#34;Code Reviews&#34;&gt;&lt;/a&gt;Code Reviews&lt;/h2&gt;&lt;p&gt;Several questions should be raised during code reviews:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is this code too complex?&lt;/li&gt;
&lt;li&gt;Have we named things appropriately?&lt;/li&gt;
&lt;li&gt;Are there any dependencies that need to be removed?&lt;/li&gt;
&lt;li&gt;Are there any comments that we could add that would help a future developer maintain this code without possibly confusing him when the code changes?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ve talked about a lot of these issues before so I’m not going to go into a lot of detail here other than to say that you should notice that I’ve placed the issue of code comments LAST on the list of things to consider.  This is because if you take care of the code quality, you will find that most of the time when you get to the issue of comments, no one will have anything to add.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;If you are working at an organization where you have no tests, you routinely deal with 1000 line methods, names of things seem arbitrary, you have no real backlog, and your code is not loosely coupled, I can see why you might think you need comments in your code.  But the problem isn’t the lack of comments.  The problem is, you are dealing with bad code.&lt;/p&gt;
</content>
        <category term="scrum" />
        <category term="comments" />
        <category term="tdd. agile" />
        <updated>2015-05-14T10:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/how-to-become-a-better-programmer/</id>
        <title>How to Become a Better Programmer</title>
        <link rel="alternate" href="http://davembush.github.com/how-to-become-a-better-programmer/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/04/ppl-men-058.jpg&#34; alt=&#34;ppl-men-058&#34; title=&#34;Be a better programmer&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you advance in your career, you will inevitably want to improve as a programmer.  And as you search the Internet and read various web post on the subject you will also inevitably end up with a bunch of task you should perform that will make you better. For example, if you’ve been following this blog lately, you’ll notice that I’m a big proponent of &lt;a href=&#34;/?s=tdd&#34;&gt;Test Driven Development&lt;/a&gt;.  You would naturally expect me to state that to be a better programmer, you should practice Test Driven Development. There has also been a lot of emphasis recently on good basic programming principles like &lt;a href=&#34;/dry-programming/&#34;&gt;DRY&lt;/a&gt; and &lt;a href=&#34;//en.wikipedia.org/wiki/SOLID_(object-oriented_design)&#34;&gt;SOLID&lt;/a&gt;. The list could go on.  Here are a few you may be interested in experimenting with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Code Reviews&lt;/li&gt;
&lt;li&gt;Paired Programming&lt;/li&gt;
&lt;li&gt;Learn and Implement Design Patterns&lt;/li&gt;
&lt;li&gt;Reduce Method&amp;#x2F;Class Complexity&lt;/li&gt;
&lt;li&gt;Practice Code Katas&lt;/li&gt;
&lt;li&gt;Participate in the Community&lt;ul&gt;
&lt;li&gt;Start a Blog&lt;/li&gt;
&lt;li&gt;Participate on StackOverflow&lt;/li&gt;
&lt;li&gt;Read and  Comment on other people’s Blogs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And while all of these and more are good ideas, none of these ideas will actually MAKE you a better programmer.  Why?  Because becoming a better programmer is mostly about becoming a better person.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;The-Human-Side-of-Programming&#34;&gt;&lt;a href=&#34;#The-Human-Side-of-Programming&#34; class=&#34;headerlink&#34; title=&#34;The Human Side of Programming&#34;&gt;&lt;/a&gt;The Human Side of Programming&lt;/h2&gt;&lt;p&gt;You see, as much as many of use would like it to be otherwise, programming is a relational occupation.  I think, when I started, I was attracted to programming both because I liked programming and because it seemed like something I could do without too much interaction with people.  I because a consultant because I wanted to be my own boss.  But I quickly found out in both cases that in running away from relationships I was running smack in the middle of them.  We have to talk to clients to get the requirements.  We have to ask good questions.  We have to argue for what we think is right without alienating other people.&lt;/p&gt;
&lt;p&gt;And that being a consultant thing?  I found out pretty quickly that no matter what you do, there is always someone in charge.  If you have multiple clients, you have multiple bosses.  Being your own boss is a myth.  Fortunately, I like consulting for other reasons.&lt;/p&gt;
&lt;h2 id=&#34;Listen&#34;&gt;&lt;a href=&#34;#Listen&#34; class=&#34;headerlink&#34; title=&#34;Listen&#34;&gt;&lt;/a&gt;Listen&lt;/h2&gt;&lt;p&gt;Because programming is so relational, much of programming requires communication.  So the first thing we all need to work on is our listening skills.  Don’t go into a meeting with any preconceived idea of what the answers should be.  If you have a tendency to talk a lot, be quiet.  I’ve found that if I keep my mouth shut long enough, eventually others will say the same thing I was going to say.&lt;/p&gt;
&lt;h2 id=&#34;Killer-Questions&#34;&gt;&lt;a href=&#34;#Killer-Questions&#34; class=&#34;headerlink&#34; title=&#34;Killer Questions&#34;&gt;&lt;/a&gt;Killer Questions&lt;/h2&gt;&lt;p&gt;When you do talk, ask questions.&lt;/p&gt;
&lt;p&gt;I have a friend who says, “You’ll never own the answers if you don’t own the questions.”  So, don’t tell anyone anything that you can’t lead them to with questions.  Yes this takes longer but, it does two things for you.&lt;/p&gt;
&lt;p&gt;First, it makes you sound interested in what the other person thinks.  This only works, of course, if you really are interested.  The questions are just a way of helping you express the interest that you already have.  You can’t make interest a formula.  But, I would say that many people who are interested don’t sound interested because they only know how to state things.&lt;/p&gt;
&lt;p&gt;Several years ago, I learned about “&lt;a href=&#34;//changingminds.org/techniques/questioning/socratic_questions.htm&#34;&gt;Socratic Questioning&lt;/a&gt;”  These questions are designed to get at the person’s thinking process.  Sometimes, just in asking the question, the person will realize they don’t know why they think what they think.&lt;/p&gt;
&lt;p&gt;I remember the gist of this by using these four questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What do you mean by…?&lt;/li&gt;
&lt;li&gt;How do you know…?&lt;/li&gt;
&lt;li&gt;What difference does it make?&lt;/li&gt;
&lt;li&gt;What if you’re wrong?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The danger is in using these questions to win arguments.  I would suggest that instead you use them to understand where the other person is coming from.  Remember, these are questions to help you listen, not to help you win.&lt;/p&gt;
&lt;h2 id=&#34;“What-I-think-I-heard-you-say…”&#34;&gt;&lt;a href=&#34;#“What-I-think-I-heard-you-say…”&#34; class=&#34;headerlink&#34; title=&#34;“What I think I heard you say…”&#34;&gt;&lt;/a&gt;“What I think I heard you say…”&lt;/h2&gt;&lt;p&gt;I just learned this one recently and I’m still learning to incorporate it.  It is the follow up statement to Socratic Questioning.  This is your chance to make sure you’ve understood what the other person said by repeating what they’ve said in your own words.&lt;/p&gt;
&lt;p&gt;It is a funny thing about language, but people can use the same words and mean two entirely different things.  Have you ever had a situation where you’ve said something with absolutely no malice intended and the other person was offended?  That’s because we hear things based on our past, what happened previously in the day, and the stuff we are worrying about.  People are funny that way.&lt;/p&gt;
&lt;h2 id=&#34;The-Golden-Rule&#34;&gt;&lt;a href=&#34;#The-Golden-Rule&#34; class=&#34;headerlink&#34; title=&#34;The Golden Rule&#34;&gt;&lt;/a&gt;The Golden Rule&lt;/h2&gt;&lt;p&gt;OK, so everyone knows the golden rule, right? “Do unto others what you would have done to you.”  But, I’m going to put this in new terms.  “Everyone wants to be God.  Will it kill you to let them continue to think they are?” Yeah yeah, I know.  They aren’t God.  But, we all want to be.  And all conflict starts because my desire to be God is conflicting with your desire to be God.  To eliminate conflict one of us has to admit that we aren’t.  You can’t control the other person, so the only way to solve this is for you to admit that you aren’t God.  But even better if you go ahead and treat the other person like they are.&lt;/p&gt;
&lt;h2 id=&#34;Diet-Exercise-amp-Sleep&#34;&gt;&lt;a href=&#34;#Diet-Exercise-amp-Sleep&#34; class=&#34;headerlink&#34; title=&#34;Diet, Exercise &amp;amp; Sleep&#34;&gt;&lt;/a&gt;Diet, Exercise &amp;amp; Sleep&lt;/h2&gt;&lt;p&gt;You may wonder what your health has to do with being a better programmer.  Especially if you don’t pay any attention to these things now.  But here are a few things I’ve noticed as I’ve started to pay more attention to my own health.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I think better.&lt;/li&gt;
&lt;li&gt;I’m not as tired during the day.&lt;/li&gt;
&lt;li&gt;I’m not as tired at night.&lt;/li&gt;
&lt;li&gt;I can get more done.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ll leave exactly what that looks like to you.  But, for the curious, here is what this looks like for me.&lt;/p&gt;
&lt;h3 id=&#34;High-fat-low-carb-diet-HFLC&#34;&gt;&lt;a href=&#34;#High-fat-low-carb-diet-HFLC&#34; class=&#34;headerlink&#34; title=&#34;High fat, low carb diet (HFLC).&#34;&gt;&lt;/a&gt;High fat, low carb diet (HFLC).&lt;/h3&gt;&lt;p&gt;I started HFLC because I wanted to loose weight.  I was able to loose 30 pounds in a year.  But, what I found is that many of the health issues I had been experiencing were ultimately caused by the carbs I was eating.  I used to get headaches periodically that would last all day.  I guess they were migraines?  They were never diagnosed.  All I know is that I didn’t have one the whole year I was on a strict HFLC diet.  I also found out that my lactose intolerance was cured by this diet.&lt;/p&gt;
&lt;h3 id=&#34;Strength-Training&#34;&gt;&lt;a href=&#34;#Strength-Training&#34; class=&#34;headerlink&#34; title=&#34;Strength Training&#34;&gt;&lt;/a&gt;Strength Training&lt;/h3&gt;&lt;p&gt;One of the things I found out when I was dieting was that strength training helps burn calories even when you aren’t exercising.  So I added modest strength exercises into my routine in the morning.  John Sonmez has convinced me to add a cardio element to my routine in his book, &lt;a href=&#34;/softSkills&#34;&gt;Soft Skills&lt;/a&gt;.  Since I know that my resistance to discomfort will keep me from running when it is raining, hot, or cold, I’m looking for a treadmill or an elliptical machine so I can start &lt;a href=&#34;//www.c25k.com/&#34;&gt;C25K&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;Sleep&#34;&gt;&lt;a href=&#34;#Sleep&#34; class=&#34;headerlink&#34; title=&#34;Sleep&#34;&gt;&lt;/a&gt;Sleep&lt;/h3&gt;&lt;p&gt;Sleep has never really been an issue for me.  I was once asked, “what keeps you up at night?”  My response, “Nothing!”  Seriously, I can sleep in the middle of the living room with all kinds of stuff going on.  And while I do have particular things I “worry” about, I don’t worry about them when I’m supposed to be sleeping. But, I was finding that I was kind of sleepy during the day a lot of times.  That’s odd because I tend to get a good seven and a half hours of sleep and I’m pretty much done sleeping by the end of the time period.&lt;/p&gt;
&lt;p&gt;Then I found this app called “&lt;a href=&#34;//www.sleepcycle.com/&#34;&gt;Sleep Cycle&lt;/a&gt;” that wakes you up before you fall back to sleep.  After a couple of weeks using this, along  with getting up at the same time every morning even on weekends, I’m much less likely to be dragging by the end of the day.  I find that people either love this app or hate it.  It has some other features that I don’t find very useful.  Like it tells me I had a N% good sleep.  I’ve never achieved better than 85%.  Last night it gave me a 50% score.  But in both cases, I don’t get tired until an hour before I plan to go to bed.  I’m not sure it is very accurate.  It also checks your heart rate in the morning.  But, that using the flash on the phone which bothered my wife so I’ve stopped using that.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-Be-So-Critical&#34;&gt;&lt;a href=&#34;#Don’t-Be-So-Critical&#34; class=&#34;headerlink&#34; title=&#34;Don’t Be So Critical&#34;&gt;&lt;/a&gt;Don’t Be So Critical&lt;/h2&gt;&lt;p&gt;I think because we spend most of our day programming and naturally like to solve problems, we tend to come off as critical.  We probably are.&lt;/p&gt;
&lt;p&gt;Ever thought or heard things like, “The boss has no clue what he’s doing.”?  “This place would be better if…”  “If only they’d …” Here’s something to think about.  If you know so much, why don’t you start your own company? Here are a few things I’ve learned over the years.  They’ll seem obvious once I state them, but I think we forget.&lt;/p&gt;
&lt;h3 id=&#34;My-Boss-Has-a-Boss&#34;&gt;&lt;a href=&#34;#My-Boss-Has-a-Boss&#34; class=&#34;headerlink&#34; title=&#34;My Boss Has a  Boss&#34;&gt;&lt;/a&gt;My Boss Has a  Boss&lt;/h3&gt;&lt;p&gt;I can’t tell you how many times when I’ve actually asked my boss to explain something, the answer has been, “that’s what my boss wants”&lt;/p&gt;
&lt;h3 id=&#34;Everyone-Is-Doing-The-Best-They-Can&#34;&gt;&lt;a href=&#34;#Everyone-Is-Doing-The-Best-They-Can&#34; class=&#34;headerlink&#34; title=&#34;Everyone Is Doing The Best They Can&#34;&gt;&lt;/a&gt;Everyone Is Doing The Best They Can&lt;/h3&gt;&lt;p&gt;I know this may come as a shock.  But seriously, most people, while not perfect, aren’t deliberately thinking, “how can I make everyone’s life difficult today?”  Often the thing we look at as a stupid requirement or a stupid rule is because someone in the organization is trying to solve a problem and this is the best solution they could come up with.&lt;/p&gt;
&lt;h3 id=&#34;Everyone-Has-a-Life&#34;&gt;&lt;a href=&#34;#Everyone-Has-a-Life&#34; class=&#34;headerlink&#34; title=&#34;Everyone Has a Life&#34;&gt;&lt;/a&gt;Everyone Has a Life&lt;/h3&gt;&lt;p&gt;I think we forget, while we are at work, that everyone has a life outside of work.  The kids get sick.  Our important relationships are strained or worse.  We were abused as kids and we are trying to deal with the psychological impact that’s had on us AND hold down a job at the same time.  The real sock is that many times the person who we find difficult doesn’t even know they have issues.&lt;/p&gt;
&lt;p&gt;When ever I find someone who is difficult, I always wonder, “What history got them to be like that?” Not that we use our history as an excuse.  But I think that if we knew what was really going on, we’d be a bit more sympathetic.&lt;/p&gt;
&lt;h2 id=&#34;Fail&#34;&gt;&lt;a href=&#34;#Fail&#34; class=&#34;headerlink&#34; title=&#34;Fail&#34;&gt;&lt;/a&gt;Fail&lt;/h2&gt;&lt;p&gt;One of the tenets of Agile is “Fail Fast” and yet the one thing we hate to do as programmers is to fail.&lt;/p&gt;
&lt;p&gt;I used to say, “Programmers are either the most well adjusted or the craziest people in the world.  Think about it!  We spend eight hours a day in front of an inanimate object that mostly tells us that we did something wrong.  We can’t even argue about it.” But really, we tend to do what’s safe.  When is the last time you did something really risky?  As I’ve been pushing TDD on those of you who believe you can’t do TDD where you work, what I’ve really been saying is, “Take a risk, do it anyhow.” Or what about starting a blog, or speaking at a users group meeting?  There are multiple ways you can risk.&lt;/p&gt;
&lt;p&gt;If you aren’t failing, you aren’t learning.&lt;/p&gt;
&lt;h2 id=&#34;Smile&#34;&gt;&lt;a href=&#34;#Smile&#34; class=&#34;headerlink&#34; title=&#34;Smile&#34;&gt;&lt;/a&gt;Smile&lt;/h2&gt;&lt;p&gt;You’ll feel better and people will enjoy being with you more.  Even if you have to fake it, intentionally smile three times a day.&lt;/p&gt;
&lt;h2 id=&#34;Daily-Reminders&#34;&gt;&lt;a href=&#34;#Daily-Reminders&#34; class=&#34;headerlink&#34; title=&#34;Daily Reminders&#34;&gt;&lt;/a&gt;Daily Reminders&lt;/h2&gt;&lt;p&gt;Maybe you’ve heard about daily affirmations.  I’m not a big fan of affirmations.  I’ve tried them, but then my wife pointed out to me, and I’ve had it confirmed by another source, that affirmations essentially make you lie to yourself because you are stating what you want to be true as though they already are true.  This causes tension within you that makes it difficult for this to work.&lt;/p&gt;
&lt;p&gt;In, I believe it was, the 1800’s they did this thing called “Resolutions” which were statement of what you would put your effort into.  This gets a bit more to the point.&lt;/p&gt;
&lt;p&gt;But, I just call them daily reminders.  Things I want to remind myself about.  Much like affirmations and resolutions are designed to do without all of the weight. Here are some of mine so you get an example of what they look like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You feel better when you exercise&lt;/li&gt;
&lt;li&gt;Exercise will make you more confident&lt;/li&gt;
&lt;li&gt;What do you mean? How do you know? What difference does it make? What if you are wrong? What would you accept as evidence?&lt;/li&gt;
&lt;li&gt;What are you thankful for?&lt;/li&gt;
&lt;li&gt;What I think I heard you say is …&lt;/li&gt;
&lt;li&gt;Carbs will eventually give you a headache and will eventually kill you.&lt;/li&gt;
&lt;li&gt;Just because someone says something is true, doesn’t mean that it is.&lt;/li&gt;
&lt;li&gt;How people interpret what you say and do is influenced by their own experience&lt;/li&gt;
&lt;li&gt;Say “thank you” whenever it is even remotely appropriate&lt;/li&gt;
&lt;li&gt;Find out what people want and give it to them (if at all possible)&lt;/li&gt;
&lt;li&gt;Everyone wants to be God, treat them accordingly&lt;/li&gt;
&lt;li&gt;Don’t let the perfect or the ideal be the enemy of getting started or good enough.&lt;/li&gt;
&lt;li&gt;Improve by just 1%&lt;/li&gt;
&lt;li&gt;Who do you want to be?&lt;/li&gt;
&lt;li&gt;What is holding you back?&lt;/li&gt;
&lt;li&gt;Failure is good. It is how we grow.&lt;/li&gt;
&lt;li&gt;If you aren’t failing, you aren’t growing.&lt;/li&gt;
&lt;li&gt;Worry about success&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also have reminders on my computer screen.  Pictures or “motivational posters” that remind me of various things.  For example, I have a screen sized smiley face to remind me to smile.&lt;/p&gt;
&lt;p&gt;So there you go.  This post ended up being a lot longer than I thought it would.&lt;/p&gt;
</content>
        <category term="programming" />
        <updated>2015-04-16T10:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/limiting-beliefs-of-programmers/</id>
        <title>Limiting Beliefs of Programmers</title>
        <link rel="alternate" href="http://davembush.github.com/limiting-beliefs-of-programmers/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/03/ppl-men-026.jpg&#34; alt=&#34;scream&#34; title=&#34;scream&#34;&gt;&lt;/p&gt;
&lt;p&gt;At the risk of making half of my audience think I’ve gone off the deep end, I’m going to address a topic that I’ve only recently REALLY begun to understand, in part thanks to &lt;a href=&#34;/softSkills&#34;&gt;Soft Skills&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I’ve heard the topic of “Limiting Beliefs” come up, it has almost always been in the context of something along the lines of “What the mind can conceive and believe, it can achieve.”  Which is easy to disprove.  At least it is out of context!  I mean really, if I can conceive and believe myself to be a butterfly, it just isn’t going to happen! However, the opposite is pretty easy to both accept and believe.  And that’s what I want to talk about today.  But even then, it probably isn’t what you are expecting.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Typically, when people talk about “Limiting Beliefs”, they are talking about patterns and practices you picked up as a kid that are holding you back now.  And while those may be areas that you need to work on, what I want to talk about today is more micro than that, although they may have roots in our past for various reasons, the Limiting Beliefs I want to talk about today are common across nearly every programmer I talk to.  If you think “Limiting Beliefs” mean something along the lines of, “you are limited because you don’t believe enough,” that is NOT what I have in mind here at all.  In fact, “Limiting Beliefs” are beliefs that we believe TOO strongly and because we hold them too strongly, they limit us.  This is what I mean when I talk about “Limiting Beliefs” even if it is used in another way by someone else.&lt;/p&gt;
&lt;p&gt;Here are some examples specifically related to the craft of programming.&lt;/p&gt;
&lt;h2 id=&#34;You-Can’t-Practice-TDD&#34;&gt;&lt;a href=&#34;#You-Can’t-Practice-TDD&#34; class=&#34;headerlink&#34; title=&#34;You Can’t Practice TDD&#34;&gt;&lt;/a&gt;You Can’t Practice TDD&lt;/h2&gt;&lt;p&gt;As I’ve mentioned in other articles, most programmers I know don’t practice Test Driven Development because they believe they don’t have permission.  And when they ask, they don’t get permission because you’ve transferred the belief that you don’t think it is important.&lt;/p&gt;
&lt;p&gt;If instead, you believed you had permission to do whatever it took to legitimately do your job well, you would learn how to do everything it took to practice TDD well.&lt;/p&gt;
&lt;h2 id=&#34;Can’t-Create-Branches-in-Version-Control&#34;&gt;&lt;a href=&#34;#Can’t-Create-Branches-in-Version-Control&#34; class=&#34;headerlink&#34; title=&#34;Can’t Create Branches in Version Control&#34;&gt;&lt;/a&gt;Can’t Create Branches in Version Control&lt;/h2&gt;&lt;p&gt;I recently ran into a comment on a blog that mention this.  In fact I’ve run into this very issue where I am currently working.  But instead of thinking about what I can’t do, or when I am frustrated by what I can’t do, I first think 1) is this important enough to find a way around? And 2) what CAN I do? In this case, I found it critically important.  My productivity was being hampered because I am adding new features to existing code and, while that code is being tested, I’m converting the code to the last version of the library that we use.  Branching allows me to switch between the two projects easily and it allows me to migrate the current code into the upgrade code so that when the conversion is done, I can merge it down into the main branch and keep going.&lt;/p&gt;
&lt;p&gt;How did I do this?  We use TFS with the old TFVS version control system instead of the Git repository.  But there are at least two projects that exist that allow you to create a bridge between your local code that uses a local GIT repository and the remote TFS repository.  There is at least one project available for subversion that allows you to do the same sort of thing.&lt;/p&gt;
&lt;p&gt;I get my branches and yet I have not caused any disruption to the rest of my team.&lt;/p&gt;
&lt;h2 id=&#34;Can’t-Use-X-Technology&#34;&gt;&lt;a href=&#34;#Can’t-Use-X-Technology&#34; class=&#34;headerlink&#34; title=&#34;Can’t Use X Technology&#34;&gt;&lt;/a&gt;Can’t Use X Technology&lt;/h2&gt;&lt;p&gt;OK.  So, again, ask yourself the same questions.  Is this hampering your productivity?  What CAN you do?&lt;/p&gt;
&lt;h2 id=&#34;You-Have-to-be-Perfect&#34;&gt;&lt;a href=&#34;#You-Have-to-be-Perfect&#34; class=&#34;headerlink&#34; title=&#34;You Have to be Perfect&#34;&gt;&lt;/a&gt;You Have to be Perfect&lt;/h2&gt;&lt;p&gt;I think many of us realize that we can’t be perfect and yet, how do you react when someone finds a bug in your code? I saw a tweet last week that captures the essence of the bug fixing process.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;That can’t happen&lt;/li&gt;
&lt;li&gt;That doesn’t happen on my machine.&lt;/li&gt;
&lt;li&gt;That shouldn’t happen.&lt;/li&gt;
&lt;li&gt;Why does that happen?&lt;/li&gt;
&lt;li&gt;Oh, I see.&lt;/li&gt;
&lt;li&gt;How did that ever work?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The question I need to ask is, why do we start with “That can’t happen” unless we feel that we need to be perfect.&lt;/p&gt;
&lt;p&gt;In the last year, I’ve finally gotten to the point where my first reaction is, “OK, well, put it in the issue tracker.” (Or if you are doing Agile, “put it in the backlog”).&lt;/p&gt;
&lt;h2 id=&#34;Can’t-Practice-Agile-x2F-Scrum&#34;&gt;&lt;a href=&#34;#Can’t-Practice-Agile-x2F-Scrum&#34; class=&#34;headerlink&#34; title=&#34;Can’t Practice Agile&amp;#x2F;Scrum&#34;&gt;&lt;/a&gt;Can’t Practice Agile&amp;#x2F;Scrum&lt;/h2&gt;&lt;p&gt;Speaking of Agile&amp;#x2F;Scrum.  Are you working at a place that doesn’t practice Agile or Scrum, but you think they should?  What parts of Agile&amp;#x2F;Scrum can you implement in the sphere of influence you have?  So, you can’t form a Scrum team.  But, do you personally put people over processes?  Do you put people first at all?  Most of the &lt;a href=&#34;//agilemanifesto.org/&#34;&gt;Agile Manifesto&lt;/a&gt; can be implemented at a personal level once you understand what it is really about.  Don’t expect anyone to adopt agile in your organization if they don’t see it in you first.&lt;/p&gt;
&lt;h2 id=&#34;You-Are-an-Introvert&#34;&gt;&lt;a href=&#34;#You-Are-an-Introvert&#34; class=&#34;headerlink&#34; title=&#34;You Are an Introvert&#34;&gt;&lt;/a&gt;You Are an Introvert&lt;/h2&gt;&lt;p&gt;How many of us hide behind this one?  We don’t want to deal with people.  We really don’t value people over much of anything.  In fact, we think, “programming would be a great job if it weren’t for the clients.”  I’m reading some books that talk about the impact of confusing behavior with who we are.  OK, so sure, your behavior is that you prefer to avoid loud noises.  You’d rather talk to one or two people at a time.  You process stuff in your head instead of with your mouth.  That’s behavior.  To say, “I am an Introvert” can have the effect of saying, “I hate people” and can become a limiting belief because it will isolate you from the very people you should be helping.  Sorry, you can’t get far as a programmer if you avoid the people part of it.&lt;/p&gt;
&lt;h2 id=&#34;Restrictions&#34;&gt;&lt;a href=&#34;#Restrictions&#34; class=&#34;headerlink&#34; title=&#34;Restrictions&#34;&gt;&lt;/a&gt;Restrictions&lt;/h2&gt;&lt;p&gt;And then there is the general set of restrictions that come with being part of any organization.  We have a few where I work that, on the face of it, seem ridiculous.  I HAVE to take a lunch break even though my lunch consist of 5 sausage links that can be consumed in about 5 minutes.  I can’t start before 7am.  I can’t leave until 3:30.&lt;/p&gt;
&lt;p&gt;But what can I do?  Well, no one said WHEN I had to take the lunch break, so I come in and watch a half hour of &lt;a href=&#34;/pluralSight&#34;&gt;PluralSight&lt;/a&gt; courses every morning.&lt;/p&gt;
&lt;p&gt;I can’t start before 7am.  But I CAN enter the office before then.  I prefer to come earlier because the traffic is lighter if I come in at 6:45.  So, I come in and don’t start working until seven.&lt;/p&gt;
&lt;p&gt;To get my eight hours in, I can’t leave until 3:30 anyhow.  So that is not an issue.  And if I need to leave early occasionally, no one said I couldn’t do that.&lt;/p&gt;
&lt;h2 id=&#34;The-Key-To-Eliminating-Limiting-Beliefs&#34;&gt;&lt;a href=&#34;#The-Key-To-Eliminating-Limiting-Beliefs&#34; class=&#34;headerlink&#34; title=&#34;The Key To Eliminating Limiting Beliefs&#34;&gt;&lt;/a&gt;The Key To Eliminating Limiting Beliefs&lt;/h2&gt;&lt;p&gt;Do you see what I’ve done here?  At every point where I’ve been told or believed I could not do something, I’ve change the question from “What can’t I do?” to “What can I do?”  Can’t locks you down.  It locks you out.  Can frees you. So, what limiting beliefs do you have and how can you overcome them?&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="programming" />
        <category term="agile" />
        <category term="scrum" />
        <category term="limiting beliefs" />
        <updated>2015-04-09T10:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/magic-strings-and-magic-numbers/</id>
        <title>Magic Strings and Magic Numbers</title>
        <link rel="alternate" href="http://davembush.github.com/magic-strings-and-magic-numbers/"/>
        <content type="html">&lt;p&gt;This past week a very old (last time I did work for him was in 2007) client of mine contacted me because their program suddenly started exhibiting a problem.  It seems that if a user enters a date anytime in 2015, the program displays an error message indicating that they need to enter a date greater than today and less than two years from today.&lt;/p&gt;
&lt;p&gt;When I went to replicate the error in my debugger, I discovered this bit of code:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (Year &amp;lt; &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (Year &amp;lt; &lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Year += &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Year += &lt;span class=&#34;number&#34;&gt;1900&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;So that, if you enter any date as 15, it assumes the date is 1915 instead of 2015.&lt;/p&gt;
&lt;p&gt;Now, we are talking about code here that has been around since the DOS days, and I’m pretty sure this particular routine has been around since then too.  I’m sure when it was coded, the year 2015 seemed so distant, that no one considered that the program might actually still be running in some form.&lt;/p&gt;
&lt;p&gt;But, that’s just the problem with Magic Strings and Magic Numbers.  They can appear to work for years, even decades, and then one day they show themselves for the evil they are.&lt;/p&gt;
&lt;p&gt;So, how can you guard yourself against using Magic Strings or Magic Numbers? That’s just the issue.  You can’t.  Sometimes they are only obvious once they manifest themselves as a bug.  However, here are a set of common places you should look.&lt;/p&gt;
&lt;h2 id=&#34;Are-you-working-with-dates&#34;&gt;&lt;a href=&#34;#Are-you-working-with-dates&#34; class=&#34;headerlink&#34; title=&#34;Are you working with dates?&#34;&gt;&lt;/a&gt;Are you working with dates?&lt;/h2&gt;&lt;p&gt;Yeah, I know, this one is obvious since that’s what we are talking about.  But here are some other places you might want to look.&lt;/p&gt;
&lt;p&gt;As I’ve considered how I might fix this bug, I’ve decided that what I’ll do is get the current year, find the two digit version and add three to it.  I’ll use that computed date as the century roll over.&lt;/p&gt;
&lt;p&gt;But code is immortal.  That’s not the only place in this code that needs fixing.  The other place is the 1900 and 2000.  Those should be computed as well.  Not that I plan on being around, in the year 2100 and following, but as long as this code has been around, I should plan on the code being around then.  And it won’t be that much more work to compute those centuries as  century of today and century of today minus 100.&lt;/p&gt;
&lt;p&gt;The only constant I can see using in the code above is the 100.  Even if it does change, I don’t think anyone will complain too loudly when it does.&lt;/p&gt;
&lt;h2 id=&#34;Databases&#34;&gt;&lt;a href=&#34;#Databases&#34; class=&#34;headerlink&#34; title=&#34;Databases&#34;&gt;&lt;/a&gt;Databases&lt;/h2&gt;&lt;p&gt;Another obvious place to look is in your database code.&lt;/p&gt;
&lt;p&gt;Actually, if you aren’t careful, there are a lot of mistakes you can make here.  But for now, let’s just stick to magic string issues.&lt;/p&gt;
&lt;h3 id=&#34;Connection-Strings&#34;&gt;&lt;a href=&#34;#Connection-Strings&#34; class=&#34;headerlink&#34; title=&#34;Connection Strings&#34;&gt;&lt;/a&gt;Connection Strings&lt;/h3&gt;&lt;p&gt;By now, this should be obvious.  Don’t include the connection string to your database in the code of your program.  At the very least, put it in your web.config or app.config file so it can be changed without recompiling your code.&lt;/p&gt;
&lt;h3 id=&#34;SQL&#34;&gt;&lt;a href=&#34;#SQL&#34; class=&#34;headerlink&#34; title=&#34;SQL&#34;&gt;&lt;/a&gt;SQL&lt;/h3&gt;&lt;p&gt;If you’ve done any amount of programming, you should know by now that your SQL belongs in your SQL database as a stored procedure.  That’s the best place for it.  However, I’ve had occasions where getting the SQL changed by the SQL gods, otherwise known as the DBAs, is so painful, that including the SQL in your code is much more practical.&lt;/p&gt;
&lt;p&gt;Here’s a tip.  Keep your SQL code separate from your other code.  Put it in a resource file.  Put it in a text file.  Just don’t put it in your C# or VB.NET code.&lt;/p&gt;
&lt;h3 id=&#34;POCOs&#34;&gt;&lt;a href=&#34;#POCOs&#34; class=&#34;headerlink&#34; title=&#34;POCOs&#34;&gt;&lt;/a&gt;POCOs&lt;/h3&gt;&lt;p&gt;Are you generating POCOs to accompany your SQL?  Assuming you can’t use Entity Framework and you have to generate your own POCOs, you should generate your POCOs from your SQL.  That way, if your SQL changes, your POCO code changes automatically.&lt;/p&gt;
&lt;h3 id=&#34;Schemas-Change&#34;&gt;&lt;a href=&#34;#Schemas-Change&#34; class=&#34;headerlink&#34; title=&#34;Schemas Change&#34;&gt;&lt;/a&gt;Schemas Change&lt;/h3&gt;&lt;p&gt;And while we are talking about Schemas, I’ll remind you that Schemas change.  Do you have a strategy in place so that you can tell what version of the database schema you are using at any particular time?&lt;/p&gt;
&lt;h2 id=&#34;The-File-System&#34;&gt;&lt;a href=&#34;#The-File-System&#34; class=&#34;headerlink&#34; title=&#34;The File System&#34;&gt;&lt;/a&gt;The File System&lt;/h2&gt;&lt;p&gt;File system issues have frustrated me on several occasions.  The most obvious one is the difference between Mac&amp;#x2F;Linux and Windows.  Now that .NET is going to be available on Mac and Linux, this is something you’ll want to pay attention too.  But, you should also pay attention to assumptions like drive letters.  Will you always want your code saved in this location.&lt;/p&gt;
&lt;p&gt;We had an issue years ago with the same code base I referred to above when Vista came out and you could no longer save your data files with your program files.  It took several hours of refactoring to get that code into a location that the user had rights to.  That should be a lesson for you.  Once again, just because a hard coded value works today, doesn’t mean it will work tomorrow.&lt;/p&gt;
&lt;h2 id=&#34;Dave’s-Law-of-N&#34;&gt;&lt;a href=&#34;#Dave’s-Law-of-N&#34; class=&#34;headerlink&#34; title=&#34;Dave’s Law of N&#34;&gt;&lt;/a&gt;Dave’s Law of N&lt;/h2&gt;&lt;p&gt;This next one is not one you’d naturally think of as a Magic Number, but it is.&lt;/p&gt;
&lt;p&gt;You go to the customer and get requirements that say there will be two of something.  Maybe the contact record will have two phone numbers.  Or maybe they say there will be three of something.  It doesn’t really matter.  The magic number here is in the number of items that you need to store.&lt;/p&gt;
&lt;p&gt;I’ve seen this violated in a number of ways.  But the interview question I now ask is something along the lines of, “You need to store a person class in the database with FirstName, LastName, BirthDate, HomePhone, and CellPhone.  Create a database schema to hold this information.&lt;/p&gt;
&lt;p&gt;If they don’t come back to me with at least two tables, one for the Person and one for Phone numbers, I won’t hire them.  They get bonus points if they also create a third table so that we can classify the phone numbers in the phone number table.&lt;/p&gt;
&lt;p&gt;And that’s where “Dave’s Law of N” comes in.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If there is two of something there WILL be three of something. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Code it today so that tomorrow we can add the third item without coding.  It won’t take you any longer to do it right today and it will save us time when they eventually realize they should have asked for more.&lt;/p&gt;
&lt;p&gt;Well, I’m sure that’s not all of the places you should look.  But that’s a start to get you thinking in the right direction.&lt;/p&gt;
</content>
        <category term="c#" />
        <category term="vb.net" />
        <category term="magic numbers" />
        <category term="magic strings" />
        <updated>2014-12-18T12:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/raking-leaves-and-writing-code/</id>
        <title>Raking Leaves and Writing Code</title>
        <link rel="alternate" href="http://davembush.github.com/raking-leaves-and-writing-code/"/>
        <content type="html">&lt;p&gt;So, today I had the task of removing the leaves from my yard, which gave me a lot of time to think because it is a pretty solitary job, even if you have people helping you, because much of the time I was using a leaf blower.  It is pretty hard to hold any kind of conversation when you are using a leaf blower.&lt;/p&gt;
&lt;p&gt;And  as I was running the leaf blower, I was thinking about what I was going to talk about today.  And then it struck me, why not just talk about cleaning up the leaves?  I mean if John Sonmez and Scott Hanselman can talk about stuff that isn’t necessarily programming related, why can’t I?&lt;/p&gt;
&lt;p&gt;But then I realized, I could talk about cleaning up the leaves in my yard AND talk about programming at the same time.&lt;/p&gt;
&lt;p&gt;Think about it.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Why-Rake-Leaves&#34;&gt;&lt;a href=&#34;#Why-Rake-Leaves&#34; class=&#34;headerlink&#34; title=&#34;Why Rake Leaves?&#34;&gt;&lt;/a&gt;Why Rake Leaves?&lt;/h2&gt;&lt;p&gt;Why did I clean up the leaves in my yard?  It wasn’t to make my yard look better.  No one can see my yard from the road.  No one would care but my family, and they do care.  But even if they didn’t, we ultimately clean the leaves off our yards because doing that means our grass will grow better next summer by allowing it to see the sun now.  We do it because nasty critters live in leaves.  We remove the leaves from our drive ways and sidewalks so that snow removal will be easier in the winter.  In short, as hard as the work is to take care of our leaves in the fall, the work is worth it because it makes the rest of the fall and winter easier for us  in the long run.&lt;/p&gt;
&lt;p&gt;What’s interesting about the first reason, allowing the grass to get more sun during the fall months, would mean that it would actually be better to clean up the leaves frequently during the fall rather than waiting for them to all fall and then rake them.  By the time I get to them, it is probably too late to do any real good because I wait for them to all fall before I remove them.  By that time, the sun shines less during the day and the frost has already kicked in.&lt;/p&gt;
&lt;h2 id=&#34;How-Is-This-Related-to-Code&#34;&gt;&lt;a href=&#34;#How-Is-This-Related-to-Code&#34; class=&#34;headerlink&#34; title=&#34;How Is This Related to Code?&#34;&gt;&lt;/a&gt;How Is This Related to Code?&lt;/h2&gt;&lt;p&gt;And that brings me to our code.  We all have code that needs “raking”.  You know you have code that is duplicated all over the place, but have you taken any time to collect all of that code into one place as a function?&lt;/p&gt;
&lt;p&gt;How many code smells do you have.  Are your functions long?  Do you have conditional blocks nested more than one deep?  Do you have classes that do more than one thing?  Have you written code that isn’t being used because “we might need it some day”?&lt;/p&gt;
&lt;p&gt;As I work with inexperienced programmers, the one thing I notice is that looking for places to simplify code is a skill that needs to be practiced.  It doesn’t come naturally.  Very few programmers assume that as long as the code does what it should, they are done.&lt;/p&gt;
&lt;p&gt;And yet, leaving these code smells in place means that the next time you go in to work on the system, you will not be able to understand the code as well as you should.  Because you haven’t let the sun shine on your code, when you get to it to maintain it, you’ll be working in mud instead of nice green grass.&lt;/p&gt;
&lt;h2 id=&#34;The-Challenge&#34;&gt;&lt;a href=&#34;#The-Challenge&#34; class=&#34;headerlink&#34; title=&#34;The Challenge&#34;&gt;&lt;/a&gt;The Challenge&lt;/h2&gt;&lt;p&gt;So today, your job is to find one place in your code that could be made better.  Make it less complicated.  Make it fewer lines of code (without making it hard to read).  Find two places that are doing essentially the same thing and turn that code into a function.  Find two classes that are tightly coupled (highly dependent on each other) and remove the dependencies.  Do this once a day for the next thirty days and see if you don’t find your code easier to work with than it  is today.&lt;/p&gt;
</content>
        <category term="programming" />
        <category term="best practices" />
        <category term="code quality" />
        <updated>2014-11-20T12:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/technical-debt-is-inevitable/</id>
        <title>Technical Debt Is Inevitable</title>
        <link rel="alternate" href="http://davembush.github.com/technical-debt-is-inevitable/"/>
        <content type="html">&lt;p&gt;Whoa there Dave.  What are you talking about?  Have you given up the fight? You who have preached the TDD religion.  You who’ve struggled to get organizations to adopt naming conventions, to use version control systems and to use project management software.  The same guy who has implemented continuous integration on his current project?  What’s this world coming to?&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;No. Relax. I haven’t given up.  In fact it is precisely because technical debt is inevitable that we need to implement all of the above.&lt;/p&gt;
&lt;h2 id=&#34;Danger&#34;&gt;&lt;a href=&#34;#Danger&#34; class=&#34;headerlink&#34; title=&#34;Danger&#34;&gt;&lt;/a&gt;Danger&lt;/h2&gt;&lt;p&gt;But there  is a danger in believing that if we were to implement all of the best practices in the book, or that could ever be devised, that technical debt would simply vanish.  And the sooner some of you realize this, the less stressed out you will be.&lt;/p&gt;
&lt;p&gt;You see, no matter how good of a programmer you are today, tomorrow you will be a better programmer.  That is true for all of us.  We are all doing as good of a job as we possibly can today.&lt;/p&gt;
&lt;h2 id=&#34;A-Story&#34;&gt;&lt;a href=&#34;#A-Story&#34; class=&#34;headerlink&#34; title=&#34;A Story&#34;&gt;&lt;/a&gt;A Story&lt;/h2&gt;&lt;p&gt;This reminds me of a story I heard once.&lt;/p&gt;
&lt;p&gt;It seems there was this programmer who had to make a change to some code and, like we all do, the first thing he did was to try to wrap his head around the code he was looking at.  A few minutes into this common exercise, he starts exclaiming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Who wrote this code?&lt;/li&gt;
&lt;li&gt;This is the worst code I’ve ever seen.&lt;/li&gt;
&lt;li&gt;The guy who wrote this can’t even really call himself a programmer!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then, it got unusually quite in his cubicle.&lt;/p&gt;
&lt;p&gt;His friend in the next cube calls over the wall, “Hey John, you OK?”&lt;/p&gt;
&lt;p&gt;And John responds, “It’s my code.”&lt;/p&gt;
&lt;p&gt;Now, the reason this is a funny story… well, it is a funny story for me anyhow… is because this happens to us all of the time.&lt;/p&gt;
&lt;p&gt;I think I spent the first 5 years of my career looking at code I wrote six months ago and thinking, “What was I thinking when I wrote this?”&lt;/p&gt;
&lt;p&gt;Even today, 26 years in, I have code I wrote six months or more ago that I know I need to rewrite.  The only reason I haven’t yet is because I want to make sure I have a full test harness around it before I tweak it.&lt;/p&gt;
&lt;h2 id=&#34;Here’s-the-point&#34;&gt;&lt;a href=&#34;#Here’s-the-point&#34; class=&#34;headerlink&#34; title=&#34;Here’s the point.&#34;&gt;&lt;/a&gt;Here’s the point.&lt;/h2&gt;&lt;p&gt;We are all getting better at what we do.  What we would do today isn’t what we would have done six months ago.  The person who wrote the code you are looking at was doing the best he could at the time.&lt;/p&gt;
&lt;p&gt;Therefore, we should just plan on code being “wrong.”&lt;/p&gt;
&lt;p&gt;This has two explicit implications to how you relate to your code and your co-workers.&lt;/p&gt;
&lt;h3 id=&#34;Don’t-be-surprised-by-bad-code&#34;&gt;&lt;a href=&#34;#Don’t-be-surprised-by-bad-code&#34; class=&#34;headerlink&#34; title=&#34;Don’t be surprised by bad code&#34;&gt;&lt;/a&gt;Don’t be surprised by bad code&lt;/h3&gt;&lt;p&gt;First, you should not be surprised when you find bad code.  You should instead be shocked when you find well written code.  Since even you write bad code, you should be gracious when you find bad code that isn’t yours.  You don’t want to be the guy in the story  I just told.  You might have done the same thing today if you knew only what the person who wrote the code you are looking at knew at the time the code was written.&lt;/p&gt;
&lt;h3 id=&#34;You-should-expect-that-your-code-will-be-broken-in-some-way&#34;&gt;&lt;a href=&#34;#You-should-expect-that-your-code-will-be-broken-in-some-way&#34; class=&#34;headerlink&#34; title=&#34;You should expect that your code will be broken in some way.&#34;&gt;&lt;/a&gt;You should expect that your code will be broken in some way.&lt;/h3&gt;&lt;p&gt;This has been probably the hardest thing for me to get control of.  I have, historically, been one to deny that my code has a bug.  I’ve taken it as a personal insult, or an assault on my character when someone finds a bug in my code. &lt;/p&gt;
&lt;p&gt;Until recently.&lt;/p&gt;
&lt;p&gt;Once I was able to internalize the fact that the person reporting the bug was not upset, that the only person who expected me to be perfect was me, and that being wrong was part of being human, I was able to calm down a bit.&lt;/p&gt;
&lt;p&gt;You see, none of us are all knowing.  Most of us program for what the code is supposed to do and don’t think about what it shouldn’t do (which is where most of the bugs occur).  The spoken&amp;#x2F;written language is an imprecise communicator, even if you develop a dictionary for your project.  You’ll never get all of your terms defined.  You just don’t know what you don’t know.  And therefore there will be bugs.&lt;/p&gt;
&lt;p&gt;Maybe you’ll think, “I should have known that!”  Well, yes, maybe you SHOULD have.  But the fact is, you didn’t.&lt;/p&gt;
&lt;p&gt;When before I used to deny that the bug could even exist, my reaction now is, “Hmmm, wonder what’s going on there.  OK, well, put it in the issue tracker and I’ll get it fixed.”&lt;/p&gt;
&lt;p&gt;No drama.  No conflict.  No denial.  No blame.  Just deal with the issue.&lt;/p&gt;
&lt;h2 id=&#34;This-is-what-it-means-to-be-Agile&#34;&gt;&lt;a href=&#34;#This-is-what-it-means-to-be-Agile&#34; class=&#34;headerlink&#34; title=&#34;This is what it means to be Agile&#34;&gt;&lt;/a&gt;This is what it means to be Agile&lt;/h2&gt;&lt;p&gt;And you see, this is the beauty of the Agile methodology.  Agile assumes we aren’t going to get it right the first time.  It assumes humans are poor communicators.  It assumes that programmers aren’t going to understand the problem the first time they try to come up with a solution.  It assumes technical debt is inevitable.&lt;/p&gt;
&lt;p&gt;Isn’t it time that you do too? Or am I the only one who has suffered with this problem?&lt;/p&gt;
</content>
        <category term="agile" />
        <category term="scrum" />
        <category term="technical debt" />
        <updated>2014-10-16T10:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/yagni-you-aren%E2%80%99t-going-to-need-it/</id>
        <title>YAGNI - You Aren’t Going To Need It</title>
        <link rel="alternate" href="http://davembush.github.com/yagni-you-aren%E2%80%99t-going-to-need-it/"/>
        <content type="html">&lt;p&gt;One of the design principles in software development is to only write what you need today.  This has taken on the moniker of YAGNI (You Aren’t Going To Need It).&lt;/p&gt;
&lt;p&gt;The question is, in what ways do we violate this principle?&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Features&#34;&gt;&lt;a href=&#34;#Features&#34; class=&#34;headerlink&#34; title=&#34;Features:&#34;&gt;&lt;/a&gt;Features:&lt;/h2&gt;&lt;p&gt;The most obvious situation where we tend to violate YAGNI is in feature creep.  We design in a new end user feature that seems really cool to us.  We may even try to sell the end user into believing they need the feature.  Maybe it is just eye candy.  “We can make this screen animate when it opens.”&lt;/p&gt;
&lt;p&gt;Yeah, but is that a requirement or a nice to have?  How much longer will it take to design that?  How many more bugs will it introduce?&lt;/p&gt;
&lt;p&gt;I think most of us get YAGNI at what I would call the “Visible Feature” level.  That is, what the end user will see immediately.&lt;/p&gt;
&lt;p&gt;Where I think most of us get this wrong is at the code design and architecture level.&lt;/p&gt;
&lt;h2 id=&#34;Architecture&#34;&gt;&lt;a href=&#34;#Architecture&#34; class=&#34;headerlink&#34; title=&#34;Architecture:&#34;&gt;&lt;/a&gt;Architecture:&lt;/h2&gt;&lt;h4 id=&#34;Do-you-have-a-tendency-to-over-architect-your-code&#34;&gt;&lt;a href=&#34;#Do-you-have-a-tendency-to-over-architect-your-code&#34; class=&#34;headerlink&#34; title=&#34;Do you have a tendency to over architect your code?&#34;&gt;&lt;/a&gt;Do you have a tendency to over architect your code?&lt;/h4&gt;&lt;p&gt;This is an impossible question to answer because I think all of us think we architect to just the right level.  So what are some signs that you have gone too far?&lt;/p&gt;
&lt;p&gt;Well, one of them might be how you defend your decision to write your code in a particular way.  If your answer is anything remotely like, “We might need it to do…” you are probably over architecting.&lt;/p&gt;
&lt;p&gt;For example, when you write your code, are you thinking about all the ways it might be used in the future?  That business rule you are writing, it might be used as a web service, or need to be accessed by JSON.  You never know.&lt;/p&gt;
&lt;p&gt;But really, unless you need it to do all of that stuff today, you are probably spending more time on the code you are writing than you need to.  Why?  Because most of the time all of those, “we might need it to…” never happen.  And when they do happen, they happen in entirely unexpected ways that you can not foresee.&lt;/p&gt;
&lt;h4 id=&#34;But-it-will-save-time&#34;&gt;&lt;a href=&#34;#But-it-will-save-time&#34; class=&#34;headerlink&#34; title=&#34;But it will save time!&#34;&gt;&lt;/a&gt;But it will save time!&lt;/h4&gt;&lt;p&gt;Will it?&lt;/p&gt;
&lt;p&gt;If your code is so complex that adding in the “it might need to…” in the future is going to take more time than adding it in now, you probably have a fundamental problem with your code.&lt;/p&gt;
&lt;p&gt;Worse, as mentioned above, you will probably never need it anyhow.  So, you’ve spent extra time now to save time you wouldn’t spend in the future if you were to just wait until you need it.&lt;/p&gt;
&lt;p&gt;Aren’t you busy enough with deadlines as it is?&lt;/p&gt;
&lt;h2 id=&#34;Prevention&#34;&gt;&lt;a href=&#34;#Prevention&#34; class=&#34;headerlink&#34; title=&#34;Prevention:&#34;&gt;&lt;/a&gt;Prevention:&lt;/h2&gt;&lt;p&gt;So, then the next question is, “how do we prevent over architecting?”&lt;/p&gt;
&lt;p&gt;Simple, you write Unit Test for all the code you are writing.  If you are writing code so that it can be accessed in multiple ways, you’ll need to write test that prove it can be accessed in multiple ways.  Are you willing to do that?&lt;/p&gt;
&lt;p&gt;When the tests need to be updated to reflect new business requirements, are you going to want to update them all?&lt;/p&gt;
&lt;p&gt;So the next time you, or someone you know says, “It might need to…” maybe you should ask them what the chances of them needing that really are and is it worth spending the extra time on it now.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="xp" />
        <category term="yagni" />
        <updated>2014-08-14T17:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/defining-%E2%80%9Cdone%E2%80%9D/</id>
        <title>Defining “Done”</title>
        <link rel="alternate" href="http://davembush.github.com/defining-%E2%80%9Cdone%E2%80%9D/"/>
        <content type="html">&lt;p&gt;A couple of weeks ago, I mention &lt;a href=&#34;/are-we-there-yet/&#34;&gt;“definition of done”&lt;/a&gt; which many of my readers may have never heard of before. The phrase, “definition of done” comes out of the agile movement.  But there is no reason why it needs to stay there.  In fact, I would argue that many of the problems we have in the software industry are because most organizations only have one definition of done, “If we ship this today, can we make money?” When the Agile people talk about “definition of done” what they ultimately mean is, “if we were to ship this product today,and someone were to inspect what we’ve done, would we be embarrassed?” Definition of done, is about the quality of the code. When thinking about the definition of done, here are some items you might consider.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h4 id=&#34;Does-the-code-meet-the-requirements-of-the-user-story&#34;&gt;&lt;a href=&#34;#Does-the-code-meet-the-requirements-of-the-user-story&#34; class=&#34;headerlink&#34; title=&#34;Does the code meet the requirements of the user story?&#34;&gt;&lt;/a&gt;Does the code meet the requirements of the user story?&lt;/h4&gt;&lt;p&gt;This is the most obvious.  Of course for this to work, you have to have a user story that is specific enough for you to answer this question.&lt;/p&gt;
&lt;h4 id=&#34;Has-all-the-documentation-that-the-organization-requires-been-updated&#34;&gt;&lt;a href=&#34;#Has-all-the-documentation-that-the-organization-requires-been-updated&#34; class=&#34;headerlink&#34; title=&#34;Has all the documentation that the organization requires been updated?&#34;&gt;&lt;/a&gt;Has all the documentation that the organization requires been updated?&lt;/h4&gt;&lt;p&gt;This one can fall through the cracks easily because documentation is the least favorite activity of a programmer.  But, it isn’t necessarily a programmer activity.  Remember, an ideal team has all the skills it needs.  So, if you have a documentation requirement, be it an ISO requirement or simple end user documentation telling them how to use the software, your team should have someone on it that can produce this documentation.&lt;/p&gt;
&lt;h4 id=&#34;Does-the-code-have-a-reasonable-level-of-unit-tests&#34;&gt;&lt;a href=&#34;#Does-the-code-have-a-reasonable-level-of-unit-tests&#34; class=&#34;headerlink&#34; title=&#34;Does the code have a reasonable level of unit tests?&#34;&gt;&lt;/a&gt;Does the code have a reasonable level of unit tests?&lt;/h4&gt;&lt;p&gt;I say “reasonable” here because the principle is high code coverage where we need it.  To try to aim for some metric will cause us to write tests where we don’t need them.  By combining a “reasonableness” level with code reviews, I think we can hit this target without setting an unrealistic arbitrary limit.&lt;/p&gt;
&lt;h4 id=&#34;Do-all-of-the-unit-tests-succeed&#34;&gt;&lt;a href=&#34;#Do-all-of-the-unit-tests-succeed&#34; class=&#34;headerlink&#34; title=&#34;Do all of the unit tests succeed?&#34;&gt;&lt;/a&gt;Do all of the unit tests succeed?&lt;/h4&gt;&lt;p&gt;You’d think this one would be obvious.  You have tests, you should be running them every time the code changes.  But, I’ve seen situations where tests sit in version control and never get run. Run your tests!&lt;/p&gt;
&lt;h4 id=&#34;Is-the-code-covered-by-system-level-tests&#34;&gt;&lt;a href=&#34;#Is-the-code-covered-by-system-level-tests&#34; class=&#34;headerlink&#34; title=&#34;Is the code covered by system level tests?&#34;&gt;&lt;/a&gt;Is the code covered by system level tests?&lt;/h4&gt;&lt;p&gt;Once again, this one should be obvious.  Just because you have unit tests, doesn’t mean the system works.  The main problem with the Federal Health Care web site that went live in the United States recently is because no one made sure all the parts worked together. And don’t leave this to manual testing.  There are many ways of testing at this level that you can automate.&lt;/p&gt;
&lt;h4 id=&#34;Do-all-the-system-tests-succeed&#34;&gt;&lt;a href=&#34;#Do-all-the-system-tests-succeed&#34; class=&#34;headerlink&#34; title=&#34;Do all the system tests succeed?&#34;&gt;&lt;/a&gt;Do all the system tests succeed?&lt;/h4&gt;&lt;p&gt;Once again, run your tests.&lt;/p&gt;
&lt;h4 id=&#34;Has-the-code-been-reviewed-by-one-other-programmer&#34;&gt;&lt;a href=&#34;#Has-the-code-been-reviewed-by-one-other-programmer&#34; class=&#34;headerlink&#34; title=&#34;Has the code been reviewed by one other programmer?&#34;&gt;&lt;/a&gt;Has the code been reviewed by one other programmer?&lt;/h4&gt;&lt;p&gt;If there isn’t at least one other programmer on your team that understands what you’ve done, you aren’t done.  I could, and probably will, write a whole post about this sometime.&lt;/p&gt;
&lt;h4 id=&#34;Have-coding-conventions-been-observed-throughout-the-code&#34;&gt;&lt;a href=&#34;#Have-coding-conventions-been-observed-throughout-the-code&#34; class=&#34;headerlink&#34; title=&#34;Have coding conventions been observed throughout the code?&#34;&gt;&lt;/a&gt;Have coding conventions been observed throughout the code?&lt;/h4&gt;&lt;p&gt;There are a number of tools out there  that check for coding conventions.  For CSharp, I like ReSharper.  JsHint is what I prefer for JavaScript.  There is  FxCop built into Visual Studio. Pick a standard, find a way to automatically verify the code meets the standard, and make sure nothing gets put into version control that doesn’t meet the standard!&lt;/p&gt;
&lt;h4 id=&#34;Has-the-code-passed-some-level-of-complexity-threshold&#34;&gt;&lt;a href=&#34;#Has-the-code-passed-some-level-of-complexity-threshold&#34; class=&#34;headerlink&#34; title=&#34;Has the code passed some level of complexity threshold?&#34;&gt;&lt;/a&gt;Has the code passed some level of complexity threshold?&lt;/h4&gt;&lt;p&gt;I’ve talked about &lt;a href=&#34;/avoiding-code-complexity/&#34;&gt;code complexity&lt;/a&gt; before.  Just go read that post.&lt;/p&gt;
&lt;h4 id=&#34;Is-there-any-known-code-duplication&#34;&gt;&lt;a href=&#34;#Is-there-any-known-code-duplication&#34; class=&#34;headerlink&#34; title=&#34;Is there any known code duplication?&#34;&gt;&lt;/a&gt;Is there any known code duplication?&lt;/h4&gt;&lt;p&gt;Again, there are tools for this.  Find one and use it.&lt;/p&gt;
&lt;h4 id=&#34;When-you-compile-are-there-warnings&#34;&gt;&lt;a href=&#34;#When-you-compile-are-there-warnings&#34; class=&#34;headerlink&#34; title=&#34;When you compile, are there warnings?&#34;&gt;&lt;/a&gt;When you compile, are there warnings?&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;/treat-warnings-as-errors/&#34;&gt;Compiling without warnings&lt;/a&gt; is something else I’ve already talked about.  &lt;/p&gt;
&lt;h2 id=&#34;Other-Places-Talking-About-“Definition-of-Done”&#34;&gt;&lt;a href=&#34;#Other-Places-Talking-About-“Definition-of-Done”&#34; class=&#34;headerlink&#34; title=&#34;Other Places Talking About “Definition of Done”&#34;&gt;&lt;/a&gt;Other Places Talking About “Definition of Done”&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//www.scrumalliance.org/community/articles/2008/september/what-is-definition-of-done-(dod)&#34;&gt;What Is Definition of Done (Scrum Alliance)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//www.mountaingoatsoftware.com/blog/clarifying-the-relationship-between-definition-of-done-and-conditions-of-sa&#34;&gt;Clarifying Definition of Done (Mountain Goat Software)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//blogs.atlassian.com/2013/10/8-steps-to-a-definition-of-done-in-jira/&#34;&gt;8 Steps To Definition of Done in JIRA (Atlassian Blog)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//www.mitchlacey.com/intro-to-agile/scrum/definition-of-done&#34;&gt;Definition of Done Creation (Mitch Lacey &amp;amp; Associates)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="programming" />
        <category term="definition of done" />
        <category term="DoD" />
        <updated>2014-07-10T17:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/avoiding-code-complexity/</id>
        <title>Avoiding Code Complexity</title>
        <link rel="alternate" href="http://davembush.github.com/avoiding-code-complexity/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/06/clip_image001.png&#34; alt=&#34;clip_image001&#34; title=&#34;clip_image001&#34;&gt;A couple of weeks ago, I talked a bit about how we name things.  Specifically, I talked about the &lt;a href=&#34;/i-j-and-k-should-die/&#34;&gt;very bad habit of using the variables i, j, and k as variables in our for&amp;#x2F;next loops&lt;/a&gt;. A few weeks before that, I talked about &lt;a href=&#34;/dry-programming/&#34;&gt;DRY Programming&lt;/a&gt; and the fact that not repeating ourselves extends much farther than most of us normally think when we are thinking about our code. Today I want to continue on the general theme of code quality by discussing code complexity.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-is-it&#34;&gt;&lt;a href=&#34;#What-is-it&#34; class=&#34;headerlink&#34; title=&#34;What is it?&#34;&gt;&lt;/a&gt;What is it?&lt;/h2&gt;&lt;p&gt;Generally, code complexity is anything you introduce into your code that makes it hard to follow.  But here are a few areas you might look for code complexity.&lt;/p&gt;
&lt;h2 id=&#34;Do-you-have-REALLY-long-methods&#34;&gt;&lt;a href=&#34;#Do-you-have-REALLY-long-methods&#34; class=&#34;headerlink&#34; title=&#34;Do you have REALLY long methods?&#34;&gt;&lt;/a&gt;Do you have REALLY long methods?&lt;/h2&gt;&lt;p&gt;Here’s the deal.  The longer your method is, the more work it will be to keep track of the overall point of the method.  So, you want to keep the number of lines in your method low.  If you are doing too much, when you come back to your code, even you will be confused. I remember when I first started programming.  We only had 25 lines for a full screen, and the rule was, you should be able to see the full function or method on one screen full of code in your editor.  The problem with that metric now is that our screens have gotten capable of showing a lot more code.  It’s a lot like telling a new driver, he should be able to still see the license plates of the car in front of him when he stops behind a car.  Some cars exist where my tiny little Civic would be IN the other car and I’d still be able to see the plates. A better metric would be to use the 7 +&amp;#x2F;- 2 rule.  Ideally no more than 7 lines of functional code per method.  If you have to, you can fudge it to up to 9, but no more.  This is because the human brain can only deal with about 7 items at a time. I can think of a few times when you might want to break this rule, like when you have a set of conditions that really need to all be in the same place for them to make sense, but it wouldn’t hurt to try to keep to the rule as often as possible.&lt;/p&gt;
&lt;h2 id=&#34;Do-you-have-a-lot-of-conditions-within-one-method&#34;&gt;&lt;a href=&#34;#Do-you-have-a-lot-of-conditions-within-one-method&#34; class=&#34;headerlink&#34; title=&#34;Do you have a lot of conditions within one method?&#34;&gt;&lt;/a&gt;&lt;strong&gt;Do you have a lot of conditions within one method?&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;When I was discussing the problem with using i, j, and k as variables, I kind of mentioned this, but I didn’t dwell on the subject a lot. You see, the story I told when I was telling you all about the i, j, and k problem violated all of the readability rules.  First, it was using the wrong variable names.  Second, the method was MUCH too long.  And third it had too many conditions. You might think that only if&amp;#x2F;else statements are conditions.  But so are for&amp;#x2F;next, while, do&amp;#x2F;while, and switch statements.  As much as you can, your code should be setup so that you only have one condition per method.  Three at the most.  Again, switch statements might loose their context, but here, I would have one method that handles the switch statement and only one line per case statement.  Each case statement should call a function that does the real work. There is a tool in Visual Studio 2013 that will help you determine how bad your methods are.  You can calculate metrics for a project or the entire solution and it will generate a table of the Cyclomatic complexity of your code.  Look for methods that have a Cyclomatic complexity of over 10 and try to bring them down.  The closer to  zero you get, the better.  Many people suggest that we keep this number below 10 or 11, but this is just an opinion.  I would rather just say look at what you’ve currently got and strive for better. If you have Visual Studio, this option is under the Analyze menu option.&lt;/p&gt;
&lt;h2 id=&#34;Do-you-have-a-lot-of-operations-function-calls-parameters-to-those-calls&#34;&gt;&lt;a href=&#34;#Do-you-have-a-lot-of-operations-function-calls-parameters-to-those-calls&#34; class=&#34;headerlink&#34; title=&#34;Do you have a lot of operations, function calls, parameters to those calls?&#34;&gt;&lt;/a&gt;Do you have a lot of operations, function calls, parameters to those calls?&lt;/h2&gt;&lt;p&gt;What I’m basically talking about here is what’s called Halstead Volume or Halstead Metrics.  What this computes is how complex the code is. For example, if you have five lines of code and a Cyclomatic complexity of ten as everyone suggest, your code may still be in trouble because each line of code is so complex that no one on earth could possibly understand it. We call this self obfuscating code. You probably have some superstar on your team that thinks he’s so hot that he codes an entire function on one line.  The problem with this is that six months from now, neither he nor you will be able to figure out what the code does.  Any fix that will be needed will require an entire rewrite of the code.  That’s exactly what we are trying to prevent. If you are using Visual Studio 2013 Ultimate, you can get the &lt;a href=&#34;//visualstudiogallery.msdn.microsoft.com/f85a7ab9-b4c2-436c-a6e5-0f06e0bac16d&#34;&gt;Microsoft Codelens Code Health Indicator&lt;/a&gt; which adds the ability to check for all three of the above problems for each of your methods.  If you pay attention to it, it will help you make code that is easier to understand.&lt;/p&gt;
&lt;h2 id=&#34;Can-You-Easily-Find-Code-You-Need-To-Maintain&#34;&gt;&lt;a href=&#34;#Can-You-Easily-Find-Code-You-Need-To-Maintain&#34; class=&#34;headerlink&#34; title=&#34;Can You Easily Find Code You Need To Maintain?&#34;&gt;&lt;/a&gt;Can You Easily Find Code You Need To Maintain?&lt;/h2&gt;&lt;p&gt;This is one that is harder to detect, but I thought I’d mention it here because it is a real issue. In an ideal world, we shouldn’t need to use a debugger to track down where the code is that we need to modify.  There are cases where this may be the only solution.  But you should know, for example, that all of your validation code is in this one location.  If you have validation code in multiple locations, you are probably thinking about your code incorrectly. But also cut yourself some slack because this kind of code complexity is not something you are going to notice until late in your project.  You may never see it, but you will certainly recognize it when you run into it in someone else’s code.&lt;/p&gt;
&lt;h2 id=&#34;Which-reminds-me-of-a-story&#34;&gt;&lt;a href=&#34;#Which-reminds-me-of-a-story&#34; class=&#34;headerlink&#34; title=&#34;Which reminds me of a story.&#34;&gt;&lt;/a&gt;Which reminds me of a story.&lt;/h2&gt;&lt;p&gt;There was this guy that was working in a cube and he suddenly starts ranting.  “Who wrote this code?!  This is the dumbest code I’ve ever seen.  etc…”  Suddenly he got real quiet and the guy in the next cube asked him, “hey, Joe, what’s wrong?”  Joe replies, “It’s my code.” So even if you don’t pay attention to these issues for your coworker’s sake.  Do it for yourself.&lt;/p&gt;
</content>
        <category term="programming" />
        <category term="best practices" />
        <category term="code quality" />
        <category term="cyclomatic" />
        <category term="halstead" />
        <updated>2014-06-19T17:27:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/i-j-and-k-should-die/</id>
        <title>I, J, and K Should Die</title>
        <link rel="alternate" href="http://davembush.github.com/i-j-and-k-should-die/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/05/ijk.png&#34; alt=&#34;ijk&#34; title=&#34;ijk&#34;&gt;One of the hardest things we do as programmers is naming things.  But the easiest thing to name is counter variables and most of us do it wrong several times a day. Of course, I’m talking about the notorious habit of naming our counter variables I, J, or K depending on how far down we’ve nested our looping.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;History&#34;&gt;&lt;a href=&#34;#History&#34; class=&#34;headerlink&#34; title=&#34;History&#34;&gt;&lt;/a&gt;History&lt;/h2&gt;&lt;p&gt;Now, my understanding of the history of I, J, and K as common variables that we use in programming is that the practice started in FORTRAN.  There are two reasons why FORTRAN programmers did this.  FORTRAN is primarily a math language.  I, J, and K were used in math and so the practice was carried over into FORTRAN and from there to other languages. FORTRAN encouraged this by also automatically declaring I, J and K as integers.  So using I, J and K made the code slightly easier to write and seemed to be considered a best practice at the time. The other reason I, J, and K have prevailed as indexing variables is because in the early days, our variable name length was limited and in some languages, the variable names were stored in our code and consumed memory, which was a precious resource we didn’t want to waste on long variable names. And so the practice continues to this day, largely because, “We’ve always done it that way.”&lt;/p&gt;
&lt;h2 id=&#34;Story&#34;&gt;&lt;a href=&#34;#Story&#34; class=&#34;headerlink&#34; title=&#34;Story&#34;&gt;&lt;/a&gt;Story&lt;/h2&gt;&lt;p&gt;But let me tell you a story that illustrates why this is a bad idea. Admittedly, this story is pretty old, but only because in my 28 years of programming, this is still the best story I have to illustrate this issue. You see, one day, back when I was still regularly programming in C++ (for you kids out there, C++ is what Java and CSharp get most of their syntax) my manager came to me with a bug. Now the interesting thing about this bug is that it only occurred with one particular data set.  Most of the time it worked. So, I put on my detective’s hat and went to work.  Now, I try to go for the quick kill first.  So, I set break points at various locations and checked variables and found out …  nothing. That’s right, nothing. After about four hours of trying various methods of the above and trying to step through the code only to find the looping that was taking place was going to cause that to take several weeks, I finally stumbled on to the problem. And I do mean I stumbled, there’s no way I was going to find this problem using any of my standard debugging techniques. Here is what the code looked like:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; someValue;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// lots of code here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(j = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;j &amp;lt; someOtherValue;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// still more code here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(k = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;k &amp;lt; yetAnotherValue;k++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// and again, more code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(someConditionThatBarelyEverHappens)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;// some correcting code here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// more code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// more code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Do-you-see-what-I-see&#34;&gt;&lt;a href=&#34;#Do-you-see-what-I-see&#34; class=&#34;headerlink&#34; title=&#34;Do you see what I see?&#34;&gt;&lt;/a&gt;Do you see what I see?&lt;/h2&gt;&lt;p&gt;Do you see it? What was happening is that the inner “for(i…)” loop was resetting the outer I so that the whole loop essentially turned into an infinite loop for this data set. Now, this code was wrong on so many levels.  But the chief problem with the code is that by the time the original programmer for this routine got to the inner “for(i…)” loop they had forgotten that they’d already used “I” as a variable. For all I know, the guy who put the inner “for(i…)” loop in wasn’t even the same guy as the one who created the outer variable. So, how do we fix this code? Well that’s easy.  In fact, creating variable names that mean something in place of I, J, and K is one of the easiest code fixes we can implement. What is I and index of.  If you are looping through an index of bananas, call it “bananaIndex”  It isn’t rocket science.&lt;/p&gt;
&lt;h2 id=&#34;Challenge&#34;&gt;&lt;a href=&#34;#Challenge&#34; class=&#34;headerlink&#34; title=&#34;Challenge&#34;&gt;&lt;/a&gt;Challenge&lt;/h2&gt;&lt;p&gt;And so, my code challenge to you is this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Never, ever, use I, J or K (or any other single letter) as a variable name in your code.  There should be a rule in your code quality checking that just prevents this.  Even in JavaScript code.  With tools like closure compilers, there is no valid reason to use short variable names even in JavaScript.&lt;/li&gt;
&lt;li&gt;When you find an existing single letter variable name, change it to something meaningful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;References&#34;&gt;&lt;a href=&#34;#References&#34; class=&#34;headerlink&#34; title=&#34;References&#34;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//en.wikipedia.org/wiki/Loop_counter&#34;&gt;Wikipedia “Loop Counter” article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//www.amazon.com/gp/product/0735619670/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735619670&amp;linkCode=as2&amp;tag=davmbusnetapp-20&amp;linkId=BWBBIYB3LPS5JDEN&#34;&gt;Code Complete&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=davmbusnetapp-20&amp;l=as2&amp;o=1&amp;a=0735619670&#34;&gt; – The book that first revealed this issue to me.&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="programming" />
        <category term="naming conventions" />
        <category term="variables" />
        <updated>2014-06-05T17:01:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/dry-programming/</id>
        <title>DRY Programming</title>
        <link rel="alternate" href="http://davembush.github.com/dry-programming/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/05/DRY.png&#34; alt=&#34;DRY&#34; title=&#34;DRY&#34;&gt;Today I thought I’d talk to you about the programming principle known as DRY.  As you may know, DRY stands for “Don’t Repeat Yourself” and it shows up in a lot more places than you might expect.  Even when you try really, really hard to not repeat yourself, you end up repeating yourself.  You repeat yourself even when you think you aren’t.  Lots of people repeat themselves.  Do you know of any? Ok.  I think you get the point.  Just like it is silly for me to repeat myself over and over again, it is silly for you to write the same code, or perform the same steps, over and over again.&lt;/p&gt;
&lt;p&gt;To drive the point home just a little bit more.  Do you know what the acronym WET stands for?  We Enjoy Typing.  While it doesn’t capture all of what DRY is trying to combat, I think it hits about 80% of the issue.  Have you typed something that is really similar to something you already typed?&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Copy-and-Paste&#34;&gt;&lt;a href=&#34;#Copy-and-Paste&#34; class=&#34;headerlink&#34; title=&#34;Copy and Paste&#34;&gt;&lt;/a&gt;Copy and Paste&lt;/h2&gt;&lt;p&gt;The most obvious form of something that is WET is code that is an exact duplicate of something you already wrote some place else.  This can be something as mundane as code that is in the same class, to code that exist in multiple classes. In fact, I just ran into this today with some code I was working on.  The person who had written the code had created a local variable to hold a string that he was then passing into multiple methods.  That was good.  This allows us to change the string once instead of changing it in multiple places.&lt;/p&gt;
&lt;p&gt;However, he was doing the same thing in three different methods of the same class.  And in two other places he was using that same string as a string instead of using a variable.&lt;/p&gt;
&lt;p&gt;Since the string was a reference to a field name, it seemed to me to make more sense to create the variable as a constant member variable in the class and use it in all of the locations.&lt;/p&gt;
&lt;p&gt;Copy and paste issue solved.&lt;/p&gt;
&lt;p&gt;But what about the case where you need to do something similar but the code is in multiple classes?  In this case, what you’d probably want to do is to create a static class that will have a static property that will return the string.  Better yet, you could put the string in a resource file that you can reference from the static class.&lt;/p&gt;
&lt;h2 id=&#34;Copy-Paste-and-Modify&#34;&gt;&lt;a href=&#34;#Copy-Paste-and-Modify&#34; class=&#34;headerlink&#34; title=&#34;Copy, Paste and Modify&#34;&gt;&lt;/a&gt;Copy, Paste and Modify&lt;/h2&gt;&lt;p&gt;The most difficult area in our code to detect that our code is WETter than it should be is when we create code that we’ve done the Copy, Paste, and Modify routine to.  This is because it is similar but not exactly similar.  This is where a huge chunk of our WET code resides.&lt;/p&gt;
&lt;p&gt;So as you navigate through your code, you should be looking for code that is similar but not exactly the same and you should be asking yourself this question, “Is there any way I can merge this code so that it only appears once?” One way you might  make this kind of code DRY is by creating a method that takes parameters.  The parameters will let you pass in the stuff that is different while allowing the bulk of the code that is similar to be in one location.&lt;/p&gt;
&lt;p&gt;Another way you might deal with this problem is by creating a class with virtual functions that get called by a main method.  Then you can create child classes that have overridden methods that handle the differences in functionality.&lt;/p&gt;
&lt;h2 id=&#34;Similar-Steps&#34;&gt;&lt;a href=&#34;#Similar-Steps&#34; class=&#34;headerlink&#34; title=&#34;Similar Steps&#34;&gt;&lt;/a&gt;Similar Steps&lt;/h2&gt;&lt;p&gt;The hardest type of duplicate code to detect is code that has similar steps.  If you find yourself doing the same thing over and over again, you probably have an area the you either need to deal with, like we dealt with Copy, Paste, and Modify, or you may need to think about creating code that writes your code for you.&lt;/p&gt;
&lt;p&gt;This is what techniques like T4 templates were created for.&lt;/p&gt;
&lt;h2 id=&#34;Similar-Code-in-Different-Environments&#34;&gt;&lt;a href=&#34;#Similar-Code-in-Different-Environments&#34; class=&#34;headerlink&#34; title=&#34;Similar Code in Different Environments&#34;&gt;&lt;/a&gt;Similar Code in Different Environments&lt;/h2&gt;&lt;p&gt;One of the most natural places to deal with duplicate code is in the area of database access.  Typically we have to create tables or stored procedures in SQL, and then to access that code we need to write code in our main development language that mirrors the SQL code.  In CSharp, we create POCOs and CRUD routines.  And then if we are working on a web site, we need to mirror that code once again in JavaScript.&lt;/p&gt;
&lt;p&gt;This is a prime candidate for code that writes code.  If you don’t already have something that will do it for you, write some code that will look at your SQL and generate the code you need from that.  DRY says there should be one place that gets modified when a change to the database occurs.  That would be the database.&lt;/p&gt;
&lt;h2 id=&#34;Not-Just-About-Code&#34;&gt;&lt;a href=&#34;#Not-Just-About-Code&#34; class=&#34;headerlink&#34; title=&#34;Not Just About Code&#34;&gt;&lt;/a&gt;Not Just About Code&lt;/h2&gt;&lt;p&gt;But DRY isn’t just about code.&lt;/p&gt;
&lt;p&gt;There are things we do every day that have nothing to do with code that are costing us time and money.  In fact, they probably cost more time and money than your WET code because they take longer to perform.&lt;/p&gt;
&lt;p&gt;One place this occurs all of the time is in making sure that your code builds.  If you are still doing this manually, you are wasting your time.  If you aren’t doing it at all, that’s even worse.  You may not know for months that your code isn’t building and you will find out at the worst possible time.  And assuming that you have been practicing Test Driven Development, how are you making sure that those tests still work every time you make a change to your code? The obvious solution is a Continuous Integration server that reports back to you that there was a problem.&lt;/p&gt;
&lt;p&gt;What about error logs?  You are logging the errors that your system generates, right?  Are you checking the error log?  Manually?  Did you know you could setup a job to email those errors to you as soon as they occur?  No more checking needed, unless you don’t check your email.  In that case, have it send a message to your cell phone or IM you with the error, or at least have it send you a message telling you to check the log.&lt;/p&gt;
&lt;p&gt;So, those are some possible places to look for WET code.  Be on the lookout today for places that are WET and spend a little time DRYing things up.&lt;/p&gt;
</content>
        <category term="programming" />
        <category term="DRY" />
        <category term="best practices" />
        <updated>2014-05-29T16:34:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/tdd-saves-time-%E2%80%93-a-story/</id>
        <title>TDD Saves Time – A Story</title>
        <link rel="alternate" href="http://davembush.github.com/tdd-saves-time-%E2%80%93-a-story/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/05/TDDSavesTime_AStory.png&#34; alt=&#34;TDDSavesTime_AStory&#34; title=&#34;TDDSavesTime_AStory&#34;&gt;I recently had an experience writing code that proved to me, once again, that using Test Driven Development really is faster than the way I have been working. You will remember a couple of weeks ago I presented &lt;a href=&#34;/automated-web-%E2%80%A6tional-testing/&#34;&gt;a strategy for creating test scenarios where we need to test storing data to a database from a web page&lt;/a&gt;. &lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Well, recently, I had a chance to use that strategy.  In that article, I talked about first testing that the data that we were sending back to the server was actually coming back correctly to the web site.  By doing this, you don’t have to track down where the problem is.  Is it in the database save routine or did it not even get from the client to the server?  This part worked pretty much as expected and my code for that worked right away so I can’t say that I saved a whole lot of time.&lt;/p&gt;
&lt;p&gt;But the part that did save me a TON of time is the second half.  Saving the data to the database without having to use the web site to create the data I wanted to save.&lt;/p&gt;
&lt;p&gt;While I was testing the client side, I saved the data to a JSON string which I used to create an object that represented the data that had been sent back.  Then in my unit test, I recreated the object from the stream and sent that into my save routine.  Once the save was done, I reloaded the object from the database.  Now I have the original object and the saved object which I can compare.&lt;/p&gt;
&lt;p&gt;And the comparison showed me that the save wasn’t quite working the way I had expected.  I actually had to go through several (10? 15? 20?) iterations of fixing and testing before I got to a point where my test was succeeding.  It took about a day to get everything working.  Imagine if I were using a manual method to test this.  Launch the web site, fill out the form (it’s a pretty long form with a lot of data) save the form, reload the form, remember what I had  filled out, verify that everything got saved.  I easily saved half a day using Test Driven Development.&lt;/p&gt;
&lt;p&gt;If you are  still on the fence as to the value of implementing test prior to writing code, I would encourage you to try it.  Just try it for 30 days.  Yes, it will be hard getting started.  Yes, it will FEEL like it takes more time to write the test first.  But as you make this part of how you develop code, you will start to see for yourself how many benefits you can realize by implementing this best practice.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="programming" />
        <category term="testing" />
        <updated>2014-05-22T16:40:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/treat-warnings-as-errors/</id>
        <title>Treat Warnings As Errors</title>
        <link rel="alternate" href="http://davembush.github.com/treat-warnings-as-errors/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/05/TreatWarningsAsErrors.png&#34; alt=&#34;TreatWarningsAsErrors&#34; title=&#34;TreatWarningsAsErrors&#34;&gt;I used to ignore warnings when I compiled my code.  Most of the time they never caused any problems and I was able to run my code.  But recently I’ve gotten pickier about my code.  One area I’ve gotten more picky about is compiler warnings.&lt;/p&gt;
&lt;p&gt;Any code that I have direct control over now compiles cleanly.  No errors and no warnings.  This past week I found a perfect example of why.  Given the following code:&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Class1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; PropertyOne &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;; &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Class2&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;Class1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; PropertyOne &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;; &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You will get the following compiler warning:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;‘VirtualShadow.Class2.PropertyOne’ hides inherited member ‘VirtualShadow.Class1.PropertyOne’. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No big deal.  In fact, if you aren’t looking for it you won’t see it.&lt;/p&gt;
&lt;p&gt;But here is the problem.&lt;/p&gt;
&lt;p&gt;If you instantiate an object of Class2 and assign it to a variable of Class1 and then you assign the value 1 to PropertyOne using the variable of type Class1, if you tried to then access the same object from a variable of type Class2, PropertyOne will still be zero.  The default value for a property.&lt;/p&gt;
&lt;p&gt;The default implementation is to treat Class2.PropertyOne as a shadow of Class1.PropertyOne, not as an override.  The warning message is telling you that it would prefer that you be explicit about what you really want the computer to do, which you have not done.&lt;/p&gt;
&lt;p&gt;For this reason and others, I have all my projects set to treat warnings as errors in the compiler options.  It saves me from unexpected consequences like this one.&lt;/p&gt;
</content>
        <category term="compiler" />
        <category term="errror" />
        <category term="warning" />
        <updated>2014-05-15T17:30:00.000Z</updated>
    </entry>
</feed>
