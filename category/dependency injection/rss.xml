<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook â€¢ Posts by &#34;dependency injection&#34; category</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Thu, 12 Mar 2015 07:00:00 -0400</pubDate>
        <lastBuildDate>Thu, 12 Mar 2015 07:00:00 -0400</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/dependency-injection-frameworks-are-not-dependency-injection/</guid>
            <title>Dependency Injection Frameworks Are NOT Dependency Injection</title>
            <link>http://davembush.github.com/dependency-injection-frameworks-are-not-dependency-injection/</link>
            <category>tdd</category>
            <category>test driven development</category>
            <category>testing</category>
            <category>dependency injection</category>
            <pubDate>Thu, 12 Mar 2015 07:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/02/land-0148.jpg&#34; alt=&#34;land-0148&#34; title=&#34;land-0148&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you start your journey down the road of Unit Testing you will discover that part of what makes code testable is this concept of &lt;a href=&#34;//en.wikipedia.org/wiki/Dependency_injection&#34; title=&#34;Dependency injection&#34;&gt;Dependency Injection&lt;/a&gt;.Â  As you explore further, you will see people mentioning various Dependency Injection frameworks.&lt;/p&gt;
&lt;p&gt;You may naturally assume that to implement Dependency Injection, you will need to select an use a Dependency Injection framework.&lt;/p&gt;
&lt;p&gt;But, Dependency Injection has nothing to do with using a Dependency Injection framework.Â  The frameworks are there because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Â much of our existing code is code that has too many dependencies and the framework helps us break those dependencies without having to refactor too much of our code and&lt;/li&gt;
&lt;li&gt;to give us a way to easily swap out one object for another when our code is structured in such a way as to not have dependencies at all.&lt;/li&gt;
&lt;/ol&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;So-what-then-is-Dependency-Injection&#34;&gt;&lt;a href=&#34;#So-what-then-is-Dependency-Injection&#34; class=&#34;headerlink&#34; title=&#34;So, what then is Dependency Injection?&#34;&gt;&lt;/a&gt;So, what then is Dependency Injection?&lt;/h2&gt;&lt;p&gt;I once heard this maxim that explains it best,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Classes should either create stuff, or do stuff, but no one class should do both.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Much of our code looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ReceiveSAMLResponse&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; SAMLResponse samlResponse,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; String relayState&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Receive the [SAML](//en.wikipedia.org/wiki/Security_Assertion_Markup_Language &amp;quot;Security Assertion Markup Language&amp;quot;) response over the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//specified binding.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlElement samlResponseXml;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ServiceProvider.ReceiveSAMLResponseByHTTPPost(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        HttpContext.Current.Request,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; samlResponseXml, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; relayState);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SAMLResponse resp = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SAMLResponse(samlResponseXml);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlElement samlAssertionElement =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        resp.GetSignedAssertions()[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Verify the response&amp;#x27;s signature.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlDocument doc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; XmlDocument();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//metadata file path (holds the description key).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    doc.Load(HttpContext.Current.Server.MapPath(&lt;span class=&#34;string&#34;&gt;&amp;quot;~/SAML.xml&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlElement root = doc.DocumentElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!SAMLAssertionSignature.Verify(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        samlAssertionElement, ReadMetadata(root)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        samlResponse = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        relayState = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Deserialize the XML.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    samlResponse = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SAMLResponse(samlResponseXml);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Yes, this is real code from a system I worked on.Â  The original code was written three or four years ago and this specific code is code I was given by another company.Â  I just used copy and paste inheritance to get it working in our code.&lt;/p&gt;
&lt;p&gt;Thatâ€™s not to say I havenâ€™t written code that has just as many problems.&lt;/p&gt;
&lt;p&gt;There are several things that are wrong with this code, but for now all I want to focus on is the Dependency Injection issue.&lt;/p&gt;
&lt;p&gt;All this code is trying to do is to deserialize the encrypted samlResponse object that was posted to the login form.Â  At least this code isnâ€™t in the login form!Â  It has that much going for it.&lt;/p&gt;
&lt;h2 id=&#34;But-here-are-places-where-it-is-dependent-on-too-much&#34;&gt;&lt;a href=&#34;#But-here-are-places-where-it-is-dependent-on-too-much&#34; class=&#34;headerlink&#34; title=&#34;But here are places where it is dependent on too much:&#34;&gt;&lt;/a&gt;But here are places where it is dependent on too much:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ServiceProvider is a static class and called directly.&lt;/li&gt;
&lt;li&gt;ReceiveSAMLResponseByHTTPPost is dependent on the Request object that we retrieve from HttpContext.&lt;/li&gt;
&lt;li&gt;I create a new SAMLResponse object right before I call GetSignedAssertions()&lt;/li&gt;
&lt;li&gt;I create a new XmlDocument object so I can load the SAML.xml file&lt;/li&gt;
&lt;li&gt;SAMLAssertionSignature is static and called directly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In fact, this method is one huge dependency mess.Â  And Iâ€™m very aware of the mess that it is in because the company we wrote this code for just recently switched providers. Â As we tried to get this working, I had no way of testing this code in isolation without adding code directly into this method.Â  We got it working, but it didnâ€™t have to be that hard.&lt;/p&gt;
&lt;h2 id=&#34;So-hereâ€™s-what-Iâ€™d-do-to-this-code&#34;&gt;&lt;a href=&#34;#So-hereâ€™s-what-Iâ€™d-do-to-this-code&#34; class=&#34;headerlink&#34; title=&#34;So, hereâ€™s what Iâ€™d do to this code.&#34;&gt;&lt;/a&gt;So, hereâ€™s what Iâ€™d do to this code.&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Since ServiceProvider and SAMLAssertionSignature are calls to a third party API, I would wrap them in a none static class that I can instantiate.&lt;/li&gt;
&lt;li&gt;I would have the class that ultimately calls this method either pass in the dependent objects to the constructor, pass them in to the method that calls this, or set properties in the class.Â  This is what it means to inject dependencies.&lt;/li&gt;
&lt;li&gt;I would look for some way to avoid creating a new SAMLResponse object.Â  Iâ€™m not looking at the API documentation, but it would be great if I could new up the object and call a method, or set a property to give it the samlResponseXml variable.Â  If I had to, Iâ€™d probably wrap SAMLResponse in another class so that I could gain this functionality.&lt;/li&gt;
&lt;li&gt;Finally, I would make each of the dependent object based on an interface so that I could swap them out.Â  In the case of some of these classes, I may need to wrap them in another class that I have control over so that I can implement an interface.Â  For example, as things stand, I would not be able to create a fake request object because Request is a system class that does not implement an interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Advantages&#34;&gt;&lt;a href=&#34;#Advantages&#34; class=&#34;headerlink&#34; title=&#34;Advantages&#34;&gt;&lt;/a&gt;Advantages&lt;/h2&gt;&lt;p&gt;After making all of these changes, I would be able to create a test harness for this code, create fake versions of the objects, and verify that this method does what we intend for it do.&lt;/p&gt;
&lt;p&gt;Where this would have been particularly helpful is over this last week when we were trying to get this all working with the new provider.Â  In that case, I could have faked out the request object with what they were sending us and run it through a debugger to figure out what wasnâ€™t quite right.&lt;/p&gt;
&lt;h2 id=&#34;No-Dependency-Injection-Framework&#34;&gt;&lt;a href=&#34;#No-Dependency-Injection-Framework&#34; class=&#34;headerlink&#34; title=&#34;No Dependency Injection Framework&#34;&gt;&lt;/a&gt;No Dependency Injection Framework&lt;/h2&gt;&lt;p&gt;Finally, youâ€™ll notice that no where in this code did I have to use a Dependency Injection framework to get this all working.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
