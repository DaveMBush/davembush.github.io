<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://davembush.github.com</id>
    <title>Dave&#39;s Notebook â€¢ Posts by &#34;dependency injection&#34; category</title>
    <link href="http://davembush.github.com" />
    <updated>2015-03-12T11:00:00.000Z</updated>
    <category term="project management" />
    <category term="code coverage" />
    <category term="tdd" />
    <category term="unit test" />
    <category term="code" />
    <category term="programming" />
    <category term="angular" />
    <category term="javascript" />
    <category term="performance" />
    <category term="react.js" />
    <category term="agile" />
    <category term="failure" />
    <category term="kanban" />
    <category term="scrum" />
    <category term="interview" />
    <category term="job search" />
    <category term="test driven development" />
    <category term="mvvm" />
    <category term="DRY" />
    <category term="loose coupling" />
    <category term="single responsibility" />
    <category term="c#" />
    <category term="learning" />
    <category term="bug" />
    <category term="ext js" />
    <category term="sencha" />
    <category term="career" />
    <category term="react" />
    <category term="ngrx" />
    <category term="redux" />
    <category term="functional" />
    <category term="reactive" />
    <category term="mvp" />
    <category term="private" />
    <category term="testing" />
    <category term="typescript" />
    <category term="routing" />
    <category term="pointers" />
    <category term="unsafe" />
    <category term="class diagram" />
    <category term="vb.net" />
    <category term="visual studio" />
    <category term="flux" />
    <category term="lazy loading" />
    <category term="scope" />
    <category term="DOM" />
    <category term="ionic" />
    <category term="putty" />
    <category term="ssh" />
    <category term="formgroup" />
    <category term="validation" />
    <category term="angular-cli" />
    <category term="modules" />
    <category term="ngmodule" />
    <category term="observables" />
    <category term="RxJS" />
    <category term="model driven" />
    <category term="reactive forms" />
    <category term="estimating" />
    <category term="story points" />
    <category term="best practices" />
    <category term="design patterns" />
    <category term="architecture" />
    <category term="asp.net" />
    <category term="memory" />
    <category term="angular.js" />
    <category term="iis" />
    <category term="ajax" />
    <category term="json" />
    <category term="controller" />
    <category term="MVC" />
    <category term="view" />
    <category term="404" />
    <category term="application_error" />
    <category term="exceptions" />
    <category term="viewstate" />
    <category term="archietcture" />
    <category term="bll" />
    <category term="dal" />
    <category term="Three Tiered" />
    <category term=".net" />
    <category term="enums" />
    <category term="tutorial" />
    <category term="code quality" />
    <category term="cyclomatic" />
    <category term="halstead" />
    <category term="child component" />
    <category term="CefSharp" />
    <category term="Chromium" />
    <category term="Vista" />
    <category term="VPN" />
    <category term="xp" />
    <category term="get" />
    <category term="properties" />
    <category term="set" />
    <category term="empty" />
    <category term="string" />
    <category term="habits" />
    <category term="application testing" />
    <category term="dependency injection" />
    <category term="debugging" />
    <category term="cms" />
    <category term="dotnetnuke" />
    <category term="WordPress" />
    <category term="authority" />
    <category term="confidence" />
    <category term="datalist" />
    <category term="listview" />
    <category term="comments" />
    <category term="tdd. agile" />
    <category term="bootstrap" />
    <category term="copy &amp;amp; paste" />
    <category term="cross browser" />
    <category term="idisposable" />
    <category term="animation" />
    <category term="css" />
    <category term="html" />
    <category term="debug" />
    <category term="checked" />
    <category term="double" />
    <category term="float" />
    <category term="int" />
    <category term="long" />
    <category term="short" />
    <category term="unchecked" />
    <category term="currency" />
    <category term="decimal" />
    <category term="floating point math" />
    <category term="single" />
    <category term="authentication" />
    <category term="isinrole" />
    <category term="roles" />
    <category term="user" />
    <category term="definition of done" />
    <category term="DoD" />
    <category term="dispose" />
    <category term="finalize" />
    <category term="suppressfinalize" />
    <category term="education" />
    <category term="client side" />
    <category term="development" />
    <category term="class" />
    <category term="dynamic classing" />
    <category term="gridview" />
    <category term="college" />
    <category term="freshman" />
    <category term="babel" />
    <category term="es2015" />
    <category term="es6" />
    <category term="jest" />
    <category term="bdd" />
    <category term="Single Responsibility" />
    <category term="Architecture" />
    <category term="full stack developer" />
    <category term="web development" />
    <category term="formsauthentication" />
    <category term="manual" />
    <category term="redirectfromloginpage" />
    <category term="setauthcookie" />
    <category term="NgRX" />
    <category term="luck" />
    <category term="social skills" />
    <category term="brain" />
    <category term="health" />
    <category term="programmer" />
    <category term="productivity" />
    <category term="QA" />
    <category term="extreme programming" />
    <category term="software" />
    <category term="httpcontext" />
    <category term="items" />
    <category term="session" />
    <category term="naming conventions" />
    <category term="variables" />
    <category term="self improvement" />
    <category term="301" />
    <category term="302" />
    <category term="fiddler" />
    <category term="infinite loop" />
    <category term="images" />
    <category term="iTextSharp" />
    <category term="PDF" />
    <category term="concatenation" />
    <category term="quirks" />
    <category term="parsing" />
    <category term="xhtml" />
    <category term="fonts" />
    <category term="stack" />
    <category term="htmltidy" />
    <category term="tables" />
    <category term="acrofields" />
    <category term="form fields" />
    <category term="outputstream" />
    <category term="pdfreader" />
    <category term="pdfstamper" />
    <category term="bind" />
    <category term="callbacks" />
    <category term="currying" />
    <category term="events" />
    <category term="business rules" />
    <category term="boolean" />
    <category term="fields" />
    <category term="methods" />
    <category term="object" />
    <category term="functions" />
    <category term="inheritance" />
    <category term="prototype" />
    <category term="hoist" />
    <category term="falsy" />
    <category term="truthy" />
    <category term="istanbul" />
    <category term="jasmine" />
    <category term="hoisting" />
    <category term="types" />
    <category term="type conversion" />
    <category term="dialog" />
    <category term="jQuery" />
    <category term="validation controls" />
    <category term="async" />
    <category term="each" />
    <category term="collapse" />
    <category term="expand" />
    <category term="load" />
    <category term="partial content" />
    <category term="tooltip" />
    <category term="regions" />
    <category term="limiting beliefs" />
    <category term="angular material" />
    <category term="linkedin" />
    <category term="social media" />
    <category term="tips" />
    <category term="CI. Continuous Integration" />
    <category term="magic numbers" />
    <category term="magic strings" />
    <category term="flex" />
    <category term="multiview" />
    <category term="wizard" />
    <category term="threading" />
    <category term="intern" />
    <category term="express" />
    <category term="node" />
    <category term="nunit" />
    <category term="object initializers" />
    <category term="video" />
    <category term="reflection" />
    <category term="unity" />
    <category term="best practice" />
    <category term="asp.net postback button" />
    <category term="iText" />
    <category term="property based testing" />
    <category term="cli" />
    <category term="software architecture" />
    <category term="rxjs. angular 2" />
    <category term="redirect" />
    <category term="response" />
    <category term="responsive design" />
    <category term="parallel" />
    <category term="selenium" />
    <category term="Marble Testing" />
    <category term="java" />
    <category term="grid" />
    <category term="hub" />
    <category term="serialization" />
    <category term="specflow" />
    <category term="like" />
    <category term="sql" />
    <category term="tsql" />
    <category term="where clause" />
    <category term="do while" />
    <category term="for next" />
    <category term="ms-sql" />
    <category term="while" />
    <category term="gamification" />
    <category term="paired programming" />
    <category term="reference types" />
    <category term="stringbuilder" />
    <category term="value types" />
    <category term="technical debt" />
    <category term="activetabindex" />
    <category term="postback" />
    <category term="tab control" />
    <category term="tabcontrol" />
    <category term="kata" />
    <category term="extjs" />
    <category term="email" />
    <category term="mailaddress" />
    <category term="mailmessage" />
    <category term="smtpclient" />
    <category term="Quality" />
    <category term="behavior" />
    <category term="psychology" />
    <category term="portal" />
    <category term="web 1.0" />
    <category term="web 2.0" />
    <category term="trace" />
    <category term="compiler" />
    <category term="errror" />
    <category term="warning" />
    <category term="connection string" />
    <category term="dataset" />
    <category term="error" />
    <category term="web.config" />
    <category term="tslint" />
    <category term="emotions" />
    <category term="hiring" />
    <category term="aspnet_regsql" />
    <category term="forms based authentication" />
    <category term="jsdom" />
    <category term="karma" />
    <category term="noTDD" />
    <category term="bundling" />
    <category term="gulp" />
    <category term="minification" />
    <category term="node.js" />
    <category term="file upload" />
    <category term="objects" />
    <category term="hide" />
    <category term="vb.net attributes" />
    <category term="nothing" />
    <category term="nullable" />
    <category term="conditional startup" />
    <category term="windows forms" />
    <category term="winforms" />
    <category term="char" />
    <category term="split" />
    <category term="strict" />
    <category term="clarity" />
    <category term="ui" />
    <category term="ux" />
    <category term="asmx" />
    <category term="error handling" />
    <category term="webservice" />
    <category term="binary" />
    <category term="bitwise" />
    <category term="operators" />
    <category term="automation" />
    <category term="browser" />
    <category term="mstest" />
    <category term="immutable" />
    <category term="global" />
    <category term="await" />
    <category term="webapi" />
    <category term="configuration" />
    <category term="devops" />
    <category term="testcasedata" />
    <category term="testcasesource" />
    <category term="closure" />
    <category term="loops" />
    <category term="certification" />
    <category term="mcsd" />
    <category term="microsoft" />
    <category term="inversion of control" />
    <category term="ioc" />
    <category term="casting" />
    <category term="convert" />
    <category term="arguements" />
    <category term="command line" />
    <category term="main" />
    <category term="yagni" />
    <category term="npm" />
    <category term="nvm" />
    <category term="resumes" />
    <category term="change-detection" />
    <category term="state-management" />
    <category term="web-workers" />
    <category term="libraries" />
    <category term="strong typing" />
    <category term="linting" />
    <category term="constructors" />
    <category term="clean code" />
    <category term="smart-ngrx" />
    <category term="ngrx-store" />
    <category term="ngrx-entity" />
    <category term="ngrx-effects" />
    <category term="TypeScript" />
    <category term="Performance" />
    <entry>
        <id>http://davembush.github.com/dependency-injection-frameworks-are-not-dependency-injection/</id>
        <title>Dependency Injection Frameworks Are NOT Dependency Injection</title>
        <link rel="alternate" href="http://davembush.github.com/dependency-injection-frameworks-are-not-dependency-injection/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/02/land-0148.jpg&#34; alt=&#34;land-0148&#34; title=&#34;land-0148&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you start your journey down the road of Unit Testing you will discover that part of what makes code testable is this concept of &lt;a href=&#34;//en.wikipedia.org/wiki/Dependency_injection&#34; title=&#34;Dependency injection&#34;&gt;Dependency Injection&lt;/a&gt;.Â  As you explore further, you will see people mentioning various Dependency Injection frameworks.&lt;/p&gt;
&lt;p&gt;You may naturally assume that to implement Dependency Injection, you will need to select an use a Dependency Injection framework.&lt;/p&gt;
&lt;p&gt;But, Dependency Injection has nothing to do with using a Dependency Injection framework.Â  The frameworks are there because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Â much of our existing code is code that has too many dependencies and the framework helps us break those dependencies without having to refactor too much of our code and&lt;/li&gt;
&lt;li&gt;to give us a way to easily swap out one object for another when our code is structured in such a way as to not have dependencies at all.&lt;/li&gt;
&lt;/ol&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;So-what-then-is-Dependency-Injection&#34;&gt;&lt;a href=&#34;#So-what-then-is-Dependency-Injection&#34; class=&#34;headerlink&#34; title=&#34;So, what then is Dependency Injection?&#34;&gt;&lt;/a&gt;So, what then is Dependency Injection?&lt;/h2&gt;&lt;p&gt;I once heard this maxim that explains it best,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Classes should either create stuff, or do stuff, but no one class should do both.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Much of our code looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ReceiveSAMLResponse&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; SAMLResponse samlResponse,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; String relayState&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Receive the [SAML](//en.wikipedia.org/wiki/Security_Assertion_Markup_Language &amp;quot;Security Assertion Markup Language&amp;quot;) response over the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//specified binding.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlElement samlResponseXml;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ServiceProvider.ReceiveSAMLResponseByHTTPPost(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        HttpContext.Current.Request,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; samlResponseXml, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; relayState);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SAMLResponse resp = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SAMLResponse(samlResponseXml);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlElement samlAssertionElement =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        resp.GetSignedAssertions()[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Verify the response&amp;#x27;s signature.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlDocument doc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; XmlDocument();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//metadata file path (holds the description key).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    doc.Load(HttpContext.Current.Server.MapPath(&lt;span class=&#34;string&#34;&gt;&amp;quot;~/SAML.xml&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlElement root = doc.DocumentElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!SAMLAssertionSignature.Verify(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        samlAssertionElement, ReadMetadata(root)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        samlResponse = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        relayState = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Deserialize the XML.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    samlResponse = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SAMLResponse(samlResponseXml);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Yes, this is real code from a system I worked on.Â  The original code was written three or four years ago and this specific code is code I was given by another company.Â  I just used copy and paste inheritance to get it working in our code.&lt;/p&gt;
&lt;p&gt;Thatâ€™s not to say I havenâ€™t written code that has just as many problems.&lt;/p&gt;
&lt;p&gt;There are several things that are wrong with this code, but for now all I want to focus on is the Dependency Injection issue.&lt;/p&gt;
&lt;p&gt;All this code is trying to do is to deserialize the encrypted samlResponse object that was posted to the login form.Â  At least this code isnâ€™t in the login form!Â  It has that much going for it.&lt;/p&gt;
&lt;h2 id=&#34;But-here-are-places-where-it-is-dependent-on-too-much&#34;&gt;&lt;a href=&#34;#But-here-are-places-where-it-is-dependent-on-too-much&#34; class=&#34;headerlink&#34; title=&#34;But here are places where it is dependent on too much:&#34;&gt;&lt;/a&gt;But here are places where it is dependent on too much:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ServiceProvider is a static class and called directly.&lt;/li&gt;
&lt;li&gt;ReceiveSAMLResponseByHTTPPost is dependent on the Request object that we retrieve from HttpContext.&lt;/li&gt;
&lt;li&gt;I create a new SAMLResponse object right before I call GetSignedAssertions()&lt;/li&gt;
&lt;li&gt;I create a new XmlDocument object so I can load the SAML.xml file&lt;/li&gt;
&lt;li&gt;SAMLAssertionSignature is static and called directly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In fact, this method is one huge dependency mess.Â  And Iâ€™m very aware of the mess that it is in because the company we wrote this code for just recently switched providers. Â As we tried to get this working, I had no way of testing this code in isolation without adding code directly into this method.Â  We got it working, but it didnâ€™t have to be that hard.&lt;/p&gt;
&lt;h2 id=&#34;So-hereâ€™s-what-Iâ€™d-do-to-this-code&#34;&gt;&lt;a href=&#34;#So-hereâ€™s-what-Iâ€™d-do-to-this-code&#34; class=&#34;headerlink&#34; title=&#34;So, hereâ€™s what Iâ€™d do to this code.&#34;&gt;&lt;/a&gt;So, hereâ€™s what Iâ€™d do to this code.&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Since ServiceProvider and SAMLAssertionSignature are calls to a third party API, I would wrap them in a none static class that I can instantiate.&lt;/li&gt;
&lt;li&gt;I would have the class that ultimately calls this method either pass in the dependent objects to the constructor, pass them in to the method that calls this, or set properties in the class.Â  This is what it means to inject dependencies.&lt;/li&gt;
&lt;li&gt;I would look for some way to avoid creating a new SAMLResponse object.Â  Iâ€™m not looking at the API documentation, but it would be great if I could new up the object and call a method, or set a property to give it the samlResponseXml variable.Â  If I had to, Iâ€™d probably wrap SAMLResponse in another class so that I could gain this functionality.&lt;/li&gt;
&lt;li&gt;Finally, I would make each of the dependent object based on an interface so that I could swap them out.Â  In the case of some of these classes, I may need to wrap them in another class that I have control over so that I can implement an interface.Â  For example, as things stand, I would not be able to create a fake request object because Request is a system class that does not implement an interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Advantages&#34;&gt;&lt;a href=&#34;#Advantages&#34; class=&#34;headerlink&#34; title=&#34;Advantages&#34;&gt;&lt;/a&gt;Advantages&lt;/h2&gt;&lt;p&gt;After making all of these changes, I would be able to create a test harness for this code, create fake versions of the objects, and verify that this method does what we intend for it do.&lt;/p&gt;
&lt;p&gt;Where this would have been particularly helpful is over this last week when we were trying to get this all working with the new provider.Â  In that case, I could have faked out the request object with what they were sending us and run it through a debugger to figure out what wasnâ€™t quite right.&lt;/p&gt;
&lt;h2 id=&#34;No-Dependency-Injection-Framework&#34;&gt;&lt;a href=&#34;#No-Dependency-Injection-Framework&#34; class=&#34;headerlink&#34; title=&#34;No Dependency Injection Framework&#34;&gt;&lt;/a&gt;No Dependency Injection Framework&lt;/h2&gt;&lt;p&gt;Finally, youâ€™ll notice that no where in this code did I have to use a Dependency Injection framework to get this all working.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="test driven development" />
        <category term="testing" />
        <category term="dependency injection" />
        <updated>2015-03-12T11:00:00.000Z</updated>
    </entry>
</feed>
