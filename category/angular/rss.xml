<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;angular&#34; category</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Sat, 08 Sep 2018 06:30:30 -0400</pubDate>
        <lastBuildDate>Sat, 08 Sep 2018 06:30:30 -0400</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/typescript-basics-for-angular-developers/</guid>
            <title>TypeScript Basics for Angular Developers</title>
            <link>http://davembush.github.com/typescript-basics-for-angular-developers/</link>
            <category>angular</category>
            <category>typescript</category>
            <pubDate>Sat, 08 Sep 2018 06:30:30 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;For the most part, TypeScript feels a lot like JavaScript.  Most people pick it up without having any formal training.&lt;/p&gt;
&lt;p&gt;But, here’s the deal.  “Just because you can, doesn’t mean you should.” &lt;/p&gt;
&lt;p&gt;The thing that makes me most nervous about Angular is that it is structured so that you can write some really clean code.  But, you don’t have to.  Which mean most won’t. &lt;/p&gt;
&lt;p&gt;In fact, recruiters continue to contact me about Angular jobs with rates that make it obvious that hiring an Angular programmer is the same as hiring an HTML “programmer” 10 years ago.  Sorry gang, JavaScript has grown up and so has Angular. &lt;/p&gt;
&lt;p&gt;So, here are a few things you need to know about TypeScript that will make you a better Angular developer. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/07/TypescriptBasicsForAngular.jpg&#34; title=&#34;TypeScript Basics for Angular Developers&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/mujitra/8059355303/&#34;&gt;MIKI Yoshihito. (#mikiyoshihito)&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/b6d829&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Variable-Declaration&#34;&gt;&lt;a href=&#34;#Variable-Declaration&#34; class=&#34;headerlink&#34; title=&#34;Variable Declaration&#34;&gt;&lt;/a&gt;Variable Declaration&lt;/h2&gt;&lt;p&gt;There are three ways of declaring a variable in TypeScript.  You can either use the JavaScript &lt;code&gt;var&lt;/code&gt; keyword like you’ve always done or you can use the &lt;code&gt;let&lt;/code&gt; keyword or the &lt;code&gt;const&lt;/code&gt; keyword. &lt;/p&gt;
&lt;p&gt;But first, what problem are we trying to solve? &lt;/p&gt;
&lt;p&gt;In the old JavaScript world, we would declare variables in a block of code, but where-ever we declared that variable, the actual declaration was “hoisted” to the top of the function.  In fact, there never was anything like block scope.  Just function scope. &lt;/p&gt;
&lt;p&gt;This caused one particular problem that was rather common.  If I created a for&amp;#x2F;next loop that called an asynchronous function, the asynchronous function would use the last value of the for&amp;#x2F;next incrementer. &lt;/p&gt;
&lt;p&gt;The primary benefit of using &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; is that they effectively provide for block level scope so that we can write code like I described above and it will behave in the way we would expect from other languages. &lt;/p&gt;
&lt;p&gt;Unless you explicitly want to avoid block level scope, you should never use the &lt;code&gt;var&lt;/code&gt; keyword to declare a variable in TypeScript.  This falls under the “just because you can, doesn’t mean you should” rule. &lt;/p&gt;
&lt;p&gt;In my experience, you will use &lt;code&gt;const&lt;/code&gt; more often than &lt;code&gt;let&lt;/code&gt;.  Here’s the difference. &lt;/p&gt;
&lt;p&gt;If you are declaring a variable that will only ever be assigned one value, you declare it using &lt;code&gt;const&lt;/code&gt;.  What isn’t obvious is that changing the contents of an object does not change the value of an object.  So, doing something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; myArray = [];  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myArray.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Would be more valid as:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; myArray = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myArray.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Because pushing something into the array doesn’t change the value, or the pointer, of myArray.  It only changes the content of the array.&lt;/p&gt;
&lt;p&gt;You DID know that, right?&lt;/p&gt;
&lt;h2 id=&#34;Types&#34;&gt;&lt;a href=&#34;#Types&#34; class=&#34;headerlink&#34; title=&#34;Types&#34;&gt;&lt;/a&gt;Types&lt;/h2&gt;&lt;p&gt;The main thing that makes TypeScript what it is, is that it allows us to type-check our code.  You don’t have to.  In fact, there are times when this might get in your way.  But, you have a choice. &lt;/p&gt;
&lt;p&gt;By default, TypeScript uses inference when it can to figure out the type of a variable.  This is important because I can bet one of the first errors you are going to see is a type mismatch error. You might try to do something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; v = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// some other code, and then ...  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v = &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;That’s not going to compile. But you could do something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;v&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// some other code, and then …  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v = &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;That is telling the TypeScript compiler that we are OK with the variable v being any type. &lt;/p&gt;
&lt;p&gt;Other than the Classes and Interfaces that are either part of JavaScript or that we, or a third party, create, there are boolean, number, string, array, enum, any, void, tuple, never, null, and undefined. &lt;/p&gt;
&lt;p&gt;I’m going to assume that until I mentioned “tuple” you were ok with the types I mentioned.  So, let’s dig a little deeper on those last few. &lt;/p&gt;
&lt;p&gt;A tuple is a type that wars have been fought over.  Well, it isn’t that bad, but it is controversial. What we care about here is why you might want to use it.  It allows you to return a highly defined array or object directly into local variables.  That is, I can specify that a function returns an array or object that has a specific number of elements and each element is a specific type.  It has its uses, but it is probably one of the types that you want to reserve for special cases.  It saves you from having to access array elements or object fields or properties.  That’s the long and short of it. &lt;/p&gt;
&lt;p&gt;The never type allows you to specify that a function never returns.  There are two reasons why this would be true.  First, you’ve entered an infinite loop or second, you’ve thrown an exception.  Again, not something you are likely to use. &lt;/p&gt;
&lt;p&gt;You can also explicitly specify that a type can only handle null or undefined.  But what is much more likely is that you specify that you don’t want to use these.&lt;/p&gt;
&lt;h2 id=&#34;Combined-Types&#34;&gt;&lt;a href=&#34;#Combined-Types&#34; class=&#34;headerlink&#34; title=&#34;Combined Types&#34;&gt;&lt;/a&gt;Combined Types&lt;/h2&gt;&lt;p&gt;So, let’s say you have a parameter or a variable that accepts multiple types.  You could just use any and go on your merry way.  But, wouldn’t it be nice if you could say, “I want this type to be either a string or a number.”?  Well, you can.  Simply by using the pipe operator between types.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;v&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; | &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Remember our example above where we said we needed a variable to be either a number or a string, the above syntax is a much better way of typing the variable to do this because it limits the variable to exactly the types that we want to allow rather than letting anything be assigned to it.&lt;/p&gt;
&lt;p&gt;Amd we can take this even further.  Let’s say we want to make sure that the variable is a particular class type that we also want to be sure implements a specific interface.  For that, we use the ampersand.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;v&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Person&lt;/span&gt; &amp;amp; &lt;span class=&#34;title class_&#34;&gt;Manager&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And while we are at it, what if we want to make sure that a variable only accepts string types that are not null or undefined?  By default, the compiler allows null and undefined to be assigned to anything, but there is a compiler switch that turns that feature off.  If you use the compiler switch and you want to allow null or undefined, you’ll need to use the pipe operator to include them.&lt;/p&gt;
&lt;h2 id=&#34;Interface&#34;&gt;&lt;a href=&#34;#Interface&#34; class=&#34;headerlink&#34; title=&#34;Interface&#34;&gt;&lt;/a&gt;Interface&lt;/h2&gt;&lt;p&gt;For the most part, a TypeScript Interface looks a lot like an Interface in other languages. However, there are some differences that you need to know about. &lt;/p&gt;
&lt;p&gt;First, you don’t need to create a class that implements an Interface and then instantiate an object from that class in order to have an object of a particular interface type.  Actually, if you stop to think about it, this makes sense.  The problem is, there are a lot of people teaching TypeScript who are still using interfaces this way. &lt;/p&gt;
&lt;p&gt;But, in JavaScript, you can create an Object Literal.  TypeScript adds to JavaScript.  So, it only makes sense that TypeScript also allows you to create an Object Literal.  So, let’s say you have a parameter that takes an interface of type Name.  As long as the object we pass in conforms to the interface definition, the code will compile.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// interface Name with firstName and lastName as properties  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// function that takes a Name as a parameter  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;name: Name&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// call the function with an object literal  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Dave&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Bush&amp;#x27;&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optional&#34;&gt;&lt;a href=&#34;#Optional&#34; class=&#34;headerlink&#34; title=&#34;Optional&#34;&gt;&lt;/a&gt;Optional&lt;/h2&gt;&lt;p&gt;We’ve been talking a lot about Parameters and Interfaces.  In both cases, we often want to define a parameter or a property as optional. &lt;/p&gt;
&lt;p&gt;For example, most people have a middle name, but our Name interface doesn’t account for that.  If we added it, we’d want to make it optional since it is possible for that to not be included.  On the other hand, we don’t want people added whatever they want. &lt;/p&gt;
&lt;p&gt;The way we make sure a parameter is optional is by placing a question mark after the property, but before the colon.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// middleName is optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  middleName?: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// foo() now takes an optional name parameter  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;name?: Name&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I would highly recommend that you tweak your tslint rules to require type annotations on all of your code.  Out of the box, the tslint rules that come with the Angular-CLI are a bit too lax in this area.&lt;/p&gt;
&lt;h2 id=&#34;this&#34;&gt;&lt;a href=&#34;#this&#34; class=&#34;headerlink&#34; title=&#34;this&#34;&gt;&lt;/a&gt;this&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword in JavaScript is probably the hardest concept to fully understand.  And while recent advances in the language have helped tame it, it still doesn’t fully conform to the model most people have in their mind of how an Object-Oriented language should behave.  This is because, of course, JavaScript isn’t an Object-Oriented language.  It is a Prototypal language.  There are similarities, but they aren’t they same. &lt;/p&gt;
&lt;p&gt;TypeScript, on the other hand, is more object oriented.  I say “more” because it is really only object-oriented in the places where you are taking advantage of TypeScript specific features, such as a Class.  If you create an object literal that has an inline function, you are back in JavaScript land. &lt;/p&gt;
&lt;p&gt;In a class, if you have a method that calls another method in the same class, you must use the &lt;code&gt;this&lt;/code&gt; keyword to go after it.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SomeClass&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;someFunction&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;title function_&#34;&gt;someOtherFunction&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;someFunction&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This may take some getting used to if you are coming from JavaScript where you can call any function that is in scope without using the this keyword.  But, I can assure you that having this rule imposed on the language solves a lot of bugs caused the “this” side effects, that it is well worth the adjustment.&lt;/p&gt;
&lt;h2 id=&#34;Arrow-Functions&#34;&gt;&lt;a href=&#34;#Arrow-Functions&#34; class=&#34;headerlink&#34; title=&#34;Arrow Functions&#34;&gt;&lt;/a&gt;Arrow Functions&lt;/h2&gt;&lt;p&gt;Fat Arrow functions, Arrow Functions, or Lambda Expressions all refer to the same concept.  They are probably one of my favorite features of the latest version of TypeScript and JavaScript both because they allow me to write code with fewer characters and because they solve a very real problem that has confused JavaScript developers for years. &lt;/p&gt;
&lt;p&gt;First the problem. &lt;/p&gt;
&lt;p&gt;If you’ve written any serious application using JavaScript, one of the following scenarios will be familiar to you. &lt;/p&gt;
&lt;p&gt;Any time you create an event handler, when the function gets called, the ‘this’ keyword isn’t pointing to the object you are in, it is pointing to the context of the event that fired it.  This could be null, a windows object, or something else.  We often get around this problem by using the bind() function to wrap the context of the function. &lt;/p&gt;
&lt;p&gt;What the arrow functions in TypeScript do is that they form a closure around the current ‘this’ context by taking advantage of how TypeScript is compiled into JavaScript. &lt;/p&gt;
&lt;p&gt;You see, when your TypeScript code is compiled, every place you referred to &lt;code&gt;this&lt;/code&gt; it refers to a variable named &lt;code&gt;_this&lt;/code&gt;.  Inside the arrow function, they refer to this same &lt;code&gt;_this&lt;/code&gt; instead of creating a new one or looking at the context the function was called from. &lt;/p&gt;
&lt;p&gt;The main difference between a regular anonymous function and an arrow function is that we leave out a lot of junk. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; newFunc = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// do something with x  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Compared to:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;newFunc&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt;) =&amp;gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// do something with x  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But wait! There’s more.  &lt;/p&gt;
&lt;p&gt;If you only have one line, you can remove the curly braces. &lt;/p&gt;
&lt;p&gt;Let’s say you want to create an arrow function that returns the square of some number.  You could write this as:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;newFunct&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt;) =&amp;gt; x * x;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Fat arrow functions return the value from the function automatically.&lt;/p&gt;
&lt;h2 id=&#34;Decorators&#34;&gt;&lt;a href=&#34;#Decorators&#34; class=&#34;headerlink&#34; title=&#34;Decorators&#34;&gt;&lt;/a&gt;Decorators&lt;/h2&gt;&lt;p&gt;I don’t want to spend a lot of time on decorators.  If you’ve been using .NET, you’ll recognized decorators as “Attributes”. Java programmers are probably used to calling them annotations. &lt;/p&gt;
&lt;p&gt;Effectively, what a decorator does is that it adds additional information to a function, field, or class that marks it for special use.  While you can create your own decorators, we will only concentrate on implementing decorators that have already been defined for us. &lt;/p&gt;
&lt;p&gt;You’ll know that something is a decorator because it is a symbol prefixed with the at symbol.&lt;/p&gt;
&lt;h2 id=&#34;Import-and-Export&#34;&gt;&lt;a href=&#34;#Import-and-Export&#34; class=&#34;headerlink&#34; title=&#34;Import and Export&#34;&gt;&lt;/a&gt;Import and Export&lt;/h2&gt;&lt;p&gt;Last in our discussion of TypeScript are the keywords import and export. &lt;/p&gt;
&lt;p&gt;Now, why do we need these keywords? &lt;/p&gt;
&lt;p&gt;If you are familiar with other languages such as C#, VB.NET or Java, you will recognize the concept of Import as the keyword that says, “Tell this file I’m going to reference code from that other file over there in here.”  And then when we compile our code, the compiler makes sure that we are using that other code correctly. &lt;/p&gt;
&lt;p&gt;A similar thing happens in TypeScript, but in Angular we get the added benefit of also being able to use this information so that we only include the code we are actually using. &lt;/p&gt;
&lt;p&gt;You see, in the old days, we would suck in entire JavaScript libraries just because we were using a few functions.  But now with concepts like “Tree Shaking” that we will cover later, we can look at the actual code we are referencing and only include that code.  This reduces the size and number of files that our customer has to download to use our applications. &lt;/p&gt;
&lt;p&gt;The export keyword, on the other hand, tells the compiler what functions, classes, and interfaces external code is able to reference.  If it isn’t exported, it is only available to code in the file it was declared in.&lt;/p&gt;
&lt;h2 id=&#34;More&#34;&gt;&lt;a href=&#34;#More&#34; class=&#34;headerlink&#34; title=&#34;More&#34;&gt;&lt;/a&gt;More&lt;/h2&gt;&lt;p&gt;I have barely scratched the surface of TypeScript here.  There is a lot more available in the language than what I’ve introduced to you here and knowing the parts I’ve left out will ultimately make you a better programmer and make your code more stable.  But the parts I have introduced will get you going and will make you familiar with the parts you will see most often.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/ngrx-actions-class-vs-object-literal/</guid>
            <title>NgRX Actions - Class vs Object Literal</title>
            <link>http://davembush.github.com/ngrx-actions-class-vs-object-literal/</link>
            <category>angular</category>
            <category>NgRX</category>
            <pubDate>Tue, 03 Jul 2018 06:30:58 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;When NgRX 4 came out and I discovered that the “right” way of creating Actions is to use TypeScript classes and not Object Literals, I was a bit surprised.  Why would you use a Class that requires you to use the “new” keyword?  Why would you put multiple classes in one file?  This is insane! &lt;figure&gt;&lt;img src=&#34;/uploads/2018/07/2018-07-04.png&#34; title=&#34;NgRX Actions - Class vs Object Literal&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/dkobras/8342620023/&#34;&gt;dkobras&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by-sa/2.0/&#34;&gt; CC BY-SA&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Options&#34;&gt;&lt;a href=&#34;#Options&#34; class=&#34;headerlink&#34; title=&#34;Options&#34;&gt;&lt;/a&gt;Options&lt;/h2&gt;&lt;p&gt;An Action is an object that contains a type variable and optionally, a payload. Depending on how you code your action, the payload may or may not have “payload” as the variable name. In NgRX version 2, payload was an optional variable. To improve type checking, payload was removed from the Action interface. &lt;/p&gt;
&lt;p&gt;The official documentation for NgRX version 4 encourages us to create a class for each action we want to dispatch. &lt;/p&gt;
&lt;p&gt;Suppose you have a Wait reducer that needs a Start action and an End action.  The code might look something like:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.End&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;To use this code in our reducer or effects you would import like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then we would dispatch the action using the store we’ve injected into our code. We’ll cover that later. But for now, the dispatch basically looks like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you need to pass other information to an Action, your constructor can accept them: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ACTION_WITH_MESSAGE&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.ActionWithMessage&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ActionWithMessage&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;ACTION_WITH_MESSAGE&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; message: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This allows us to access the action payload as &lt;code&gt;Wait.message&lt;/code&gt; instead of &lt;code&gt;Wait.payload&lt;/code&gt;. Contrast this to putting the same code in a class with static methods as I’ve explained in previous articles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/how-to-upgrade-ngrx-to-4-x/&#34;&gt;How to Upgrade to NgRX 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ACTION_WITH_MESSAGE&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.ActionWithMessage&amp;#x27;&lt;/span&gt;;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;start&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;end&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;actionWithMessage&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;message: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ACTION_WITH_MESSAGE&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;payload&lt;/span&gt;: message&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In summary, we can have multiple classes and new them up.  Or we can have one class with multiple static methods that return object literals.&lt;/p&gt;
&lt;h2 id=&#34;Advantage-Object-Literal&#34;&gt;&lt;a href=&#34;#Advantage-Object-Literal&#34; class=&#34;headerlink&#34; title=&#34;Advantage Object Literal&#34;&gt;&lt;/a&gt;Advantage Object Literal&lt;/h2&gt;&lt;p&gt;The main advantage to using the object literal way is that you don’t need to create an object.  You also stay with the “One class, one file” model that is so common in Angular. On the surface, this seems to be a clear winner.&lt;/p&gt;
&lt;h2 id=&#34;Advantage-Classes&#34;&gt;&lt;a href=&#34;#Advantage-Classes&#34; class=&#34;headerlink&#34; title=&#34;Advantage Classes&#34;&gt;&lt;/a&gt;Advantage Classes&lt;/h2&gt;&lt;p&gt;But, because of the way we import the class bundles, the way we end up using the code looks nearly the same.  The main difference is that we must instantiate the class.  But we also get the option of having a different variable type for each action, we aren’t forced to use a variable named “payload” to hold all the associated data.  Further, if you need multiple payloads, you can do that.  You aren’t limited by how many parameters&amp;#x2F;member variables each of your Action classes use.  When using Effects, we can type the return value of the Effect to the Action we want it to return. &lt;/p&gt;
&lt;p&gt;In fact, it is this type safety that is the main reason we should be creating Actions using the Class method instead of the object literal method.&lt;/p&gt;
&lt;h2 id=&#34;Tweaking-Classes-For-Bigger-Advantage&#34;&gt;&lt;a href=&#34;#Tweaking-Classes-For-Bigger-Advantage&#34; class=&#34;headerlink&#34; title=&#34;Tweaking Classes For Bigger Advantage&#34;&gt;&lt;/a&gt;Tweaking Classes For Bigger Advantage&lt;/h2&gt;&lt;p&gt;There is a further tweak we can make to using classes that will give us an additional advantage when we use the code in our Reducers. Instead of marking the action types as strings, we can make them enums.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.End&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You’ll see below that this will give us extra type safety in our Reducers.&lt;/p&gt;
&lt;h2 id=&#34;Type-Safety-in-Reducers&#34;&gt;&lt;a href=&#34;#Type-Safety-in-Reducers&#34; class=&#34;headerlink&#34; title=&#34;Type Safety in Reducers&#34;&gt;&lt;/a&gt;Type Safety in Reducers&lt;/h2&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;ActionReducer&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// This could go in wait.actions.ts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;End&lt;/span&gt; | &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Start&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;WaitReducer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;  state = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, action: Action&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(action.&lt;span class=&#34;property&#34;&gt;type&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;..&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We’ve ensured that the only Actions we will get are from Wait.&lt;/p&gt;
&lt;p&gt;Now, what you can’t see here is that if the payload we were send were of different types, each case statement would automatically typecast the action to the proper type.  This only works with Enums.  If you try this with strings, it won’t work the same way.&lt;/p&gt;
&lt;h2 id=&#34;Type-Safety-in-Effects&#34;&gt;&lt;a href=&#34;#Type-Safety-in-Effects&#34; class=&#34;headerlink&#34; title=&#34;Type Safety in Effects&#34;&gt;&lt;/a&gt;Type Safety in Effects&lt;/h2&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Injectable&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;WaitEffects&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;start$&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt;&amp;gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;actions$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;action: Wait.Add&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;((): &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&amp;#123;&lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ADD&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;payload&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;end$&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt;&amp;gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;actions$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;action: Wait.End&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;((): &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      (&amp;#123;&lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ADD&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;payload&lt;/span&gt;: -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; actions$: Actions&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We’ve ensured that the only Action that get returned from either Effect is the Add action.&lt;/p&gt;
&lt;h2 id=&#34;Tweak-Object-Literal-Implementation&#34;&gt;&lt;a href=&#34;#Tweak-Object-Literal-Implementation&#34; class=&#34;headerlink&#34; title=&#34;Tweak Object Literal Implementation&#34;&gt;&lt;/a&gt;Tweak Object Literal Implementation&lt;/h2&gt;&lt;p&gt;Now, you might think, “I can get all that type safety by creating a separate interface for each action type.  And this would be true.  But this would be even more files and the only thing to be gained is that your Action object gets created faster because you are using Object Literals.  I’m not sure the advantage is worth the pain.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;If you are converting an NgRX 2 site to NgRX 4, you’ll probably want to follow the advice I originally gave for upgrading.  But, once you’ve upgraded, you’ll want to move to using Classes so that you can take advantage of the stronger typings this will afford you.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/vmware-s-clarity-design-system-for-angular/</guid>
            <title>VMWare&#39;s Clarity Design System for Angular</title>
            <link>http://davembush.github.com/vmware-s-clarity-design-system-for-angular/</link>
            <category>angular</category>
            <category>css</category>
            <category>clarity</category>
            <category>ui</category>
            <category>ux</category>
            <pubDate>Tue, 20 Mar 2018 06:30:51 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Unless you are a CSS wizard, you are probably using one of two CSS frameworks for your Angular projects or some sort of adaptation of them.  Bootstrap or Angular Material.  These have served us well, but they have one major flaw.  They target the “Mobile First” method of design.  This is great if your application must work on a mobile device.  But most corporate web applications target web applications.&lt;/p&gt;
&lt;p&gt;Have you ever heard any of these objections from your end users?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why is everything so big?&lt;/li&gt;
&lt;li&gt;Why can’t I have the label NEXT to the input field?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then you explain, it is so the screen can run on a mobile device and you hear, “But, this application will never run on a mobile device!”  Which is a valid point. &lt;/p&gt;
&lt;p&gt;Therefore, I was so excited to hear that VMWare has finally taken up the challenge of creating a Desktop First CSS Framework called &lt;a href=&#34;//vmware.github.io/clarity/&#34;&gt;Clarity&lt;/a&gt;. &lt;/p&gt;
&lt;figure style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;/vmware-s-clarity-design-system-for-angular/2018-03-20.jpg&#34; class=&#34;&#34; title=&#34;VMWare&amp;#39;s Clarity Design System for Angular&#34;&gt;&lt;figcaption&gt;Photo credit: [Sean Hering Photography](//visualhunt.com/author/2edd3b) on [Visual Hunt](//visualhunt.com/re/764a8a) / [ CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;
 &lt;/figure&gt; 

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-Is-Clarity&#34;&gt;&lt;a href=&#34;#What-Is-Clarity&#34; class=&#34;headerlink&#34; title=&#34;What Is Clarity?&#34;&gt;&lt;/a&gt;What Is Clarity?&lt;/h2&gt;&lt;p&gt;To call it a CSS Framework though doesn’t really do it justice.  It is a UI&amp;#x2F;UX System.  Much like Angular Material.  In fact, an application written using Clarity is going to end up looking a lot like a Material Design application.  The main differences are going to be, it will be built for the desktop rather than a mobile device.  This means the components won’t be so fat and the components will look more like what you would expect from a desktop application.&lt;/p&gt;
&lt;h2 id=&#34;Why-Clarity&#34;&gt;&lt;a href=&#34;#Why-Clarity&#34; class=&#34;headerlink&#34; title=&#34;Why Clarity?&#34;&gt;&lt;/a&gt;Why Clarity?&lt;/h2&gt;&lt;p&gt;Aside from the Desktop vs Mobile issue, there are other reasons you might want to consider using Clarity.&lt;/p&gt;
&lt;h3 id=&#34;Material-Meets-Bootstrap&#34;&gt;&lt;a href=&#34;#Material-Meets-Bootstrap&#34; class=&#34;headerlink&#34; title=&#34;Material Meets Bootstrap&#34;&gt;&lt;/a&gt;Material Meets Bootstrap&lt;/h3&gt;&lt;p&gt;Now, while the end result looks a lot like Angular Material, the way you style your application feels a lot more like Bootstrap.  This is something that has always bothered me about Angular Material.  In fact, one of the main reasons we didn’t use Angular Material at one of the places I’ve worked is specifically because it was too hard to make the site follow the design guides that were handed down to us.  Bootstrap, on the other hand, gave us an easy way to adapt the CSS to fit the requirements.  Give me components that provide functionality and provide a way that I can style them.  But don’t make common components their own special component just so you can add CSS to the standard element.  Make that a common CSS thing that you can change with CSS!&lt;/p&gt;
&lt;h3 id=&#34;508-Compliance&#34;&gt;&lt;a href=&#34;#508-Compliance&#34; class=&#34;headerlink&#34; title=&#34;508 Compliance&#34;&gt;&lt;/a&gt;508 Compliance&lt;/h3&gt;&lt;p&gt;Another big motivation for me to look at Clarity is that they have stricter 508 compliance if you use the default theme.  The one that is particularly important to me is the issue of contrast to support people who are color blind like me.  That’s 10% of the population that is impacted by color blindness in general which is a pretty large sample size to be pissing off with your color choices when there are tools that will let you see what it will look like to the various type of color blind people.  There compliance doesn’t end there, but that is the one that impacts me, so I care more about it.&lt;/p&gt;
&lt;h3 id=&#34;More-x2F-Better-Components&#34;&gt;&lt;a href=&#34;#More-x2F-Better-Components&#34; class=&#34;headerlink&#34; title=&#34;More&amp;#x2F;Better Components&#34;&gt;&lt;/a&gt;More&amp;#x2F;Better Components&lt;/h3&gt;&lt;p&gt;Third, several components exist that meet some requirements that the team I’m currently working on could have benefited from. While Angular Material is moving to fill in some of the gaps, the Clarity system has those components already.&lt;/p&gt;
&lt;h3 id=&#34;Great-Documentation&#34;&gt;&lt;a href=&#34;#Great-Documentation&#34; class=&#34;headerlink&#34; title=&#34;Great Documentation&#34;&gt;&lt;/a&gt;Great Documentation&lt;/h3&gt;&lt;p&gt;While it isn’t necessarily unique to Clarity, I found the documentation complete and easy to locate.  However, just like any of the other systems, you should take the time to read through most of the documentation, so you understand how it should work prior to actually trying to code anything.&lt;/p&gt;
&lt;h3 id=&#34;Easy-to-Use&#34;&gt;&lt;a href=&#34;#Easy-to-Use&#34; class=&#34;headerlink&#34; title=&#34;Easy to Use&#34;&gt;&lt;/a&gt;Easy to Use&lt;/h3&gt;&lt;p&gt;Finally, I took Clarity for a spin and found it MUCH easier to use than either Bootstrap or Angular Material.  Everything worked the way I expected it to and I don’t believe there was one time I had to add CSS to one of my components to make it do what I really wanted it to do.  This says a lot for a product that hasn’t even been officially released yet.&lt;/p&gt;
&lt;h3 id=&#34;VMWare&#34;&gt;&lt;a href=&#34;#VMWare&#34; class=&#34;headerlink&#34; title=&#34;VMWare&#34;&gt;&lt;/a&gt;VMWare&lt;/h3&gt;&lt;p&gt;Oh, and did I mention that it is backed by VMWare?  I always like it when an open source project is backed by a major company that doesn’t appear to be going away anytime soon.  This is why I tend to stay away from some of the smaller projects, like Vue, regardless of how great they are.  Yes, I know it has a big community.  But, people need to eat.  A project with corporate sponsorship is much more likely to be run well, progress at a steady pace, and be responsive to issues that crop up.&lt;/p&gt;
&lt;h2 id=&#34;Why-You-Might-Want-to-Pass&#34;&gt;&lt;a href=&#34;#Why-You-Might-Want-to-Pass&#34; class=&#34;headerlink&#34; title=&#34;Why You Might Want to Pass&#34;&gt;&lt;/a&gt;Why You Might Want to Pass&lt;/h2&gt;&lt;p&gt;For all these benefits, there are a couple of reasons why you might want to at least wait if not ignore Clarity. &lt;/p&gt;
&lt;p&gt;As I mentioned above, the product hasn’t been released yet and therefore there will be breaking changes as the project makes its way to version 1.0.  This is easily mitigated by freezing your development efforts to the current release and only upgrading when you have time to address the breaking changes. &lt;/p&gt;
&lt;p&gt;You also might want to avoid using Clarity if you really need Mobile First.  I’m sure you could adapt the CSS to work with Mobile as well as Desktop.  Personally, I’d just make sure all of my business logic was outside my components so that I could develop a Mobile front-end and a Desktop front-end without losing any functionality.  This would mean one site would use Bootstrap, Angular Material, or IONIC and the other would use Clarity.&lt;/p&gt;
&lt;h2 id=&#34;Installation-The-Right-Way&#34;&gt;&lt;a href=&#34;#Installation-The-Right-Way&#34; class=&#34;headerlink&#34; title=&#34;Installation - The Right Way&#34;&gt;&lt;/a&gt;Installation - The Right Way&lt;/h2&gt;&lt;p&gt;The clarity site has instructions for installing Clarity that are general enough that you could use the styles on multiple frameworks.  What follows is an adaptation of those instructions that are specific to an Angular site that uses the Angular CLI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save @webcomponents/custom-elements@^1.0.0&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is a polyfill that we will add to our polyfills.ts file&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;import &amp;#39;@webcomponents/custom-elements/custom-elements.min&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save @clr/icons&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save @clr/ui&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save bootstrap@4.0.0-alpha.5&lt;/code&gt;(note I didn’t try using the current release version.  It may, or may not, work.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save @clr/angular&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the icon css and js files to the .angular-cli.json file in the “styles” and “scripts” section:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;styles&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;styles.css&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;../node_modules/@clr/icons/clr-icons.css&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;../node_modules/@clr/ui/clr-ui.min.css&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;../node_modules/@clr/icons/clr-icons.min.js&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Import the clarity module into your AppModule to make the components available&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;ClarityModule&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@clr/angular&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;BrowserModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;ClarityModule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm start&lt;/code&gt; to make sure everything builds correctly.  If everything builds and you run the app, you will see that the page has bigger fonts than you may be used to.  If it looks like it has always looked, you probably don’t have it configured correctly yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If Clarity looks like it might meet your requirements better than the alternatives, I encourage you to take &lt;a href=&#34;//vmware.github.io/clarity/&#34;&gt;Clarity&lt;/a&gt; for a spin.&lt;/p&gt;
&lt;h2 id=&#34;Other-Places-Talking-About-VMWare-Clarity&#34;&gt;&lt;a href=&#34;#Other-Places-Talking-About-VMWare-Clarity&#34; class=&#34;headerlink&#34; title=&#34;Other Places Talking About VMWare Clarity&#34;&gt;&lt;/a&gt;Other Places Talking About VMWare Clarity&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//www.starwindsoftware.com/blog/vmware-clarity-why-should-you-care&#34;&gt;VMware Clarity – Why should you care&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//devchat.tv/adv-in-angular/aia-172-clarity-project-vmware-eudes-petonnet-vincent-matt-hippely&#34;&gt;The Clarity Project at VMware&lt;/a&gt; (podcast episode)&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/property-based-testing-in-angular-with-jsverify/</guid>
            <title>Property Based Testing in Angular with jsVerify</title>
            <link>http://davembush.github.com/property-based-testing-in-angular-with-jsverify/</link>
            <category>angular</category>
            <category>jasmine</category>
            <category>property based testing</category>
            <pubDate>Tue, 06 Feb 2018 06:30:58 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Several weeks ago, I mentioned that I’ve been playing around with &lt;a href=&#34;/property-based-testing-revealed-a-better-way-to-test/&#34;&gt;Property Based Testing&lt;/a&gt;.  In particular, I’ve been using it with my Angular code.  The framework I’ve chosen is &lt;a href=&#34;//github.com/jsverify/jsverify&#34;&gt;jsVerify&lt;/a&gt; because it seemed like the most straight forward of the available tools and it has a documented way of integrating with Jasmine, which Angular test use by default.  Angular with jsVerify.  How does that work?&lt;/p&gt;
&lt;p&gt;The documentation for how to use jsVerify seems to be written for people who already understand Property Based Testing from some other environment.  This makes picking it up and using it awkward at best.&lt;/p&gt;
&lt;p&gt;Here’s what I’ve learned along the way. &lt;figure&gt;&lt;img src=&#34;/uploads/2018/02/2018-02-06.jpg&#34; title=&#34;Property Based Testing in Angular with jsVerify&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//visualhunt.com/author/a3b62c&#34;&gt;Official U.S. Navy Imagery&lt;/a&gt; on &lt;a href=&#34;//visualhunt.com/re/d44953&#34;&gt;Visual Hunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;The-Basics&#34;&gt;&lt;a href=&#34;#The-Basics&#34; class=&#34;headerlink&#34; title=&#34;The Basics&#34;&gt;&lt;/a&gt;The Basics&lt;/h2&gt;&lt;p&gt;To install jsVerify into your dev environment, use:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save-dev jsverify&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To use the code in your spec file, import jsverify using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import * as jsc from &amp;#39;jsverify&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We us ‘jsc’ because jsVerify originated from &lt;a href=&#34;//github.com/douglascrockford/JSCheck&#34;&gt;jsCheck&lt;/a&gt;.  Why not just use jsCheck?  Well, because it looks even less well documented.  That doesn’t mean that it is, but that is how I felt when I went to the sites and I couldn’t be bothered to wade through the wall of text the documentation site presented me with.&lt;/p&gt;
&lt;h2 id=&#34;A-Simple-Test&#34;&gt;&lt;a href=&#34;#A-Simple-Test&#34; class=&#34;headerlink&#34; title=&#34;A Simple Test&#34;&gt;&lt;/a&gt;A Simple Test&lt;/h2&gt;&lt;p&gt;Now to setup a simple test.  We won’t really test anything.  I just want to show the structure of the test.&lt;/p&gt;
&lt;p&gt;There are two methods you might use that seem very similar.  &lt;code&gt;assertForall()&lt;/code&gt; and &lt;code&gt;checkForall()&lt;/code&gt;.  What I didn’t realize at first is that &lt;code&gt;assertForall()&lt;/code&gt; is the one you want to use because it will throw the exception that Jasmine is listening for so that I knows the test failed.  If you use &lt;code&gt;checkForall()&lt;/code&gt; the test will fail, but Jasmine will think it succeeded.  And if you’re thinking, yeah but you should use expect() with checkForAll(), that doesn’t always work quite the way you would expect.  No pun intended.&lt;/p&gt;
&lt;p&gt;The basic structure of a test will go inside of your &lt;code&gt;it()&lt;/code&gt; block.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Any two numeric values&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should equal 20&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jsc.&lt;span class=&#34;title function_&#34;&gt;assertForall&lt;/span&gt;(jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;, jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;a: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;, b: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; a_and_b_equal_20 = a + b === &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a_and_b_equal_20;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This test will, obviously, fail.  A test we would expect to pass would look like this.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Any two numeric values&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should be able to be added in any order&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jsc.&lt;span class=&#34;title function_&#34;&gt;assertForall&lt;/span&gt;(jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;, jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;a: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;, b: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; a_and_b_equal_20 = a + b === b + a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a_and_b_equal_20;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You may have guessed by now that &lt;code&gt;assertForall()&lt;/code&gt;takes a variable number of parameters.  The last parameter is a callback that runs our test.  The parameters before the callback describe the kinds of parameters that will be passed to the callback.  The description of the parameter is of type Arbitrary.  So, what we’ve said above is something to the effect of, “generate two random integers and pass them to the callback.”  You can check the jsVerify site for “Primitive Arbitraries” to see what is built in.&lt;/p&gt;
&lt;h2 id=&#34;Adding-Complexity&#34;&gt;&lt;a href=&#34;#Adding-Complexity&#34; class=&#34;headerlink&#34; title=&#34;Adding Complexity&#34;&gt;&lt;/a&gt;Adding Complexity&lt;/h2&gt;&lt;p&gt;It won’t be long before you run into a situation where the primitive arbitraries won’t do the job for you and you’ll need to resort to the combinators.  This allows you to create a brand new arbitrary by combining primitives together.  The one I found myself using the most was &lt;code&gt;oneof()&lt;/code&gt; where you pass a list of arbitraries as an array and the system will pick from the list and generate a new random value from the list.  Don’t confuse this with &lt;code&gt;either()&lt;/code&gt;.  I’ve used &lt;code&gt;oneof()&lt;/code&gt; in combination with &lt;code&gt;constant()&lt;/code&gt;for cases where I’ve needed to create a random value from a list of possible values.&lt;/p&gt;
&lt;p&gt;Where things really got interesting though was when I needed to create an object with random values for the properties.  For this, you’ll need to use a record.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; recordArb = jsc.&lt;span class=&#34;title function_&#34;&gt;record&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: jsc.&lt;span class=&#34;property&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: jsc.&lt;span class=&#34;property&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;arrayThing&lt;/span&gt;: jsc.&lt;span class=&#34;title function_&#34;&gt;array&lt;/span&gt;(jsc.&lt;span class=&#34;title function_&#34;&gt;record&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;fieldOne&lt;/span&gt;: jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;dateField&lt;/span&gt;: jsc.&lt;span class=&#34;property&#34;&gt;datetime&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This will let us pass random objects to our tests.  This is great for testing Reducers.  You’ll notice we even were able to create a nested array.  This will create a random length array with random records inside of it.&lt;/p&gt;
&lt;h2 id=&#34;Arbitraries-from-Generators&#34;&gt;&lt;a href=&#34;#Arbitraries-from-Generators&#34; class=&#34;headerlink&#34; title=&#34;Arbitraries from Generators&#34;&gt;&lt;/a&gt;Arbitraries from Generators&lt;/h2&gt;&lt;p&gt;Now that I’ve been working with it for a while, I can’t remember why it was so difficult.  But the one place I did have some trouble was the concept of Generators vs Arbitraries.  Arbitraries are what we need to pass into &lt;code&gt;assertForall().&lt;/code&gt; Generators are what we use when we need to come up with some way of creating our own special random data.  You rarely need to use this, but when you do, being able to convert the Generator to an Arbitrary will become critical.&lt;/p&gt;
&lt;p&gt;To convert a generator to an arbitrary, use bless.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;jsc.&lt;span class=&#34;property&#34;&gt;generator&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;bless&lt;/span&gt;(generatorThing);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Typing&#34;&gt;&lt;a href=&#34;#Typing&#34; class=&#34;headerlink&#34; title=&#34;Typing&#34;&gt;&lt;/a&gt;Typing&lt;/h2&gt;&lt;p&gt;As of this writing, the typing for &lt;code&gt;checkForall()&lt;/code&gt; is incorrect.  It is typed as returning &lt;code&gt;Result&amp;lt;any&amp;gt;&lt;/code&gt;when it in fact returns &lt;code&gt;Result&amp;lt;any&amp;gt; | boolean&lt;/code&gt;I just discovered this so I haven’t entered a pull request that will fix the issue.  If you decide to use &lt;code&gt;checkForall()&lt;/code&gt; instead of &lt;code&gt;assertForall()&lt;/code&gt;, you’ll need to fix up the typings yourself.&lt;/p&gt;
&lt;h2 id=&#34;Puzzles&#34;&gt;&lt;a href=&#34;#Puzzles&#34; class=&#34;headerlink&#34; title=&#34;Puzzles&#34;&gt;&lt;/a&gt;Puzzles&lt;/h2&gt;&lt;p&gt;The one thing I’m still trying to figure out is the best way of running the test.  The fact of the matter is that jsVerify tests do not lend themselves to the structure of a Jasmine test.  And since I have to generate 100 instances of random data for each test, it may not be efficient to separate each test out into separate it statements.&lt;/p&gt;
&lt;p&gt;For now, I’m running all related evaluations within one it statement and using the back-tick string delimiter to allow me to have a multi-line it() string that describes all that I’m testing.  But, by combining all of my test like this, I can no longer determine which of my test actually failed.&lt;/p&gt;
&lt;p&gt;I’m not exactly sure what the best solution to that is (yet) and right now, there don’t seem to be a lot of people using jsVerify or any other property based framework with Jasmine to get a lot of hints on how we might write tests that are easy to use.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;I encourage you to give jsVerify a try.  It really isn’t that hard to pick up and hopefully, this short article will smooth over some of the problems you may have as you get started.  Despite the puzzles I mentioned above the advantages of using it over example based testing encourage me to see just how far I can push this framework.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/why-more-angular-modules-are-better-than-one/</guid>
            <title>Why more Angular Modules are Better than One</title>
            <link>http://davembush.github.com/why-more-angular-modules-are-better-than-one/</link>
            <category>angular</category>
            <category>modules</category>
            <category>ngmodule</category>
            <pubDate>Tue, 16 Jan 2018 06:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I recently reviewed some Angular code that uses one module.  The AppModule. To manage the entire code base.  And, this isn’t tiny code base.  The main excuse I’ve heard for this is that the code originated during the beta cycle, prior to NgModule being added to the framework.  I call it out as an excuse because once it was added, it was clear that we needed to have more than one module.  The fact that this code base doesn’t have more than one module shows a disregard for doing things right over doing things fast.  In the best case, it shows ignorance.&lt;/p&gt;
&lt;p&gt;But, the larger question this code base raises for me is this: “Why are more modules better than fewer modules?”  After all, using one module obviously works.  Isn’t the fact that it works sufficient enough?&lt;/p&gt;
&lt;p&gt;And here are three really good reasons to use more modules. &lt;figure&gt;&lt;img src=&#34;/uploads/2018/01/2018-01-16-1.jpg&#34; title=&#34;Why more Angular Modules are Better than One&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//visualhunt.com/author/1d5a2d&#34;&gt;goodrob13&lt;/a&gt; on &lt;a href=&#34;//visualhunt.com/re/0a04dc&#34;&gt;Visualhunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Avoid-Component-Collision&#34;&gt;&lt;a href=&#34;#Avoid-Component-Collision&#34; class=&#34;headerlink&#34; title=&#34;Avoid Component Collision&#34;&gt;&lt;/a&gt;Avoid Component Collision&lt;/h2&gt;&lt;p&gt;For discussion purposes, let’s say you have an application with two routes.  Each route allows you to edit different kinds of content.  You may be inclined to create some child components in each route to assist with your functionality.  In the process of doing this, you may end up with two components that have the same name.  Both as a class and as a selector.  If you are including everything in one mega module, you will need to artificially give the components different names.  However, if each route has its own module, you can declare the components in the declaration section of each module with the same name and each route will be able to call the appropriate component.  Components aren’t shared across modules until you export the component.  In that case, you would also want the component to live in a shared module where we would give it a more meaningful, generic, name that made sense as a shared module.&lt;/p&gt;
&lt;h2 id=&#34;Lazy-Loading&#34;&gt;&lt;a href=&#34;#Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;Lazy Loading&#34;&gt;&lt;/a&gt;Lazy Loading&lt;/h2&gt;&lt;p&gt;Once you’ve created modules for each of your routes, the next logical step in your development effort will be lazy loading the module.  Lazy loading provides more advantages than just the ability to load only what you need when you need it.  That’s just the most obvious gain.  Lazy loading also provides a separate context for @Injectables.  Once again, just like having the ability to isolate the components, by using modules in conjunction with lazy loading, we have the ability to have route specific @Injectables with the same name and each route&amp;#x2F;module will behave appropriately.&lt;/p&gt;
&lt;p&gt;There is one caveat.  You can’t provide an @Injectable in a lazy loaded module and an application level module and expect things to work correctly.  And, if you are still using a framework like NgRX 2 that needs to have access to services, you’ll need to make your services globally available.  This is one of many reasons why I believe you should upgrade to NgRX 4 as soon as is possible.  This allows you to take full advantage of the Angular Lazy Loading capabilities and all their benefits.&lt;/p&gt;
&lt;h2 id=&#34;Cleaner-Code&#34;&gt;&lt;a href=&#34;#Cleaner-Code&#34; class=&#34;headerlink&#34; title=&#34;Cleaner Code&#34;&gt;&lt;/a&gt;Cleaner Code&lt;/h2&gt;&lt;p&gt;Even if you’ve never seen a major application with one module, I’m sure you can imagine what a mess that module is.  I don’t think I really need to say much more about this.&lt;/p&gt;
&lt;p&gt;For more on Angular Modules, I recommend &lt;a href=&#34;//angular.io/guide/ngmodule-faq&#34;&gt;this FAQ that the Angular team put together&lt;/a&gt;. &lt;a href=&#34;//medium.com/@cyrilletuzi/understanding-angular-modules-ngmodule-and-their-scopes-81e4ed6f7407&#34;&gt;This Medium article&lt;/a&gt; is also pretty good.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/attaching-an-angular-child-component-s-form-to-a-parent/</guid>
            <title>Attaching an Angular Child Component&#39;s Form to a Parent</title>
            <link>http://davembush.github.com/attaching-an-angular-child-component-s-form-to-a-parent/</link>
            <category>angular</category>
            <category>reactive forms</category>
            <category>child component</category>
            <pubDate>Tue, 02 Jan 2018 06:30:57 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;This past week I implemented a pattern I’ve been pondering for almost a year now.  I like to create rather modular and granular code such that if my data structures are nested, the components that represent them on the screen should be nested as well. The question becomes, how does one create a reactive form in a child component and attach that form to the parent form in a way that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Leaves the definition of the child form entirely in the child&lt;/li&gt;
&lt;li&gt;Leaves the processing of the data in the parent where the parent form is the “Smart Component” and the child is a “Dumb Component”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most solutions I was able to find attack this problem assuming the child component will be part of an array of controls.  And I suppose, if you wanted to, you could implement that pattern using an array with one element.  But, that just felt like a hack.  If you are interested in that solution, this is the wrong article. &lt;figure&gt;&lt;img src=&#34;/uploads/2018/01/2018-01-02.jpg&#34; title=&#34;Attaching an Angular Child Component&amp;#39;s Form to a Parent&#34;&gt; Photo by &lt;a href=&#34;//visualhunt.com/author/e29ed9&#34;&gt;loomingy1&lt;/a&gt; on &lt;a href=&#34;//visualhunt.com/re/b9f011&#34;&gt;Visual hunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Avoiding-the-Problem&#34;&gt;&lt;a href=&#34;#Avoiding-the-Problem&#34; class=&#34;headerlink&#34; title=&#34;Avoiding the Problem&#34;&gt;&lt;/a&gt;Avoiding the Problem&lt;/h2&gt;&lt;p&gt;Up until recently, I’ve been able to avoid this problem entirely by creating separate forms and listening to each individually.  I could have done the same thing here.  But, every time I use this solution, I feel like there must be a better way.  Besides, when you do this correctly, you only need to have one place where you are listening for changes to the form and one place where you send changes into the form.  The work around requires multiples of each.&lt;/p&gt;
&lt;h2 id=&#34;Basics-of-Nested-Forms&#34;&gt;&lt;a href=&#34;#Basics-of-Nested-Forms&#34; class=&#34;headerlink&#34; title=&#34;Basics of Nested Forms&#34;&gt;&lt;/a&gt;Basics of Nested Forms&lt;/h2&gt;&lt;p&gt;Another way of avoiding the problem is to create the form as one monolithic component.  A very simple implementation would be to have a form that looked something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;formGroup&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;formControlName&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;mainInput&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;formGroupName&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;childGroup&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;formControlName&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;childInput&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;  &amp;lt;/&lt;span class=&#34;attr&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And the reactive definition in the typescript that looked like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;form&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;FormGroup&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;formBuilder: FormBuilder&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt; = formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;mainInput&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;childGroup&lt;/span&gt;: formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;childInput&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then we would grab the data from the valueChanges observable or patch the data into the form using &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;childGroup.&lt;span class=&#34;property&#34;&gt;childInput&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Creating-the-Child-Component&#34;&gt;&lt;a href=&#34;#Creating-the-Child-Component&#34; class=&#34;headerlink&#34; title=&#34;Creating the Child Component&#34;&gt;&lt;/a&gt;Creating the Child Component&lt;/h2&gt;&lt;p&gt;But what if you we want everything in the childGroup to be a control?  That control would look something like this: &lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;formGroup&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;formControlName&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;childInput&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;and then our TypeScript code looks like a normal formGroup:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt; = formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;childInput&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Embedding-the-Child-in-the-Parent&#34;&gt;&lt;a href=&#34;#Embedding-the-Child-in-the-Parent&#34; class=&#34;headerlink&#34; title=&#34;Embedding the Child in the Parent&#34;&gt;&lt;/a&gt;Embedding the Child in the Parent&lt;/h2&gt;&lt;p&gt;Now that we have a separate component for our child form, we can use normal directives to add it into our main form.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;formGroup&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;formControlName&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;mainInput&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;app-child&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;app-child&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And our TypeScript code now only needs a reference to mainInput.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;formBuilder: FormBuilder&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt; = formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;mainInput&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Connecting-the-Child-to-the-Parent&#34;&gt;&lt;a href=&#34;#Connecting-the-Child-to-the-Parent&#34; class=&#34;headerlink&#34; title=&#34;Connecting the Child to the Parent&#34;&gt;&lt;/a&gt;Connecting the Child to the Parent&lt;/h2&gt;&lt;p&gt;The problem is, whenever the childInput element changes, the parent form’s valueChanges observer won’t get notified because the parent form no longer knows about the child form.  And this is where things interesting.&lt;/p&gt;
&lt;p&gt;Hooking the child form to the parent form is actually pretty straight forward.  The trick is knowing when in the component life-cycle to run the code.&lt;/p&gt;
&lt;p&gt;The first thing to know is that we aren’t going to be able to hookup the child in the parent until after the child component has been created.  This happens after ngOnInit() so we need to find another lifecycle hook to wire everything up in.  It just so happens that ngAfterViewInit() is the perfect place for this. &lt;/p&gt;
&lt;p&gt;Second, it might be tempting to hookup everything in the child component during it’s ngOnInit() method.  But this would too tightly couple the child component to the parent.  Something we would like to avoid. &lt;/p&gt;
&lt;p&gt;So, the next thing we need to do is that we need to use @ViewChild() to allow the parent to get a hold of the child component, and ultimately the formGroup member variable it will initialize for us.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ViewChild&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;ChildComponent&lt;/span&gt;) &lt;span class=&#34;attr&#34;&gt;childComponent&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ChildComponent&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now in &lt;code&gt;ngAfterViewInit()&lt;/code&gt; we can add the child’s &lt;code&gt;FormGroup&lt;/code&gt; as an additional “control” and set the parent &lt;code&gt;FormGroup&lt;/code&gt; to the parent control’s &lt;code&gt;FormGroup&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;ngAfterViewInit&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;addControl&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;childForm&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;childComponent&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;childComponent&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;setParent&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And finally, you’ll want to subscribe to &lt;code&gt;valueChanges&lt;/code&gt; and your NgRX &lt;code&gt;Store&lt;/code&gt; in &lt;code&gt;ngAfterViewInit()&lt;/code&gt; after this wire-up code.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-cross-field-validation/</guid>
            <title>Angular Cross Field Validation</title>
            <link>http://davembush.github.com/angular-cross-field-validation/</link>
            <category>angular</category>
            <category>formgroup</category>
            <category>validation</category>
            <pubDate>Tue, 19 Dec 2017 06:30:36 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;This past week I had my first need to do use cross field validation in Angular.  While the general mechanics are pretty trivial, my particular implementation ran into some issues that you might be interested in. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/12/2017-12-19.jpg&#34; title=&#34;Angular Cross Field Validation&#34;&gt; Photo by &lt;a href=&#34;//visualhunt.com/author/525a6d&#34;&gt;MSVG&lt;/a&gt; on &lt;a href=&#34;//visualhunt.com/re/2a53de&#34;&gt;VisualHunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;The-Basics&#34;&gt;&lt;a href=&#34;#The-Basics&#34; class=&#34;headerlink&#34; title=&#34;The Basics&#34;&gt;&lt;/a&gt;The Basics&lt;/h2&gt;&lt;p&gt;As I said, the mechanics of implementing cross field validation in Angular is rather trivial.  It all hinges on the concept of a FieldGroup which is a key concept of &lt;a href=&#34;/tags/reactive-forms/&#34;&gt;Reactive Forms&lt;/a&gt;. What we need to do to implement cross field validation is to attach a validation function to the form instead of the field. &lt;/p&gt;
&lt;p&gt;I’m going to use the AppComponent to host the FormBuilder for simplicity:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;form&lt;/span&gt;:&lt;span class=&#34;title class_&#34;&gt;FormGroup&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;formBuilder: FormBuilder&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;=formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// form field definitions here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;validator&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;formGroupValidationFunction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that &lt;code&gt;formBuilder.group()&lt;/code&gt; takes a second parameter which takes a &lt;code&gt;validator&lt;/code&gt; function or function array.  This parameter can also the &lt;code&gt;asyncValidator&lt;/code&gt; key or the &lt;code&gt;state&lt;/code&gt; key. &lt;/p&gt;
&lt;p&gt;The function we are pointing to takes the &lt;code&gt;FormGroup&lt;/code&gt; as a parameter.  So, within the function, we can access the controls that are part of the &lt;code&gt;FormGroup&lt;/code&gt;.  Once we have the fields, we can access the values of the fields and perform whatever comparisons we need, which is pretty trivial.  Then, if there is an error, we call setError() on the control(s) that are impacted.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;formGroupValidationFunction&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;formGroup&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;FormGroup&lt;/span&gt;):&lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  constfield1=formGroup.&lt;span class=&#34;property&#34;&gt;controls&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;field1&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  constfield2=formGroup.&lt;span class=&#34;property&#34;&gt;controls&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;field2&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// compare field1 to field2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    field1.&lt;span class=&#34;title function_&#34;&gt;setError&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;formGroupValidationFunction&lt;/span&gt;:&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    field2.&lt;span class=&#34;title function_&#34;&gt;setError&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;formGroupValidationFunction&lt;/span&gt;:&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Dealing-with-Field-Validations&#34;&gt;&lt;a href=&#34;#Dealing-with-Field-Validations&#34; class=&#34;headerlink&#34; title=&#34;Dealing with Field Validations&#34;&gt;&lt;/a&gt;Dealing with Field Validations&lt;/h2&gt;&lt;p&gt;One of the problems I ran into was that my fields also had individual validations on them.  Specifically, the two fields were numbers that I was validating to make sure they were positive and only displayed two decimal places.  By the time I entered the validation for the FormGroup, that validation had already run.  I also wanted to clear any pre-existing errors from my form validation.&lt;/p&gt;
&lt;p&gt;It turns out that the way Angular determines if there is an error is if the forms errors object exist.  If it is null, it is assumed there aren’t any errors. &lt;/p&gt;
&lt;p&gt;Now, to clear the pre-existing errors, the safest thing to do is to first delete the error I was adding from each field, and then check to see if there are any other errors in the errors object.  If there aren’t any errors, we then call &lt;code&gt;setError(null)&lt;/code&gt; to clear out the error object.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(field1.&lt;span class=&#34;property&#34;&gt;errors&lt;/span&gt;&amp;amp;&amp;amp;field1.&lt;span class=&#34;property&#34;&gt;errors&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;formGroupValidationFunction&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  deletefield1.&lt;span class=&#34;property&#34;&gt;errors&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;formGroupValidationFunction&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;keys&lt;/span&gt;(field1.&lt;span class=&#34;property&#34;&gt;errors&lt;/span&gt;).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;===&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    field1.&lt;span class=&#34;title function_&#34;&gt;setErrors&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;When adding the &lt;code&gt;FormGroup&lt;/code&gt; error, we only call &lt;code&gt;setError()&lt;/code&gt; if the errors object is null.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!field1.&lt;span class=&#34;property&#34;&gt;errors&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  field1.&lt;span class=&#34;title function_&#34;&gt;setError&lt;/span&gt;(&amp;#123; &lt;span class=&#34;attr&#34;&gt;formGroupValidationFunction&lt;/span&gt;:&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;By doing this, we ensure that the field validation errors aren’t overwritten by the &lt;code&gt;FormGroup&lt;/code&gt; validations.&lt;/p&gt;
&lt;h2 id=&#34;Alternatives&#34;&gt;&lt;a href=&#34;#Alternatives&#34; class=&#34;headerlink&#34; title=&#34;Alternatives&#34;&gt;&lt;/a&gt;Alternatives&lt;/h2&gt;&lt;p&gt;The code I’ve shown works well enough if you only have a one-off validation.  But in my case, I needed to use the validation between multiple sets of fields.  To do this, I created a function that returns another function. &lt;/p&gt;
&lt;p&gt;The outer function takes two parameters.  Strings that are keys into the controls of the form group.  So, now instead of:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;formBuilder:FormBuilder&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;=formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// form stuff here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;validator&lt;/span&gt;:formGroupValidationFunctionHere&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I have:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;formBuilder:FormBuilder&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;=formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// form stuff here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;validator&lt;/span&gt;:&lt;span class=&#34;title function_&#34;&gt;formGroupValidationFunction&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;field1&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;field2&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And my validation function looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;formGroupValidationFunction&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;f1&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;f2&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;): &lt;span class=&#34;title class_&#34;&gt;Function&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;attr&#34;&gt;formGroup&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;FormGroup&lt;/span&gt;): &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constfield1=formGroup.&lt;span class=&#34;property&#34;&gt;controls&lt;/span&gt;[f1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constfield2=formGroup.&lt;span class=&#34;property&#34;&gt;controls&lt;/span&gt;[f2];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// compare field1 to field2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      field1.&lt;span class=&#34;title function_&#34;&gt;setError&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;formGroupValidationFunction&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      field2.&lt;span class=&#34;title function_&#34;&gt;setError&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;formGroupValidationFunction&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that my &lt;code&gt;setError()&lt;/code&gt; uses the name of the function as the error key.  I just do this for clarity.  You CAN name it whatever you want.  I name it the same to be consistent with how the Angular validations work. &lt;/p&gt;
&lt;p&gt;Finally, I like to put my custom validations in a separate Static Class rather than including them in the component code.  I’ve only placed them in the component code here for illustrative purposes.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/how-to-really-screw-up-an-angular-project/</guid>
            <title>How to Really Screw Up an Angular Project</title>
            <link>http://davembush.github.com/how-to-really-screw-up-an-angular-project/</link>
            <category>angular</category>
            <category>best practices</category>
            <category>cli</category>
            <pubDate>Tue, 12 Dec 2017 06:30:38 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;We all know about best practices.  But what does it take to really mess up a project?  Well, for starters, you do EVERYTHING wrong.  You don’t just ignore one or two best practices, you ignore them all.  By evaluating the mess you can get yourself into by ignoring best practices, I think we can all learn better why these recommendations exist. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/12/2017-12-12.png&#34; title=&#34;How to Really Screw Up an Angular Project&#34;&gt; Photo on &lt;a href=&#34;//visualhunt.com/re/f81060&#34;&gt;VisualHunt&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Don’t-Use-the-CLI&#34;&gt;&lt;a href=&#34;#Don’t-Use-the-CLI&#34; class=&#34;headerlink&#34; title=&#34;Don’t Use the CLI&#34;&gt;&lt;/a&gt;Don’t Use the CLI&lt;/h2&gt;&lt;p&gt;I can grant a pass if you aren’t using the Angular CLI because you started your project before the CLI became viable.  But, by this point you should have already converted your project over to use the CLI or be making plans to move to the CLI.&lt;/p&gt;
&lt;p&gt;Why is this a problem? &lt;/p&gt;
&lt;p&gt;Because 99% of the developers you are going to find will expect that when you ask for an Angular developer, what you mean is that you are looking for someone who can write Angular code using the Angular CLI.  This brings with is a certain number of expectations about how your code is laid out.  Some of these are outlined below.  But just as a way of generalizing, if your code doesn’t look like it started as an Angular CLI project, you are going to slow down any future developers you hire.&lt;/p&gt;
&lt;h2 id=&#34;Ignore-Naming-Conventions&#34;&gt;&lt;a href=&#34;#Ignore-Naming-Conventions&#34; class=&#34;headerlink&#34; title=&#34;Ignore Naming Conventions&#34;&gt;&lt;/a&gt;Ignore Naming Conventions&lt;/h2&gt;&lt;p&gt;Ignoring naming conventions may seem trivial, but naming conventions add clarity.  The reason we name component files as components is so we know they are all part of a component.  Reducer file names should be named &lt;code&gt;foo-bar.reducer.ts&lt;/code&gt;.  Not naming the files in a way that is clear reduces the ability to maintain the code in a clear and efficient way. &lt;/p&gt;
&lt;p&gt;Maybe you’ve come up with your own naming conventions for your organization.  This is better.  But still this is not best.  This means that you probably won’t be able to use the CLI to scaffold out your code and any future developer is going to have to learn your way of writing Angular instead of the industry standard way of writing Angular. &lt;/p&gt;
&lt;p&gt;But the absolute worst thing you can do is to not have any standard or to mix standards.  This is confusing and just looks ugly.&lt;/p&gt;
&lt;h2 id=&#34;Cluster-Code-by-Function-Instead-of-Feature&#34;&gt;&lt;a href=&#34;#Cluster-Code-by-Function-Instead-of-Feature&#34; class=&#34;headerlink&#34; title=&#34;Cluster Code by Function Instead of Feature&#34;&gt;&lt;/a&gt;Cluster Code by Function Instead of Feature&lt;/h2&gt;&lt;p&gt;The other thing you might be tempted to do is to cluster your code by function.  That is, you might want to group all of your components together.  And then all your services under another folder.  Maybe put your reducers under one folder and your effects under another. &lt;/p&gt;
&lt;p&gt;Trust me, this just adds fuel to the argument that “NgRX is confusing”.  Group all your similar NgRX code together and put all of your code together grouped by feature.  If you’ve named the files correctly, you won’t need the directories to keep things sorted out and you won’t be forced to use one module for your entire project.&lt;/p&gt;
&lt;h2 id=&#34;Use-one-Module&#34;&gt;&lt;a href=&#34;#Use-one-Module&#34; class=&#34;headerlink&#34; title=&#34;Use one Module&#34;&gt;&lt;/a&gt;Use one Module&lt;/h2&gt;&lt;p&gt;Maybe you don’t know any better.  Or maybe it is because you’ve violated the rules above.  But no matter the reason, if you end up putting all your imports, providers, and declarations in your app module, you’ll soon see just how ugly this looks.  One for the whole application violates the single responsibility principle.  You want a module per feature at the very least.  I often create modules just to provide an additional level of granularity that further implements the single responsibility principle.&lt;/p&gt;
&lt;h2 id=&#34;No-Lazy-Loading&#34;&gt;&lt;a href=&#34;#No-Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;No Lazy Loading&#34;&gt;&lt;/a&gt;No Lazy Loading&lt;/h2&gt;&lt;p&gt;Yes, even if your application has only one route.  You want to lazy load your code so that a different bundle gets created for each route.  Done well, you can make changes to one route without impacting any of the others.  When you deploy the new code, your end user should only have to reload the route(s) that changed.  Without lazy loading, when you redeploy, they’ll have to reload an entirely new set of files.&lt;/p&gt;
&lt;h2 id=&#34;Embed-Colors-and-Fonts-in-Component-CSS&#34;&gt;&lt;a href=&#34;#Embed-Colors-and-Fonts-in-Component-CSS&#34; class=&#34;headerlink&#34; title=&#34;Embed Colors and Fonts in Component CSS&#34;&gt;&lt;/a&gt;Embed Colors and Fonts in Component CSS&lt;/h2&gt;&lt;p&gt;You should have a theme file, or an application level CSS file that defines the fonts, and colors that should be used throughout your application.  The only CSS that should be included at the component level is CSS that is necessary to layout the html within the component.  That is, position information.  If you are putting color information in, or specifying a font size or font, you are probably doing it wrong. &lt;/p&gt;
&lt;p&gt;Why is this an issue?  &lt;/p&gt;
&lt;p&gt;Well, let’s suppose that someone decides that all of your warnings should be a different color.  If you can make that change in one CSS file, that is going to be a lot easier than looking through all the CSS in all of your components to make sure you found every place the color needs to be changed. &lt;/p&gt;
&lt;p&gt;Don’t repeat yourself makes just as much sense in CSS as anywhere else in your code.&lt;/p&gt;
&lt;h2 id=&#34;Mix-Template-Files-and-Strings&#34;&gt;&lt;a href=&#34;#Mix-Template-Files-and-Strings&#34; class=&#34;headerlink&#34; title=&#34;Mix Template Files and Strings&#34;&gt;&lt;/a&gt;Mix Template Files and Strings&lt;/h2&gt;&lt;p&gt;As you should know by now, you can create the HTML templates and the CSS templates either by using strings in the TS file or by using separate HTML and CSS files.  You should use one style and use it consistently.  I’ve seen one project where they were using a mix of both and they had at least one file that was using a string for the HTML but still had the HTML file next to the TS and CSS file.  That’s just confusing.  Don’t do that!&lt;/p&gt;
&lt;h2 id=&#34;Don’t-Remove-Dead-Code&#34;&gt;&lt;a href=&#34;#Don’t-Remove-Dead-Code&#34; class=&#34;headerlink&#34; title=&#34;Don’t Remove Dead Code&#34;&gt;&lt;/a&gt;Don’t Remove Dead Code&lt;/h2&gt;&lt;p&gt;As we work on code, we might create a variable, or use an import that no longer is needed.  The linter is really good about telling us what code is no longer needed.  Use it and keep you code cleaned up.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-Stay-Up-to-Date&#34;&gt;&lt;a href=&#34;#Don’t-Stay-Up-to-Date&#34; class=&#34;headerlink&#34; title=&#34;Don’t Stay Up to Date&#34;&gt;&lt;/a&gt;Don’t Stay Up to Date&lt;/h2&gt;&lt;p&gt;Angular is progressing at a pretty fast rate and the Angular CLI is as well.  I realize that it isn’t always possible to keep the version you are working on up to date with the latest tools.  But not keeping your tools up to date for several months at a time is also something you want to avoid.  The sooner you update, the easier the update will be. &lt;/p&gt;
&lt;p&gt;Will the update break something?  &lt;/p&gt;
&lt;p&gt;Yes, that is likely.  You should plan that into your work flow.  Otherwise, you’ll get to the point where it will take so long to update, you’ll never get approval to do it because it will take too long.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-ionic-and-angular-cli/</guid>
            <title>Angular Ionic and Angular CLI</title>
            <link>http://davembush.github.com/angular-ionic-and-angular-cli/</link>
            <category>angular</category>
            <category>ionic</category>
            <category>angular-cli</category>
            <pubDate>Tue, 14 Nov 2017 06:30:12 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;As you might have noticed from last week’s post, I’ve shifted my focus from pure Angular to learning Angular Ionic.  And while last week’s post focused more on just &lt;a href=&#34;/angular-ionic-putty-ssh-authorized_keys-format&#34;&gt;getting Ionic setup on a Windows environment&lt;/a&gt;, this post will focus more on integrating Ionic and Angular CLI to work together. &lt;/p&gt;
&lt;p&gt;If you are familiar with Ionic, you should already know that it provides its own CLI that allows you to scaffold out a new application using a basic template.  This CLI is also used to help register the project with the Ionic Dashboard and scaffold out a limited number of file types if you use Ionic 3.  However, there are several problems I have with using the Ionic CLI.  First, and probably most important to me, is there is no test scaffolding!  Second, it neither follows the standard naming convention for files nor does it comply with the Angular Style Guide when it comes to directory structure. &lt;/p&gt;
&lt;p&gt;My first attempt at correcting the problem was to try to add Ionic to an existing Angular CLI project.  I almost had that working, but I got stuck trying to get the SCSS implementation working.  I finally gave up once I realized that Ionic seems to load files on demand, including SCSS files and templates.  I might come back to this once I’ve gained more experience with Ionic and have a better idea of how it works under the hood. &lt;/p&gt;
&lt;p&gt;Then, my second thought was to just add the Angular CLI to an existing Ionic CLI project.  It turns out this was much easier to get working.  This allows me to use the standard &lt;code&gt;ng&lt;/code&gt; commands to scaffold out my components, services, interfaces, etc… and because I’m using the Angular CLI scaffolding, the tests also get scaffold out for me. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/11/2017-11-14.jpg&#34; title=&#34;Angular Ionic and Angular CLI&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/internetarchivebookimages/14762635481/&#34;&gt;Internet Archive Book Images&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/09daa4&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//flickr.com/commons/usage/&#34;&gt; No known copyright restrictions&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;  

&lt;p&gt;For the purposes of this post, I’m going to assume you’ve already created a project using the Ionic CLI.  What follows are the steps you need to take to add in the Angular CLI.&lt;/p&gt;
&lt;h2 id=&#34;Add-Angular-CLI&#34;&gt;&lt;a href=&#34;#Add-Angular-CLI&#34; class=&#34;headerlink&#34; title=&#34;Add Angular CLI&#34;&gt;&lt;/a&gt;Add Angular CLI&lt;/h2&gt;&lt;p&gt;All of the additions to the package.json file are in devDependencies.  The version numbers I’ve included are for the version at the time of this writing. You’ll want to modify for newer versions as they are released. First, of course, add the angular cli&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;@angular/cli&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;1.4.9&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This will give you the ability to use the &lt;code&gt;ng&lt;/code&gt; commands to scaffold out files.  To allow the tests to run, you’ll also want to add the following:&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;@types/jasmine&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~2.5.53&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;@types/jasminewd2&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~2.0.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;@types/node&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~6.0.60&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;jasmine-core&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~2.6.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;jasmine-spec-reporter&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~4.1.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;karma&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~1.7.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;karma-chrome-launcher&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~2.1.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;karma-cli&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~1.0.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;karma-coverage-istanbul-reporter&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;^1.2.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;karma-jasmine&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~1.1.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;karma-jasmine-html-reporter&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;^0.2.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;protractor&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~5.1.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;ts-node&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~3.2.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I also use tslint quite extensively in my projects, so I also add in the following:&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;codelyzer&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~3.2.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;tslint&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~5.7.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;tslint-immutable&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;^4.4.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;angular-cli-json&#34;&gt;&lt;a href=&#34;#angular-cli-json&#34; class=&#34;headerlink&#34; title=&#34;.angular-cli.json&#34;&gt;&lt;/a&gt;.angular-cli.json&lt;/h2&gt;&lt;p&gt;The main file that makes the Angular CLI recognize the project as an Angular CLI project is the &lt;code&gt;.angular-cli.json&lt;/code&gt; file.  The easiest thing to do is to take an existing file from another project and copy it into your Ionic project.  This file belongs in the root of your project. &lt;/p&gt;
&lt;p&gt;Once you’ve done that, there is one small change you need to make.  The &lt;code&gt;main.ts&lt;/code&gt; file that is the entry point of the application lives under the &lt;code&gt;app&lt;/code&gt; directory in an Ionic project rather than directly under &lt;code&gt;src&lt;/code&gt; like it does with an Angular CLI project.  It would be tempting to change the location of the file, but the Ionic build process is looking for it under the &lt;code&gt;app&lt;/code&gt; directory.  An easier fix is to change the location in our &lt;code&gt;.angular-cli.json&lt;/code&gt; file so that our tests can find it.  It is the only place that needs to know of the new location. Change .angular-cli.json so main points to the right location:&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./node_modules/@angular/cli/lib/config/schema.json&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;project&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ionic-with-angular-cli&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;apps&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;outDir&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;dist&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;assets&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;&amp;quot;assets&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;&amp;quot;favicon.ico&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      **&lt;span class=&#34;attr&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;app/main.ts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;polyfills&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;polyfills.ts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;test.ts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;karma-conf-js&#34;&gt;&lt;a href=&#34;#karma-conf-js&#34; class=&#34;headerlink&#34; title=&#34;karma.conf.js&#34;&gt;&lt;/a&gt;karma.conf.js&lt;/h2&gt;&lt;p&gt;To run your tests, you’ll need a &lt;code&gt;karma.conf.js&lt;/code&gt; file in your root directory.  Again, the easiest thing to do is to copy this file over from a project you created with the Angular CLI.&lt;/p&gt;
&lt;h2 id=&#34;tsconfig-json&#34;&gt;&lt;a href=&#34;#tsconfig-json&#34; class=&#34;headerlink&#34; title=&#34;tsconfig.json&#34;&gt;&lt;/a&gt;tsconfig.json&lt;/h2&gt;&lt;p&gt;You should already have a &lt;code&gt;tsconfig.json&lt;/code&gt; file in your project root directory.  If you open it, you’ll see it has an exclude section that is excluding &lt;code&gt;node_modules&lt;/code&gt;.  You’ll need to tell it to exclude &lt;code&gt;test.ts&lt;/code&gt; and &lt;code&gt;*.spec.ts&lt;/code&gt; files so it doesn’t pick up the test files during a normal compile cycle.&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;exclude&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;node_modules&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;test.ts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;**/*.spec.ts&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;polyfills-ts&#34;&gt;&lt;a href=&#34;#polyfills-ts&#34; class=&#34;headerlink&#34; title=&#34;polyfills.ts&#34;&gt;&lt;/a&gt;polyfills.ts&lt;/h2&gt;&lt;p&gt;The tests use the &lt;code&gt;polyfills.ts&lt;/code&gt; file, so you’ll need to add one that was originally created using the Angular CLI.  This belongs in your &lt;code&gt;src&lt;/code&gt; directory.&lt;/p&gt;
&lt;h2 id=&#34;test-ts&#34;&gt;&lt;a href=&#34;#test-ts&#34; class=&#34;headerlink&#34; title=&#34;test.ts&#34;&gt;&lt;/a&gt;test.ts&lt;/h2&gt;&lt;p&gt;Copy a &lt;code&gt;test.ts&lt;/code&gt; file into your &lt;code&gt;src&lt;/code&gt; directory from a project that you created with the &lt;code&gt;Angular CLI&lt;/code&gt;.  If you don’t put this file in, you won’t be able to run any tests.&lt;/p&gt;
&lt;h2 id=&#34;tsconfig-spec-json&#34;&gt;&lt;a href=&#34;#tsconfig-spec-json&#34; class=&#34;headerlink&#34; title=&#34;tsconfig.spec.json&#34;&gt;&lt;/a&gt;tsconfig.spec.json&lt;/h2&gt;&lt;p&gt;The tests use &lt;code&gt;tsconfig.spec.json&lt;/code&gt; located in the &lt;code&gt;src&lt;/code&gt; directory.  The problem is, a standard &lt;code&gt;tsconfig.spec.json&lt;/code&gt; file inherits from the &lt;code&gt;tsconfig.json&lt;/code&gt; file we just modified above which doesn’t look at all like the &lt;code&gt;tsconfig.json&lt;/code&gt; file in an Angular CLI project.  I found the easiest thing to do was to create a new copy of &lt;code&gt;tsconfig.spec.json&lt;/code&gt; that is a merge of the two files in an Angular CLI project.  This worked at the time of this writing, if you run into trouble, you may need to merge the two files you started with on your own.  My result looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;compileOnSave&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;outDir&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;../out-tsc/spec&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;sourceMap&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;declaration&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;moduleResolution&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;emitDecoratorMetadata&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;experimentalDecorators&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;es5&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;typeRoots&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;node_modules/@types&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;es2017&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;dom&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;baseUrl&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;commonjs&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;types&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;jasmine&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;files&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;test.ts&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;include&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;**/*.spec.ts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;**/*.d.ts&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;typings-d-ts&#34;&gt;&lt;a href=&#34;#typings-d-ts&#34; class=&#34;headerlink&#34; title=&#34;typings.d.ts&#34;&gt;&lt;/a&gt;typings.d.ts&lt;/h2&gt;&lt;p&gt;I’m not sure this file was needed, but it was another file I found in an Angular CLI project that wasn’t in my Ionic CLI project, so I added it.  It goes in your &lt;code&gt;src&lt;/code&gt; directory and is just a copy of the file that is in your Angular CLI project.&lt;/p&gt;
&lt;h2 id=&#34;pages&#34;&gt;&lt;a href=&#34;#pages&#34; class=&#34;headerlink&#34; title=&#34;pages&#34;&gt;&lt;/a&gt;pages&lt;/h2&gt;&lt;p&gt;You’ll notice that your &lt;code&gt;pages&lt;/code&gt; directory is at the same level as your &lt;code&gt;src&lt;/code&gt; directory which doesn’t comply with the Angular CLI.  I moved mine so that it is under the &lt;code&gt;src&lt;/code&gt; directory just to keep things consistent.  You’ll need to fix up imports once you move it of course.&lt;/p&gt;
&lt;h2 id=&#34;Regenerate-Pages&#34;&gt;&lt;a href=&#34;#Regenerate-Pages&#34; class=&#34;headerlink&#34; title=&#34;Regenerate Pages&#34;&gt;&lt;/a&gt;Regenerate Pages&lt;/h2&gt;&lt;p&gt;Because the pages that got generated don’t conform to the style guide and don’t have any tests, I just regenerated mine and copied the relevant code into the newly generated files.&lt;/p&gt;
&lt;h2 id=&#34;Tests&#34;&gt;&lt;a href=&#34;#Tests&#34; class=&#34;headerlink&#34; title=&#34;Tests&#34;&gt;&lt;/a&gt;Tests&lt;/h2&gt;&lt;p&gt;At this point, you should have a project that looks a lot more like an Angular CLI project.  You’ll still use the Ionic command to do your regular build and development cycle and the ng commands for testing and generating new files.  Running tests works the same as you should already be used to from using Angular.  The one thing you will notice is that you’ll see a warning in your test: &lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Critical dependency: the request of a dependency is an expression&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This is a known “error” that neither the  Angular CLI group or the Ionic group seem interested in addressing. &lt;/p&gt;
&lt;p&gt;At this point, I haven’t tried any E2E tests using this setup so I don’t know if there are any additional tweaks that need to be made. &lt;/p&gt;
&lt;p&gt;You can find the code for this at this branch of a project I’m working on. &lt;a href=&#34;//github.com/DaveMBush/ionic-crud/tree/Add-Angular-CLI&#34;&gt;https://github.com/DaveMBush/ionic-crud/tree/Add-Angular-CLI&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/what-i-learned-using-angular-material/</guid>
            <title>What I Learned Using Angular Material</title>
            <link>http://davembush.github.com/what-i-learned-using-angular-material/</link>
            <category>angular</category>
            <category>angular material</category>
            <pubDate>Tue, 31 Oct 2017 06:30:06 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;This past week I took Angular Material for a spin.  In the process, I learned a few things you might find helpful.  Some may be helpful even if you aren’t interested in using Angular Material for your projects. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/10/2017-10-31.png&#34; title=&#34;What I Learned Using Angular Material&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/30478819@N08/36098571263/&#34;&gt;wuestenigel&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/3c147a&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Choose-Wisely&#34;&gt;&lt;a href=&#34;#Choose-Wisely&#34; class=&#34;headerlink&#34; title=&#34;Choose Wisely&#34;&gt;&lt;/a&gt;Choose Wisely&lt;/h2&gt;&lt;p&gt;Up until recently, I’ve been reluctant to try Angular Material for two basic reasons.  First, it didn’t seem quite ready for prime time.  I found out that it now has all of the components I would need for most of the applications I would want to develop.  Second, using Angular Material is a commitment.  Instead of writing primarily HTML, you write primarily angular material tags.  I thought this was a problem.  That I wouldn’t have the flexibility to switch between Angular Material and some other CSS framework.  But, as it turns out.  Angular Material doesn’t really lock me in any more than any other CSS framework or component library.  Which leads to the first lesson learned.  Choose your CSS frameworks and component library wisely.  If you decide to make a change mid-course, it is likely to suck up a lot of time from your project.  I would recommend doing some proof of concepts prior to committing to any component library or CSS framework.&lt;/p&gt;
&lt;h2 id=&#34;Less-Filling&#34;&gt;&lt;a href=&#34;#Less-Filling&#34; class=&#34;headerlink&#34; title=&#34;Less Filling&#34;&gt;&lt;/a&gt;Less Filling&lt;/h2&gt;&lt;p&gt;Because Angular Material is both a CSS framework and a component library, it turns out that writing templates using Angular Material is significantly terser than say, Bootstrap.  I don’t mean to imply that it produces less HTML.  Just that writing the templates tends to be a bit cleaner overall.&lt;/p&gt;
&lt;h2 id=&#34;import&#34;&gt;&lt;a href=&#34;#import&#34; class=&#34;headerlink&#34; title=&#34;@import&#34;&gt;&lt;/a&gt;@import&lt;/h2&gt;&lt;p&gt;I’ve written before about &lt;a href=&#34;https://medium.com/@davembush/adding-css-and-javascript-to-an-angular-cli-project-2b843a8283f3&#34;&gt;how to include CSS in your Angular project&lt;/a&gt;, but I’ve learned a new trick while implementing Angular Material. &lt;/p&gt;
&lt;p&gt;This might be a relative new thing with the Angular CLI, but apparently, you can &lt;code&gt;@import&lt;/code&gt; local and external CSS in your styles.css file.  When I evaluated the code that gets built, I found that the build process knows to keep the external code external yet bundles the internal code with the project.  This is something you could use regardless of what CSS framework or component library you are using.&lt;/p&gt;
&lt;h2 id=&#34;Layout&#34;&gt;&lt;a href=&#34;#Layout&#34; class=&#34;headerlink&#34; title=&#34;Layout&#34;&gt;&lt;/a&gt;Layout&lt;/h2&gt;&lt;p&gt;As I suspected, a lot of layout expects you to use Flex CSS.  Since I already had decided to use Flex-Layout to manage my layout with Bootstrap, this was not a big surprise.  The Flex-Layout project started its life as part of the Angular JS Material project and split out as a separate project when both moved to support Angular.  At times, figuring out where to use what directive may require you to use Developer Tools.  But I didn’t find this to be any more of a deterrent than using CSS in any other platform.  Just keep in mind that some of the Flex CSS is already defined in the Material components.&lt;/p&gt;
&lt;h2 id=&#34;Creating-Components-from-Injectables&#34;&gt;&lt;a href=&#34;#Creating-Components-from-Injectables&#34; class=&#34;headerlink&#34; title=&#34;Creating Components from @Injectables&#34;&gt;&lt;/a&gt;Creating Components from @Injectables&lt;/h2&gt;&lt;p&gt;While creating my demo project, there were two places where I needed to create “snack bars” or dialogs.  In Angular Material, the way you accomplish this is by calling a method on an @Injectable.  aka, a Service.  This is interesting to me and I’m going to have to dig deeper to find out exactly how this works.&lt;/p&gt;
&lt;h2 id=&#34;Testing&#34;&gt;&lt;a href=&#34;#Testing&#34; class=&#34;headerlink&#34; title=&#34;Testing&#34;&gt;&lt;/a&gt;Testing&lt;/h2&gt;&lt;p&gt;The first time you write unit tests, you’ll get a warning that says, “Could not find Angular Material core theme…”.  To remove this error, you’ll need to open karma.conf.js and add a “files:” section right under the “plugins:” section.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;files&lt;/span&gt;: [&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;pattern&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./node_modules/@angular/material/prebuilt-themes/indigo-pink.css&amp;#x27;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;included&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;watched&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;],&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can add whatever pre-built theme you’d like.  I’ve added indigo-pink here.&lt;/p&gt;
&lt;h2 id=&#34;Common-declare-x2F-import-x2F-export&#34;&gt;&lt;a href=&#34;#Common-declare-x2F-import-x2F-export&#34; class=&#34;headerlink&#34; title=&#34;Common declare&amp;#x2F;import&amp;#x2F;export&#34;&gt;&lt;/a&gt;Common declare&amp;#x2F;import&amp;#x2F;export&lt;/h2&gt;&lt;p&gt;Strictly speaking, this isn’t Angular Material specific.  But it was because of Angular Material that I discovered this trick.  Again, because it isn’t Angular Material specific, you can use this in any of your Angular code that it makes sense. &lt;/p&gt;
&lt;p&gt;Angular Material requires you to import each of the component modules individually.  This allows tree shaking to be more effective.  Rather than put this code in &lt;code&gt;app.module.ts&lt;/code&gt;, I created a &lt;code&gt;material-design.module.ts&lt;/code&gt; file and imported it into my &lt;code&gt;app.module.ts&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Now, if you are familiar with how imports work, you’ll already know that the components that are part of a module you import are only available to the parent module’s components or below.  But we want the component to be available to any module that imports &lt;code&gt;material-design.module.ts&lt;/code&gt;.  To do that, we need to export the same list of modules we imported. &lt;/p&gt;
&lt;p&gt;That sounded like too much repeating myself.  In an effort to make my code DRYer, I created a read only array with all my Material modules in it and then used the spread operator to include those in my imports and exports statement.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;materialDesignComponents&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ReadonlyArray&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Type&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&amp;gt;&amp;gt; = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;MatSidenavModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;MatToolbarModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;MatListModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CommonModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...materialDesignComponents&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;exports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...materialDesignComponents&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;declarations&lt;/span&gt;: []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MaterialDesignModule&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This saved me a lot of time, not just in typing, but in tracking down bugs because I simply forgot to include the modules in both places.&lt;/p&gt;
&lt;h2 id=&#34;Sample-Project&#34;&gt;&lt;a href=&#34;#Sample-Project&#34; class=&#34;headerlink&#34; title=&#34;Sample Project&#34;&gt;&lt;/a&gt;Sample Project&lt;/h2&gt;&lt;p&gt;If you are interested, you can find &lt;a href=&#34;//github.com/DaveMBush/angular-material-demo&#34;&gt;my sample project on GitHub&lt;/a&gt;.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/implementing-ngrx-4/</guid>
            <title>Implementing NgRX 4+</title>
            <link>http://davembush.github.com/implementing-ngrx-4/</link>
            <category>angular</category>
            <category>NgRX</category>
            <pubDate>Tue, 24 Oct 2017 06:30:46 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;There seems to be a lot of confusion about Implement NgRX 4 and above in an Angular application.  Some of it I’ve contributed to because NgRX 2 isn’t quite the same as NgRX 4 and as I’ve transitioned, I’ve learned better ways.  In other words, I was wrong and I’m correcting my mistake!  Below is the correct, NgRX approved way, of implementing NgRX 4. &lt;/p&gt;
&lt;p&gt;If you are looking for information about how to convert to NgRX 4 from NgRX 2, you can visit my previous article, &lt;a href=&#34;/how-to-upgrade-ngrx-to-4-x/&#34;&gt;How to Upgrade to NgRX 4&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Before we get started, make sure you have TypeScript 2.4.x or above installed in your local project.  The CLI may complain, depending on what version of it you are using.  But, NgRX 4 requires us to use TypeScript 2.4.x. You should also have RxJS 5.4.x or above installed. &lt;/p&gt;
&lt;p&gt;You will also need to install @ngrx.  You can do this using the following NPM command: &lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install --save @ngrx/store @ngrx/effects&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And finally, I’ve found that I need to use the –aot switch both when I’m using production and development builds, so you’ll want to add that to your scripts in your &lt;code&gt;package.json&lt;/code&gt; file. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/10/2017-10-24.jpg&#34; title=&#34;Implementing NgRX 4&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/cfaobam/12119410373/&#34;&gt;cfaobam&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/300eff&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h3 id=&#34;Actions&#34;&gt;&lt;a href=&#34;#Actions&#34; class=&#34;headerlink&#34; title=&#34;Actions&#34;&gt;&lt;/a&gt;Actions&lt;/h3&gt;&lt;p&gt;An Action is an object that contains a type variable and optionally, a payload.  Depending on how you code your action, the payload may or may not have “payload” as the variable name.  In NgRX version 2, payload was an optional variable.  To improve type checking, payload was removed from the Action interface. &lt;/p&gt;
&lt;p&gt;The official documentation for NgRX version 4 encourages us to create a class for each action we want to dispatch. &lt;/p&gt;
&lt;p&gt;Assuming we have a Wait component we want to display when a counter is incremented and that should be removed when the counter returns to zero, you might want a Start wait action and an End wait action.  So, you would create a wait.action.ts file that has two classes in it.  A Start action and an End action. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.End&amp;#x27;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;While this violates the “one class per file” rule, it actually provides us the ability to group our Actions together in one file, as you will see soon. &lt;/p&gt;
&lt;p&gt;To use these actions in our code, we would import them as a bundle: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This particular way of importing a packages groups all of the exported items under the variable named Wait.  Which allows us to dispatch the action using the store we’ve injected into our code using:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Start is an exported class from &lt;code&gt;wait.actions&lt;/code&gt; that we’ve grouped under &lt;code&gt;Wait&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;What makes this method of creating actions useful is that when we need to pass additional data along with our action, we can do that simply by adding parameters to our constructor.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Add&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; payload: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We don’t even have to call the payload, “payload.”  How about calling it “value.” &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Add&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; value: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And if you need more than one payload item, you can pass in multiple parameters.&lt;/p&gt;
&lt;h3 id=&#34;Improved-Actions&#34;&gt;&lt;a href=&#34;#Improved-Actions&#34; class=&#34;headerlink&#34; title=&#34;Improved Actions&#34;&gt;&lt;/a&gt;Improved Actions&lt;/h3&gt;&lt;p&gt;We can improve our actions even further by using &lt;code&gt;enums&lt;/code&gt; instead of &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.End&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Add&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then we can use the types in our Action classes like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Add&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ADD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; value: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What this does for us that &lt;code&gt;const&lt;/code&gt; doesn’t is that it when we use our case statements in the reducer, it will save us having to cast everything because TypeScript will know what type it should be because of the &lt;code&gt;enum&lt;/code&gt; that was assigned to the type field.&lt;/p&gt;
&lt;h3 id=&#34;Reducers&#34;&gt;&lt;a href=&#34;#Reducers&#34; class=&#34;headerlink&#34; title=&#34;Reducers&#34;&gt;&lt;/a&gt;Reducers&lt;/h3&gt;&lt;p&gt;Reducers are functions that allow us to change the state of our entity within our application Store.  Reducers respond to the actions that have been dispatched and return a new object based on the changes requested. &lt;/p&gt;
&lt;p&gt;To continue on with our Wait example, &lt;code&gt;wait.reducer.ts&lt;/code&gt; might look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;ActionReducer&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// This could (and probably should) go in wait.actions.ts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; | &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;End&lt;/span&gt; | &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Start&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;WaitReducer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;  state = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, action: Action&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(action.&lt;span class=&#34;property&#34;&gt;type&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ADD&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// TypeScript knows that our action have a value field here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state + action.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that we have a &lt;code&gt;default&lt;/code&gt; in our switch statement.  Don’t forget to add this.  It isn’t an accident.  You see, when we register our Reducers and Effects with the store and then subsequently dispatch actions to them, all the reducers and effects get called.  In the case of reducers, if you don’t return something for each one of them, you’ll end up with a store that doesn’t know what kind of state it is in.  So, always return the current state as your default. &lt;/p&gt;
&lt;p&gt;The one thing that may not be obvious here is that the Reducer is a function.  Not a class.  This means you can’t inject other classes into it.  This is one of the reasons that the file is named &lt;code&gt;wait.reducer.ts&lt;/code&gt; and not &lt;code&gt;wait.reducer**s**.ts&lt;/code&gt;. But, Effects are different.&lt;/p&gt;
&lt;h3 id=&#34;Effects&#34;&gt;&lt;a href=&#34;#Effects&#34; class=&#34;headerlink&#34; title=&#34;Effects&#34;&gt;&lt;/a&gt;Effects&lt;/h3&gt;&lt;p&gt;Effects are classes.  Each Effect within the Effects class is a member variable.  This means, we name our Effects file for Wait, &lt;code&gt;wait.effects.ts&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Now, remember I said that Effects were for things that caused side effects?  You may wonder, why kind of side effect does our Wait stuff need? &lt;/p&gt;
&lt;p&gt;Under normal circumstances, not any.  However, you can get into a situation in development mode where one of the safe guards Angular provides for you detects that you’ve changed the state of wait multiple times in a change detection loop.  Angular expects changes to be static. &lt;/p&gt;
&lt;p&gt;One way we can deal with this is to delay incrementing and decrementing to another change detection loop using setTimeout() indirectly. &lt;/p&gt;
&lt;p&gt;To do this, we are going to rip out the START and END case statements from our Reducer and add them into our Effects class. And then in &lt;code&gt;wait.effects.ts&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/Rx&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;Injectable&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;Actions&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Effect&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;``&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/effects&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Injectable&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;WaitEffects&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;start$&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt;&amp;gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;actions$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ).&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;((): &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;end$&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt;&amp;gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;actions$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;action: Wait.End&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ).&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;((): &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          (&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt;(-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; actions$: Actions&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can name the member variables whatever you want.  They never get used.  &lt;code&gt;ofType()&lt;/code&gt; is a filter that makes the observable stuff only fire for that particular type. &lt;/p&gt;
&lt;p&gt;The magic happens in the &lt;code&gt;Observable.timer(1).take(1)&lt;/code&gt;.  Here we wait for one millisecond, take the first item out of the stream and immediately close the observable.  Once that completes, the &lt;code&gt;map()&lt;/code&gt; returns a new action. &lt;/p&gt;
&lt;p&gt;Every Effect must return an action or you must tell the Effect that it won’t return an action.  Notice that we don’t dispatch the action.  That is done by NgRX for us.  We just return the action. &lt;/p&gt;
&lt;p&gt;To tell an Effect that no action will be returned, pass &lt;code&gt;&amp;#123;dispatch: false&amp;#125;&lt;/code&gt; into &lt;code&gt;@Effect()&lt;/code&gt;. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;dispatch&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&amp;#125;) …&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Returning-Multiple-Actions-from-Effects&#34;&gt;&lt;a href=&#34;#Returning-Multiple-Actions-from-Effects&#34; class=&#34;headerlink&#34; title=&#34;Returning Multiple Actions from Effects&#34;&gt;&lt;/a&gt;Returning Multiple Actions from Effects&lt;/h3&gt;&lt;p&gt;At the other end of possibilities, you may need to return multiple Actions from an Effect.  One way to do this is by using mergeMap().&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;.&lt;span class=&#34;title function_&#34;&gt;mergeMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* previous value here */&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ActionGroup&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Action1&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ActionGroup&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Action2&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Registration&#34;&gt;&lt;a href=&#34;#Registration&#34; class=&#34;headerlink&#34; title=&#34;Registration&#34;&gt;&lt;/a&gt;Registration&lt;/h3&gt;&lt;p&gt;Now, none of this is going to work if we don’t register our Reducers and Effects with the NgRX Store. &lt;/p&gt;
&lt;p&gt;If you look at a lot of the literature on how to write NgRX code, you’ll often see that they recommend that you put the code in AppModule.  That will work, but how much more effective to put the code for your Store in its own module.  I create a Module class called AppStores and put it in a file named &lt;code&gt;app.stores.ts&lt;/code&gt;.  I know, technically it is a module and it should be &lt;code&gt;app-stores.module.ts&lt;/code&gt;.  Using &lt;code&gt;app.stores.ts&lt;/code&gt; isolates it from a normal module.  All I want to put in here is Store stuff. &lt;/p&gt;
&lt;p&gt;Then, in my &lt;code&gt;app.stores.ts&lt;/code&gt; file, I put code that looks like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;WaitEffects&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.effects&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;AppState&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./app.state&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;WaitReducer&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.reducer&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;NgModule&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;StoreModule&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;ActionReducerMap&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;EffectsModule&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/effects&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;reducers&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionReducerMap&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;AppState&lt;/span&gt;&amp;gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;wait&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;WaitReducer&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;StoreModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;(reducers),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;EffectsModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;([&lt;span class=&#34;title class_&#34;&gt;WaitEffects&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppStore&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And the AppState interface that I used for my reducer map looks like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppState&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;wait&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;A couple of things you should notice about this code.  First, the reducers object we create at the top of the file describes what our store looks like.  So far, we have an entity named “wait” that is controlled by our WaitReducer. &lt;/p&gt;
&lt;p&gt;Then to register the reducers with our application, we pass them on to &lt;code&gt;StoreModule.forRoot()&lt;/code&gt; in the imports section of our module definition. &lt;/p&gt;
&lt;p&gt;Similarly, we must register our Effects with the application.  We do this by passing an array of Effects to &lt;code&gt;EffectsModule.forRoot()&lt;/code&gt; in the imports section of our module definition. &lt;/p&gt;
&lt;p&gt;Of course, none of this code will even get included in your project unless you import this module into your AppModule class. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;declarations&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;BrowserModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    **&lt;span class=&#34;title class_&#34;&gt;AppStore&lt;/span&gt;**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;bootstrap&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppModule&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Retrieving-Data&#34;&gt;&lt;a href=&#34;#Retrieving-Data&#34; class=&#34;headerlink&#34; title=&#34;Retrieving Data&#34;&gt;&lt;/a&gt;Retrieving Data&lt;/h2&gt;&lt;p&gt;Retrieving an entity from a store is quite simple.  Leaving out the imports that a good editor should help you with, here is the relevant code: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;wait&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;store: Store&amp;lt;AppState&amp;gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;wait&lt;/span&gt; = store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;s: AppState&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;      =&amp;gt;&lt;/span&gt; s.&lt;span class=&#34;property&#34;&gt;wait&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And now you can subscribe to wait and whenever the value changes, you’ll get a notification and can do something with it.&lt;/p&gt;
&lt;h2 id=&#34;Lazy-Loading-NgRX&#34;&gt;&lt;a href=&#34;#Lazy-Loading-NgRX&#34; class=&#34;headerlink&#34; title=&#34;Lazy-Loading NgRX&#34;&gt;&lt;/a&gt;Lazy-Loading NgRX&lt;/h2&gt;&lt;p&gt;Prior to NgRX version 4, all our state stuff had to live in the root of the application.  This was problematic because it also meant we were unable to easily locate our Actions, Reducers and Effects with the Routes they belonged to.  So, we had feature level components but everything else was more function based.  That is, all our State stuff lived together in one directory separate from the feature they supported.  Ugly! &lt;/p&gt;
&lt;p&gt;But now, we can create Reducers and Effects that live with the feature we support.&lt;/p&gt;
&lt;h3 id=&#34;Always-Import-forRoot&#34;&gt;&lt;a href=&#34;#Always-Import-forRoot&#34; class=&#34;headerlink&#34; title=&#34;Always Import forRoot()&#34;&gt;&lt;/a&gt;Always Import forRoot()&lt;/h3&gt;&lt;p&gt;The first thing you’ll need to be aware of is that even if you aren’t storing any state at the application level, you will need to call &lt;code&gt;StoreModule.forRoot()&lt;/code&gt; and &lt;code&gt;EffectsModule.forRoot()&lt;/code&gt; with an empty object and array. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;StoreModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;(&amp;#123;&amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;EffectsModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;AppState-vs-FeatureState&#34;&gt;&lt;a href=&#34;#AppState-vs-FeatureState&#34; class=&#34;headerlink&#34; title=&#34;AppState vs FeatureState&#34;&gt;&lt;/a&gt;AppState vs FeatureState&lt;/h3&gt;&lt;p&gt;You’ll remember that you’ll typically use an interface called AppState to define the structure of the Store for your application.  You are going to want to create a separate interface for each set of feature reducers you are loading.&lt;/p&gt;
&lt;h3 id=&#34;Feature-Name-as-AppState-Property&#34;&gt;&lt;a href=&#34;#Feature-Name-as-AppState-Property&#34; class=&#34;headerlink&#34; title=&#34;Feature Name as AppState Property&#34;&gt;&lt;/a&gt;Feature Name as AppState Property&lt;/h3&gt;&lt;p&gt;When you add a feature reducer, you’ll need to supply a name as the first parameter. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;StoreModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forFeature&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;featureName&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    featureReducers),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Where &lt;code&gt;featureReducers&lt;/code&gt; is the map of reducers for the feature.  Like what we did for the root level reducers. &lt;/p&gt;
&lt;p&gt;This “featureName” becomes the name of the store entity you’ll need to select to get at the store entities in your feature reducers. &lt;/p&gt;
&lt;p&gt;Imagine you have a feature named “featureName” as we’ve coded above and your &lt;code&gt;featureReducer&lt;/code&gt; object has a feature property named “sub”.  Not super original, but it will do for an example. To select “sub” from your store, you would use code that would look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;s&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  s.&lt;span class=&#34;property&#34;&gt;featureName&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;sub&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This means that if you want to strongly type your selections using AppState, you will need to define a field in your AppState interface as “featureName” that is typed as the State interface for that feature.  Let’s call that FeatureState. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FeatureState&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;sub&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;SubModel&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then our AppState would look like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppState&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;featureName&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;FeatureState&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now we can write our select code like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: AppState&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;featureName&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;sub&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you have Effects that go with your reducers, you’ll also need to import them with &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;EffectsModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forFeature&lt;/span&gt;([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    …list &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt; effects here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Features-Without-AppState&#34;&gt;&lt;a href=&#34;#Features-Without-AppState&#34; class=&#34;headerlink&#34; title=&#34;Features Without AppState&#34;&gt;&lt;/a&gt;Features Without AppState&lt;/h3&gt;&lt;p&gt;It is possible to access the feature state without putting it in your AppState.  This alternate method may be the only way you can access the code, but you might want to implement this method generally so that your features don’t necessarily have to know about the application. &lt;/p&gt;
&lt;p&gt;To implement this access method, you use the &lt;code&gt;createFeatureSelector()&lt;/code&gt;and &lt;code&gt;createSelector()&lt;/code&gt; methods which you can import from &lt;code&gt;@ngrx/store&lt;/code&gt;. The above code using these methods would look something like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; featureSelector = createFeatureSelector&amp;lt;&lt;span class=&#34;title class_&#34;&gt;FeatureState&lt;/span&gt;&amp;gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;featureName&amp;#x27;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; subSelector = &lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(featureSelector, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: FeatureState&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;sub&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(subSelector);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Where store is injected using &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;store: Store&amp;lt;FeatureState&amp;gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Note: I’m not suggesting that you write your code like this.  If you are repeating the &lt;code&gt;createFeatureSelector()&lt;/code&gt; &lt;code&gt;createSelector()&lt;/code&gt; code in multiple places, you should look for a way of not repeating yourself.  I’ve put it all in one place here, so you can see how the methods tie together in the bigger picture.  In my production code, I tend to write this as a separate function in a separate file that can be called from anywhere.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/using-ngrx-to-cleanly-aggregate-data/</guid>
            <title>Using NgRX to Cleanly Aggregate Data</title>
            <link>http://davembush.github.com/using-ngrx-to-cleanly-aggregate-data/</link>
            <category>angular</category>
            <category>design patterns</category>
            <category>NgRX</category>
            <pubDate>Tue, 03 Oct 2017 06:30:50 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;For the last 18 months, I’ve been working for an organization that has what some might consider a unique requirement.  Because of where our application’s data is sourced, we need to aggregate data on the client side rather than on the server.  What this means is that for any one screen, we may make multiple calls to the server to grab all the data we need.  Fortunately, because we adopted NgRX early in our adoption of Angular, we could avoid a lot of the headaches associated with client-side aggregation. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/09/2017-10-03.png&#34; title=&#34;Using NgRX to Cleanly Aggregate Data&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/gsfc/14486243743/&#34;&gt;NASA Goddard Photo and Video&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/296da9&#34;&gt;Visualhunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;The-Problem&#34;&gt;&lt;a href=&#34;#The-Problem&#34; class=&#34;headerlink&#34; title=&#34;The Problem&#34;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;&lt;p&gt;There are multiple ways this problem might manifest itself in an application.  But one of the most common is a basic search screen that displays a list of results.  Everything is simple when your data comes back with all the data you need.  But in our case, the data that is returned might contain all but one or two fields that we need.  Those fields exist in other end points.  To keep the basic problem small, let’s just assume that you search for a list of records.  That search returns 10 items.  For each of those records, you now need to make two more calls to retrieve the content of the two missing fields.  This means that to get a complete result set back, you need to make a total of 21 calls.  The problem becomes even worse if you have a total of 100 records, or you now have 3 fields that you need to retrieve for each row.&lt;/p&gt;
&lt;h2 id=&#34;The-Old-Way&#34;&gt;&lt;a href=&#34;#The-Old-Way&#34; class=&#34;headerlink&#34; title=&#34;The Old Way&#34;&gt;&lt;/a&gt;The Old Way&lt;/h2&gt;&lt;p&gt;Prior to using NgRX, the main way we might solve this problem would be to introduce callback hell, or promise hell if you are that lucky.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make a call for the original list&lt;/li&gt;
&lt;li&gt;When the list gets returned&lt;ul&gt;
&lt;li&gt;Iterate through the records and&lt;ul&gt;
&lt;li&gt;Make a call for Child Record One&lt;ul&gt;
&lt;li&gt;When callback returns, add the new value to the parent record&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make a call for Child Record Two&lt;ul&gt;
&lt;li&gt;When the callback returns, add the new value to the parent record&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Once all the calls have returned, return the list so it can be displayed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, this not only becomes difficult to manage, but it also introduces a system that is going to be perceived as slow. &lt;/p&gt;
&lt;p&gt;But, now, we can do better.&lt;/p&gt;
&lt;h2 id=&#34;Using-NgRX&#34;&gt;&lt;a href=&#34;#Using-NgRX&#34; class=&#34;headerlink&#34; title=&#34;Using NgRX&#34;&gt;&lt;/a&gt;Using NgRX&lt;/h2&gt;&lt;p&gt;By using NgRX, we use a series of Effects to retrieve our data, typically via a Service.  When the effect is done, it returns the results to a reducer which puts them in our store entity for us. &lt;/p&gt;
&lt;p&gt;The basic work flow looks like something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dispatch an action to get the main results&lt;/li&gt;
&lt;li&gt;Effect hears the action and makes a call for the top-level list&lt;/li&gt;
&lt;li&gt;When the list returns,&lt;ul&gt;
&lt;li&gt;Iterate through the records and&lt;ul&gt;
&lt;li&gt;we dispatch an action to get Child Record One&lt;/li&gt;
&lt;li&gt;we dispatch an action to get Child Record Two&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Return an Action that will use a reducer to fill our list&lt;/li&gt;
&lt;li&gt;Child Record One Effect hears the actions for each of the rows&lt;/li&gt;
&lt;li&gt;When each of the values are retrieved the Effect returns an Action that uses a Reducer to put the value in the store&lt;/li&gt;
&lt;li&gt;Child Record Two Effect hears the actions for each of the rows&lt;/li&gt;
&lt;li&gt;When each of the values are retrieved, the Effect returns an Action that uses a Reducer to put the value in the store&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You’ll notice, we no longer have the nesting mess that we had using the old way and we can list our results as soon as the first set of data is returned.&lt;/p&gt;
&lt;h2 id=&#34;Meanwhile-back-on-our-View&#34;&gt;&lt;a href=&#34;#Meanwhile-back-on-our-View&#34; class=&#34;headerlink&#34; title=&#34;Meanwhile, back on our View&#34;&gt;&lt;/a&gt;Meanwhile, back on our View&lt;/h2&gt;&lt;p&gt;Now, there are two ways you can deal with displaying this information in your view and it all depends on what you are doing. &lt;/p&gt;
&lt;p&gt;The easy way is to just let the View display the information as it comes back.  Most of the time this will work.  If you need to filter your data in the display once it comes back, you will need to decide if data that doesn’t have the child fields yet should, or should not be displayed. &lt;/p&gt;
&lt;p&gt;Another quirk I had to deal with was that we were displaying child rows with child rows.  Letting the data display as we got it back gave the screen a kind of exploding effect.  For this, I added a debounceTime(500) to the store observer so that the screen only updated once all the data had been retrieved.  Using the pattern above was still easier to reason about than the old way, we just didn’t get the added benefit of being able to see the data as it was being retrieved.&lt;/p&gt;
&lt;h2 id=&#34;Watch-Out&#34;&gt;&lt;a href=&#34;#Watch-Out&#34; class=&#34;headerlink&#34; title=&#34;Watch Out!&#34;&gt;&lt;/a&gt;Watch Out!&lt;/h2&gt;&lt;p&gt;One of the wrong ways you might be tempted to use this pattern would be to chain all the child stuff in one effect and dispatch actions to your reducers from within the one Effect.  This would be a mistake.  Sure, it would work.  But now because your effect is doing more than one thing, your code becomes MUCH harder to reason about.  While each of your Effects may ultimately call the same reducer function, or not, you definitely want to have a separate set of Actions and Effects that retrieve the data from the server.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/upgrade-to-angular-from/</guid>
            <title>Upgrade to Angular from...</title>
            <link>http://davembush.github.com/upgrade-to-angular-from/</link>
            <category>angular</category>
            <category>react.js</category>
            <category>portal</category>
            <category>web 1.0</category>
            <category>web 2.0</category>
            <pubDate>Tue, 26 Sep 2017 06:30:23 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;As I’ve been interviewing for a new contract, the question, “How do we Upgrade to Angular from …?” has come up several times.  And as I’ve thought about the question, several patterns have emerged. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/09/2017-09-26.jpg&#34; title=&#34;Upgrade Angular from ...&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/archer10/12414442945/&#34;&gt;archer10 (Dennis) 102M Views&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/426124&#34;&gt;Visualhunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by-sa/2.0/&#34;&gt; CC BY-SA&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;From-a-Portal&#34;&gt;&lt;a href=&#34;#From-a-Portal&#34; class=&#34;headerlink&#34; title=&#34;From a Portal&#34;&gt;&lt;/a&gt;From a Portal&lt;/h2&gt;&lt;p&gt;The first time I was asked this question, the team I was talking with had an existing Web 1.0 site setup using WebSphere Portal.  Not something that you can easily plug any Single Page Application (SPA) into. But all is not lost. &lt;/p&gt;
&lt;p&gt;One of the easiest ways to solve the problem is to create a reverse proxy.  One popular tool for this is mod_proxy for the Apache server.  If you are using IIS, you could use URL Rewrite rules to setup a reverse proxy. &lt;/p&gt;
&lt;p&gt;In either case, you will need to setup rules that ensure that anyone trying to access a URL that is still on the old portal site would still be able to access that directly.  Once that is in place, you would create one page, or maybe a set of related pages, at a time and stand them up on another server.  Then you would change your rules so that anyone trying to access the old URLs that are no longer being served by the old site get redirected to the new SPA application. &lt;/p&gt;
&lt;p&gt;Now, this sounds pretty simple.  But, I imagine keeping everything in sync as you go might be more of a pain that you might imagine.  If you have pages that link to each other, you’ll need to convert links to routes as you go.  Say you convert page one.  It still has links to the old site.  Not a big problem.  But as the pages it is linking to now become part of the SPA, you’ll want to convert those links to route directives.  One way you might mitigate this issue is to convert pages with the fewest links out first.  It might help to create a graph, or at least a spreadsheet, to help you manage the interdependent relationships. &lt;/p&gt;
&lt;p&gt;An added advantage of this setup is that any pages in the portal that have relatively static content, and any resources, can be cached, or even moved, to the proxy server where they will probably be served up faster than the original portal.&lt;/p&gt;
&lt;h2 id=&#34;From-a-Web-1-0-Site&#34;&gt;&lt;a href=&#34;#From-a-Web-1-0-Site&#34; class=&#34;headerlink&#34; title=&#34;From a Web 1.0 Site&#34;&gt;&lt;/a&gt;From a Web 1.0 Site&lt;/h2&gt;&lt;p&gt;Switching from an existing Web 1.0 site might be a bit easier.  Although, using the proxy method there still might be the best choice.  Many of the same issues exist.  But in the case of an existing Web 1.0 site that doesn’t depend on a portal, you’ll probably have greater control over the server.  Again, you are probably running the site on Apache, nginx, or IIS.  In all of those cases, you can setup a rule that says, “if you can’t find the URL, load up this page over here instead.”  Where “this page over here” is your Angular site you are converting to.  You’ll need to implement something like this anyhow for your Angular SPA to work correctly, so this is probably the least amount of extra work to get you where you need to be. &lt;/p&gt;
&lt;p&gt;Then, you convert a page or a set of related pages at a time like I described in the Portal implementation.&lt;/p&gt;
&lt;h2 id=&#34;From-Another-Framework&#34;&gt;&lt;a href=&#34;#From-Another-Framework&#34; class=&#34;headerlink&#34; title=&#34;From Another Framework&#34;&gt;&lt;/a&gt;From Another Framework&lt;/h2&gt;&lt;p&gt;Let’s say that you are moving from React, or some other framework to Angular.  I know of a company that is doing just this.  The wrinkle is, they have no plans on converting their existing pages to Angular.  This makes the transition relatively simple.  You setup rules on your server, similar to how you would setup a conversion from a Web 1.0 site.  “URLs that look like this, go to the old index.html page and URLs that look like that go to the new index.html page.” &lt;/p&gt;
&lt;p&gt;Once again, you’ll need to keep track of routes as you change from one to the other.  But it is manageable.&lt;/p&gt;
&lt;h2 id=&#34;Converting-AngularJS-to-Angular&#34;&gt;&lt;a href=&#34;#Converting-AngularJS-to-Angular&#34; class=&#34;headerlink&#34; title=&#34;Converting AngularJS to Angular&#34;&gt;&lt;/a&gt;Converting AngularJS to Angular&lt;/h2&gt;&lt;p&gt;Yes, I know ngUpgrade exist.  But, if you don’t need to use it, why would you.  ngUpgrade exist so you can embed Angular in AngularJS or AngularJS in Angular.  But, it might make more sense to create a new SPA for Angular and have the two sites reference each other similar to how you would do this for a Web 1.0 site or if you were converting from an entirely different framework. &lt;/p&gt;
&lt;p&gt;The reason I recommend using the two-site method first is because Angular really is a different framework.  There are similarities between AngularJS and Angular.  But that is all they are.  What if you just pretended they weren’t at all related.  That the ngUpdate bridge didn’t exist.  Wouldn’t that make life just a bit easier in the long run?  I think it would.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/this-one-tweak-improved-my-angular-code/</guid>
            <title>This One Tweak Improved my Angular Code</title>
            <link>http://davembush.github.com/this-one-tweak-improved-my-angular-code/</link>
            <category>angular</category>
            <category>typescript</category>
            <pubDate>Tue, 12 Sep 2017 06:30:10 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I made a tweak to my Angular code process over the last month or so that has resulted in greater productivity in my development environment and fewer bugs. &lt;/p&gt;
&lt;p&gt;Now, I didn’t make this change because I thought it would improve my productivity.  At least that wasn’t the primary reason.  I made the change because I thought it would reduce the chance of introducing bugs into my code.  And while it does reduce the number of bugs in my code, the result has been generally improved productivity. &lt;/p&gt;
&lt;p&gt;What is this great secret? &lt;figure&gt;&lt;img src=&#34;/uploads/2017/09/2017-09-12.jpg&#34; title=&#34;This One Tweak Improved my Angular Code&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/sheila_sund/36859429262/&#34;&gt;docoverachiever&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/d75fb5&#34;&gt;Visual Hunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;History&#34;&gt;&lt;a href=&#34;#History&#34; class=&#34;headerlink&#34; title=&#34;History&#34;&gt;&lt;/a&gt;History&lt;/h2&gt;&lt;p&gt;Before I tell you the secret, I want to tell you how I got here.  Yesterday, I was listening to a podcast that was reviewing another framework with the creators of that framework.  All during the podcast they were comparing their framework to Angular and React.  Fine, compare and contrast is good.  Except, they were comparing and contrasting something they knew really well, their framework, to something they had a lesser understanding of.  So, in the process, one of their complaints about Angular was that Angular doesn’t take full advantage of TypeScript.  Or, it doesn’t take as full advantage of TypeScript as their framework does. &lt;/p&gt;
&lt;p&gt;As I listened to this I realized that most Angular developers probably aren’t taking as full advantage of TypeScript as they could.  I think this is by design.  But, it is too our hurt.  Fortunately, we can turn things on that Angular leaves turned off.&lt;/p&gt;
&lt;h2 id=&#34;Type-Safety&#34;&gt;&lt;a href=&#34;#Type-Safety&#34; class=&#34;headerlink&#34; title=&#34;Type Safety&#34;&gt;&lt;/a&gt;Type Safety&lt;/h2&gt;&lt;p&gt;Now, if you are like most developers I know, you just want to get your code working.  And so, you don’t pay attention to things like Linters.  And you have learned enough TypeScript to get your code working.  This is especially true of those who are coming from “old school” JavaScript. &lt;/p&gt;
&lt;p&gt;Now, I’m going to challenge you to do two things.  First, use TSLint.  Next, make the rules as rigid as possible.&lt;/p&gt;
&lt;h3 id=&#34;TSLint&#34;&gt;&lt;a href=&#34;#TSLint&#34; class=&#34;headerlink&#34; title=&#34;TSLint&#34;&gt;&lt;/a&gt;TSLint&lt;/h3&gt;&lt;p&gt;If you are using the Angular CLI, TSLint is built in.  To run TSLint, all you need to do is to run &lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm run lint&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;On the command line. &lt;/p&gt;
&lt;p&gt;This will verify that you haven’t made any really stupid syntax mistakes by default. &lt;/p&gt;
&lt;p&gt;Next, the editor you are using should have a way of hooking TSLint up to the editor so that you can tell you have a problem in your code as you write your code.  If your editor doesn’t have a way of doing this, find a new editor.  The two editors I recommend are VS Code and WebStorm.  Each have their own strengths and weaknesses.&lt;/p&gt;
&lt;h3 id=&#34;Rules&#34;&gt;&lt;a href=&#34;#Rules&#34; class=&#34;headerlink&#34; title=&#34;Rules&#34;&gt;&lt;/a&gt;Rules&lt;/h3&gt;&lt;p&gt;The rules that come with the Angular CLI are, in my opinion, too relaxed.  They are strong enough to not annoy JavaScript programmers.  They protect you from making really stupid TypeScript programming errors.  But, they don’t help you write code that you have a high assurance will work correctly the first time without running it. &lt;/p&gt;
&lt;p&gt;We are going to fix this. &lt;/p&gt;
&lt;p&gt;The main thing we want to do is that we want to tighten up type checking.  So, instead of using the defaults that either let variables be anything or default them to the type they are assigned to when they are declared if that can be determined, we are going to force variables to be declared.&lt;/p&gt;
&lt;h2 id=&#34;Why-This-Helps&#34;&gt;&lt;a href=&#34;#Why-This-Helps&#34; class=&#34;headerlink&#34; title=&#34;Why This Helps&#34;&gt;&lt;/a&gt;Why This Helps&lt;/h2&gt;&lt;p&gt;When I first made this kind of change, I was doing it to &lt;a href=&#34;/typescript-functional-programming/&#34;&gt;improve my NgRX code&lt;/a&gt;.  Once I did that, I immediately saw that by enforcing type safety, I could easily tell if the functions I was using in my Observable chains was going to end up returning what I thought it was going to.  This means, I can write my code and if I don’t get any tslint warnings in my editor, I can have a high degree of certainty that the code will run correctly once I compile it and run it. &lt;/p&gt;
&lt;p&gt;Maybe you think type safety is for sissies.  OK then, you can continue to run your code multiple times to find the same error that I can find before I ever run the code.  I think we all know who will be more productive. &lt;/p&gt;
&lt;p&gt;Once I saw this productivity gain, I determined to add type safety to my entire project.  This took much less time than you would expect and I was able to apply the rules incrementally so that I was not disrupting the progress of the project I was working on.&lt;/p&gt;
&lt;h2 id=&#34;Implementation&#34;&gt;&lt;a href=&#34;#Implementation&#34; class=&#34;headerlink&#34; title=&#34;Implementation&#34;&gt;&lt;/a&gt;Implementation&lt;/h2&gt;&lt;p&gt;The implementation is actually pretty simple.  The first thing you are going to want to do is that you’ll want to change the npm lint script from: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;lint&amp;quot;: &amp;quot;ng lint&amp;quot;&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;to &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;lint&amp;quot;: &amp;quot;ng lint --type-check --fix&amp;quot;&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;This does two things.  First it allows us to change to tslint rules to use rules that require type checking.  And second it will cause the tslint to fix any problems it finds that it can fix automatically. &lt;/p&gt;
&lt;p&gt;Next, you’ll want to install tslint-immutable, which will allow us to add in rules for immutability that I mentioned in my previous post that I linked to above.  As of this writing, I’m using version 4.1.0 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save-dev tslint-immutable&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Next, open up tslint.json which should be at the root of your application. &lt;/p&gt;
&lt;p&gt;Inside this file, right before the rulesDirectory section, add this code: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;extends&amp;quot;: [&amp;quot;tslint-immutable&amp;quot;],&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;This will allow us to access the immutable rules we just added with &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;typedef&#34;&gt;&lt;a href=&#34;#typedef&#34; class=&#34;headerlink&#34; title=&#34;typedef&#34;&gt;&lt;/a&gt;typedef&lt;/h3&gt;&lt;p&gt;The first thing we want to do is that we want to force everything to have a type definition. &lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;typedef&amp;quot;&lt;/span&gt;: [ &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;call-signature&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;arrow-call-signature&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;parameter&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;arrow-parameter&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;property-declaration&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;variable-declaration&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;member-variable-declaration&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;object-destructuring&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;array-destructuring&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;],&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The one place where you might have a problem is that by default, the no-inferable-types rule is turned on, which is what we want.  Currently, tslint is not smart enough to know that no-inferable-types should take precedence over typedef.  So, you’ll need to occasionally exclude the rule using the &lt;a href=&#34;//palantir.github.io/tslint/usage/rule-flags/&#34;&gt;tslint comment exclusion&lt;/a&gt;.  I exclude the typedef when I run into this problem. &lt;/p&gt;
&lt;p&gt;If you are interested, you can google each of the typedef declarations (rather than linking to them and have the links go stale).&lt;/p&gt;
&lt;h3 id=&#34;no-any&#34;&gt;&lt;a href=&#34;#no-any&#34; class=&#34;headerlink&#34; title=&#34;no-any&#34;&gt;&lt;/a&gt;no-any&lt;/h3&gt;&lt;p&gt;Now that we are forcing everything to have a type definition, the next thing you want to do is that you’ll want to disallow using “any” as a type definition.  Otherwise, why force the type definition at all?  I’d love to be able to disallow “object” as well, but there is currently no definition for that so until someone creates that rule, you’ll just have to use discipline.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;no-any&amp;quot;: true,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You may complain that sometimes you want to have the variable really be anything.  Anything?  Really?  I bet most of the time what you really want to be able to do is that you’ll want to define the variable as one of two, maybe three types.  You can achieve this definition as of TypeScript 2.4, by using the pipe operator.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var stringOrNumber: string | number;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;no-unused-variable&#34;&gt;&lt;a href=&#34;#no-unused-variable&#34; class=&#34;headerlink&#34; title=&#34;no-unused-variable&#34;&gt;&lt;/a&gt;no-unused-variable&lt;/h3&gt;&lt;p&gt;To keep your code clean, the next rule you want to enable is to disallow creating variables that you aren’t using.  This will have the side effect of cleaning up your import statements as well. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;no-unused-variable&amp;quot;: true,&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Those are all the rules I use that impact type safety.  Here are a few more you might want to consider adding.&lt;/p&gt;
&lt;h3 id=&#34;Cyclomatic-Complexity&#34;&gt;&lt;a href=&#34;#Cyclomatic-Complexity&#34; class=&#34;headerlink&#34; title=&#34;Cyclomatic Complexity&#34;&gt;&lt;/a&gt;Cyclomatic Complexity&lt;/h3&gt;&lt;p&gt;Cyclomatic Complexity is a measure of how complicated your functions and methods are.  While the default implementation for this is 20, I find that if I’ve written a function that is that complex, even I have trouble understanding it any more.  While keeping my complexity lower than 10 contributes to extremely readable code.  Yes, there are times when there really isn’t any good way of breaking the code into smaller chunks.  But that is rare and code comment exclusions will let you handle those exceptions. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;cyclomatic-complexity&amp;quot;: [true, 10],&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;Optional-Rules&#34;&gt;&lt;a href=&#34;#Optional-Rules&#34; class=&#34;headerlink&#34; title=&#34;Optional Rules&#34;&gt;&lt;/a&gt;Optional Rules&lt;/h2&gt;&lt;p&gt;Some other rules you might want to consider adding in that could improve your code include:&lt;/p&gt;
&lt;h3 id=&#34;array-type-generic&#34;&gt;&lt;a href=&#34;#array-type-generic&#34; class=&#34;headerlink&#34; title=&#34;array-type generic&#34;&gt;&lt;/a&gt;array-type generic&lt;/h3&gt;&lt;p&gt;Coming from a C# background, I prefer to define my arrays as Array&lt;T&gt; instead of T[].  By default nothing is defined.  If it is just you working on the code, it probably doesn’t matter than much.  But on a team, I find consistency useful. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;array-type&amp;quot;: [true, &amp;quot;generic&amp;quot;],&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;readonly-array&#34;&gt;&lt;a href=&#34;#readonly-array&#34; class=&#34;headerlink&#34; title=&#34;readonly-array&#34;&gt;&lt;/a&gt;readonly-array&lt;/h3&gt;&lt;p&gt;For my NgRX code, I like to have readonly-array turned on to ensure immutability.  I’ve found that I rarely need to turn this off in the rest of my code since NgRX is where I would be mutating anything that isn’t local to a function.  So, I just turn this rule on globally. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;readonly-array&amp;quot;: [true, &amp;quot;ignore-local&amp;quot;],&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;Final-Notes&#34;&gt;&lt;a href=&#34;#Final-Notes&#34; class=&#34;headerlink&#34; title=&#34;Final Notes&#34;&gt;&lt;/a&gt;Final Notes&lt;/h2&gt;&lt;p&gt;I mentioned above that if you are using TypeScript 2.4.n, you can use the pipe operator to combine types.  You also get stronger type checking if you use that version.  However, if you are using codelyzer, as of this writing, you’ll have trouble if you use TypeScript 2.4.n with a version of Codelyzer greater than 3.0.1.  I keep trying the newer versions to see if this issue has been corrected.  Anyhow, your mileage may vary moving your code to TypeScript 2.4.n.&lt;/p&gt;
&lt;h2 id=&#34;My-TSLint-file&#34;&gt;&lt;a href=&#34;#My-TSLint-file&#34; class=&#34;headerlink&#34; title=&#34;My TSLint file&#34;&gt;&lt;/a&gt;My TSLint file&lt;/h2&gt;&lt;p&gt;For those who are curious, my full tslint.json file is below. &lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;extends&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;quot;tslint-immutable&amp;quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;rulesDirectory&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;node_modules/codelyzer&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;rules&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;typedef&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;call-signature&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;arrow-call-signature&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;parameter&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;arrow-parameter&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;property-declaration&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;variable-declaration&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;member-variable-declaration&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;object-destructuring&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;array-destructuring&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;array-type&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;generic&amp;quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;readonly-keyword&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;readonly-array&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;ignore-local&amp;quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-let&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-any&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;cyclomatic-complexity&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-unused-variable&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;arrow-return-shorthand&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;callable-types&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;class-name&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;comment-format&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-space&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;curly&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;eofline&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;forin&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;import-blacklist&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rxjs&amp;quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;import-spacing&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;indent&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;spaces&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;interface-over-type-literal&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;label-position&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;max-line-length&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;140&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;member-access&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;member-ordering&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;static-before-instance&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;variables-before-functions&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-arg&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-bitwise&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-console&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;info&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;timeEnd&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;trace&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-construct&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-debugger&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-duplicate-super&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-duplicate-variable&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-empty&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-empty-interface&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-eval&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-inferrable-types&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-misused-new&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-non-null-assertion&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-shadowed-variable&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-string-literal&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-string-throw&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-switch-case-fall-through&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-unnecessary-initializer&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-trailing-whitespace&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-unused-expression&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-use-before-declare&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-var-keyword&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;object-literal-sort-keys&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;one-line&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-open-brace&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-catch&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-else&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-whitespace&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;prefer-const&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;quotemark&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;single&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;radix&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;semicolon&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;always&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;triple-equals&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;allow-null-check&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;typedef-whitespace&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;call-signature&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;nospace&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;index-signature&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;nospace&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;parameter&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;nospace&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;property-declaration&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;nospace&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;variable-declaration&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;nospace&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;typeof-compare&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;unified-signatures&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;variable-name&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;whitespace&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-decl&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-operator&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-separator&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-type&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;directive-selector&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;attribute&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;camelCase&amp;quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;component-selector&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;element&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;kebab-case&amp;quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;use-input-property-decorator&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;use-output-property-decorator&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;use-host-property-decorator&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-input-rename&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-output-rename&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;use-life-cycle-interface&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;use-pipe-transform-interface&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;component-class-suffix&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;directive-class-suffix&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-access-missing-member&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;templates-use-public&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;invoke-injectable&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/model-view-presenter-angular-and-testing/</guid>
            <title>Model View Presenter, Angular, and Testing</title>
            <link>http://davembush.github.com/model-view-presenter-angular-and-testing/</link>
            <category>unit test</category>
            <category>angular</category>
            <category>mvp</category>
            <pubDate>Tue, 29 Aug 2017 06:30:33 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;While testing Components is possible, it is not easy and is often pointless.  Using the Model View Presenter pattern, or a variation of it, solves the problem. &lt;/p&gt;
&lt;p&gt;Here’s the deal. Long time readers of my blog know I’ve been a proponent of Unit Testing for a very long time. While I was learning React, I went through the exercise of trying to write test as I was learning.  Now, the great thing about Angular and React is that it is possible to test your components.  The problem with testing components is that you are either testing that your HTML ended up in the right spot, that Angular directives did what they should, or you are evaluating the DOM to verify that component logic worked.  In most cases, putting tests that do any of these at the component level is the wrong way to test. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/08/2017-08-27.jpg&#34; title=&#34;Model View Presenter, Angular, and Testing&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/tamworthboroughcouncil/15657023428/&#34;&gt;Tamworth Borough Council&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/e21893&#34;&gt;Visualhunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Evaluating-HTML&#34;&gt;&lt;a href=&#34;#Evaluating-HTML&#34; class=&#34;headerlink&#34; title=&#34;Evaluating HTML&#34;&gt;&lt;/a&gt;Evaluating HTML&lt;/h2&gt;&lt;p&gt;Ignoring for a second that setting up a component test is awkward, the question I want to address here is, “is that really an appropriate test?” &lt;/p&gt;
&lt;p&gt;If all your smart component does is pass data down to dumb component, all you really need to verify is that given a dumb component with an html fragment, and another one with another fragment, they will all end up sequentially after each other.  It is a pretty easy test to setup. &lt;/p&gt;
&lt;p&gt;But all you’ve ended up testing is that Angular does what it says it will. It won’t tell you what you can’t already see by running the code. &lt;/p&gt;
&lt;p&gt;Dumb components are even more obvious.  Let’s go for something obvious.  You have a ngFor that allows you to display a list of HTML.  You setup your component so that it has an array of three known items, you pass that into the component, do a change detection cycle, and verify that your HTML displays as expected. &lt;/p&gt;
&lt;p&gt;Great, you’ve verified that Angular works again.  You will have a hard time convincing me that you’ve really tested anything.&lt;/p&gt;
&lt;h2 id=&#34;Angular-Directives&#34;&gt;&lt;a href=&#34;#Angular-Directives&#34; class=&#34;headerlink&#34; title=&#34;Angular Directives&#34;&gt;&lt;/a&gt;Angular Directives&lt;/h2&gt;&lt;p&gt;In this case, you are going to try to verify that when you click on a component, or pass it some data, or… whatever, that Angular does what it should.  Maybe you do need to verify that when you click an element, something else happens.  But this is not the place. &lt;/p&gt;
&lt;p&gt;You might create an integration test, which would, by definition, take longer to run.  It would be better if you tested this using an end to end test.  But testing this as a unit test, doesn’t tell you much more than that Angular has said that it would. &lt;/p&gt;
&lt;p&gt;“But, I need to verify that the code in my event handler does what it should!”  You might complain.  Yes, you do, but you don’t need to fire a click event to do that, just call the event handler.&lt;/p&gt;
&lt;h2 id=&#34;Big-Fat-Hairy-Logic&#34;&gt;&lt;a href=&#34;#Big-Fat-Hairy-Logic&#34; class=&#34;headerlink&#34; title=&#34;Big Fat Hairy Logic&#34;&gt;&lt;/a&gt;Big Fat Hairy Logic&lt;/h2&gt;&lt;p&gt;And then there is that “big fat hairy logic” issue.  You’ve created some sort of component that has some rather complex logic.  OK, that happens.  A grid control is a perfect example.  But, maybe your logic is in the wrong place?&lt;/p&gt;
&lt;h2 id=&#34;A-Better-Solution&#34;&gt;&lt;a href=&#34;#A-Better-Solution&#34; class=&#34;headerlink&#34; title=&#34;A Better Solution&#34;&gt;&lt;/a&gt;A Better Solution&lt;/h2&gt;&lt;p&gt;There is a design pattern called “Model View Presenter” Like all of the MV* patterns it aims to separate out logic from the view so that we can test things easier.  It was popular with WebForms in ASP.NET when that was how you wrote ASP.NET web sites.  The way this worked was that you would create an Interface for your WebForm that represented all of the things you wanted to have access to from your logic code.  Your presenter.  All your component or page code did was respond to events on the page and expose data to the data driven forms.  In a lot of ways, Angular isn’t much different from WebForms.  Your TypeScript file is essentially a “code-behind” file and your template is similar to an ASPX page. &lt;/p&gt;
&lt;p&gt;The beauty of the MVP pattern is that when you do it right, your component has no logic at all.  It renders data and responds to events by calling down to the presenter.  In an Angular world, I doubt the Presenter would ever need to call up to the view.  This is prefect.  Now I can create a test for my component logic in a way very similar to how I would test any other Injectable.  Because Injectables are what we are going to use here.&lt;/p&gt;
&lt;h3 id=&#34;Injectable-Presenters&#34;&gt;&lt;a href=&#34;#Injectable-Presenters&#34; class=&#34;headerlink&#34; title=&#34;Injectable Presenters&#34;&gt;&lt;/a&gt;Injectable Presenters&lt;/h3&gt;&lt;p&gt;For the point of illustration, let’s assume that all components would follow this pattern.  Now a simple component would have four files instead of the normal three.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;*.component.ts&lt;/li&gt;
&lt;li&gt;*.component.html&lt;/li&gt;
&lt;li&gt;*.component.css&lt;/li&gt;
&lt;li&gt;*.component.presenter.ts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;*.component.presenter.ts&lt;/code&gt; file is our new Injectable.  Any properties in our component would pass on down to the presenter.  Any methods, which should be few to none, would pass on down to the presenter.  The presenter is where we do all the work.&lt;/p&gt;
&lt;h3 id=&#34;Make-the-Presenter-Available-to-the-Component&#34;&gt;&lt;a href=&#34;#Make-the-Presenter-Available-to-the-Component&#34; class=&#34;headerlink&#34; title=&#34;Make the Presenter Available to the Component&#34;&gt;&lt;/a&gt;Make the Presenter Available to the Component&lt;/h3&gt;&lt;p&gt;Now, if you’ve studied the Angular tutorials, you probably already know this, but my bet is most people programming the new Angular don’t.  You can make an Injectable available by providing it in a module, or by providing it in a component.  If you provide it in the module, it is globally available.  If you provide it in the component, it is only available to that component or its child components.  This is perfect for our use case here.  So, we provide it in our component and then inject it into our component’s constructor. &lt;/p&gt;
&lt;p&gt;Everything else we might have injected into our component can now be injected into our presenter.&lt;/p&gt;
&lt;h2 id=&#34;Look-Ma-No-DOM&#34;&gt;&lt;a href=&#34;#Look-Ma-No-DOM&#34; class=&#34;headerlink&#34; title=&#34;Look Ma, No DOM&#34;&gt;&lt;/a&gt;Look Ma, No DOM&lt;/h2&gt;&lt;p&gt;The side effect of this pattern is now, the complexity of the methods in our component should be 1.  This means they don’t really need to be tested.  And because they don’t need to be tested, we don’t really need a DOM available to run our tests.  This makes it MUCH easier to use jsDOM to run our unit test without having to wire in a bunch of polyfills just to make it all “work.”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-observable-secrets-revealed/</guid>
            <title>Angular Observable Secrets Revealed</title>
            <link>http://davembush.github.com/angular-observable-secrets-revealed/</link>
            <category>angular</category>
            <category>observables</category>
            <category>RxJS</category>
            <pubDate>Tue, 08 Aug 2017 06:30:11 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;If you’ve been programming JavaScript based applications for any length of time, you’ve probably already made the progression from callback hell to promises, but just to recap.  Whenever we make any kind of asynchronous call in JavaScript, we need to provide a callback function to the call so that, when the call completes, the function can be called with any resulting data.  Function calls you may typically make that need this kind of feature are &lt;code&gt;setTimeout()&lt;/code&gt;, &lt;code&gt;setInterval(),&lt;/code&gt; and AJAX calls using the various libraries that support this. &lt;/p&gt;
&lt;p&gt;The problem with using callbacks is that you can end up with “Callback Hell” where you have callbacks inside of other callbacks.  Our code becomes messy and difficult to reason about. &lt;/p&gt;
&lt;p&gt;To try to flatten this situation out, promises were created.  Instead of creating a callback function and passing it into the asynchronous function, the asynchronous function returns a promise that has a function we can pass our function into.  This function can return yet another promise.  The result is that instead of having nested callbacks, all of our callbacks live at the same level. &lt;/p&gt;
&lt;p&gt;However, in the process, we lost the ability to cancel an asynchronous function using callbacks.  Most of the time, this was not a huge concern, but in the case of AJAX calls, we did end up making more request than we really needed to.  Most people never even recognized this as an issue.  But if you go and take a look at some of your older code, you will see that you have several places where the code would work more efficiently if you were able to cancel a call that was being superseded by a new call. &lt;/p&gt;
&lt;p&gt;Meanwhile, some additional functions were added to JavaScript Arrays.  Maybe you’ve seen some of them?  map(), reduce(), and filter() are three of the more common functions. &lt;/p&gt;
&lt;p&gt;What?  You haven’t seen these?  If you have and you know how they work, you can skip this next section.  But, if you haven’t, pay careful attention because this next section is critical to understanding how Observables work. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/08/2017-08-08.jpg&#34; title=&#34;Angular Observable Secrets Revealed&#34;&gt; Photo via &lt;a href=&#34;//visualhunt.com/re/4ba464&#34;&gt;VisualHunt.com&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Array-Functions&#34;&gt;&lt;a href=&#34;#Array-Functions&#34; class=&#34;headerlink&#34; title=&#34;Array Functions&#34;&gt;&lt;/a&gt;Array Functions&lt;/h2&gt;&lt;h3 id=&#34;map&#34;&gt;&lt;a href=&#34;#map&#34; class=&#34;headerlink&#34; title=&#34;map()&#34;&gt;&lt;/a&gt;map()&lt;/h3&gt;&lt;p&gt;Let’s say you have a list of objects that you need to transform into another form.  In the example below, we want to transform our list of objects into a list that can be used in a dropdown list using fullName for the display and id for the value. &lt;/p&gt;
&lt;p&gt;Without using &lt;code&gt;map()&lt;/code&gt;, your code might look something like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newArray = []; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; someList.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; item = someList[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   newArray.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;fullName&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;firstName&lt;/span&gt; + ‘ ‘ +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The thing is, we do most of the code from &lt;code&gt;newArray = []&lt;/code&gt; on down over and over again.  It is only the code in the &lt;code&gt;push()&lt;/code&gt; that changes. &lt;/p&gt;
&lt;p&gt;What if we were to make the code into a function?  That’s what &lt;code&gt;map()&lt;/code&gt; does.  It takes a function as a parameter that takes an item as a parameter.  Inside the function, we use that item to specify how we want to transform the item and the whole map() function returns the new array. &lt;/p&gt;
&lt;p&gt;The code above, turns into this.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newArray = someList.&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;attr&#34;&gt;fullName&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;firstName&lt;/span&gt; + ‘ ‘ +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;filter&#34;&gt;&lt;a href=&#34;#filter&#34; class=&#34;headerlink&#34; title=&#34;filter()&#34;&gt;&lt;/a&gt;filter()&lt;/h3&gt;&lt;p&gt;Now, let’s say that for some reason, you only want to include items in the new array that include a last name that starts with ‘B’. Our old style code would look something like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newArray = []; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; someList.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; item = someList[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;startsWith&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;‘B’&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       newArray.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And once again, this is code we tend to write quite a bit.  So, what if we had a function that did this for us? &lt;/p&gt;
&lt;p&gt;This is exactly what the &lt;code&gt;filter()&lt;/code&gt; function is for.  So, rewriting the code above using &lt;code&gt;filter()&lt;/code&gt; would look like this.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;newArray = someList.&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;startsWith&lt;/span&gt;(‘B’);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Chaining&#34;&gt;&lt;a href=&#34;#Chaining&#34; class=&#34;headerlink&#34; title=&#34;Chaining&#34;&gt;&lt;/a&gt;Chaining&lt;/h3&gt;&lt;p&gt;Once again, you can see that we passed in a function that takes the current item as a parameter.  The function returns true or false.  If it returns true, the item gets included in the new array. &lt;/p&gt;
&lt;p&gt;What if we want to filter AND transform the data? &lt;/p&gt;
&lt;p&gt;The temptation for programmers new to this model is to use the map and push the item into an array that was declared outside of the map. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newArray = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;someList.&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;startsWith&lt;/span&gt;(‘B’)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       newArray.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;fullName&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;firstName&lt;/span&gt; + ‘ ‘ +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But that really isn’t all that much better than if we were just using a for&amp;#x2F;next loop like we’ve been doing.  Old habits die hard. &lt;/p&gt;
&lt;p&gt;Instead, we can take advantage of function chaining. What this allows us to do is to filter and then map. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;newArray = someList.&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;startsWith&lt;/span&gt;(‘B’);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;.&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;attr&#34;&gt;fullName&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;firstName&lt;/span&gt; + ‘ ‘ +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;So much cleaner.&lt;/p&gt;
&lt;h3 id=&#34;reduce&#34;&gt;&lt;a href=&#34;#reduce&#34; class=&#34;headerlink&#34; title=&#34;reduce()&#34;&gt;&lt;/a&gt;reduce()&lt;/h3&gt;&lt;p&gt;The final useful function we have available to us for dealing with common array loops is reduce().  reduce() allows to loop through an array and accumulate the items in an array into another array, an object, or a value. &lt;/p&gt;
&lt;p&gt;The reduce() function take two parameters.  The first parameter is a function.  The second parameter is the starting value for the accumulator. &lt;/p&gt;
&lt;p&gt;The function that we pass in takes three parameters.  The current value of the accumulator, the current item, and the current item index.  Most people only use the first two parameters in their function.  The function returns the new accumulator value that then gets passed into the next call to the function. &lt;/p&gt;
&lt;p&gt;So, a really simple example would be, given an array of numbers, add them all up. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; numbers = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; total = numbers.&lt;span class=&#34;title function_&#34;&gt;reduce&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;sum, item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; sum + item;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I’ve also used this to turn an array of name&amp;#x2F;value pairs into an object where the properties are the name and the values are the values that were paired with the names.&lt;/p&gt;
&lt;h2 id=&#34;Events-as-Arrays&#34;&gt;&lt;a href=&#34;#Events-as-Arrays&#34; class=&#34;headerlink&#34; title=&#34;Events as Arrays&#34;&gt;&lt;/a&gt;Events as Arrays&lt;/h2&gt;&lt;p&gt;Now, imagine that events that fire are part of one long continuous array.  An array that never ends. If this were true listening to events would be as familiar as processing an array. &lt;/p&gt;
&lt;p&gt;This is all an observable is.  It treats everything as though it were an array, adds several other functions that give us even greater functionality, and several functions that allow us to deal with the fact that events are not only sequential, but also time based. &lt;/p&gt;
&lt;p&gt;And because events aren’t really arrays, we call this series of items a “stream.”  So, when you read about “streams” while working with Observables think, “list of items.”&lt;/p&gt;
&lt;h3 id=&#34;Button-Click&#34;&gt;&lt;a href=&#34;#Button-Click&#34; class=&#34;headerlink&#34; title=&#34;Button Click&#34;&gt;&lt;/a&gt;Button Click&lt;/h3&gt;&lt;p&gt;For example, let’s say you have a button on your screen and you want to know when it is pressed.  Let’s say your button is represented by a member variable name “myButton”.  In your code, you would listen to a button click by writing code that looks something like: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fromEvent&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;myButton&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;/* do something in response to the click here */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You will notice that we used the &lt;code&gt;subscribe()&lt;/code&gt; function instead of &lt;code&gt;map()&lt;/code&gt;.  We still have a &lt;code&gt;map()&lt;/code&gt; function.  But, &lt;code&gt;subscribe()&lt;/code&gt; is how we tell the application, “we want to start listening to the stream now.”  Otherwise, &lt;code&gt;subscribe()&lt;/code&gt; works just like map() does. &lt;/p&gt;
&lt;p&gt;Yes, I know what you’re thinking.  “How is that better than just having the template call an event handler?” &lt;/p&gt;
&lt;p&gt;Well, the fact of the matter is, it really isn’t all that much better.  But, here is where it does make more sense.&lt;/p&gt;
&lt;h3 id=&#34;Debouncing-Keystrokes&#34;&gt;&lt;a href=&#34;#Debouncing-Keystrokes&#34; class=&#34;headerlink&#34; title=&#34;Debouncing Keystrokes&#34;&gt;&lt;/a&gt;Debouncing Keystrokes&lt;/h3&gt;&lt;p&gt;If you’ve been writing application in JavaScript for a while, I’m sure you’ve written classic debounce handlers.  You know.  Don’t actually fire this event until you are no longer receiving change events from the input field. &lt;/p&gt;
&lt;p&gt;I won’t write out the old code here.  It is relatively long, hard to follow, and therefore somewhat complicated. &lt;/p&gt;
&lt;p&gt;But here is how we handle it using Observables. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fromEvent&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;myInput&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;change&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;debounceTime&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;250&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;/* do something in response to the input field change here */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;debounceTime(250)&lt;/code&gt; tells the Observable to wait for 250 milliseconds to see if there is some other event that comes in and use that event instead.  That is much easier than the old way.&lt;/p&gt;
&lt;h3 id=&#34;AJAX&#34;&gt;&lt;a href=&#34;#AJAX&#34; class=&#34;headerlink&#34; title=&#34;AJAX&#34;&gt;&lt;/a&gt;AJAX&lt;/h3&gt;&lt;p&gt;While you could handle button clicks and debounce logic using old school JavaScript tricks, in Angular, it is practically impossible to make an AJAX call without using Observables.  This is because the &lt;code&gt;Http&lt;/code&gt; service and the &lt;code&gt;HttpClient&lt;/code&gt; that was introduced in Angular 4.3 use Observables instead of callbacks or promises to manage dealing with the data that eventually is returned from the AJAX call. &lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;Http&lt;/code&gt; and &lt;code&gt;HttpClient&lt;/code&gt; are similar, we will continue our discussion of handling AJAX calls using &lt;code&gt;HttpClient&lt;/code&gt;.  The main advantage to using &lt;code&gt;HttpClient&lt;/code&gt; is that it handles parsing the response into a JavaScript object we can use.  &lt;code&gt;Http&lt;/code&gt; just returns the raw Response object and parsing it out is up to us. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;HttpClient&lt;/code&gt;, on the other hand, returns the object we would have parsed out with &lt;code&gt;Http&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;NOw, assuming you’ve injected HttpClient into the class that is going to use it, a typical get might looks something like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;httpClient&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;TypeInfo&lt;/span&gt;&amp;gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/api/get-data&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: TypeInfo&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the data */&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;So, walking through this, you may notice that some things look very similar to Promises and then, there are some other things that aren’t so much.  But trust me this gets much better.  We are just starting out small. &lt;/p&gt;
&lt;p&gt;First, what is that &lt;code&gt;TypeInfo&lt;/code&gt; thing? &lt;/p&gt;
&lt;p&gt;You see, our get call is what is normally referred to as a “templated method.”  In simple terms, get doesn’t know what type it returns until you tell it.  So, we are telling it that it returns a &lt;code&gt;TypeInfo&lt;/code&gt; type.  &lt;code&gt;TypeInfo&lt;/code&gt; is just a name I made up.  You would create an interface that is relevant to the type of information that your AJAX code is returning. &lt;/p&gt;
&lt;p&gt;Other than that, we subscribe to the observable that get() returns and process the data. &lt;/p&gt;
&lt;p&gt;Noq, what if our get call fails? &lt;/p&gt;
&lt;p&gt;Oh! We have methods for that. &lt;/p&gt;
&lt;p&gt;First, we can trap failures with a &lt;code&gt;catch()&lt;/code&gt; call. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;httpClient&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;TypeInfo&lt;/span&gt;&amp;gt;(‘/api/get-data’)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;err&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;Error&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the error */&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: TypeInfo&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the data */&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next, maybe you want to &lt;code&gt;retry&lt;/code&gt; the failed call before you give up. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;httpClient&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;TypeInfo&lt;/span&gt;&amp;gt;(‘/api/get-data’)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;retry&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;err&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;Error&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the error */&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: TypeInfo&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the data */&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And because we have a &lt;code&gt;catch()&lt;/code&gt;, with must have a &lt;code&gt;finally&lt;/code&gt; too, right? &lt;/p&gt;
&lt;p&gt;Try doing all of that with a Promise or a Callback. &lt;/p&gt;
&lt;p&gt;Oh, and did I mention you can cancel AJAX calls using Observables?  Yep.  It’s true.  In fact, my experience has been that if you make the same call from the same service two times in a row, it will cancel the first call before it makes the second.  Pretty cool. &lt;/p&gt;
&lt;p&gt;The final thing that tends to trip people up who are learning about Observables is that nothing in the observable chain executes until you subscribe to the observable and an event happens. &lt;/p&gt;
&lt;p&gt;Once you start getting comfortable with all of the methods you have available to you, you’ll begin to see the power of using Observables over using Promises or Callbacks, even if there are similarities.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/how-to-implement-angular-routing/</guid>
            <title>How to Implement Angular Routing</title>
            <link>http://davembush.github.com/how-to-implement-angular-routing/</link>
            <category>angular</category>
            <category>routing</category>
            <pubDate>Tue, 18 Jul 2017 06:30:23 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;In the old world where all of our pages were on the server and every change on the client side required a full round trip to the server, each page was a unique URL on the server.  In the SPA world, we only load one “Page” from the server and the client takes care of making it look like we have moved from one page to another. &lt;/p&gt;
&lt;p&gt;When done well, we can create pages that reuse existing content on the screen causing a minimal screen refresh while still allowing the user to link to a specific “Page” in our application. &lt;/p&gt;
&lt;p&gt;These “Pages” are called “Routes”  As in, here is the route to some code I want to execute. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/07/2017-07-18.png&#34; title=&#34;How to Implement Angular 2+ Routing&#34;&gt; Photo via &lt;a href=&#34;//visualhunt.com/re/9589c4&#34;&gt;Visual Hunt&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;  Sounds pretty cool.  But there is a down side that shows up every time someone tries to do this for the first time.  You won’t see this problem until the first time you try to deploy your code because the development server handles this issue for you. 

&lt;p&gt;The problem is this.  When a server receives a request from the browser, it tries to find that file on the server.  If it doesn’t exist, the server returns a 404 error.  File not found. &lt;/p&gt;
&lt;p&gt;Most servers provide ways of circumventing this issue by providing rules.  Essentially, you write a server rule that says, “If the browser ask for a file that doesn’t exist, send them back index.html instead.”  You may need to provide exceptions or otherwise refine the rule if your server is also rerouting other traffic. If you are running on an IIS server, &lt;a href=&#34;/asp-net-angular-js-html5mode/&#34;&gt;I wrote instructions for how to take care of this issue&lt;/a&gt; for AngularJS (1.x).  The instructions work for any client side framework that implements routing. &lt;/p&gt;
&lt;p&gt;Assuming you have that end of things working correctly, here are the steps to get basic routing working in your Angular application.&lt;/p&gt;
&lt;h2 id=&#34;Define-Your-Routes&#34;&gt;&lt;a href=&#34;#Define-Your-Routes&#34; class=&#34;headerlink&#34; title=&#34;Define Your Routes&#34;&gt;&lt;/a&gt;Define Your Routes&lt;/h2&gt;&lt;p&gt;While we could easily define our routes in app.module.ts, the code we write will be much easier to maintain if we create a separate module file named app-routes.module.ts.  So to start, create an app-routes.module.ts file right next to your app.module.ts file.  You can do this with the Angular CLI by typing the following in the command line from within the src&amp;#x2F;app directory: &lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ng g module app-routes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;When you create a module with the Angular CLI, it will put it in a sub-directory.  In this case, it created an app-routes sub-directory.  We want it next to our app.module.ts file.  So, now we need to move the module up a directory and remove the app-routes directory. &lt;/p&gt;
&lt;p&gt;Open up the file, it has some stuff in it that we don’t need.  Remove the CommonModule references and the declarations section of the @NgModule decorator. &lt;/p&gt;
&lt;p&gt;In this new file, you will create an empty Routes array, called routes and decorate the class with @NgModule &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You need to also import Routes and while you are doing that, you might as well import RouterModule because you are going to need that soon too. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; ‘&lt;span class=&#34;meta&#34;&gt;@anguler&lt;/span&gt;/router’; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next, in your app.modules.ts file, import AppRoutesModule using both the TypeScript import and as part of the imports section of the @NgModule decorator.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; ‘./app-routes.&lt;span class=&#34;property&#34;&gt;module&lt;/span&gt;’;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  …,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  …,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We really haven’t done anything useful yet, we’ve just setup some boilerplate code that will compile so we won’t have to think about it any more. &lt;/p&gt;
&lt;p&gt;Now, back to the app-routes.module.ts file. &lt;/p&gt;
&lt;p&gt;Each element in our Routes array defines a specific route in our system relative to the parent route it is a part of.  At the top level the parent route would be the root of the application. &lt;/p&gt;
&lt;p&gt;Here are the properties that are available to us:&lt;/p&gt;
&lt;h3 id=&#34;path&#34;&gt;&lt;a href=&#34;#path&#34; class=&#34;headerlink&#34; title=&#34;path&#34;&gt;&lt;/a&gt;path&lt;/h3&gt;&lt;p&gt;The path property allows us to specify what path, or URL, will load this route.  If you want the component to load for any path, use ‘&lt;strong&gt;’ as the value.  If you want the component to load for the root element, use ‘’ for the path and specify pathMatch: ‘full’ as another property.  You can also use the value ‘&lt;/strong&gt;’ to mean, “match anything.”  We typically use ** to match what would typically be thought of as 404 errors.  For this to work correctly, it should be the last element in your top most route definition.&lt;/p&gt;
&lt;h3 id=&#34;pathMatch&#34;&gt;&lt;a href=&#34;#pathMatch&#34; class=&#34;headerlink&#34; title=&#34;pathMatch&#34;&gt;&lt;/a&gt;pathMatch&lt;/h3&gt;&lt;p&gt;As we’ve already mentioned, pathMatch should be ‘full’ to match ‘’ as the exact path.  But you can also give this value ‘prefix’ to tell it to match any path that starts with the value.  You only need to specify this value if you want to use ‘full’. &lt;/p&gt;
&lt;p&gt;It should also be noted that this value only evaluates the part of the path you are in.  If you use this in a child path, it won’t match the whole path, but only the part that is in the child.&lt;/p&gt;
&lt;h3 id=&#34;component&#34;&gt;&lt;a href=&#34;#component&#34; class=&#34;headerlink&#34; title=&#34;component&#34;&gt;&lt;/a&gt;component&lt;/h3&gt;&lt;p&gt;Component specifies what component should get loaded when the path is matched.&lt;/p&gt;
&lt;h3 id=&#34;children&#34;&gt;&lt;a href=&#34;#children&#34; class=&#34;headerlink&#34; title=&#34;children&#34;&gt;&lt;/a&gt;children&lt;/h3&gt;&lt;p&gt;The children property allows us to specify an array of child paths.&lt;/p&gt;
&lt;h2 id=&#34;Route-Components&#34;&gt;&lt;a href=&#34;#Route-Components&#34; class=&#34;headerlink&#34; title=&#34;Route Components&#34;&gt;&lt;/a&gt;Route Components&lt;/h2&gt;&lt;p&gt;Since our routes will need components, let’s start by creating several components so that we can illustrate routing. &lt;/p&gt;
&lt;p&gt;But first, a short word about how we organize our code. &lt;/p&gt;
&lt;p&gt;In many demos online, the tendency is to put all of our components right under the app directory.  But, in larger applications, I’ve found that it makes a lot more sense to create a route directory under the app directory that we place each of our routes in. &lt;/p&gt;
&lt;p&gt;Now, you might think that we would want to place our child routes as child directories under the routes they are a part of, but the problem with this is that we often have child components in our routes.  How do we know which directory represents a child route and which represents a child component? &lt;/p&gt;
&lt;p&gt;No.  &lt;/p&gt;
&lt;p&gt;What we really want to do is place even the components that represent child routes right under our routes directory.  So, say we have a Page1 route and there is a SubPage route that is a child of Page1.  To make it clear, we put SubPage in a directory named page1.sub-page. &lt;/p&gt;
&lt;p&gt;As for components that are common to multiple pages, we place those in a components directory which is right under the app directory.  This keeps our directories well organized and the code neatly organized as well. &lt;/p&gt;
&lt;p&gt;The next obvious thing that we need to do is that we need to create a routes directory.  Do that now. &lt;/p&gt;
&lt;p&gt;Now, at the command line, inside the new routes directory, execute the following Angular CLI commands &lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ng g component page1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page1-subpage&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;As you executed each command, it should have created a directory for each component with the corresponding css, html, ts and spec files.  Then it updated the app.module.ts file for you so that the components are available for use in the system. &lt;/p&gt;
&lt;p&gt;You may also notice that we created the component as page1-subpage instead of page1.subpage.  The reason for this is that the CLI doesn’t like period separation of file names.  Now, the next thing we are going to do is change the directory name to page1.subpage.  You will also need to change the TypeScript import line that references this directory in your app.module.ts file. &lt;/p&gt;
&lt;p&gt;Now that we have components to page to, let’s create our route definitions.  Back to the Routes array in our app-routes.module.ts file. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: ‘page1’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;children&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: ‘’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: ‘full’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Page1Component&lt;/span&gt;’ &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: ‘subpage’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page1SubpageComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;]&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: ‘page2’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page2Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The first definition may look a bit odd.  We are setting up a route to page1, but the route is the children.  Then in the children we define a route to ‘’.  This is where the Page1Component is specified as the component we want to load. &lt;/p&gt;
&lt;p&gt;You will also note that we specified &lt;code&gt;pathMatch: &amp;#39;full&amp;#39;&lt;/code&gt; for the Page1Component.  This is because we only want this component to be loaded when the child path is empty. &lt;/p&gt;
&lt;p&gt;Using this definition, everything loads into the top level router-outlet.  If we placed Page1Component at the same level as we defined the page1 path, then Angular would expect to have a router-outlet in Page1Component where Pag1SubpageComponent would be loaded. &lt;/p&gt;
&lt;p&gt;Needless to say, you need to be careful how you define your routes. &lt;/p&gt;
&lt;p&gt;Next, you will need to import the three components using the TypeScript import statement. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Page1Component&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1/page1.component&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Page2Component&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page2/page2.component&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Page1SubpageComponent&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1.subpage/page1-subpage.component&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now that everything is defined, we just need to tell Angular where we want these components to show up.  For right now, open the app.component.html file and remove everything that is there and add the router-outlet component. &lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;router-outlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;router-outlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, &lt;code&gt;router-outlet&lt;/code&gt; is a component that is defined in the RouterModule, so we need to import that in the imports section of our AppRoutesModule.  But we don’t just import the RouterModule, we use RouterModule.forRoot() and pass in the route array we just defined into forRoot(). &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;(routes)],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;exports&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There is one final tweak that we need to make to our route definition.  Right now, if you go to the root of the application, there isn’t a component defined for it.  To fix this, we are going to add the following definition at the top of  our routes: &lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  path&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &amp;#x27;&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  redirectTo&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &amp;#x27;page1&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  pathMatch&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &amp;#x27;full&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You need &lt;code&gt;pathMatch: &amp;#39;full&amp;#39;&lt;/code&gt; to tell the router to only match this rule when the path is ‘’ exactly, just like we did with the Page1Component in the children list.  Otherwise, it will match everything. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;redirectTo: &amp;#39;page1&amp;#39;&lt;/code&gt; part tells it to redirect to the page1 path when this rule is true.&lt;/p&gt;
&lt;h2 id=&#34;Lazy-Loading&#34;&gt;&lt;a href=&#34;#Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;Lazy Loading&#34;&gt;&lt;/a&gt;Lazy Loading&lt;/h2&gt;&lt;p&gt;I realize that I still need to show you how to navigate to routes in your application, but first let’s look at lazy loading the routes. &lt;/p&gt;
&lt;p&gt;In the past, when building a Single Page Application, the custom was to load all of the JavaScript code we needed for the page up front.  But, if you have multiple pages in your application, some of those may never be needed by your user.  So, what are we doing loading stuff that will never get used? &lt;/p&gt;
&lt;p&gt;No, it is better to load only what we need when we need it.  While it might take longer if you totaled up each load, the user perceives the experience as faster.  Therefore what we want to do is to make each of our pages load as we need them. &lt;/p&gt;
&lt;p&gt;To do this, we need to create a module for each of the components that represent our top level routes.  We want to import modules and services into the module that is closest to where we need them.  This is why.  By only importing things where we need them, Angular can create the smallest package necessary all up and down the dependency tree. &lt;/p&gt;
&lt;p&gt;To make things easy and to do them the way you would have done them if you had done it this way to begin with, let’s delete all of the sub-directories under routes.  It’s OK.  We aren’t losing any work that we can’t quickly get back.  We haven’t added any code to these routes yet. &lt;/p&gt;
&lt;p&gt;At the command line, navigate to the routes directory and then type in the following Angular-CLI commands:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ng g module page1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g module page1-subpage&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page1-subpage&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g module page2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then, just like we did the first time, rename the page1-subpage directory to page1.subpage. &lt;/p&gt;
&lt;p&gt;Now, go to the app.modules.ts file and remove the references to the Page1, Page2, and Page1Subpage components anywhere you see them. &lt;/p&gt;
&lt;p&gt;Do the same thing in the app-routes.module.ts file. &lt;/p&gt;
&lt;p&gt;Now, the way we define our routes changes slightly.  We will still need the redirect route, but everything else changes. &lt;/p&gt;
&lt;p&gt;The key to making this work is the property &lt;code&gt;loadChildren&lt;/code&gt;, which is a string in the format of: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;pathToModule#ModuleClassName&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We’ll work from the top down.  Change the routes array in app-routes.module.ts to look like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;redirectTo&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;full&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1/page1.module#Page1Module&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page2&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page2/page2.module#Page2Module&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;When we try to access something from page1, it will load the Page1Module and try to resolve it from there.  When we try to access something from page2, it will load the Page2Module.  Both of these happen during run time. &lt;/p&gt;
&lt;p&gt;Next, go to page1.module.ts and, import RouterModule and add the following to the imports section of @NgModule.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forChild&lt;/span&gt;([&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;full&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page1Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;subpage&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: ‘../page1.&lt;span class=&#34;property&#34;&gt;subpage&lt;/span&gt;/page1-subpage.&lt;span class=&#34;property&#34;&gt;module&lt;/span&gt;#&lt;span class=&#34;title class_&#34;&gt;Page1SubpageModule&lt;/span&gt;’&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next move over to page2 and do something similar.  Since page2 doesn’t have a sub-route, you only need, one route. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forChild&lt;/span&gt;([&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;full&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page2Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And again, similarly for page1-subpage. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forChild&lt;/span&gt;([&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;full&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page1SubpageComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you haven’t already, move your command-line prompt back to the root of the project and type&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;To start the server and compile your code.  If everything compiles, you should see 3 chunk files along with the other files we saw when we compiled the code without lazy loading. One each for each of the routes. &lt;/p&gt;
&lt;p&gt;Run the app in your browser now to make sure it works correctly. &lt;/p&gt;
&lt;p&gt;See how easy that was?  It isn’t really that much harder than specifying the routes like we did the first time, but we get huge benefits in performance.&lt;/p&gt;
&lt;h2 id=&#34;Passing-Parameters&#34;&gt;&lt;a href=&#34;#Passing-Parameters&#34; class=&#34;headerlink&#34; title=&#34;Passing Parameters&#34;&gt;&lt;/a&gt;Passing Parameters&lt;/h2&gt;&lt;p&gt;The last thing you need to know about is how to pass parameters.  You would normally do this when you are coming from an existing list of items.  Each item has some sort of unique identifier.  We click some link and that takes us to another page to show details or to edit the content.  For our purposes here, it doesn’t matter. &lt;/p&gt;
&lt;p&gt;To specify that a route takes a parameter, use colon notation: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;detail/:id&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Angular knows it is a parameter when you use a URL to get to it because of the location.&lt;/p&gt;
&lt;h2 id=&#34;Retrieving-Parameters&#34;&gt;&lt;a href=&#34;#Retrieving-Parameters&#34; class=&#34;headerlink&#34; title=&#34;Retrieving Parameters&#34;&gt;&lt;/a&gt;Retrieving Parameters&lt;/h2&gt;&lt;p&gt;Let’s say you have a component that represents a route with a parameter.  For that to be useful, you’ll need to pull the parameter out of the route information. &lt;/p&gt;
&lt;p&gt;To do this, you’ll need to inject &lt;code&gt;ActivatedRoute&lt;/code&gt; into the component.  Then when you need the parameter(s) you can use: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;route.&lt;span class=&#34;property&#34;&gt;params&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;params&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Use params[&amp;#x27;id&amp;#x27;], where ‘id’ is the name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// we gave the parameter in the path.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Route-Navigation&#34;&gt;&lt;a href=&#34;#Route-Navigation&#34; class=&#34;headerlink&#34; title=&#34;Route Navigation&#34;&gt;&lt;/a&gt;Route Navigation&lt;/h2&gt;&lt;p&gt;Now that we have routes in place, we need to discuss how to navigate from one route to another.  The temptation, having just used URLs to go from one to the other, would be to use hyperlinks and put the information in the href attribute. &lt;/p&gt;
&lt;p&gt;No doubt, you could probably get that to work, but the main problem with using that method is that there is no safeguards to make sure that the URL you use to navigate when you are developing will work when you move the site to another environment. &lt;/p&gt;
&lt;p&gt;The reason for this is that we have to set the base href for the site.  During development this is normally ‘&amp;#x2F;’.  But when you go to production, it could be some sub directory. &lt;/p&gt;
&lt;p&gt;Also, because of this base href, every page&amp;#x2F;route we land on is still relative to that base.  This means that every route we want to navigate to would have to be hard wired to the base of the site, and again, that’s assuming that the site will always be in the same relative location when it is deployed. &lt;/p&gt;
&lt;p&gt;Now, if we can’t using a regular URL to navigate, what do we use instead?&lt;/p&gt;
&lt;h3 id=&#34;routerLink&#34;&gt;&lt;a href=&#34;#routerLink&#34; class=&#34;headerlink&#34; title=&#34;routerLink&#34;&gt;&lt;/a&gt;routerLink&lt;/h3&gt;&lt;p&gt;You use the routeLink directive added to your anchor tag.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;routerLink&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;[&amp;#x27;/page1&amp;#x27;]&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;go here&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This may look a little different from what you expected, so let’s break this down. &lt;/p&gt;
&lt;p&gt;The routerLink directive takes an array.  Since we can’t pass an array as a string, the only way we can pass it is by evaluating it at run time.  Remember, the square bracket syntax is an indication to the Angular compiler that what we are assigning is something that should be evaluated.  Typically this would be pointing to a function or variable in our TypeScript code.  In this case, we are pointing to a literal array.  Everything between the opening and closing quotes is JavaScript. &lt;/p&gt;
&lt;p&gt;As for the actual parameter, the string in the single element array works much like you would use a URL.  The forward slash says to start at the root of the web application (instead of the root of the domain like a URL would.)  And the page1 is the route we’ve already defined.  If you leave the forward slash off, it is relative to the current route. &lt;/p&gt;
&lt;p&gt;But what about passing parameters? &lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;routerLink&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;[&amp;#x27;/page1&amp;#x27;, someVariable]&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;go here&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Each comma delimited value represents a segment of your route.&lt;/p&gt;
&lt;h3 id=&#34;Router-navigate&#34;&gt;&lt;a href=&#34;#Router-navigate&#34; class=&#34;headerlink&#34; title=&#34;Router.navigate()&#34;&gt;&lt;/a&gt;Router.navigate()&lt;/h3&gt;&lt;p&gt;The other way you might want to cause navigation to a page to occur is by using the navigate() method hanging off the Router class.  Using dependency injection, you inject the Router into the class that needs to use it and then use that instance to call navigate().  The parameter you pass in looks very similar to what you used for routerLink. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;router.&lt;span class=&#34;title function_&#34;&gt;navigate&lt;/span&gt;(‘/page1’,someVariable);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Yes, both routerLink and Router.navigate() both support URL like references using ‘.&amp;#x2F;path’ or ‘..&amp;#x2F;path’.&lt;/p&gt;
&lt;h2 id=&#34;Where-Am-I-Now&#34;&gt;&lt;a href=&#34;#Where-Am-I-Now&#34; class=&#34;headerlink&#34; title=&#34;Where Am I Now?&#34;&gt;&lt;/a&gt;Where Am I Now?&lt;/h2&gt;&lt;p&gt;The last part of routing you will commonly need to know about is detecting what the current route is.  Once again this will require you to inject the Router object into the component that needs the information.  Once you have the router object, you can use code like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;router.&lt;span class=&#34;property&#34;&gt;routerState&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;snapshot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This will get the current route url.  I normally grap this as part of listening for the router’s NavigationEnd. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;router&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;events&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;arg&lt;/span&gt; =&amp;gt;&lt;/span&gt; arg &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NavigationEnd&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;arg&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;selectedTab&lt;/span&gt; = router.&lt;span class=&#34;property&#34;&gt;routerState&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;snapshot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;selectedTab&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Guards&#34;&gt;&lt;a href=&#34;#Guards&#34; class=&#34;headerlink&#34; title=&#34;Guards&#34;&gt;&lt;/a&gt;Guards&lt;/h2&gt;&lt;p&gt;Guards control access to our routes.  What happens if you have a route that only certain people should have access to.  Like an admin page.  Sure, you could leave the link off so no one can click the link to get to the page, but that doesn’t prevent someone from pasting the link to the forbidden page into the address bar of the browser and getting there anyhow. &lt;/p&gt;
&lt;p&gt;In Angular, we have four kinds of guards and two ways of creating them. &lt;/p&gt;
&lt;p&gt;The four types of guards are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CanActivate&lt;/li&gt;
&lt;li&gt;CanActivateChild&lt;/li&gt;
&lt;li&gt;CanDeactivate&lt;/li&gt;
&lt;li&gt;CanLoad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you follow my advice and always lazy load your routes, than the two you will most often use are CanLoad and CanDeactivate.  CanLoad provides rules for lazy loading a module.  CanDeactive provides rules for leaving a route. &lt;/p&gt;
&lt;p&gt;If you decide to bundle routes together, then you may also need CanActivate and CanActivateChild.  CanActivate is exactly what it sounds like.  Can I activate this route?  CanActivateChild would go on a route definition that has a children’s collection.  This rule determines if I can activate the children. &lt;/p&gt;
&lt;p&gt;To use Guards in our application, the first thing we need to do is to define them.  The easiest way to define them is as a function that returns a boolean value, a boolean Observable, or a boolean Promise.  For our purposes here, we will just return a boolean value.  But when you have some asynchronous call you need to make to determine if we should return true or false, you’ll want to return an Observable or a Promise.  I favor Observables. &lt;/p&gt;
&lt;p&gt;The definition for a Guard rule looks like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;provide&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;ruleNameHere&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;useValue&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Then, to use the rule, you assign the appropriate rule the name of the rule. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;canLoad&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;ruleNameHere&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1/page1.module#Page1Module&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that canLoad, as well as the other guard properties, takes an array.  This allows you to apply multiple rules to a route. &lt;/p&gt;
&lt;p&gt;The other way of defining a route is as a class that implements an interface, or multiple interfaces that include CanActivate, CanActivateChild, CanDeactivate, and CanLoad.  You them implement the corresponding functions in your class. &lt;/p&gt;
&lt;p&gt;Now, to include the rule you use the Class rather than a string: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;canLoad&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;RuleClassHere&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1/page1.module#Page1Module&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;But-wait-there’s-more-…&#34;&gt;&lt;a href=&#34;#But-wait-there’s-more-…&#34; class=&#34;headerlink&#34; title=&#34;But wait, there’s more …&#34;&gt;&lt;/a&gt;But wait, there’s more …&lt;/h2&gt;&lt;p&gt;Believe it or not, there is even more to routing than we’ve discussed here.  But we’ll leave that for another day or this post will turn into a &lt;a href=&#34;https://davembush.github.io/get-started-with-angular/&#34;&gt;book&lt;/a&gt;. &lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/upload-an-image-as-a-file-in-angular/</guid>
            <title>Upload an Image as a File in Angular</title>
            <link>http://davembush.github.com/upload-an-image-as-a-file-in-angular/</link>
            <category>angular</category>
            <category>images</category>
            <category>file upload</category>
            <pubDate>Tue, 04 Jul 2017 06:30:08 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;This past week, I needed to be able to upload an image in my application to the server as a file so that I could crop it and upload it. &lt;/p&gt;
&lt;p&gt;Now, uploading an image that you pulled up using the file upload control is relatively straight forward.  But, in our case, the image we want to be able to upload didn’t always come from the user’s file system.  This causes two problems. &lt;/p&gt;
&lt;p&gt;First, you can’t crop an image you retrieved from a different URL using the HTML Canvas because of Cross Origin restrictions and second, you can’t upload the file using the standard file upload mechanism because you didn’t get it from the file system. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/07/2017-07-04.jpg&#34; title=&#34;Upload an Image as a File in Angular&#34;&gt; Photo via &lt;a href=&#34;//visualhunt.com/re/3bc74d&#34;&gt;Visual Hunt&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Image-to-Data-without-Canvas&#34;&gt;&lt;a href=&#34;#Image-to-Data-without-Canvas&#34; class=&#34;headerlink&#34; title=&#34;Image to Data without Canvas&#34;&gt;&lt;/a&gt;Image to Data without Canvas&lt;/h2&gt;&lt;p&gt;Now, the standard way of converting an Image to a data URL is to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a new Image,&lt;/li&gt;
&lt;li&gt;set the onload event handler to a function&lt;/li&gt;
&lt;li&gt;set the Image src attribute to the file&lt;/li&gt;
&lt;li&gt;in the onload function,&lt;ul&gt;
&lt;li&gt;draw the image onto the canvas&lt;/li&gt;
&lt;li&gt;call canvas.toDataUrl(mimeType) to get the data url.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is pretty trivial code: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; canvas = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createElement&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;canvas&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;context = canvas.&lt;span class=&#34;title function_&#34;&gt;getContext&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;2d&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; base_image = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Image&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;base_image.&lt;span class=&#34;property&#34;&gt;src&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;img/base.png&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;base_image.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  context.&lt;span class=&#34;title function_&#34;&gt;drawImage&lt;/span&gt;(base_image, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; dataUrl = canvas.&lt;span class=&#34;title function_&#34;&gt;toDataURL&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;image/jpeg&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But, the trouble starts when you use a URL that doesn’t originate from the file system, or the same domain as the application your are running. &lt;/p&gt;
&lt;p&gt;The trick is to read the image using an XMLHttpRequest for foriegn URLs and then use a FileReader object and call readAsDataURL passing the result of the XMLHttpRequest.read. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; image = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Image&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; self = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; reader = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FileReader&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;reader.&lt;span class=&#34;property&#34;&gt;onloadend&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    reader.&lt;span class=&#34;property&#34;&gt;onloadend&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// make sure the image is loaded before we go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// after width and height;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image.&lt;span class=&#34;property&#34;&gt;src&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        image.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// do something with the new image here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image.&lt;span class=&#34;property&#34;&gt;src&lt;/span&gt; = reader.&lt;span class=&#34;property&#34;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;image.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; xhr = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;XMLHttpRequest&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xhr.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        reader.&lt;span class=&#34;title function_&#34;&gt;readAsDataURL&lt;/span&gt;(xhr.&lt;span class=&#34;property&#34;&gt;response&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xhr.&lt;span class=&#34;title function_&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;GET&amp;#x27;&lt;/span&gt;, image.&lt;span class=&#34;property&#34;&gt;src&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xhr.&lt;span class=&#34;property&#34;&gt;responseType&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;blob&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xhr.&lt;span class=&#34;title function_&#34;&gt;send&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(action.&lt;span class=&#34;property&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;File&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// won&amp;#x27;t be using image.onload so we need to turn it off&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    reader.&lt;span class=&#34;title function_&#34;&gt;readAsDataURL&lt;/span&gt;(action.&lt;span class=&#34;property&#34;&gt;payload&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this triggers image.onload which triggers reader.readAsDataURL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image.&lt;span class=&#34;property&#34;&gt;src&lt;/span&gt; = action.&lt;span class=&#34;property&#34;&gt;payload&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now we can put the image using the data URL on the canvas and the canvas doesn’t know we got it from a foreign URL any more so we no longer get a cross origin URL. &lt;/p&gt;
&lt;p&gt;The entry point for this code is on line 27.  You see  that if we are working with a File, we just use the FileReader directly.  But if we are using http, we go through the XMLHttpRequest.&lt;/p&gt;
&lt;h2 id=&#34;Fake-File-Upload&#34;&gt;&lt;a href=&#34;#Fake-File-Upload&#34; class=&#34;headerlink&#34; title=&#34;Fake File Upload&#34;&gt;&lt;/a&gt;Fake File Upload&lt;/h2&gt;&lt;p&gt;The only problem with this is that now we no longer have the file point, so if we want to upload the file, as a file, to the server we have come up with some way of creating a fake file object.  And believe it or not, that is a lot easier than you might think. &lt;/p&gt;
&lt;p&gt;You see, a File object is just a kind of Blob object.  So, all we really need to do is to create a Blob.  But, we have one additional issue.  Our image is in base 64 and we need to convert it to a binary byte array. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;b64toFile&lt;/span&gt;(dataURI): &lt;span class=&#34;title class_&#34;&gt;File&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// convert the data URL to a byte string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; byteString = &lt;span class=&#34;title function_&#34;&gt;atob&lt;/span&gt;(dataURI.&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// pull out the mime type from the data URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; mimeString = dataURI.&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;:&amp;#x27;&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;;&amp;#x27;&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Convert to byte array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; ab = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayBuffer&lt;/span&gt;(byteString.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; ia = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Uint8Array&lt;/span&gt;(ab);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; byteString.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ia[i] = byteString.&lt;span class=&#34;title function_&#34;&gt;charCodeAt&lt;/span&gt;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Create a blob that looks like a file.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; blob = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Blob&lt;/span&gt;([ab], &amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;#x27;type&amp;#x27;&lt;/span&gt;: mimeString &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    blob[&lt;span class=&#34;string&#34;&gt;&amp;#x27;lastModifiedDate&amp;#x27;&lt;/span&gt;] = (&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Date&lt;/span&gt;()).&lt;span class=&#34;title function_&#34;&gt;toISOString&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    blob[&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;file&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Figure out what extension the file should have&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(blob.&lt;span class=&#34;property&#34;&gt;type&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;image/jpeg&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            blob[&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;] += &lt;span class=&#34;string&#34;&gt;&amp;#x27;.jpg&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;image/png&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            blob[&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;] += &lt;span class=&#34;string&#34;&gt;&amp;#x27;.png&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// cast to a File&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;lt;&lt;span class=&#34;title class_&#34;&gt;File&lt;/span&gt;&amp;gt;blob;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can use the resulting “File” anywhere you would use a File you had retrieved from the file system.&lt;/p&gt;
&lt;h2 id=&#34;Upload-via-Http&#34;&gt;&lt;a href=&#34;#Upload-via-Http&#34; class=&#34;headerlink&#34; title=&#34;Upload via Http&#34;&gt;&lt;/a&gt;Upload via Http&lt;/h2&gt;&lt;p&gt;The last bit of this is that we need to upload this via the Http service.  This is going to be harder to show with code because it depends on what you need to do. &lt;/p&gt;
&lt;p&gt;In my case, I needed to just upload the file, so the post was pretty straight forward.  I used an Http.post() and passed the returned “file” as the data parameter. &lt;/p&gt;
&lt;p&gt;But, you may need to upload it by wrapping the file in a Form object and specifying varying headers.&lt;/p&gt;
&lt;h2 id=&#34;The-End&#34;&gt;&lt;a href=&#34;#The-End&#34; class=&#34;headerlink&#34; title=&#34;The End&#34;&gt;&lt;/a&gt;The End&lt;/h2&gt;&lt;p&gt;I know it is a relatively short post, but I hope it is helpful to someone.  There are a lot of examples out there of how to do this in JavaScript and jQuery, but I was unable to find anything that was specific to TypeScript and Angular.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/real-world-rxjs-marble-testing-revealed/</guid>
            <title>Real World RxJS Marble Testing Revealed</title>
            <link>http://davembush.github.com/real-world-rxjs-marble-testing-revealed/</link>
            <category>angular</category>
            <category>RxJS</category>
            <category>Marble Testing</category>
            <pubDate>Tue, 13 Jun 2017 06:30:25 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;There must be some evil plot to keep this information a secret because whenever I search for how to use RxJS Marble Testing all I see is how to use it to write tests for RxJS.  Well I’ve finally “cracked the code.” &lt;/p&gt;
&lt;p&gt;In this article you’ll learn the basics of RxJS Marble Testing and how to apply Marble Testing to your own code.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/06/2017-06-13.jpg &#34;Real World RxJS Marble Testing Revealed&#34;) Photo via [Visualhunt](//visualhunt.com/re/9662e0)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;It-All-Started-When-…&#34;&gt;&lt;a href=&#34;#It-All-Started-When-…&#34; class=&#34;headerlink&#34; title=&#34;It All Started When …&#34;&gt;&lt;/a&gt;It All Started When …&lt;/h2&gt;&lt;p&gt;It all started about a month ago when I needed to write a unit test for code that updated the screen once every 15 seconds. Writing a test that would simulate the clock moving forward 15 seconds in old school JavaScript would have been pretty easy.  But I had written my code using RxJS instead of the old school &lt;code&gt;setTimeout()&lt;/code&gt; method we’ve been using for this kind of feature in the past. &lt;/p&gt;
&lt;p&gt;Specifically, I had used &lt;code&gt;Observable.timer(0, 15000);&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;My first attempt to write tests for this were based on the assumption that, under the hood, &lt;code&gt;setTimeout()&lt;/code&gt; was still being used. Just a simple matter of mocking the clock and advancing the timer. Right?&lt;/p&gt;
&lt;p&gt;Wrong!&lt;/p&gt;
&lt;p&gt;Then my initial search brought me to the NgRX 4 way of writing tests for Observables. Only, I didn’t find that out until I had written some code that didn’t work. &lt;/p&gt;
&lt;p&gt;Eventually, I found this thing called Marble Testing. But, as I’ve already mentioned, all the examples I’ve found for how to write test are for written test for the various methods available in the RxJS library. &lt;/p&gt;
&lt;p&gt;I’m guess, if you are still reading, I’ve described your journey as well.&lt;/p&gt;
&lt;h2 id=&#34;Assumptions&#34;&gt;&lt;a href=&#34;#Assumptions&#34; class=&#34;headerlink&#34; title=&#34;Assumptions&#34;&gt;&lt;/a&gt;Assumptions&lt;/h2&gt;&lt;p&gt;For the remainder of this article, I’m going to assume you know how to use RxJS. If you don’t there is already a lot of good information available on that topic that you should easily be able to find by using one of the search engines.&lt;/p&gt;
&lt;p&gt;I’m also going to describe how to use marbles in your tests using Jasmine. I use Jasmine because that is the engine all the frameworks that I use end up using. There are other tools that may or may not be better. But I have no reason to leave what everyone else has already picked as a defacto standard.&lt;/p&gt;
&lt;h2 id=&#34;Marble-Basics&#34;&gt;&lt;a href=&#34;#Marble-Basics&#34; class=&#34;headerlink&#34; title=&#34;Marble Basics&#34;&gt;&lt;/a&gt;Marble Basics&lt;/h2&gt;&lt;p&gt;Since there is a lot of detail on the basics of using Marbles, I only plan on summarizing what you need to know here.  For more details, check out &lt;a href=&#34;//github.com/ReactiveX/rxjs/blob/master/doc/writing-marble-tests.md&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;Create-Observables&#34;&gt;&lt;a href=&#34;#Create-Observables&#34; class=&#34;headerlink&#34; title=&#34;Create Observables&#34;&gt;&lt;/a&gt;Create Observables&lt;/h3&gt;&lt;p&gt;First, you can create either hot observables or cold observables. To do this, you’ll need to create an instance of &lt;code&gt;TestScheduler&lt;/code&gt; and then you call either &lt;code&gt;createHotObservable()&lt;/code&gt; or &lt;code&gt;createColdObservable()&lt;/code&gt; passing a string that defines what you want your observables to do. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; testScheduler = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestScheduler&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; hotObservable = testScheduler.&lt;span class=&#34;title function_&#34;&gt;createHotObservable&lt;/span&gt;(hotMarbleString);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; coldObservable = testScheduler.&lt;span class=&#34;title function_&#34;&gt;createColdObservable&lt;/span&gt;(coldMarbleString);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Marble-Syntax&#34;&gt;&lt;a href=&#34;#Marble-Syntax&#34; class=&#34;headerlink&#34; title=&#34;Marble Syntax&#34;&gt;&lt;/a&gt;Marble Syntax&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;-&amp;quot;&lt;/code&gt; time: 10 “frames” of time passage.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;|&amp;quot;&lt;/code&gt; complete: The successful completion of an observable. This is the observable producer signaling &lt;code&gt;complete()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;#&amp;quot;&lt;/code&gt; error: An error terminating the observable. This is the observable producer signaling &lt;code&gt;error()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt; any character: All other characters represent a value being emitted by the producer signaling &lt;code&gt;next()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;()&amp;quot;&lt;/code&gt; sync groupings: When multiple events need to single in the same frame synchronously, parenthesis are used to group those events. You can group next values, a completion or an error in this manner. The position of the initial &lt;code&gt;(&lt;/code&gt;determines the time at which its values are emitted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;^&amp;quot;&lt;/code&gt; subscription point: (hot observables only) shows the point at which the tested observables will be subscribed to the hot observable. This is the “zero frame” for that observable, every frame before the &lt;code&gt;^&lt;/code&gt; will be negative.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most simple of observables using marbles would look like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;a|&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This would cause an observable event to fire right away and it would pass “a” as the data for the observable.  The observable would then end because the | comes next. &lt;/p&gt;
&lt;p&gt;In the case of the timer I was testing, I don’t need the data, I just need the “event” to fire so my code runs.&lt;/p&gt;
&lt;h2 id=&#34;Marbles-as-Mocks&#34;&gt;&lt;a href=&#34;#Marbles-as-Mocks&#34; class=&#34;headerlink&#34; title=&#34;Marbles as Mocks&#34;&gt;&lt;/a&gt;Marbles as Mocks&lt;/h2&gt;&lt;p&gt;So far, I probably haven’t told you anything that you couldn’t already figure out by doing a basic search.  But, the question remains, how do we use this marble stuff in our own test? &lt;/p&gt;
&lt;p&gt;And the answer that no one seems to be talking about is that you use marbles to mock out the real observable just like you might create a mock object to replace a real object in any other test. &lt;/p&gt;
&lt;p&gt;In the case of the timer problem above, what I needed to do was to make sure that &lt;code&gt;Observable.timer(0, 15000);&lt;/code&gt; returns an observable that was created with a marble instead of an observable created with the timer.  In Jasmine, we do that with &lt;code&gt;spyOn()&lt;/code&gt; &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;testScheduler = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestScheduler&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;spyOn&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;timer&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;property&#34;&gt;and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;returnValue&lt;/span&gt;(testScheduler.&lt;span class=&#34;title function_&#34;&gt;createHotObservable&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;---a|&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The rest of your code really doesn’t care what kind of observable it is, it will do whatever it is it has been coded to do. &lt;/p&gt;
&lt;p&gt;The only thing you need to do to make sure the observable and subscribes do their thing is to make sure you call &lt;code&gt;flush()&lt;/code&gt; on the &lt;code&gt;TestScheduler&lt;/code&gt; instance prior to running an &lt;code&gt;expect()&lt;/code&gt; in your Jasmine test.&lt;/p&gt;
&lt;h2 id=&#34;Other-Uses&#34;&gt;&lt;a href=&#34;#Other-Uses&#34; class=&#34;headerlink&#34; title=&#34;Other Uses&#34;&gt;&lt;/a&gt;Other Uses&lt;/h2&gt;&lt;p&gt;What I’ve shown so far takes care of my 15 second refresh issue. But now, what if I have an observable that expects data? For example, how would I write a test that uses an observable based on an AJAX request as a dependency? In Angular, this would be Http. &lt;/p&gt;
&lt;p&gt;This is actually very simple. The second parameter to either &lt;code&gt;createHotObservable()&lt;/code&gt; or &lt;code&gt;createColdObservable()&lt;/code&gt; is the data you want to send on to the subscribe when it hits the associated marble. You pass this in as an object literal. So, just to keep things simple. Say that when you hit the “a” marble, you want to pass the subscribe an object that has a first name and a last name. Your code might look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;testScheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;createHotObservable&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;-a|&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;: &amp;#123;&lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Dave&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Bush&amp;#x27;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;By using this type of marble mocking, you could not just create unit tests, but you could also create End to End tests that use marbles to return consistent data rather than hitting the back end. Obviously, you would still need to write tests that ensure your back end is going to return the same type of data, but I see that as a separate issue from ensuring that the front end does everything it should do as a system. Anyhow, it is an option.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/ngrx-store-coding-sanity-epiphany/</guid>
            <title>NgRX/Store Coding Sanity Epiphany</title>
            <link>http://davembush.github.com/ngrx-store-coding-sanity-epiphany/</link>
            <category>angular</category>
            <category>design patterns</category>
            <category>NgRX</category>
            <pubDate>Tue, 06 Jun 2017 06:30:44 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Maybe this is all obvious to you, but since I don’t see anyone talking about this when I search for “how to do NgRX” or the various variants, I thought I’d call it out in this weeks post.&lt;/p&gt;
&lt;p&gt;If you haven’t been following along, you’ll want to review &lt;a href=&#34;/tags/ngrx/&#34;&gt;my previous posts on NgRX&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/06/2017-06-06.jpg &#34;NgRX/Store Coding Sanity Epiphany&#34;)&lt;figcaption&gt;Photo credit: [spcbrass](//www.flickr.com/photos/spcbrass/394867154/) via [Visual Hunt](//visualhunt.com/re/cff786) / [ CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;If it isn’t clear yet, I’m still sorting out a lot of this Angular&amp;#x2F;Redux&amp;#x2F;NgRX stuff. But as I was working on my current project this week, I realized I have WAY too much code in my presentation layer.&lt;/p&gt;
&lt;h2 id=&#34;The-Epiphany&#34;&gt;&lt;a href=&#34;#The-Epiphany&#34; class=&#34;headerlink&#34; title=&#34;The Epiphany&#34;&gt;&lt;/a&gt;The Epiphany&lt;/h2&gt;&lt;p&gt;I have two main screens I’m working on. As you read the articles on the Internet that explain how to use this pattern or the Redux pattern it was derived from, you’ll quickly learn that you want to work with a “Smart Component.” This component is kind of a traffic cop. It uses observables to listen to state change in your Store and it sends actions to, primarily, update the database and change the store’s state. From what I’ve been able to gather, the expectation is that a lot of the logic that would be needed to actually process the data is going to go in this smart component. The first screen I worked on, followed this basic pattern. This put a whole crap load of code in my smart component.&lt;/p&gt;
&lt;p&gt;On the second page, I kind of stumbled onto what I believe is a cleaner model. I realized that I was hanging onto data in my smart component that was also in my store. That seems kind of dumb. If all I need is in my store, why not just fire off an action to do whatever it is I want to do and have the @Effect grab the data from the store?&lt;/p&gt;
&lt;p&gt;This is why I ended up making my smart component listen to the observables and dispatch events to the store based on changes in my components. This includes things like button clicks. Any other processing that needs to take place takes place in either an @Effect or is called from an @Effect.&lt;/p&gt;
&lt;p&gt;I can’t describe for you how much cleaner my codebase is as a result! WOW!&lt;/p&gt;
&lt;p&gt;But, will it work on the first page the same as it works on the second page?&lt;/p&gt;
&lt;h2 id=&#34;The-Test&#34;&gt;&lt;a href=&#34;#The-Test&#34; class=&#34;headerlink&#34; title=&#34;The Test&#34;&gt;&lt;/a&gt;The Test&lt;/h2&gt;&lt;p&gt;You see, there is a big difference between the first page and the second page. The first page is basically a search and list page. The second page is an edit page for an item. On the first page, I had multiple store entities for the various parts. I had an entity for the search fields. An entity for the search results. And others. Let’s just say my model isn’t very flat.&lt;/p&gt;
&lt;p&gt;The fact of the matter is, the second page that I created wasn’t really all that flat either. But because I started with the concept of not putting any logic in my smart component, it felt easier to manage.&lt;/p&gt;
&lt;p&gt;So, the first thing I wanted to do was to create a reducer for the page. All this reducer will do is distribute the action down into sub-reducers. This allowed me to keep all of my action code the same. The only thing that changes is that the directories for my sub-reducers and the @Effects, Actions and Interfaces that are associated with them go under my directory for my main Reducer and Model.&lt;/p&gt;
&lt;p&gt;I still have a bit of code that I’d like to clean up, but on the whole, I like this pattern much better than what I was doing before.&lt;/p&gt;
&lt;h2 id=&#34;Advantages&#34;&gt;&lt;a href=&#34;#Advantages&#34; class=&#34;headerlink&#34; title=&#34;Advantages&#34;&gt;&lt;/a&gt;Advantages&lt;/h2&gt;&lt;p&gt;The main advantage to using this new architecture is that it simplifies and reduces testing considerations.&lt;/p&gt;
&lt;p&gt;For example, because all my presentation layer is now doing is either reflecting the state that is in my store or telling my store to do something, there really isn’t much, if anything, left to test in my presentation layer. If you’ve written your code correctly, none of the methods in your view should have a cyclomatic complexity of greater than two. You may still want to write some end-to-end tests to make sure that the NgRX&amp;#x2F;Store loop is working correctly. But that is an entirely different subject.&lt;/p&gt;
&lt;p&gt;This does not mean that we don’t have to test anything. All of that code had to go some place, right?&lt;/p&gt;
&lt;p&gt;But, here’s the deal. Because the code is in an @Effect or a Service (generally) your tests become much more simple. You might have to dummy up a store or a service. But for the most part, your tests won’t really look much different that tests you would write for regular JavaScript code without a framework.&lt;/p&gt;
&lt;p&gt;The other HUGE advantage to using this architecture is that it allows you to distribute your code so that no file is too large and hard to reason about. It allows you to follow the “Single Responsibility Principle” in greater granularity than you might otherwise be able to do.&lt;/p&gt;
&lt;p&gt;And finally, this architecture allows you to treat all the component code: the html template, the CSS, and the TypeScript file, as all View code. And I think this is where many people are confused about Angular.&lt;/p&gt;
&lt;h2 id=&#34;View-Confusion&#34;&gt;&lt;a href=&#34;#View-Confusion&#34; class=&#34;headerlink&#34; title=&#34;View Confusion&#34;&gt;&lt;/a&gt;View Confusion&lt;/h2&gt;&lt;p&gt;In a MVC or even an MVVM pattern, we’ve also considered the HTML template the “View” and the JavaScript (or in our case, TypeScript) code the controller. This is a common misconception that I believe the ASP.NET crowd still gets wrong. Code-behind code isn’t your controller. It is helper code for your View. And so, we end up putting processing code in our view, when it really belongs in an entirely different file. This is what the Model View Presenter pattern solves. If you aren’t going to use NgRX and Reactive Forms, you should check out MVP as a way of architecting your code using the older Template Driven Forms approach that was common in AngularJS.&lt;/p&gt;
&lt;h2 id=&#34;Code&#34;&gt;&lt;a href=&#34;#Code&#34; class=&#34;headerlink&#34; title=&#34;Code&#34;&gt;&lt;/a&gt;Code&lt;/h2&gt;&lt;p&gt;For the purposes of this article, I’m going to assume you’ve read my other articles which I’ve linked to at the beginning of this post.&lt;/p&gt;
&lt;p&gt;So first, the basic directory and file structure of this new method might look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;app/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; +-store/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   +-route1/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     +-sub-reducer1/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       --sub-reducer1.actions.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       --sub-reducer1.effects.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       --sub-reducer1.model.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       --sub-reducer1.reducer.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     +-sub-reducer2/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     --route1.actions.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     --route1.effects.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     --route1.model.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     --route1.reducer.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   +-route2/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Some things to note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Your Actions are defined in the target. You would seldom, if ever, define an action at the route level.&lt;/li&gt;
&lt;li&gt;Effects are optional, just like any other time you would use them.&lt;/li&gt;
&lt;li&gt;Effects are seldom, if ever, defined at the route level.&lt;/li&gt;
&lt;li&gt;I’m using “route1” etc and “sub-reducer1” etc as sample names. Use names that represent your route names and the data you are storing.&lt;/li&gt;
&lt;li&gt;The only reducers that gets defined in our app.store.ts file are the reducers in the route directories.&lt;/li&gt;
&lt;li&gt;You still need to register each of your effects in app.store.ts as you have been doing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The next thing that is probably not clear is that your top-level model, ie “route1.model.ts” should only hold the sub-reducers. I’ve also found it useful to make all of my top-level properties optional.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Route1Model&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  subItem1?: &lt;span class=&#34;title class_&#34;&gt;SubModel1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   subItem2?: &lt;span class=&#34;title class_&#34;&gt;SubModel2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And this is used in your route reducer as:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;route1Reducer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;state: Route1Model =&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    subReducer1: &amp;#123;/* subReducer definition here */&amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    subReducer2: &amp;#123;/* subReducer definition here */&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;  &amp;#125;, action: Action&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;// process action here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Route1Reducer&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionReducer&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Route1Model&lt;/span&gt;&amp;gt; = route1Reducer;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, the trick we need to implement is that we need to delegate the actions down to the appropriate reducers and we only want to change the state object to a new object if a child state has changed.&lt;/p&gt;
&lt;p&gt;In the top level reducer, you need to put code that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; reducerList = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;subReducer1&lt;/span&gt;: subReducer1,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;subReducer2&lt;/span&gt;: subReducer2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; returnState = state;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;keys&lt;/span&gt;(reducerList).&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; newState = reducerList[item](state[item], action);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(newState !== state[item]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; newItem = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      newItem[item] = newState;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      returnState = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;assign&lt;/span&gt;(&amp;#123;&amp;#125;, returnState, newItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; returnState;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The key here is that you want the property names in the reducerList to be the same name as what is in the Route1Model and you want the values assigned to them to be the function pointer (notice, no parenthesis) that should be called.&lt;/p&gt;
&lt;p&gt;The actual sub-reducers look like a regular reducer.  The only real difference is that you will be calling the function that returns the state, the second export statement we normally put in our reducers that returns the ActionReducer&amp;lt;&amp;gt; is not needed.&lt;/p&gt;
&lt;p&gt;So, our Object.keys().map() processes each reducer and updates the parent object if the child has changed.&lt;/p&gt;
&lt;p&gt;Now, by way of reminder. You can observe all the store, or part of the store. So, your smart component might observe just a sub entity or the whole entity depending on the need at the moment.&lt;/p&gt;
&lt;p&gt;Finally, lets say you want to have a “Save” button that causes the information in your store to be persisted to a database. You would place a method in your smart component that gets triggered by the button and fires a “Save” action to an @Effect.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;save&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  event.&lt;span class=&#34;title function_&#34;&gt;stopPropagation&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Route1Actions&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;save&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Your @effect will respond, and since @Effects typically already have a store injected into them, you can use the store to retrieve the data.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;dispatch&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&amp;#125;) _save$ = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;update$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;StagedEditActions&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;SAVE&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;route1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;first&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;route1Data&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;service&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;save&lt;/span&gt;(route1Data))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(requestId$ =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    requestId$.&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;id&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(route1Actions.&lt;span class=&#34;title function_&#34;&gt;load&lt;/span&gt;(id))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/functional-reactive-angular-revealed/</guid>
            <title>Functional Reactive Angular Revealed</title>
            <link>http://davembush.github.com/functional-reactive-angular-revealed/</link>
            <category>angular</category>
            <category>RxJS</category>
            <category>NgRX</category>
            <pubDate>Tue, 30 May 2017 06:30:46 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last month or so, I’ve been presenting the basics of &lt;a href=&#34;/tags/ngrx/&#34;&gt;how to use NgRX&amp;#x2F;Store with Angular&lt;/a&gt;. In the past, I’ve praised the virtues of &lt;a href=&#34;/tags/reactive-forms/&#34;&gt;Reactive Forms&lt;/a&gt;, also known as &lt;a href=&#34;/tags/model-driven/&#34;&gt;Model Driven Forms&lt;/a&gt;. These along with RxJS make up the pillars of Functional Reactive Angular Programming.&lt;/p&gt;
&lt;p&gt;What is sad is that this reality is lost on so much of the Angular community. When I listen to podcast where they talk about any of these concepts individually, Function Reactive Programming (FRP) is barely, if ever, mentioned.&lt;/p&gt;
&lt;p&gt;But the scary thing is this, there are many people who are going to use the new Angular the way they used the old Angular and they will completely miss the main advantages. They may even jump from Angular to React or (even) Aurelia. And that’s just picking on the most recent frameworks. Some will want to go back to Egypt and decide jQuery is a good choice!&lt;/p&gt;
&lt;p&gt;Functional Reactive Programming is not just a hot new model. It solves a lot of problems.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/05/2017-05-30.png &#34;Functional Reactive Angular Revealed&#34;) Photo via [VisualHunt.com](//visualhunt.com/re/b10788)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Object-Oriented-Failure&#34;&gt;&lt;a href=&#34;#Object-Oriented-Failure&#34; class=&#34;headerlink&#34; title=&#34;Object-Oriented Failure&#34;&gt;&lt;/a&gt;Object-Oriented Failure&lt;/h2&gt;&lt;p&gt;Several years ago, I wrote an article called, “&lt;a href=&#34;/object-oriented-programming-has-failed-us/&#34;&gt;Object-Oriented Programming Has Failed Us&lt;/a&gt;”. In the article, I put forth the reality that most people are unable to think in object-oriented terms. Humans think sequentially and chunk down. Object-Oriented Programming requires us to think holistically, frequently in parallel, and chunk up.&lt;/p&gt;
&lt;p&gt;So, lets define some terms. Chunking down is the act of finding differences between things. This is why we discriminate. At times, it is useful to find differences. If you are a microbiologist, you want to do this so you know you are working with one strain of virus vs some other strain.&lt;/p&gt;
&lt;p&gt;As you might have guessed, Chunking Up, is the exact opposite. We look for commonalities. Given two different things, what is the same between them?&lt;/p&gt;
&lt;p&gt;The problem is, that’s not how most of us naturally process the world. There are other problems with Object-Oriented Programming.&lt;/p&gt;
&lt;h3 id=&#34;Hard-to-Reason-About&#34;&gt;&lt;a href=&#34;#Hard-to-Reason-About&#34; class=&#34;headerlink&#34; title=&#34;Hard to Reason About&#34;&gt;&lt;/a&gt;Hard to Reason About&lt;/h3&gt;&lt;p&gt;Back when I was teaching for a training company, I was explaining some concept of Object-Oriented Programming, probably Virtual Functions, to a student that came from a procedural programming world. His comment was, “this is going to make the code really hard to debug!” to which I responded, “not if you step through with the debugger.” But, the truth is, he was right. Debugging Object-Oriented code is difficult because the code is hard to read and reason about. Looking at any one class, am I ever sure that I’m seeing the whole picture?&lt;/p&gt;
&lt;p&gt;Think about this. When you write a class, and have a member variable, how long is it before you’ve forgotten the fact that the variable exists and is implicitly a parameter that is being passed to your function. Not long! And this means that you can never really be sure that when you go to use that function, the state of the object will always be the same.&lt;/p&gt;
&lt;p&gt;This makes the code incredibly hard to test. I’m not even talking about using Test Driven Development. Just any kind of test that have way ensures that the code you’ve written does what you think it does and doesn’t do what you don’t think it does.&lt;/p&gt;
&lt;h3 id=&#34;Single-Responsibility&#34;&gt;&lt;a href=&#34;#Single-Responsibility&#34; class=&#34;headerlink&#34; title=&#34;Single Responsibility&#34;&gt;&lt;/a&gt;Single Responsibility&lt;/h3&gt;&lt;p&gt;One of the rules for Object-Oriented Programming is that we should follow the “Single Responsibility Principle” I ask you, how far do we chunk down to ensure we are only doing one thing in our class?  In fact, many of the principles we have developed are trying to put fences around the inherent problems with programming in an Object-Oriented mindset.&lt;/p&gt;
&lt;h2 id=&#34;Procedural-Programming&#34;&gt;&lt;a href=&#34;#Procedural-Programming&#34; class=&#34;headerlink&#34; title=&#34;Procedural Programming&#34;&gt;&lt;/a&gt;Procedural Programming&lt;/h2&gt;&lt;p&gt;The benefit of Procedural Programming is that I at least knew what parameters I was always going to get.  The disadvantage is that it was still incredibly hard to test because my function could call other function that could call yet other functions.  This meant that I could only really test the functions that were at the end of the hierarchy and really had no good way of mocking out child functions.  While testing is hard in an Object-Oriented world, it is nearly impossible in a procedural world.&lt;/p&gt;
&lt;h2 id=&#34;What-If&#34;&gt;&lt;a href=&#34;#What-If&#34; class=&#34;headerlink&#34; title=&#34;What If&#34;&gt;&lt;/a&gt;What If&lt;/h2&gt;&lt;p&gt;But, what if there were a way to write code that solved most of these problems. A way that better mirrored how we thought, that is easier to reason about, that allows you to chunk down – that forced you to chunk down. A way of coding that was so easy to test, that you frequently didn’t even need to write the test. This is the advantage of Functional Programming generally, and the reason you want to use the combination of NgRX&amp;#x2F;Store, Reactive Forms, and RxJS in the bulk of your Angular code.&lt;/p&gt;
&lt;h2 id=&#34;How-To&#34;&gt;&lt;a href=&#34;#How-To&#34; class=&#34;headerlink&#34; title=&#34;How To&#34;&gt;&lt;/a&gt;How To&lt;/h2&gt;&lt;h3 id=&#34;Basics&#34;&gt;&lt;a href=&#34;#Basics&#34; class=&#34;headerlink&#34; title=&#34;Basics&#34;&gt;&lt;/a&gt;Basics&lt;/h3&gt;&lt;p&gt;You’ll remember from our discussion of NgRX that we setup a reducer to return a new state object for a particular entity in our store. You’ll also remember that we are able to create an entity that has child entities and that we can subscribe to any entity using code that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;entityName&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;or&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;entityName&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;subEntity&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you need to, you can read my previous articles that I’ve already referred to.&lt;/p&gt;
&lt;p&gt;I normally setup an entity in my store for each screen, then for data I am just displaying I subscribe in the template using&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&amp;#123;(observerThing | async)?.variableThing&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;(observerThing | async)&lt;/code&gt; is the same as the code we would normally write in TypeScript:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;observerThing.&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;async&lt;/code&gt; does the &lt;code&gt;subscribe&lt;/code&gt; and returns &lt;code&gt;x&lt;/code&gt;. The &lt;code&gt;?&lt;/code&gt; ensures that we don’t attempt to go after &lt;code&gt;.variableThing&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is all pretty basic stuff.&lt;/p&gt;
&lt;p&gt;But what about working with forms.&lt;/p&gt;
&lt;h3 id=&#34;Forms&#34;&gt;&lt;a href=&#34;#Forms&#34; class=&#34;headerlink&#34; title=&#34;Forms&#34;&gt;&lt;/a&gt;Forms&lt;/h3&gt;&lt;p&gt;I’ve found that the best way to work with forms is to create a structure in my entity that maps directly to my form. So, if I have a form with firstName, lastName, and birthDate, I’ll define my form in my template with a form group using firstName, lastName, and birthDate as formControlName values.&lt;/p&gt;
&lt;p&gt;Next, in my TypeScript code, I’ll subscribe to the form group’s valueChanges property. Any time my form changes, the subscribe dispatches the changes to the reducer for my entity and updates the store.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;property&#34;&gt;myFormGroup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;property&#34;&gt;valueChanges&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; store.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;comment&#34;&gt;/* action thing goes here */&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, I can setup a &lt;code&gt;subscribe&lt;/code&gt; on my entity and any time the data in the entity changes, I can update the form group.&lt;/p&gt;
&lt;p&gt;There is a small little trick you need to know about here. I already showed you how to update the form group using &lt;code&gt;patchValue()&lt;/code&gt; &lt;a href=&#34;/angular2-model-driven-forms-are-superior/&#34;&gt;here&lt;/a&gt;. But because we were not dealing with a fully Functional Reactive programming model, I left out a part you’ll need here.&lt;/p&gt;
&lt;p&gt;When you update your code using &lt;code&gt;patchValue()&lt;/code&gt;, the first parameter will still be the data you want to change. That is, the values from the store’s entity. But for the second parameter, you’ll need to pass in &lt;code&gt;&amp;#123;emitEvent: false&amp;#125;&lt;/code&gt;, otherwise, you’ll end up with an infinite loop. Your form will cause your reducer to change and your store will cause your form to change. What that second parameter is saying is that we don’t want any of the change events to fire because we’ve updated the form.&lt;/p&gt;
&lt;p&gt;You may also want to consider writing code in your reducer that only returns a new state object if no data has changed.&lt;/p&gt;
&lt;h3 id=&#34;RxJS&#34;&gt;&lt;a href=&#34;#RxJS&#34; class=&#34;headerlink&#34; title=&#34;RxJS&#34;&gt;&lt;/a&gt;RxJS&lt;/h3&gt;&lt;p&gt;Now, nothing about anything I’ve written in the “how to” is particularly Functional, but it is Reactive. By virtue of the subscribes, it is reacting to state change and reacting to changes in the form. What makes our code Functional, is that we make use of RxJS, a Reactive library, to process the data. If you’ve already been using the Http object in Angular, you’ve already been using RxJS.&lt;/p&gt;
&lt;p&gt;There is a great &lt;a href=&#34;//reactivex.io/learnrx/&#34;&gt;tutorial for learning RxJS&lt;/a&gt; that the guys at NetFlix have put together. I’m not even going to attempt to teach RxJS here. They’ve got the best material and it is what helped me wrap my head around the basic concepts.&lt;/p&gt;
&lt;p&gt;What I do want to point out here is what makes Functional programming Functional so that you end up using RxJS correctly.  While these are not hard and fast rules, I would encourage you to break these rules only after you can’t find any other way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The output of one function becomes the input for the next function.&lt;/li&gt;
&lt;li&gt;A function never causes a side effect (this is why NgRX has Effects)&lt;/li&gt;
&lt;li&gt;The same parameters in will always produce the same data out.&lt;/li&gt;
&lt;li&gt;Avoid conditionals and use .filter(), .case() etc instead.&lt;/li&gt;
&lt;li&gt;Ideally the cyclomatic complexity of a function should be 1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By following these rules, you will find that most of the code you write doesn’t need to have any test.  Why would you ever test a function with a cyclomatic complexity of 1, or code that has no conditions?&lt;/p&gt;
&lt;h2 id=&#34;The-Right-Tool-for-the-Job&#34;&gt;&lt;a href=&#34;#The-Right-Tool-for-the-Job&#34; class=&#34;headerlink&#34; title=&#34;The Right Tool for the Job&#34;&gt;&lt;/a&gt;The Right Tool for the Job&lt;/h2&gt;&lt;p&gt;While I would love to be able to use Functional programming everywhere, I recognize that it isn’t always the best tool for the job. For example, at least with Angular, there isn’t a good way of writing our components and pages in a strictly Functional way. However, if you use what I’ve illustrated here, you’ll find that even though the structure of your components are Object-Oriented, much of the code within the component is quite functional.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/using-real-world-ngrx/</guid>
            <title>Using Real World NgRX</title>
            <link>http://davembush.github.com/using-real-world-ngrx/</link>
            <category>angular</category>
            <category>design patterns</category>
            <category>NgRX</category>
            <pubDate>Tue, 09 May 2017 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;This week, I want to demonstrate some ways you might use NgRX in your own code.&lt;/p&gt;
&lt;h2 id=&#34;Review&#34;&gt;&lt;a href=&#34;#Review&#34; class=&#34;headerlink&#34; title=&#34;Review&#34;&gt;&lt;/a&gt;Review&lt;/h2&gt;&lt;p&gt;Last week we went into a lot of detail about how the NgRX system should be wired together. Here is all of that in picture form.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2017/05/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;A component fires an event to either an effect or a reducer using an action. If an effect was called, it fires another action which is normally picked up by a reducer. The Reducer mutates the state which then gets placed in the store. “Magic happens here.” You don’t write any code to get it to the store other than that you create a reducer. Anything that is observing the table in the store that got changed will get notified via RxJS observables and the cycle is complete.&lt;/p&gt;
&lt;p&gt;Note that the action you dispatch can be handled by either an Effect, a Reducer or both.&lt;/p&gt;
&lt;h2 id=&#34;Basic-CRUD&#34;&gt;&lt;a href=&#34;#Basic-CRUD&#34; class=&#34;headerlink&#34; title=&#34;Basic CRUD&#34;&gt;&lt;/a&gt;Basic CRUD&lt;/h2&gt;&lt;p&gt;Most of the time, we think of NgRX as a way of handling CRUD operations. We need to see the current record so we fire off a LOAD action that uses an effect to retrieve the data from the database. Once the data comes back, we return an action that tells the reducer to put that new data into the store. Since our component is observing the store, it updates the screen with the new values.&lt;/p&gt;
&lt;p&gt;If we need to add a record, we fire an ADD action. If we need to delete we fire a DELETE action. If we need to update, we fire an UPDATE action. Each of these are picked up by the Effect, which then fires an action that places new state information in the store via the Reducer.&lt;/p&gt;
&lt;h2 id=&#34;Wait-State&#34;&gt;&lt;a href=&#34;#Wait-State&#34; class=&#34;headerlink&#34; title=&#34;Wait State&#34;&gt;&lt;/a&gt;Wait State&lt;/h2&gt;&lt;p&gt;When most people think of how to use NgRX or any similar pattern, they immediately think of the CRUD pattern I mentioned above. But, we don’t have to start the Action chain from a component. For that matter, we don’t have to listen to our Store data from a component either.&lt;/p&gt;
&lt;p&gt;One way I’ve implemented NgRX that solves a lot of common issues is that I’ve created a wait state component that shows when a count variable has been incremented and doesn’t show when the count is zero. Since Store is &lt;code&gt;Injectable&lt;/code&gt;, I can increment and decrement the count from just about anywhere. Most often I increment it from an effect just before I make an AJAX call and decrement it in a finally() block of the Http observable. I have a start() action that increments the count and an end() action that decrements the count and ensures that I never go below zero. I can start off multiple asynchronous processes which will all increment the counter and decrement the counter appropriately. The wait state GUI displays until everything has finished.&lt;/p&gt;
&lt;p&gt;This is OH! So much easier than how we’ve had to handle this problem with other design patterns. I’m not saying it couldn’t be done, or that it was even particularly hard. But this way is easier.&lt;/p&gt;
&lt;h2 id=&#34;Error-Handling&#34;&gt;&lt;a href=&#34;#Error-Handling&#34; class=&#34;headerlink&#34; title=&#34;Error Handling&#34;&gt;&lt;/a&gt;Error Handling&lt;/h2&gt;&lt;p&gt;Another place where you might want to present information but trigger the display from just about anywhere is with error handling. In the code I work on, I have a modal popup component that displays whenever my error collection has something in it. Anytime I need to display an error, I add the error to the collection via an Action and it magically displays. The great thing about this mechanism is that regardless of how many errors I send to the collection, they all display until I close the window, which clears out the collection.&lt;/p&gt;
&lt;h2 id=&#34;Page-State&#34;&gt;&lt;a href=&#34;#Page-State&#34; class=&#34;headerlink&#34; title=&#34;Page State&#34;&gt;&lt;/a&gt;Page State&lt;/h2&gt;&lt;p&gt;Most page state is handled by the fact that we’ve stored the data into a database. But there are times when we want to come back to a page we had been working on previously and we want it to display with the data that was on it at the time we left.&lt;/p&gt;
&lt;p&gt;Or maybe you want to work on a series of pages prior to saving so that everything gets saved as a set.&lt;/p&gt;
&lt;p&gt;No matter. You can use NgRX to store everything into the store and a separate action can trigger an effect that pushes that data to the database.&lt;/p&gt;
&lt;p&gt;Or, as is the case in an application I’m working on, I’m using a form to search a database. When I come back, I want the same search fields and I want the search to reinitialized. In my particular case, I don’t have a search field. You change a field, a new search is automatically initiated. This case is just a little bit more complicated than what we’ve looked at so far.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2017/05/image-1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;In order to keep the state information available so that it is there when I come back to it, I need to store that information in the search table via the Search Reducer. So, every time something changes in the Search Form, I send off an action to the Search Reducer so that the change can be recorded.&lt;/p&gt;
&lt;p&gt;Meanwhile, the Search Form also is listening to the Search Table so that when it comes back it can put the changes in the form, and it can send an action to the Search Results Reducer telling it to search for the information. When it gets the results, the Search Results Table picks them up and since the Search Results Component is listening to the Search Results Table, they display.&lt;/p&gt;
&lt;p&gt;If I leave the page, the Search Form grabs the current search parameters from the Search Table and Fills the Form and sends the action to the Search Results Reducer and the page is back where we left it.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;The point is, NgRX isn’t just about basic CRUD forms and because there are multiple ways you can mix and match the parts, even your basic CRUD implementation has a lot more flexibility than you might be used to.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-2-model-driven-forms-are-superior/</guid>
            <title>Angular(2+) Model Driven Forms Are Superior</title>
            <link>http://davembush.github.com/angular-2-model-driven-forms-are-superior/</link>
            <category>angular</category>
            <category>model driven</category>
            <category>reactive forms</category>
            <pubDate>Tue, 18 Apr 2017 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;If you are programming in Angular and haven’t tried Model Driven Forms yet, I’m assuming that is because you’ve not taken the time to try to learn it. In this article, I am going to try to convince you that the Model Driven Form based approach is superior to Template Driven Forms and that the only people that are still using Template Driven Forms are people who either have not been enlightened or lazy.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/04/image-4.png &#34;Angular(2+) Model Driven Forms Are Superior&#34;)&lt;figcaption&gt;Photo credit: [DarlingJack](//www.flickr.com/photos/aceofknaves/33346081006/) via [Visualhunt.com](//visualhunt.com/re/f8175d) / [ CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-are-Template-Driven-Forms&#34;&gt;&lt;a href=&#34;#What-are-Template-Driven-Forms&#34; class=&#34;headerlink&#34; title=&#34;What are Template Driven Forms&#34;&gt;&lt;/a&gt;What are Template Driven Forms&lt;/h2&gt;&lt;p&gt;For those who aren’t already familiar with the terms, let’s define them first.  A template driven form is an Angular form that has most of the form logic in the template code.  The elements that give away the fact that we are working with a template driven form are that we are using ngModel in our form fields, all of our form fields have a name attribute, and our form has ngForm declared as assigned to the form variable.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt; #&lt;span class=&#34;attr&#34;&gt;form&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;ngForm&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; [(&lt;span class=&#34;attr&#34;&gt;ngModel&lt;/span&gt;)]=&lt;span class=&#34;string&#34;&gt;&amp;quot;nameField&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In our code, each form field is handled individually.  While we might bind them all to a structure of some sort in our TypeScript code, the result is we continue to think of the data as parts rather than wholes.&lt;/p&gt;
&lt;h2 id=&#34;What-are-Model-Driven-Forms&#34;&gt;&lt;a href=&#34;#What-are-Model-Driven-Forms&#34; class=&#34;headerlink&#34; title=&#34;What are Model Driven Forms&#34;&gt;&lt;/a&gt;What are Model Driven Forms&lt;/h2&gt;&lt;p&gt;Model Driven Forms, on the other hand, put a minimal amount of information in the template. It isn’t that we eliminate the template completely, we just put more of the responsibility into the TypeScript code.&lt;/p&gt;
&lt;p&gt;Typical template code for Model Driven Forms looks like this&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;formGroup&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;form&amp;quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;formControlName&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice how much less code is needed.&lt;/p&gt;
&lt;p&gt;But, you may ask, how do I get the code in and out of the field? How do I validate the field?&lt;/p&gt;
&lt;p&gt;Oh, but you see, that is exactly why I love Model Driven forms. That’s all in the TypeScript code.&lt;/p&gt;
&lt;p&gt;But other than the fact that there is less code in the template and we can handle everything about the form in our TypeScript, the main difference between Template Driven Forms and Model Driven Forms is that Model Driven Forms let us treat the form as a whole rather than individual parts. This solves problems that used to be rather tricky using Template Driven Forms.&lt;/p&gt;
&lt;h2 id=&#34;Flexible-Validation&#34;&gt;&lt;a href=&#34;#Flexible-Validation&#34; class=&#34;headerlink&#34; title=&#34;Flexible Validation&#34;&gt;&lt;/a&gt;Flexible Validation&lt;/h2&gt;&lt;p&gt;Just so we have a reference, this is what our TypeScript code would look like to wire up our TypeScript code to our template.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt; = formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;title class_&#34;&gt;Validators&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;required&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;sex&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;title class_&#34;&gt;Validators&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;required&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;dob&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Validators&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;compose&lt;/span&gt;([ &lt;span class=&#34;title class_&#34;&gt;Validators&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;required&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;View&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;isDate&lt;/span&gt;])]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;this.form&lt;/code&gt; references a public member in the form class. It is the same name that we named our form group in the template file.&lt;/p&gt;
&lt;p&gt;Within the form group, we have a property for each field in our form group. In the sample above, we only created one input field named ‘name’. This form group references two other fields, ‘sex’ and ‘dob’. I added these in so I could show you some other features.&lt;/p&gt;
&lt;p&gt;You’ll see that we’ve defined some validations. Simple required validations until we get to ‘dob’ where we want to make sure we give them a real date. For this, we use two new features. We use the &lt;code&gt;compose&lt;/code&gt; feature to combine several validations into one. We also created a custom validation called &lt;code&gt;isDate.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Custom validations are static methods that take the control they are associated with as a parameter. Each control has a value property that you can use to retrieve the current value of the control.&lt;/p&gt;
&lt;p&gt;The problem that this solves is that now we can write any validation we need without having to make it a directive. We could also cross validate between this control and another control on the form by climbing up to the parent Form Group and back down to a sibling Form Control. It really is quite flexible.&lt;/p&gt;
&lt;h2 id=&#34;Easy-Change-Detection&#34;&gt;&lt;a href=&#34;#Easy-Change-Detection&#34; class=&#34;headerlink&#34; title=&#34;Easy Change Detection&#34;&gt;&lt;/a&gt;Easy Change Detection&lt;/h2&gt;&lt;p&gt;If you are working with Template Driven Forms, you know that the way you know a value in a control has changed is because the property it is associated with gets a new value. Setting up a simple setter lets you know the field has changed. Or if you prefer you can use the split syntax of&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[ngModel]=&amp;#39;field&amp;#39; (ngModelChange)=&amp;#39;changeHander($event)&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In Model Driven forms we can tell when any field has changed by subscribing to the valueChanges property.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;valueChanges&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;value&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;contact&lt;/span&gt; = &lt;span class=&#34;title function_&#34;&gt;deepAssign&lt;/span&gt;(&amp;#123;&amp;#125;, &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;contact&lt;/span&gt;, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The value that gets passed in has information about the field or fields that changed. So, rather than getting every field every time, you are only getting the information that actually changed. So, in your subscription, you can detect what changed and deal with that field individually if you need to. In the code above, I’m just dispatching the new state to my reducer. By doing this, my store has the current state so that when I’m ready to put it in a database, I don’t have to go around my form and gather up all the information. I already have it all.&lt;/p&gt;
&lt;h2 id=&#34;Centralized-Form-Handling&#34;&gt;&lt;a href=&#34;#Centralized-Form-Handling&#34; class=&#34;headerlink&#34; title=&#34;Centralized Form Handling&#34;&gt;&lt;/a&gt;Centralized Form Handling&lt;/h2&gt;&lt;p&gt;And that’s what I mean by “Centralized Form Handling.” All my form validation stuff is centralized. All the code I need to get the data out of my form is centralized. And, as you’ll see soon, all the code I need to get the data into my form is centralized.&lt;/p&gt;
&lt;h2 id=&#34;Completing-the-Picture&#34;&gt;&lt;a href=&#34;#Completing-the-Picture&#34; class=&#34;headerlink&#34; title=&#34;Completing the Picture&#34;&gt;&lt;/a&gt;Completing the Picture&lt;/h2&gt;&lt;p&gt;The only bit we have left out is, how do we get the data into the form?&lt;/p&gt;
&lt;p&gt;That’s pretty easy.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;patchValue&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: contact.&lt;span class=&#34;property&#34;&gt;name&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;sex&lt;/span&gt;:contact.&lt;span class=&#34;property&#34;&gt;sex&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;dob&lt;/span&gt;:contact.&lt;span class=&#34;property&#34;&gt;dob&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;toLocaleDateString&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Where contract is an object that has the new data I want to put into the corresponding fields.&lt;/p&gt;
&lt;h2 id=&#34;Testing&#34;&gt;&lt;a href=&#34;#Testing&#34; class=&#34;headerlink&#34; title=&#34;Testing&#34;&gt;&lt;/a&gt;Testing&lt;/h2&gt;&lt;p&gt;One thing we haven’t talked about is my favorite subject of testing. Because all of our logic resides in our TypeScript file, testing our screen logic becomes almost trivial. In fact, if you’ve done this correctly, you shouldn’t need to write anything more than a set of Unit Tests to make sure your screen works as expected. If you marry this with NgRX&amp;#x2F;Store, you will be even better off because you’ll never have to deal with a real database while testing your screen. And you won’t have to do a lot of mocking to achieve this.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, maybe this hasn’t convinced you. So, here is a challenge. Try it! While I have had people reject this model when I explain it to them, those who have actually tried it have seen that it really is a superior model. Which just goes to show that my dad was right, “It is amazing how much I don’t understand, when it doesn’t fit my plan.”  &lt;/p&gt;
&lt;h2 id=&#34;Further-Your-Education&#34;&gt;&lt;a href=&#34;#Further-Your-Education&#34; class=&#34;headerlink&#34; title=&#34;Further Your Education:&#34;&gt;&lt;/a&gt;Further Your Education:&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;//blog.thoughtram.io/angular/2016/06/22/model-driven-forms-in-angular-2.html&#34;&gt;Reactive Forms in Angular&lt;/a&gt; &lt;a href=&#34;//scotch.io/tutorials/using-angular-2s-model-driven-forms-with-formgroup-and-formcontrol&#34;&gt;Using Angular’s Model Driven Forms&lt;/a&gt; &lt;a href=&#34;//toddmotto.com/angular-2-forms-reactive&#34;&gt;Angular Reactive Form Fundamentals&lt;/a&gt; &lt;a href=&#34;//angular.io/docs/ts/latest/guide/reactive-forms.html&#34;&gt;Reactive Forms&lt;/a&gt; (From the Angular Site)&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/more-control-with-angular-flex-layout/</guid>
            <title>More Control with Angular Flex Layout</title>
            <link>http://davembush.github.com/more-control-with-angular-flex-layout/</link>
            <category>angular</category>
            <category>css</category>
            <category>flex</category>
            <pubDate>Tue, 11 Apr 2017 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;If you are using Angular(2+) and you are looking for an easy way to layout your components that gives you lots of flexibility and very few restrictions, you owe it to yourself to checkout &lt;a href=&#34;//github.com/angular/flex-layout&#34;&gt;Angular Flex Layout&lt;/a&gt;.  While it is still in Beta, the framework is quite usable.  I’ve been using it in one of my projects and I’ve been quite happy with the results.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/04/image-2.png &#34;More Control with Angular Flex Layout&#34;) Photo via [VisualHunt.com](//visualhunt.com/re/7d8037)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;The-Old-Days&#34;&gt;&lt;a href=&#34;#The-Old-Days&#34; class=&#34;headerlink&#34; title=&#34;The Old Days&#34;&gt;&lt;/a&gt;The Old Days&lt;/h2&gt;&lt;h3 id=&#34;Straight-CSS&#34;&gt;&lt;a href=&#34;#Straight-CSS&#34; class=&#34;headerlink&#34; title=&#34;Straight CSS&#34;&gt;&lt;/a&gt;Straight CSS&lt;/h3&gt;&lt;p&gt;I tell people, “I’ve been programming websites since ‘Al Gore invented the Internet’” Which is to say, some time prior to 1998. So, I’ve had to deal with layout issues for a very long time. At least in terms of “Internet Time.” And during that time, being able to lay things out on the page in some sort of intelligent way has matured quite a bit. But still, coding it all by hand, unless you are a fulltime CSS person, is not the best use of my time.&lt;/p&gt;
&lt;p&gt;This is, in part, why Bootstrap was created.&lt;/p&gt;
&lt;h3 id=&#34;Bootstrap&#34;&gt;&lt;a href=&#34;#Bootstrap&#34; class=&#34;headerlink&#34; title=&#34;Bootstrap&#34;&gt;&lt;/a&gt;Bootstrap&lt;/h3&gt;&lt;p&gt;I generally love Bootstrap. A great CSS framework that allows me to style my application easily, is easy to modify, and has a pretty respectable grid systems for placing my controls on the page. The problem with Bootstrap though is that the grid system is really all you have available for layout, and it is rather limited. At least that has been my experience. By default, you get a grid with 12 columns. And while you can next grids in other grids, you still end up with alignment issues. There must be an easier way.&lt;/p&gt;
&lt;h3 id=&#34;AngularJS-Material-Design&#34;&gt;&lt;a href=&#34;#AngularJS-Material-Design&#34; class=&#34;headerlink&#34; title=&#34;AngularJS Material Design&#34;&gt;&lt;/a&gt;AngularJS Material Design&lt;/h3&gt;&lt;p&gt;The Angular Flex Layout used to be part of the AngularJS Material Design project. But instead of making it part of the Angular Material Design project, it has been broken out so that we can use it in combination with other systems. Grids where they make sense and Flex Layout where that will work better.&lt;/p&gt;
&lt;h2 id=&#34;Flex-Layout-Benefits&#34;&gt;&lt;a href=&#34;#Flex-Layout-Benefits&#34; class=&#34;headerlink&#34; title=&#34;Flex Layout Benefits&#34;&gt;&lt;/a&gt;Flex Layout Benefits&lt;/h2&gt;&lt;h3 id=&#34;No-Grids&#34;&gt;&lt;a href=&#34;#No-Grids&#34; class=&#34;headerlink&#34; title=&#34;No Grids&#34;&gt;&lt;/a&gt;No Grids&lt;/h3&gt;&lt;p&gt;Now, what makes Flex Layout so great? The first thing that I think of is that I can do everything I was able to do with the Bootstrap grid system, but I have a lot more control. In fact, this past week, I converted an existing layout that was using nested grids to achieve the layout I was looking for and flattened it significantly by switching it to use Flex. You see, in Flex, you can say you want a row and then for each cell in that row, you can specify the width of the cell in any unit you want, or you can tell it to take up the remaining space. And just like Bootstrap grids, the DIVs wrap if needed.&lt;/p&gt;
&lt;h3 id=&#34;Directive-Based&#34;&gt;&lt;a href=&#34;#Directive-Based&#34; class=&#34;headerlink&#34; title=&#34;Directive Based&#34;&gt;&lt;/a&gt;Directive Based&lt;/h3&gt;&lt;p&gt;The other thing that is true of flex is that all of this control is specified at the template level. I’m not specifying layout in a file that is separate from the template I want to apply it to.&lt;/p&gt;
&lt;p&gt;Now, the CSS purist might object to this. “Style information should all go in a global CSS file so you aren’t repeating yourself.” They’ll say. &lt;/p&gt;
&lt;p&gt;Well, yes, that’s true, if you are creating multiple pages that you want to all look the same. But we are talking about Angular here. A Single Page Application. If you have multiple templates that all need the same layout information, you are probably not thinking about your components correctly. That is, your problem isn’t a CSS&amp;#x2F;Style issue, it is a component issue.&lt;/p&gt;
&lt;p&gt;In a SPA, each page looks the same because each page uses the same parent component. Rarely, do you really have a need to share layout styles. Mostly we share component look and feel. That’s different.&lt;/p&gt;
&lt;h3 id=&#34;Responsive&#34;&gt;&lt;a href=&#34;#Responsive&#34; class=&#34;headerlink&#34; title=&#34;Responsive&#34;&gt;&lt;/a&gt;Responsive&lt;/h3&gt;&lt;p&gt;And if I want a cell to be one size for desktop and another size for tablets or phones, I can easily specify what size each should be. Similar to how we would do it with Bootstrap, but in much finer detail.&lt;/p&gt;
&lt;h2 id=&#34;It’s-Just-CSS&#34;&gt;&lt;a href=&#34;#It’s-Just-CSS&#34; class=&#34;headerlink&#34; title=&#34;It’s Just CSS&#34;&gt;&lt;/a&gt;It’s Just CSS&lt;/h2&gt;&lt;p&gt;Before we move on, I want to point out that Flex Layout doesn’t do anything that the current CSS spec doesn’t already allow us to do. However, the current Flexbox CSS implementations are so new that each browser implements the spec enough different that we can’t be sure the styles will work the same way as we move from browser to browser.&lt;/p&gt;
&lt;p&gt;What Flex Layout attempts to do is to normalize the differences in a way similar to how jQuery normalized the DOM for us. Someday, we may not need Flex Layout. But until then, this is going to save you a lot of time trying to figure things out.&lt;/p&gt;
&lt;h2 id=&#34;What-You-Can-Do&#34;&gt;&lt;a href=&#34;#What-You-Can-Do&#34; class=&#34;headerlink&#34; title=&#34;What You Can Do&#34;&gt;&lt;/a&gt;What You Can Do&lt;/h2&gt;&lt;h3 id=&#34;Maintain-Aspect-Ratios&#34;&gt;&lt;a href=&#34;#Maintain-Aspect-Ratios&#34; class=&#34;headerlink&#34; title=&#34;Maintain Aspect Ratios&#34;&gt;&lt;/a&gt;Maintain Aspect Ratios&lt;/h3&gt;&lt;p&gt;I first started playing with the Flexbox CSS spec when I needed to implement a layout that included a video player that was bounded by a splitter control. As the splitter resizes the panel, the video needs to shrink and grow maintaining the aspect ratio while at the same time allowing the cell under it to grow and shrink. This is something that Flex can handle easily.&lt;/p&gt;
&lt;h3 id=&#34;Rows-with-Cells&#34;&gt;&lt;a href=&#34;#Rows-with-Cells&#34; class=&#34;headerlink&#34; title=&#34;Rows with Cells&#34;&gt;&lt;/a&gt;Rows with Cells&lt;/h3&gt;&lt;p&gt;As I’ve already mentioned, it is as easy to set up a new row and place wrapping DIVs in it as it is with Bootstrap.&lt;/p&gt;
&lt;h3 id=&#34;Columns-with-Cells&#34;&gt;&lt;a href=&#34;#Columns-with-Cells&#34; class=&#34;headerlink&#34; title=&#34;Columns with Cells&#34;&gt;&lt;/a&gt;Columns with Cells&lt;/h3&gt;&lt;p&gt;But unlike Bootstrap, you can also create groups of Columns with Cells.&lt;/p&gt;
&lt;h3 id=&#34;Responsive-Card-Layouts&#34;&gt;&lt;a href=&#34;#Responsive-Card-Layouts&#34; class=&#34;headerlink&#34; title=&#34;Responsive Card Layouts&#34;&gt;&lt;/a&gt;Responsive Card Layouts&lt;/h3&gt;&lt;p&gt;The last couple of weeks, I needed to implement a card layout that changed the number of columns displayed based on the width of the container. By using Flex Layout along with min-width and max-width on the cards, I was able to get this to layout correctly regardless of the container width.&lt;/p&gt;
&lt;h2 id=&#34;Getting-Started&#34;&gt;&lt;a href=&#34;#Getting-Started&#34; class=&#34;headerlink&#34; title=&#34;Getting Started&#34;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;&lt;p&gt;I’m not going to spend a lot of time going over the ins and outs of using Flex Layout. They do a pretty respectable job on the website. But, the one thing I did have trouble getting started with was exactly what syntax to use. Some stuff I found used &lt;code&gt;fx-flex&lt;/code&gt; syntax and other sites used &lt;code&gt;fxFlex&lt;/code&gt;. The one you want is &lt;code&gt;fxFlex&lt;/code&gt;. That and a bit of experimentation should get you well on your way.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/unit-testing-angular-2-with-jsdom/</guid>
            <title>Unit Testing Angular(2+) with JSDOM</title>
            <link>http://davembush.github.com/unit-testing-angular-2-with-jsdom/</link>
            <category>unit test</category>
            <category>jsdom</category>
            <category>karma</category>
            <pubDate>Tue, 04 Apr 2017 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Unit Testing Angular(2+) with JSDOM can be problematic unless you know the secret handshake that allows ZoneJS and JSDOM to coexist.&lt;/p&gt;
&lt;p&gt;The great thing about Angular is that you can write Unit Tests from the presentation layer all the way down to calls to the server.  But up until now, you either ran those tests in a browser, which doesn’t work well in a CI system, or you used PhantomJS, which tends to be REALLY slow!  But there is a better way, and hopefully, by the time this post goes live, the patches needed to use JSDOM will be available.  If not, I’ll show you the hack that I’ve found works and the pull request I’m hoping will go live.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/04/image.png &#34;Unit Testing Angular(2+) with JSDOM&#34;)&lt;figcaption&gt;Photo credit: [Juanedc](//www.flickr.com/photos/juanedc/14896919066/) via [Visual Hunt](//visualhunt.com/re/cf947c) / [ CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Why-JSDOM&#34;&gt;&lt;a href=&#34;#Why-JSDOM&#34; class=&#34;headerlink&#34; title=&#34;Why JSDOM?&#34;&gt;&lt;/a&gt;Why JSDOM?&lt;/h2&gt;&lt;p&gt;As I mentioned in the introduction, there are two problems that JSDOM fixes.&lt;/p&gt;
&lt;p&gt;To run the Angular unit tests, you need to run them in a browser. The problem with this is that you would need to have a browser installed on your CI server to run them, if you run them at all. It can be done, but if you are working in an environment like the one I work in, it isn’t going to be easy.&lt;/p&gt;
&lt;p&gt;The second choice is to use PhantomJS. Unfortunately, PhantomJS, while easy to install, runs slowly. For all but the most trivial of applications, this isn’t going to work well.&lt;/p&gt;
&lt;p&gt;JSDOM, on the other hand, runs fast like a browser, and doesn’t have the problems that running it on a CI system has. This is because it is a headless browser that never renders. All it does is produce HTML. For unit tests, this is all we really care about. And because it is running inside of Node, it is running as fast as the V8 engine will let it. Making it theoretically faster than running the tests in Chrome. I say, “theoretically faster” because I have not tested this and the V8 engines in the most recent browser tends to be a bit ahead of the V8 engine used in the most recent version of Node.&lt;/p&gt;
&lt;h2 id=&#34;The-Problem&#34;&gt;&lt;a href=&#34;#The-Problem&#34; class=&#34;headerlink&#34; title=&#34;The Problem&#34;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;&lt;p&gt;Knowing this was possible caused me to give it a try. What I found was that I routinely crashed with the following error.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Cannot set property onreadystatechange of [object Object] which has only a getter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As I googled this, I found several fixes for JSDOM that would allow this to work, but I also discovered that JSDOM did not consider this an issue they needed to fix. And rightly so, why should they adapt just so it would work for Angular2? But, what in the Angular2 code would cause this problem. By doing a search for &lt;code&gt;onreadystatechange&lt;/code&gt; in my node_modules directory, I discovered that ZoneJS was:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Saving off the original definition of &lt;code&gt;onreadystatechange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overriding the definition with a getter (only)&lt;/li&gt;
&lt;li&gt;Setting the definition back to the original&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which all works well if the original &lt;code&gt;onreadystatechange&lt;/code&gt; has a definition.  But in the case of JSDOM, it doesn’t. Then, when they set the definition back, nothing happens and we keep the definition they created.&lt;/p&gt;
&lt;h2 id=&#34;Solution-1&#34;&gt;&lt;a href=&#34;#Solution-1&#34; class=&#34;headerlink&#34; title=&#34;Solution 1&#34;&gt;&lt;/a&gt;Solution 1&lt;/h2&gt;&lt;p&gt;The file in question is &lt;code&gt;property-descriptor.ts&lt;/code&gt; under the &lt;code&gt;lib/browser&lt;/code&gt; directory (the js version is in the file &lt;code&gt;zone.js&lt;/code&gt; under the &lt;code&gt;dist&lt;/code&gt; directory). Sticking with the TS file… of version 0.8.5, scroll down to line 64 and you’ll see that they retrieve the current definition but never verify that they actually got something back. But at line 80 they set it back to an empty object if it doesn’t exist.&lt;/p&gt;
&lt;p&gt;The easy fix that seems to work for me, is to just change the new definition so that it works if that is the one that is left over after this function completes:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;defineProperty&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;XMLHttpRequest&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;onreadystatechange&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;enumerable&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;configurable&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;get&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;orsc&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;set&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;f&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;orsc&lt;/span&gt; = f;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Because we’ve changed the getter from returning a hardcoded value, we also need to set &lt;code&gt;onreadystatechange&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; req = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;XMLHttpRequest&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;req.&lt;span class=&#34;property&#34;&gt;onreadystatechange&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; result = !!req.&lt;span class=&#34;property&#34;&gt;onreadystatechange&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The full fix looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;canPatchViaPropertyDescriptor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((isBrowser || isMix) &amp;amp;&amp;amp; !&lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getOwnPropertyDescriptor&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;HTMLElement&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;onclick&amp;#x27;&lt;/span&gt;) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Element&lt;/span&gt; !== &lt;span class=&#34;string&#34;&gt;&amp;#x27;undefined&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// WebKit https://bugs.webkit.org/show_bug.cgi?id=134364&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// IDL interface attributes are not configurable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; desc = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getOwnPropertyDescriptor&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Element&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;onclick&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (desc &amp;amp;&amp;amp; !desc.&lt;span class=&#34;property&#34;&gt;configurable&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; xhrDesc = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getOwnPropertyDescriptor&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;XMLHttpRequest&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;onreadystatechange&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// add enumerable and configurable here because in opera&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// by default XMLHttpRequest.prototype.onreadystatechange is undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// without adding enumerable and configurable will cause onreadystatechange&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// non-configurable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;defineProperty&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;XMLHttpRequest&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;onreadystatechange&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;enumerable&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;configurable&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;get&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;orsc&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;set&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;f&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;orsc&lt;/span&gt; = f;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; req = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;XMLHttpRequest&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  req.&lt;span class=&#34;property&#34;&gt;onreadystatechange&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; result = !!req.&lt;span class=&#34;property&#34;&gt;onreadystatechange&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// restore original desc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;defineProperty&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;XMLHttpRequest&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;onreadystatechange&amp;#x27;&lt;/span&gt;, xhrDesc || &amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Solution-2&#34;&gt;&lt;a href=&#34;#Solution-2&#34; class=&#34;headerlink&#34; title=&#34;Solution 2&#34;&gt;&lt;/a&gt;Solution 2&lt;/h2&gt;&lt;p&gt;The &lt;a href=&#34;//github.com/angular/zone.js/pull/711/commits/edc9d7a2145f9ddc4acbe6a49d1325d676c65429&#34;&gt;current pull request&lt;/a&gt; adds a bit more code that I’m assuming is needed. I haven’t tested this, but I’m assuming it is a safer alternative than my hack.&lt;/p&gt;
&lt;h2 id=&#34;One-Additional-Gotcha&#34;&gt;&lt;a href=&#34;#One-Additional-Gotcha&#34; class=&#34;headerlink&#34; title=&#34;One Additional Gotcha!&#34;&gt;&lt;/a&gt;One Additional Gotcha!&lt;/h2&gt;&lt;p&gt;Once I had this basic issue solved, I was able to run my suite of test except one. It turns out &lt;code&gt;element.innerText&lt;/code&gt; doesn’t exist in JSDOM. There is a technical reason for this that I won’t discuss here other than to say it is, evidently, somehow dependent on the rendering engine, and since JSDOM has no rendering engine (remember, it just produces HTML) it can’t really implement &lt;code&gt;innerText&lt;/code&gt;. So, I had to refactor my test to use &lt;code&gt;innerHTML&lt;/code&gt; instead. Trivial issue. Just something you need to be aware of.&lt;/p&gt;
&lt;h2 id=&#34;Setting-Up-Karma&#34;&gt;&lt;a href=&#34;#Setting-Up-Karma&#34; class=&#34;headerlink&#34; title=&#34;Setting Up Karma&#34;&gt;&lt;/a&gt;Setting Up Karma&lt;/h2&gt;&lt;p&gt;Now, from here to the end, we are going to assume that this got fixed, or you are using one of the solutions above. Now, how do we set karma up to use JSDOM instead of Chrome or PhantomJS?&lt;/p&gt;
&lt;p&gt;Well, for starters, you’ll need to &lt;code&gt;npm install --save-dev jsdom karma-jsdom-launcher&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, you’ll need to make a few changes to your &lt;code&gt;karma.conf.js&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;First, in the plugins array, add &lt;code&gt;require(&amp;#39;karma-jsdom-launcher&amp;#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, at the bottom of the file, change the browsers line to specify &lt;code&gt;&amp;#39;jsdom&amp;#39;&lt;/code&gt; instead of &lt;code&gt;&amp;#39;Chrome&amp;#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I normally just comment out the Chrome line and put in a line for jsdom so I can use Chrome to debug when I need to.&lt;/p&gt;
&lt;p&gt;I’ve always said that Angular mixes the best of AngularJS and React and with this fix, we now have some React Unit Testing goodness added into the mix.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/secrets-to-styling-angular2/</guid>
            <title>Secrets to Styling Angular2</title>
            <link>http://davembush.github.com/secrets-to-styling-angular2/</link>
            <category>angular</category>
            <category>animation</category>
            <category>css</category>
            <pubDate>Tue, 31 Jan 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;This past week, while working on a new project, I discovered some secrets to styling Angular2 that I don’t think are very well-known.&lt;/p&gt;
&lt;p&gt;There are two specific issues I needed to solve this week that took a bit of digging. The first was that I wanted my routes to fade in and out as I move between routes. The second was that I was using a grid control from a third party and I needed to style an inner component. We will cover both as well as some more basic operations.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/01/image-2.png &#34;Secrets to Styling Angular2&#34;) Photo via [Visual hunt](//visualhunt.com/)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Angular2-Version&#34;&gt;&lt;a href=&#34;#Angular2-Version&#34; class=&#34;headerlink&#34; title=&#34;Angular2 Version&#34;&gt;&lt;/a&gt;Angular2 Version&lt;/h2&gt;&lt;p&gt;Just so there isn’t any confusion, this article is accurate for Angular 2.x as of 2.5&lt;/p&gt;
&lt;h2 id=&#34;The-Basics&#34;&gt;&lt;a href=&#34;#The-Basics&#34; class=&#34;headerlink&#34; title=&#34;The Basics&#34;&gt;&lt;/a&gt;The Basics&lt;/h2&gt;&lt;p&gt;Just to make sure we have the basics covered, we want to start with generic styling. The temptation might be to style each of your components independently. This would be a mistake. Angular2 doesn’t throw out all the existing CSS rules. Instead, it adds to them. Therefore, anything you can do with a generic style should be handled at that level.&lt;/p&gt;
&lt;p&gt;Since I generally use Bootstrap to theme my applications, this is what I’ll reference here. Using the angular-cli, the way you would add the CSS theme information is to include it in the angular-cli.json file of your application in the “styles” section.&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;styles&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;../node_modules/bootstrap/dist/css/bootstrap.css&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;styles.css&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;],&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you have a component that you need to style in a way that is outside the bounds of the general CSS you’ve included, you can add CSS to the components CSS file. This all works as expected with one small exception. The CSS you add to this file only applies to the component and will override any other CSS that might already be applied by the general CSS.&lt;/p&gt;
&lt;p&gt;This is Angular2 CSS 101 stuff. I’ve written pretty extensively about this in the article “&lt;a href=&#34;https://medium.com/@davembush/adding-css-and-javascript-to-an-angular-cli-project-2b843a8283f3&#34;&gt;Adding CSS and JavaScript to an Angular-CLI Project&lt;/a&gt;”&lt;/p&gt;
&lt;h2 id=&#34;Host-access&#34;&gt;&lt;a href=&#34;#Host-access&#34; class=&#34;headerlink&#34; title=&#34;Host access&#34;&gt;&lt;/a&gt;Host access&lt;/h2&gt;&lt;p&gt;But there are times when the thing you want to style is the host container of the component. Not just the HTML inside it. There are two ways that you might do this.&lt;/p&gt;
&lt;h3 id=&#34;host&#34;&gt;&lt;a href=&#34;#host&#34; class=&#34;headerlink&#34; title=&#34;:host&#34;&gt;&lt;/a&gt;:host&lt;/h3&gt;&lt;p&gt;The first way is to use the &lt;code&gt;:host&lt;/code&gt; directive in your CSS. But you’ll need to be careful with this, as I found out recently.&lt;/p&gt;
&lt;p&gt;You see, you might expect that&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-pseudo&#34;&gt;:host&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;background-color&lt;/span&gt;: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;would cause the background color of the element to turn blue. But if you try that with a simple component you’ll find out that nothing shows up with a background color of blue because by default an element that isn’t part of the HTML spec has no size and basically disappears from the display. We want it to display an essentially be a container for all our other HTML so what you really want to do is something like:&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-pseudo&#34;&gt;:host&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;background-color&lt;/span&gt;: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;height&lt;/span&gt;: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;width&lt;/span&gt;: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;position&lt;/span&gt;: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The only way it will show up, in my experience, is to make the position ‘absolute.’ Remember, we are doing this only because we want the :host to have some impact as a container for all the other elements that might be in it. Normally, you can get by styling the html inside it.&lt;/p&gt;
&lt;h3 id=&#34;HostBinding&#34;&gt;&lt;a href=&#34;#HostBinding&#34; class=&#34;headerlink&#34; title=&#34;@HostBinding()&#34;&gt;&lt;/a&gt;@HostBinding()&lt;/h3&gt;&lt;p&gt;An alternate way of setting style on the component container is by using the @HostBinding() decorator. What this does is that it binds a variable to the containers attribute so that you can change the value from your TypeScript code.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Component(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  selector: &lt;span class=&#34;string&#34;&gt;&amp;#x27;app-view&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  templateUrl: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./view.component.html&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  styleUrls: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;./view.component.css&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ViewComponent&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnInit&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  @HostBinding(&lt;span class=&#34;string&#34;&gt;&amp;#x27;style.backgroundColor&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    backgroundColr = &lt;span class=&#34;string&#34;&gt;&amp;#x27;blue&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  constructor() &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ngOnInit() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Child-Elements&#34;&gt;&lt;a href=&#34;#Child-Elements&#34; class=&#34;headerlink&#34; title=&#34;Child Elements&#34;&gt;&lt;/a&gt;Child Elements&lt;/h2&gt;&lt;p&gt;Now, the other problem you might run into is that you’ll be using some third-party control and you’ll want to style some container element inside of it to fit your needs. Again, this isn’t a particularly common problem, but it might just take you a while to find the answer.&lt;/p&gt;
&lt;p&gt;The first thing you may try is to just style the markup.&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;component-parent component-child &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* style stuff here */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But, try as you might, you’ll never get those styles to show up. You can style the &lt;code&gt;component-parent&lt;/code&gt; all you want, but not the &lt;code&gt;component-child&lt;/code&gt; no matter what you do.&lt;/p&gt;
&lt;p&gt;Here is the trick that allows you to style the &lt;code&gt;component-child&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;component-parent &amp;gt;&amp;gt;&amp;gt; component-child &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /\* style stuff here */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;That &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; thing is call the “piercing” operator. All you need to know is that it is how you get the child elements styled.&lt;/p&gt;
&lt;h2 id=&#34;Animations&#34;&gt;&lt;a href=&#34;#Animations&#34; class=&#34;headerlink&#34; title=&#34;Animations&#34;&gt;&lt;/a&gt;Animations&lt;/h2&gt;&lt;p&gt;You might wonder, at first, why we would need an Animation API in Angular2. Aren’t CSS animations good enough? Well, actually… It isn’t that CSS animations aren’t good enough, but because Angular2 “hide” and “shows” elements by putting them into and out of the DOM and does other DOM manipulations that conflict with CSS animations, you will find there are time you are going to need to use the Angular2 Animation API.&lt;/p&gt;
&lt;p&gt;The Animation API works in a similar way to how the CSS Animations work so this isn’t going to be a big stretch for you if you are already familiar with CSS Animations.&lt;/p&gt;
&lt;p&gt;To animate a component, you are going to need to add an animations section to the @Component decorator of your component:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Component(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  selector: &lt;span class=&#34;string&#34;&gt;&amp;#x27;app-view&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  templateUrl: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./view.component.html&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  styleUrls: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;./view.component.css&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  animations: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/* animation definitions here */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The question then, is “how do we define an animation” Since animations is obviously an array, we want to know, what is it an array of? It is an array of triggers. A trigger has two parts. A name, an an array that specifies how the animation should work. This name gets used in our template using the [@name] syntax to bind to a component property.&lt;/p&gt;
&lt;p&gt;Next, we define each of the states we want to respond to and style we want to end up with when that state is triggered.&lt;/p&gt;
&lt;p&gt;Finally, we define each of the transitions.&lt;/p&gt;
&lt;p&gt;The combination gives us a lot of flexibility. While we can create the same kind of transitions that we might have using CSS, we can also create transitions the we never could have using CSS. All we need to do is have our component change the value of some member variable in some predictable way and the transitions will kick into work.&lt;/p&gt;
&lt;p&gt;You can read more about transitions on the &lt;a href=&#34;//angular.io/docs/ts/latest/guide/animations.html&#34;&gt;Angular2 documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Route-Animations&#34;&gt;&lt;a href=&#34;#Route-Animations&#34; class=&#34;headerlink&#34; title=&#34;Route Animations&#34;&gt;&lt;/a&gt;Route Animations&lt;/h2&gt;&lt;p&gt;Route animations are similar. However, this is where everything I’ve said above comes together.&lt;/p&gt;
&lt;p&gt;The first problem you are going to run into trying to animate a route is that the state you want to base your animations on is the route, which is the parent component of your component you are probably trying to animate. But the reality is, what you are really doing is animating something when it is first displayed and animating it again when it is going away. That is, when it is placed into the DOM and when it is being removed from the DOM. Angular2 has to predefined states for this, ‘:enter’ and ‘:leave’.&lt;/p&gt;
&lt;p&gt;So, we create a trigger named ‘routeAnimation’ and in our route components we bind to it using the @HostBinding() decorator.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@HostBinding(&lt;span class=&#34;string&#34;&gt;&amp;#x27;@routeAnimation&amp;#x27;&lt;/span&gt;) routeAnimation = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Everything else you need to know I’ve already discussed above.&lt;/p&gt;
&lt;p&gt;For more information about routing animations, you can check the &lt;a href=&#34;//angular.io/docs/ts/latest/guide/router.html&#34;&gt;router documentation on the Angular2 documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Finally&#34;&gt;&lt;a href=&#34;#Finally&#34; class=&#34;headerlink&#34; title=&#34;Finally&#34;&gt;&lt;/a&gt;Finally&lt;/h2&gt;&lt;p&gt;It took me way too long to figure this out because a lot of the information has changed since RC0. Hopefully, it will point you in the right direction.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/amazing-angular2-dom-tips-tricks-and-warnings/</guid>
            <title>Amazing Angular2 DOM Tips, Tricks, and Warnings</title>
            <link>http://davembush.github.com/amazing-angular2-dom-tips-tricks-and-warnings/</link>
            <category>angular</category>
            <category>typescript</category>
            <category>DOM</category>
            <pubDate>Tue, 17 Jan 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve been working with Angular2 now since RC0 and I’ve learned quite a few things about Angular2 DOM tips, tricks, and warnings that you’ll want to pay attention to as you get started.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/01/image.png &#34;Amazing Angular2 DOM Tips, Tricks and Warnings&#34;)&lt;figcaption&gt;Photo credit: [Sister72](//www.flickr.com/photos/sis/196867770/) via [VisualHunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Avoid-DOM-Manipulation&#34;&gt;&lt;a href=&#34;#Avoid-DOM-Manipulation&#34; class=&#34;headerlink&#34; title=&#34;Avoid DOM Manipulation&#34;&gt;&lt;/a&gt;Avoid DOM Manipulation&lt;/h2&gt;&lt;p&gt;One of the first things you need to understand about how Angular2 works compared to AngularJS is that any DOM manipulation you do using Angular2 isn’t really manipulating the DOM. At least not directly. Everything that happens at the DOM level is a result of a state change in the component. When Angular2 realizes that the state has changed, it changes the DOM to reflect the change.&lt;/p&gt;
&lt;p&gt;What this means, generally, is that if you need to know about some state change that happened at the DOM level, you’ll want to track that change in your component class. Can you access the DOM directly from your code? Yes. And sometimes you might just have to. But you’ll produce code that is much easier to test if you avoid having your code reach up into the DOM to get current state information.&lt;/p&gt;
&lt;p&gt;You may have already heard about the experimental Web Workers support in Angular2. To make sure you can use this, it would be best to avoid direct DOM manipulation until we are sure the Web Workers implementation will be able to deal with this properly. What this all means in practical terms is that you’ll want to avoid using libraries such as jQuery to manipulate your code and instead replicate that behavior using native Angular2 calls.&lt;/p&gt;
&lt;h2 id=&#34;Only-Generate-the-HTML-You-Need&#34;&gt;&lt;a href=&#34;#Only-Generate-the-HTML-You-Need&#34; class=&#34;headerlink&#34; title=&#34;Only Generate the HTML You Need&#34;&gt;&lt;/a&gt;Only Generate the HTML You Need&lt;/h2&gt;&lt;p&gt;On a similar note, you only want to render the HTML you’re going to need at any one time. Not everything all at once. This will allow your code to render much more efficiently.&lt;/p&gt;
&lt;p&gt;For example, if you have a menu that has dropdown menus, the temptation is going to be to render all the HTML the menu may need all at once and use JavaScript to show or hide the dropdowns as you mouse over them or click them. But with Angular2, you could use the *ngIf directive to include and exclude the menu option as you need them to show. This reduces the initial page size and simplifies your code. Been there, done that.&lt;/p&gt;
&lt;p&gt;By the way, there are other directives you’ll want to get familiar with, but *ngIf is probably the most often ignored because you are likely to try to use display:none to hide an element instead of just eliminating it from the DOM completely.&lt;/p&gt;
&lt;h2 id=&#34;Minimize-Change-Detection&#34;&gt;&lt;a href=&#34;#Minimize-Change-Detection&#34; class=&#34;headerlink&#34; title=&#34;Minimize Change Detection&#34;&gt;&lt;/a&gt;Minimize Change Detection&lt;/h2&gt;&lt;p&gt;I was recently working on a component that displayed a nested array as a set of tabs and dropdown menus. Everything was working great but I wanted to check the CSS on the dropdown so I could make some adjustments. This is when I discovered that the HTML was being rewritten about once a second even though nothing had changed. I couldn’t see this on the main screen, but it became super evident when I opened the developer tools.&lt;/p&gt;
&lt;p&gt;Fortunately, I had already learned about OnPush change detection. So I was able to set my component to use Push notification:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Component(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    templateUrl: &lt;span class=&#34;string&#34;&gt;&amp;#x27;template.html&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    changeDetection: ChangeDetectionStrategy.OnPush &lt;span class=&#34;comment&#34;&gt;// &amp;lt;===&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;View&lt;/span&gt; ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now the component only re-renders when the data it is looking at changes.&lt;/p&gt;
&lt;p&gt;For Push notification to work correctly, all the data that the component is looking at has to be &lt;a href=&#34;/what-if-everything-was-immutable/&#34;&gt;immutable&lt;/a&gt; or an &lt;a href=&#34;/reasons-to-use-rxjs-today/&#34;&gt;Observable&lt;/a&gt;. These are both patterns you should become familiar with because any well architected Angular2 application will make significant use of both of these.&lt;/p&gt;
&lt;h2 id=&#34;Accessing-the-Component-Container&#34;&gt;&lt;a href=&#34;#Accessing-the-Component-Container&#34; class=&#34;headerlink&#34; title=&#34;Accessing the Component Container&#34;&gt;&lt;/a&gt;Accessing the Component Container&lt;/h2&gt;&lt;p&gt;Another problem I recently had was that I wanted to use the class attributes from the container on a child component. The question I had trouble getting the answer to was, “just how to I access the container element?” This was very easy. It is always easy once you know the secret handshake.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.elementRef&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There are various properties and methods hanging off that which might be useful to you. In my case, I wanted to go after the classes that had been attached and reattach them to the INPUT element that was a child of the component. So, I needed to use:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.elementRef.nativeElement.classList&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Accessing-Child-Elements&#34;&gt;&lt;a href=&#34;#Accessing-Child-Elements&#34; class=&#34;headerlink&#34; title=&#34;Accessing Child Elements&#34;&gt;&lt;/a&gt;Accessing Child Elements&lt;/h2&gt;&lt;p&gt;Similarly, you might want to access child elements from your code. This is much easier to find when you search the Internet.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@ViewChild(&lt;span class=&#34;string&#34;&gt;&amp;#x27;input&amp;#x27;&lt;/span&gt;) input: ElementRef;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;@ViewChild is an attribute that tells the Angular2 compiler to look for an element in the template with the variable named input. I’ll explain template variables in a bit. In the code above, I’m going after the INPUT element with a template variable named “input” so I typed it as ElementRef since I don’t have a specific class name for it.&lt;/p&gt;
&lt;p&gt;If you only have one unique element, you can just use code that looks more like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@ViewChild(ElementClassName) variableName: ElementClassName;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Of course, you’ll want to make sure you imported &lt;code&gt;ElementClassName&lt;/code&gt; for this to work. In this case, I’m going after a specific type of element so I type the variable as that type. Now my typescript code knows what properties, fields, and methods I have available.&lt;/p&gt;
&lt;h2 id=&#34;Template-Variables&#34;&gt;&lt;a href=&#34;#Template-Variables&#34; class=&#34;headerlink&#34; title=&#34;Template Variables&#34;&gt;&lt;/a&gt;Template Variables&lt;/h2&gt;&lt;p&gt;As I mentioned above, you can create template variables to allow you to access your child elements from your typescript code. But you can use them for other purposes as well. To create a template variable, just put a hash in front of the variable name you want to use.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; #&lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;...&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now you can use this in your typescript using ViewChild() as explained above, or you can use it in your template as a regular variable.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123; &amp;#123;firstName.value&amp;#125;&amp;#125;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Use-a-Model-Driven-Approach&#34;&gt;&lt;a href=&#34;#Use-a-Model-Driven-Approach&#34; class=&#34;headerlink&#34; title=&#34;Use a Model Driven Approach&#34;&gt;&lt;/a&gt;Use a Model Driven Approach&lt;/h2&gt;&lt;p&gt;If you are coming from AngularJS, you may be tempted to use what is commonly referred to as a Template Driven approach. This is approach that relies no “Two-Way” data-binding to update the data in the typescript code to the fields in your template. While this works for a lot of simple apps, you never know when a simple app will turn into a complex app and your Template based approach will quickly become insufficient.&lt;/p&gt;
&lt;p&gt;No, what you want to use is the Model Driven approach. This approach gives you A LOT more control over what we typically are attempting to do in our forms and scales well as the complexity of our forms increases.&lt;/p&gt;
&lt;p&gt;I’ve written a lot more about this in my post on &lt;a href=&#34;/awesome-angular2-architecture-options-and-opinions/&#34;&gt;Angular2 Architecture&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Obviously, there is a lot to learn. If you keep using Angular2 like you’ve been using AngularJS, you are going to run into a lot of difficulties. It pays to learn how a system works prior to using it for a real application.&lt;/p&gt;
&lt;p&gt;What have you learned along the way? Leave a comment.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/what-if-everything-was-immutable/</guid>
            <title>What if Everything Was Immutable?</title>
            <link>http://davembush.github.com/what-if-everything-was-immutable/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>immutable</category>
            <pubDate>Tue, 10 Jan 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;The first time a programmer who was trained in the classical procedural&amp;#x2F;object oriented history is confronted with the concept of making everything immutable, the first question that comes to mind is, “won’t that make my application slow?”  This is because of how most programmers have been trained.  Making everything immutable generally means that we must copy a lot of memory from one place to another.  Moving memory around is generally considered slow.&lt;/p&gt;
&lt;p&gt;And so, most programmers dismiss the whole idea as crazy talk.  But is it really all that crazy?&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/12/image-4.png &#34;What if Everything Was Immutable?&#34;)&lt;figcaption&gt;Photo credit: [Paul Stevenson](//www.flickr.com/photos/pss/354177349/) via [Visualhunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Two-Paths&#34;&gt;&lt;a href=&#34;#Two-Paths&#34; class=&#34;headerlink&#34; title=&#34;Two Paths&#34;&gt;&lt;/a&gt;Two Paths&lt;/h2&gt;&lt;p&gt;So, let’s look at some computer history.  If you’ve been in this industry any length of time, you’ve probably heard the name Turing and you know the Turing machine has something to do with programming.  But you may not know how it impacts your day to day programming life.&lt;/p&gt;
&lt;p&gt;In short, Turing is the guy we can point to as the father of modern computing, complete with the fact that we generally process everything sequentially.  It is this sequential processing that causes us to have instructions working on memory and it has served us well.&lt;/p&gt;
&lt;p&gt;But there is another branch of computer science that was made popular by Alonzo Church that is based on Lambda Calculus.  This branch of computer science is where the bulk of Functional Programming can be traced back to.  In this branch, everything is a function.  Any parameters you pass in cannot have their state changed and the value that is returned is a new value.&lt;/p&gt;
&lt;p&gt;The main benefits to this newer functional style are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If I pass in the same parameters, I’ll always get back the same value.&lt;/li&gt;
&lt;li&gt;State is never mutated accidentally because state is never mutated.&lt;/li&gt;
&lt;li&gt;Functions never have an unpredictable side effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just think of how many bugs you wouldn’t have introduced into your code had this been true when you wrote it.&lt;/p&gt;
&lt;h2 id=&#34;Convergence&#34;&gt;&lt;a href=&#34;#Convergence&#34; class=&#34;headerlink&#34; title=&#34;Convergence&#34;&gt;&lt;/a&gt;Convergence&lt;/h2&gt;&lt;p&gt;Recently, functional programming has become more popular and the two branches of computer science have started to merge.  Taking the best of both worlds and using what makes sense from each.  But, we’ve already had at least one immutable object in most of our object-oriented languages.  The String object.  So, what does String give us that we use nearly every day?&lt;/p&gt;
&lt;h2 id=&#34;Immutable-Strings&#34;&gt;&lt;a href=&#34;#Immutable-Strings&#34; class=&#34;headerlink&#34; title=&#34;Immutable Strings&#34;&gt;&lt;/a&gt;Immutable Strings&lt;/h2&gt;&lt;h3 id=&#34;No-Side-Effects&#34;&gt;&lt;a href=&#34;#No-Side-Effects&#34; class=&#34;headerlink&#34; title=&#34;No Side Effects&#34;&gt;&lt;/a&gt;No Side Effects&lt;/h3&gt;&lt;p&gt;As we’ve already mentioned, that fact that something is immutable means it can’t be changed.  So, when you pass a string as a parameter, even though it is an object, the string won’t change if the function changes the string.  This is good news because the calling function doesn’t have to protect itself against unintended consequences.&lt;/p&gt;
&lt;h3 id=&#34;Memory-Efficiency&#34;&gt;&lt;a href=&#34;#Memory-Efficiency&#34; class=&#34;headerlink&#34; title=&#34;Memory Efficiency&#34;&gt;&lt;/a&gt;Memory Efficiency&lt;/h3&gt;&lt;p&gt;The other thing that happens with immutable object is that every string representation only exist once.  So, we never duplicate memory.&lt;/p&gt;
&lt;p&gt;What do I mean by this? Well, take this example from C#&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; string1 = &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; string2 = &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (string1 == string2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;writeLn&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;is equal&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Testing-Equality&#34;&gt;&lt;a href=&#34;#Testing-Equality&#34; class=&#34;headerlink&#34; title=&#34;Testing Equality&#34;&gt;&lt;/a&gt;Testing Equality&lt;/h3&gt;&lt;p&gt;&lt;code&gt;string1&lt;/code&gt; and &lt;code&gt;string2&lt;/code&gt; point to the same object “abc” not two different instances of “abc”.  This is why we can write &lt;code&gt;string1 == string2&lt;/code&gt;.  Unfortunately, the &amp;#x3D;&amp;#x3D; operator is overloaded so we are still doing string comparison.  &lt;/p&gt;
&lt;p&gt;But if you want efficiency, you can use the &lt;a href=&#34;/net-string-pool-not-just-for-the-compiler/&#34;&gt;Intern()&lt;/a&gt; method and ReferenceEquals() to bypass this overload and use pointer comparison.  This is a good thing because we test for string equality and inequality so often the performance penalty we incur from making strings immutable is more than offset by the performance gains we get testing for equality.&lt;/p&gt;
&lt;h2 id=&#34;Make-Everything-Immutable&#34;&gt;&lt;a href=&#34;#Make-Everything-Immutable&#34; class=&#34;headerlink&#34; title=&#34;Make Everything Immutable&#34;&gt;&lt;/a&gt;Make Everything Immutable&lt;/h2&gt;&lt;p&gt;If you think about the code you typically write, how much of the time would you benefit from every object in your code working in a similar way to strings? Wouldn’t it be a great thing if you knew that when you passed an object into a function, that function was not going to change the object at all?  Can you think of times that might have prevented a bug? Think of the memory optimizations you would benefit from.&lt;/p&gt;
&lt;p&gt;And how much easier would it be to test for equality if all you had to test was a memory pointer?  Not only would it be fast, but it would be reliable and a lot less work to code.&lt;/p&gt;
&lt;h2 id=&#34;Immutability-is-Hard-–-or-is-it&#34;&gt;&lt;a href=&#34;#Immutability-is-Hard-–-or-is-it&#34; class=&#34;headerlink&#34; title=&#34;Immutability is Hard – or is it?&#34;&gt;&lt;/a&gt;Immutability is Hard – or is it?&lt;/h2&gt;&lt;p&gt;So now that you know what the benefits are, you are probably thinking, “Yes, but coding immutability into a language that doesn’t support it natively is a lot of work.  It is so much easier to write code the way I always have, even if it isn’t quite a safe.” Yes, I feel your pain.  But there are libraries for that.  Say you could get all the benefits of immutability with very little programming or performance cost?  Would you be interested? I know I was.  Just having the benefits of immutable data with the performance was benefit enough for me.  But then I was introduced to &lt;a href=&#34;//facebook.github.io/immutable-js/&#34;&gt;immutable.j&lt;/a&gt;s and I realized that I could have all of the benefits with a lot less performance cost than I was expecting because the library uses data structures that allow us to manipulate pointers rather than raw data.  The result is that only pointers to data that have actually changed change.  Nearly everything else stays as it was and adding items to List instead of arrays and Maps ends up being a lot more efficient.&lt;/p&gt;
&lt;h2 id=&#34;Impact-on-Angular2&#34;&gt;&lt;a href=&#34;#Impact-on-Angular2&#34; class=&#34;headerlink&#34; title=&#34;Impact on Angular2&#34;&gt;&lt;/a&gt;Impact on Angular2&lt;/h2&gt;&lt;p&gt;By using immutable object in Angular2 along with libraries like &lt;a href=&#34;//github.com/ngrx/store&#34;&gt;NgRX&amp;#x2F;Store&lt;/a&gt; you can see some major performance increases because the view will be able to determine when it needs to change based on simple object pointer comparison rather than checking entire objects.  For compute-intensive tasks, this is going to be a huge benefit.&lt;/p&gt;
&lt;p&gt;But it is also well worth learning how to use this before you ever need it simply because it will be a new way of thinking about your project that may take some time to get accustomed to.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/awesome-angular2-architecture-options-and-opinions/</guid>
            <title>Awesome Angular2 Architecture Options and Opinions</title>
            <link>http://davembush.github.com/awesome-angular2-architecture-options-and-opinions/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>archietcture</category>
            <pubDate>Tue, 27 Dec 2016 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;On the subject of Angular2 Architecture, the perception is that Angular 2 is a highly-opinionated architecture. But even though there is a &lt;a href=&#34;/angular.io/styleguide&#34;&gt;style guide for Angular 2&lt;/a&gt;, there are a lot of decisions that still need to be made when working on any but the most trivial of applications. And even then, since most applications take on a life of their own, one could make the case that you need to make these decisions for any application you are building regardless of the initial size. Applications grow up. But, that’s another blog post&lt;/p&gt;
&lt;p&gt;I’ve identified, and have formed opinions about 5 areas that Angular 2 leaves open for decisions. Areas that if you don’t spend time considering the choices and making decisions could cost you in the future&lt;/p&gt;
&lt;p&gt;The five areas I’ve identified are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Handling Forms&lt;/li&gt;
&lt;li&gt;Page State Management&lt;/li&gt;
&lt;li&gt;Component State Management&lt;/li&gt;
&lt;li&gt;Data Flow&lt;/li&gt;
&lt;li&gt;Client Side Data&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;![](/uploads/2016/12/image-2.png &#34;Awesome Angular2 Architecture Options and Opinions&#34;) Photo via [africaniscool](//pixabay.com/en/users/africaniscool-216435/) via [Visualhunt.com](//visualhunt.com/photos/business/)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Handling-Forms&#34;&gt;&lt;a href=&#34;#Handling-Forms&#34; class=&#34;headerlink&#34; title=&#34;Handling Forms&#34;&gt;&lt;/a&gt;Handling Forms&lt;/h2&gt;&lt;p&gt;There are, at this point, two ways of dealing with forms in Angular 2. The first looks a lot like Angular 1 in that it is “Template Driven.” That is, everything you would describe about the form goes in the template. Using declarative syntax, the bulk of your form logic is declared in “HTML” like syntax and bound to your TypeScript code in a “code behind” kind of way. In a lot of ways, this will be very familiar to people who have coded ASP.NET or Angular 1&lt;/p&gt;
&lt;p&gt;But, the problem with using this method is that at some point, you won’t be able to do something you need to do using just a declarative syntax. The option is to use a “Model Driven” approach. These leaves the HTML parts in the template with a few tags to wire the template to the TypeScript code it is associated with, but the bulk of the processing is all in the TypeScript file. On the surface, you might think, “but Template Driven is much easier to think about.” But I assure you, using a predominately model driven approach has several advantages that the serious programmer will enjoy.&lt;/p&gt;
&lt;h3 id=&#34;More-control-over-your-forms&#34;&gt;&lt;a href=&#34;#More-control-over-your-forms&#34; class=&#34;headerlink&#34; title=&#34;More control over your forms.&#34;&gt;&lt;/a&gt;More control over your forms.&lt;/h3&gt;&lt;p&gt;The first advantage you will notice is that you’ll have more control over your form. One place you will notice this is with form validation. But, you’ll also notice greater control because you will have direct control on how the data moves in and out of your form instead of the “magic happens here” of data binding that can, with complex forms, become entirely too complex to reason about.&lt;/p&gt;
&lt;h3 id=&#34;Easier-to-test-the-forms&#34;&gt;&lt;a href=&#34;#Easier-to-test-the-forms&#34; class=&#34;headerlink&#34; title=&#34;Easier to test the forms.&#34;&gt;&lt;/a&gt;Easier to test the forms.&lt;/h3&gt;&lt;p&gt;Another huge advantage to using Model Driven forms is that you end up with forms that are MUCH easier to test. You can assume that the HTML is doing what it should and just test the TypeScript code. With a more template driven approach you’ll need to work out how to actually test your HTML. It can be done, and it isn’t really all that hard. But using a model driven approach is easier.&lt;/p&gt;
&lt;h3 id=&#34;Easier-to-reason-about-how-the-code-is-being-processed&#34;&gt;&lt;a href=&#34;#Easier-to-reason-about-how-the-code-is-being-processed&#34; class=&#34;headerlink&#34; title=&#34;Easier to reason about how the code is being processed.&#34;&gt;&lt;/a&gt;Easier to reason about how the code is being processed.&lt;/h3&gt;&lt;p&gt;Related to the two previous points, using Model Driven forms makes your cod much easier to reason about. Once again, that whole “magic happens here” approach of data-binding can get in the way, while using the model driven approach will allow you to be very direct about what gets updated when more directly.&lt;/p&gt;
&lt;h2 id=&#34;Page-and-Component-State-Management&#34;&gt;&lt;a href=&#34;#Page-and-Component-State-Management&#34; class=&#34;headerlink&#34; title=&#34;Page and Component State Management&#34;&gt;&lt;/a&gt;Page and Component State Management&lt;/h2&gt;&lt;p&gt;The temptation is to try to architect an Angular 2 project so that it looks something like how we used to write Angular 1 applications. That is, using an MV* architecture. Where this gets messed up is that the HTML template, the TypeScript and the CSS are really all part of the same class. Once you start thinking of them as one, MV* stops making as much sense&lt;/p&gt;
&lt;p&gt;The pattern I prefer here is one that uses the top-level View as a Controller View. That is, it is the one component that is responsible for being the traffic data cop. All the components under it are responsible for either rendering the state information they have been passed by the Controller View, updating that state information or firing event out when they’ve done something the outside world should know about&lt;/p&gt;
&lt;p&gt;The View Controller, on the other hand, is responsible for getting the data to and from where ever it needs to go&lt;/p&gt;
&lt;p&gt;By doing this, you end up with very testable, modular code and it becomes very clear that all your logic for a page, or sub-page, exist in one very well-defined section of your code. In fact, you can eliminate the need for most dependency injection by following this pattern. Any dependency injection you do need will probably end up in your Controller View.&lt;/p&gt;
&lt;h2 id=&#34;Data-Flow&#34;&gt;&lt;a href=&#34;#Data-Flow&#34; class=&#34;headerlink&#34; title=&#34;Data Flow&#34;&gt;&lt;/a&gt;Data Flow&lt;/h2&gt;&lt;p&gt;So far, the three main methods of data management that have emerged for Angular 2 seem to be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Direct Access&lt;/li&gt;
&lt;li&gt;Flux&amp;#x2F;Redux&lt;/li&gt;
&lt;li&gt;NgRX&amp;#x2F;Store&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Background&#34;&gt;&lt;a href=&#34;#Background&#34; class=&#34;headerlink&#34; title=&#34;Background&#34;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;h4 id=&#34;MVVM&#34;&gt;&lt;a href=&#34;#MVVM&#34; class=&#34;headerlink&#34; title=&#34;MVVM&#34;&gt;&lt;/a&gt;MVVM&lt;/h4&gt;&lt;p&gt;While MVVM was possible in Angular 1, and it works at the View level in Angular 2, the preferred model is what has come to be known as “One way data binding” which sounds odd, and really doesn’t describe what it does&lt;/p&gt;
&lt;p&gt;In short, while all the code you write may act like it is using two-way data-binding, the reality is that the code is only ever flowing in one direction&lt;/p&gt;
&lt;p&gt;The problem with true MVVM data binding is that when it is done correctly, data changes because other data changed&lt;/p&gt;
&lt;p&gt;This makes it very difficult to reason about the data in your application in all but the smallest of applications&lt;/p&gt;
&lt;p&gt;Further, to get this to work correctly, the resulting system is almost always slower than it needs to be. I’ve written before about &lt;a href=&#34;/4-reasons-to-drop-mvvm/&#34;&gt;why I think MVVM is a poor choice for design patterns&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;Direct&#34;&gt;&lt;a href=&#34;#Direct&#34; class=&#34;headerlink&#34; title=&#34;Direct&#34;&gt;&lt;/a&gt;Direct&lt;/h4&gt;&lt;p&gt;It is possible to write an application that kind of looks like old style three layer architectures that some might try to call MVC, but it is a poor man’s implementation at best, and only because Angular 2 implements its own Dependency Injection Container mechanism does the result end up being anything close to loosely coupled&lt;/p&gt;
&lt;p&gt;This implementation generally has the top-level component managing the state of the application, or at least the state of that particular page, and calling out directly to services that retrieve data from the server and manipulate data&lt;/p&gt;
&lt;p&gt;While it works, in larger applications it can be difficult to manage and respond to state changes throughout your application. Imagine if that could happen for “free”.&lt;/p&gt;
&lt;h4 id=&#34;Flux&#34;&gt;&lt;a href=&#34;#Flux&#34; class=&#34;headerlink&#34; title=&#34;Flux&#34;&gt;&lt;/a&gt;Flux&lt;/h4&gt;&lt;p&gt;The React community introduced a new pattern called Flux. There are multiple implementations of Flux, but the one that has become the defacto standard is called Redux. In general, Flux is made up of a series of publish subscribe mechanisms and ends up looking a lot like what the Gang of Four originally defined MVC to be while not actually being MVC.&lt;/p&gt;
&lt;p&gt;In very simple terms, the View fires an event to a “Dispatcher” which is a singleton. Each repository, or data store, or model (just depends on what you want to call it) registers a listener with the “Dispatcher” that lets the dispatcher know that it wants to know whenever something significant happens. These repositories are also singletons.&lt;/p&gt;
&lt;p&gt;When the Dispatcher receives a notification from a View, it notifies all the listeners in turn. The listeners look at the message they receive from the dispatcher to see if it is something they care about. If it is, they process the message accordingly.&lt;/p&gt;
&lt;p&gt;Once they are done, they fire an event to each Controller View that has registered a listener with them. The Controller View then updates the view based on the information it was passed in the event. I don’t want this to get too far down the road of “How” but to make the above paragraph just a bit clearer…&lt;/p&gt;
&lt;p&gt;There is a top-level View item that does no rendering. It is only responsible for responding to event notifications and passing the data down into the child views. You may hear this referred to as a View Controller, but it is more accurately a Controller View.&lt;/p&gt;
&lt;p&gt;Hopefully, you can see how this solves the problem up needing to force an update on a View because some other View changed the state of something. Because everyone who cares about the state is listening for a notification that something changes, the screen update “just works” and is much more reliable than a more MVVM style of updating the view and data.&lt;/p&gt;
&lt;h4 id=&#34;NgRX-x2F-Store&#34;&gt;&lt;a href=&#34;#NgRX-x2F-Store&#34; class=&#34;headerlink&#34; title=&#34;NgRX&amp;#x2F;Store&#34;&gt;&lt;/a&gt;NgRX&amp;#x2F;Store&lt;/h4&gt;&lt;p&gt;Reactive Extensions are available for multiple platforms, including JavaScript. You can read more about them at &lt;a href=&#34;//reactivex.io/&#34;&gt;http://reactivex.io/&lt;/a&gt; and I’ve written about &lt;a href=&#34;/reasons-to-use-rxjs-today/&#34;&gt;the reasons you want to use them&lt;/a&gt; before. But for purposes of this article, one of the problems that Reactive programming solves is cleanly dealing with the asynchronous nature of JavaScript&lt;/p&gt;
&lt;p&gt;Nowhere is this more obvious than with Ajax request.&lt;/p&gt;
&lt;p&gt;If you’ve ever needed to deal with having to wait for multiple Ajax request to complete before you do something meaningful with the data, you are going to love Reactive programming.&lt;/p&gt;
&lt;p&gt;Another thing that Reactive programming gives you is it makes everything a “stream”.&lt;/p&gt;
&lt;p&gt;In simple terms imagine working with an array that never ends and being able to respond appropriately to each element that come through that stream of arrays and you’ll have a good conceptual idea of what it means that everything is a stream. This is how Reactive programming deals with asynchronous calls and events. Add to this the concept that streams can be combined and you’ll start to understand why this cleans up the asynchronous nature of JavaScript.&lt;/p&gt;
&lt;p&gt;The result is that we can write code that fills the stream and other code that says, “when a particular item comes in on the stream, let me know about it.” Basically, an embellished publish&amp;#x2F;subscribe design pattern.&lt;/p&gt;
&lt;p&gt;From the description above, you should be able to see that Reactive programming can be used to implement Flux.&lt;/p&gt;
&lt;p&gt;This is exactly what NgRx&amp;#x2F;Store does. It allows us to concentrate on writing Reducers while it focuses on managing the dispatcher, event handling, and the various repositories, or stores, our application might need.&lt;/p&gt;
&lt;p&gt;As I’ve used NgRX&amp;#x2F;Store in my own applications, I’ve found that it further reduces the need for dependency injection and increases the testability of my code. The tradeoff is that there is a learning curve. But the time learning this new design pattern is well worth the effort.&lt;/p&gt;
&lt;h2 id=&#34;Client-Side-Data&#34;&gt;&lt;a href=&#34;#Client-Side-Data&#34; class=&#34;headerlink&#34; title=&#34;Client Side Data&#34;&gt;&lt;/a&gt;Client Side Data&lt;/h2&gt;&lt;p&gt;At some point, you are going to need to manage the data on the client side. There are several issue you might want to consider. But at the most fundamental layer, you will end up with data on the client side that looks like a relational data in a database. The only difference is that your data will be primarily JSON data. Eventually, you’ll want to join that data or filter it. How will you do that? One product you might consider is &lt;a href=&#34;//www.getbreezenow.com/&#34;&gt;Breeze&lt;/a&gt;. It does a lot of stuff that makes your client side data look more like a database. It is worth a look&lt;/p&gt;
&lt;p&gt;If you end up using NgRX&amp;#x2F;Store and RxJS, you may find that does everything you need. So that is another option. The advantage to using this method is you are no longer constrained by trying to make everything look like a relational database table even when it isn’t&lt;/p&gt;
&lt;p&gt;The other option, of course, is to use both for what they are good at.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Angular 2 brings a lot of new concepts. While it might be tempting to use coding patterns that seem more comfortable, I believe that the path that Angular 2 has chosen is the future of JavaScript specifically and the programming world in general.&lt;/p&gt;
&lt;p&gt;Just about everything that is new falls into the general category of “Functional Programming” and much like the switch from procedural programming to object oriented programming, there are going to be people who are not able to wrap their heads around the concepts. How many guys ended up using C++ syntax to write C code? However, the productivity gains once we make the jump to this new way of thinking about our code will be well worth both the learning curve and the possible loss of some older programmers who can’t or won’t be retrained.&lt;/p&gt;
&lt;p&gt;There is also a danger of not being able to retain good programmers because we are still stuck using design patterns that were popular in the past but have been superseded by ways the developer community at large considers “better.”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/dissecting-angular-2-modules/</guid>
            <title>Dissecting Angular 2 Modules</title>
            <link>http://davembush.github.com/dissecting-angular-2-modules/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>modules</category>
            <pubDate>Tue, 20 Dec 2016 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;In the new world of Angular 2, and even in the world of Angular.js, you might feel like the concept of a module is the most difficult to wrap your head around.&lt;/p&gt;
&lt;p&gt;This is especially if you’ve only ever written client side JavaScript code. Once you’ve learned why you need a module, the temptation is to use one module for all your code. I am guilty of doing that myself when I first started. But, many times using one module for your entire application is the wrong thing to do because it reduces the ability to reuse your code in other modules. Once you understand why modules exist, you’ll begin to reason about how to use modules appropriately.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/12/image-1.png &#34;Dissecting Angular 2 Modules&#34;)&lt;figcaption&gt;Photo credit: [Sappymoosetree](//www.flickr.com/photos/bahkubean/416801559/) via [Visual hunt](//visualhunt.com) / [CC BY-ND](//creativecommons.org/licenses/by-nd/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Why-Do-Modules-Exist&#34;&gt;&lt;a href=&#34;#Why-Do-Modules-Exist&#34; class=&#34;headerlink&#34; title=&#34;Why Do Modules Exist?&#34;&gt;&lt;/a&gt;Why Do Modules Exist?&lt;/h2&gt;&lt;p&gt;When the Angular 2 project started, modules did not exist, even though they had existed in Angular.js. But as the RC process continued, it became obvious that modules were going to be necessary. We could have written our code without modules, but the amount of code we would need to repeat to get the same functionality would be dramatically greater.&lt;/p&gt;
&lt;p&gt;It also often becomes more complex and harder to reason about.&lt;/p&gt;
&lt;p&gt;So, what exactly do modules get us? If you’ve worked in languages in the past that have the concept of a namespace, it might help you to think of a module as a substitute for namespaces. They allow us to group similar functionality together, and specify what functionality that belongs to the module can be accessed by the outside world. For example, I recently wrote a component that all the applications in our organization will be starting out with. It is composed of multiple components, but I only want the top most component exposed to the developers who will be using it.&lt;/p&gt;
&lt;p&gt;So, modules allow us to both group code together and encapsulate code so that code that might otherwise be publicly available becomes private to the outside world.&lt;/p&gt;
&lt;h2 id=&#34;Dissecting-Modules&#34;&gt;&lt;a href=&#34;#Dissecting-Modules&#34; class=&#34;headerlink&#34; title=&#34;Dissecting Modules&#34;&gt;&lt;/a&gt;Dissecting Modules&lt;/h2&gt;&lt;p&gt;You may remember that in the &lt;a href=&#34;//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-4&#34;&gt;application we’ve been working on&lt;/a&gt; we’ve already created a module. In fact, when you create any application using the CLI, there will always be this top-level module.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@NgModule(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  declarations: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AppComponent&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  imports: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BrowserModule,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FormsModule,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HttpModule,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    GettingStartedWithAngular2RoutingModule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  providers: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  bootstrap: [AppComponent]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AppModule&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The declarations section simply specifies the components that this module owns. In the case of our app so far, the only component it owns is the top-level AppComponent.&lt;/p&gt;
&lt;p&gt;The imports section loads modules this module is going to need available in the components it owns. Many times, the components we need access to are only needed in our templates. Prior to using modules, we would need to include our components in our TS files just so the templates could access them. By loading them in the module, we can load modules once even though we may have multiple components that are part of the module that may need them.&lt;/p&gt;
&lt;p&gt;Since our module is not using any injectables, the providers section is empty. But that is what the providers section is for. Any class that we will need to inject in the constructor of other code would be listed in this providers section.&lt;/p&gt;
&lt;p&gt;Finally, the bootstrap section has the one component this module should load. This only shows up in the top-level module. While it is needed, I’ve yet to figure out why. We’ve already loaded the module, and therefore the component and the tag for the top-level component is in our index.html file, so I can’t see the point of specifying it here yet again.&lt;/p&gt;
&lt;p&gt;You may wonder, “How does this AppModules get loaded?” Go back to the root of your app directory and look for the main.ts file. You’ll see that we loaded it in there.&lt;/p&gt;
&lt;p&gt;platformBrowserDynamic().bootstrapModule(AppModule);&lt;/p&gt;
&lt;p&gt;You might wonder why this code is not included in the application module. This is because you might not always want to use platformBrowserDynamic(). If you are using Web Workers to run your code or using Ahead of Time compile, you would use two other methods of bootstrapping the module. I’ve only mentioned three here, but there are others.&lt;/p&gt;
&lt;p&gt;The next property you are likely to see in a module declaration is the exports section:&lt;/p&gt;
&lt;p&gt;exports:  [Edit]&lt;/p&gt;
&lt;p&gt;This tells the module that has imported this module that it can use the Edit component. We didn’t need this in the app module because the app module isn’t being used by another module. It is the top most module and really can’t be used by any other module by definition.&lt;/p&gt;
&lt;h2 id=&#34;Routing-and-Modules&#34;&gt;&lt;a href=&#34;#Routing-and-Modules&#34; class=&#34;headerlink&#34; title=&#34;Routing and Modules&#34;&gt;&lt;/a&gt;Routing and Modules&lt;/h2&gt;&lt;p&gt;Several weeks ago we took a look at &lt;a href=&#34;/angular-2-lazy-loading/&#34;&gt;implementing Lazy Loading by modifying our routing module&lt;/a&gt;. What is unique about this situation is that every time you lazy load a module, it becomes the top most module, so once again, there is no real need to export it.&lt;/p&gt;
&lt;h2 id=&#34;When-Should-Modules-Be-Used&#34;&gt;&lt;a href=&#34;#When-Should-Modules-Be-Used&#34; class=&#34;headerlink&#34; title=&#34;When Should Modules Be Used?&#34;&gt;&lt;/a&gt;When Should Modules Be Used?&lt;/h2&gt;&lt;p&gt;As I said when I started, the temptation is to just put all our import statements that our application is going to need in our app module. But that seems like an extremely lazy way of writing code. And when you go to write lazy loaded modules, that’s not going to work so well for you. So, there are two ways you can approach this.&lt;/p&gt;
&lt;p&gt;First, you can just create a module for every component you write. It is probably over kill, but it would be hard to go too far wrong here. Given the choice between too many modules and not enough, I’d error on the side of too many. At least it gives you the flexibility do make necessary changes in the future.&lt;/p&gt;
&lt;p&gt;But the more reasonable approach would be one module per feature and a module for common stuff. For example, if you are writing a component library, you would probably be safe writing a module for all the components in your library so you only have to import the library module and all your component would automatically become available to you. You’ll want to at least want to have one module per route so that you can lazy load the routes if you decide that is necessary.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/reasons-to-use-rxjs-today/</guid>
            <title>Reasons to use RxJS Today</title>
            <link>http://davembush.github.com/reasons-to-use-rxjs-today/</link>
            <category>javascript</category>
            <category>rxjs. angular 2</category>
            <pubDate>Tue, 13 Dec 2016 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;If you’ve started looking at Angular 2, one of the things that you’ll notice is that &lt;a href=&#34;//github.com/Reactive-Extensions/RxJS&#34;&gt;RxJS&lt;/a&gt; has gotten a bit of a toe hold in the framework. This becomes apparent the first time you try to access data. Gone is the $http service that returns a promise. Instead, we now have a service that returns an Observable. Now, writing the code to access the server is arguably easy to learn. But, as you travel down the rabbit hole that is Angular 2, you realize that RxJS shows up in places as disperse as &lt;a href=&#34;//github.com/ngrx/store&#34;&gt;NgRX&amp;#x2F;Store&lt;/a&gt;, handling events, and as we’ve already mentioned, AJAX calls.&lt;/p&gt;
&lt;p&gt;Because it shows up in so many places, this new API is set to be the next thing we will need to learn to be effective JavaScript programmers. But, should we?&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/12/image.png &#34;Reasons to use RxJS Today&#34;)&lt;figcaption&gt;Photo credit: [Dace Kiršpile](//www.flickr.com/photos/91035846@N05/9374805577/) via [Visualhunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;A-Story&#34;&gt;&lt;a href=&#34;#A-Story&#34; class=&#34;headerlink&#34; title=&#34;A Story&#34;&gt;&lt;/a&gt;A Story&lt;/h2&gt;&lt;p&gt;As I first started to dig into using RxJS, I found myself being more confused than I expected. And yet, I was convinced that this new way of thinking about my code would be well worth the effort.&lt;/p&gt;
&lt;p&gt;It reminds me of the days when we switched from Procedural Programming (PP) to Object Oriented Programming (OOP). Yes, I’ve been coding that long.&lt;/p&gt;
&lt;p&gt;Somewhere around the third year of my career, C++ finally became popular enough that both Borland and Microsoft produced a C++ compiler and framework for developing Windows applications. I remember falling in love with it. Maybe I hadn’t been using procedural programming long enough to make switching difficult. Maybe I just thought about code as Objects anyhow. But, whatever the reason, I couldn’t figure out why some of my peers had such a hard time grasping the concepts.&lt;/p&gt;
&lt;p&gt;As I was working on learning RxJS, I found myself feeling like I was either too old to learn a new trick, or I was just getting dumb in my old age. Why is it so hard? Fortunately, I found a site that helped me understand RxJS specifically and Reactive Functional programming in general. I am no longer in the class of “old farts who can’t learn new stuff.” And now that I understand, everything is starting to look for Reactive.&lt;/p&gt;
&lt;h2 id=&#34;What-Is-RxJS&#34;&gt;&lt;a href=&#34;#What-Is-RxJS&#34; class=&#34;headerlink&#34; title=&#34;What Is RxJS?&#34;&gt;&lt;/a&gt;What Is RxJS?&lt;/h2&gt;&lt;p&gt;If you’ve ready anything about RxJS or any of the ReactiveX libraries that are available for other languages, you’ll find that most of them start off by saying that RxJS “makes everything a stream.” Which, while that may be technically true, isn’t very helpful. What would it look like if we redefine that? The best way to think about RxJS is that it makes everything a special type of collection called an Observable.&lt;/p&gt;
&lt;h3 id=&#34;Arrays&#34;&gt;&lt;a href=&#34;#Arrays&#34; class=&#34;headerlink&#34; title=&#34;Arrays&#34;&gt;&lt;/a&gt;Arrays&lt;/h3&gt;&lt;p&gt;In JavaScript, you are already deal with a special type of collection called an Array.&lt;/p&gt;
&lt;p&gt;Now, let me lead you though the thought process you’ll need to travel down to see how RxJS is going to be helpful for you.&lt;/p&gt;
&lt;p&gt;For now, let’s just assume everything is an array. This will make the jump easier.&lt;/p&gt;
&lt;p&gt;In pure JavaScript, you are typically writing code that either looks like this: (old school)&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someArray = [...data here...];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; array.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = someArray[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ... &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; something &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; the data ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Or using newer syntax:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someArray = [...data here...];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;someArray.&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ...&lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; something &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; the data...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;//code.tutsplus.com/tutorials/what-they-didnt-tell-you-about-es5s-array-extras--net-28263&#34;&gt;Array Extras&lt;/a&gt; takes some of the code we typically write in these loops and standardizes them so we can reduce the amount of code we need to write, while still achieving the same goals.&lt;/p&gt;
&lt;p&gt;For example, you might loop through an array to generate a new array. For that you would use map(). Or you might loop through an array to filter out elements. That would be filter().&lt;/p&gt;
&lt;p&gt;The great thing about this Array Extra functions is that they each return a new array. This means you don’t impact the original array and you can chain these functions together:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someArray = [...data here...];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; transformedAndFiltered = someArray&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;)&amp;#123;...filter code...&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;)&amp;#123;...tranform code...&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;``&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;` javascript&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;`&lt;/span&gt;someArray&lt;span class=&#34;string&#34;&gt;` still has the original data and transformedAndFiltered has the new data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;### Events&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;Now, imagine we create a system where we have arrays that never end. Instead of using the old school for/next loop, we would be left with only being able to use a forEach, or one of the Array Extras function. Which would be fine. The function would just wait until the next element showed up or it got some sort of signal that there wouldn’t be any more elements.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;This is exactly what RxJS does. So, now we can listen for events as though they were arrays.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;``&lt;/span&gt; javascript&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fromEvent&lt;/span&gt;(element,&lt;span class=&#34;string&#34;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt;)&amp;#123;...&lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; something &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; response...&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Pretty cool, right? If you need to, you can place a filter prior to the subscribe so that you only get events that meet the exact condition. In fact, if any of the functions you pass as parameters have conditional logic in them, this is a good indication that you are not yet thinking in a Reactive way.&lt;/p&gt;
&lt;h3 id=&#34;Asynchronous-Code&#34;&gt;&lt;a href=&#34;#Asynchronous-Code&#34; class=&#34;headerlink&#34; title=&#34;Asynchronous Code&#34;&gt;&lt;/a&gt;Asynchronous Code&lt;/h3&gt;&lt;p&gt;Now, as I’ve already mentioned, RxJS also lets you deal with asynchronous code as though it is an array. This works pretty much as you would expect on the surface, but there are some added advantages to using RxJS to deal with asynchronous calls. The most significant of them being that you can achieve better flow of control.&lt;/p&gt;
&lt;p&gt;If you’ve ever dealt with needing to make multiple calls to the server for data prior to allowing the user to use the screen, you’ll appreciate that you can make all the calls at once and only continue once all of them have completed. Or, you could make the calls one after the other, if you have calls that depend on each other. Yes, promises do this as well, but the Reactive method is a bit cleaner.&lt;/p&gt;
&lt;p&gt;The other way RxJS improves on promises is that you can cancel a request instead of just letting it run even though you no longer want the data. This means, you won’t be tying up bandwidth waiting for data to come back when you want newer data instead.&lt;/p&gt;
&lt;p&gt;Finally, using RxJS, you can easily retry a failing request, as well as deal with failing request using the .retry() and catch() functions.&lt;/p&gt;
&lt;h2 id=&#34;Functional-Matters&#34;&gt;&lt;a href=&#34;#Functional-Matters&#34; class=&#34;headerlink&#34; title=&#34;Functional Matters&#34;&gt;&lt;/a&gt;Functional Matters&lt;/h2&gt;&lt;p&gt;Now, all of this is great. But the side effect of the fact that RxJS is both Functional and Reactive is that it not only reduces the amount of code that you need to write, but it also produces code that is less prone to errors and easier to test.&lt;/p&gt;
&lt;p&gt;Let me explain.&lt;/p&gt;
&lt;p&gt;We’ve already shown above that all the RxJS functions return new Observables. I kind of brushed over this. But this is a big deal. Because the original data in the Observable is never modified, you never run the risk of modifying the data that some other part of your code is expecting to never be modified. This is even more important when you are working on a larger project with multiple developers. This means all your assumptions about your data will remain true when your team commits to using functional paradigms throughout your code base.&lt;/p&gt;
&lt;p&gt;But this effect doesn’t just impact the observable code base. What I’ve found is that the more code you write that is functional and obeys the immutable rules, the easier the rest of your code is to test. Specifically, I find myself using less dependency injection simply because I am using immutable objects. Because I can depend on the code not having any side effects, my functional code is easier to test and my none functional, more object-oriented code, is easier to test because it has fewer dependencies.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;The most difficult thing about using RxJS or any other Reactive Functional library is the fact that it requires you to think a little bit differently about the problems you are solving. But the advantages far outweigh the learning curve. Don’t be like so many of the script kiddies on the web who complain every time they must learn something new. Step up to the challenge. Your customers will thank you. The guy who maintains your code in the future will thank you. Your future self will thank you.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-2-lazy-loading/</guid>
            <title>Angular 2 Lazy Loading</title>
            <link>http://davembush.github.com/angular-2-lazy-loading/</link>
            <category>angular</category>
            <category>lazy loading</category>
            <pubDate>Tue, 06 Dec 2016 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Last week when we took a look at &lt;a href=&#34;/adding-client-side-routing-to-angular-2/&#34;&gt;Client side Routing&lt;/a&gt;, I mentioned that one of the reasons you’d want to implement a component in its own module is so that we could lazy load the component and its dependencies&lt;/p&gt;
&lt;p&gt;This week, we want to dig into how to implement lazy loading in your Angular 2 application&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/11/image-5.png &#34;Angular 2 Lazy Loading&#34;) Photo via [jordan](//pixabay.com/en/users/jordan3600-400129/) via [Visualhunt](//visualhunt.com/)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-Is-Lazy-Loading&#34;&gt;&lt;a href=&#34;#What-Is-Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;What Is Lazy Loading?&#34;&gt;&lt;/a&gt;What Is Lazy Loading?&lt;/h2&gt;&lt;p&gt;Imagine that you’ve written an application that is divided into four main sections. The people using the site may only use one or two sections of the site at a time, or at all. Is it fair to make them download the entire site? Or maybe you’ve written a monster site. Wouldn’t it make more sense to download only what you need as you need it? The perceived performance of a site written like this far exceeds the performance of a site that requires you to download everything at once&lt;/p&gt;
&lt;p&gt;And so, Lazy Loading was developed as a way of solving these issues and others. The idea is, rather than downloading everything, download only what is needed when it is needed.&lt;/p&gt;
&lt;h2 id=&#34;The-Code&#34;&gt;&lt;a href=&#34;#The-Code&#34; class=&#34;headerlink&#34; title=&#34;The Code&#34;&gt;&lt;/a&gt;The Code&lt;/h2&gt;&lt;p&gt;Remember that last week we implemented a View module and an Edit module. We called them from our router by importing the modules and telling the router to load the components when a route was specified&lt;/p&gt;
&lt;p&gt;Because we are no longer loading the modules as part of our main application, we are going to go into the &lt;code&gt;app-routing.module.ts&lt;/code&gt; file and remove all of the references to the components and the module. Instead, we are going to load the module using the &lt;code&gt;loadChildren&lt;/code&gt; property in our route array.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import &amp;#123; NgModule &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;#123; Routes, RouterModule &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/router&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// import &amp;#123; ViewComponent &amp;#125; from &amp;#x27;./view/view.component&amp;#x27;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// import &amp;#123;ViewModule&amp;#125; from &amp;quot;./view/view.module&amp;quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// import &amp;#123;EditModule&amp;#125; from &amp;quot;./edit/edit.module&amp;quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// import &amp;#123;EditComponent&amp;#125; from &amp;quot;./edit/edit.component&amp;quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; routes: Routes = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; path: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    loadChildren: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./view/view.module#ViewModule&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//component: ViewComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; path: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Add&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    loadChildren: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./edit/edit.module#EditModule&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//component: EditComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; path: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Edit/:id&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    loadChildren: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./edit/edit.module#EditModule&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//component: EditComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@NgModule(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  imports: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    RouterModule.forRoot(routes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//ViewModule,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//EditModule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  exports: [RouterModule],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  providers: []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GettingStartedWithAngular2RoutingModule&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice the format of the loadChildren string is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The path to the module (without the file extension)&lt;/li&gt;
&lt;li&gt;hash&lt;/li&gt;
&lt;li&gt;The class in the component that is exported&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But, there is nothing in the code that tells us what component is supposed to load. This is because the job of deciding what component to load has now been delegated to the module&lt;/p&gt;
&lt;p&gt;This is the part that remained a mystery to me for quite a while. I would look at the code demos but never saw the next part. Maybe this will save you some of that trouble&lt;/p&gt;
&lt;p&gt;In the view module, add this line to the imports array:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; RouterModule.forChild([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;path: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;, component: ViewComponent&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that we are using forChild here instead of forRoot but otherwise this looks the same as what we originally had for the View component prior to implementing lazy loading&lt;/p&gt;
&lt;p&gt;We can implement a similar line in the EditModule, except the component will be EditComponent.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;RouterModule.forChild([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;path: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;, component: EditComponent&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Under-the-Hood&#34;&gt;&lt;a href=&#34;#Under-the-Hood&#34; class=&#34;headerlink&#34; title=&#34;Under the Hood&#34;&gt;&lt;/a&gt;Under the Hood&lt;/h2&gt;&lt;p&gt;Build the system using &lt;code&gt;ng build&lt;/code&gt; because I want to show you what is happening under the hood&lt;/p&gt;
&lt;p&gt;Once you’ve built the system, look in the &lt;code&gt;dist&lt;/code&gt; directory. You’ll see a &lt;code&gt;0.chunk.js&lt;/code&gt; and a &lt;code&gt;1.chunk.js&lt;/code&gt; file. These files hold the module and dependencies that we’ve lazy loaded&lt;/p&gt;
&lt;p&gt;If you load the application with the developer tools loaded and look at the network tab, you’ll see that one chunk is loaded immediately, for the view. The other is loaded when you navigate to the add or edit path&lt;/p&gt;
&lt;p&gt;The code so far can be found at &lt;a href=&#34;//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-4&#34; title=&#34;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-4&#34;&gt;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-4&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/adding-client-side-routing-to-angular-2/</guid>
            <title>Adding Client Side Routing to Angular 2</title>
            <link>http://davembush.github.com/adding-client-side-routing-to-angular-2/</link>
            <category>angular</category>
            <category>routing</category>
            <pubDate>Tue, 29 Nov 2016 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last several Angular 2 posts, we’ve been building up our application bit by bit and examining the various features of Angular 2 along the way using the Angular CLI where that makes sense and modifying it along the way. So far, routing is an area that the Angular CLI does not yet support and so, when you want to use routing in your Angular 2 application, you’ll need to wire most of it in by hand. Now, the routing engine has changed several times during the development of Angular 2. And I know you’re wondering which version of the router this article is going to be talking about. So, to be clear, this article was written using the Angular CLI version 1.0.0-beta.21 and Router version 3.2.1.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/11/image-4.png &#34;Adding Client Side Routing to Angular 2&#34;)&lt;figcaption&gt;Photo credit: [xomiele](//www.flickr.com/photos/xomiele/6759264721/) via [Visualhunt](//visualhunt.com/photos/snow/) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-is-Routing&#34;&gt;&lt;a href=&#34;#What-is-Routing&#34; class=&#34;headerlink&#34; title=&#34;What is Routing?&#34;&gt;&lt;/a&gt;What is Routing?&lt;/h2&gt;&lt;p&gt;If you are new to developing Single Page Application (SPAs) you might wonder what Routing is. You might be surprised to find out that you already know what routing is, but you’ve never actually called it by this name.&lt;/p&gt;
&lt;p&gt;For example, using MVC in the ASP.NET world, you used routing whenever you specified what controller you expected your code to hit when you specified a particular URL. You’ll remember that we set our code up so that when we specified that URL, code in a controller would get hit. We also had the option of specifying parameters that we wanted to have passed into our controller methods.&lt;/p&gt;
&lt;p&gt;In a SPA, routing does essentially the same thing. The only difference is that we never have to call the server. This makes all our “Pages” virtual. Instead of requiring that our visitors always start at our home page and navigate into the rest of our site; instead of creating a separate page on the server for each page in our site; we can load all the site up front and the user can navigate to exactly the page they want to be at. They can even link directly to that page and the client side will handle displaying the page appropriately.&lt;/p&gt;
&lt;h2 id=&#34;There’s-a-Catch&#34;&gt;&lt;a href=&#34;#There’s-a-Catch&#34; class=&#34;headerlink&#34; title=&#34;There’s a Catch&#34;&gt;&lt;/a&gt;There’s a Catch&lt;/h2&gt;&lt;p&gt;One of the problems you’ll quickly discover is that for this to work, you’ll need to set your server up so that it doesn’t try to handle the routing as well.&lt;/p&gt;
&lt;p&gt;You see, if you navigate to the home page of your web site and then click around into the sub-pages, everything is going to appear to work correctly. But once you try to navigate directly to an inner page, you are going to become extremely frustrated. The problem lies in order your code gets executed.&lt;/p&gt;
&lt;p&gt;When you request a page directly, what happens is that the server will look for that page on the server. If it can’t find it, it will return, appropriately, a 404 error. The problem is that when we ask for a page that only exist because the client side has said it does, when the server goes to look for it, it will return the 404 error. It isn’t there.&lt;/p&gt;
&lt;p&gt;For the moment, I’m ignoring the fact that Angular 2 supplies a feature called Server Side Rendering, which can also take care of this problem. Given regular, out of the box, Angular 2 code, you’ll want to make sure you server knows what to do when the files don’t exist. What I normally do is that I create a rule on my server that says, “if I’m looking for a path that doesn’t have an extension, just return the index.html page you would have returned if I had asked for the home page.” In Express on Node.JS, the code for this looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// This comes last.  right before we start listening&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.&lt;span class=&#34;title function_&#34;&gt;use&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;req,res&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this sends back the index.html file when&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// it looks like they are looking for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// a client side route&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// assuming a real file will have an extension&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// and a route will not.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(req.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;indexOf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt;) &amp;gt; -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        res.&lt;span class=&#34;title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;404&lt;/span&gt;)        &lt;span class=&#34;comment&#34;&gt;// HTTP status 404: Not Found&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .&lt;span class=&#34;title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Not found&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        res.&lt;span class=&#34;title function_&#34;&gt;sendFile&lt;/span&gt;(__dirname + &lt;span class=&#34;string&#34;&gt;&amp;#x27;/www/index.html&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you are using IIS and ASP.NET, you might find this article I wrote about using &lt;a href=&#34;/asp-net-angular-js-html5mode/&#34;&gt;Angular, Routing, and ASP.NET&lt;/a&gt; useful.&lt;/p&gt;
&lt;h2 id=&#34;Enabling-Routing&#34;&gt;&lt;a href=&#34;#Enabling-Routing&#34; class=&#34;headerlink&#34; title=&#34;Enabling Routing&#34;&gt;&lt;/a&gt;Enabling Routing&lt;/h2&gt;&lt;p&gt;Since the Angular CLI has included the packages you’ll need to enable routing, there is nothing to install. We just need to write some code.&lt;/p&gt;
&lt;p&gt;Typically routes get enabled at the top of your application after all the common code has been implemented. So, in the location where you want the routing to take effect, add the following tag:&lt;/p&gt;
&lt;p&gt;&lt;router-outlet&gt;&lt;/router-outlet&gt;&lt;/p&gt;
&lt;p&gt;I’ve added this to my &lt;code&gt;app.component.html&lt;/code&gt; file in the sample app I’ve been working on. Replacing the &lt;code&gt;&amp;lt;h1&amp;gt;&amp;#123; &amp;#123;title&amp;#125;&amp;#125;&amp;lt;/h1&amp;gt;&lt;/code&gt; code that we had from the previous weeks.&lt;/p&gt;
&lt;p&gt;If you were to run the code now all that you would see is that the title no longer shows up. We need to add the route code next. You will notice that an &lt;code&gt;app-routing.module.ts&lt;/code&gt; file already exist. Open this file. You will see that the bulk of the code we are going to need is already there.&lt;/p&gt;
&lt;p&gt;You should see a line that looks like:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We are going to add a route to this array:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ViewComponent&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What this is saying is that whenever we ask for the home page, load the “ViewComponent” component.&lt;/p&gt;
&lt;p&gt;But wait, we haven’t added any components yet.&lt;/p&gt;
&lt;p&gt;While we COULD just add a component, what I prefer to do is to add a new module. This is because I dislike the idea of making all the components in my code part of one huge modules. It makes it extremely difficult to refactor my code. I also want the ability to implement lazy loading in the future and I will need the component I am routing to, to be part of its own component in order for that to work.&lt;/p&gt;
&lt;p&gt;To add a View component to our code run the following line from the terminal&amp;#x2F;command line &lt;code&gt;ng g module view&lt;/code&gt; This will create a new ViewModule module with a new ViewComponent component located in the view directory.&lt;/p&gt;
&lt;p&gt;The rest of what we need to do is to just wire this all into the existing application.&lt;/p&gt;
&lt;p&gt;Go back to &lt;code&gt;app-routing.module.ts&lt;/code&gt; and add an import statement to load in &lt;code&gt;ViewComponent&lt;/code&gt; and the &lt;code&gt;ViewModule&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;ViewComponent&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./view/view.component&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;ViewModule&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./view/view.module&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We also need to add &lt;code&gt;ViewModule&lt;/code&gt; to the imports array.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;(routes),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;ViewModule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;exports&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next, we need to register the routing module with the application. So, load up the app.module.ts file and add an import statement to import the app-routing module:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; _applicationName_RoutingModule&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./app-routing.module&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And add &lt;code&gt;_applicationName_RoutingModule&lt;/code&gt; to the imports array:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;declarations&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;BrowserModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;FormsModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;HttpModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _applicationName_RoutingModule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;bootstrap&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Adding additional routes is more of the same. Let’s add another module for editing.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ng g module edit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add two new paths. One so we can add a new item and one so we can edit an existing item.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ViewComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Add&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;EditComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Edit/:id&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;EditComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that for the Edit command I added :id at the end. The :id specifies that this location is where the parameter will be. In this case, the ID of the record that we want to edit.&lt;/p&gt;
&lt;p&gt;We will flesh these out later and I’ll leave adding import statements and adding modules to the import arrays to you. It is essentially copy&amp;#x2F;paste&amp;#x2F;modify from the previous code. When you have the code working, you should be able to navigate to &amp;#x2F;Add or &amp;#x2F;Edit&amp;#x2F;id and see the new page.&lt;/p&gt;
&lt;p&gt;If you get stuck, the code so far can be found here: &lt;a href=&#34;//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step3&#34; title=&#34;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step3&#34;&gt;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step3&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/unit-testing-an-angular-2-cli-project/</guid>
            <title>Unit Testing an Angular 2 CLI Project</title>
            <link>http://davembush.github.com/unit-testing-an-angular-2-cli-project/</link>
            <category>unit test</category>
            <category>angular</category>
            <category>javascript</category>
            <category>typescript</category>
            <pubDate>Tue, 22 Nov 2016 19:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;This week we want to continue our series about Angular 2 by looking at the Unit Testing capabilities that Angular 2 provides for us. What we want to cover today is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tweaking Karma to avoid using the Browser Window&lt;/li&gt;
&lt;li&gt;Code Coverage&lt;/li&gt;
&lt;li&gt;Tips to testing components&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article was written using Angular CLI version 1.0.0-beta.20-4 (Tip, if you are upgrading on windows, &lt;code&gt;rm –rf node_modules dist temp&lt;/code&gt; just means to delete the three directories. You can do that part manually, or install bash for Windows and run the command in bash.)&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/11/image-3.png &#34;Unit Testing an Angular 2 CLI Project&#34;)&lt;figcaption&gt;Photo credit: [jimmiehomeschoolmom](//www.flickr.com/photos/jimmiehomeschoolmom/4427775569/) via [VisualHunt.com](//visualhunt.com) / [CC BY-NC-SA](//creativecommons.org/licenses/by-nc-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Tweaking-Karma&#34;&gt;&lt;a href=&#34;#Tweaking-Karma&#34; class=&#34;headerlink&#34; title=&#34;Tweaking Karma&#34;&gt;&lt;/a&gt;Tweaking Karma&lt;/h2&gt;&lt;p&gt;Open up the project we’ve been working on.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/getting-started-angular-2/&#34;&gt;Getting Started With Angular 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@davembush/adding-css-and-javascript-to-an-angular-cli-project-2b843a8283f3&#34;&gt;Adding CSS and JavaScript to an Angular CLI Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Drop into command line mode and run &lt;code&gt;ng test&lt;/code&gt; The first thing you will notice is that this brings up the Chrome browser to run your test. I don’t know about you, but I really dislike having a browser window up. I have enough windows running on my screen as it is. This is the first thing we need to fix. To do this we are going to install PhantomJS.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save-dev phantomjs-prebuilt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then, we need to tell karma to use PhantomJS. This is a two step process. First, we install the karma phantomjs runner &lt;code&gt;npm install --save-dev karma-phantomjs-launcher&lt;/code&gt; Next, we modify the karma.conf.js file Change &lt;code&gt;require(&amp;#39;karma-chrome-launcher&amp;#39;),&lt;/code&gt; and &lt;code&gt;browsers: [&amp;#39;Chrome&amp;#39;],&lt;/code&gt; To &lt;code&gt;require(&amp;#39;karma-phantomjs-launcher&amp;#39;),&lt;/code&gt; and &lt;code&gt;browsers: [&amp;#39;PhantomJS&amp;#39;],&lt;/code&gt; Last, since we are not using the browser, we will need a better reporting mechanism.&lt;/p&gt;
&lt;p&gt;To do this we will install spec reporter.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save-dev karma-spec-reporter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and we replace this line in karma.conf.js&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;reporters&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; config.angularCli &amp;amp;&amp;amp; config.angularCli.codeCoverage&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          ? &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&amp;#x27;progress&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &amp;#x27;karma-remap-istanbul&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&amp;#x27;progress&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;reporters&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; config.angularCli &amp;amp;&amp;amp; config.angularCli.codeCoverage&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          ? &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&amp;#x27;spec&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &amp;#x27;karma-remap-istanbul&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&amp;#x27;spec&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And we add a require line at the top of the file with the other requires&lt;/p&gt;
&lt;p&gt;&lt;code&gt;require(&amp;#39;karma-spec-reporter&amp;#39;),&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, when we run &lt;code&gt;ng test&lt;/code&gt; We get a nice text report in our terminal windows instead of the browser popping up.&lt;/p&gt;
&lt;h2 id=&#34;Code-Coverage&#34;&gt;&lt;a href=&#34;#Code-Coverage&#34; class=&#34;headerlink&#34; title=&#34;Code Coverage&#34;&gt;&lt;/a&gt;Code Coverage&lt;/h2&gt;&lt;p&gt;To get a code coverage report for our test use the command ng test –cc The code coverage files will end up in a directory named ‘coverage’ hanging off the root of your project. You can view the coverage&amp;#x2F;index.html file to see how well your files are covered.&lt;/p&gt;
&lt;h2 id=&#34;Testing-Components&#34;&gt;&lt;a href=&#34;#Testing-Components&#34; class=&#34;headerlink&#34; title=&#34;Testing Components&#34;&gt;&lt;/a&gt;Testing Components&lt;/h2&gt;&lt;p&gt;For the purposes of this article, I’m going to assume you have some familiarity with creating Jasmine tests. If you don’t the documentation for Jasmine is pretty easy to understand.&lt;/p&gt;
&lt;p&gt;But what I do want to cover here is how we test components.&lt;/p&gt;
&lt;p&gt;If you open up the &lt;code&gt;app.component.spec.ts&lt;/code&gt; file, you’ll notice a &lt;code&gt;TestBed&lt;/code&gt; class that gets used quite a bit. Since your test isn’t going to test modules because they only package our other code together, you need some way of faking that out so you can test the components. To do that, you use&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;TestBed&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;configureTestingModule&lt;/span&gt;( &amp;#123; &lt;span class=&#34;attr&#34;&gt;declarations&lt;/span&gt;: [ &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt; ] &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Which just sets up the declarations you need to reference the component you need to test. You can put anything in this block that you would normally put in your module definition.&lt;/p&gt;
&lt;p&gt;Another &lt;code&gt;TestBed&lt;/code&gt; method you’ll see is&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;TestBed&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createComponent&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;which you probably have guessed, creates an instance of the module so you can test it. The object it creates has a &lt;code&gt;debugElement&lt;/code&gt; property hanging off of it. There are two properties that hang off this object that you’ll make use of a lot. &lt;code&gt;componentInstance&lt;/code&gt; is the actual instance of the component that you created. Any properties and methods that your component has will be available off of &lt;code&gt;componentInstance&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The other object that will be available is &lt;code&gt;nativeElement&lt;/code&gt;. This is the DOM element that the component renders to and you can use &lt;code&gt;querySelector(cssSelectorGoesHere)&lt;/code&gt; to select the first element matches the selector or &lt;code&gt;querySelectorAll(cssSelectorGoesHere)&lt;/code&gt; to retrieve an array of elements that match.&lt;/p&gt;
&lt;p&gt;Of course, a test isn’t any good if you don’t make changes to the component and test for them. And for that we have &lt;code&gt;detectChanges()&lt;/code&gt;. You’ll see that being used in the third test. You’ll want to use that before you &lt;code&gt;expect()&lt;/code&gt; anything.&lt;/p&gt;
&lt;h2 id=&#34;Ready-Set-…&#34;&gt;&lt;a href=&#34;#Ready-Set-…&#34; class=&#34;headerlink&#34; title=&#34;Ready, Set, …&#34;&gt;&lt;/a&gt;Ready, Set, …&lt;/h2&gt;&lt;p&gt;Now that we have some way of testing our code, we can actually begin to write so. Don’t forget to subscribe to the email I sent out so you don’t miss the next article in this series.&lt;/p&gt;
&lt;p&gt;Code so far is located at &lt;a href=&#34;//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step2&#34;&gt;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step2&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/getting-started-with-angular-2/</guid>
            <title>Getting Started with Angular 2</title>
            <link>http://davembush.github.com/getting-started-with-angular-2/</link>
            <category>angular</category>
            <category>javascript</category>
            <pubDate>Tue, 25 Oct 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Angular 2 is finally released. But the biggest problem with learning Angular 2 is that it is a “Choose your own adventure” kind of framework. And while React has a similar problem, I think Angular has out done them. This means that you can learn bits and pieces of Angular 2, but it will be a while before you get a cohesive understanding of what choices you need to make, which choices are the right choices, and why all of this matters.&lt;/p&gt;
&lt;p&gt;And all of this is even more difficult if you are a relatively new programmer. I’m talking those of you who have less than 5 years of experience and even some of you who have less than 10 years of experience.&lt;/p&gt;
&lt;p&gt;So, what I thought I’d do to address this very real problem is to assemble a very opinionated Angular 2 tutorial. Over the next several weeks I plan to show you how to create a simple CRUD application using Angular 2 in a way that will scale up to larger projects. While I may mention some of the other options along the way, what you’ll end up with is the “right way.” OK. To be fair, most of what I consider “right” is opinion. Some very smart people disagree with me. But, some other very smart people agree with me too.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/10/image-2.png &#34;Getting Started with Angular 2&#34;)&lt;figcaption&gt;Photo credit: [mikecogh](//www.flickr.com/photos/mikecogh/11300349426/) via [VisualHunt](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;  Here’s where I think we are going with this.

&lt;ul&gt;
&lt;li&gt;Getting the project set up.&lt;/li&gt;
&lt;li&gt;Building, Running, Testing&lt;/li&gt;
&lt;li&gt;Adding in external packages&lt;/li&gt;
&lt;li&gt;Client Side Routing&lt;/li&gt;
&lt;li&gt;Building Components&lt;/li&gt;
&lt;li&gt;Using Reactive Programming&lt;/li&gt;
&lt;li&gt;Managing Application State&lt;/li&gt;
&lt;li&gt;Accessing the Server&lt;/li&gt;
&lt;li&gt;Using Web Workers for more Responsive Applications&lt;/li&gt;
&lt;li&gt;Ahead of Time (AoT) Compiling&lt;/li&gt;
&lt;li&gt;Server Side Rendering&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article, let’s focus on just getting a basic application up and running.&lt;/p&gt;
&lt;h2 id=&#34;Prerequisites&#34;&gt;&lt;a href=&#34;#Prerequisites&#34; class=&#34;headerlink&#34; title=&#34;Prerequisites&#34;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;If you haven’t installed Node yet, I suggest you do that now. &lt;a href=&#34;/you-can-start-using-node-today/&#34;&gt;Here’s an article on how to install Node if you are new to Node&lt;/a&gt;. Even if you think you know how to install node (“How hard can that be?”) read the article. You might learn something. I would recommend installing Node 6.x as of this writing or whatever the latest version is when you are reading this.&lt;/p&gt;
&lt;p&gt;You’ll also want to get an editor that has good support for TypeScript, HTML, and CSS. I’ve heard a lot of good things about VS Code, but the editor I use is WebStorm. If you are a .NET programmer, Visual Studio will get you kind of close. If you can’t or won’t switch to WebStorm for your JavaScript development, at least get the ReSharper plugin for Visual Studio. You’ll also need plugins to enable Node and TypeScript development from within Visual Studio if you haven’t installed them already.&lt;/p&gt;
&lt;p&gt;For those of you in the Java world using Eclipse. Eclipse has the worse JavaScript support I’ve ever seen. I understand that it is familiar, but just about any other JavaScript editor will be better.&lt;/p&gt;
&lt;p&gt;Anyhow, I’m using WebStorm. If you are using another editor, you are on your own.&lt;/p&gt;
&lt;h2 id=&#34;Angular-CLI&#34;&gt;&lt;a href=&#34;#Angular-CLI&#34; class=&#34;headerlink&#34; title=&#34;Angular CLI&#34;&gt;&lt;/a&gt;Angular CLI&lt;/h2&gt;&lt;p&gt;Now that you have Node installed and you have a reasonably good JavaScript&amp;#x2F;TypeScript editor, the next thing you will want to install is the &lt;a href=&#34;//github.com/angular/angular-cli&#34;&gt;Angular CLI&lt;/a&gt;. As of this writing, the Angular CLI is at Beta .17 so I can understand that you might be hesitant to use it. But it is done enough that we can use it to get our project going with MUCH less effort than if we did it by hand. And hopefully, the parts we need will get completed by the time we need them.&lt;/p&gt;
&lt;p&gt;There are a few other practical reasons for using the CLI rather than coding it yourself. First, the CLI conforms to the Angular 2 style guide. This was developed by the team that wrote Angular 2. Who better to tell us what the code should look like? And while I may not always agree with some of the recommendations, I understand why they are there and I’m willing to live with them. Hopefully, organizations coding Angular 2 applications will conform to these conventions so that anyone who writes Angular 2 code will already know them as they move from one organization to another.&lt;/p&gt;
&lt;p&gt;The instructions are on the web site for installing. But here is what you need to do in a little more detail.&lt;/p&gt;
&lt;p&gt;First, install the angular cli globally.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install -g angular-cli&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;By the way, when you run &lt;code&gt;npm&lt;/code&gt; commands, or &lt;code&gt;ng&lt;/code&gt; commands later on, you’ll do that from the command line.&lt;/p&gt;
&lt;p&gt;The next thing you’ll want to do is create a new project using the Angular CLI. This is where things are not as clear as I would have liked. Probably because their development environment looks different than mine. The official documents say to run these commands&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ng new PROJECT_NAME cd PROJECT_NAME ng serve&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where PROJECT_NAME is the name you want to give your project. This project name will become a sub directory under the directory you executed the command from. But what if you want to create a new project first, using your editor, and then you want to run &lt;code&gt;ng new&lt;/code&gt;? My first attempt was to run ng new using the directory where my project existed. But that just gave me an error message that said the directory already existed. Yeah, I know.&lt;/p&gt;
&lt;p&gt;Then I tried running &lt;code&gt;ng new&lt;/code&gt; without the directory name inside the project directory. The result of that was being told that I forgot a parameter.&lt;/p&gt;
&lt;p&gt;Well, what about using &lt;code&gt;ng new&lt;/code&gt; with “.” as a parameter, meaning “current directory”. Nope, “.” is not a valid name. It took me a while to figure this out.&lt;/p&gt;
&lt;p&gt;But you can execute &lt;code&gt;ng init&lt;/code&gt; from within the directory your existing project is in and it will scaffold out your application in your current directory.&lt;/p&gt;
&lt;h2 id=&#34;NG-SERVE&#34;&gt;&lt;a href=&#34;#NG-SERVE&#34; class=&#34;headerlink&#34; title=&#34;NG SERVE&#34;&gt;&lt;/a&gt;NG SERVE&lt;/h2&gt;&lt;p&gt;One of the commands you’ll see above is &lt;code&gt;ng serve&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You may wonder what this is and why you would want to run it. Don’t I just deploy my application on my own server? Well, yes, eventually you will. But while you are developing the application you will want or need to test it locally.&lt;/p&gt;
&lt;p&gt;Since Angular 2 requires a build and packaging step, you’ll want to automate this as much as possible. So, before you toss the idea of using &lt;code&gt;ng serve&lt;/code&gt; out, let’s take a look at what this gives you.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;ng serve&lt;/code&gt; gives you a web server to run your application. By default, this runs on &lt;a href=&#34;//localhost:4200&#34;&gt;http://localhost:4200&lt;/a&gt;. You can try this now.&lt;/p&gt;
&lt;p&gt;Oh wait! What’s it doing? It looks like it is doing way more than starting a web server.&lt;/p&gt;
&lt;p&gt;Well, yes, it is. You see &lt;code&gt;ng serve&lt;/code&gt; automatically compiles all of your typescript files and bundles all of your resulting files together every time a file changes. The first time you run &lt;code&gt;ng serve&lt;/code&gt;, it will do this because everything has changed. But it gets better, it will also refresh whatever browser is looking at the application so that your browser will always reflect whatever changes you’ve made in your source code.&lt;/p&gt;
&lt;p&gt;There are a few specific cases where this won’t work, but generally this works out pretty well.&lt;/p&gt;
&lt;p&gt;If you make a change and it doesn’t get reflected as you would expect, try restarting the server. That will probably fix the issue.&lt;/p&gt;
&lt;p&gt;The other thing you can do is that you can configure the server to proxy request to another server. This would be useful if you want to pull data from your Java, ASP.NET, or other platform while still running ng serve for the client side development work.&lt;/p&gt;
&lt;p&gt;If everything is working so far, you should be able to pull up your browser and run the application on &lt;a href=&#34;//localhost:4200&#34;&gt;http://localhost:4200&lt;/a&gt; and see a message “app works!” It really is just the barest of all possible applications.&lt;/p&gt;
&lt;h2 id=&#34;What-Else&#34;&gt;&lt;a href=&#34;#What-Else&#34; class=&#34;headerlink&#34; title=&#34;What Else?&#34;&gt;&lt;/a&gt;What Else?&lt;/h2&gt;&lt;p&gt;If you are curious like I am, you may have taken a look around the file structure to see what was installed. One directory you may have noticed is the “e2e” directory. This is where your end to end tests go. You can run these using the command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ng e2e&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Just make sure you have already run ng serve in another window. You can also run the unit tests that are in *.spec.ts files by running the command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ng test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will run the tests using Jasmine in a Chrome browser.&lt;/p&gt;
&lt;p&gt;The final thing to note about the CLI is that it uses Webpack instead of System.JS to manage bundling and minification. As of this writing, the tour of heroes demo still uses System.JS so this might be a point of confusion for you. The good news is that Webpack is a bit more straight forward than System.JS and I believe you’ll find it a lot easier to use.&lt;/p&gt;
&lt;h2 id=&#34;Follow-Along&#34;&gt;&lt;a href=&#34;#Follow-Along&#34; class=&#34;headerlink&#34; title=&#34;Follow Along&#34;&gt;&lt;/a&gt;Follow Along&lt;/h2&gt;&lt;p&gt;The result of step one can be found on my GitHub account: &lt;a href=&#34;//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-1&#34; title=&#34;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-1&#34;&gt;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-1&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-2-thoughts/</guid>
            <title>Angular 2 Thoughts</title>
            <link>http://davembush.github.com/angular-2-thoughts/</link>
            <category>angular</category>
            <category>javascript</category>
            <pubDate>Tue, 04 Oct 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I was asked this past week what my thoughts were on Angular 2. I wrote early on about my impressions of Angular 2 when it was barely done enough to review. But now that I’ve been working with it for a while and know a bit more, what I want to discuss is more along the line of what it means to the average developer and, more importantly, organizations that are planning to use it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/09/image-3.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Options&#34;&gt;&lt;a href=&#34;#Options&#34; class=&#34;headerlink&#34; title=&#34;Options&#34;&gt;&lt;/a&gt;Options&lt;/h2&gt;&lt;p&gt;While like Angular 1, Angular 2 provides us with most of what we need to build an application. Angular 2 also provides us, out of the box, with very Angular 1 ish ways of putting together an application, complete with modules. What Angular 2 provides that isn’t quite so obvious going into your development is options.&lt;/p&gt;
&lt;p&gt;In angular 1, we had options at the GUI level. And while this is still true for Angular 2, this is not the only place where you will see options.&lt;/p&gt;
&lt;p&gt;In general, you can split your options into, 1) do you want to do things the Angular 1 way, or 2) would you like to use an approach that looks more like React.JS? No place is this more obvious than with how you deal with forms. You can create forms with a declarative syntax, like you’ve done with Angular 1, using &lt;a href=&#34;//angular.io/docs/ts/latest/guide/template-syntax.html&#34;&gt;Template Syntax&lt;/a&gt;. But, in my opinion, a much better way to create forms is with a more reactive approach using the FormControls and FormGroups classes. If all you are doing is just displaying data, you’ll probably find that using the template syntax is all you need. But once you start working with complex forms that accepts data input and implements validation, you’ll probably want to move toward a more reactive approach. The added benefit is that more of you code will be testable.&lt;/p&gt;
&lt;p&gt;The next option you are going to have is figuring out how to move data around your system. Most of the literature is going to suggest you use a data flow that looks a lot like what you were doing in Angular 1. But there is nothing stopping you from using Flux, Redux, or even RxJS instead. And here again, my recommendation would be that you learn these because I think you’ll find that your system will end up being much easier to reason about than the old MVVM stuff you may be used to.&lt;/p&gt;
&lt;h2 id=&#34;Lazy-Loading&#34;&gt;&lt;a href=&#34;#Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;Lazy Loading&#34;&gt;&lt;/a&gt;Lazy Loading&lt;/h2&gt;&lt;p&gt;There are several places where we had to make choices in Angular 2 where the feature has been built into the framework. One of these places is lazy loading. Why load all of your JavaScript up front? Load what you need when you need it. Angular 2 makes this easy with Lazy Loading and the choice between using WebPack (the default) or System.JS.&lt;/p&gt;
&lt;p&gt;I’ll warn you though, as of this writing, Lazy Loading only really works when using System.JS unless you want to spend a lot of time tweaking your webpack config file.&lt;/p&gt;
&lt;h2 id=&#34;Angular-2-CLI&#34;&gt;&lt;a href=&#34;#Angular-2-CLI&#34; class=&#34;headerlink&#34; title=&#34;Angular 2 CLI&#34;&gt;&lt;/a&gt;Angular 2 CLI&lt;/h2&gt;&lt;p&gt;Command Line Interfaces seem to be the cool new kid on the block. You aren’t a real framework unless you have one. While the Angular CLI is not quite baked yet, I can see how this is going to make writing Angular 2 apps much easier. There are a lot of moving parts involved in getting even the most basic of applications up and running. The Angular CLI makes starting your first application REALLY easy. It even hides all of the WebPack internals while allowing you to add your own config file if you need to. Once they have the routing bit re-implemented, it should make using Lazy Loading with WebPack much easier.&lt;/p&gt;
&lt;p&gt;The other thing using the CLI will do for you is that you will automatically start following the &lt;a href=&#34;//angular.io/styleguide&#34;&gt;coding standards&lt;/a&gt; that the Angular team have developed.&lt;/p&gt;
&lt;h2 id=&#34;Angular-2-Components&#34;&gt;&lt;a href=&#34;#Angular-2-Components&#34; class=&#34;headerlink&#34; title=&#34;Angular 2 Components&#34;&gt;&lt;/a&gt;Angular 2 Components&lt;/h2&gt;&lt;p&gt;Right now, there aren’t a lot of options available for Angular 2 for custom components. While Kendo UI has been the defacto standard for Angular components in the past, Telerik is in the middle of rewriting &lt;a href=&#34;//www.telerik.com/blogs/kendo-ui-for-angular-2-r3-roadmap&#34;&gt;Kendo UI for Angular 2&lt;/a&gt; (and React.JS). I haven’t seen any movement in the Angular UI camp to support Angular 2. Angular 2 Material has a few components that seem ready, but they are all relatively simple. The only vendors that seems to have a complete Angular 2 package is &lt;a href=&#34;//wijmo.com/angular2/&#34;&gt;Wijmo&lt;/a&gt; and &lt;a href=&#34;//www.primefaces.org/primeng/&#34;&gt;Prime Faces&lt;/a&gt;. I haven’t tried them and I’m not endorsing them. I’m just reporting what I’ve found. There are a few standalone components here and there, but if you are looking for a set of components you can just use from one source, I’m afraid you’ll have to wait. This isn’t necessarily a bad thing. It gives you time to properly learn Angular 2.&lt;/p&gt;
&lt;p&gt;But what about the Angular 1 to Angular 2 bridge? In my mind this is way more trouble than it is worth. We’ve waited two years for Angular 2, I think we can wait just a bit longer for a set of components that we can use with it.&lt;/p&gt;
&lt;h2 id=&#34;What-Angular-2-Means-for-You&#34;&gt;&lt;a href=&#34;#What-Angular-2-Means-for-You&#34; class=&#34;headerlink&#34; title=&#34;What Angular 2 Means for You&#34;&gt;&lt;/a&gt;What Angular 2 Means for You&lt;/h2&gt;&lt;p&gt;The main difference between Angular 1 and Angular 2 is that just about any Script Kiddie could pick up Angular 1 and get something done. Angular 1 was developed during a period of JavaScript history when JavaScript had not quite reach the level of “serious programming language.” But now, JavaScript has not just reached that level, but several very serious frameworks have been developed.&lt;/p&gt;
&lt;p&gt;What I notice as I review the JavaScript landscape is that we’ve moved from just getting stuff done with little to no planning, to treating JavaScript as a first class programming language that requires, and even demands that we adhere to a set of programming best practices that we would use for any other language. These include things like naming conventions and design patterns. For you to write code well in this new universe, you will need to understand what these design patterns are, why they exist and how to implement them well. If you continue on your merry script kiddie way, you will soon find yourself out of work.&lt;/p&gt;
&lt;p&gt;Further, if you think you know Angular 2 just because you know Angular 1, or you think Angular 2 will be easy to pick up because you know Angular 1, you are in for a very big surprise. Many of the concepts are the same. But since Angular 2 has so many options, you should learn the options well so that you can make an educated decision about which option to use.&lt;/p&gt;
&lt;h2 id=&#34;What-Angular-2-Means-for-Organizations&#34;&gt;&lt;a href=&#34;#What-Angular-2-Means-for-Organizations&#34; class=&#34;headerlink&#34; title=&#34;What Angular 2 Means for Organizations&#34;&gt;&lt;/a&gt;What Angular 2 Means for Organizations&lt;/h2&gt;&lt;p&gt;Similarly, if you are an organization that is planning to move to Angular 2, don’t expect your programmers to just pick up and move to Angular 2 overnight. Give them time to learn it. My recommendation is that you make learning it part of their job while they continue to use Angular 1 for the product you are trying to complete. We all have time pressure, so you need to factor learning into the schedule.&lt;/p&gt;
&lt;p&gt;But Angular 2 may also mean you need to find additional programmers who already have the skills and can transfer the knowledge to your team.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-2-%E2%80%93-first-impressions-compared-to-angular-1/</guid>
            <title>Angular 2 – First Impressions [Compared to Angular 1]</title>
            <link>http://davembush.github.com/angular-2-%E2%80%93-first-impressions-compared-to-angular-1/</link>
            <category>angular</category>
            <category>javascript</category>
            <pubDate>Thu, 25 Feb 2016 08:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve spent the last week putting together &lt;a href=&#34;//github.com/DaveMBush/MEA2N_CRUD_Reference_App&#34;&gt;a reference app for Angular 2&lt;/a&gt;.  It is a great exercise to try to nail down the basics of how a new framework works.  Next week I plan on doing a similar exercise for &lt;a href=&#34;//facebook.github.io/react/&#34;&gt;React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyhow, I thought for this week’s post, I would try to relay some of my impressions, and some of the issues I see with this new framework.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/02/image-3.png&#34; alt=&#34;Angular 2 - First Impressions&#34; title=&#34;Angular 2 - First Impressions&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Why-call-it-Angular-2&#34;&gt;&lt;a href=&#34;#Why-call-it-Angular-2&#34; class=&#34;headerlink&#34; title=&#34;Why call it Angular 2?&#34;&gt;&lt;/a&gt;Why call it Angular 2?&lt;/h2&gt;&lt;p&gt;I realize naming things is always hard, but I think naming something similar to something that already exist is dangerous.&lt;/p&gt;
&lt;p&gt;When .NET first came out, many ASP programmers tried to use ASP.NET as though it were ASP.  That didn’t turn out so well for them and, I think, confused them.&lt;/p&gt;
&lt;p&gt;VB.NET had a similar problem.  During those early days of .NET I was working for a training company.  I had several ex VB6 developers show up to my C# class.  Do you know why?  Because they realized that VB.NET was such an entirely different language, they were better off just starting over with a new language than possibly treating VB.NET as though it were VB6.  Good call if you ask me.&lt;/p&gt;
&lt;p&gt;Most recently, Microsoft has learned from history and decided to rename the product they’ve been referring to as .NET 5 as .NET Core 1.0.  In this case it is enough like .NET that keeping .NET in the name is a good thing.  But starting the versioning at 1.0 again also shows that this is a brand new product with some differences from what we are all used to.&lt;/p&gt;
&lt;p&gt;Rob Eisenburg decided to call his new project Aurelia instead of Durandal 2 because they are enough different from each other.  While I’m not an expert on either product, I’m pretty sure that there are elements of Durandal in Aurelia simply because Rob was significantly involved in both projects.&lt;/p&gt;
&lt;p&gt;Which brings me to Angular 2.&lt;/p&gt;
&lt;p&gt;Why call it Angular anything?!  Angular 2 has very little in common with Angular 1.x other than basic concepts.  But, so much has changed it is like calling “ASP.NET 1.0” “ASP 5”.  It just doesn’t work, and it hides the fact that there is going to be a HUGE learning curve for those who are familiar with Angular 1.&lt;/p&gt;
&lt;h2 id=&#34;So-What-Has-Changed&#34;&gt;&lt;a href=&#34;#So-What-Has-Changed&#34; class=&#34;headerlink&#34; title=&#34;So What Has Changed?&#34;&gt;&lt;/a&gt;So What Has Changed?&lt;/h2&gt;&lt;h3 id=&#34;Case-sensitive-vs-Snake-Case&#34;&gt;&lt;a href=&#34;#Case-sensitive-vs-Snake-Case&#34; class=&#34;headerlink&#34; title=&#34;Case sensitive vs Snake Case&#34;&gt;&lt;/a&gt;Case sensitive vs Snake Case&lt;/h3&gt;&lt;p&gt;In Angular 1, all of the directives that we create are case sensitive in our code and snake-case-in-our-html.  In Angular2, the HTML markup is case sensitive.  Rob went on a rant about this &lt;a href=&#34;//eisenbergeffect.bluespire.com/on-angular-2-and-html/&#34;&gt;here&lt;/a&gt;.  His issue is that Angular 2 isn’t HTML spec compliant because it is case sensitive.  I’m really not sure how much this matters as long as the final result is compliant.  My issue is more along the lines of, “did this really need to change at all?”&lt;/p&gt;
&lt;h3 id=&#34;Basic-Syntax-Changes&#34;&gt;&lt;a href=&#34;#Basic-Syntax-Changes&#34; class=&#34;headerlink&#34; title=&#34;Basic Syntax Changes&#34;&gt;&lt;/a&gt;Basic Syntax Changes&lt;/h3&gt;&lt;p&gt;Then there are the basic syntax changes.  If you want to bind to an html element property you use square brackets.  If you want to fire an event, you use parenthesis.  If you want two way databinding, you use both.&lt;/p&gt;
&lt;p&gt;What? We didn’t need this distinction with Angular 1.  Why the distinction in Angular 2?  I suppose it has something to do with making it easier for Angular 2 to parse the HTML.  But, from the outside looking in, the thing you are binding to should make it clear enough what it is you are trying to do.  It reminds me of Pascal (the language).  More syntax for the sake of making sure the programmer can’t shoot himself in the foot.&lt;/p&gt;
&lt;h3 id=&#34;TypeScript&#34;&gt;&lt;a href=&#34;#TypeScript&#34; class=&#34;headerlink&#34; title=&#34;TypeScript&#34;&gt;&lt;/a&gt;TypeScript&lt;/h3&gt;&lt;p&gt;I fell in love with TypeScript back at version 0.9.  The advantage to an object oriented programmer is that you don’t have to think differently about your client side code using TypeScript than you would about your server side code if you are using a real object oriented language like C#, or Java on the server side.&lt;/p&gt;
&lt;p&gt;But TypeScript isn’t JavaScript.  And while you can write Angular 2 using JavaScript, the preferred language, and the language that the bulk of Angular 2 is written in, is TypeScript.&lt;/p&gt;
&lt;p&gt;To confuse matters, rather than tell the world, “Hey, just use TypeScript” they decided to give us options.  You can use Dart (what’s that?) JavaScript, or TypeScript.  We’ve already been through this with VB.NET and C#.  Doesn’t anyone learn from history?  Eventually C# won.  Oh, there are a few hold outs.  But even most of the VB lovers have given up and moved to C#.  It will be interesting to see how this TypeScript move plays out.&lt;/p&gt;
&lt;p&gt;On the one hand, I think TypeScript is a better version of JavaScript.  On the other hand, if all you know is TypeScript, it will make it harder to find a job as a JavaScript programmer.&lt;/p&gt;
&lt;p&gt;While TypeScript is definitely a better choice than having a new proprietary language just for Angular, which was the original plan, I still think we might have better off using pure JavaScript as the language of choice.&lt;/p&gt;
&lt;p&gt;Like I said, I’m a fan of TypeScript, I’m just not sure making this the default language is a good choice.&lt;/p&gt;
&lt;h3 id=&#34;Everything-Visual-Is-a-Component&#34;&gt;&lt;a href=&#34;#Everything-Visual-Is-a-Component&#34; class=&#34;headerlink&#34; title=&#34;Everything Visual Is a Component&#34;&gt;&lt;/a&gt;Everything Visual Is a Component&lt;/h3&gt;&lt;p&gt;Unlike Angular 1 where you have pages and directives, everything in Angular 2 from a visual perspective maps to an element.  This is a good change.&lt;/p&gt;
&lt;p&gt;At first when I heard this, I had trouble having it make sense in my mind.  But having implemented it once, I see that it really does make a lot of sense.&lt;/p&gt;
&lt;p&gt;You can also create new attributes that you can attach to an element.  But attributes add behavior to an element rather that making an element do or be something entirely different like you could do with Angular 1.&lt;/p&gt;
&lt;h3 id=&#34;Component-CSS&#34;&gt;&lt;a href=&#34;#Component-CSS&#34; class=&#34;headerlink&#34; title=&#34;Component CSS&#34;&gt;&lt;/a&gt;Component CSS&lt;/h3&gt;&lt;p&gt;I’m really not sure if I like this feature or not.  Done right, I think it is a very good thing.  Done poorly, this could be a disaster.&lt;/p&gt;
&lt;p&gt;Here’s the deal. In Angular 1, when you wrote a directive, any CSS you wrote to go with it needed to be included separately by the person using your component.  In Angular 2, you bind that CSS to your component and it gets included in the HEAD of your html.  It also gets mangled, similar to how ASP.NET would mangle IDs in WebForms, so that the CSS from the component won’t conflict with the other CSS that the page is using.&lt;/p&gt;
&lt;p&gt;This is all in preparation for the forthcoming HTML standard that will support Web Components. What is good about this is that the component is stand alone.  What is bad about this is that if I need to override the CSS, that might be a bit more difficult to do than what we are used to.&lt;/p&gt;
&lt;h3 id=&#34;Routing&#34;&gt;&lt;a href=&#34;#Routing&#34; class=&#34;headerlink&#34; title=&#34;Routing&#34;&gt;&lt;/a&gt;Routing&lt;/h3&gt;&lt;p&gt;My biggest disappointment with Angular 2 is with the new router.  Is it better than the router that comes with Angular 1?  Yes.  Absolutely.&lt;/p&gt;
&lt;p&gt;Is it better than &lt;a href=&#34;//angular-ui.github.io/ui-router/&#34;&gt;UI-Router&lt;/a&gt;?  I’m not so sure.&lt;/p&gt;
&lt;p&gt;The new router will let you have nested routes.  While it doesn’t do it in exactly the same way as you can with UI-Router, it can be done.  And like UI-Router’s ng-sref, you can link to routes by name.&lt;/p&gt;
&lt;p&gt;But the part I never could find clear documentation on is how I would create two insertion points in my HTML for route specific content like I could do with UI-Router.  From what little I could find it looks like they had something working that looked a lot like UI-Router and then they ripped it out in favor of some other method that either is not there yet, or is not clearly documented.&lt;/p&gt;
&lt;h3 id=&#34;Singletons&#34;&gt;&lt;a href=&#34;#Singletons&#34; class=&#34;headerlink&#34; title=&#34;Singletons&#34;&gt;&lt;/a&gt;Singletons&lt;/h3&gt;&lt;p&gt;If you’ve done any work with Angular 1, you’ll be familiar with the confusion between the different types of singletons.  The good news with Angular 2 is that everything is just considered a service.  If you decorate your class with “Injectable” the class can be injected into other classes. But, and I consider this a really big stumbling block moving to Angular 2, services are really singletons.  This is both good and bad.&lt;/p&gt;
&lt;p&gt;Typically we create a hierarch of components in our site with components housing other components.  To get singleton behavior, you would declare the need for your service as far up that hierarchy as is practical.  Just not at the app level.  You would hardly ever want to do that.  You only declare the dependency once in your app.  At the point you declare the dependency a new object is created that is injected anywhere else down the component hierarchy you specify that you need it in your constructor.&lt;/p&gt;
&lt;p&gt;But you need to pay attention to how I phrased that last paragraph because what creates the object is the fact that you declared the dependency.  If you declare it again, you get a new object.&lt;/p&gt;
&lt;p&gt;At first glance, this may appear to be a bad thing.  But I can think of situations where I may actually want to either have one object for an entire application or one object per instance of a component.  This new way of implementing injectable objects gives us that flexibility.&lt;/p&gt;
&lt;h3 id=&#34;Promises-vs-Observables&#34;&gt;&lt;a href=&#34;#Promises-vs-Observables&#34; class=&#34;headerlink&#34; title=&#34;Promises vs Observables&#34;&gt;&lt;/a&gt;Promises vs Observables&lt;/h3&gt;&lt;p&gt;While it doesn’t make sense to get into the details here, it is worth mentioning that instead of using Promises to avoid callback hell, Angular 2 is using RXjs’ observables.  It might take a while to get your head around this new paradigm.  But as it turns out, it would appear that observables can be used in more places than promises can because they are stream based.&lt;/p&gt;
&lt;h2 id=&#34;Better-x2F-New-x2F-Enhanced&#34;&gt;&lt;a href=&#34;#Better-x2F-New-x2F-Enhanced&#34; class=&#34;headerlink&#34; title=&#34;Better&amp;#x2F;New&amp;#x2F;Enhanced&#34;&gt;&lt;/a&gt;Better&amp;#x2F;New&amp;#x2F;Enhanced&lt;/h2&gt;&lt;h3 id=&#34;Declarative-or-Explicitly-Coded-Forms&#34;&gt;&lt;a href=&#34;#Declarative-or-Explicitly-Coded-Forms&#34; class=&#34;headerlink&#34; title=&#34;Declarative or Explicitly Coded Forms&#34;&gt;&lt;/a&gt;Declarative or Explicitly Coded Forms&lt;/h3&gt;&lt;p&gt;In Angular 1, just about everything view related is declarative.  This works, but at times I found it awkward to use.  For example, I needed to add validation to an element and it just seemed there must be an easier more direct way to do this than what I was given in Angular 1.&lt;/p&gt;
&lt;p&gt;In Angular 2, you can just put enough code in the HTML to render the element and then attach the JavaScript to it using function calls.  This gives you A LOT more control over you view, even if it does take a bit more work to get it setup.&lt;/p&gt;
&lt;p&gt;I think there are times when it will still make sense to do everything declaratively.  But for anything more than a trivial form, I think you are going to love this new option.&lt;/p&gt;
&lt;h3 id=&#34;Binding-Optimization&#34;&gt;&lt;a href=&#34;#Binding-Optimization&#34; class=&#34;headerlink&#34; title=&#34;Binding Optimization&#34;&gt;&lt;/a&gt;Binding Optimization&lt;/h3&gt;&lt;p&gt;The Angular 2 databinding seems to be optimized.  I don’t fully understand exactly what is different, but I’ll take their word for it that it is, or will be once we are no longer in beta.&lt;/p&gt;
&lt;h2 id=&#34;Still-Needs-Work&#34;&gt;&lt;a href=&#34;#Still-Needs-Work&#34; class=&#34;headerlink&#34; title=&#34;Still Needs Work&#34;&gt;&lt;/a&gt;Still Needs Work&lt;/h2&gt;&lt;h3 id=&#34;Rendering-Optimization&#34;&gt;&lt;a href=&#34;#Rendering-Optimization&#34; class=&#34;headerlink&#34; title=&#34;Rendering Optimization&#34;&gt;&lt;/a&gt;Rendering Optimization&lt;/h3&gt;&lt;p&gt;As I’ve started to look at React, and other systems that create “Virtual DOMs” I keep thinking, “Why can’t Angular do something like this?”  Being able to manipulate all of the DOM and then show the result when you are done is one of the easiest places to improve performance, and yet I don’t see any hooks in Angular that would make this possible.  This isn’t to say that I think React is better than Angular.  So far, I see some really big issues with React as well.  But I’d love to have some kind of Virtual DOM implementation in Angular without losing what is already built in.&lt;/p&gt;
&lt;h3 id=&#34;Testability&#34;&gt;&lt;a href=&#34;#Testability&#34; class=&#34;headerlink&#34; title=&#34;Testability&#34;&gt;&lt;/a&gt;Testability&lt;/h3&gt;&lt;p&gt;I can’t comment fully on the ability to test Angular 2 simply because the documentation for this is not fully baked.  So, I’ll refrain from making any comments at all.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;There are a lot of wins with Angular 2 and I think, in general, you are going to like this new framework.  It will be interesting to see how the UI component space will mature around this new framework.&lt;/p&gt;
&lt;p&gt;If you are interested in learning Angular 2, I would suggest that you work through the &lt;a href=&#34;//angular.io/docs/ts/latest/tutorial/&#34;&gt;tutorial&lt;/a&gt; and read through the &lt;a href=&#34;//angular.io/docs/ts/latest/guide/&#34;&gt;development guide&lt;/a&gt;.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
