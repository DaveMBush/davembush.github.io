<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://davembush.github.com</id>
    <title>Dave&#39;s Notebook • Posts by &#34;testing&#34; category</title>
    <link href="http://davembush.github.com" />
    <updated>2018-01-23T11:30:24.000Z</updated>
    <category term="project management" />
    <category term="code coverage" />
    <category term="tdd" />
    <category term="unit test" />
    <category term="code" />
    <category term="programming" />
    <category term="angular" />
    <category term="javascript" />
    <category term="performance" />
    <category term="react.js" />
    <category term="agile" />
    <category term="failure" />
    <category term="kanban" />
    <category term="scrum" />
    <category term="interview" />
    <category term="job search" />
    <category term="test driven development" />
    <category term="mvvm" />
    <category term="DRY" />
    <category term="loose coupling" />
    <category term="single responsibility" />
    <category term="c#" />
    <category term="learning" />
    <category term="bug" />
    <category term="ext js" />
    <category term="sencha" />
    <category term="career" />
    <category term="react" />
    <category term="ngrx" />
    <category term="redux" />
    <category term="functional" />
    <category term="reactive" />
    <category term="mvp" />
    <category term="private" />
    <category term="testing" />
    <category term="typescript" />
    <category term="routing" />
    <category term="pointers" />
    <category term="unsafe" />
    <category term="class diagram" />
    <category term="vb.net" />
    <category term="visual studio" />
    <category term="flux" />
    <category term="lazy loading" />
    <category term="scope" />
    <category term="DOM" />
    <category term="ionic" />
    <category term="putty" />
    <category term="ssh" />
    <category term="formgroup" />
    <category term="validation" />
    <category term="angular-cli" />
    <category term="modules" />
    <category term="ngmodule" />
    <category term="observables" />
    <category term="RxJS" />
    <category term="model driven" />
    <category term="reactive forms" />
    <category term="estimating" />
    <category term="story points" />
    <category term="best practices" />
    <category term="design patterns" />
    <category term="architecture" />
    <category term="asp.net" />
    <category term="memory" />
    <category term="angular.js" />
    <category term="iis" />
    <category term="ajax" />
    <category term="json" />
    <category term="controller" />
    <category term="MVC" />
    <category term="view" />
    <category term="404" />
    <category term="application_error" />
    <category term="exceptions" />
    <category term="viewstate" />
    <category term="archietcture" />
    <category term="bll" />
    <category term="dal" />
    <category term="Three Tiered" />
    <category term=".net" />
    <category term="enums" />
    <category term="tutorial" />
    <category term="code quality" />
    <category term="cyclomatic" />
    <category term="halstead" />
    <category term="child component" />
    <category term="CefSharp" />
    <category term="Chromium" />
    <category term="Vista" />
    <category term="VPN" />
    <category term="xp" />
    <category term="get" />
    <category term="properties" />
    <category term="set" />
    <category term="empty" />
    <category term="string" />
    <category term="habits" />
    <category term="application testing" />
    <category term="dependency injection" />
    <category term="debugging" />
    <category term="cms" />
    <category term="dotnetnuke" />
    <category term="WordPress" />
    <category term="authority" />
    <category term="confidence" />
    <category term="datalist" />
    <category term="listview" />
    <category term="comments" />
    <category term="tdd. agile" />
    <category term="bootstrap" />
    <category term="copy &amp;amp; paste" />
    <category term="cross browser" />
    <category term="idisposable" />
    <category term="animation" />
    <category term="css" />
    <category term="html" />
    <category term="debug" />
    <category term="checked" />
    <category term="double" />
    <category term="float" />
    <category term="int" />
    <category term="long" />
    <category term="short" />
    <category term="unchecked" />
    <category term="currency" />
    <category term="decimal" />
    <category term="floating point math" />
    <category term="single" />
    <category term="authentication" />
    <category term="isinrole" />
    <category term="roles" />
    <category term="user" />
    <category term="definition of done" />
    <category term="DoD" />
    <category term="dispose" />
    <category term="finalize" />
    <category term="suppressfinalize" />
    <category term="education" />
    <category term="client side" />
    <category term="development" />
    <category term="class" />
    <category term="dynamic classing" />
    <category term="gridview" />
    <category term="college" />
    <category term="freshman" />
    <category term="babel" />
    <category term="es2015" />
    <category term="es6" />
    <category term="jest" />
    <category term="bdd" />
    <category term="Single Responsibility" />
    <category term="Architecture" />
    <category term="full stack developer" />
    <category term="web development" />
    <category term="formsauthentication" />
    <category term="manual" />
    <category term="redirectfromloginpage" />
    <category term="setauthcookie" />
    <category term="NgRX" />
    <category term="luck" />
    <category term="social skills" />
    <category term="brain" />
    <category term="health" />
    <category term="programmer" />
    <category term="productivity" />
    <category term="QA" />
    <category term="extreme programming" />
    <category term="software" />
    <category term="httpcontext" />
    <category term="items" />
    <category term="session" />
    <category term="naming conventions" />
    <category term="variables" />
    <category term="self improvement" />
    <category term="301" />
    <category term="302" />
    <category term="fiddler" />
    <category term="infinite loop" />
    <category term="images" />
    <category term="iTextSharp" />
    <category term="PDF" />
    <category term="concatenation" />
    <category term="quirks" />
    <category term="parsing" />
    <category term="xhtml" />
    <category term="fonts" />
    <category term="stack" />
    <category term="htmltidy" />
    <category term="tables" />
    <category term="acrofields" />
    <category term="form fields" />
    <category term="outputstream" />
    <category term="pdfreader" />
    <category term="pdfstamper" />
    <category term="bind" />
    <category term="callbacks" />
    <category term="currying" />
    <category term="events" />
    <category term="business rules" />
    <category term="boolean" />
    <category term="fields" />
    <category term="methods" />
    <category term="object" />
    <category term="functions" />
    <category term="inheritance" />
    <category term="prototype" />
    <category term="hoist" />
    <category term="falsy" />
    <category term="truthy" />
    <category term="istanbul" />
    <category term="jasmine" />
    <category term="hoisting" />
    <category term="types" />
    <category term="type conversion" />
    <category term="dialog" />
    <category term="jQuery" />
    <category term="validation controls" />
    <category term="async" />
    <category term="each" />
    <category term="collapse" />
    <category term="expand" />
    <category term="load" />
    <category term="partial content" />
    <category term="tooltip" />
    <category term="regions" />
    <category term="limiting beliefs" />
    <category term="angular material" />
    <category term="linkedin" />
    <category term="social media" />
    <category term="tips" />
    <category term="CI. Continuous Integration" />
    <category term="magic numbers" />
    <category term="magic strings" />
    <category term="flex" />
    <category term="multiview" />
    <category term="wizard" />
    <category term="threading" />
    <category term="intern" />
    <category term="express" />
    <category term="node" />
    <category term="nunit" />
    <category term="object initializers" />
    <category term="video" />
    <category term="reflection" />
    <category term="unity" />
    <category term="best practice" />
    <category term="asp.net postback button" />
    <category term="iText" />
    <category term="property based testing" />
    <category term="cli" />
    <category term="software architecture" />
    <category term="rxjs. angular 2" />
    <category term="redirect" />
    <category term="response" />
    <category term="responsive design" />
    <category term="parallel" />
    <category term="selenium" />
    <category term="Marble Testing" />
    <category term="java" />
    <category term="grid" />
    <category term="hub" />
    <category term="serialization" />
    <category term="specflow" />
    <category term="like" />
    <category term="sql" />
    <category term="tsql" />
    <category term="where clause" />
    <category term="do while" />
    <category term="for next" />
    <category term="ms-sql" />
    <category term="while" />
    <category term="gamification" />
    <category term="paired programming" />
    <category term="reference types" />
    <category term="stringbuilder" />
    <category term="value types" />
    <category term="technical debt" />
    <category term="activetabindex" />
    <category term="postback" />
    <category term="tab control" />
    <category term="tabcontrol" />
    <category term="kata" />
    <category term="extjs" />
    <category term="email" />
    <category term="mailaddress" />
    <category term="mailmessage" />
    <category term="smtpclient" />
    <category term="Quality" />
    <category term="behavior" />
    <category term="psychology" />
    <category term="portal" />
    <category term="web 1.0" />
    <category term="web 2.0" />
    <category term="trace" />
    <category term="compiler" />
    <category term="errror" />
    <category term="warning" />
    <category term="connection string" />
    <category term="dataset" />
    <category term="error" />
    <category term="web.config" />
    <category term="tslint" />
    <category term="emotions" />
    <category term="hiring" />
    <category term="aspnet_regsql" />
    <category term="forms based authentication" />
    <category term="jsdom" />
    <category term="karma" />
    <category term="noTDD" />
    <category term="bundling" />
    <category term="gulp" />
    <category term="minification" />
    <category term="node.js" />
    <category term="file upload" />
    <category term="objects" />
    <category term="hide" />
    <category term="vb.net attributes" />
    <category term="nothing" />
    <category term="nullable" />
    <category term="conditional startup" />
    <category term="windows forms" />
    <category term="winforms" />
    <category term="char" />
    <category term="split" />
    <category term="strict" />
    <category term="clarity" />
    <category term="ui" />
    <category term="ux" />
    <category term="asmx" />
    <category term="error handling" />
    <category term="webservice" />
    <category term="binary" />
    <category term="bitwise" />
    <category term="operators" />
    <category term="automation" />
    <category term="browser" />
    <category term="mstest" />
    <category term="immutable" />
    <category term="global" />
    <category term="await" />
    <category term="webapi" />
    <category term="configuration" />
    <category term="devops" />
    <category term="testcasedata" />
    <category term="testcasesource" />
    <category term="closure" />
    <category term="loops" />
    <category term="certification" />
    <category term="mcsd" />
    <category term="microsoft" />
    <category term="inversion of control" />
    <category term="ioc" />
    <category term="casting" />
    <category term="convert" />
    <category term="arguements" />
    <category term="command line" />
    <category term="main" />
    <category term="yagni" />
    <category term="npm" />
    <category term="nvm" />
    <category term="resumes" />
    <category term="change-detection" />
    <category term="state-management" />
    <category term="web-workers" />
    <category term="libraries" />
    <category term="strong typing" />
    <category term="linting" />
    <category term="constructors" />
    <category term="clean code" />
    <category term="smart-ngrx" />
    <category term="ngrx-store" />
    <category term="ngrx-entity" />
    <category term="ngrx-effects" />
    <category term="TypeScript" />
    <category term="Performance" />
    <entry>
        <id>http://davembush.github.com/property-based-testing-revealed-a-better-way-to-test/</id>
        <title>Property Based Testing Revealed - A Better Way to Test</title>
        <link rel="alternate" href="http://davembush.github.com/property-based-testing-revealed-a-better-way-to-test/"/>
        <content type="html">&lt;p&gt;Over the last couple of weeks, I’ve been experimenting with Property Based Testing.  While I’m probably doing it “wrong” by many definitions, I’m finding it useful enough that I’m adding it to my testing toolbox. &lt;figure&gt;&lt;img src=&#34;/uploads/2018/01/2018-01-23.jpg&#34; title=&#34;Property Based Testing Revealed - A Better Way to Test&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//visualhunt.com/author/0651d3&#34;&gt;abraham.williams&lt;/a&gt; on &lt;a href=&#34;//visualhunt.com/re/284007&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by-sa/2.0/&#34;&gt; CC BY-SA&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;What’s-A-Property&#34;&gt;&lt;a href=&#34;#What’s-A-Property&#34; class=&#34;headerlink&#34; title=&#34;What’s A Property?&#34;&gt;&lt;/a&gt;What’s A Property?&lt;/h2&gt;&lt;p&gt;As you introduce yourself to Property Based Testing, one of the first things you’ll need to understand is what they mean by a “property.”  Most of us who have been doing some form of Object Oriented Programming think of “properties” as data points on an object.  That’s not even close to what the word means when we talk about Property Based Testing. &lt;/p&gt;
&lt;p&gt;Roughly translated, a “property” is some feature of the code under tests.  Most of the beginner literature uses the classic add(a, b) method.  Properties of an add method include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add(a, b) === add(b, a)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;a&lt;/code&gt; is zero then &lt;code&gt;add()&lt;/code&gt; will return the value of &lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add(a, b) - a&lt;/code&gt; will equal b (and similar for minus b equals a).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The key here is that we shouldn’t need to know too much about the data we are sending in to our add method because we are going to send in random data.  So, any property we test needs to be expressed in a data agnostic way.&lt;/p&gt;
&lt;h2 id=&#34;What-are-the-Advantages&#34;&gt;&lt;a href=&#34;#What-are-the-Advantages&#34; class=&#34;headerlink&#34; title=&#34;What are the Advantages?&#34;&gt;&lt;/a&gt;What are the Advantages?&lt;/h2&gt;&lt;p&gt;And while having to think about our test in a data agnostic way is hard, at first, the first advantage is that we start thinking about testing our code in terms of generalities instead of specifics.  And, really, a general test is a much more robust test. &lt;/p&gt;
&lt;p&gt;But, we need data for our tests, right?  Where does that come from?  Depending on the framework you are using, this may vary, but the general idea is that you describe what the data should look like, and the framework will generate random parameters to pass in.  This fact leads us to two more benefits of Property Based Testing. &lt;/p&gt;
&lt;p&gt;First, since all I need to do is describe what the data should look like, I’m not forced to think of the data I want to use to tests my function.  I don’t know about you, but my tendency is to create data that works with my function instead of trying to create data that will break my function.  By having the framework create random data, I’m more likely to test with data that will break my code. &lt;/p&gt;
&lt;p&gt;And that leads to the second benefit of random data.  I’m more likely to find the edge cases for my function under test. Now, one detail I’ve left out is that each test you create gets run multiple times with different random data.  So, it isn’t like one day your tests work great and another day they fail.  No.  The system I use generates 100 different sets of data per tests.  You can have it create more or less tests as needed.&lt;/p&gt;
&lt;h2 id=&#34;Places-You-Might-Not-Use-Property-Based-Testing&#34;&gt;&lt;a href=&#34;#Places-You-Might-Not-Use-Property-Based-Testing&#34; class=&#34;headerlink&#34; title=&#34;Places You Might Not Use Property Based Testing&#34;&gt;&lt;/a&gt;Places You Might Not Use Property Based Testing&lt;/h2&gt;&lt;p&gt;Now, running 100 different permutations on a test that takes a long time to run may not be practical.  My first question would be, why does your code take that long?  Are you trying to unit test HTML code and the rendering is taking a long time?  That’s probably a poor use case. &lt;/p&gt;
&lt;p&gt;Another place where you might want to avoid property based tests is when you’ve already basically tested the component parts and you just need to do a sanity check in the integration of the parts.&lt;/p&gt;
&lt;h2 id=&#34;Places-You-Might-Use-Property-Based-Testing-Anyhow&#34;&gt;&lt;a href=&#34;#Places-You-Might-Use-Property-Based-Testing-Anyhow&#34; class=&#34;headerlink&#34; title=&#34;Places You Might Use Property Based Testing Anyhow&#34;&gt;&lt;/a&gt;Places You Might Use Property Based Testing Anyhow&lt;/h2&gt;&lt;p&gt;On the other hand, not having to come up with my own parameter values makes the whole Property Based Testing pretty attractive, even when it doesn’t make a lot of sense.  And it might encourage you to write smaller functions.&lt;/p&gt;
&lt;h2 id=&#34;Problems-I’ve-Run-Into&#34;&gt;&lt;a href=&#34;#Problems-I’ve-Run-Into&#34; class=&#34;headerlink&#34; title=&#34;Problems I’ve Run Into&#34;&gt;&lt;/a&gt;Problems I’ve Run Into&lt;/h2&gt;&lt;p&gt;I would say the biggest problem I’ve run into using Property Based Testing is learning how to write tests that don’t re-implement the logic in my code in order to test the logic in my code. &lt;/p&gt;
&lt;p&gt;Going back to the &lt;code&gt;add(a, b)&lt;/code&gt; example above.  It is tempting to test that function by verifying that &lt;code&gt;add(a, b) === a + b&lt;/code&gt;.  But that wouldn’t be a very good test because we used the same logic that is probably already being used inside the &lt;code&gt;add()&lt;/code&gt; function.  In example based testing (classic unit testing), we have the same problem, we just don’t use code to implement it.  We add the numbers in our head and verify that &lt;code&gt;add(a, b) = c&lt;/code&gt;.  But, &lt;code&gt;c&lt;/code&gt; is just &lt;code&gt;a + b&lt;/code&gt; done in our head. &lt;/p&gt;
&lt;p&gt;Which leads me back to, even though it is “harder” we end up with better tests.&lt;/p&gt;
&lt;h2 id=&#34;I’m-Probably-Doing-it-Wrong&#34;&gt;&lt;a href=&#34;#I’m-Probably-Doing-it-Wrong&#34; class=&#34;headerlink&#34; title=&#34;I’m Probably Doing it Wrong&#34;&gt;&lt;/a&gt;I’m Probably Doing it Wrong&lt;/h2&gt;&lt;p&gt;I’m so new to this way of thinking, that I’m pretty sure I’m doing everything wrong.  But, I figure I can take advantage of what I understand and as I write more tests, I’ll find more and better ways of writing tests.  I encourage you to pick up a property based framework for your development environment and give it a try.&lt;/p&gt;
&lt;h2 id=&#34;Resources&#34;&gt;&lt;a href=&#34;#Resources&#34; class=&#34;headerlink&#34; title=&#34;Resources:&#34;&gt;&lt;/a&gt;Resources:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//hypothesis.works/articles/what-is-property-based-testing/&#34;&gt;What is Property Based Testing?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//fsharpforfunandprofit.com/posts/property-based-testing/&#34;&gt;An Introduction to Property Based Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="tdd" />
        <category term="testing" />
        <category term="property based testing" />
        <updated>2018-01-23T11:30:24.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/8-reasons-johnny-does-not-write-bug-free-code/</id>
        <title>8 Reasons Johnny Does Not Write Bug Free Code</title>
        <link rel="alternate" href="http://davembush.github.com/8-reasons-johnny-does-not-write-bug-free-code/"/>
        <content type="html">&lt;p&gt;There have been a number of things that have occurred over the last week that have prompted this particular post.  And for anyone I work with, this is not an indictment of our work place so much as it is an indictment of our industry.  PLEASE don’t take this personally.&lt;/p&gt;
&lt;p&gt;Some of those reasons will show up in this article.  But the question we need to examine today is why is it so hard to write bug free code.  And I’m not even talking about perfection.  Why is it that we miss the simple stuff?  The stuff that once it is found, we think, “how could we have missed that?!”.  I’m perfectly aware that all code has bugs some just haven’t been found yet.  I’m also aware that no matter how hard I try, the stupid bugs always make their way past my desk.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/09/image-1.png &#34;8 Reasons Johnny Does Not Write Bug Free Code&#34;)&lt;figcaption&gt;Photo credit: [~Pawsitive~Candie_N](//www.flickr.com/photos/scjn/3450910519/) via [Visualhunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;No-Training&#34;&gt;&lt;a href=&#34;#No-Training&#34; class=&#34;headerlink&#34; title=&#34;No Training&#34;&gt;&lt;/a&gt;No Training&lt;/h2&gt;&lt;p&gt;Certainly not the only reason.  But at the same time I think this is a core reason.  Our industry really sucks when it comes to teaching computer science.  So much so, that I’ve written articles about how, for the most part, you don’t need a college education to become a programmer.  Maybe if we taught what programmers don’t already know how to do, a college education would be valuable.&lt;/p&gt;
&lt;p&gt;But what do we do instead?  We teach programmers how to program.&lt;/p&gt;
&lt;p&gt;Dumb! I think back to my education.  Here’s a basic summary of what I learned:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;COBOL, dBase III, JCS, CICS syntax.&lt;/li&gt;
&lt;li&gt;Break your code into functions&lt;/li&gt;
&lt;li&gt;A bit on how to do requirements analysis.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Guess what?  I could have learned all of that on my own.  How do I know that?  Because I had already taught myself, Basic and C before.  I taught myself every language I’ve learned since.  I was already writing structured code, and still do.  And how we gather requirements has changed and somehow I managed to learn that on my own.  Programming is a learning profession.  It is one of the things that makes it attractive to me.&lt;/p&gt;
&lt;p&gt;But what didn’t I learn?  At no point did anyone ever teach me how to break my own code.  And while Test Driven Development wasn’t a thing when I was going to school.  I doubt they are teaching it today.  (Let me know if your school did or is.)&lt;/p&gt;
&lt;h2 id=&#34;Happy-Path-Specs&#34;&gt;&lt;a href=&#34;#Happy-Path-Specs&#34; class=&#34;headerlink&#34; title=&#34;Happy Path Specs&#34;&gt;&lt;/a&gt;Happy Path Specs&lt;/h2&gt;&lt;p&gt;So, the programmers have no training.  But it isn’t just a programmer problem.&lt;/p&gt;
&lt;p&gt;When is the last time you got a specification from whoever creates them in your organization that had any more than a happy path set of requirements?  But, certainly there are things the system should not do.  I recently had to go asking for required fields and maximum field lengths in an application I was working on.  And that’s the simple stuff.&lt;/p&gt;
&lt;h2 id=&#34;Not-My-Job&#34;&gt;&lt;a href=&#34;#Not-My-Job&#34; class=&#34;headerlink&#34; title=&#34;Not My Job&#34;&gt;&lt;/a&gt;Not My Job&lt;/h2&gt;&lt;p&gt;If you have a QA department, you might be tempted to leave testing to QA.  My personal goal is to make sure QA doesn’t find anything.  At least, not something really obvious.&lt;/p&gt;
&lt;p&gt;But I know that some programmers get sloppy about testing their code if they know the safety net of QA exist.&lt;/p&gt;
&lt;p&gt;There is also the problem of QA believing they are the only ones who test.  Strange, but true.  When QA found out I was writing unit test for a pretty complex piece of logic, I was asked, “Then what will be left for me to do?!”  Strange but true.&lt;/p&gt;
&lt;p&gt;But what if we started working as teams?  For example, what if I could get QA to help me develop my test plan?  What if developing software was a WE activity instead of several silo developers each doing their own thing?&lt;/p&gt;
&lt;h2 id=&#34;Batch-Programming&#34;&gt;&lt;a href=&#34;#Batch-Programming&#34; class=&#34;headerlink&#34; title=&#34;Batch Programming&#34;&gt;&lt;/a&gt;Batch Programming&lt;/h2&gt;&lt;p&gt;This is one I really don’t understand.  But I know programmers who will write code for hours prior to running it.  Even if you did remember everything you coded, how can you possibly know where a bug is located if you wait that long?  You should be running your code every time you have something different that can be run so that you know what change caused a problem.  And don’t tell me you test every possible condition.  I know you don’t.&lt;/p&gt;
&lt;p&gt;Programmers who program like this are “Debbie Done” programmers.&lt;/p&gt;
&lt;p&gt;Why “Debbie Done”? There is this story about a programmer who used to work at one of the companies I worked at in the past.  She considered code done if it compiled and linked.&lt;/p&gt;
&lt;p&gt;I’m not as good at testing as I would like (yet) and I’m always embarrassed when someone finds a problem with my code.  So, I was shocked one day when I found out that a project manager wanted to give me some work because my code “always works.”  I knew that wasn’t true.  But when I reflected on what he was saying I realized that the difference in how I code and the other programmers he was comparing me to is that I write for a few minutes and then make sure that works before I continue on.&lt;/p&gt;
&lt;h2 id=&#34;We-Don’t-Plan-to-Test&#34;&gt;&lt;a href=&#34;#We-Don’t-Plan-to-Test&#34; class=&#34;headerlink&#34; title=&#34;We Don’t Plan to Test&#34;&gt;&lt;/a&gt;We Don’t Plan to Test&lt;/h2&gt;&lt;p&gt;Ah.  And here we get a little closer to the truth.&lt;/p&gt;
&lt;p&gt;What do I mean by planning to test? For any spec you are working on, you should have, written out or coded, a repeatable set of steps that ensures that your code does what it should and doesn’t do what it shouldn’t.  This is what test driven development attempts to steer us toward.  I’m not going to go off on a rant about TDD again here.  But I will tell you that either having a written out test plan prior to coding enables me to ensure that my code does what the people who gave me the specification think it should.  It also forces me to think about ways I might break the code.  I know my code is delivered with less bugs because of this process.  Hopefully, I’ll get better at thinking of how to break my own code.&lt;/p&gt;
&lt;p&gt;Having a plan helps with the Debbie Done programmer as well as people who code more like me.&lt;/p&gt;
&lt;p&gt;Even though I code&amp;#x2F;test incrementally, I still only test the code right after I’ve written it.  Once I think it is working, I don’t go back, even though something else I’ve written may have changed how the code is working.  Having repeatable tests has save me several times.&lt;/p&gt;
&lt;h2 id=&#34;We-Don’t-Know-what-we-Don’t-Know&#34;&gt;&lt;a href=&#34;#We-Don’t-Know-what-we-Don’t-Know&#34; class=&#34;headerlink&#34; title=&#34;We Don’t Know what we Don’t Know&#34;&gt;&lt;/a&gt;We Don’t Know what we Don’t Know&lt;/h2&gt;&lt;p&gt;Even if we do everything right, we are still going to miss stuff.  One person can’t possibly figure out all that might go wrong.  It is how we deal with the problems once they are revealed that becomes the issue.  This is where we would, ideally, have the team come up with the test scenarios.&lt;/p&gt;
&lt;h2 id=&#34;Shame-Driven-Development&#34;&gt;&lt;a href=&#34;#Shame-Driven-Development&#34; class=&#34;headerlink&#34; title=&#34;Shame Driven Development&#34;&gt;&lt;/a&gt;Shame Driven Development&lt;/h2&gt;&lt;p&gt;I actually heard a project manager say, “Shame on the developer if QA finds bugs.” Really?!  What about “Shame on the BA for not including that item in the requirements.”?  What about “Shame on the product owner for not mentioning it.”? Or what about no shame at all? While shame is a powerful motivator in the short term, it is a sure way to make sure your developers leave.&lt;/p&gt;
&lt;p&gt;That you only retain highly dysfunctional programmers.  Or that you can only retain programmers who can’t really code.&lt;/p&gt;
&lt;p&gt;Shame based development can only lead to even more bugs.  Not fewer.&lt;/p&gt;
&lt;p&gt;At some point I should probably write about the dangers of a shame based culture.   If your organization is using shame to manage personnel.  Get out!&lt;/p&gt;
&lt;h2 id=&#34;Long-Hours&#34;&gt;&lt;a href=&#34;#Long-Hours&#34; class=&#34;headerlink&#34; title=&#34;Long Hours&#34;&gt;&lt;/a&gt;Long Hours&lt;/h2&gt;&lt;p&gt;Another way you can kill the overall effectiveness of your team is to make sure everyone works more than 45 hours a week for months or years at a time.  One of two things will happen, if not both.&lt;/p&gt;
&lt;p&gt;The code will suffer.  Want to introduce more bugs?  Keep everyone working overtime.  A week here or there is a different story.&lt;/p&gt;
&lt;p&gt;If the code doesn’t suffer, then you are likely to find a lot more socialization, social media activities, and just plain goofing off occurring.  People just can’t work that many hours.  Just because someone is at work for 10 hours doesn’t mean they are working 10 hours.  But hours are easy to measure, so this terrible practice continues.&lt;/p&gt;
&lt;h2 id=&#34;We-Can’t-Fix-Everything&#34;&gt;&lt;a href=&#34;#We-Can’t-Fix-Everything&#34; class=&#34;headerlink&#34; title=&#34;We Can’t Fix Everything&#34;&gt;&lt;/a&gt;We Can’t Fix Everything&lt;/h2&gt;&lt;p&gt;I’m in a unique position in that I’m currently functioning as a Scrum coach.  This allows me to influence all the areas I’ve discussed.  As programmers, you can only influence your own stuff.  So, my recommendation to you is to concentrate on what you have control over.  Create a test plan prior to writing code.  Once you’ve learned how to do that, work on learning how to code those test so you don’t have to run them manually over and over again.  Do this slowly.  Maybe start with just one test.  Squeeze it into the cracks of your regular work.  Learning to test and learning to code test takes time, but it will make you a better programmer and will ultimately make you a more reliable and faster programmer.  Someday you might just hear that they want to give you an important job because “Johnny’s code always works.”&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="code" />
        <category term="agile" />
        <category term="scrum" />
        <category term="bug" />
        <updated>2016-09-20T10:30:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/the-fallacy-of-motion/</id>
        <title>The Fallacy of Motion</title>
        <link rel="alternate" href="http://davembush.github.com/the-fallacy-of-motion/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/07/image1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;I had this thought this past week that we tend to believe that if we are in motion, we are accomplishing something.  That being busy somehow equals being productive.  And then I started thinking about how this is almost universal.  It doesn’t just impact how we program, which I’ll get to eventually, but it impacts all of our life.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Let-Me-Illustrate&#34;&gt;&lt;a href=&#34;#Let-Me-Illustrate&#34; class=&#34;headerlink&#34; title=&#34;Let Me Illustrate&#34;&gt;&lt;/a&gt;Let Me Illustrate&lt;/h2&gt;&lt;p&gt;Have you ever driven to some location and had your favorite GPS system route you multiple ways?  How many of you take the route that is, according to your GPS, longer, just because the roads are 65mph instead of 45mph?  Or an even better example.  You hit a traffic jam and, even though ever indication is that you’ll be out of the traffic in a few minutes, you take an alternate route simply because the traffic is moving on that other road.  In both cases you probably know that you won’t get to your destination any faster, in fact you may get to your destination slower, but you still opt to take the moving route instead of the one that isn’t moving or is moving relatively slowly.  I’ve even heard people say… shoot I’ve even said… “I want to take this route because it moves faster.”  I like FEELING like I’m getting to my destination faster even if the reality is that I’m not.&lt;/p&gt;
&lt;p&gt;And then there is the issue of your job.  How many of you have to look busy for your peers to think that you ARE busy?  But as programmers, how true is that?  Unless you do some kind of unskilled labor, I doubt it is true of most people who work.  And yet, because we are all paid by the hour (yes, even those of you who are salaried are still trading hours for dollars) there is a perception that, somehow, if we are not in motion, we are not really working.  But is that true? I remember hearing a story about a programmer who spent half his day “staring at the ceiling” who was twice as productive as any of his peers.  Why is that?  Because he spent half his day thinking about the problem before he ever started writing a line of code.&lt;/p&gt;
&lt;p&gt;I remember back in the day when I was coding on 8088 computers, a compile and link cycle could take up to 10 minutes.  Because I recompile and test every time I’m made a runnable change, I had a lot of 10 minute breaks.  I used this time to think about the problem I was working on.  This was not intentional, it just happened naturally.  I think it made me more productive than if I were just churning code all day long at the speed our computers work today.&lt;/p&gt;
&lt;p&gt;And then there is this side project I’m working on.  I tend to work on it a half hour at a time as I have time.  Between my main gig that takes up 40 hours a week, and some side gigs that I have, I have a very small amount of time to work on this project.  Some days I don’t work on it simply because I’m too tired.  But sometimes, even when I’m not sitting in front of my computer, I’ll sit on my sofa doing nothing and think about the project.  It is in those times that I figure out where I want to take the project next, or how to solve a problem I’ve run into.  That time thinking, even though there is no motion, has made the resulting code that much better.&lt;/p&gt;
&lt;h2 id=&#34;The-Fallacy-of-Motion-and-Testing&#34;&gt;&lt;a href=&#34;#The-Fallacy-of-Motion-and-Testing&#34; class=&#34;headerlink&#34; title=&#34;The Fallacy of Motion and Testing&#34;&gt;&lt;/a&gt;The Fallacy of Motion and Testing&lt;/h2&gt;&lt;p&gt;I’m sure you saw this coming, but one has to ask, is it the fallacy of motion that prevents us from testing our code? At my main gig, I have to admit, I’m bored.  There are a lot of reasons for this.  But one of them is that I spend a lot of time waiting for integrations tests to run to verify that my code is still working.  To be clear, I have way more unit test than integration test at this point.  But with the changes I’m currently making to the system, I’m more likely to find issues via the integration tests than I am from the unit tests.&lt;/p&gt;
&lt;p&gt;Compare this to a project I’m working on for another client where I’m primarily writing new code.  I’m a lot less bored.  The day zips by.  I FEEL more productive.&lt;/p&gt;
&lt;p&gt;And yet, the degree of certainty I have that the code I wrote for my main gig works as I designed it to work is a lot higher than the code I’m currently writing because I have more tests.&lt;/p&gt;
&lt;p&gt;This past week those tests actually showed me that my change wasn’t working entirely the way I wanted it to.  I probably would not have found it any other way.  I’m not even sure the people testing my code would have found it.  They aren’t those kind of testers.  And so I’ve proven to myself one more time that testing, while it feels slower, really is not just the right thing to do, but ultimately the faster thing to do.&lt;/p&gt;
&lt;p&gt;Think about what would have happened if I didn’t have these tests in place.  I would have released the code, eventually the bug would have revealed itself, and I would be left scrambling to fix the bug.  As it is, I was able to fix the bug in a somewhat leisurely manner because I found it early.&lt;/p&gt;
&lt;p&gt;And yet, I don’t FEEL productive.  As much as I’m convinced that Test Driven Development is the right way to go, I still struggle with this Fallacy of Motion.&lt;/p&gt;
&lt;h2 id=&#34;We-Don’t-Have-Time-to-Test&#34;&gt;&lt;a href=&#34;#We-Don’t-Have-Time-to-Test&#34; class=&#34;headerlink&#34; title=&#34;We Don’t Have Time to Test&#34;&gt;&lt;/a&gt;We Don’t Have Time to Test&lt;/h2&gt;&lt;p&gt;I heard this again this past week.  “When you are working on a project with a tight deadline, you can’t always test because you don’t have enough time.” What?! Is this the Fallacy of Motion at work again? I would argue that it is precisely BECAUSE you are working under a tight deadline that you NEED to write test.&lt;/p&gt;
&lt;p&gt;Think about this, you have this tight deadline.  Great.  So you are not going to think clearly.  You are going to rush.  You will write incomplete code.  Your methods won’t verify input parameters.  You’ll have null pointer exceptions.  Your code will do what it is supposed to do, but will it not do what it shouldn’t do?  How will you know?  And who is going to catch the bug? Well we know the answer to that last question.  The people using your code will catch the bug.  This will make you look like an idiot.  You are because it is something that should have been caught.  It will also mean that you’ll need to track down the problem, fix the problem, and re-deploy the software.  And this is faster?  Faster than what?! Of course, “We don’t have time to do it right, but we always have time to do it over.”&lt;/p&gt;
&lt;h2 id=&#34;Slow-and-Steady&#34;&gt;&lt;a href=&#34;#Slow-and-Steady&#34; class=&#34;headerlink&#34; title=&#34;Slow and Steady&#34;&gt;&lt;/a&gt;Slow and Steady&lt;/h2&gt;&lt;p&gt;So, slow down.  Do things right.  Remember the story of the tortoise and the hare.  The race doesn’t always go to the fastest but the one who is steady and persistent.  The one who doesn’t cut corners.  The one who consistently produces solid code.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="testing" />
        <category term="productivity" />
        <updated>2015-07-23T10:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/tdd-gamification-turning-test-driven-development-into-a-game/</id>
        <title>TDD Gamification - Turning Test Driven Development into a Game</title>
        <link rel="alternate" href="http://davembush.github.com/tdd-gamification-turning-test-driven-development-into-a-game/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/04/ge-gam-018.jpg&#34; alt=&#34;ge-gam-018&#34; title=&#34;Test Driven Development Gamification&#34;&gt;&lt;/p&gt;
&lt;p&gt;When I was in college, there were some guys I hung out with who played this game called “Questions” which they got from some book.  &lt;a href=&#34;//en.wikipedia.org/wiki/Questions_(game)&#34;&gt;Actually, it was a play&lt;/a&gt;. Anyhow, the basic rules are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can’t answer a question with a statement&lt;/li&gt;
&lt;li&gt;You can’t hesitate or make a false start&lt;/li&gt;
&lt;li&gt;You can’t repeat a question that has already been used&lt;/li&gt;
&lt;li&gt;You can’t ask a rhetorical question&lt;/li&gt;
&lt;li&gt;You can’t ask an unrelated question.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There was also &lt;a href=&#34;//dotnetrocks.com/default.aspx?showNum=1111&#34;&gt;this podcast at DotNetRocks&lt;/a&gt; where they were talking about a beer app and how they had added game elements to the app by adding badges for various types of beer to get you out of your comfort zone.  Maybe there is one for “My first beer that I liked” because I’ve yet to find something I like.  But give me a good Merlot! All of this got me to thinking about how we might turn Test Driven Development into something of a game. There are several people who have already addressed the Gamification of TDD&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;TDD-and-the-Gamification-of-Testing&#34;&gt;&lt;a href=&#34;#TDD-and-the-Gamification-of-Testing&#34; class=&#34;headerlink&#34; title=&#34;TDD and the Gamification of Testing&#34;&gt;&lt;/a&gt;&lt;a href=&#34;//effectivesoftwaredesign.com/2011/11/21/tdd-and-the-gamification-of-testing/&#34;&gt;TDD and the Gamification of Testing&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This article talks mostly about how TDD has many elements of good gaming inherent in it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Because it makes testing more like programming.  Well, what he actually says is that it raises testing to the level of complexity the programmer is familiar with.  But in reality, I think this is because it makes testing something that can be coded.&lt;/li&gt;
&lt;li&gt;Because TDD is measurable.  The test either succeeds or fails.&lt;/li&gt;
&lt;li&gt;Because TDD gives you immediate feedback.  Or at least a well written test gives you immediate feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;TDD-The-Gamification-of-Programming&#34;&gt;&lt;a href=&#34;#TDD-The-Gamification-of-Programming&#34; class=&#34;headerlink&#34; title=&#34;TDD: The Gamification of Programming&#34;&gt;&lt;/a&gt;&lt;a href=&#34;//benvanik.tumblr.com/post/20702406947/tdd-the-gamification-of-programming&#34;&gt;TDD: The Gamification of Programming&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This article provides an interesting perspective of someone trying to program using TDD for the first time.  You get the normal complaints, like “this takes too long” along with acknowledgement of some of the benefits.  But what he realizes is that the process has made programming more like a game than about the creative problem solving most of us got in to programming for in the first place.&lt;/p&gt;
&lt;h2 id=&#34;Gamify-TDD&#34;&gt;&lt;a href=&#34;#Gamify-TDD&#34; class=&#34;headerlink&#34; title=&#34;Gamify TDD&#34;&gt;&lt;/a&gt;&lt;a href=&#34;//www.tdddev.com/2014/09/gamify-tdd.html&#34;&gt;Gamify TDD&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is the first article I found that, instead of saying that TDD is already a game, like the two above, actually ask how we might formally turn TDD into a game because it already has many elements of a game.  But he never actually says HOW he would do that.&lt;/p&gt;
&lt;h2 id=&#34;TDD-Gamification&#34;&gt;&lt;a href=&#34;#TDD-Gamification&#34; class=&#34;headerlink&#34; title=&#34;TDD Gamification&#34;&gt;&lt;/a&gt;TDD Gamification&lt;/h2&gt;&lt;p&gt;Putting this all together.  Here is how I would actually make TDD into a game.&lt;/p&gt;
&lt;h4 id=&#34;The-rules&#34;&gt;&lt;a href=&#34;#The-rules&#34; class=&#34;headerlink&#34; title=&#34;The rules:&#34;&gt;&lt;/a&gt;The rules:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;The game is played in pairs.  (Paired programming)&lt;/li&gt;
&lt;li&gt;Game starts when programmer 1 writes the first test.&lt;/li&gt;
&lt;li&gt;Once a failing test is written, programmer 2 writes JUST ENOUGH to make the test succeed.&lt;/li&gt;
&lt;li&gt;Once a test succeeds, programmer 2 writes another test, and programmer 1 writes just enough to make it succeed.&lt;/li&gt;
&lt;li&gt;Play alternates until no one can think of another test that will force more code to be written.&lt;/li&gt;
&lt;li&gt;Programmer loses points if he is caught writing more code than is necessary to pass the test.&lt;/li&gt;
&lt;li&gt;Programmer loses points if he is caught writing code that has dependencies embedded in it.&lt;/li&gt;
&lt;li&gt;If a dependency is required, the test writer and the code implementer will collaborate in the method of dependency injection to be used.&lt;/li&gt;
&lt;li&gt;All points lost by one programmer go to the programmer who caught the mistake.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Embellishment&#34;&gt;&lt;a href=&#34;#Embellishment&#34; class=&#34;headerlink&#34; title=&#34;Embellishment:&#34;&gt;&lt;/a&gt;Embellishment:&lt;/h4&gt;&lt;p&gt;If code is found to have a bug in production, both programmers responsible for the code loose a point, regardless of how many lines of code are impacted.  One point per recorded bug.&lt;/p&gt;
&lt;p&gt;I’m assuming that most shops have more than 2 programmers.  On any given day, programmers would be paired up for the day of programming.  They are responsible for turning out bug free code.  Because we are tracking the code over the long term, we will be able to see just how effective each programmer is at eliminating bugs.&lt;/p&gt;
&lt;p&gt;In fact, if you are in an environment that can’t quite stomach having your programmers paired up, I would suggest keeping track of the code that wasn’t done under the game.  This would be the “house score” compared to an individual programmer’s score.&lt;/p&gt;
&lt;p&gt;The only thing we have left is some way of being able to account for productivity.  I mean, if I write no code, I’ll have no bugs, right?  And all things being equal, the more productive I am, the more bugs I’ll have.  So how do we measure this? Here is what we can’t do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lines of code – you can’t measure based on lines of code because that has been shown to be an inaccurate measure of productivity.  More lines may just mean you are not very efficient.&lt;/li&gt;
&lt;li&gt;Hours worked – &lt;a href=&#34;/rapidDevelopment&#34;&gt;Rapid Development&lt;/a&gt; has statistics in it that show there is a factor of 10 difference between good programmers and bad programmers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Just-a-suggestion&#34;&gt;&lt;a href=&#34;#Just-a-suggestion&#34; class=&#34;headerlink&#34; title=&#34;Just a suggestion:&#34;&gt;&lt;/a&gt;Just a suggestion:&lt;/h4&gt;&lt;p&gt;Since short methods are desirable, what if we measure number of test relative to number of methods relative to number of classes.  This would enforce the single responsibility principle.&lt;/p&gt;
&lt;p&gt;T &amp;#x3D; Tests M &amp;#x3D; Methods C &amp;#x3D; Classes 1&amp;#x2F;((T&amp;#x2F;M)&amp;#x2F;C) &amp;#x3D; Productivity Score Therefore,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If I worked on 3 classes each with 6 methods and each method has 2 tests, I end up with a productivity score of 1.5&lt;/li&gt;
&lt;li&gt;If I had one class with 18 methods each with 2 tests, I end up with a productivity score of .5&lt;/li&gt;
&lt;li&gt;If, on the other hand, I put everything in one method, and one class and had the same 36 tests, my productivity score would be .02&lt;/li&gt;
&lt;li&gt;If you write no code, your productivity score is 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s just a simple way to calculate.  You may choose to use cyclomatic complexity in some way if you have that number easily available to you.&lt;/p&gt;
&lt;p&gt;Well, that’s my rough sketch of how we might be able to turn TDD into something of a game along with being able to prove to ourselves and management that it really does produce better code. How else might you embellish this or change it so it works better?  Let me know in the comments below.&lt;/p&gt;
&lt;h4 id=&#34;Other-Test-Driven-Development-Resources&#34;&gt;&lt;a href=&#34;#Other-Test-Driven-Development-Resources&#34; class=&#34;headerlink&#34; title=&#34;Other Test Driven Development Resources&#34;&gt;&lt;/a&gt;Other Test Driven Development Resources&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/testDrivenDevelopmentByExample&#34;&gt;Test Driven Development: by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/professionalTestDrivenDevelopmentWithCSharp&#34;&gt;Professional Test Driven Development w&amp;#x2F; C#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="tdd" />
        <category term="agile" />
        <category term="extreme programming" />
        <category term="gamification" />
        <category term="paired programming" />
        <updated>2015-04-23T10:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/why-johnny-can-t-do-test-driven-development/</id>
        <title>Why Johnny Can&#39;t do Test Driven Development</title>
        <link rel="alternate" href="http://davembush.github.com/why-johnny-can-t-do-test-driven-development/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/02/ppl-kid-05.jpg&#34; alt=&#34;ppl-kid-05&#34; title=&#34;ppl-kid-05&#34;&gt;&lt;/p&gt;
&lt;p&gt;Last week we looked at a few excuses developers give for not testing their code as they develop it (&lt;a href=&#34;/excuses-for-not-testing/&#34;&gt;Excuses For Not Testing&lt;/a&gt;).  We finished that by mentioning that most of the code you write simply isn’t testable.  You can’t practice Test Driven Development on something that isn’t testable in the first place. And there, folks, is why Johnny can’t test.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;But-it’s-not-Johnny’s-fault&#34;&gt;&lt;a href=&#34;#But-it’s-not-Johnny’s-fault&#34; class=&#34;headerlink&#34; title=&#34;But, it’s not Johnny’s fault.&#34;&gt;&lt;/a&gt;But, it’s not Johnny’s fault.&lt;/h2&gt;&lt;p&gt;Think about what makes code testable.  At it’s core, testable code is loosely coupled.  But what do we mean by “loosely coupled”? Well, let’s start with the large picture.  Assuming you have a multi-layered architecture.  That is, you have your code broken out into View, Business Rules, and Data Access.  Raise your hand if your business rules access your view directly.  Would you be able to test your business rules without your view? At a finer level of detail.  How much of your code creates the objects it needs within the same class, or worse, the same method, that will need it?  Without using a Dependency Injection framework, could you swap out any objects your class uses?  Have you even heard the rule, “Classes should either create things or do things, but never both within the same class?”  If you did that, how much more testable would your code be? If you were to write a test for a method, how much setup work would you have to do?  If it is more than a few lines, your method is probably doing too much, either directly or indirectly.  You’ll need to find a way to make it do less.&lt;/p&gt;
&lt;p&gt;Maybe in future post, I’ll address some of these issues in code.  But for now, I just want to address the problem.&lt;/p&gt;
&lt;p&gt;Again, it isn’t Johnny’s fault that he doesn’t know this stuff.  Think about the code samples we tend to look at.&lt;/p&gt;
&lt;h2 id=&#34;When-is-the-last-time-you-saw-sample-code-that-was-testable&#34;&gt;&lt;a href=&#34;#When-is-the-last-time-you-saw-sample-code-that-was-testable&#34; class=&#34;headerlink&#34; title=&#34;When is the last time you saw sample code that was testable?&#34;&gt;&lt;/a&gt;When is the last time you saw sample code that was testable?&lt;/h2&gt;&lt;p&gt;Short rant here, but I’ve been working with EXTjs (version 4.x) for the last year and a half.  Sencha will tell you that this uses a MVC architecture.  But what they mean by “Controller” really functions more like a “ViewController.”  That is, the controller is tightly bound to the view that it handles events for.  The way they have things setup, you access View elements by getters that are automatically generated for you in the view.&lt;/p&gt;
&lt;p&gt;The problem with this is that you can’t really test the controller logic without bringing along the view.&lt;/p&gt;
&lt;p&gt;Sencha isn’t the only company who does this.  Most of the sample code for WebForms did the same kind of thing.&lt;/p&gt;
&lt;p&gt;Now, the reason this is an issue is that sample code is how most of the newer programmers are learning how to program.&lt;/p&gt;
&lt;p&gt;I heard recently that statistically, because of the growth of the industry, half of the programmers available have 5 years or less of experience.  I don’t know about you, but the first 5 years of my programming career, I was still figuring out how to program.  I wasn’t thinking about architecture issues and I certainly wasn’t thinking about formal testing.  From what I’ve seen of the new recruits, I don’t think they are either.  Shoot.  Some of the ones I’ve interacted with couldn’t code themselves out of a paper bag without help.&lt;/p&gt;
&lt;h2 id=&#34;And-so-what’s-the-conclusion-to-all-of-this&#34;&gt;&lt;a href=&#34;#And-so-what’s-the-conclusion-to-all-of-this&#34; class=&#34;headerlink&#34; title=&#34;And so, what’s the conclusion to all of this?&#34;&gt;&lt;/a&gt;And so, what’s the conclusion to all of this?&lt;/h2&gt;&lt;p&gt;I don’t know.  Maybe the first step is to admit that we have an issue here and that the issue is so much a management or time issue as it is an education and laziness issue.  That the code we generate shouldn’t assume that people will take the code and adapt it into testable code, but that we should write testable code as our sample code.  Maybe colleges should teach basic software architecture and TDD as part of the curriculum.  Maybe those of us who know better should just start testing and figure this all out well enough to explain it to others.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="test driven development" />
        <category term="testing" />
        <category term="bdd" />
        <updated>2015-03-05T12:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/excuses-for-not-testing/</id>
        <title>Excuses For Not Testing</title>
        <link rel="alternate" href="http://davembush.github.com/excuses-for-not-testing/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/02/ppl-kid-044.jpg&#34; alt=&#34;ppl-kid-044&#34; title=&#34;ppl-kid-044&#34;&gt;&lt;/p&gt;
&lt;p&gt;As I started my own journey into unit testing, I slowly began to realize that it was really easy to come up with reasons to NOT test my code as I was writing it, even once I understood what that was supposed to look like. The reason I think most programmers don’t unit test code, once they understand what it is they are supposed to be doing is that they don’t feel like they have permission. To this I also answer, “How much permission do you need?”&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Do-you-really-need-permission&#34;&gt;&lt;a href=&#34;#Do-you-really-need-permission&#34; class=&#34;headerlink&#34; title=&#34;Do you really need permission?&#34;&gt;&lt;/a&gt;Do you really need permission?&lt;/h2&gt;&lt;p&gt;Do you ask for permission to compile and link the code? Do you ask for permission to write every line of code to make the system do what it should do? Do you ask for permission to run your code periodically to make sure it does what you had in mind when you wrote the code? Do you periodically add code that makes you feel good but is not directly related to the task at hand? (Admit it, I don’t think I know of any programmer who doesn’t.) Then why do we feel like we need permission to write unit test for our code?&lt;/p&gt;
&lt;h2 id=&#34;Are-you-convinced-that-you-need-test&#34;&gt;&lt;a href=&#34;#Are-you-convinced-that-you-need-test&#34; class=&#34;headerlink&#34; title=&#34;Are you convinced that you need test?&#34;&gt;&lt;/a&gt;Are you convinced that you need test?&lt;/h2&gt;&lt;p&gt;We don’t write test code because we aren’t convinced it is necessary to do the job we’ve been given. We complain that our managers don’t want us to write unit test. But the problem is that you asked for permission in the first place. And, by asking for permission, you’ve basically told your manager that unit testing is optional. Your manager has said “no” because he thinks YOU think it is optional.&lt;/p&gt;
&lt;h2 id=&#34;It’s-not-your-manager’s-job&#34;&gt;&lt;a href=&#34;#It’s-not-your-manager’s-job&#34; class=&#34;headerlink&#34; title=&#34;It’s not your manager’s job&#34;&gt;&lt;/a&gt;It’s not your manager’s job&lt;/h2&gt;&lt;p&gt;It isn’t his job to understand that not testing will produce technical debt. He’s not even interested in understanding what technical debt is. All he cares about is this. When will this project be done?  When you say it is done, will it work as expected or will it have a lot of bugs that need to be fixed yet? Most of the managers I’ve worked for in the past will accept whatever number I give them once they understand that when I deliver the software to them, it is going to work.  In fact, I’ve even gotten asked to do jobs BECAUSE my code tends to work more often than anyone else they know who could do the job.&lt;/p&gt;
&lt;p&gt;Now, I will admit, that in some cases there are places where you’ve been explicitly told to not create unit test. But even here I will assert it is because someone asked management the question.&lt;/p&gt;
&lt;h2 id=&#34;Why&#34;&gt;&lt;a href=&#34;#Why&#34; class=&#34;headerlink&#34; title=&#34;Why?&#34;&gt;&lt;/a&gt;Why?&lt;/h2&gt;&lt;p&gt;And so, we need to evaluate why it is we think creating unit test are optional. Probably because what we’ve been doing for so long seems to be working and, when we try to incorporate unit test, the process seems slower.&lt;/p&gt;
&lt;p&gt;And it is.&lt;/p&gt;
&lt;p&gt;Initially, writing unit test is slower just like writing using a new language or a new framework or anything else new is slower than what we know.&lt;/p&gt;
&lt;p&gt;But the ultimate efficiency that writing unit test as we code provides has been proven to more than offset the learning curve involved.&lt;/p&gt;
&lt;p&gt;There is one other valid reason for not testing and that is, we simply don’t know how.  This is almost as big of a reason as not believing it is worth while.  But, I think if we thought testing was really worth while, we’d start testing and figure it out as we went along.&lt;/p&gt;
&lt;p&gt;If you think about your career, I bet there are a lot of things you know now that you didn’t know when you started out.  The fact of the matter is, most of us learn on the job.  We start out with basic skills, but it is the day to day implementations that improve those skills.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;Don’t-let-the-good-enough-be-the-enemy-of-the-perfect&#34;&gt;&lt;a href=&#34;#Don’t-let-the-good-enough-be-the-enemy-of-the-perfect&#34; class=&#34;headerlink&#34; title=&#34;Don’t let the good enough be the enemy of the perfect.&#34;&gt;&lt;/a&gt;Don’t let the good enough be the enemy of the perfect.&lt;/h5&gt;&lt;/blockquote&gt;
&lt;p&gt;Don’t let the good enough be the enemy of the perfect.  Your first set of test will be garbage.  As you stick with it, you’ll wonder what you were thinking when you wrote your first test.  But this should not deter you.  This is what happened when you first started coding.  Maybe it is still happening.  No worries.  It is the practice that will make you better able to write tests and better able to write code that is testable.&lt;/p&gt;
&lt;p&gt;And there is another reason we don’t test.  Most of the code you are currently writing simply isn’t testable.  But, that’s the subject for another post.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="test driven development" />
        <category term="testing" />
        <category term="bdd" />
        <updated>2015-02-26T12:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/nunit-visual-studio/</id>
        <title>NUnit &amp; Visual Studio</title>
        <link rel="alternate" href="http://davembush.github.com/nunit-visual-studio/"/>
        <content type="html">&lt;p&gt;Many people starting out with Unit testing get stuck when it comes to using their tools with the Visual Studio environment.  If it isn’t built in, how do we make it work with Visual Studio?  In this article I want to explore the basics of creating a unit test for NUnit and getting it running from Visual Studio.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Basic-Structure&#34;&gt;&lt;a href=&#34;#Basic-Structure&#34; class=&#34;headerlink&#34; title=&#34;Basic Structure&#34;&gt;&lt;/a&gt;Basic Structure&lt;/h2&gt;&lt;p&gt;To create a unit test, the first thing you will need to do is to create an assembly with a class file to hold the code.&lt;/p&gt;
&lt;p&gt;The type of assembly you will need to create for your test to be able to run is an assembly of type “Class Library.” I’m going to assume that you don’t need the details on how to create that type of project using whatever version of Visual Studio you happen to be using.&lt;/p&gt;
&lt;p&gt;Within your new Class Library project, you should find a file named Class1.cs. For the purposes of getting started, you can just leave that file. We’ll talk about how to name your class and test later on.&lt;/p&gt;
&lt;p&gt;For now, all we want to concentrate on is the basics of what is involved in getting a basic test going and what the components of a test class are that you will repeat over and over again as you create unit test for your applications.&lt;/p&gt;
&lt;p&gt;Before we add our first line of code, though, you will want to add references to NUnit in your code. The easiest way to do that is by using NuGet. Since I use Visual Studio 2013, all of the references for how to do things will be using Visual Studio (Premium) 2013. So, if you are using that version, you can just follow along. If not, you may need to do some translating.&lt;/p&gt;
&lt;p&gt;From the Visual Studio menu, select “Tools” &amp;gt; “NuGet Package Manager” &amp;gt; “Manage NuGet Packages for Solution…”. A window will pop up. Search for NUnit and install the package named “NUnit”. There are other packages available that we will discus later on.&lt;/p&gt;
&lt;p&gt;Alternatively, you could download NUnit directly from the NUnit site (&lt;a href=&#34;//nunit.org&#34;&gt;http://nunit.org&lt;/a&gt;) and add a reference directly to nunit.framework.dll.&lt;/p&gt;
&lt;h2 id=&#34;Code&#34;&gt;&lt;a href=&#34;#Code&#34; class=&#34;headerlink&#34; title=&#34;Code&#34;&gt;&lt;/a&gt;Code&lt;/h2&gt;&lt;p&gt;Now that you have the DLLs installed and referenced in your project, you’ll need to create a test class. For our purposes, we are going to stick with Class1.cs.&lt;/p&gt;
&lt;p&gt;There are several things that make a class a test class. First, the class has to be attributed with the [TestFixture] attribute. Second, the methods you want to have run the test have to be attributed with the [Test] attribute and must be public. So, your minimal test class will look something like:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;TestFixture&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Class1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;Test&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyFirstTestMethod&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// test code here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Running-Tests&#34;&gt;&lt;a href=&#34;#Running-Tests&#34; class=&#34;headerlink&#34; title=&#34;Running Tests&#34;&gt;&lt;/a&gt;Running Tests&lt;/h2&gt;&lt;p&gt;Now that we have a basic test class, go ahead and compile it. We are going to try running the test next. For that we will need a test runner.&lt;/p&gt;
&lt;p&gt;There are several ways to run NUnit test. For out purposes, we are going to use the runner that comes with NUnit. But you might also be interested in one of the alternatives. You can get a 30 day trial of &lt;a href=&#34;//www.jetbrains.com/resharper/&#34;&gt;ReSharper by JetBrains&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;ReSharper has many features, but the one I want to talk about here is the test runner. Any test you create will be immediately runnable from within Visual Studio by right clicking on an icon to the left of your code. You are presented with a menu of options including debugging your test. Believe me, this is the easiest way to debug NUnit test that I know of.&lt;/p&gt;
&lt;p&gt;Another easy way to run NUnit test from within Visual Studio is by installing the MSTest adapter. You can get this from &lt;a href=&#34;//www.nuget.org/packages/NUnitTestAdapter/&#34;&gt;NuGet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the purposes of this article, we are going to use the test runner that comes with NUnit.&lt;/p&gt;
&lt;p&gt;So the next thing you’ll need to do is go to &lt;a href=&#34;//nunit.org&#34;&gt;NUnit.org&lt;/a&gt; and download and install the latest version of NUnit if you didn’t do that already to get the NUnit DLLs installed. I would suggest using the MSI installer rather than the zip file. All we want to be able to do is to run the test.&lt;/p&gt;
&lt;p&gt;Once you’ve installed NUnit, there should be a menu option “NUnit” that you can click. This should bring up the GUI runner.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2014/11/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Use the “File” -&amp;gt; “Open” to navigate to the “bin” directory of your NUnit test DLL project and open the DLL. You should see a screen that looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2014/11/image1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click the “Run” button to run your test. You should get a green progress bar under the “Run” button and a check box over the icons in the tree on the left indicating that all of the test succeeded.&lt;/p&gt;
&lt;p&gt;“Wait?!”, you say, “I didn’t test anything, how did they succeed?”&lt;/p&gt;
&lt;p&gt;You are right. A test succeeds if it doesn’t fail. Later on this will impact how we structure our test. So keep this in mind.&lt;/p&gt;
&lt;p&gt;One of the nice things about the NUnit GUI runner is that you can keep this up while you work on your tests. By default, the system shadow copies the DLL so that you can compile the DLL in your project. When the NUnit GUI runner sees that the file has changed, it will reload it so that it is always running whatever version you recently compiled. You can change this behavior, if you really feel the need to, by navigating to “Tools” -&amp;gt; “Settings…”&lt;/p&gt;
&lt;h2 id=&#34;Debugging-Tests&#34;&gt;&lt;a href=&#34;#Debugging-Tests&#34; class=&#34;headerlink&#34; title=&#34;Debugging Tests&#34;&gt;&lt;/a&gt;Debugging Tests&lt;/h2&gt;&lt;p&gt;As with all things related to code, eventually you will need to debug your test. To do this using the the tools that come with NUnit, do the following.&lt;/p&gt;
&lt;p&gt;Right click on the project in Solution Explorer that represents your test project. From the resulting menu, select “Properties.” In the resulting window, select the “Debug” tab from the left-hand side of the window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2014/11/image2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;You will want to select “Start external program” and point it to the UNnit runner that got installed when you installed NUnit.&lt;/p&gt;
&lt;p&gt;Now, whenever you run this project, with or without the debugger, NUnit will start up. Note: there is no reason to pass parameters telling it what DLL you want to run because it will load the last DLL it had up. But, if you wanted to do that, you could pass the location of the DLL as a parameter to the GUI runner. There are other parameters you can us. Check the documentation for the version of NUnit you are using for the specifics.&lt;/p&gt;
&lt;p&gt;If you are running .NET 4.x, you’ll want to go to the location in your file system where NUnit.exe lives and find the NUnit.exe.config file. Find the startup element (&lt;startup&gt; …. &lt;/startup&gt;) and place this line in between the open and close startup tags:&lt;/p&gt;
&lt;supportedRuntime version=&#34;4.0&#34; /&gt;

&lt;p&gt;If you miss this step, you won’t be able to debug your 4.0 code. Alternatively, you can just set your project to use .NET 3.5.&lt;/p&gt;
&lt;p&gt;So, let’s give it a try.&lt;/p&gt;
&lt;p&gt;First, put some code in the test method you just created. For our purposes, we’ll just put in a console writeline so we have somplace to put a breakpoint.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyFirstTestMethod&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;Inside MyFirstTestMethod&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next set a breakpoint on the Console.WriteLine method and then run your project with the debugger.&lt;/p&gt;
&lt;p&gt;Once NUnit loads the DLL, click the “Run” button in NUnit. If everything is setup correctly, you should stop on the breakpoint you set.&lt;/p&gt;
&lt;h2 id=&#34;Console-WriteLine&#34;&gt;&lt;a href=&#34;#Console-WriteLine&#34; class=&#34;headerlink&#34; title=&#34;Console.WriteLine()&#34;&gt;&lt;/a&gt;Console.WriteLine()&lt;/h2&gt;&lt;p&gt;You may have noticed that we put several Console.WriteLines() in our code but they aren’t displaying anywhere. So, where did they go? How can we see them?&lt;/p&gt;
&lt;p&gt;By default the “Text Output” tab displays all of the Console.WriteLine() messages as well as all of the test results. If all you care to see is the test results, you should select the “Errors and Failures” tab. Personally, I prefer to work in the “Text Output” tab and I suggest that you do the same.&lt;/p&gt;
&lt;h2 id=&#34;Not-The-Only-Way&#34;&gt;&lt;a href=&#34;#Not-The-Only-Way&#34; class=&#34;headerlink&#34; title=&#34;Not The Only Way&#34;&gt;&lt;/a&gt;Not The Only Way&lt;/h2&gt;&lt;p&gt;This isn’t the only way to get NUnit &amp;amp; Visual Studio working together.  You could also purchase the ReSharper plugin which has many other features.  But one of the ones I use on a regular basis is the NUnit integration.&lt;/p&gt;
&lt;p&gt;You could also use the NUnit test Adapter to make NUnit work with the Visual Studio test engine.  But personally, I don’t like the way the test render using that and I’d much rather use the GUI viewer I’ve discussed in this article.  So, if you want to integrate NUnit &amp;amp; Visual Studio for free, what I’ve outline above is the best way to do it.&lt;/p&gt;
</content>
        <category term="test driven development" />
        <category term="visual studio" />
        <category term="nunit" />
        <updated>2014-12-04T12:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/asp-net-server-performance-testing/</id>
        <title>ASP.NET Server Performance Testing</title>
        <link rel="alternate" href="http://davembush.github.com/asp-net-server-performance-testing/"/>
        <content type="html">&lt;p&gt;This happened a couple of years ago, but it is still relevant because I know of at least one place where it is still happening even though Microsoft has fixed the issue that initially caused this hack to be put in place in the first place.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Problem-In-Production-–-Oh-NO&#34;&gt;&lt;a href=&#34;#Problem-In-Production-–-Oh-NO&#34; class=&#34;headerlink&#34; title=&#34;Problem In Production – Oh NO!&#34;&gt;&lt;/a&gt;Problem In Production – Oh NO!&lt;/h2&gt;&lt;p&gt;Here’s the problem we were seeing.  We had several large PDF files that the client wanted to put up on the site so that their customers could download them.  The problem that we were seeing is that even though the site worked fine under development and QA, the site seemed to consume a lot of memory under load.&lt;/p&gt;
&lt;p&gt;Another symptoms we saw was that the file download took a lot of time to start, or timed out completely.  But the main issue was the memory because when the memory was consumed, the site would restart, and because it was a worker process crash that caused it, the restart took the site down.  This is not something you want to see happen when you are working with a client with world wide exposure.  A client who, if I told you the name, I’m sure you would recognize.&lt;/p&gt;
&lt;p&gt;In fact, it was the site not responding, or crashing, that first alerted us to the problem.  So, as soon as we knew the site wasn’t responding, I’d log onto the server and fire up task manager to see what was going on.&lt;/p&gt;
&lt;h2 id=&#34;Server-Management-Tip&#34;&gt;&lt;a href=&#34;#Server-Management-Tip&#34; class=&#34;headerlink&#34; title=&#34;Server Management Tip&#34;&gt;&lt;/a&gt;Server Management Tip&lt;/h2&gt;&lt;p&gt;One of the things I did early on managing the servers, is that I set up an entirely separate app pool for each of the web sites we are hosting.  This way, we can monitor the memory and CPU activity of each one independently.  For those of you who are interested, the way to make the pool name show up in task manager is to run the pool in ApplicationPoolIdentity, a setting you can get to through “Advanced Settings…”  If you are only hosting one site, you shouldn’t need to do this, but in my case, with multiple sites, this told me a lot about what was going on with the sites and ultimately helped me track down what the problem was.&lt;/p&gt;
&lt;p&gt;By the way, you should always run each of your sites under a separate application pool so that when one site is having trouble, every site on your server doesn’t have trouble.  Imagine having an issue and not even knowing for sure which site was causing the trouble.  It’s bad enough not knowing what page is causing the problem.&lt;/p&gt;
&lt;h2 id=&#34;It-Is-a-Memory-Issue-Now-What&#34;&gt;&lt;a href=&#34;#It-Is-a-Memory-Issue-Now-What&#34; class=&#34;headerlink&#34; title=&#34;It Is a Memory Issue.  Now What?&#34;&gt;&lt;/a&gt;It Is a Memory Issue.  Now What?&lt;/h2&gt;&lt;p&gt;OK.  So, I could see the memory increasing as soon as the site came back up.  So, now to try to track down what was causing memory issues.&lt;/p&gt;
&lt;p&gt;I tried various things along the way, none of them shed any light at all on the problem.  I even got dotMemory from JetBrains to see if I could find anything.  A memory leak maybe?  No, none of my code had even a small leak.&lt;/p&gt;
&lt;h2 id=&#34;The-Fix-Discovered&#34;&gt;&lt;a href=&#34;#The-Fix-Discovered&#34; class=&#34;headerlink&#34; title=&#34;The Fix Discovered&#34;&gt;&lt;/a&gt;The Fix Discovered&lt;/h2&gt;&lt;p&gt;And then I finally stumbled on the issue.  I can’t remember what it was that we installed that needed this, but what it did was change our web.config file so that it had a section in it that looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;... lots of other configuration stuff ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;system.webServer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;modules&lt;/span&gt; **&lt;span class=&#34;attr&#34;&gt;runAllManagedModulesForAllRequests&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;**&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What that causes IIS to do is to run ALL of your web request through ALL of your .NET modules.  Why is this a problem you ask?  Because it even runs all of your images, css, javascript and other static content.  This isn’t normally a huge problem because most of that stuff is relatively small. But, when you try to run a be PDF through that pipeline, you’ll run out of memory because, and this is the major issue here, because the whole file has to be loaded into memory on the server before it can be sent on to the web browser to download.&lt;/p&gt;
&lt;p&gt;Make sure that runAllManagedModulesForAllRequest is either set to false, or doesn’t exist in your web.config file.  If you need it to be turned on for some valid reason that I am not thinking of, at least put your static files on another site where this can be turned off.&lt;/p&gt;
&lt;h2 id=&#34;Moral-Of-The-Story&#34;&gt;&lt;a href=&#34;#Moral-Of-The-Story&#34; class=&#34;headerlink&#34; title=&#34;Moral Of The Story&#34;&gt;&lt;/a&gt;Moral Of The Story&lt;/h2&gt;&lt;p&gt;Now, the question that we should be asking now that we’ve figured it all out is, why wasn’t this caught earlier?  When a site goes up, isn’t all of the functionality, including all of the links to all of the images, files to download, and other pages on the site and off the site supposed to be tested?&lt;/p&gt;
&lt;p&gt;Yes, of course they are, but if you haven’t at least written down where all of this is, if you don’t have a systematic way of testing EVERYTHING, you WILL end up with these kind of errors once you put the site live.  This is to say nothing of load testing along the way.  This can all be prevented.&lt;/p&gt;
</content>
        <category term="performance" />
        <category term="testing" />
        <category term="asp.net" />
        <category term="memory" />
        <updated>2014-11-06T11:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/is-your-architecture-crippling-your-unit-testing/</id>
        <title>Is Your Architecture Crippling Your Unit Testing?</title>
        <link rel="alternate" href="http://davembush.github.com/is-your-architecture-crippling-your-unit-testing/"/>
        <content type="html">&lt;p&gt;Last week I wrote a post that talked about Unit Testing and the need to make sure you are only testing one particular unit of code at a time.  The post was well received.  But I am surprised that no one commented on the glaring hole I left in the post.&lt;/p&gt;
&lt;p&gt;In that post, I said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So, one way you might go about separating your code from the data is by using dependency injection.  What I’m talking about here is simple injection.  No frameworks.&lt;/p&gt;
&lt;p&gt;So, let’s say you have a class you may have called user role.  Given a user id, it will return a role.  How could we code this so that it doesn’t matter where the code comes from?&lt;/p&gt;
&lt;p&gt;By declaring an interface to a user role object maybe and then passing an object of that type to the constructor.&lt;/p&gt;
&lt;p&gt;By doing this, you can use a fake object when you are testing and a real object when you are using the system in production, but your code won’t really care which one is being used.&lt;/p&gt;
&lt;p&gt;At some point we will need to retrieve data.  But the data is always just a side effect.  If you have a way of getting at the data, and you are confident it works, because that standard mechanism has been tested, then you don’t need to write test for the data access piece, you only need to write test for “given I have good data, this method will do this.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As I reflected on the post, I realized that this may make sense to you if you are already implementing this in your code.  But, if you are new to dependency injection and the concepts of loose coupling in general, this might be a foreign concept for you.&lt;/p&gt;
&lt;p&gt;At the very least, I realize now that it could be flushed out a bit more.&lt;/p&gt;
&lt;p&gt;So, here we go.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;N-Tiered-Architectures&#34;&gt;&lt;a href=&#34;#N-Tiered-Architectures&#34; class=&#34;headerlink&#34; title=&#34;N-Tiered Architectures&#34;&gt;&lt;/a&gt;N-Tiered Architectures&lt;/h2&gt;&lt;p&gt;There are two primary architectural patterns in the coding ecosystem that I live in.  The first, which has been around for a very long time is the N-Tiered, or 3 Tiered architecture.  The main point of this is to separate the Presentation from the Business rules from the retrieval of the data.&lt;/p&gt;
&lt;p&gt;Code written using this model normally has the view code dependent on the business logic code which is dependent on the data retrieval code.  And, even though we can use interfaces and dependency injection code to swap out each layer, most of the code written using this architecture that I’ve seen ends up being far too dependent on the code under it than it should be.&lt;/p&gt;
&lt;h2 id=&#34;MVC-or-MVP&#34;&gt;&lt;a href=&#34;#MVC-or-MVP&#34; class=&#34;headerlink&#34; title=&#34;MVC or MVP&#34;&gt;&lt;/a&gt;MVC or MVP&lt;/h2&gt;&lt;p&gt;The second architectural pattern I see a lot of is the Model View Controller(MVC) pattern and it’s close cousin, Model View Presenter(MVP).  This pattern also attempts to separate the presentation, and the data and uses the controller as the way of moving the data between the two.  In this pattern, you will often see the controller or presenter layer used as the location of the business logic.  But strictly speaking that’s not the intended purpose.  When the controller or presenter is used for business logic you end up with a similar problem here that we end up with in a strict 3 tiered architecture.  The code ends up being far too dependent on either the architecture or the specific implementation of the architecture.&lt;/p&gt;
&lt;h2 id=&#34;The-Problem&#34;&gt;&lt;a href=&#34;#The-Problem&#34; class=&#34;headerlink&#34; title=&#34;The Problem&#34;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;&lt;p&gt;Now here’s the deal.  And I think this is where many people go astray with architectural patterns.  Just because you are using 3 Tier, MVC, or MVP (or whatever) doesn’t mean that all of your code HAS to fit into the mold of being one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a View,&lt;/li&gt;
&lt;li&gt;a Controller, Presenter or Business layer, or&lt;/li&gt;
&lt;li&gt;a Data Access Layer or Model.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Think about this.  How much of the code you’ve written, were you to really switch out the view, would have to be rewritten?  How much of your code could withstand the jarring effect of changing how you accessed the data.&lt;/p&gt;
&lt;p&gt;And I’m not talking a simple change.  From the data side we have multiple ways of accessing data in .NET.  We can use LINQ, we can use typed DataSets, we can use some ORM tool.  Say you decided to switch from whatever it is you are using now to one of the others.  Could you do that easily?&lt;/p&gt;
&lt;p&gt;And all of this points out the main issue I see with these frameworks.  The frameworks are only there as a way of moving data around.  With each of these it is expected that we will implement the actual presentation, business logic, and data access in an architectural agnostic way.&lt;/p&gt;
&lt;p&gt;Which finally brings us back to the comment I made last week.&lt;/p&gt;
&lt;h2 id=&#34;The-Fix&#34;&gt;&lt;a href=&#34;#The-Fix&#34; class=&#34;headerlink&#34; title=&#34;The Fix&#34;&gt;&lt;/a&gt;The Fix&lt;/h2&gt;&lt;p&gt;All of your business logic shouldn’t really care where it got its data from.  It should not know where the data came from.  It should not request its own data.  It should be handed data in a form that can be used regardless of what the presentation layer looks like or what the data access layer looks like.&lt;/p&gt;
&lt;p&gt;In a three tiered model, the middle layer should work like the controller or the presenter.  It should retrieve the data from either the data layer or the presentation layer and then hand that data off to some other class that will do whatever processing needs to be done, get the return value from it and then pass it on to either the view or the data access layer.  In order to make the actual processing of the data from the view or the data access layer testable, the code we write must be architecturally, and framework agnostic.&lt;/p&gt;
&lt;p&gt;Similarly, in the presentation layer, if you have validations that you need to run on the screen, those validations need to be written in such a way that it won’t matter if or how the presentation layer changes.&lt;/p&gt;
&lt;p&gt;And here, once again, we point out, you won’t even know this is an issue if you aren’t trying to UNIT test your code.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="unit test" />
        <category term="archietcture" />
        <updated>2014-09-04T10:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/it-is-called-unit-testing-for-a-reason/</id>
        <title>It is called &#34;Unit Testing&#34; for a reason</title>
        <link rel="alternate" href="http://davembush.github.com/it-is-called-unit-testing-for-a-reason/"/>
        <content type="html">&lt;p&gt;One of the problems I had when I started to learn unit testing, and a concept that seems to be hard to grasp as I teach others about unit testing, is this concept of testing just a unit.  What is a unit after all?&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-is-a-“Unit”&#34;&gt;&lt;a href=&#34;#What-is-a-“Unit”&#34; class=&#34;headerlink&#34; title=&#34;What is a “Unit”?&#34;&gt;&lt;/a&gt;What is a “Unit”?&lt;/h2&gt;&lt;p&gt;Simply, a unit is one feature or functionality that your application needs to perform.  The problem I see most people have is not that they don’t know how to test a unit so much as they don’t understand what “a feature” or “a function”. This is best illustrated by a recent testing problem. The feature that was being introduced was a classic role based security issue with a twist.  A user could be one of three different roles.  But the record they are trying to view could also be part of three separate roles.  You can look at a record based on the intersection of the two. How would we test this?  More accurately, how would you design this so that you could test this? If you think of the problem as “can we log in?”, you will attempt to test this as one unit.  But you actually have at least three units to this problem.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What role is the logged in user&lt;/li&gt;
&lt;li&gt;What role is the record you are trying to view&lt;/li&gt;
&lt;li&gt;Given a particular user role and a particular record role, can the user view the record.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we have three user roles, and three record roles, this means we will need three test for each of the user and record role functions and nine test for the can a user see a record.&lt;/p&gt;
&lt;p&gt;To be able to test this properly, we will also need to ensure we have three separate methods, and possibly three separate classes in our system.&lt;/p&gt;
&lt;h2 id=&#34;Why-is-testing-“Units”-difficult-to-understand&#34;&gt;&lt;a href=&#34;#Why-is-testing-“Units”-difficult-to-understand&#34; class=&#34;headerlink&#34; title=&#34;Why is testing “Units” difficult to understand?&#34;&gt;&lt;/a&gt;Why is testing “Units” difficult to understand?&lt;/h2&gt;&lt;p&gt;But now that we’ve broken out the problem, we will probably still run into trouble when we start to create test for this because, if you are like most of the programmers I know, you’ll make at least one of these methods call down to your data access layer in order to figure out what role who is in. Now, I understand why you might do this.  Most of our code looks something like this:&lt;/p&gt;
&lt;p&gt;View –&amp;gt; Business Rules –&amp;gt; Data&lt;/p&gt;
&lt;p&gt;That is, the view calls down to the business rules which calls down to the data. The problem with this way of thinking about your code is that you will always have dependencies on other code further down the chain making the code nearly impossible to ‘unit’ test. What you will need to do, instead, is to think about how you will test this code as you are coding.  You’ve heard me say it before, but this is one of the benefits of unit testing.  It makes you think about the design from two different perspectives, which ultimately makes you code more solid and more flexible. So, one way you might go about separating your code from the data is by using dependency injection.  What I’m talking about here is simple injection.  No frameworks. So, let’s say you have a class you may have called user role.  Given a user id, it will return a role.  How could we code this so that it doesn’t matter where the code comes from? By declaring an interface to a user role object maybe and then passing an object of that type to the constructor. By doing this, you can use a fake object when you are testing and a real object when you are using the system in production, but your code won’t really care which one is being used. At some point we will need to retrieve data.  But the data is always just a side effect.  If you have a way of getting at the data, and you are confident it works, because that standard mechanism has been tested, then you don’t need to write test for the data access piece, you only need to write test for “given I have good data, this method will do this.”&lt;/p&gt;
&lt;h2 id=&#34;Why-Unit-Test-Generation-Tools-Are-Dangerous&#34;&gt;&lt;a href=&#34;#Why-Unit-Test-Generation-Tools-Are-Dangerous&#34; class=&#34;headerlink&#34; title=&#34;Why Unit Test Generation Tools Are Dangerous&#34;&gt;&lt;/a&gt;Why Unit Test Generation Tools Are Dangerous&lt;/h2&gt;&lt;p&gt;Maybe you’ve noticed tools that will look at your class and create unit test for each of the public methods.  Maybe you think, “cool, I’ll get one of those and it will tell me what to write test for!”  But if you don’t understand what you are testing, these tools can leave quite a bit out of the picture.&lt;/p&gt;
&lt;p&gt;For example, if you have a method that you need to test that has two parameters and depends on a property being set, you have all of the test that you need to write to make sure it does what it is suppose to do.  But you also have several test that you need to write when bad parameters get passed in.  Test that a tool can’t stub out for you because it doesn’t know anything other than that you have a method with two parameters.&lt;/p&gt;
&lt;p&gt;This isn’t to say that test generation tools aren’t helpful.  But, as with most tools, they only become helpful once you understand how to test by hand.&lt;/p&gt;
</content>
        <updated>2014-08-28T10:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/running-selenium-in-parallel-with-any-net-unit-testing-tool/</id>
        <title>Running Selenium In Parallel With Any .NET Unit Testing Tool</title>
        <link rel="alternate" href="http://davembush.github.com/running-selenium-in-parallel-with-any-net-unit-testing-tool/"/>
        <content type="html">&lt;p&gt;Running Selenium in parallel from .NET seems to be a problem because, as of the time of this writing, I’ve yet to find a viable way of running selenium test on multiple browsers using &lt;a href=&#34;//docs.seleniumhq.org/docs/07_selenium_grid.jsp&#34;&gt;Selenium Grid&lt;/a&gt;.  This doesn’t mean that there aren’t a few articles out there that have some kind of solution.  But they’ve never satisfied me as something that I could easily plug into my already created test. While my preferred testing tools are &lt;a href=&#34;//www.nunit.org/&#34;&gt;NUnit&lt;/a&gt; and &lt;a href=&#34;//www.specflow.org/&#34;&gt;SpecFlow&lt;/a&gt;, the method I am about to propose should work with any existing test harness you might want to use.  The only prerequisite is that you are using &lt;a href=&#34;//code.google.com/p/selenium/wiki/PageObjects&#34;&gt;Page Models&lt;/a&gt; to wrap your access to any particular web page. This article assumes that you already:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;know how to write Selenium tests&lt;/li&gt;
&lt;li&gt;know how to use Selenium Grid&lt;/li&gt;
&lt;li&gt;know how to use the Page Model pattern&lt;/li&gt;
&lt;li&gt;know how to use your chosen test harness.&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Here-Is-The-Problem&#34;&gt;&lt;a href=&#34;#Here-Is-The-Problem&#34; class=&#34;headerlink&#34; title=&#34;Here Is The Problem&#34;&gt;&lt;/a&gt;Here Is The Problem&lt;/h2&gt;&lt;p&gt;In order to run multiple browsers at the same time, the easiest way is to provide a wrapper Page Model that calls multiple instances of the page model at the same time. The hard way of doing this would be to create an Interface that represented the real page model and then create a proxy class that would hold a list of all of the real page model objects we needed to call.  Each time a property or method on the proxy gets called, all it would do would be to pass the call down into the real objects in parallel. This would work, but the main draw back is that I really don’t want to have to write a method for each method in my real page model.  So the question is, how can we get around this?&lt;/p&gt;
&lt;h2 id=&#34;DynamicObject-To-The-Rescue&#34;&gt;&lt;a href=&#34;#DynamicObject-To-The-Rescue&#34; class=&#34;headerlink&#34; title=&#34;DynamicObject To The Rescue&#34;&gt;&lt;/a&gt;DynamicObject To The Rescue&lt;/h2&gt;&lt;p&gt;Enter the little known class, &lt;a href=&#34;//msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject(v=vs.110).aspx&#34;&gt;DynamicObject&lt;/a&gt;.   In .NET 4, Microsoft introduced the dynamic keyword.  One of the main uses is for places where  you need to be able to declare a variable in your code that the compiler won’t know how to resolve the type of until runtime.  I could have used this several years ago when I had two assemblies that needed to reference each other.  In that case, I used reflection.  But dynamic would have worked with a lot less work. DynamicObject is a specific class that allows us to resolve property and method calls at runtime using our own logic. We will also use the Task Parallel library to implement our parallel calls. For completeness, and so that no one is confused when they try to implement this code, you’ll need the following using statements at the top of the CS file.&lt;/p&gt;
&lt;h2 id=&#34;Using-Statements-And-Constructor&#34;&gt;&lt;a href=&#34;#Using-Statements-And-Constructor&#34; class=&#34;headerlink&#34; title=&#34;Using Statements And Constructor&#34;&gt;&lt;/a&gt;Using Statements And Constructor&lt;/h2&gt;&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Collections.Concurrent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Dynamic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Reflection;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Threading.Tasks;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;So, let’s get started.  The first thing we will need is a class declaration:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ParallelPageModel&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;TPage&lt;/span&gt;&amp;gt;:  &lt;span class=&#34;title&#34;&gt;DynamicObject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;TPage allows us to specify the Interface the real Page Model implements.  Yes, we still need the interface, but we won’t need to create a new wrapper class for every page model we want to wrap.  The class  inherits from DynamicObject so that all of our on the fly goodness will work. Next, we’ll need some place to store an array of PageObjects we want to proxy.  So we add a private variable _page for that purpose.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; TPage[] _pages;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;By using TPage[], we create a variable that is the same type array as the Page Models we are proxying. Next we need a constructor.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ParallelPageModel(&lt;span class=&#34;keyword&#34;&gt;params&lt;/span&gt; TPage[] pages)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _pages = pages;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;By using the params keyword, we can either  pass in page objects as an array or as individual parameters. The magic happens in three overridden methods that are in DynamicObject:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TryInvokeMember – resolves any method calls.&lt;/li&gt;
&lt;li&gt;TrySetMember – resolves any property setters&lt;/li&gt;
&lt;li&gt;TryGetMember – resolves any property getters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So let’s add those methods next:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TryInvokeMember&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;InvokeMemberBinder binder,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt;[] args,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt; result&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TrySetMember&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;SetMemberBinder binder, &lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TryGetMember&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;GetMemberBinder binder, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt; result&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;TryInvokeMember&#34;&gt;&lt;a href=&#34;#TryInvokeMember&#34; class=&#34;headerlink&#34; title=&#34;TryInvokeMember&#34;&gt;&lt;/a&gt;TryInvokeMember&lt;/h2&gt;&lt;p&gt;Inside of the TryInvokeMember method, the first thing we will want to do is to use reflection to call into the real methods.  Since we could have multiple instances of the same method we need to call we will want to do this in a loop. When I first worked this out, I started by just implementing a foreach loop but we are going to jump right to using Parallel.ForEach() Parallel.ForEach() will let us pass in an array and run a lambda expression on each element in the array.  So, our foreach loop will look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; results = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConcurrentBag&amp;lt;&lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Parallel.ForEach(_pages, page =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; thisResult = &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; (TPage)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       .InvokeMember(binder.Name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        BindingFlags.InvokeMethod |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        BindingFlags.Public |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        BindingFlags.Instance,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, page, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    results.Add(thisResult);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Note that our lambda expression is not doing anything more than a simple reflection call. The result that is returned is added to our ConcurrentBag collection.  ConcurrentBag is a collection that is specifically made for parallel calls.  We could get into trouble if we added something to a List&amp;lt;&amp;gt; collection unless we added some parallelization gatekeeping around it.  I’m for doing as little work as possible. The second thing we want to do is to process the return results. For this we need to setup a basic foreach loop.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; thisResult &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; results)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Inside the foreach loop we will process the results collection. If the type that got  returned is the same type as the type that the page is proxying for, we just make our result value, the return value the TryInvokeMember is going to return for us to the code that called the proxy, equal to the proxy object.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (thisResult &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; TPage)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If the result is not null, meaning either that a previous result was null or we haven’t processed the loop yet, we want to check to see if the value of the current loop result is the same as the loop results we’ve already processed.  If it isn’t, we throw an exception.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (result != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!result.Equals(thisResult)) &lt;span class=&#34;comment&#34;&gt;// not the same value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Exception&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           (&lt;span class=&#34;string&#34;&gt;&amp;quot;Call to method returns different values.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we just set the result to whatever we have at this point.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = thisResult;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then the last thing we want to do is to return true to tell the system we were able to process the method.&lt;/p&gt;
&lt;h2 id=&#34;TryGetMember&#34;&gt;&lt;a href=&#34;#TryGetMember&#34; class=&#34;headerlink&#34; title=&#34;TryGetMember&#34;&gt;&lt;/a&gt;TryGetMember&lt;/h2&gt;&lt;p&gt;Since the implementation for TryGetMember looks very similar to TryInvokeMethod we’ll tackle that next. In fact, the only difference between the two methods is the code inside of the Parallel.ForEach parameter block. So, here it is:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Parallel.ForEach(_pages, page =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; thisResult = &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt;(TPage)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .GetProperty(binder.Name).GetValue(page);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    results.Add(thisResult);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;TrySetMember&#34;&gt;&lt;a href=&#34;#TrySetMember&#34; class=&#34;headerlink&#34; title=&#34;TrySetMember&#34;&gt;&lt;/a&gt;TrySetMember&lt;/h2&gt;&lt;p&gt;TrySetMember is the easiest implementation of all since there are no results to worry about.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Parallel.ForEach(_pages,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     page =&amp;gt; &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; (TPage)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .GetProperty(binder.Name).SetValue(page, &lt;span class=&#34;keyword&#34;&gt;value&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Casting&#34;&gt;&lt;a href=&#34;#Casting&#34; class=&#34;headerlink&#34; title=&#34;Casting&#34;&gt;&lt;/a&gt;Casting&lt;/h2&gt;&lt;p&gt;So the code above will work, but you won’t get any intellisense help from Visual Studio if you use this code without tweaking it. What we need is some way of casting the ParallelPageModel object to the TPage type that we pass in. For that we are going to use a cool library I found called &lt;a href=&#34;//github.com/ekonbenefits/impromptu-interface&#34;&gt;ImpromptuInterface&lt;/a&gt;. You’ll need to add a using statement.&lt;/p&gt;
&lt;p&gt;using ImpromptuInterface;&lt;/p&gt;
&lt;p&gt;And then you’ll need to add this method to the ParallelPageModel class.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; TPage &lt;span class=&#34;title&#34;&gt;Cast&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.ActLike();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You would use this like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;IMyPageModel p = pageModelProxy.Cast();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Where IMyPageModel is the interface that specifies what your real PageModel class looks like. Just in case someone is tempted to mention this in the comments, you can’t us operator overloading to achieve the cast because we need it to return TPage, which could be anything and the compiler can’t deal with that.  If you really want to use operator overloading you’ll need to provide your own specific implementation that ends up calling the code above.&lt;/p&gt;
&lt;h2 id=&#34;Calling-The-ParallelPageModel&#34;&gt;&lt;a href=&#34;#Calling-The-ParallelPageModel&#34; class=&#34;headerlink&#34; title=&#34;Calling The ParallelPageModel&#34;&gt;&lt;/a&gt;Calling The ParallelPageModel&lt;/h2&gt;&lt;p&gt;To setup the ParallelPageModel, your code would look something like this, assuming that you have a page model class called MyPageModel with an interface of IMyPageModel.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; pages = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConcurrentStack&amp;lt;IMyPageModel&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Parallel.Invoke(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    () =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pages.Push(PageFactory.GetPageModel(&lt;span class=&#34;string&#34;&gt;&amp;quot;FireFoxGrid&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    () =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pages.Push(PageFactory.GetPageModel(&lt;span class=&#34;string&#34;&gt;&amp;quot;IE11Grid&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; pagesArray = pages.ToArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MyTypedPage =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ParallelPageModel&amp;lt;IMyPageModel&amp;gt;(pagesArray).Cast();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Considerations&#34;&gt;&lt;a href=&#34;#Considerations&#34; class=&#34;headerlink&#34; title=&#34;Considerations&#34;&gt;&lt;/a&gt;Considerations&lt;/h2&gt;&lt;p&gt;I only just started using this.  It works for my current implementation.  But you may need to tweak it so that it works for you. For example, my assumption here is that you are only dealing with simple types or the page model type you are a proxy for.  There is no code here that will handle a situation where the call to a method would return a entirely new page model. Since the code I am testing is a collection of Single Page Applications and I am not testing navigation at this point, this is not a consideration for me.  But it would be relatively easy code to implement.  If I did that, I would probably handle it but subclassing this main class that does the bulk of the work and override the Try*Member method that needed to deal with that situation.  The other possible way of dealing with the situation is to pass in a list of types that need to be wrapped in their own parallelization object as parameters in the constructor and add some generic code in the ParallelPageModel class. Finally, I am well aware that this code may have bugs.  If you find one, go ahead and fix it. You can leave a comment so that others will benefit.   There is a &lt;a href=&#34;//github.com/DaveMBush/ParallelSeleniumUsingNUnit&#34;&gt;demo project on GitHub.&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;Other-Places-Talking-about-Parallel-Selenium&#34;&gt;&lt;a href=&#34;#Other-Places-Talking-about-Parallel-Selenium&#34; class=&#34;headerlink&#34; title=&#34;Other Places Talking about Parallel Selenium&#34;&gt;&lt;/a&gt;Other Places Talking about Parallel Selenium&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//slmoloch.blogspot.com/2009/12/design-of-selenium-tests-for-aspnet_19.html&#34;&gt;Using MbUnit to achieve parallelization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//www.browserstack.com/automate/c-sharp&#34;&gt;Use Browser Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And of course a ton of links to people asking how this can be achieved.&lt;/p&gt;
</content>
        <category term="c#" />
        <category term="testing" />
        <category term=".net" />
        <category term="nunit" />
        <category term="parallel" />
        <category term="selenium" />
        <updated>2014-07-31T17:15:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/tdd-saves-time-%E2%80%93-a-story/</id>
        <title>TDD Saves Time – A Story</title>
        <link rel="alternate" href="http://davembush.github.com/tdd-saves-time-%E2%80%93-a-story/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/05/TDDSavesTime_AStory.png&#34; alt=&#34;TDDSavesTime_AStory&#34; title=&#34;TDDSavesTime_AStory&#34;&gt;I recently had an experience writing code that proved to me, once again, that using Test Driven Development really is faster than the way I have been working. You will remember a couple of weeks ago I presented &lt;a href=&#34;/automated-web-%E2%80%A6tional-testing/&#34;&gt;a strategy for creating test scenarios where we need to test storing data to a database from a web page&lt;/a&gt;. &lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Well, recently, I had a chance to use that strategy.  In that article, I talked about first testing that the data that we were sending back to the server was actually coming back correctly to the web site.  By doing this, you don’t have to track down where the problem is.  Is it in the database save routine or did it not even get from the client to the server?  This part worked pretty much as expected and my code for that worked right away so I can’t say that I saved a whole lot of time.&lt;/p&gt;
&lt;p&gt;But the part that did save me a TON of time is the second half.  Saving the data to the database without having to use the web site to create the data I wanted to save.&lt;/p&gt;
&lt;p&gt;While I was testing the client side, I saved the data to a JSON string which I used to create an object that represented the data that had been sent back.  Then in my unit test, I recreated the object from the stream and sent that into my save routine.  Once the save was done, I reloaded the object from the database.  Now I have the original object and the saved object which I can compare.&lt;/p&gt;
&lt;p&gt;And the comparison showed me that the save wasn’t quite working the way I had expected.  I actually had to go through several (10? 15? 20?) iterations of fixing and testing before I got to a point where my test was succeeding.  It took about a day to get everything working.  Imagine if I were using a manual method to test this.  Launch the web site, fill out the form (it’s a pretty long form with a lot of data) save the form, reload the form, remember what I had  filled out, verify that everything got saved.  I easily saved half a day using Test Driven Development.&lt;/p&gt;
&lt;p&gt;If you are  still on the fence as to the value of implementing test prior to writing code, I would encourage you to try it.  Just try it for 30 days.  Yes, it will be hard getting started.  Yes, it will FEEL like it takes more time to write the test first.  But as you make this part of how you develop code, you will start to see for yourself how many benefits you can realize by implementing this best practice.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="programming" />
        <category term="testing" />
        <updated>2014-05-22T16:40:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/the-proper-function-of-qa/</id>
        <title>The Proper Function of QA</title>
        <link rel="alternate" href="http://davembush.github.com/the-proper-function-of-qa/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/04/QA.png&#34; alt=&#34;QA&#34; title=&#34;QA&#34;&gt; With all this talk of test driven development, one has to naturally ask, “Where does the QA department fit in?  Do they even have a role in the organization any more?” Well, the answer to that is, “absolutely but probably not the role they think they have.”&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;QA-People-Are-Not-Programmers&#34;&gt;&lt;a href=&#34;#QA-People-Are-Not-Programmers&#34; class=&#34;headerlink&#34; title=&#34;QA People Are Not Programmers&#34;&gt;&lt;/a&gt;QA People Are Not Programmers&lt;/h2&gt;&lt;p&gt;Once again, as I visit organizations, I find that they are trying to use automated testing tools to script their test.  This ends up being a fool’s errand because most QA people are not programmers and to create a script that is actually going to work reliably, that is going to take a programmer.&lt;/p&gt;
&lt;h2 id=&#34;Jr-Programmers-Are-Not-QA-People&#34;&gt;&lt;a href=&#34;#Jr-Programmers-Are-Not-QA-People&#34; class=&#34;headerlink&#34; title=&#34;Jr Programmers Are Not QA People&#34;&gt;&lt;/a&gt;Jr Programmers Are Not QA People&lt;/h2&gt;&lt;p&gt;The other related problem I frequently see is that organizations tend to put junior programmers in the QA department to handle this “trivial programming task” when what they really ought to be doing is placing senior level programmers in the department because they are more likely to be able to predict what could go wrong.  But I digress.&lt;/p&gt;
&lt;p&gt;By moving to a test driven development process, you actually end up solving the problem of QA needing programmers because you’ve moved the creation of the scripts away from the QA department and back on to the programming staff where it belongs.&lt;/p&gt;
&lt;p&gt;So what is the point of having a QA department if they are no longer going to create test scripts?&lt;/p&gt;
&lt;h2 id=&#34;The-Proper-Role-of-QA&#34;&gt;&lt;a href=&#34;#The-Proper-Role-of-QA&#34; class=&#34;headerlink&#34; title=&#34;The Proper Role of QA&#34;&gt;&lt;/a&gt;The Proper Role of QA&lt;/h2&gt;&lt;p&gt;They have the same function they’ve always had.  Their job is to try to break the program.  To find all of the conditions the programmers left out when they wrote the code and to report those problems back to the programming staff where they can write a test for the problem and fix the bug.&lt;/p&gt;
&lt;p&gt;This may sound like a job that anyone can do, but remember that once they’ve broken the program they have to document how they broke it in a way they can repeat so that when the problem is reported to the programming staff, the error is easy to find.  This requires an attention to detail that few people have.&lt;/p&gt;
</content>
        <category term="roles" />
        <category term="QA" />
        <category term="Quality" />
        <updated>2014-05-01T17:18:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/don%E2%80%99t-comment-out-that-test/</id>
        <title>Don’t Comment Out That Test</title>
        <link rel="alternate" href="http://davembush.github.com/don%E2%80%99t-comment-out-that-test/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/04/DeleteTDD.png&#34; alt=&#34;DeleteTDD&#34; title=&#34;DeleteTDD&#34;&gt; First, at the suggestion of one of my friends who now works at &lt;a href=&#34;//smartbear.com/&#34;&gt;SmartBear&lt;/a&gt;, I’m going to experiment with creating audio of my post going forward.  Obviously this will lend itself to some of my post more than others, but I think it is worth experimenting with. Those of you who’ve been with me since the early days remember that I use to produce &lt;a href=&#34;//www.youtube.com/user/davidmbush&#34;&gt;YouTube videos&lt;/a&gt; occasionally.  I haven’t done that in a while because the post production process for videos takes so long.  I’m hoping that I don’t run into the same problem with producing audio.  Anyhow, the point of creating the audio is that many of you don’t have time to read, but would have time to listen to something on the way to work.  Assuming this experiment works out, you should be able to listen to the content on this blog during your commute, or anywhere else you are likely to listen to audio.  If you’d rather listen to this post, you can scroll to the bottom of this post and click the “Play” button.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Today’s-Problem&#34;&gt;&lt;a href=&#34;#Today’s-Problem&#34; class=&#34;headerlink&#34; title=&#34;Today’s Problem&#34;&gt;&lt;/a&gt;Today’s Problem&lt;/h2&gt;&lt;p&gt;What I want to talk about today is the problem anyone who has been using test driven development for a while has run into.  That is, you’ve got a suite of test that are running pretty well but one day, you are working in crunch mode and a set of previously running test stop working because of some change you’ve made recently. What are you going to do?&lt;/p&gt;
&lt;h2 id=&#34;Crunch-Time&#34;&gt;&lt;a href=&#34;#Crunch-Time&#34; class=&#34;headerlink&#34; title=&#34;Crunch Time&#34;&gt;&lt;/a&gt;Crunch Time&lt;/h2&gt;&lt;p&gt;Remember it’s crunch time.  Maybe it was some bug you fixed that caused the test to stop working.  This bug is critical and you need to get the fix into production as quickly as possible.  To further complicate issues, your process won’t let you put anything into production that the &lt;a href=&#34;/make-your-test-work-for-you/&#34;&gt;Continuous Integration&lt;/a&gt; system you have in place says won’t build.  And by “Won’t Build” I mean either, it won’t build or the test won’t past.&lt;/p&gt;
&lt;p&gt;The temptation in this situation is to just comment out the tests with the promise that you’ll come back to it later.  But you and I both know that once you’ve commented out the tests, you are going to forget about them and move on.&lt;/p&gt;
&lt;h2 id=&#34;It’s-Like-A-Car&#34;&gt;&lt;a href=&#34;#It’s-Like-A-Car&#34; class=&#34;headerlink&#34; title=&#34;It’s Like A Car&#34;&gt;&lt;/a&gt;It’s Like A Car&lt;/h2&gt;&lt;p&gt;I had a manager once who said you can compare everything to a car.  So, let’s use that to illustrate this problem.  You are driving down the road and the check engine light comes on.  What are you going to do?  Well, the prudent thing to do would be to find a garage as soon as possible and find out what the issue is.  Maybe you need oil.  Maybe it is something much more serious.  Maybe it is just a flaky light.  But you won’t know until you get it checked out.&lt;/p&gt;
&lt;p&gt;What you don’t want to do is to put a piece of tape over the light and continue on as though nothing were wrong.  Even if the light is faulty, what you want to do is to get the light fixed so that it can warn you properly when something really IS wrong.&lt;/p&gt;
&lt;p&gt;Commenting out test is a lot like putting tape over the check engine light.  Maybe the test are broken but the application really does work.  Maybe the spec changed and you need to change something about the test.  But if you comment out those test, then you don’t really know that the application works.&lt;/p&gt;
&lt;h2 id=&#34;How-Committed-to-Test-Driven-Development-Are-You&#34;&gt;&lt;a href=&#34;#How-Committed-to-Test-Driven-Development-Are-You&#34; class=&#34;headerlink&#34; title=&#34;How Committed to Test Driven Development Are You?&#34;&gt;&lt;/a&gt;How Committed to Test Driven Development Are You?&lt;/h2&gt;&lt;p&gt;It is at this point in the test driven development process that you really show how committed to test driven development you are. If you comment out your test because they aren’t working, then your development process really isn’t driven by tests.  Your tests are driven by development. If you didn’t think the bug was fixed yet, would you still be thinking about moving this to production?  If you could comment out essential code in your application to fix the bug, would you do that? Of course not.  And the reason is clear.  If you did that, someone is likely to notice.&lt;/p&gt;
&lt;p&gt;The reason we are more likely to comment out a test is that it is unlikely that anyone will notice and the faster we get the bug fix into production, the better we look.&lt;/p&gt;
&lt;p&gt;But that’s really just a lie we tell ourselves.  The truth is, if you comment out those test and later a bug crops up that those test were designed to find, or worse those test were designed to catch a bug that previously existed, someone will notice that too.  And then how smart will you look? Crunch mode tells us something about our character.  Something about what we really believe.  If you are willing to comment out test, what else are you willing to take a short cut on?  If you are willing to comment out test, why did you write them to begin with? Someone who really believes that  testing is part of development will fix the test bugs along with the application bugs the same as they would fix a bug in the application that fixing a bug produced.  It’s all part of the same code base.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="test driven development" />
        <updated>2014-04-24T15:38:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/what-not-to-test/</id>
        <title>What Not To Test</title>
        <link rel="alternate" href="http://davembush.github.com/what-not-to-test/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/04/WhatNotToTest.png&#34; alt=&#34;WhatNotToTest&#34; title=&#34;WhatNotToTest&#34;&gt;&lt;/p&gt;
&lt;p&gt;Many people believe that implementing Test Driven Development means that you need to have a test for every line of code in your system.  When  they start thinking about TDD in this way, they start to feel overwhelmed and quit before they even start.&lt;/p&gt;
&lt;p&gt;I know I did.&lt;/p&gt;
&lt;p&gt;In fact, I’ve seen suggestions on places like StackOverflow that suggest as much.&lt;/p&gt;
&lt;p&gt;But there is code in your application that you shouldn’t bother to write a test for.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Generated-Code&#34;&gt;&lt;a href=&#34;#Generated-Code&#34; class=&#34;headerlink&#34; title=&#34;Generated Code&#34;&gt;&lt;/a&gt;Generated Code&lt;/h2&gt;&lt;p&gt;Generated code includes any code that uses some automated process to create code your system is using.  This would include code that was written by Entity Framework, NHibernate, or code generators that you may have written.  Of course, I’m assuming that you’ve written test for the code generators that test both that they generate the expected code and the code that was generated works as expected.  But to write a test for every instance of the code the generator writes is quite a bit of overkill.&lt;/p&gt;
&lt;h2 id=&#34;Simple-Getters-and-Setters&#34;&gt;&lt;a href=&#34;#Simple-Getters-and-Setters&#34; class=&#34;headerlink&#34; title=&#34;Simple Getters and Setters&#34;&gt;&lt;/a&gt;Simple Getters and Setters&lt;/h2&gt;&lt;p&gt;If all your getters and setters are doing (properties) are retrieving and setting some backing store, there isn’t much point in writing a test for them.  One would assume that the code will get tested in the course of testing the code that is ultimately using the getters and setters.&lt;/p&gt;
&lt;h2 id=&#34;Third-Party-Libraries&#34;&gt;&lt;a href=&#34;#Third-Party-Libraries&#34; class=&#34;headerlink&#34; title=&#34;Third Party  Libraries&#34;&gt;&lt;/a&gt;Third Party  Libraries&lt;/h2&gt;&lt;p&gt;While I know it isn’t true, you have to assume that the third party library you are using actually works.  If you can’t assume that much, you should probably write it yourself.&lt;/p&gt;
&lt;h2 id=&#34;Your-Thinking-About-It-Wrong&#34;&gt;&lt;a href=&#34;#Your-Thinking-About-It-Wrong&#34; class=&#34;headerlink&#34; title=&#34;Your Thinking About It Wrong&#34;&gt;&lt;/a&gt;Your Thinking About It Wrong&lt;/h2&gt;&lt;p&gt;I would argue that if you are thinking about what you should write a test for, you are probably still thinking of Test Driven Development as something you do for the sake of testing rather than for the sake of &lt;a href=&#34;/tdd-isnt-all-about-testing/&#34;&gt;design, maintenance, and problem solving&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you write code, you should be thinking, “What problem am I trying to solve?”  Or better yet, “How can I state the problem in terms of a ‘When&amp;#x2F;Then’ statement?”&lt;/p&gt;
&lt;p&gt;When you think about the problem this way, what you test becomes that When&amp;#x2F;Then statement.  The class name for the test becomes When and the test becomes Then&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;WhenTheCodeIsInStateXAndIPerformActionYOnIt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;SetUp&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Setup&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// Setup When&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// Perform Action&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;Test&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ThenItShouldEndUpWithZState&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         Assert.That(&lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt;, Is.InSpecificState());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;When you do this, the question no longer is about how much code you have to test, but instead becomes “Have I written a test for every reasonable condition this class may encounter?”&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="programming" />
        <category term="test driven development" />
        <updated>2014-04-09T16:30:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/automated-web-application-functional-testing/</id>
        <title>Automated Web Application Functional Testing</title>
        <link rel="alternate" href="http://davembush.github.com/automated-web-application-functional-testing/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/03/WebTestingCloud.png&#34; alt=&#34;WebTestingCloud&#34; title=&#34;WebTestingCloud&#34;&gt;&lt;/p&gt;
&lt;p&gt;One problem we often have when performing application test is that if we are testing  applications that modify the database in some way, we can’t test without modifying the database.&lt;/p&gt;
&lt;p&gt;In an ideal world, one way you could deal with this issue is to create a test database that has known data.  But even then, you have to go through the effort of setting up the data prior to each test.&lt;/p&gt;
&lt;p&gt;To be clear, I’m not talking about unit test.  You should have unit test for most of your code.  I’ll handle what not to test in some other post.  But, at some point you will want to put together a suite of test that ensures that the application, as a whole, does what you expect it to do.&lt;/p&gt;
&lt;p&gt;So, the stated problem is this, “How do  we test a web application in such a way that we are always working with known data and in such a way that we do not ever modify the data in the database?”&lt;/p&gt;
&lt;p&gt;So far, I’ve not found a way that test the whole web application from the user interface down to the database.  But, I think I’ve found the next best thing.  Split the application in half between the view and the database and perform two, overlapping, integration test.  If both work, we can reasonably assume that the whole application works.&lt;/p&gt;
&lt;h2 id=&#34;So-how-would-we-go-about-doing-this&#34;&gt;&lt;a href=&#34;#So-how-would-we-go-about-doing-this&#34; class=&#34;headerlink&#34; title=&#34;So how would we go about doing this?&#34;&gt;&lt;/a&gt;So how would we go about doing this?&lt;/h2&gt;&lt;p&gt;If you’ve designed your application correctly, you should have a seam somewhere in the center.  In my code it tends to either be at the business logic layer or at the data access layer.  What we want to do is to create a separate class, or set of classes that look just like the classes at that layer and swap them in while testing the top half of our application and use the real classes when testing the bottom half of the application and when using the application in production.&lt;/p&gt;
&lt;p&gt;We do this using dependency injection using your favorite dependency injection framework.  I’m not going to go into the details of dependency injection here.  Maybe some other day.  But this is a place where you would use it.&lt;/p&gt;
&lt;h2 id=&#34;Test-the-top-half&#34;&gt;&lt;a href=&#34;#Test-the-top-half&#34; class=&#34;headerlink&#34; title=&#34;Test the top half&#34;&gt;&lt;/a&gt;Test the top half&lt;/h2&gt;&lt;p&gt;In the fake DAL or BLL classes, what you are going to do is return what amounts to hard coded values.  In a recent implementation, I stored the JSON representation of the values in a resource (RESX) file  using the parameters that were passed into the method call as keys so that I could retrieve that data. If you need to do an update, you will need to store that some place so that your test code can verify that it got passed down to the function that should have saved it to the database.&lt;/p&gt;
&lt;p&gt;By doing this, you can verify that your code from the presentation layer down to this seam works as it should.  Now we need to test the bottom half of our code.&lt;/p&gt;
&lt;h2 id=&#34;Test-the-bottom-half&#34;&gt;&lt;a href=&#34;#Test-the-bottom-half&#34; class=&#34;headerlink&#34; title=&#34;Test the bottom half&#34;&gt;&lt;/a&gt;Test the bottom half&lt;/h2&gt;&lt;p&gt;This will be a bit easier.  What we do here is we have our test code run the code directly.  But, unlike when we run the code in production, we will wrap the code in transaction tracking starting with our setup method.  We turn on transaction tracking, get the database into the state that we need for testing, run our test, and then rollback the changes.  Assuming the transaction tracking works correctly, and we have to assume that our third party tools do, this test everything without modifying the database.&lt;/p&gt;
&lt;p&gt;Because we’ve tested both the top half of the code and the bottom half of the code, we now have a reasonable assurance that the code as a whole works as it should.&lt;/p&gt;
</content>
        <category term="application testing" />
        <category term="dependency injection" />
        <updated>2014-04-01T17:01:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/tdd-isn%E2%80%99t-all-about-testing/</id>
        <title>TDD Isn’t All About Testing</title>
        <link rel="alternate" href="http://davembush.github.com/tdd-isn%E2%80%99t-all-about-testing/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/03/tran-land-045.jpg&#34; alt=&#34;tran-land-045&#34; title=&#34;tran-land-045&#34;&gt;While the artifact of Test Driven Development is test code, what you get out of test driven development far exceeds the test themselves. &lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Maintainable-Code&#34;&gt;&lt;a href=&#34;#Maintainable-Code&#34; class=&#34;headerlink&#34; title=&#34;Maintainable Code&#34;&gt;&lt;/a&gt;Maintainable Code&lt;/h2&gt;&lt;p&gt;By writing test first, you tend to write code that is more highly maintainable than if you just wrote the code to solve the problem.  By writing a class so that it can be used in both the system you are writing it for and so that it can be tested, you’ve been forced to think about the code in at least one other way from what you would have initially.  The result is your code tends to be more structured than it would have been otherwise.&lt;/p&gt;
&lt;h2 id=&#34;Clear-Specifications&#34;&gt;&lt;a href=&#34;#Clear-Specifications&#34; class=&#34;headerlink&#34; title=&#34;Clear Specifications&#34;&gt;&lt;/a&gt;Clear Specifications&lt;/h2&gt;&lt;p&gt;By writing test first, you are forced to develop clearer specifications.  I’ve run into this recently on a project that I’m currently working on.  I can’t write a test for the code I’m about to implement because I don’t clearly understand how this is supposed to interact with the rest of the application.  Until I do, I really can’t move forward.  If I were not writing a test, this would not be as clear now as it is.  Although, one could argue that eventually it would become clear.  But it is more likely I would leave the feature out completely because I forgot about it entirely.  Something I’ve been known to do in the past.&lt;/p&gt;
&lt;h2 id=&#34;Up-To-Date-Specifications&#34;&gt;&lt;a href=&#34;#Up-To-Date-Specifications&#34; class=&#34;headerlink&#34; title=&#34;Up To Date Specifications&#34;&gt;&lt;/a&gt;Up To Date Specifications&lt;/h2&gt;&lt;p&gt;This leads to another advantage to test driven development that &lt;a href=&#34;/test-driven-specifications/&#34;&gt;I’ve mentioned before&lt;/a&gt;.  By writing test in advance, you have the specification coded.  This forces you to keep the specification up to date if it changes because your test won’t run unless you do.  How many other programming methods are there that force the specifications to be kept up to date?  I can’t think of any.&lt;/p&gt;
&lt;h2 id=&#34;A-Safety-Net-For-Refactoring&#34;&gt;&lt;a href=&#34;#A-Safety-Net-For-Refactoring&#34; class=&#34;headerlink&#34; title=&#34;A Safety Net For Refactoring&#34;&gt;&lt;/a&gt;A Safety Net For Refactoring&lt;/h2&gt;&lt;p&gt;If you’ve ever looked at bad code and thought, “I bet I could make this better.”  But then you were afraid to make any changes because you aren’t sure your improvement wouldn’t break something, you’ll really appreciate TDD.  If there is a good test suite for the code you want to refactor, you can be sure that any changes you make won’t break something it should do.  I’ve left a lot of code alone for fear of breaking something else.&lt;/p&gt;
&lt;h2 id=&#34;Preventing-Feature-Creep&#34;&gt;&lt;a href=&#34;#Preventing-Feature-Creep&#34; class=&#34;headerlink&#34; title=&#34;Preventing Feature Creep&#34;&gt;&lt;/a&gt;Preventing Feature Creep&lt;/h2&gt;&lt;p&gt;Another thing TDD does is that it prevents feature creep on the part of developers.  Face it, how many times have you added a feature into the system that no one asked for?  By coding to the test, you reduce this urge.&lt;/p&gt;
&lt;p&gt;Many people start TDD by writing test after the fact and wonder how this can possibly be helpful.  This is because they’ve written them after they’ve written the code and they’ve completely bypass 80% of the benefits.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="programming" />
        <category term="test driven development" />
        <updated>2014-03-25T17:07:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/when-you-really-need-all-of-your-nunit-test-in-one-class/</id>
        <title>When You Really Need All Of Your NUnit Test In One Class</title>
        <link rel="alternate" href="http://davembush.github.com/when-you-really-need-all-of-your-nunit-test-in-one-class/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/03/arct-034.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Last week &lt;a href=&#34;/unit-test-structure/&#34;&gt;I proposed a structure for unit test that follows the pre-condition, action, post-condition workflow&lt;/a&gt;.  Basically what you would see in a Use Case document.&lt;/p&gt;
&lt;p&gt;The result of this structure when applied to a general NUnit class is that we will end up with our pre-condition and action in our setup method and our post-condition asserts in our test methods.&lt;/p&gt;
&lt;p&gt;The problem with this is that sometimes this doesn’t always fit what we are trying to do.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;For example, I’ve been writing selenium test to test web applications I am working on.  Each page I am testing is essentially a form that computes a result at the bottom.  If I were a purest, I would put the page load object and the setup of the state of the page in the setup method.  One for each permutation.  And the assert to verify that it computed correctly.&lt;/p&gt;
&lt;p&gt;In this case, however, I vary slightly because what I really want is all of these similar test together where I can see them.&lt;/p&gt;
&lt;p&gt;But I still keep my code clean by using a TestCaseSource.&lt;/p&gt;
&lt;p&gt;What we are going to do is move just about everything into the TestCaseSource.  The code that is common between each TestCaseSource is going to still go in the SetUp method, but everything else will be declared in the TestCaseSource.&lt;/p&gt;
&lt;p&gt;The basics of how TestCaseSource works is that we setup a Property or a member variable that returns an IEnumerable.  By using the built in TestCaseData class we get a lot of control over what displays.  I’m not going to go over that here.  I’m sure you can &lt;a href=&#34;//www.nunit.org/index.php?p=testCaseSource&amp;r=2.6.3&#34;&gt;read the documentation&lt;/a&gt; as well as I can.&lt;/p&gt;
&lt;p&gt;But what you may not realize when you first look that this documentation is that we can pass in functions and not just objects.  This gives us quite a bit of freedom in what we do here.&lt;/p&gt;
&lt;p&gt;So by setting up our Test method to look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;Test&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;TestCaseSource(&lt;span class=&#34;string&#34;&gt;&amp;quot;DataSource&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Test&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Action pre,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    List&amp;lt;Action&amp;gt; actions,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    Action assert&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pre();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; action &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; actions) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        action();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    assert();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What we are doing is saying that we expect to find a property or member variable called “DataSource” that will pass us a function, a list of functions, and another function.&lt;/p&gt;
&lt;p&gt;The test body runs the first function to do any pre-condition work.  Then it loops through all of the function in the actions list to get the code to the state we need it to be in and then we finally call the assert to test our code.&lt;/p&gt;
&lt;p&gt;Here is a sample of what our DataSource property looks like:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; IEnumerable DataSource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Action pre = () =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;given&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; actions = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;Action&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            () =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;when one&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            () =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;when two&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Action assert = () =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Assert.That(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Is.EqualTo(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;            &lt;span class=&#34;title&#34;&gt;TestCaseData&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;pre, actions, assert&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I’ve broken out the lambda expressions individually so that you can better see what I’m doing.  But in real life, your code will probably look more like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; IEnumerable DataSource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestCaseData&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;            (Action&lt;/span&gt;)(&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;)&lt;/span&gt; =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;given&amp;quot;&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;Action&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                () =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;when one&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                () =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;when two&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (Action)(() =&amp;gt; Assert.That(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Is.EqualTo(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You will need the (Action) cast to make the compiler understand what you are trying to do.  It isn’t smart enough to know that a lambda express is an Action which is a delegate that take no parameters and returns void.&lt;/p&gt;
&lt;p&gt;When you run the code, above, we get this output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2014/03/GivenWhenThenTest.png&#34; alt=&#34;GivenWhenThenTest&#34; title=&#34;GivenWhenThenTest&#34;&gt;&lt;/p&gt;
&lt;p&gt;By chaining on the SetName() call, you can make each iteration show up as it’s own unique test so you can see what is occuring in your test runner.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; IEnumerable DataSource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestCaseData&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;            (Action&lt;/span&gt;)(&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;)&lt;/span&gt; =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;given&amp;quot;&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;Action&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                () =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;when one&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                () =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;when two&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (Action)(() =&amp;gt; Assert.That(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Is.EqualTo(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ).SetName(&lt;span class=&#34;string&#34;&gt;&amp;quot;First Test&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And this looks like this in the test runner:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2014/03/GivenWhenThen2.png&#34; alt=&#34;GivenWhenThen2&#34; title=&#34;GivenWhenThen2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once again, I have to reiterate, this is not something I would do a lot of, but it is a pretty neat trick when you need it. &lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="test driven development" />
        <category term="nunit" />
        <category term="testcasedata" />
        <category term="testcasesource" />
        <updated>2014-03-18T17:16:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/%E2%80%9Cdebbie-done%E2%80%9D/</id>
        <title>“Debbie-Done”</title>
        <link rel="alternate" href="http://davembush.github.com/%E2%80%9Cdebbie-done%E2%80%9D/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/02/88Tr.png&#34; alt=&#34;88Tr&#34; title=&#34;88Tr&#34;&gt;&lt;/p&gt;
&lt;p&gt;A long long time ago, in what seems now like another world, I worked for a company as a &lt;a href=&#34;//en.wikipedia.org/wiki/Clipper_(programming_language)&#34;&gt;Clipper programmer&lt;/a&gt;.  While I was there I heard this story about a lady named Debbie.&lt;/p&gt;
&lt;p&gt;I was told that Debbie was a programmer who used to work for this company.  Debbie was a lazy programmer.  She worked harder at avoiding work than if she just did the job she was supposed to do.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;The-ultimate-lazy-programmer&#34;&gt;&lt;a href=&#34;#The-ultimate-lazy-programmer&#34; class=&#34;headerlink&#34; title=&#34;The ultimate lazy programmer&#34;&gt;&lt;/a&gt;The ultimate lazy programmer&lt;/h2&gt;&lt;p&gt;For example.  Once my boss had stopped by her desk to see how she was progressing on a report she was supposed to be writing:&lt;/p&gt;
&lt;p&gt;Debbie: Oh, that’s done.  Here.  Take a look.&lt;/p&gt;
&lt;p&gt;The boss looked it over and found an error.  Some of the numbers didn’t match up.&lt;/p&gt;
&lt;p&gt;Debbie: Oh, I know what that is.  I can get that fixed right away.&lt;/p&gt;
&lt;p&gt;Which she did.  At least that’s what she made everyone believe.&lt;/p&gt;
&lt;p&gt;After she left (shortly after this) they found out that she hadn’t even connected to a database to create that report.  The whole report was hard coded.  Every time you ran it, it gave you the same numbers.&lt;/p&gt;
&lt;h2 id=&#34;“Debbie-Done”&#34;&gt;&lt;a href=&#34;#“Debbie-Done”&#34; class=&#34;headerlink&#34; title=&#34;“Debbie-Done”&#34;&gt;&lt;/a&gt;“Debbie-Done”&lt;/h2&gt;&lt;p&gt;The one thing I was told that sticks in my mind the most is that Debbie considered a project “done” if it compiled in linked.  She almost never ran the code.  Or if she did, she certainly didn’t run enough of it, or run it more than to make sure it didn’t crash.  Anyhow, the perception she left is that she only compiled and linked the code.  Today, we’d say all she did was build the project or solution.&lt;/p&gt;
&lt;p&gt;But recently, I’ve discovered that many programmers work at the “Debbie-Done” level more than we’d like to admit.&lt;/p&gt;
&lt;p&gt;I’ve always thought that programmers wrote code like I do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write a bit of code. &lt;/li&gt;
&lt;li&gt;Build the code.&lt;/li&gt;
&lt;li&gt;Run the code to see if that change works as expected. &lt;/li&gt;
&lt;li&gt;Write a bit more code. &lt;/li&gt;
&lt;li&gt;Build the code.&lt;/li&gt;
&lt;li&gt;Run the code to see if that change works as expected. &lt;/li&gt;
&lt;li&gt;Rinse, lather, repeat.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But what I’m discovering is that MANY programmers do not program that way at all.  No, many of them look like some version of “Debbie-Done” programming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write some code. &lt;/li&gt;
&lt;li&gt;Build the project to make sure it will build&lt;/li&gt;
&lt;li&gt;Write some more code&lt;/li&gt;
&lt;li&gt;Build the project&lt;/li&gt;
&lt;li&gt;Rinse, lather, repeat&lt;/li&gt;
&lt;li&gt;Run the code and “test” all of the changes at once.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem with this method is that no one can remember all of the changes they make so, in the end, the code I write tends to be more completely tested than the code that was tested in bulk.  The only difference between this method of development and “Debbie-Done” is the degree of completeness with which each developer is able “test” their code.&lt;/p&gt;
&lt;h2 id=&#34;Avoid-“Debbie-Done”-with-Test-First-Development&#34;&gt;&lt;a href=&#34;#Avoid-“Debbie-Done”-with-Test-First-Development&#34; class=&#34;headerlink&#34; title=&#34;Avoid “Debbie-Done” with Test First Development&#34;&gt;&lt;/a&gt;Avoid “Debbie-Done” with Test First Development&lt;/h2&gt;&lt;p&gt;It is no wonder that many programmers I talk to think that test driven development takes too much time.  Compared to how they are programming, it does.&lt;/p&gt;
&lt;p&gt;But think about this.  If you were to code like I do, suddenly writing test for every change you make suddenly makes sense because instead of you running the application and getting to the place that will trigger your code and observing if it will work or not, you can write a test for just the piece of code you are working on and run that each time you want to verify if it is working or not.  Yes, initially, this will take more time.  But over the life of the program, and I would say even over the time span that it takes to initially write the code, writing at least the Unit Test as you are writing the features will actually save you time.  Not only that, you will end up with test you can repeat every time the code is changed.&lt;/p&gt;
&lt;p&gt;Even my method of “code, build, test, code, build, test” is “Debbie-Done” compared to writing test for each change as you make the change.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="programming" />
        <category term="agile" />
        <category term="testing" />
        <updated>2014-03-04T10:38:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/selenium-with-nunit-presentation/</id>
        <title>Selenium with NUnit Presentation</title>
        <link rel="alternate" href="http://davembush.github.com/selenium-with-nunit-presentation/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/01/Selenium.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;On Monday 2&amp;#x2F;17&amp;#x2F;14 I gave a presentation at the CT .NET User’s Group on using Selenium and NUnit to test your web application.  The following is a list of resources from that presentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/uploads/2014/02/SeleniumDemoTest.zip&#34;&gt;The demo code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//docs.seleniumhq.org/download/&#34;&gt;The Selenium IDE Plugin for FireFox and the IE Driver Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//www.nunit.org/&#34;&gt;NUnit&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//selenium.googlecode.com/git/docs/api/dotnet/index.html&#34;&gt;Selenium CSharp API Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//docs.seleniumhq.org/docs/&#34;&gt;Selenium Users Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="c#" />
        <category term="nunit" />
        <category term="selenium" />
        <updated>2014-02-17T23:00:00.000Z</updated>
    </entry>
</feed>
