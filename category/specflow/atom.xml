<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://davembush.github.com</id>
    <title>Dave&#39;s Notebook • Posts by &#34;specflow&#34; category</title>
    <link href="http://davembush.github.com" />
    <updated>2015-05-21T10:00:00.000Z</updated>
    <category term="project management" />
    <category term="code coverage" />
    <category term="tdd" />
    <category term="unit test" />
    <category term="code" />
    <category term="programming" />
    <category term="angular" />
    <category term="javascript" />
    <category term="performance" />
    <category term="react.js" />
    <category term="agile" />
    <category term="failure" />
    <category term="kanban" />
    <category term="scrum" />
    <category term="interview" />
    <category term="job search" />
    <category term="test driven development" />
    <category term="mvvm" />
    <category term="DRY" />
    <category term="loose coupling" />
    <category term="single responsibility" />
    <category term="c#" />
    <category term="learning" />
    <category term="bug" />
    <category term="ext js" />
    <category term="sencha" />
    <category term="career" />
    <category term="react" />
    <category term="ngrx" />
    <category term="redux" />
    <category term="functional" />
    <category term="reactive" />
    <category term="mvp" />
    <category term="private" />
    <category term="testing" />
    <category term="typescript" />
    <category term="routing" />
    <category term="pointers" />
    <category term="unsafe" />
    <category term="class diagram" />
    <category term="vb.net" />
    <category term="visual studio" />
    <category term="flux" />
    <category term="lazy loading" />
    <category term="scope" />
    <category term="DOM" />
    <category term="ionic" />
    <category term="putty" />
    <category term="ssh" />
    <category term="formgroup" />
    <category term="validation" />
    <category term="angular-cli" />
    <category term="modules" />
    <category term="ngmodule" />
    <category term="observables" />
    <category term="RxJS" />
    <category term="model driven" />
    <category term="reactive forms" />
    <category term="estimating" />
    <category term="story points" />
    <category term="best practices" />
    <category term="design patterns" />
    <category term="architecture" />
    <category term="asp.net" />
    <category term="memory" />
    <category term="angular.js" />
    <category term="iis" />
    <category term="ajax" />
    <category term="json" />
    <category term="controller" />
    <category term="MVC" />
    <category term="view" />
    <category term="404" />
    <category term="application_error" />
    <category term="exceptions" />
    <category term="viewstate" />
    <category term="archietcture" />
    <category term="bll" />
    <category term="dal" />
    <category term="Three Tiered" />
    <category term=".net" />
    <category term="enums" />
    <category term="tutorial" />
    <category term="code quality" />
    <category term="cyclomatic" />
    <category term="halstead" />
    <category term="child component" />
    <category term="CefSharp" />
    <category term="Chromium" />
    <category term="Vista" />
    <category term="VPN" />
    <category term="xp" />
    <category term="get" />
    <category term="properties" />
    <category term="set" />
    <category term="empty" />
    <category term="string" />
    <category term="habits" />
    <category term="application testing" />
    <category term="dependency injection" />
    <category term="debugging" />
    <category term="cms" />
    <category term="dotnetnuke" />
    <category term="WordPress" />
    <category term="authority" />
    <category term="confidence" />
    <category term="datalist" />
    <category term="listview" />
    <category term="comments" />
    <category term="tdd. agile" />
    <category term="bootstrap" />
    <category term="copy &amp;amp; paste" />
    <category term="cross browser" />
    <category term="idisposable" />
    <category term="animation" />
    <category term="css" />
    <category term="html" />
    <category term="debug" />
    <category term="checked" />
    <category term="double" />
    <category term="float" />
    <category term="int" />
    <category term="long" />
    <category term="short" />
    <category term="unchecked" />
    <category term="currency" />
    <category term="decimal" />
    <category term="floating point math" />
    <category term="single" />
    <category term="authentication" />
    <category term="isinrole" />
    <category term="roles" />
    <category term="user" />
    <category term="definition of done" />
    <category term="DoD" />
    <category term="dispose" />
    <category term="finalize" />
    <category term="suppressfinalize" />
    <category term="education" />
    <category term="client side" />
    <category term="development" />
    <category term="class" />
    <category term="dynamic classing" />
    <category term="gridview" />
    <category term="college" />
    <category term="freshman" />
    <category term="babel" />
    <category term="es2015" />
    <category term="es6" />
    <category term="jest" />
    <category term="bdd" />
    <category term="Single Responsibility" />
    <category term="Architecture" />
    <category term="full stack developer" />
    <category term="web development" />
    <category term="formsauthentication" />
    <category term="manual" />
    <category term="redirectfromloginpage" />
    <category term="setauthcookie" />
    <category term="NgRX" />
    <category term="luck" />
    <category term="social skills" />
    <category term="brain" />
    <category term="health" />
    <category term="programmer" />
    <category term="productivity" />
    <category term="QA" />
    <category term="extreme programming" />
    <category term="software" />
    <category term="httpcontext" />
    <category term="items" />
    <category term="session" />
    <category term="naming conventions" />
    <category term="variables" />
    <category term="self improvement" />
    <category term="301" />
    <category term="302" />
    <category term="fiddler" />
    <category term="infinite loop" />
    <category term="images" />
    <category term="iTextSharp" />
    <category term="PDF" />
    <category term="concatenation" />
    <category term="quirks" />
    <category term="parsing" />
    <category term="xhtml" />
    <category term="fonts" />
    <category term="stack" />
    <category term="htmltidy" />
    <category term="tables" />
    <category term="acrofields" />
    <category term="form fields" />
    <category term="outputstream" />
    <category term="pdfreader" />
    <category term="pdfstamper" />
    <category term="bind" />
    <category term="callbacks" />
    <category term="currying" />
    <category term="events" />
    <category term="business rules" />
    <category term="boolean" />
    <category term="fields" />
    <category term="methods" />
    <category term="object" />
    <category term="functions" />
    <category term="inheritance" />
    <category term="prototype" />
    <category term="hoist" />
    <category term="falsy" />
    <category term="truthy" />
    <category term="istanbul" />
    <category term="jasmine" />
    <category term="hoisting" />
    <category term="types" />
    <category term="type conversion" />
    <category term="dialog" />
    <category term="jQuery" />
    <category term="validation controls" />
    <category term="async" />
    <category term="each" />
    <category term="collapse" />
    <category term="expand" />
    <category term="load" />
    <category term="partial content" />
    <category term="tooltip" />
    <category term="regions" />
    <category term="limiting beliefs" />
    <category term="angular material" />
    <category term="linkedin" />
    <category term="social media" />
    <category term="tips" />
    <category term="CI. Continuous Integration" />
    <category term="magic numbers" />
    <category term="magic strings" />
    <category term="flex" />
    <category term="multiview" />
    <category term="wizard" />
    <category term="threading" />
    <category term="intern" />
    <category term="express" />
    <category term="node" />
    <category term="nunit" />
    <category term="object initializers" />
    <category term="video" />
    <category term="reflection" />
    <category term="unity" />
    <category term="best practice" />
    <category term="asp.net postback button" />
    <category term="iText" />
    <category term="property based testing" />
    <category term="cli" />
    <category term="software architecture" />
    <category term="rxjs. angular 2" />
    <category term="redirect" />
    <category term="response" />
    <category term="responsive design" />
    <category term="parallel" />
    <category term="selenium" />
    <category term="Marble Testing" />
    <category term="java" />
    <category term="grid" />
    <category term="hub" />
    <category term="serialization" />
    <category term="specflow" />
    <category term="like" />
    <category term="sql" />
    <category term="tsql" />
    <category term="where clause" />
    <category term="do while" />
    <category term="for next" />
    <category term="ms-sql" />
    <category term="while" />
    <category term="gamification" />
    <category term="paired programming" />
    <category term="reference types" />
    <category term="stringbuilder" />
    <category term="value types" />
    <category term="technical debt" />
    <category term="activetabindex" />
    <category term="postback" />
    <category term="tab control" />
    <category term="tabcontrol" />
    <category term="kata" />
    <category term="extjs" />
    <category term="email" />
    <category term="mailaddress" />
    <category term="mailmessage" />
    <category term="smtpclient" />
    <category term="Quality" />
    <category term="behavior" />
    <category term="psychology" />
    <category term="portal" />
    <category term="web 1.0" />
    <category term="web 2.0" />
    <category term="trace" />
    <category term="compiler" />
    <category term="errror" />
    <category term="warning" />
    <category term="connection string" />
    <category term="dataset" />
    <category term="error" />
    <category term="web.config" />
    <category term="tslint" />
    <category term="emotions" />
    <category term="hiring" />
    <category term="aspnet_regsql" />
    <category term="forms based authentication" />
    <category term="jsdom" />
    <category term="karma" />
    <category term="noTDD" />
    <category term="bundling" />
    <category term="gulp" />
    <category term="minification" />
    <category term="node.js" />
    <category term="file upload" />
    <category term="objects" />
    <category term="hide" />
    <category term="vb.net attributes" />
    <category term="nothing" />
    <category term="nullable" />
    <category term="conditional startup" />
    <category term="windows forms" />
    <category term="winforms" />
    <category term="char" />
    <category term="split" />
    <category term="strict" />
    <category term="clarity" />
    <category term="ui" />
    <category term="ux" />
    <category term="asmx" />
    <category term="error handling" />
    <category term="webservice" />
    <category term="binary" />
    <category term="bitwise" />
    <category term="operators" />
    <category term="automation" />
    <category term="browser" />
    <category term="mstest" />
    <category term="immutable" />
    <category term="global" />
    <category term="await" />
    <category term="webapi" />
    <category term="configuration" />
    <category term="devops" />
    <category term="testcasedata" />
    <category term="testcasesource" />
    <category term="closure" />
    <category term="loops" />
    <category term="certification" />
    <category term="mcsd" />
    <category term="microsoft" />
    <category term="inversion of control" />
    <category term="ioc" />
    <category term="casting" />
    <category term="convert" />
    <category term="arguements" />
    <category term="command line" />
    <category term="main" />
    <category term="yagni" />
    <category term="npm" />
    <category term="nvm" />
    <category term="resumes" />
    <category term="change-detection" />
    <category term="state-management" />
    <category term="web-workers" />
    <category term="libraries" />
    <category term="strong typing" />
    <category term="linting" />
    <category term="constructors" />
    <category term="clean code" />
    <category term="smart-ngrx" />
    <category term="ngrx-store" />
    <category term="ngrx-entity" />
    <category term="ngrx-effects" />
    <category term="TypeScript" />
    <category term="Performance" />
    <entry>
        <id>http://davembush.github.com/setting-up-specflow/</id>
        <title>Setting up SpecFlow</title>
        <link rel="alternate" href="http://davembush.github.com/setting-up-specflow/"/>
        <content type="html">&lt;p&gt;I’ve been asked to train a group of developers in the use of &lt;a href=&#34;//www.specflow.org/&#34;&gt;SpecFlow&lt;/a&gt; so that they can use it to write Selenium Tests.  So, in an attempt to “kill two birds with one stone” I thought today’s post would cover how to get the SpecFlow environment setup.  Not only will it help me prepare for the training session I will be leading, but it will help me when I need to set this up the next time because it tends to be a bit confusing when you setup a new project.  You’ll see why in a bit.&lt;/p&gt;
&lt;h2 id=&#34;Installing-SpecFlow&#34;&gt;&lt;a href=&#34;#Installing-SpecFlow&#34; class=&#34;headerlink&#34; title=&#34;Installing SpecFlow&#34;&gt;&lt;/a&gt;Installing SpecFlow&lt;/h2&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;The first thing you’ll want to do is to install the SpecFlow Visual Studio integration.  You do this by navigating to “Tools” –&amp;gt; “Extension and Updates …” &lt;img src=&#34;/uploads/2015/05/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt; This will bring up a dialog box where you’ll want to select the “Online” branch &lt;img src=&#34;/uploads/2015/05/image1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt; You will notice in the upper right corner of this dialog, a search box.  Type in “SpecFlow” to find the SpecFlow extensions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt; In the image above, I’ve already installed it, so there is a check box.  You’ll want to click the “Download” or “Install” button that displays when it isn’t installed.&lt;/p&gt;
&lt;h2 id=&#34;Creating-a-Test-Project&#34;&gt;&lt;a href=&#34;#Creating-a-Test-Project&#34; class=&#34;headerlink&#34; title=&#34;Creating a Test Project&#34;&gt;&lt;/a&gt;Creating a Test Project&lt;/h2&gt;&lt;p&gt;Now that you’ve installed the extension, you can create a new test project.  You might expect a SpecFlow template to appear somewhere in the project list.  Sorry, that’s not what you get.  You could create one yourself if you really wanted.  To create a SpecFlow project, all you really need to do is to create a Class Library project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image3.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Adding-a-Reference&#34;&gt;&lt;a href=&#34;#Adding-a-Reference&#34; class=&#34;headerlink&#34; title=&#34;Adding a Reference&#34;&gt;&lt;/a&gt;Adding a Reference&lt;/h2&gt;&lt;p&gt;And now, this is where I always get tripped up for a minute.  You can create a new feature file, but there is a menu item you should see that will allow you to add feature steps to a class file and you won’t see that until you add a reference to SpecFlow.  To do that, you will need to go back to NuGet.  This time use the menu option, “Tools” –&amp;gt; “NuGet Package Manager” –&amp;gt; “Manage NuGet Packages for Solution…”&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image4.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once again a dialog will display.  Make sure you are in the “Online” branch on the left and type “SpecFlow” into the search area in the upper right corner of the dialog.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image5.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;I always use SpecFlow with NUnit, if you install SpecFlow.NUnit it will automatically install the SpecFlow dependencies with it.  If you prefer to use xUnit, you can install that and the SpecFlow dependencies will install automatically.&lt;/p&gt;
&lt;h2 id=&#34;Create-Your-First-Feature-File&#34;&gt;&lt;a href=&#34;#Create-Your-First-Feature-File&#34; class=&#34;headerlink&#34; title=&#34;Create Your First Feature File&#34;&gt;&lt;/a&gt;Create Your First Feature File&lt;/h2&gt;&lt;p&gt;Now that you have the environment setup, you can actually use SpecFlow.  To create your first feature file, you can right click on the project and select “Add” –&amp;gt; “New Item…” from the context menu.  Just like you would add a new file to the project any other time.  From the resulting dialog, select “SpecFlow Feature File”, give it an appropriate file name, and click the “Add” button.  When I name my SpecFlow feature files, I try to name them similar to the feature it will be testing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image6.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;The resulting feature file will have a sample of how your feature will be setup.  You will want to change this to test whatever it is you are testing.  The next thing you will want to do is to create a Step Definition file.  This is a regular C# file with a Binding attribute added.  The file that SpecFlow will generate for you will match the template they provided in the feature file.  What I want you to do next is the delete all of the methods in the class so that I can show you how to add additional methods.  I’m not going to go to the trouble of showing you the screen shots.  I figure you know how to get to it and the image above shows it listed in the “Add File” dialog.&lt;/p&gt;
&lt;p&gt;Next, go back to your feature file and right click on the provided “Given” line, you should see a menu option that says, “Generate Step Definitions”&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image7.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you click this, you’ll get a dialog like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image8.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;A couple of things you should notice.  One is the name of the class you are going to create if you click the “Generate” button.  I would advise against using the generate button.  Instead, we are going to use the “Copy methods to clipboard” method.  If you want to try to keep things segmented, you might choose to copy some of the steps to the clipboard and paste them into one file and copy others and paste them into another file.  This list will only list steps that you don’t already have definitions for, so you don’t need to worry about producing duplicate definitions.&lt;/p&gt;
&lt;p&gt;If you copy the methods onto the clipboard and paste them into the step file, you should end up with code that is functionally equivalent to what the new file template created for you.&lt;/p&gt;
&lt;h2 id=&#34;Just-A-Start&#34;&gt;&lt;a href=&#34;#Just-A-Start&#34; class=&#34;headerlink&#34; title=&#34;Just A Start&#34;&gt;&lt;/a&gt;Just A Start&lt;/h2&gt;&lt;p&gt;This is enough to get you setup, but there is more to cover, so make sure you subscribe to the mailing list to get notified when I post another article about SpecFlow.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="testing" />
        <category term="bdd" />
        <category term="specflow" />
        <updated>2015-05-21T10:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/specflow-strategy/</id>
        <title>SpecFlow Strategy</title>
        <link rel="alternate" href="http://davembush.github.com/specflow-strategy/"/>
        <content type="html">&lt;p&gt;A while ago I wrote an article &lt;a href=&#34;/what-is-specflow/&#34;&gt;explaining what SpecFlow is, and why you might want to use it&lt;/a&gt;.  I’ve been using it for several months now and I’ve recognized several patterns that have emerged in my usage that I wish I had known when I started, so I thought I’d share them with you today.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Small-Features&#34;&gt;&lt;a href=&#34;#Small-Features&#34; class=&#34;headerlink&#34; title=&#34;Small Features&#34;&gt;&lt;/a&gt;Small Features&lt;/h2&gt;&lt;p&gt;If you are used to BDD or even unit testing, this will be obvious.  But if you are new to all of this, the temptation is going to be to put all of your test in one feature.  While this works in the strictest sense of the word, and you are at least getting test in place, you will find that finding a specific test later on is going to be rather awkward.&lt;/p&gt;
&lt;p&gt;A feature file should really only have a few scenarios that are testing a particular feature in the system.  This is why, at the top of your feature file, you are stating what exactly the feature is:&lt;/p&gt;
&lt;p&gt;As an administrator&lt;br&gt;I need to be able to delete existing users&lt;br&gt;So they cannot access the system any more&lt;/p&gt;
&lt;p&gt;Which we would probably put in the “DeleteUser.feature” file. Now that we’ve specified the feature, we need one or more scenarios for this. Each scenario is going to test the various ways you might be able to delete a user.  Maybe you can check boxes and delete them all at once or you can click one button per user and delete them one at a time.  Each of those is a scenario.  So your scenarios might look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Scenario: Delete one user at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Given I have 10 users in the system&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I have logged in as an administrator&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I have navigated to the user admin page&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    When I click the first delete user button&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Then I only have 9 users in the system&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I remain on the user admin page&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Scenario: Delete one users at a time with checkbox&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Given I have 10 users in the system&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I have logged in as an administrator&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I have navigated to the user admin page&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    When I check the checkbox of the first user&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I click the delete checked users button&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Then I only have 9 users in the system&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I remain on the user admin page&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Scenario: multiple users at a time using the checkbox&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    etc ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What about sad path test?  You’ll need to determine if those are another feature or if they are somehow part of the feature you are working on.  For this test, I can’t think of a sad path test for deleting users that is generally applicable.  Most of the time, if you have something that should occur as part of deleting a user, you should be doing that as part of the delete process.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-Repeat-Yourself&#34;&gt;&lt;a href=&#34;#Don’t-Repeat-Yourself&#34; class=&#34;headerlink&#34; title=&#34;Don’t Repeat Yourself&#34;&gt;&lt;/a&gt;Don’t Repeat Yourself&lt;/h2&gt;&lt;p&gt;The next place you are likely to make a mistake as you learn how to use SpecFlow is that you’ll start out thinking of the feature file, the steps implementation for the features and any setup or teardown of the scenarios as all one unit.  As a result of this, you’ll tend to implement the steps and the setup and teardown (what SpecFlow implements as Before and After) all in one file.&lt;/p&gt;
&lt;p&gt;The problem with this is that you’ll end up with a lot of duplicate code in your tests.&lt;/p&gt;
&lt;p&gt;Now, let’s say each of your features have similar setup code you need to implement.  In the case of our user administration example that we started out with, you’ll have code you need to implement for adding a user, deleting a user, adding roles to a user, searching for a user, and probably more.&lt;/p&gt;
&lt;p&gt;For each of those, your Before code is all going to look the same.  So, what I would recommend that you do is create a separate file with your Before and After code in it, nothing more.  You will associate this file with your feature files by associating a category with it and using the category in your feature files.  Now for each feature, the same Before and After code will run.&lt;/p&gt;
&lt;p&gt;The other issue you are going to have is that you are going to have a lot of the same steps between the feature files.  However, my experience has been that there will be a lot more common features between the code I write for a particular screen than there will be for the Before and After code I write.  For example, I might right Before code for various roles&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;As a regular user&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;When I visit the user administration screen&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;I should not be able to view any user other than myself.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;That will require different setup code from “As an administrator” but the steps to implement the scenarios will probably be very similar.&lt;/p&gt;
&lt;p&gt;Therefore, you should have a step file that holds all the steps for a screen full of logic in a file separate from your Before and After logic.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="programming" />
        <category term="test driven development" />
        <category term="specflow" />
        <updated>2015-01-01T12:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/what-is-specflow%E2%80%A6/</id>
        <title>What is SpecFlow…</title>
        <link rel="alternate" href="http://davembush.github.com/what-is-specflow%E2%80%A6/"/>
        <content type="html">&lt;h2 id=&#34;…And-why-do-I-want-it&#34;&gt;&lt;a href=&#34;#…And-why-do-I-want-it&#34; class=&#34;headerlink&#34; title=&#34;…And why do I want it?&#34;&gt;&lt;/a&gt;…And why do I want it?&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/uploads/2014/06/SpecFlow.png&#34; alt=&#34;SpecFlow&#34; title=&#34;SpecFlow&#34;&gt;That’s what I kept asking myself every time I saw this product. Well, the last time I looked, something caught my eye enough that I decided to download it and take a look. I’m really glad I did it. So, let me attempt to explain what &lt;a href=&#34;//www.specflow.org/&#34;&gt;SpecFlow&lt;/a&gt; is.  First, while you can get SpecFlow+ Runner to run your test, this isn’t a completely new testing platform. Instead, it is a testing platform that works with whatever testing platform you are using to test your .NET code. So, it works with NUnit, MSTest, xUnit and MbUnit. This is good for my situation because any test I write with SpecFlow will continue to work with the tools I already have in place. Including my current test runners (&lt;a href=&#34;//www.jetbrains.com/resharper/&#34;&gt;ReSharper&lt;/a&gt;) and my Continuous Integration system (&lt;a href=&#34;//www.jetbrains.com/teamcity/&#34;&gt;TeamCity&lt;/a&gt;). I wasn’t interested in adopting a platform that wouldn’t work with these two platforms.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Where-I-got-Confused&#34;&gt;&lt;a href=&#34;#Where-I-got-Confused&#34; class=&#34;headerlink&#34; title=&#34;Where I got Confused&#34;&gt;&lt;/a&gt;Where I got Confused&lt;/h2&gt;&lt;p&gt;Now the part that kept me from looking at this framework for such a long time was the &lt;a href=&#34;//www.specflow.org/&#34;&gt;home page&lt;/a&gt;. If you go there, you will see the “Three easy steps.” 1) Specify, 2) Automate, 3) enjoy. Well, at first glance it looked like was going to have to write my test in English and then write my test in code and then I could enjoy. Why would I want to do that? So, the part they forgot to mention is that once you’ve specified your test, the Visual Studio plugin will generate your test code for you. For NUnit it actually writes the NUnit test for you. The code you do have to write is the code that translates the individual steps. But even that code gets stubbed out for you. Once you have enough of those stubbed out, to write a test, you just write the test in English, save the file, and run the test. Now that I finally understand this, I like most of what SpecFlow does. But there are a few things I wish it did differently.&lt;/p&gt;
&lt;h2 id=&#34;What-I-like&#34;&gt;&lt;a href=&#34;#What-I-like&#34; class=&#34;headerlink&#34; title=&#34;What I like:&#34;&gt;&lt;/a&gt;What I like:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;It puts my test in a Given, When, Then structure like I mentioned a few weeks ago. 2) The class files it generates are all partial classes. This allowed me to keep my inheritance structure that I’m dependent on for my current NUnit testing framework. And allowed me to work around one of the shortcomings I’ve found. 3) The methods are all virtual, again, allowing for extension and flexibility. 4) Intellisense is enabled so you can see similar sentences you’ve already used as you are creating new test. 5) You can create tables of parameters for test scenarios, similar to how you can pass multiple parameters to an NUnit test with the TestCase attribute or the TestCaseSource attribute. 6) To write the supporting CSharp, code I didn’t have to learn anything new. 7) I can give the English language, none code, document to the business user and they should be able to read the test well enough to tell me if the test is an accurate reflection of what they want the system to do.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;What-I-don’t-like&#34;&gt;&lt;a href=&#34;#What-I-don’t-like&#34; class=&#34;headerlink&#34; title=&#34;What I don’t like:&#34;&gt;&lt;/a&gt;What I don’t like:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;I’ve become pretty dependent on the NUnit TestFixture attribute that allows me to pass parameters to the entire test. I use this to control the testing of multiple browsers. But, I’ve recently figured out a way to run all of my browsers simultaneously rather than sequentially so I won’t need this feature in the pretty near future. Once I’ve got that working, you can be sure I’ll share it here. So, don’t forget to subscribe to this blog if you haven’t already.&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="tdd" />
        <category term="testing" />
        <category term="nunit" />
        <category term="specflow" />
        <category term="mstest" />
        <updated>2014-06-12T17:30:00.000Z</updated>
    </entry>
</feed>
