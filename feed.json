{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/use-typescript-class-instead-of-interface-or-type/",
            "url": "http://davembush.github.com/use-typescript-class-instead-of-interface-or-type/",
            "title": "Use TypeScript Class instead of Interface or Type",
            "date_published": "2025-04-02T17:04:48.000Z",
            "content_html": "<p>Since TypeScript introduced Interfaces and Types, we’ve been getting lazy. It is so much easier to create an object that obeys an interface than it is to create a Class that obeys the same interface. But what have we lost in the process?</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Checking-Type-at-Runtime\"><a href=\"#Checking-Type-at-Runtime\" class=\"headerlink\" title=\"Checking Type at Runtime\"></a>Checking Type at Runtime</h2><p>In a typical application, if we want a strongly typed object, we create an interface or a type, define our object, and then assign an object to a variable with that type.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">user</span>: <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>All goes well until we need to check to see if the object is of type User. To do that, we have to test to see if the object has the properties we expect and that those properties have the types we expect.</p>\n<p>If we had created a class instead, we could have used the <code>instanceof</code> operator to check if the object is of type User.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>, <span class=\"keyword\">public</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">1</span>, <span class=\"string\">&#x27;John Doe&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> isUser = user <span class=\"keyword\">instanceof</span> <span class=\"title class_\">User</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>This is a much cleaner solution. We can also add methods to the class that operate on the properties of the class, which is not possible with an interface or type.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>, <span class=\"keyword\">public</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Silly example</span></span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"But-What-About-Flexibility\"><a href=\"#But-What-About-Flexibility\" class=\"headerlink\" title=\"But What About Flexibility?\"></a>But What About Flexibility?</h2><p>But we’ve lost the flexibility of using an anonymous object to create the User. We can fix this by allowing the constructor to accept an object that has the same properties as the User class.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"attr\">user</span>: <span class=\"title class_\">User</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = user.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = user.<span class=\"property\">name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(&#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>In the example above, we’ve assigned the properties directly. But you could also use <code>Object.assign()</code> to copy the properties from the parameter into the class.</p>\n<p>You might think that <code>Object.assign()</code> is the same as using the spread operator. But it is not.</p>\n<p>If both objects in the spread or <code>Object.assign()</code> are objects without a class prototype, then yes, the change will be the same.</p>\n<p>But if the target object is a class, then only the properties in the class will be moved over from the source object.</p>\n<p>So, in code:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"attr\">user</span>: <span class=\"title class_\">User</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"variable language_\">this</span>, user);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>, <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;bar&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>What ends up in the new object is only <code>id</code> and <code>name</code>. The <code>foo</code> property is ignored. This is not the case with the spread operator.</p>\n<p>Well actually, you can’t even use the spread operator in the constructor because it is not a valid syntax so we’ll have to do this outside the constructor.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"attr\">user</span>: <span class=\"title class_\">User</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"variable language_\">this</span>, user);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// then later on...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user2 = &#123; ...user, <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;bar&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>What we’ve done here is create a new object, <code>user2</code>, that has the same properties as <code>user</code> but with a new property, <code>foo</code>. This is not possible with the class constructor.</p>\n<p>Not only that, but we’ve created an object literal based on the <code>User</code> class, but it is no longer a <code>User</code> object. It is just an object with the same properties as <code>User</code>. This means that if we try to use <code>instanceof</code> to check if <code>user2</code> is a <code>User</code>, it will return false.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## <span class=\"title class_\">Dev</span> <span class=\"title class_\">Tools</span> <span class=\"title class_\">Impact</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">An</span> additional reason <span class=\"keyword\">for</span> <span class=\"keyword\">using</span> a <span class=\"keyword\">class</span> <span class=\"title class_\">instead</span> <span class=\"keyword\">of</span> an <span class=\"keyword\">interface</span> or a type is that the type information not only sticks around so we can use instanceof checks. <span class=\"title class_\">But</span> it sticks around so we can see the class name in our debug tools. <span class=\"title class_\">This</span> becomes important when you are looking at a stack trace that happened during runtime that you do not have map files available for or when you are looking at flame charts or you are tracking down memory leaks.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">When</span> you use an <span class=\"keyword\">interface</span> or a type, the type information is erased at runtime. <span class=\"title class_\">This</span> means that if you have a stack trace that shows an <span class=\"built_in\">object</span> of type <span class=\"title class_\">User</span>, you will not be able to see the class name in the stack trace. <span class=\"title class_\">This</span> can make it difficult to track down bugs and performance issues.</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"title class_\">Performance</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">And</span> if you care about performance, there is one final reason you should want to use <span class=\"title class_\">Classes</span> instead of <span class=\"title class_\">Interfaces</span> or <span class=\"title class_\">Types</span>.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">When</span> you use an <span class=\"keyword\">interface</span> or type, it does not ensure that they fields stay in the same position as you copy it around.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">What</span> do I mean by this? <span class=\"title class_\">And</span> why do we care?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Let</span>&#x27;s use the same <span class=\"built_in\">object</span> example we&#x27;ve been working with but using interfaces again.</span><br><span class=\"line\"></span><br><span class=\"line\">```typescript</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">user</span>: <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">user2</span>: <span class=\"title class_\">User</span> = &#123; ...user, <span class=\"attr\">id</span>: <span class=\"number\">2</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>We do this all the time, right? But what we’ve done is created one object, user, that looks like:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And another object, user2, that looks like:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>That spread operator changed the order of our fields. Now, for applications that are small where we don’t care all that much about performance, this doesn’t matter. But, under the hood, the V8 engine is going to create a separate hidden class for each of these objects even though they are essentially the same type. The more fields you have in an object, the more hidden classes you are likely to create. This eats up memory as well as causing the V8 engine to have to do more work to optimize the code.</p>\n<p>Now, above, I mentioned that we can use an anonymous object to initialize a class. To be clear, this is a concession to the fact that creating a new object with a lot of members is a pain and this makes it easier. You still have the same underlying issue that every variant of the object will create a new hidden class in V8. But, in most cases, you’ll probably use the same shape, or at least a finite number of shapes, each time you create a new object and you are far less likely to use the spread operator on that anonymous object. You will need to decide which is more important to you: the performance of your application or the ease of creating new objects.</p>\n<p>One of the next optimizations I’ll be making in my code is to prefer Classes over Interfaces and Types. It is a trivial change to make and has huge benefits. I would encourage you to do the same.</p>\n<h2 id=\"What-about-Interfaces-and-Types\"><a href=\"#What-about-Interfaces-and-Types\" class=\"headerlink\" title=\"What about Interfaces and Types\"></a>What about Interfaces and Types</h2><p>Now, I’m not saying you should never use interfaces or types.  I’m saying you should not use them to define the shape of your objects. If you have other uses for them, such as using a type to define union types, then by all means, use them. But for defining the shape of your objects, you should be using classes.</p>\n",
            "tags": [
                "TypeScript",
                "Performance"
            ]
        },
        {
            "id": "http://davembush.github.com/optimizing-angular-for-speed/",
            "url": "http://davembush.github.com/optimizing-angular-for-speed/",
            "title": "Optimizing Angular For Speed",
            "date_published": "2025-01-12T13:34:41.000Z",
            "content_html": "<p>I was recently asked how I would optimize an Angular site for speed. Interestingly, I’ve never written about this explicitly even though I’ve done a lot of work related to this issue.</p>\n<p>For the purposes of this article, I’m going to assume you have already implemented most of the things that Angular gives you “for free.” For example, we won’t discuss “Tree Shaking” or “AOT.” Those are given.</p>\n<p>Here are my 30 or so tips on how to optimize an Angular application for speed.</p>\n<span id=\"more\"></span>\n<h2 id=\"Remove-Code\"><a href=\"#Remove-Code\" class=\"headerlink\" title=\"Remove Code\"></a>Remove Code</h2><p>Before we get started looking at ways to improve the performance our our application, the first thing we should do is look at ways to eliminate code. The fastest code in the world is the code that doesn’t run. In the case of JavaScript, generally, this also means code that doesn’t load. So, always evaluate if the code you are adding is necessary.</p>\n<p>To that end, you should also evaluate your code for duplicate code. Not just code within the code you write, but code you might be importing from other libraries that are unintentionally duplicating each other. Could you remove a library that is redundant?</p>\n<p>Be ruthless here because the more code you load, the more code the JavaScript engine has to parse, compile, and ultimately try to optimize.</p>\n<h2 id=\"Change-Detection\"><a href=\"#Change-Detection\" class=\"headerlink\" title=\"Change Detection\"></a>Change Detection</h2><h3 id=\"OnPush-Notification\"><a href=\"#OnPush-Notification\" class=\"headerlink\" title=\"OnPush Notification\"></a>OnPush Notification</h3><p>Much has been written about how Angular Change Detection works, so I’m not going to go into much detail about this other than reiterate the basics.</p>\n<p>Without OnPush notification, angular will check the component to see if anything changes whenever an event occurs. This means something as simple as a mouse move will cause change detection evaluation.</p>\n<p>With OnPush, change detection on a component will happen only if one of the component’s properties (field marked with @Input() attribute) has changed or if you’ve explicitly told Angular that a change has occurred.</p>\n<p>In my experience, this isn’t going to generate enough of a performance difference that you can measure in seconds. But it will make a difference overall and is generally a quick win. So, start here.</p>\n<p>One quick way to ensure all your future components use OnPush when using the CLI to generate components is to ensure you add the OnPush configuration to your Angular.json file.</p>\n<p>You can find a good article about this <a href=\"https://indepth.dev/overriding-angular-schematics/\">here</a>.</p>\n<h3 id=\"Small-Components\"><a href=\"#Small-Components\" class=\"headerlink\" title=\"Small Components\"></a>Small Components</h3><p>OnPush notification is only going to be useful if your components are small. Remember that once change detection has determined the component is dirty and needs to be re-rendered, the WHOLE component will be re-calculated even though there is no Virtual DOM diffing in IVY.</p>\n<h3 id=\"Run-Outside-Zones\"><a href=\"#Run-Outside-Zones\" class=\"headerlink\" title=\"Run Outside Zones\"></a>Run Outside Zones</h3><p>It helps to understand how change detection works in Angular to optimize Angular change detection. Part of that equation is that it hooks into the fired events. This is how, for example, Angular knows it should update your screen when a click event occurs or when data is returned from an HttpClient request.</p>\n<p>But sometimes, we may trigger that event in our code when we know that change detection is unnecessary.</p>\n<p>For example, I have code that runs every 20 seconds to see if we should automatically log the user out. To keep this from running the change detection logic, I run this outside of the Zones logic.</p>\n<p>The specific API you are looking for, is <code>Zones.runOutsideAngular()</code></p>\n<p>Another place to look out for is the time-based RxJS operators such as <code>debounceTime()</code>, <code>throttleTime()</code>, etc. These operators will trigger change detection every time they fire. If you are using them in your code, consider running them outside of the Zones logic or use unpatched versions of the operators.</p>\n<h3 id=\"Turn-Off-Zones\"><a href=\"#Turn-Off-Zones\" class=\"headerlink\" title=\"Turn Off Zones\"></a>Turn Off Zones</h3><p>Change detection might get triggered in multiple ways. And, in fact, your app probably doesn’t need all of them.</p>\n<p>You can turn things off using <code>__Zone_ignore_on_properties</code>.</p>\n<p>There is more information on this <a href=\"https://github.com/angular/zone.js/blob/master/STANDARD-APIS.md\">here</a>.</p>\n<p>That being said, I’ve done some performance testing and it turns out that <a href=\"../ngzones-performance-impact/\">Change Detection is not the first place to look if your screen is rendering slowly</a>.</p>\n<h3 id=\"Use-Pipes\"><a href=\"#Use-Pipes\" class=\"headerlink\" title=\"Use Pipes\"></a>Use Pipes</h3><p>This tip is only really valuable in the cases where the Functional programming’s pure functions is relevant.</p>\n<p>The idea behind pure functions, at least as it applies to pipes, is that a pure function will always return the same value when given the same parameters. So, for example, the function <code>Add(a, b)</code> will always return 4 given the parameters 2 and 2.</p>\n<p>Why recompute the value when you give it the same parameters as the previous time you called it?</p>\n<p>Using memoization, you can further take advantage of this optimization on functions that take extra time. This is what Angular Pipes do for you under the hood. But by implementing it yourself, you can cache more than the last value. I’m talking about the practice of holding onto a computed value and using the parameters as a key to look up the return value. Thus avoiding the computation completely.</p>\n<p>Use this optimization tip intelligently, though. Sometimes, values might be “the same,” but the content is different. I’m thinking about times when you would mutate the contents of an object. Say an array you added a value to instead of creating a new array. The array object pointer is still the same, so your pure function will not recompute the return value because the pointer didn’t change.</p>\n<p>If OnPush isn’t giving you all the optimization that you are looking for, creating a pure Pipe is the next step along the same lines.</p>\n<p>However, this is one place where I’d spend the extra time to verify that my “optimization” isn’t making the performance worse.</p>\n<h3 id=\"NgRX\"><a href=\"#NgRX\" class=\"headerlink\" title=\"NgRX\"></a>NgRX</h3><p>Use NgRX to ONLY manage your state. Reducers should only update state. Effects should only retrieve data from the server and dispatch one and only one action.</p>\n<p>For futher optimization, consider calling the service you’d normally call from your effect directly instead of dispatching through the effect.</p>\n<p>See my article about <a href=\"/what-i-learned-writing-smartngrx/\">What I learned writing SmartNgRX</a> and <a href=\"/ngrx-performance-improvements/\">NgRx Performance Improvements</a> for more information on this topic.</p>\n<h3 id=\"Use-NgRX-Selectors\"><a href=\"#Use-NgRX-Selectors\" class=\"headerlink\" title=\"Use NgRX Selectors\"></a>Use NgRX Selectors</h3><p>Many people aren’t aware that NgRX has a Selector mechanism allowing memoization. When you call the Selector,  if nothing it depends on has changed, you get back the same answer you got the previous time you executed the method without having to run all the code that gave you the answer the first time.</p>\n<p>It also looks a lot cleaner than the <code>() =&gt; state.subState</code> mechanism we started out with.</p>\n<p>Note that parameterized selectors can’t take advantage of this memoization unless you roll your own.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> selectMemoizedThing = <span class=\"title function_\">createSelector</span>(...);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">selectCantBeMemoized</span> = (<span class=\"params\">param</span>) =&gt;</span><br><span class=\"line\">  <span class=\"title function_\">createSelector</span>(... uses param <span class=\"keyword\">in</span> here...)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Don’t-Bind-to-Computed-Values\"><a href=\"#Don’t-Bind-to-Computed-Values\" class=\"headerlink\" title=\"Don’t Bind to Computed Values\"></a>Don’t Bind to Computed Values</h3><p>If your value is computed, Angular can’t easily determine if it has changed unless it calculates it.</p>\n<p>There are three ways to solve this issue.</p>\n<p>The first and most popular is to use a pipe, as described above. But it is the least desirable because it still forces the change detector to do more work than necessary.</p>\n<p>The second way to achieve this goal is by assigning a member field the computed value during the component’s <code>ngOnChanges</code> event. Do this when the computed value uses values all internal to the component.</p>\n<p>Third, you can perform ALL the calculations in a Selector so that the data you need is already available and is easy to detect by the time you are binding.</p>\n<p>Finally, if you can, do the computation on the server so it isn’t even an issue on the client.</p>\n<p>For more information on this topic see my article <a href=\"../how-to-avoid-binding-to-computed-values-in-angular/\">How to Avoid Binding to Computed Values in Angular</a></p>\n<h3 id=\"NgRX-Features\"><a href=\"#NgRX-Features\" class=\"headerlink\" title=\"NgRX Features\"></a>NgRX Features</h3><p>And while we are on the subject of NgRX, instead of creating one monster state to rule them all in the AppModule, use the Features to only instantiate the store reducers, effects, etc., as you need them.</p>\n<h3 id=\"Use-RxJS-distinct\"><a href=\"#Use-RxJS-distinct\" class=\"headerlink\" title=\"Use RxJS distinct()\"></a>Use RxJS distinct()</h3><p>Did you know that your component is probably re-rendering more times than needed? This is because <code>@Input()</code> values will mark the component every time it thinks it might have received a new value. You can prevent this by using <code>distinctUntilChanged()</code> on the Observable.</p>\n<h3 id=\"Use-RxJX-replay\"><a href=\"#Use-RxJX-replay\" class=\"headerlink\" title=\"Use RxJX replay()\"></a>Use RxJX replay()</h3><p>Another trick you can use is to use <code>replay()</code> on the Observable. There are various ways to configure this, but the advantage is that this is another way to prevent calculations you don’t need. If the value isn’t going to change as you render the content multiple times on the screen, you only need to compute once and allow <code>replay()</code> to memoize the return.</p>\n<p>Be careful with this trick though, because using it incorrectly can cause memory leaks.</p>\n<h3 id=\"Use-RxJS-asapScheduler\"><a href=\"#Use-RxJS-asapScheduler\" class=\"headerlink\" title=\"Use RxJS asapScheduler\"></a>Use RxJS asapScheduler</h3><p>There are times when you need to schedule a task to run as soon as possible but asynchronously.</p>\n<p>You might think the best way to do this is by using interval(0) or some other mechanism.</p>\n<p>Maybe you want to use debounceTime(0) or throttleTime(0) to prevent the task from running too often.</p>\n<p>Did you know that RxJS has another scheduler, called the asapScheduler that allows you to run things faster than the default scheduler?</p>\n<p>The default scheduler uses the “macro queue”. This is what setTimeout() uses. The asapScheduler uses the “micro queue” which is what Promise.resolve uses.</p>\n<p>The difference is that if you schedule something with setTimeout(), and then run something with Promise.resolve(), the Promise.resolve() will run first. Make those asynchronous calls seems a bit more synchronous.</p>\n<h3 id=\"Upgrade-to-IVY\"><a href=\"#Upgrade-to-IVY\" class=\"headerlink\" title=\"Upgrade to IVY\"></a>Upgrade to IVY</h3><p>In general, I suggest that you always keep your Angular version up to date.</p>\n<p>While we are on the topic of upgrades, in an enterprise environment, I suggest never to fall more than 2 major versions behind and never use the current major version. I keep my team using the latest version of the major version before the current version. This keeps us relatively current but far enough behind that someone else has figured out all the quirks of the version we are using.</p>\n<p>At a minimum, ensure you use a version that uses the IVY rendering engine to take advantage of the performance gains it introduced.</p>\n<h2 id=\"Be-smart-about-HTML-and-CSS\"><a href=\"#Be-smart-about-HTML-and-CSS\" class=\"headerlink\" title=\"Be smart about HTML and CSS\"></a>Be smart about HTML and CSS</h2><h3 id=\"Style-the-Host-of-your-Components\"><a href=\"#Style-the-Host-of-your-Components\" class=\"headerlink\" title=\"Style the Host of your Components\"></a>Style the Host of your Components</h3><p>Another place you can eak out a bit of performance without a lot of work is by eliminating the wrapping DIV element from your components.</p>\n<p>Most Angular developers are unaware that when the HTML template is rendered, the tag you use to render the component is also rendered.  So if you have a component who’s tag is &lt;foo&gt; and inside that component you included a DIV element that wraps all your control’s content, what actually renders on the screen is</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    html for component here</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Now, it is true that the &lt;foo&gt; will get ignored by the browser. But it still has to evaluate it and determine that it shouldn’t do anything with it and it is extra context that has to be packaged by webpack.</p>\n<p>By styling &lt;foo&gt; to look like a DIV element by using</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:host</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  ... whatever other styling you</span><br><span class=\"line\">  might have given your <span class=\"selector-tag\">div</span> tag here</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>we can eliminate the inner DIV from our component and gain a bit of performance without going to a lot of trouble. The amount of performance gain you will see will depends on how many child components are being displayed at any one time.</p>\n<h3 id=\"Don’t-overuse-SASS-SCSS\"><a href=\"#Don’t-overuse-SASS-SCSS\" class=\"headerlink\" title=\"Don’t overuse SASS&#x2F;SCSS\"></a>Don’t overuse SASS&#x2F;SCSS</h3><p>My general advice is to use CSS for your application and SASS for your component library or theme. Although, even in your component library, most of what you need to do can be done easily with CSS.</p>\n<p>I admit. When LESS and SASS first came out, I saw all the advantages. Since then, I’ve been persuaded by three events.</p>\n<p>First, if you write your Angular components small enough and use view encapsulation, you shouldn’t need any of the features that SASS would provide.</p>\n<p>Second, I’ve seen SASS abused more often than I’ve seen it used well. One project I worked on had 200 character class names because one of the developers was using &amp; to concatenate the class names. The template code was cluttered with these long class names, making it difficult to read. Please! Don’t do this to your future self!</p>\n<p>Third, CSS has grown up. CSS variables now do most of what we may have needed to use SASS for. And, if you can keep your font and color information strictly in a theme.css file, you should never need to access them from your application components.</p>\n<p>Simple CSS is performant CSS.</p>\n<h3 id=\"ng-content-Bad-Practices\"><a href=\"#ng-content-Bad-Practices\" class=\"headerlink\" title=\"ng-content Bad Practices\"></a>ng-content Bad Practices</h3><p>I’ve only recently realized that some of you are doing some pretty strange things with <code>ng-content</code>, and then you wonder why your application is slow.</p>\n<p>As a refresher, &#96;ng-content&#96;&#96; is what you use when you want to use content projection to pass content into a component. For example, if you wanted to pass in a list of items to a component, you might do something like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let item of items&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Now, the first thing you should ask yourself here is, “Do I need to use content projection here?”</p>\n<p>We’ve found a significant performance penalty for using content projection. So, if you can avoid it, you should.</p>\n<p>Notice, I said avoid. Not eliminate. There are some valid reasons for using content projections. For example, low-level components often need to use content projection because they could be a container for displaying anything.</p>\n<p>But, if you are using content projection to display exactly the same content or choice of content every time, consider eliminating the content projection and just hard-coding the content into the component. This will make the code easier to understand, and it will make the content render faster.</p>\n<p>The other crazy implementation I’ve seen recently is using ngIf inside ng-content.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;foobar&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>It may not be obvious, but you should evaluate your DOM when the page is rendered with foobar equal to false. What you’ll see may surprise you. Inside of ng-content will be all the elements that are projected into the ng-content DOM element, but they will all be hidden.</p>\n<p>So what? So, they will all have to be evaluated by the browser even though they aren’t visible. This is a waste of resources and time rendering.</p>\n<h3 id=\"Data-Binding-Issues\"><a href=\"#Data-Binding-Issues\" class=\"headerlink\" title=\"Data Binding Issues\"></a>Data Binding Issues</h3><h4 id=\"innerHTML\"><a href=\"#innerHTML\" class=\"headerlink\" title=\"innerHTML\"></a>innerHTML</h4><p>Did you know that binding data to <code>innerHTML</code> is slower than binding to the interpolation markers within the element?</p>\n<p>Often, we use</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">innerHTML</span>]=<span class=\"string\">&quot;someValue&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>instead of</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;someValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>to get around string sanitation issues (which is another problem) but then we get someone on our team who is just learning Angular and they do this by default.</p>\n<p>In both cases, however, you’ll find if you measure the performance that the interpolation markers are significantly faster than the innerHTML binding.</p>\n<h4 id=\"Avoid-Binding-to-Functions\"><a href=\"#Avoid-Binding-to-Functions\" class=\"headerlink\" title=\"Avoid Binding to Functions\"></a>Avoid Binding to Functions</h4><p>We mentioned this above but, another place where you can eak out a bit of performance is by avoiding binding to functions. If you do, you can use a pipe to memoize the return value of the function. But, using a pipe is the lazy man’s way of optimizing against the function issue.</p>\n<p>Why? Because you are still have the overhead of calling a function every time change detection runs, you just aren’t doing the calculation every time. It is better than doing the calculation but it is worse than binding to a field where the change detector can see if anything changed before it does anything else.</p>\n<p>In the interviews we run, we have a section that covers this issue. Code is clearly calling a function inside the template.  We are happy with the “use a pipe” answer. But I’m even more impressed if someone says something like, “This should all be done on the server, or if it can’t be done on the server, it should be done when we retrieve the data from the server.”</p>\n<p>But this can’t always be done. So, if you are going to bind to a function, ask yourself, “how far down the stack can I move this functionality?”</p>\n<p>In order of possibilities, I’d suggest:</p>\n<ul>\n<li>Do the calculation in the pipe if nothing else is possible</li>\n<li>Do the calculation in the component’s TS file when the @Input() value changes</li>\n<li>Do the calculation in a Selector that the component is looking at</li>\n<li>Do the calculation right after you retrieve the data from the server</li>\n<li>Do the calculation on the server</li>\n</ul>\n<h3 id=\"HostBinding\"><a href=\"#HostBinding\" class=\"headerlink\" title=\"HostBinding()\"></a>HostBinding()</h3><p>Related to binding to functions, keep in mind that @HostBinding is databinding.  If you @HostBinding is using a function, it has the same issues as binding to a function in the template.</p>\n<h3 id=\"Dynamic-CSS-Classes\"><a href=\"#Dynamic-CSS-Classes\" class=\"headerlink\" title=\"Dynamic CSS Classes\"></a>Dynamic CSS Classes</h3><p>There are multiple ways of dynamically adding classes to an element. Each one of them, essentially do the same thing. But worse, they all do them individually. So, if you end up using all three methods in your code, you are going to make at least 3 calls to the DOM to add or remove the class.</p>\n<p>Currently, using <code>ngClass</code> adds and removes each class in it individually. You’d think it would be optimized to add them more efficiently but currently (2023-11-11) they do not.</p>\n<p>I’m hoping this gets fixed by the next major version of Angular.</p>\n<h3 id=\"Dynamic-Styles\"><a href=\"#Dynamic-Styles\" class=\"headerlink\" title=\"Dynamic Styles\"></a>Dynamic Styles</h3><p>You want to avoid adding styles to your elements. Period. This is a performance issue because it deoptimizes the browsers ability to optimize style recalculations. Instead, consider dynamically creating a class and adding the class to the element. If you code it correctly, everything else should be able to use that same class for the same dynamic styling.</p>\n<h3 id=\"Avoid-The-Universal-Selector\"><a href=\"#Avoid-The-Universal-Selector\" class=\"headerlink\" title=\"Avoid The Universal Selector\"></a>Avoid The Universal Selector</h3><p>Adding the universal selector (*) to your CSS, especially to the end of a selector, increases the time to recompute the styles. Just avoid this.</p>\n<h3 id=\"Avoid-unqualified-pseudo-classes-and-psuedo-elements\"><a href=\"#Avoid-unqualified-pseudo-classes-and-psuedo-elements\" class=\"headerlink\" title=\"Avoid unqualified pseudo-classes and psuedo-elements\"></a>Avoid unqualified pseudo-classes and psuedo-elements</h3><p>Doing so is practically the same as saying <code>*::psuedo</code> which has the same performance issues as using the raw universal selector.</p>\n<h3 id=\"CSS-Classes-always-win\"><a href=\"#CSS-Classes-always-win\" class=\"headerlink\" title=\"CSS Classes always win\"></a>CSS Classes always win</h3><p>Related to the styling issue above, all your styling should be done using CSS classes. This is because using classes are practically free compared to other styling methods.</p>\n<p>Related to this, Angular’s method of implementing emulated view encapsulation is to scope the host element to a random element. Attributes are known to be slower than classes with regard to style recalculations.</p>\n<p>There is a patch for this issue that you can apply to your project. It is available <a href=\"https://github.com/laurentgoudet/angular-ie11-bug/commit/13896b53fc61c424ff5c6f98c58cc9ccc0f7d502\">here</a>. While originally written to address an issue with IE11 in 2019, the problem still exist, to a lesser extent, in modern browsers. That is modern browsers process attributes significantly faster than IE11 did but they are still enough slower that using classes instead of attributes will improve your performance.</p>\n<p>If you want to apply this patch to your project, you can use either <code>pnpm</code>‘s <code>patch</code> command or <code>yarn</code>‘s <code>patch-package</code> command to apply the patch once you’ve made the changes to the code.</p>\n<h3 id=\"SVG-references-vs-SVG-inlining\"><a href=\"#SVG-references-vs-SVG-inlining\" class=\"headerlink\" title=\"SVG references vs SVG inlining\"></a>SVG references vs SVG inlining</h3><p>Another similar, hidden performance issue is the use of SVG Inlining. When you inject an SVG image into the page using inlining, the browser must evaluate the DOM elements. If you inline the same SVG image multiple times, the browser has to evaluate the DOM elements multiple times.</p>\n<p>The cure is to inline the SVG images once, and then, when you need to display the image, you can reference it using the SVG reference mechanism. There are multiple ways you might do this. One is to load them up front using a sprite and inject the sprite into the DOM. Another would be to inject the SVG image into the DOM using JavaScript the first time it is used and then reference it from that point forward.</p>\n<h3 id=\"Measure-your-CSS\"><a href=\"#Measure-your-CSS\" class=\"headerlink\" title=\"Measure your CSS\"></a>Measure your CSS</h3><p>The most overlooked area of performance I know of is measuring CSS. I can’t go into a lot of detail about this here because it would take far too much time to explain (and read about) but there are good articles on the internet that discuss measuring browser performance using flame charts and other mechanisms that are part of your browser’s developer tools.</p>\n<h2 id=\"Compile-for-Production\"><a href=\"#Compile-for-Production\" class=\"headerlink\" title=\"Compile for Production\"></a>Compile for Production</h2><p>Another place where we shouldn’t have to mention that it is even an option is compiling for production. </p>\n<p>In one product I worked on, I discovered we were deploying code using the development environment instead of the production environment. I only discovered this because we were getting the change detection after change warning in production. That’s the most notable difference. But this check happens with every change detection cycle and further slows down the code.</p>\n<h2 id=\"Cache-your-code-on-the-browser\"><a href=\"#Cache-your-code-on-the-browser\" class=\"headerlink\" title=\"Cache your code on the browser\"></a>Cache your code on the browser</h2><p>If you build your application with an option that attaches a hash code to the file name, you can cache your javascript code on the browser so that the next time that browser tries to access the code, it will load it from the cache.</p>\n<p>Do not cache your index.html file, as you need to make sure that file always gets downloaded.</p>\n<p>Specifically, the options you want to implement on your server for your static files are:</p>\n<ul>\n<li>immutable</li>\n<li>max-age 365</li>\n</ul>\n<p>This will prevent the browser from even checking the server for new code.</p>\n<h2 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h2><p>Similarly, putting your files closer to the people retrieving them will improve your performance around “time to first render.”</p>\n<h2 id=\"Perception-Beats-Reality\"><a href=\"#Perception-Beats-Reality\" class=\"headerlink\" title=\"Perception Beats Reality\"></a>Perception Beats Reality</h2><p>One place that gets overlooked when discussing performance is the “time to first render.”</p>\n<p>We recently ran into a situation where the code took so long to load that the client didn’t even see the spinner we had put in place to indicate we were loading data.</p>\n<p>To fix this, we added spinner code directly into our html file. It takes slightly longer to load the index.html file but displays more quickly than if we waited for our javascript to load.</p>\n<h2 id=\"TrackBy-X-in-ngFor\"><a href=\"#TrackBy-X-in-ngFor\" class=\"headerlink\" title=\"TrackBy X in ngFor\"></a>TrackBy X in ngFor</h2><p>Another way to eak out more performance is by implementing the <code>trackBy</code> property in your <code>ngFor</code> loops.</p>\n<p>This is particularly useful when displaying a list that updates multiple times from the server. Because it is a brand-new object, every refresh will update the whole list.</p>\n<p>By using trackBy, you can tell Angular only to update the elements in the list that have changed by whatever you specify in TrackBy.</p>\n<h2 id=\"Lazy-Loading\"><a href=\"#Lazy-Loading\" class=\"headerlink\" title=\"Lazy Loading\"></a>Lazy Loading</h2><h3 id=\"Lazy-Load-Routes\"><a href=\"#Lazy-Load-Routes\" class=\"headerlink\" title=\"Lazy Load Routes\"></a>Lazy Load Routes</h3><p>Most applications have multiple routes that they access. But even if yours doesn’t, you should set your code up to use Lazy Loading for three reasons.</p>\n<p>First, small apps grow up. Eventually, you will have multiple routes. If your app is so small that it doesn’t, implementing Lazy Loading of routes isn’t going to hurt anything.</p>\n<p>Second, implementing Lazy Loading will break your code down further into multiple files. Most of the code in those files will never change, so once they are loaded and cached as instructed above, the only code that will ever need to be downloaded is code in your route when it changes.</p>\n<p>Third, having more files to download could help in the initial load of your application, as the client now has more opportunities to download the files in parallel. Measure this! I’ve seen this overused to the point of causing worse performance!</p>\n<h3 id=\"Pre-load-Lazy-Loaded-Routes\"><a href=\"#Pre-load-Lazy-Loaded-Routes\" class=\"headerlink\" title=\"Pre-load Lazy Loaded Routes\"></a>Pre-load Lazy Loaded Routes</h3><p>Once you’ve started your app, you should load all the other routes in the background so your customer doesn’t have to wait for the next page to render.</p>\n<p>This is even more important when your application is on a mobile device that doesn’t have an Internet connection at times.</p>\n<p>You can also be selective about which routes you pre-load.</p>\n<h3 id=\"Lazy-Loading-Resources\"><a href=\"#Lazy-Loading-Resources\" class=\"headerlink\" title=\"Lazy Loading Resources\"></a>Lazy Loading Resources</h3><p>Angular does most of this for you. Especially as it concerns CSS, but if your application has a lot of images, you should consider lazy loading those images.</p>\n<h3 id=\"Virtual-Scrolling\"><a href=\"#Virtual-Scrolling\" class=\"headerlink\" title=\"Virtual Scrolling\"></a>Virtual Scrolling</h3><p>There are multiple implementations of this. But the idea is only to render what the user can see as the user scrolls rather than rendering everything into the DOM and then letting the browser to the scrolling.</p>\n<p>I reduced the rendering time from 8 seconds to 1 second on one mega app I worked on by implementing this concept.</p>\n<h2 id=\"Good-Architecture\"><a href=\"#Good-Architecture\" class=\"headerlink\" title=\"Good Architecture\"></a>Good Architecture</h2><h3 id=\"General-Patterns-and-Practices\"><a href=\"#General-Patterns-and-Practices\" class=\"headerlink\" title=\"General Patterns and Practices\"></a>General Patterns and Practices</h3><p>I’ve worked on optimizing an application where one of the first things we did was to straighten out the basic architecture.<br>I often tell people, “If you had any idea how software gets created, you’d be amazed that anything works as well as it does.” This application was no different.</p>\n<p>Someone had wanted to implement a feature in the next version of NgRX, so they copied code from the next version into the version we were using.</p>\n<p>It sounds harmless. But the result was the NgRX change detection got thrown into a loop that took thousands of cycles to resolve instead of just one or two. This, in turn, slowed the rendering time down on the application to a point where just switching routes took multiple seconds. On the order of 5–10 seconds.</p>\n<p>Upgrading the application to the version we wanted to use solved the problem.</p>\n<p>Other similar issues with this code were solved simply by fixing how the code had been assembled.</p>\n<h3 id=\"Avoid-Code-That-Changes-Angular\"><a href=\"#Avoid-Code-That-Changes-Angular\" class=\"headerlink\" title=\"Avoid Code That Changes Angular\"></a>Avoid Code That Changes Angular</h3><p>Similar to the issue above is code that adds directives or other functionality that changes how Angular fundamentally works.</p>\n<p>There are two major reasons for this. The first is that we always want to be able to enlist people to help us with our code. Most of the time, we are trying to hire good Angular developers. If our code no longer looks like Angular, why hire Angular developers?</p>\n<p>Second, if the code changes how Angular works, it is probably hooking into some Angular internal that could change in a subsequent version of Angular. This means that you will have to wait for the code’s author to update their code before you can upgrade your application.</p>\n<p>Third, you can’t be sure some little project that thought it would be cool to add some feature to Angular to get around some perceived issue has fully tested their code. You could introduce a bug into your application that you must track down.</p>\n<p>Finally, you have to ask yourself. Does this feature, or set of features, solve a problem that would still exist if I’d written my code correctly in the first place? The one package I have in mind as I write this has contributed more to the technical debt on my project than any other package or programmer we’ve had interact with our code.</p>\n<p>Be careful what code you allow into your application; it could cost you far more than it is worth in the long run.</p>\n<h2 id=\"Data-Access\"><a href=\"#Data-Access\" class=\"headerlink\" title=\"Data Access\"></a>Data Access</h2><p>So far, we’ve talked about what to do once we’ve retrieved the data into our application, but many performance issues can be avoided simply by paying attention to how and when we load our data from the server.</p>\n<h3 id=\"Only-Load-What-You-Need\"><a href=\"#Only-Load-What-You-Need\" class=\"headerlink\" title=\"Only Load What You Need\"></a>Only Load What You Need</h3><p>One guiding principle for data access is that you should only load the data you need from the server at the point you need it.</p>\n<p>An example of where you might see this performance issue is that we tend to do a massive join of data on the server and return everything we retrieved, even if we don’t need the data for the operation at hand.</p>\n<p>The less data you access, the faster your application will perform.</p>\n<h3 id=\"Normalization-is-a-Curse\"><a href=\"#Normalization-is-a-Curse\" class=\"headerlink\" title=\"Normalization is a Curse\"></a>Normalization is a Curse</h3><p>One way to send less data back to the server is to send it back in raw form rather than nested and normalized.</p>\n<p>For this, I recommend a product called Normalizr. This takes the nested data and breaks it into multiple tables. The product was originally written for client-side code to make using Redux and NgRX easier. But there are now server-side implementations you can use that structure the data before sending it back so that you only send back one instance of the data you need rather than multiple instances because multiple parent rows use it.</p>\n<p>Better than using Normalizr, which is now a bit dated, you should consider only asking for un-normalized data from the server and dumping it into NgRX entities. You can use NgRX selectors to join the data together however needed. Now that everyone should at least be using HTTP2, the cost of simultaneously making multiple requests to the server is negligible.</p>\n<h3 id=\"Pre-load-Lookup-Tables\"><a href=\"#Pre-load-Lookup-Tables\" class=\"headerlink\" title=\"Pre-load Lookup Tables\"></a>Pre-load Lookup Tables</h3><p>Along with this same idea. We often have nested data that is the result of some lookup table. By using Normalizr, you could load those tables up front and then only return the key to those tables and use Normalizr and NgRX Selectors to do the JOIN on the client side, further reducing the overall amount of data that you need to retrieve at any one time.</p>\n<h3 id=\"Virtual-Arrays\"><a href=\"#Virtual-Arrays\" class=\"headerlink\" title=\"Virtual Arrays\"></a>Virtual Arrays</h3><p>I mentioned Virtual Scrolling above as one way to reduce the rendering time. By combining this with a concept I refer to as Virtual Arrays, you can similarly only retrieve the data the user can see, further reducing the perceived time to render.</p>\n<p>A Virtual Array is an object that looks like an array from an API perspective, but the implementation uses the database as the storage location. You can either retrieve the data from the database whenever it is requested from the array or memoize it so that it is only retrieved once.</p>\n<h2 id=\"Memory-Management\"><a href=\"#Memory-Management\" class=\"headerlink\" title=\"Memory Management\"></a>Memory Management</h2><p>When most people think of performance, they immediately think of “how to impact the performance of good code.” But the most overlooked performance issue in JavaScript generally is memory. Specifically memory leaks.</p>\n<p>There are now several tools available for detecting and tracking down memory leaks. Find one and use it.</p>\n<h2 id=\"Flow-Control\"><a href=\"#Flow-Control\" class=\"headerlink\" title=\"Flow Control\"></a>Flow Control</h2><p>Now that we have flow control syntax available, you should be using that instead of directives that perform the same function. Flow control skips one of the steps that directives use.</p>\n<p>What is flow control? Using <code>@if(...)</code> instead of *ngIf is one example.</p>\n<h2 id=\"Signals\"><a href=\"#Signals\" class=\"headerlink\" title=\"Signals\"></a>Signals</h2><p>Specifically, use input&#x2F;output signals on your form and use effect()s and computed() instead of ngOnChanges().</p>\n<p>The more signals you use, the better off your performance will be. But input&#x2F;output signals is the place to start.</p>\n<h2 id=\"Micro-Tweaks\"><a href=\"#Micro-Tweaks\" class=\"headerlink\" title=\"Micro Tweaks\"></a>Micro Tweaks</h2><h2 id=\"Avoid-Iterators\"><a href=\"#Avoid-Iterators\" class=\"headerlink\" title=\"Avoid Iterators\"></a>Avoid Iterators</h2><p>As a general rule, using forEach, for&#x2F;of, Array.map, Array.forEach, etc is slower than using for&#x2F;next because all but the for&#x2F;next loop uses the iterator under the hood which has a significant cost. If you know your loop is going to be small, it probably doesn’t matter but if you are iterating over a large array, you should consider using for&#x2F;next instead.</p>\n<p>I’ve created a forNext() function that takes an array and a callback function so that I still enjoy the benefits of forEach without the cost of using the iterator.</p>\n<p>For an extra (micro) performance boost, you should make the callback function a standard, named, function instead of an anonymous or fat arrow function.</p>\n<h2 id=\"Leverage-Iterators\"><a href=\"#Leverage-Iterators\" class=\"headerlink\" title=\"Leverage Iterators\"></a>Leverage Iterators</h2><p>On the other hand, if there is a lot of setup code in your loop to get you to a point where you can start processing the loop, and you do that pre-processing multiple times per instance, you might consider creating your own iterator and doing your setup in the constructor so you can iterate through the data without having to do the setup each time.</p>\n<p>Use the right tool for the job 😁.</p>\n<h2 id=\"Avoid-Duplicate-Work\"><a href=\"#Avoid-Duplicate-Work\" class=\"headerlink\" title=\"Avoid Duplicate Work\"></a>Avoid Duplicate Work</h2><h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><p>One obvious place to avoid duplicate work is with the Array map, filter, reduce, etc. functions. When you use these functions chained to each other, you are creating a new array for each function in the chain.</p>\n<p>Again, this may not make a significant difference with a sort array, but it can be a significant performance hit with a large array.</p>\n<h3 id=\"RxJS\"><a href=\"#RxJS\" class=\"headerlink\" title=\"RxJS\"></a>RxJS</h3><p>You’ll also find that you are performing more work than you need to because you are using RxJS operators such as combineLatest() incorrectly.</p>\n<p>Here’s a tip. If you are using combineLatest() to combine selectors, consider creating a selector instead. In this way, you’ll take advantage of the memoization that NgRX provides.</p>\n<p>Speaking of Selectors, avoid using factory selectors aka parameterized selectors. They can’t take advantage of memoization. Instead, make the parameter part of the state and use a normal selector. While this isn’t always possible, when you can do this, you’ll naturally take advantage of memoization and improve your performance.</p>\n<h3 id=\"DevTools\"><a href=\"#DevTools\" class=\"headerlink\" title=\"DevTools\"></a>DevTools</h3><p>Unless you use the profiling tools that are part of the browser’s developer tools, you won’t know where your performance issues are. You can’t fix what you can’t measure.</p>\n<p>Get comfortable with the performance tools in your browser’s developer tools. They are your best friend when it comes to optimizing your application.</p>\n<h3 id=\"Control-your-object’s-shape\"><a href=\"#Control-your-object’s-shape\" class=\"headerlink\" title=\"Control your object’s shape\"></a>Control your object’s shape</h3><p>Under the hood, every object you create generates a Class in the browser’s memory. Even object literals end up creating a Class. This is a way the browser tries to optimize your code. Great.</p>\n<p>Now the bad news. If you add a field to an object, or reorder the fields in an object, the browser has to create a new Class for that object or decide it isn’t worth it and forget about using that optimization for the object. Something as simple as using the spread operator and then putting the changed field at the end of the object can cause the browser to deoptimize the object.</p>\n<p>If you can, create your objects as classes and, when you change the object, use the class to do it so you can keep the shape of the object the same as it is being used.</p>\n<h3 id=\"Service-Workers\"><a href=\"#Service-Workers\" class=\"headerlink\" title=\"Service Workers\"></a>Service Workers</h3><p>Similar in concept to the virtual arrays above but a standard API that you can implement globally. You can use service workers to cache data from the server and only ask the server for it again after you consider it stale.</p>\n<p>You can also use this to cache the index.html file locally, so you don’t have to retrieve it until there is a new version.</p>\n<h3 id=\"WebAssembly\"><a href=\"#WebAssembly\" class=\"headerlink\" title=\"WebAssembly\"></a>WebAssembly</h3><p>I’ve yet to find my code is so slow that this actually makes sense, but it is theoretically possible that you’d find even more performance by creating services using WebAssembly. This would mean you’d need to write the code in something other than TypeScript and Angularize it by wrapping it in TypeScript&#x2F;Angular code. But I’ve seen at least one article on the web where they did just that.</p>\n<h3 id=\"WebWorkers-and-Shared-Workers\"><a href=\"#WebWorkers-and-Shared-Workers\" class=\"headerlink\" title=\"WebWorkers and Shared Workers\"></a>WebWorkers and Shared Workers</h3><p>This is another place where there is at least a theoretical possibility that it would provide additional performance. At the very least, it can provide the appearance of performance.</p>\n<p>Some places to consider using Shared Workers specifically are with Web Sockets and Data Retrieval. By placing Web Socket listeners in a Shared Worker, you create one connection to the server. The Shared Worker can then relay those messages to the client code on as many windows as are currently open.</p>\n<p>Similarly, by using a Shared Worker as the main place that retrieves your data, you can cache the data and rebroadcast the new data to all the open browser windows listening to the Shared Worker.</p>\n<h2 id=\"Server-Side-Considerations\"><a href=\"#Server-Side-Considerations\" class=\"headerlink\" title=\"Server Side Considerations\"></a>Server Side Considerations</h2><h3 id=\"Normalization-is-a-Curse-Here-Too\"><a href=\"#Normalization-is-a-Curse-Here-Too\" class=\"headerlink\" title=\"Normalization is a Curse Here Too\"></a>Normalization is a Curse Here Too</h3><p>I once worked on an application where the data was being retrieved from 20 tables joined together. When we looked at what was going on, we realized that most of that data was static when the client was using it and that we could dump most of the join results into a flat table and use it instead. This was another case where we went from an 8-second load time to 1 second.</p>\n<p>The performance considerations around JOINs vary depending on what database you are using. But it is something to keep in mind all the same.</p>\n<h3 id=\"Server-Side-Caching\"><a href=\"#Server-Side-Caching\" class=\"headerlink\" title=\"Server Side Caching\"></a>Server Side Caching</h3><p>In many systems similar to the one I mentioned above, most of our calls to the server could be considered Functionally pure enough that we could cache the data.</p>\n<p>I <a href=\"/what%E2%80%99s-the-truth-about-running-asp-net-webapi-asynchronously/\">did some timings on this several years ago</a> and the results, even caching for a second, gave some pretty impressive results.</p>\n<p>For example, those lookup tables I discussed earlier don’t need to be retrieved from the database every time we make a call for them. We should be able to make a call for the data once and then return that data every time it is requested until the data is refreshed.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>There are probably other ways to optimize your application that I’ve forgotten or, more likely, do out of habit now.</p>\n<p>What I’ve written about above are the ones that stand out as the often overlooked issues.</p>\n",
            "tags": [
                "angular",
                "performance",
                "best practice"
            ]
        },
        {
            "id": "http://davembush.github.com/ngrx-performance-improvement/",
            "url": "http://davembush.github.com/ngrx-performance-improvement/",
            "title": "NgRX Performance Improvement",
            "date_published": "2024-12-15T16:29:45.000Z",
            "content_html": "<p>Over the course of working on <a href=\"https://github.com/DaveMBush/SmartNgRX\">SmartNgRX</a>, I’ve discovered a secret to making NgRX faster. A way that is so obvious now that I know about it, I’m surprised this isn’t the recommended way to use NgRX.</p>\n<p>As most discoveries occur, I’m building on the backs of giants. In this case, I’m specifically building on the back of the increasingly popular NgRX facade pattern (done well) and a statement with regard to Angular Signals that says “Don’t use Signal Effects.”</p>\n<p>There are, of course, other minor improvements but these are the top two catalysts for what I want to share with you today.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Facade-Pattern\"><a href=\"#Facade-Pattern\" class=\"headerlink\" title=\"Facade Pattern\"></a>Facade Pattern</h2><p>Several guys at the place I work now, have been using the NgRX facade pattern for a while. Even when I interview, people mention it. What most have never been able to convince me of is why I’d want to use it. Where I’ve gotten stuck is that most people use it as nothing more than a pass-through to plain old vanilla NgRX.</p>\n<p>That is, they’ll create a facade class that basically looks like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> [<span class=\"title class_\">Name</span>]<span class=\"title class_\">Facade</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"attr\">store</span>: <span class=\"title class_\">Store</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  [actionName]() &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"keyword\">new</span> [<span class=\"title class_\">Name</span>]<span class=\"title class_\">Actions</span>.<span class=\"title class_\">SomeAction</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And create methods for each action.</p>\n<p>If that’s you, I’m sorry. You’re doing it wrong.</p>\n<p>But going back to my article about what I learned building (SmartNgRX)[<a href=\"https://davembush.github.io/what-i-learned-writing-smartngrx/]\">https://davembush.github.io/what-i-learned-writing-smartngrx/]</a>, what you want to do in the facade pattern is to do everything that isn’t related to NgRX in the facade and then dispatch the action from the facade to update the resulting state.</p>\n<p>By doing this, you’re able to keep your NgRX code clean and simple.</p>\n<h2 id=\"Dispatch-Time\"><a href=\"#Dispatch-Time\" class=\"headerlink\" title=\"Dispatch Time\"></a>Dispatch Time</h2><p>In SmartNgRX, one of the things I do is buffer the dispatch actions that retrieve the IDs so I can dispatch them all at once. Originally, I put the buffering code in an effect. But one day I thought, “What if I buffer the IDs and THEN dispatch the actions?”  It turns out that is faster.</p>\n<p>That’s when I realized (and found out I was wrong - see below) that when you dispatch an action, NgRX has to run it through every typeOf() in your effects regardless of if the effect needs to process it or not.  It’s a lot like the chick going around the farm yard asking “Are you my mother?” instead of mama chicken coming to the chick and saying “I’m your mother, come here and I’ll take care of you.”</p>\n<p>Reducers are a bit different. If you are using the newest on() syntax for reducers, this translates to a map statement so you end up with the benefits of O(1) time. If you are using older syntax, you have an increasingly complex switch statement that is O(n) time until switch statements are optimized.</p>\n<p>The take away from this, I thought, is that you want as few effects as possible in your code.</p>\n<p>I almost titled this article “Ban NgRX Effects” but that wouldn’t give you the full picture.</p>\n<h2 id=\"Signals\"><a href=\"#Signals\" class=\"headerlink\" title=\"Signals\"></a>Signals</h2><p>And then I stumbled across a video about Signals where Alex Rickabaugh from the Angular Core team said “(Don’t use Effects)[<a href=\"https://www.youtube.com/watch?v=aKxcIQMWSNU&ab_channel=TechStackNation%5D\">https://www.youtube.com/watch?v=aKxcIQMWSNU&amp;ab_channel=TechStackNation]</a>.”</p>\n<p>And then it struck me. If I’m using a facade, I don’t need to use effects.</p>\n<p>Think about why we typically use effects. Isn’t it so that we can ultimately call a service that will grab data from the server? And then, what do we do with that data? We fire an action to update the state.</p>\n<h2 id=\"Ban-Effects\"><a href=\"#Ban-Effects\" class=\"headerlink\" title=\"Ban Effects\"></a>Ban Effects</h2><p>Instead, why not just call the service directly from our facade?</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> [<span class=\"title class_\">Name</span>]<span class=\"title class_\">Facade</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"attr\">service</span>: [<span class=\"title class_\">Name</span>]<span class=\"title class_\">Service</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  [methodName]() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// For optimistic updates, dispatch an action to update the state here.</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.[methodName]().<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">      <span class=\"comment\">// process data from the backend and then</span></span><br><span class=\"line\">      <span class=\"comment\">// dispatch an action to update the state</span></span><br><span class=\"line\">    ).<span class=\"title function_\">subscribe</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Even better would be to use promises:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> [<span class=\"title class_\">Name</span>]<span class=\"title class_\">Facade</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"attr\">service</span>: [<span class=\"title class_\">Name</span>]<span class=\"title class_\">Service</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  [methodName]() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// For optimistic updates, dispatch an action to update the state here.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> resultawait <span class=\"title function_\">lastValueFrom</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.[methodName]());</span><br><span class=\"line\">    <span class=\"comment\">// process data from the backend and then</span></span><br><span class=\"line\">    <span class=\"comment\">// dispatch an action to update the state</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now, you don’t need effects.</p>\n<p>The additional beauty of this is that you should be able to use NgRX Signals instead of NgRX from your facade with very little effort.  The methods you put in withMethods() will be correspond to your Actions. computed() signals will be your selectors. Done. With some nice dependency injection added in, you can switch between the two with ease.</p>\n<p>There are, of course, other improvements you can make to your code. For example, your code will generally run faster if you are using NgRX Entities for your state management and retrieve the data from the server as you need it. You could roll your own, but I’ve already done that work for you.  Check out the <a href=\"https://github.com/DaveMBush/SmartNgRX\">SmartNgRX</a> library.</p>\n<h2 id=\"Timings\"><a href=\"#Timings\" class=\"headerlink\" title=\"Timings\"></a>Timings</h2><p>And then I went to actually prove everything I’ve said above.</p>\n<p>I created a simple Angular application that dispatches an action to an effect and then had that effect call a service that would return an action asynchronously that would then be dispatched to a reducer.</p>\n<p>I also added 50 other effects that just had ofType() to emulate the need to check for every action.</p>\n<p>No matter how I ran this code, I could not see any timing difference between using one effect or 50 effects. So, my statement above that started me on this journey was wrong. We, evidently, do not suffer a performance hit based on the number of effects we have.</p>\n<p>However, I did find some interesting performance marks that still indicate that you might want to call your effects services directly.</p>\n<p>Along with the code I mentioned above, I modified the code to call the service directly and then dispatch the resulting action.</p>\n<p>Here are the results from running the code on my computer:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TL w&#x2F; Effects</th>\n<th>TL Direct</th>\n<th>SL w&#x2F; Effects</th>\n<th>SL Direct</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Average</td>\n<td>176.2232ms</td>\n<td>0.0158ms</td>\n<td>0.3688ms</td>\n<td>0.1875ms</td>\n</tr>\n<tr>\n<td>Max Time</td>\n<td>202ms</td>\n<td>0.7000ms</td>\n<td>1.1000ms</td>\n<td>0.4000ms</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>TL &#x3D; Tight Loop (for&#x2F;next loop)<br>SL &#x3D; Spaced Loop ( using rxjs of().pipe(repeat({count: 1000, delay: 100 })))</p>\n</blockquote>\n<p>In both the tight loop and the spaced loop, the direct call outperforms dispatching to the effect. But, the difference is not significant for most applications and should be considered a micro-optimization.</p>\n<p>On the other hand, if you are doing a lot of dispatching to effects at any one time, these difference could add up and you might want to consider using the direct call.</p>\n<h2 id=\"Other-Considerations\"><a href=\"#Other-Considerations\" class=\"headerlink\" title=\"Other Considerations\"></a>Other Considerations</h2><p>While banning effects for performance reasons may not be useful for most existing applications, there are other reasons you might want to consider banning them.</p>\n<p>As I’ve moved from organization to organization, I’ve seen some pretty ugly NgRX code. Much of it is due to the complexity of effects. If the people using NgRX were not forced to use RxJS because of the effects, the code would be easier to read and we’d avoid a lot of the effect chaining that I’ve seen. While effects themselves aren’t particularly slow, chaining the effects and using RxJS operators can be.</p>\n<p>Since I’ve already removed the effects from SmartNgRX, and there is a slight performance benefit from doing so, I’m not going to revert that change. Especially since it should allow me to use 99% of the same code to implement the Signals version.</p>\n",
            "tags": [
                "angular",
                "ngrx",
                "ngrx-store",
                "ngrx-entity",
                "ngrx-effects"
            ]
        },
        {
            "id": "http://davembush.github.com/smart-ngrx/",
            "url": "http://davembush.github.com/smart-ngrx/",
            "title": "smart-ngrx",
            "date_published": "2024-10-29T17:36:27.000Z",
            "content_html": "<p>Imagine an NgRX world where you almost never knew you were using NgRX. A world where you never had to write a <code>reducer</code>, <code>action</code>, or <code>effect</code>. A world where you never had to call <code>store.dispatch()</code>. A world where the data you worked automatically persist to the server. A world where the data is retrieved from the server as it is needed and removed from memory when it is not, or never removed if that’s what you want. A world where the data automatically refreshes from the server, or you can use websocket messages to refresh the data and, in either case, the only data that refreshes is the data the code is actively using. A world where optimistic UI is built into the framework.</p>\n<span id=\"more\"></span>\n\n<p>Introducing <a href=\"https://www.npmjs.com/package/@smarttools/smart-ngrx\">SmartNgRX</a>. A framework I’ve been working on for over a year that does everything I just mentioned and more. It’s a framework that is built on top of NgRX and works with your existing NgRX code.</p>\n<p>The full documentation is available at <a href=\"https://davembush.github.io/SmartNgRX/home\">SmartNgRX Documentation</a> but let me give you a brief overview of how it works.</p>\n<h2 id=\"Brief-Overview\"><a href=\"#Brief-Overview\" class=\"headerlink\" title=\"Brief Overview\"></a>Brief Overview</h2><p>First, there are two providers you will need to add to your application. The first is <code>provideSmartNgRX()</code> which is added to the <code>providers</code> array in you <code>AppModule</code>. The second is <code>provideSmartFeatureEntities()</code> which is added to the module, or route, nearest where you’ll use it.</p>\n<p>These two providers setup the configuration information that SmartNgRX will need to work. They control things such as how often to refresh the data, when to remove unused data from memory, what service to call to retrieve the data for an NgRX slice looks like and what a placeholder row looks like for a particular slice of data.</p>\n<p>For you to define the service an the SmartNgRX effect will call, you’ll need to create an EffectService. This service is where you control how the CRUD operations interact with the server. This and the selectors are the only code you’ll need to write.</p>\n<p>Which brings us to the selectors. Instead of using the <code>createSelector</code> function from NgRX, you’ll use the <code>createSmartNgRXSelector</code> function from SmartNgRX. This function defines the relationship between a parent selector and any children it may have. You can use selectors created with createSmartNgRXSelector with selectors created with createSelector and mix and match them as needed.</p>\n<p>That’s it. All the other code you normally write is handled by SmartNgRX.</p>\n<p>Give it a try and let me know what you think.</p>\n",
            "tags": [
                "angular",
                "ngrx"
            ]
        },
        {
            "id": "http://davembush.github.com/what-i-learned-writing-smartngrx/",
            "url": "http://davembush.github.com/what-i-learned-writing-smartngrx/",
            "title": "What I Learned Writing SmartNgRX",
            "date_published": "2024-10-14T11:12:03.000Z",
            "content_html": "<p>Last week, I announced a project I had been working on for over 10 months. I call it <a href=\"/smart-ngrx/\">SmartNgRX</a> and it solves many common issues most of us have using SmartNgRX, including the boilerplate issue, over-fetching, and memory pressure caused by stale data.</p>\n<p>Today I want to talk about a few things I learned while creating SmartNgRX that can be applied globally to any project.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"No-Boilerplate-Needed\"><a href=\"#No-Boilerplate-Needed\" class=\"headerlink\" title=\"No Boilerplate Needed\"></a>No Boilerplate Needed</h2><p>While SmartNgRX solves the boilerplate issue, you can apply this to your code simply by making all your NgRX slices behave the same. Once you’ve done that, you can create a single factory function for each of your Actions, Reducers, and Effects and use that to generate the Actions, Reducers, and Effects you need.</p>\n<p>You can see how I’ve done this by looking at the source code for SmartNgRX.</p>\n<h3 id=\"Generic-Actions\"><a href=\"#Generic-Actions\" class=\"headerlink\" title=\"Generic Actions\"></a>Generic Actions</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actionGroupCache = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">unknown</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> actionFactory&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">SmartNgRXRowBase</span>&gt;(</span><br><span class=\"line\">  <span class=\"attr\">feature</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">entity</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">): <span class=\"title class_\">ActionGroup</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> source = <span class=\"string\">`<span class=\"subst\">$&#123;feature&#125;</span><span class=\"subst\">$&#123;psi&#125;</span><span class=\"subst\">$&#123;entity&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cached = actionGroupCache.<span class=\"title function_\">get</span>(source) <span class=\"keyword\">as</span> <span class=\"title class_\">ActionGroup</span>&lt;T&gt; | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cached) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cached;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> actionGroup = <span class=\"title function_\">createActionGroup</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">source</span>: source <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>,</span><br><span class=\"line\">    <span class=\"attr\">events</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;Update Many&#x27;</span>: props&lt;<span class=\"title class_\">UpdateChanges</span>&lt;T&gt;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">Remove</span>: props&lt;<span class=\"title class_\">IdsProp</span>&gt;(),</span><br><span class=\"line\">      <span class=\"string\">&#x27;Load By Ids&#x27;</span>: props&lt;<span class=\"title class_\">IdsProp</span>&gt;(),</span><br><span class=\"line\">      <span class=\"string\">&#x27;Load By Ids Preload&#x27;</span>: props&lt;<span class=\"title class_\">IdsProp</span>&gt;(),</span><br><span class=\"line\">      <span class=\"string\">&#x27;Store Rows&#x27;</span>: props&lt;<span class=\"title class_\">RowsProp</span>&lt;T&gt;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">Update</span>: props&lt;&#123; <span class=\"attr\">old</span>: <span class=\"title class_\">RowProp</span>&lt;T&gt;; <span class=\"attr\">new</span>: <span class=\"title class_\">RowProp</span>&lt;T&gt; &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"string\">&#x27;Add To Store&#x27;</span>: props&lt;<span class=\"title class_\">RowProp</span>&lt;T&gt;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">Add</span>: props&lt;&#123;</span><br><span class=\"line\">        <span class=\"attr\">row</span>: T;</span><br><span class=\"line\">        <span class=\"attr\">parentId</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">        <span class=\"attr\">parentFeature</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">        <span class=\"attr\">parentEntityName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">      &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"string\">&#x27;Add Success&#x27;</span>: props&lt;&#123;</span><br><span class=\"line\">        <span class=\"attr\">newRow</span>: T;</span><br><span class=\"line\">        <span class=\"attr\">oldRow</span>: T;</span><br><span class=\"line\">        <span class=\"attr\">parentId</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">        <span class=\"attr\">parentFeature</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">        <span class=\"attr\">parentEntityName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">      &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">Delete</span>: props&lt;&#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">        <span class=\"attr\">parentInfo</span>: &#123; <span class=\"attr\">feature</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">entity</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">ids</span>: <span class=\"built_in\">string</span>[] &#125;[];</span><br><span class=\"line\">      &#125;&gt;(),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  actionGroupCache.<span class=\"title function_\">set</span>(source, actionGroup);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> actionGroup;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>A casual glance will show you that all I’ve done is wrap the <code>createActionGroup</code> function from NgRX with a function that takes a feature and entity name and returns an ActionGroup. This is a simple example of reducing boilerplate in your code. We use the feature name and the entity name to generate the source name for the ActionGroup which makes it unique.</p>\n<p>You’ll notice that I’ve also cached the <code>ActionGroup</code> so that if you call it again, you’ll get the same <code>ActionGroup</code> back. This simple optimization allows you to use the factory function to retrieve the action wherever you need it instead of passing it around. In my case, I needed this because the library doesn’t expose the actions used by NgRX and I wanted to let the developers using SmartNgRX use the actions in their code if they desired.</p>\n<h3 id=\"Reducers\"><a href=\"#Reducers\" class=\"headerlink\" title=\"Reducers\"></a>Reducers</h3><p>Similarly, I’ve wrapped <code>createReducer</code> with a factory function that takes the feature and entity name and returns a reducer. Again, this is all you need to ensure the reducer is unique.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> reducerFactory&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">SmartNgRXRowBase</span>&gt;(</span><br><span class=\"line\">  <span class=\"attr\">feature</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">entity</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">): <span class=\"title class_\">ActionReducer</span>&lt;<span class=\"title class_\">EntityState</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> adapter = entityDefinitionCache&lt;T&gt;(feature, entity).<span class=\"property\">entityAdapter</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> initialState = adapter.<span class=\"title function_\">getInitialState</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> actions = actionFactory&lt;T&gt;(feature, entity);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">createReducer</span>(</span><br><span class=\"line\">    initialState,</span><br><span class=\"line\">    <span class=\"title function_\">on</span>(actions.<span class=\"property\">add</span>, <span class=\"function\">(<span class=\"params\">state, &#123; row &#125;</span>) =&gt;</span> adapter.<span class=\"title function_\">upsertOne</span>(row, state)),</span><br><span class=\"line\">    <span class=\"title function_\">on</span>(actions.<span class=\"property\">addSuccess</span>, <span class=\"function\">(<span class=\"params\">state, &#123; newRow &#125;</span>) =&gt;</span></span><br><span class=\"line\">      adapter.<span class=\"title function_\">upsertOne</span>(newRow, state),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"title function_\">on</span>(actions.<span class=\"property\">updateMany</span>, <span class=\"function\">(<span class=\"params\">state, &#123; changes &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> adapter.<span class=\"title function_\">updateMany</span>(changes, state);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title function_\">on</span>(actions.<span class=\"property\">remove</span>, <span class=\"function\">(<span class=\"params\">state, &#123; ids &#125;</span>) =&gt;</span> adapter.<span class=\"title function_\">removeMany</span>(ids, state)),</span><br><span class=\"line\">    <span class=\"title function_\">on</span>(actions.<span class=\"property\">update</span>, <span class=\"function\">(<span class=\"params\">state, &#123; <span class=\"keyword\">new</span>: &#123; row &#125; &#125;</span>) =&gt;</span></span><br><span class=\"line\">      adapter.<span class=\"title function_\">upsertOne</span>(row, state),</span><br><span class=\"line\">    ),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">on</span>(actions.<span class=\"property\">storeRows</span>, <span class=\"function\">(<span class=\"params\">state, &#123; rows &#125;</span>) =&gt;</span> adapter.<span class=\"title function_\">upsertMany</span>(rows, state)),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Effects\"><a href=\"#Effects\" class=\"headerlink\" title=\"Effects\"></a>Effects</h3><p>Finally, I’ve wrapped <code>createEffect</code> with a factory function that takes the feature and entity name and returns an effect. This is the same as the other two examples.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> effectsFactory&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">SmartNgRXRowBase</span>&gt;(</span><br><span class=\"line\">  <span class=\"attr\">feature</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">entityName</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">effectsServiceToken</span>: <span class=\"title class_\">InjectionToken</span>&lt;<span class=\"title class_\">EffectService</span>&lt;T&gt;&gt;,</span><br><span class=\"line\">): <span class=\"title class_\">Record</span>&lt;<span class=\"title class_\">EffectsFactoryKeys</span>, <span class=\"title class_\">FunctionalEffect</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> actions = actionFactory&lt;T&gt;(feature, entityName);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> entityDefinition = entityDefinitionCache&lt;T&gt;(feature, entityName);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> adapter = entityDefinition.<span class=\"property\">entityAdapter</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Ends up calling the `EffectService` to delete the row specified</span></span><br><span class=\"line\"><span class=\"comment\">     * by the ID in the action.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"attr\">delete</span>: <span class=\"title function_\">createEffect</span>(</span><br><span class=\"line\">      <span class=\"title function_\">deleteEffect</span>(effectsServiceToken, actions),</span><br><span class=\"line\">      dispatchFalse,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Ends up calling the `EffectService` to determine what rows</span></span><br><span class=\"line\"><span class=\"comment\">     * need to be loaded yet and returns dummy rows for those rows.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"attr\">loadByIdsPreload</span>: <span class=\"title function_\">createEffect</span>(</span><br><span class=\"line\">      <span class=\"title function_\">loadByIdsPreloadEffect</span>(feature, entityName, actions),</span><br><span class=\"line\">      dispatchFalse,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Ends up calling the `EffectService` to load the rows specified</span></span><br><span class=\"line\"><span class=\"comment\">     * from the server.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"attr\">loadByIds</span>: <span class=\"title function_\">createEffect</span>(</span><br><span class=\"line\">      <span class=\"title function_\">loadByIdsEffect</span>(effectsServiceToken, actions, feature, entityName),</span><br><span class=\"line\">      dispatchFalse,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Ends up calling the `EffectService` to update the row specified</span></span><br><span class=\"line\"><span class=\"comment\">     * by the row in the action.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"attr\">update</span>: <span class=\"title function_\">createEffect</span>(</span><br><span class=\"line\">      updateEffect&lt;T&gt;(effectsServiceToken, actions, feature, entityName),</span><br><span class=\"line\">      dispatchFalse,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Ends up calling the `EffectService` to add the row specified</span></span><br><span class=\"line\"><span class=\"comment\">     * by the row in the action.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"attr\">add</span>: <span class=\"title function_\">createEffect</span>(<span class=\"title function_\">addEffect</span>(effectsServiceToken, actions), dispatchTrue),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Handles adding the new row to the store and removing the dummy row</span></span><br><span class=\"line\"><span class=\"comment\">     * that was added so we could edit it.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"attr\">addSuccess</span>: <span class=\"title function_\">createEffect</span>(</span><br><span class=\"line\">      addSuccessEffect&lt;T&gt;(effectsServiceToken, actions, adapter),</span><br><span class=\"line\">      dispatchFalse,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>By now, you get the general idea. A couple of things to note about the <code>effectsFactory</code>.</p>\n<p>First we pass in an <code>InjectionToken</code> that is used to get the <code>EffectService</code> that is used by the effects. By doing this, all we need to do is make sure your effects services conform to the <code>EffectService</code> abstract class and we can use them in the effects.</p>\n<p>This is how SmartNgRX can hide NgRX from the developer and just let them implement the specifics for each entity.</p>\n<p>You’ll also notice that to keep the code clean, I’ve implemented the details in other functions that I call. If you want to see the details, you can <a href=\"https://github.com/DaveMBush/SmartNgRX/tree/cbec5143855b1916e0c67776b22a6134a18d5ee4/libs/smart-ngrx/src/effects\">look at the source code for the effects in SmartNgRX</a>.</p>\n<p>Second, we use the cached <code>ActionGroup</code> by calling the <code>actionFactory</code> function to get the actions we need for the effects instance. Now we don’t need to know about a specific instance and find some way to pass it into the effect.</p>\n<p>Finally, we need access to the EntityAdapter for the entity we are working with. We create the entity adapter when we configure SmartNgRX. The two lines of code, above, that retrieve the adapter are retrieving it from a map where we set it during SmartNgRX setup</p>\n<p>And that’s how you avoid NgRX boilerplate in your code.</p>\n<h2 id=\"Too-Many-Actions-and-Reducers\"><a href=\"#Too-Many-Actions-and-Reducers\" class=\"headerlink\" title=\"Too Many Actions and Reducers\"></a>Too Many Actions and Reducers</h2><p>I’ve been saying this for several years and still managed to get this “wrong” while writing my code.</p>\n<p>Here’s the basic issue. Reducers and Effects have specific purposes. Where I went wrong is with my reducers. But I’ll address both Reducers and Effects here.</p>\n<p>But first, let’s take a detour and talk about an ideal NgRX setup.</p>\n<h3 id=\"Ideal-NgRX-Setup\"><a href=\"#Ideal-NgRX-Setup\" class=\"headerlink\" title=\"Ideal NgRX Setup\"></a>Ideal NgRX Setup</h3><p>The Redux pattern, generally, and NgRX, specifically, were created to store states predictably. “State only” is my motto. This means that logic should be kept out of our NgRX code. This keeps our NgRX code simple and reduces bugs. You wouldn’t believe some of the code I’ve seen that violates this principle. Then again, maybe you could. You’ve probably written it.</p>\n<p>So, if we want to keep logic out of NgRX, where should it go?</p>\n<h3 id=\"Action-Services\"><a href=\"#Action-Services\" class=\"headerlink\" title=\"Action Services\"></a>Action Services</h3><p>It goes in a service. When you call an action, it should already have the data in the form that NgRX ultimately needs. The reducer can then take this data and store it in the store without doing anything to it.</p>\n<p>Notice how small my reducer code is.</p>\n<h3 id=\"Effects-Service\"><a href=\"#Effects-Service\" class=\"headerlink\" title=\"Effects Service\"></a>Effects Service</h3><p>Similarly, when you call an effect, it should already have the data to do whatever it needs. Again, in an ideal world, all the effect does is call what I’ve come to term the effect service. The effect service can do whatever work needs to be done.</p>\n<p>For example, say you are calling the server, but the shape of the data you get back isn’t what your application will need. The place to do the transformation is in the effect service. Not in the effect.</p>\n<p>By doing this, you’ll only need actions that perform basic CRUD operations. You shouldn’t see actions for every possible way you could change the state of your application. Most of that can, and should, be handled in an Action Service.</p>\n<p>There has been a lot of noise in the community about using the “facade” pattern with NgRX but most implementations I’ve seen just put a class in front of the same actions we’ve always had. This is not a facade pattern. This is just a bulky, excessive layer in front of what we’ve always been doing.</p>\n<p>What I’m doing is closer to a facade pattern because now all those action calls become calls to a service. The service does the transformations and dispatches whatever action is appropriate to update the store.</p>\n<h3 id=\"Command-or-Event-Pattern\"><a href=\"#Command-or-Event-Pattern\" class=\"headerlink\" title=\"Command or Event Pattern\"></a>Command or Event Pattern</h3><p>By following these tip, the question of using the command or event patterns with NgRX becomes moot. The argument for using the event pattern is that your actions now give you some idea of what triggered them by using the action name as the where. In the pattern I’ve described, 100% of your actions (should) get triggered by the same code every time if you’ve structured things correctly.  That code gets triggered by multiple other places just like any other function in your code does. Now, you can evaluate the call stack. You can still use the event pattern. But, there isn’t a strong argument for it anymore.</p>\n<p>The best part about using this pattern is that I’m in a great position to convert SmartNgRX to use Signals instead of Observables and most of my code won’t change.</p>\n<p>As far as NgRX code is concerned, the only NgRX place you should have any logic at all is in Selectors, but that’s a topic for another day.</p>\n",
            "tags": [
                "angular",
                "ngrx",
                "smart-ngrx"
            ]
        },
        {
            "id": "http://davembush.github.com/navigating-work-relationships/",
            "url": "http://davembush.github.com/navigating-work-relationships/",
            "title": "Navigating Work Relationships",
            "date_published": "2023-08-28T17:59:10.000Z",
            "content_html": "<p>Sharing experiences with a friend has highlighted the complexities we all face in the workplace. Together, we’ve often speculated on how work life could unfold more smoothly. It’s a captivating dance we all do, navigating through life’s ever-changing rhythms.</p>\n<p>I’ve cultivated a daily ritual—tiny reminders that influence my perspective and guide my daily interactions. These cues become the cornerstone of my morning, offering a touch-point for clarity. They may resonate with you or maybe not, and that’s perfectly fine. Feel free to create your own set of reminders that evolve over time. After all, our beliefs can always use a gentle reality check.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Make-Your-Words-a-Cozy-Fireplace-with-ChatGPT\"><a href=\"#Make-Your-Words-a-Cozy-Fireplace-with-ChatGPT\" class=\"headerlink\" title=\"Make Your Words a Cozy Fireplace with ChatGPT\"></a>Make Your Words a Cozy Fireplace with ChatGPT</h2><p>You may wonder how this relates to our earlier conversations. The crux is, the way we deliver our words can be as impactful, if not more so, than the words themselves.</p>\n<p>As problem-solving aficionados, we programmers excel at dissecting issues. We’re also adept at critique. Once I started using the prompt:</p>\n<blockquote>\n<p>Rephrase the following to be warm, positive, and hypnotic.</p>\n</blockquote>\n<p>I found my messages had a newfound harmony. Sometimes, it’s not about what you say, but how you say it.</p>\n<p>This is particularly beneficial if management is going to see the message.</p>\n<h2 id=\"The-Art-of-Conversation\"><a href=\"#The-Art-of-Conversation\" class=\"headerlink\" title=\"The Art of Conversation\"></a>The Art of Conversation</h2><ul>\n<li><p>In discussions, aim to understand rather than be understood. Seek the gems of insight hidden in other people’s viewpoints, rather than focusing solely on making your points.</p>\n</li>\n<li><p>Pose clarifying questions. Jumping straight into counterarguments can be a hindrance. Asking questions reflects your genuine interest in understanding, and helps you uncover the core issue.</p>\n</li>\n<li><p>Engage with the intent to learn, not just to emerge victorious. Dig into the roots of other people’s beliefs and perspectives. Discover what experiences have shaped their thoughts.</p>\n</li>\n<li><p>Guiding someone towards a new action is often easier than steering them away from an existing one. If you articulate your desired outcome positively, you’ll find less resistance along the way.</p>\n</li>\n</ul>\n<h2 id=\"Lighten-Up-It’s-Just-a-Job\"><a href=\"#Lighten-Up-It’s-Just-a-Job\" class=\"headerlink\" title=\"Lighten Up, It’s Just a Job\"></a>Lighten Up, It’s Just a Job</h2><p>Let’s take a breath. We can get so consumed with our work, but in the grand scheme of things, it’s just one facet of life. Chances are, the stakes are not as high as we think. If your boss chooses a different path than the one you suggested, that’s okay. The weight has shifted; you can now walk lighter.</p>\n<h2 id=\"Speak-of-Work-as-You-Would-a-Cherished-Loved-One\"><a href=\"#Speak-of-Work-as-You-Would-a-Cherished-Loved-One\" class=\"headerlink\" title=\"Speak of Work as You Would a Cherished Loved One\"></a>Speak of Work as You Would a Cherished Loved One</h2><p>Even if you’re not a parent, imagine your job as something you’re incredibly proud of. Speak about your work with love and watch how it transforms your relationship with it. Your words can be a mirror that reflects your feelings, and vice versa.</p>\n<p>Why not give it a whirl?</p>\n<h2 id=\"Final-Thoughts\"><a href=\"#Final-Thoughts\" class=\"headerlink\" title=\"Final Thoughts\"></a>Final Thoughts</h2><p>In the vibrant tapestry of work and life, our words and intentions weave the most visible patterns. As you venture forward, keep these insights tucked in your toolkit. A shift in language can unveil new pathways, just as a subtle change in perspective can lighten your load. Whether you’re chatting with a colleague, engaging with management, or just treating yourself to a moment of reflection, let these guiding principles enrich your journey.</p>\n<p>So go ahead, dance through the complexities and celebrate the wins, big or small. Life’s too short for anything less. Why not embrace it fully?</p>\n",
            "tags": []
        },
        {
            "id": "http://davembush.github.com/dr-seuss-on-constructors/",
            "url": "http://davembush.github.com/dr-seuss-on-constructors/",
            "title": "Dr Seuss on Constructors",
            "date_published": "2023-07-22T14:21:00.000Z",
            "content_html": "<img src=\"/dr-seuss-on-constructors/BugsVilleSam.png\" style=\"width: 100%;\" />\n\n<p>In the vibrant town of Bugville, known for its thrill,<br>There lived a brisk coder named Sam, climbing up a skill hill.<br>One day, he embarked on a project so grand,<br>To craft an entity, a creature named ClutterSand.</p>\n<span id=\"more\"></span>\n\n<p>With properties and methods, the ClutterSand was vast,<br>It needed a constructor, to echo its past.<br>A special function, Sam knew it true,<br>It’s called when an instance, of the class, is brand new.</p>\n<p>Sam, though clever, was fond of a trick,<br>“Why not let the constructor perform more?”, he picked.<br>Logics, computations, actions so raw,<br>In his constructor, he saw no flaw.</p>\n<p>His constructor, now bloated, did more than just spawn,<br>It fetched data, it computed, from dusk to dawn.<br>And as the ClutterSand grew, he felt a tad smug,<br>Ignoring a rising tide, under his proverbial rug.</p>\n<p>Inheritance and Polymorphism started to frown,<br>Base class antics caused the subclasses to drown.<br>Overridden properties, methods once lean,<br>Now gave unpredictable results, the scene turned mean.</p>\n<p>Guaranteed object initialization, once a steady rock,<br>Now seemed more like an elusive flock.<br>Objects weren’t always ready when constructors were through,<br>Leaving Sam puzzled, with a clue or two.</p>\n<p>Then came the exceptions, with nowhere to hide,<br>Complex tasks in constructor, made them collide.<br>Who’d handle these exceptions? Sam started to wonder,<br>As his codebase threatened to split asunder.</p>\n<p>Unit tests, Sam’s supposed trustworthy aid,<br>Became a nightmare, a never-ending raid.<br>With complex constructors, tests were a mess,<br>Frustration peaked, causing undue stress.</p>\n<p>Transparency, predictability, pillars of good code,<br>Began to wobble under the constructor’s load.<br>Debugging was like chasing shadows in the night,<br>Sam’s hasty decision didn’t seem so right.</p>\n<p>Days turned into nights, bug reports piled high,<br>Sam’s grand project was now but a sigh.<br>A lesson learned, a principle reborn,<br>A simple constructor, complex tasks must scorn.</p>\n<p>For constructors should be modest, diligent, and pure,<br>To make the objects ready, stable, and sure.<br>And for extra logic, another way must be sought,<br>So, dear coder, let this lesson not be for naught.</p>\n<p>Remember the tale of Sam and his ClutterSand,<br>In the world of code, let simplicity command.<br>Though the road was rough, and the journey was cruel,<br>In the end, Sam learned the golden rule!</p>\n",
            "tags": [
                "typescript",
                "best practices",
                "constructors",
                "clean code"
            ]
        },
        {
            "id": "http://davembush.github.com/why-insist-on-return-types-in-typescript/",
            "url": "http://davembush.github.com/why-insist-on-return-types-in-typescript/",
            "title": "Why Insist On Return Types In TypeScript?",
            "date_published": "2023-03-25T18:47:38.000Z",
            "content_html": "<p>There are different opinions about whether or not to use return types in TypeScript. I respect that, but I would like to share why I think they are helpful.</p>\n<p>First, let’s acknowledge the reasons why some people prefer not to use return types.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Reasons-Against\"><a href=\"#Reasons-Against\" class=\"headerlink\" title=\"Reasons Against\"></a>Reasons Against</h2><h3 id=\"Verbosity-and-Redundancy\"><a href=\"#Verbosity-and-Redundancy\" class=\"headerlink\" title=\"Verbosity and Redundancy\"></a>Verbosity and Redundancy</h3><p>They can add verbosity and redundancy to the code, especially if the return type can be easily inferred by the compiler or the reader.</p>\n<p>I understand that adding return types to methods and functions can make the code longer and sometimes repetitive. But I also believe that they can add some benefits that outweigh the costs. We’ll explore those benefits later.</p>\n<h3 id=\"Limiting-Flexibility-and-Reusability\"><a href=\"#Limiting-Flexibility-and-Reusability\" class=\"headerlink\" title=\"Limiting Flexibility and Reusability\"></a>Limiting Flexibility and Reusability</h3><p>They can limit the flexibility and reusability of functions, especially if the return type is too specific or restrictive.</p>\n<p>I agree that we should avoid making our functions too specific or restrictive. But I don’t think that using return types necessarily leads to that. In fact, we can use generics and other TypeScript features to make our functions more flexible and reusable.</p>\n<h3 id=\"Introducing-Errors-and-Inconsistencies\"><a href=\"#Introducing-Errors-and-Inconsistencies\" class=\"headerlink\" title=\"Introducing Errors and Inconsistencies\"></a>Introducing Errors and Inconsistencies</h3><p>They can introduce errors or inconsistencies if the return type does not match the actual implementation or behavior of the function.</p>\n<p>I think this is a rare case, and if it happens, it means that we have a bug in our logic, not because of TypeScript but in spite of it. TypeScript is designed to catch these kinds of errors at compile time, so we can fix them before they cause any trouble.</p>\n<h3 id=\"Sometimes-difficult-or-impossible-to-specify\"><a href=\"#Sometimes-difficult-or-impossible-to-specify\" class=\"headerlink\" title=\"Sometimes difficult or impossible to specify\"></a>Sometimes difficult or impossible to specify</h3><p>They can be difficult or impossible to specify for some functions that throw errors or have multiple return paths.</p>\n<p>I admit that this can be challenging, but not impossible. We can use union types, never types, and other TypeScript tools to specify the return type for any function. If we can’t, then maybe we need to rethink our code design.</p>\n<p>Is the function too big? Doing too much? Maybe we can split it into smaller functions that do one thing and do it well.</p>\n<h2 id=\"Reasons-For\"><a href=\"#Reasons-For\" class=\"headerlink\" title=\"Reasons For\"></a>Reasons For</h2><p>If you haven’t noticed, I’m a fan of using return types in TypeScript. I think they make the code more readable, reliable, and maintainable. Here are some of the reasons why:</p>\n<h3 id=\"Readability-and-Documentation\"><a href=\"#Readability-and-Documentation\" class=\"headerlink\" title=\"Readability and Documentation\"></a>Readability and Documentation</h3><p>They make the code more readable and self-documenting, especially for complex or unfamiliar functions. They also help IDEs and editors to provide better code completion and hints.</p>\n<p>By using return types, we can communicate to ourselves and other developers what a function is supposed to do and what it returns. This can save us time and effort when we need to understand or modify the code. It can also help us avoid mistakes and bugs by using the wrong type of data.</p>\n<h3 id=\"Reliability-and-Robustness\"><a href=\"#Reliability-and-Robustness\" class=\"headerlink\" title=\"Reliability and Robustness\"></a>Reliability and Robustness</h3><p>They make the code more reliable and robust, especially for edge cases and unexpected scenarios. They also help TypeScript to <a href=\"https://www.typescriptlang.org/docs/handbook/type-inference.html\">perform better type inference and type checking</a> and <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance#using-type-annotations\">can improve the compile time performance</a>.</p>\n<p>By using return types, we can ensure that our functions behave consistently and correctly, even when they encounter errors or unexpected inputs. We can also leverage TypeScript’s powerful type system to catch errors at compile time, rather than at runtime. This can prevent crashes and improve performance.</p>\n<p>I recently read of a team who had a system that was largely untyped. Whenever a bug came in, they fixed the bug and then added types to the original code to see if the compiler would catch the bug. It turns out that simply adding types would have caught 15% of the bugs that came in.</p>\n<h3 id=\"Maintainability-and-Scalability\"><a href=\"#Maintainability-and-Scalability\" class=\"headerlink\" title=\"Maintainability and Scalability\"></a>Maintainability and Scalability</h3><p>They make the code more maintainable and scalable, especially for large or complex projects. They also help us to refactor and test our code more easily and confidently.</p>\n<p>By using return types, we can make our code more modular and reusable, avoiding duplication and complexity. We can also refactor and test our code more easily and confidently, knowing that TypeScript will alert us if we break something.</p>\n<h3 id=\"Sorting-our-Code-Into-Libraries\"><a href=\"#Sorting-our-Code-Into-Libraries\" class=\"headerlink\" title=\"Sorting our Code Into Libraries\"></a>Sorting our Code Into Libraries</h3><p>One problem I’ve run into in the past is with a code base that has a lot of typing issues. Along with that the code lived in 400+ libraries that is not very well sorted. I guess you have a similar problem only your code may not be quite so big.</p>\n<p>In order to move the code to a system that allows us to cache our compile results the libs to be buildable. But you can only have buildable libs if none of the libs cause a circular lib reference. To do this, we needed a way to sort the code into appropriate libraries.</p>\n<p>It might have been possible using inferred types, but it is considerably easier if we implicitly type our return values through out the code base.</p>\n<p>Then, using AST, we can easily go through the code and determine what code needs to move and where we should move it to. It still isn’t an easy job, but using return types makes it a lot easier.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>As you can see, I think that using return types in TypeScript is a good practice that can improve the quality of our code. Of course, there may be exceptions and trade-offs, depending on the context and preferences. But in general, I think that the benefits outweigh the costs.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://dev.to/arnelenero/why-explicit-return-type-is-a-good-thing-43lj\">Why Explicity Return Type is a Good Thing</a></li>\n<li><a href=\"https://www.reddit.com/r/typescript/comments/ihpnme/opinion_on_explicit_return_types/\">Reddit Thread Where The Majority Support Return Types</a></li>\n<li><a href=\"https://topher.io/writing/make-returns-explicit\">Make Returns Explicit</a></li>\n<li><a href=\"https://sebastiandedeyne.com/when-to-add-types-and-when-to-infer-in-typescript/\">When to Add Types and When to Infer in TypeScript</a></li>\n<li><a href=\"https://www.fun4code.com/typescript-explicit-vs-implicit/\">TypeScript Explicit vs Implicit</a></li>\n<li><a href=\"https://effectivetypescript.com/\">Effective TypeScript (Book)</a></li>\n</ul>\n<p>There are more. While there are people who insist using return types is a bad thing. My research indicates that the overwhelming consensus from the community is that using return types for functions and methods is generally a good thing and that following the default rules of the eslint rule <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.md\">explicit-function-return-types</a> is the proper balance between using return types where they supply value an turning them off where they do not.</p>\n",
            "tags": [
                "typescript",
                "strong typing",
                "linting"
            ]
        },
        {
            "id": "http://davembush.github.com/using-workers-from-an-angular-library/",
            "url": "http://davembush.github.com/using-workers-from-an-angular-library/",
            "title": "Using Workers from an Angular Library",
            "date_published": "2022-12-03T20:21:48.000Z",
            "content_html": "<p>This past week several of us have been working hard to implement a SharedWorker from a library. We found a number of articles on the web that demonstrated how to get Web Workers setup for Angular that all assumed the Web Worker was being generated in the main Angular app. We wanted to use a library and include that file in the main app.</p>\n<span id=\"more\"></span>\n\n<p>If that’s what you are trying to do, I hope this post saves you the time we spent this week figuring it out.</p>\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>As all the article state, you need to use a generator to create the Web Worker files and modify your configs. The Angular documentation gives you the steps here: <a href=\"https://angular.io/guide/web-worker\">https://angular.io/guide/web-worker</a>.</p>\n<p>What isn’t clear from this documentation is that this ONLY works for apps. If you specify a library, the compiler doesn’t know what to do with it.</p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>The solution is relatively simple. Create the worker files in the library. In the library put a file that implements the worker. In the worker file that the schematic generated in your app, import the worker file from the library.</p>\n<p>Everything else stays the same as is documented elsewhere.</p>\n",
            "tags": [
                "angular",
                "web-workers",
                "libraries"
            ]
        },
        {
            "id": "http://davembush.github.com/avoiding-ngrx-boilerplate/",
            "url": "http://davembush.github.com/avoiding-ngrx-boilerplate/",
            "title": "Avoiding NgRx Boilerplate",
            "date_published": "2022-11-19T17:17:54.000Z",
            "content_html": "<p>One of the recurring complaints I hear about NgRX is that it requires too much boiler plate code. But, it doesn’t have to be this way. In fact, I’ve been working on a project that has a lot of NgRX code and I’ve been able to reduce the amount of boilerplate code to a minimum and gain features in the process.</p>\n<span id=\"more\"></span>\n\n<p>If you look at your NgRX code you should find that your actions, reducers, and effects are all very similar. If you don’t find this to be true in your own code, you should consider this a code smell. While how we each use NgRX may vary from project to project, within a project there should be enough consistency that you can reduce the boiler plate code you write and just supply the differences rather than repeating yourself over and over again.</p>\n<h2 id=\"NgRX-Entities\"><a href=\"#NgRX-Entities\" class=\"headerlink\" title=\"NgRX Entities\"></a>NgRX Entities</h2><p>One reason you may find your code does not lend itself to common actions, reducers, and effects is because you have not yet discovered NgRX Entities. NgRX Entities are an “Optional” NgRX add-on that allow you to reduce quite a bit of redundant code, especially in the Reducers where you can just make a call to an Adapter function to do all the work for you. The end result is that your store is an array of IDs and an object of type <code>Record&lt;string, T&gt;</code> where <code>T</code> describes the shape of your record and <code>string</code> is the ID of the record. Using this pattern it is very easy to find a record by the ID so we can easily join to slices of our store together using a selector.</p>\n<p>The remainder of this article assumes you are familiar with NgRX Entities and how to use them. If you are not, I recommend you read the <a href=\"https://ngrx.io/guide/entity\">NgRX Entity Documentation</a> and then come back to this article.</p>\n<h2 id=\"Actions\"><a href=\"#Actions\" class=\"headerlink\" title=\"Actions\"></a>Actions</h2><p>The first, very obvious place we find boiler plate code in NgRX is with actions. The more recent release of NgRX already makes creating actions relatively easy by providing the <code>createActionGroup</code> function. This function allows you to create a group of actions with a single function call. However, it still requires you to provide the action type and the action payload. This is where we can start to reduce the boiler plate code.</p>\n<p>Let’s say, for a start, that all your actions look something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> entityActions = <span class=\"title function_\">createActionGroup</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">source</span>: <span class=\"string\">&#x27;Entity Name Here&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">events</span>:&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Load</span>: props&lt;&#123; <span class=\"attr\">id</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">LoadSuccess</span>: props&lt;&#123; <span class=\"attr\">entity</span>: <span class=\"title class_\">Entity</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">LoadFailure</span>: props&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">LoadAll</span>: props&lt;&#123; <span class=\"attr\">ids</span>: <span class=\"built_in\">string</span>[] &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">LoadAllSuccess</span>: props&lt;&#123; <span class=\"attr\">entities</span>: <span class=\"title class_\">Entity</span>[] &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">LoadAllFailure</span>: props&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">Create</span>: props&lt;&#123; <span class=\"attr\">entity</span>: <span class=\"title class_\">Entity</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">CreateSuccess</span>: props&lt;&#123; <span class=\"attr\">entity</span>: <span class=\"title class_\">Entity</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">CreateFailure</span>: props&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">Update</span>: props&lt;&#123; <span class=\"attr\">entity</span>: <span class=\"title class_\">Entity</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">UpdateSuccess</span>: props&lt;&#123; <span class=\"attr\">entity</span>: <span class=\"title class_\">Entity</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">UpdateFailure</span>: props&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">Delete</span>: props&lt;&#123; <span class=\"attr\">id</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">DeleteSuccess</span>: props&lt;&#123; <span class=\"attr\">id</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">DeleteFailure</span>: props&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Even if you create some generator to create this code for you, it is still quite a bit of code that needs to be compiled and shipped to the browser.</p>\n<p>What if, instead, all we had to do was write this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> entityActions = <span class=\"title function_\">createActionGroup</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;Entity Name Here&#x27;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>All you need to do, for this to work, is create a new <code>createActionGroup</code> function that returns the NgRX version of the same method with everything filled out.</p>\n<p>Well, “all you have to do” is a bit of an exaggeration as there are some typing issues you’ll need to address.</p>\n<p>Here is the code:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createActionGroup <span class=\"keyword\">as</span> ngrxCreateActionGroup, props &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ngrx/store&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgrxActionGroup</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./types/ngrx-action-group.type&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * StringLiteralCheck was copied from NgRX because it is hidden.  It forces</span></span><br><span class=\"line\"><span class=\"comment\"> * the source parameter to be a string literal.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">StringLiteralCheck</span>&lt;</span><br><span class=\"line\">  <span class=\"title class_\">Str</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Name</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span></span><br><span class=\"line\">&gt; = <span class=\"built_in\">string</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Str</span> ? <span class=\"string\">`<span class=\"subst\">$&#123;Name&#125;</span> must be a string literal type`</span> : <span class=\"built_in\">unknown</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">StringLiteralSource</span>&lt;<span class=\"title class_\">Source</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; = <span class=\"title class_\">Source</span> &amp;</span><br><span class=\"line\">  <span class=\"title class_\">StringLiteralCheck</span>&lt;<span class=\"title class_\">Source</span>, <span class=\"string\">&#x27;source&#x27;</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * createActionGroup creates all the actions an entity will need reducing quite a bit</span></span><br><span class=\"line\"><span class=\"comment\"> * of boilerplate code.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The `source` parameter is the same as the `source` parameter in NgRX&#x27;s createActionGroup.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> createActionGroup = &lt;<span class=\"title class_\">Source</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>, T&gt;(</span><br><span class=\"line\">  <span class=\"attr\">source</span>: <span class=\"title class_\">StringLiteralSource</span>&lt;<span class=\"title class_\">Source</span>&gt;</span><br><span class=\"line\">): <span class=\"title class_\">NgrxActionGroup</span>&lt;T&gt; =&gt;</span><br><span class=\"line\">  <span class=\"title function_\">ngrxCreateActionGroup</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// because ngrxCreateActionGroup expects a string literal</span></span><br><span class=\"line\">    <span class=\"comment\">// we have to cast as any to get around the type check</span></span><br><span class=\"line\">    <span class=\"comment\">// this is why we made sure our source parameter does the</span></span><br><span class=\"line\">    <span class=\"comment\">// string literal check.</span></span><br><span class=\"line\">    <span class=\"attr\">source</span>: source <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>,</span><br><span class=\"line\">    <span class=\"attr\">events</span>: &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Load</span>: props&lt;&#123; <span class=\"attr\">id</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">LoadSuccess</span>: props&lt;&#123; <span class=\"attr\">entity</span>: T &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">LoadFailure</span>: props&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">LoadAll</span>: props&lt;&#123; <span class=\"attr\">ids</span>: <span class=\"built_in\">string</span>[] &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">LoadAllSuccess</span>: props&lt;&#123; <span class=\"attr\">entities</span>: T[] &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">LoadAllFailure</span>: props&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">Create</span>: props&lt;&#123; <span class=\"attr\">entity</span>: T &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">CreateSuccess</span>: props&lt;&#123; <span class=\"attr\">entity</span>: T &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">CreateFailure</span>: props&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">Update</span>: props&lt;&#123; <span class=\"attr\">entity</span>: T &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">UpdateSuccess</span>: props&lt;&#123; <span class=\"attr\">entity</span>: T &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">UpdateFailure</span>: props&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">Delete</span>: props&lt;&#123; <span class=\"attr\">id</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">DeleteSuccess</span>: props&lt;&#123; <span class=\"attr\">id</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">      <span class=\"title class_\">DeleteFailure</span>: props&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that I’ve added a new type <code>NgrxActionGroup</code> as the return value. This ensures that the return value is strongly typed to the information provided.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">NgrxActionGroup</span>&lt;T&gt; = <span class=\"title class_\">ActionGroup</span>&lt;</span><br><span class=\"line\">  <span class=\"comment\">// using any here is the only way I could get this to work</span></span><br><span class=\"line\">  <span class=\"comment\">// without worse hacks or rewriting createActionGroup</span></span><br><span class=\"line\">  <span class=\"built_in\">any</span>,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Load</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">id</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">LoadSuccess</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">entity</span>: T &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">LoadFailure</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">LoadAll</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">ids</span>: <span class=\"built_in\">string</span>[] &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">LoadAllSuccess</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">entities</span>: T[] &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">LoadAllFailure</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">Create</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">entity</span>: T &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">CreateSuccess</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">entity</span>: T &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">CreateFailure</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">Update</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">entity</span>: T &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">UpdateSuccess</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">entity</span>: T &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">UpdateFailure</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">Delete</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">id</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">DeleteSuccess</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">id</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    <span class=\"title class_\">DeleteFailure</span>: <span class=\"title class_\">ActionCreatorProps</span>&lt;&#123; <span class=\"attr\">error</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&gt;;</span><br></pre></td></tr></table></figure>\n\n<p>Most of the work in getting that all working correctly was with the strong typing. You may need to tweak for your purposes, but this is the basic idea.</p>\n<p>If you need to add actions that are unique to a particular entity, you can use the <code>createActionGroup</code> function from NgRX and then return the combined actions using the spread operator.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> entityActions = &#123;</span><br><span class=\"line\">  ...<span class=\"title function_\">createActionGroup</span>(<span class=\"string\">&#x27;Entity Name Here&#x27;</span>),</span><br><span class=\"line\">  ...<span class=\"title function_\">ngrxCreateActionGroup</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">source</span>: <span class=\"string\">&#x27;Entity Name Here&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">events</span>: &#123;</span><br><span class=\"line\">      <span class=\"title class_\">UniqueAction</span>: props&lt;&#123; <span class=\"attr\">id</span>: <span class=\"built_in\">string</span> &#125;&gt;(),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reducers\"><a href=\"#Reducers\" class=\"headerlink\" title=\"Reducers\"></a>Reducers</h2><p>Reducers are very similar. Once again, NgRX already gives us a way of creating a Reducer function with one call.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> entityReducer = <span class=\"title function_\">createReducer</span>(</span><br><span class=\"line\">  initialState,</span><br><span class=\"line\">  <span class=\"title function_\">on</span>(entityActions.<span class=\"property\">Load</span>, <span class=\"function\">(<span class=\"params\">state, &#123; id &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...state,</span><br><span class=\"line\">      <span class=\"attr\">loading</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"comment\">// etc...</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>But if the on() code is the same, why repeat it over and over?  Just create a new factory function that specifies what is unique and let it do the rest of the work.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> createReducer = &lt;T, N <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt;(</span><br><span class=\"line\">  <span class=\"attr\">adapter</span>: <span class=\"title class_\">EntityAdapter</span>&lt;T&gt;, <span class=\"comment\">// EntityAdapter is an NgRX Entities type</span></span><br><span class=\"line\">  <span class=\"attr\">entityName</span>: N,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: <span class=\"title class_\">NgrxActionGroup</span>&lt;T&gt;</span><br><span class=\"line\">): <span class=\"title class_\">ActionReducer</span>&lt;<span class=\"title class_\">EntityState</span>&lt;T&gt;&gt; =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">ngrxCreateReducer</span>(</span><br><span class=\"line\">    adapter.<span class=\"title function_\">getInitialState</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">on</span>(actions.<span class=\"property\">load</span>, <span class=\"function\">(<span class=\"params\">state, &#123; id &#125;</span>) =&gt;</span></span><br><span class=\"line\">      adapter.<span class=\"title function_\">upsertOne</span>(id, state)</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"comment\">// etc...</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>And now, you can create all your reducers using your new createReducer function.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> entityReducer = <span class=\"title function_\">createReducer</span>(</span><br><span class=\"line\">  entityAdapter,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Entity Name Here&#x27;</span>,</span><br><span class=\"line\">  entityActions</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Effects\"><a href=\"#Effects\" class=\"headerlink\" title=\"Effects\"></a>Effects</h2><p>Effects are a little more complicated. The basic idea is that you want to create an generic class with abstract methods it can use to pull in what is different from the class that implements it. To be honest, there is still quite a bit of code you have to write but there are two advantages. Since you are only providing the differences, there is much less code to write and because it is the same code being used everywhere, once you get it working, it works everywhere, reducing the chance of errors.</p>\n<p>Because your code is probably going to look much different than the code I’m using, I’m going to provide samples of the code rather than the full blown implementation.</p>\n<p>This also takes advantage of the new createEffect() function in NgRX 8.0.0.</p>\n<p>Our generic class is going to look something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmartEffects</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * actions is the action group for this entity</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">get</span> <span class=\"title function_\">actions</span>(): <span class=\"title class_\">NgrxActionGroup</span>&lt;T&gt;;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * adapter is the entity adapter for this entity</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">get</span> <span class=\"title function_\">adapter</span>(): <span class=\"title class_\">EntityAdapter</span>&lt;T&gt;;</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * updateOperator is the method that will run when the update</span></span><br><span class=\"line\"><span class=\"comment\">   *   action is dispatched.  You would create a similar operator</span></span><br><span class=\"line\"><span class=\"comment\">   *   method for any other calls you&#x27;d make to the server or other</span></span><br><span class=\"line\"><span class=\"comment\">   *   insertion points you would need for an effect</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> <span class=\"variable\">action</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">updateOperator</span>(</span><br><span class=\"line\">    <span class=\"comment\">// have to use any here because that is how NgRX defines it</span></span><br><span class=\"line\">    <span class=\"attr\">action</span>: &#123;<span class=\"attr\">row</span>: T&#125; &amp; <span class=\"title class_\">TypedAction</span>&lt;<span class=\"string\">`[<span class=\"subst\">$&#123;<span class=\"built_in\">any</span>&#125;</span>] Update`</span>&gt;</span><br><span class=\"line\">  ): <span class=\"title class_\">Observable</span>&lt;T&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You might thing you could use an abstract field instead of  an abstract getter. But, javascript initializes the parent class prior to the child class and the field you need won’t be available when the effects are created.</p>\n<p>You’ll need to make the calls to the createEffect() methods inside the constructor. Again, the order that code gets executed between parent classes and child classes forces this to be done in the constructor.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Once you’ve created a consistent way of using NgRX throughout your code, you not only reduce the amount of boiler plate code you have to write, but you also reduce errors, make your code more maintainable, and create consistency throughout your code which will make it significantly more understandable.</p>\n",
            "tags": [
                "angular",
                "ngrx",
                "state-management"
            ]
        },
        {
            "id": "http://davembush.github.com/clean-state-management-with-ngrx/",
            "url": "http://davembush.github.com/clean-state-management-with-ngrx/",
            "title": "Clean State Management with NgRx",
            "date_published": "2022-07-04T16:46:07.000Z",
            "content_html": "<p>Once again I’ve run into a situation where the code I’m looking at doesn’t resemble how the code was meant to be written.</p>\n<p>I’ve spent the last month fixing bugs that can all be summarized by the following problems:</p>\n<ul>\n<li>Reducers updating nested data.</li>\n<li>Storing data manipulations that Selectors could perform</li>\n<li>Using Effects as Selectors</li>\n<li>Components doing too much data manipulation</li>\n<li>Too many actions and indirection</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>Unfortunately, the people who need to hear this the most are the ones who will never read this article. Some of what I’m about to say, I may have discovered over the last several years of programming but I’m sure I didn’t discover this in isolation.</p>\n<p>So, lets review how NgRX should be used effectively.</p>\n<h2 id=\"The-Problem-with-Nested-Data\"><a href=\"#The-Problem-with-Nested-Data\" class=\"headerlink\" title=\"The Problem with Nested Data\"></a>The Problem with Nested Data</h2><p>If you’ve ever worked on a system with nested state data as part of one slice, you know that updating that nested data is a pain. For those of you who haven’t, having to update that data makes your reducer 10 times longer and 3 times more complicated than it needs to be.</p>\n<p>This means, first, you’ve written more code than you need. This means there is a higher possibility of errors.  But beyond that, the code your customer has to download is also larger than it needs to be.  Worse, because it runs every time the nested data is updated, the code performs slower than it needs to.</p>\n<p>That last point might surprise you. Why does it run slower? Simply because you may end up running that code when it was not necessary.</p>\n<h2 id=\"The-Problem-with-Storing-State-the-Way-You-Want-to-Use-It\"><a href=\"#The-Problem-with-Storing-State-the-Way-You-Want-to-Use-It\" class=\"headerlink\" title=\"The Problem with Storing State the Way You Want to Use It\"></a>The Problem with Storing State the Way You Want to Use It</h2><p>Related to nested data is the urge to store state the way you want to use it later on in the application.</p>\n<p>The main problem with doing this is that you need to make sure that state gets updated correctly from every place you update the raw data. In the process, you will invariably run the the derived state code multiple times when you could have only run it once or in many cases, not at all.</p>\n<p>Instead, you should modify the data into something your presentation needs using Selectors. Since everyone should be using the Selectors to get the information they need, and that selector is looking at the raw data, you can be sure that everyone is getting the correct data. Also, if nothing is listening to the observable that the selector returns, you will not be running the selector code more times than is necessary.</p>\n<p>You also have the advantage of taking advantage of memoization so that this data manipulation only happens when the data is needed and when it changes.</p>\n<h2 id=\"Storing-State\"><a href=\"#Storing-State\" class=\"headerlink\" title=\"Storing State\"></a>Storing State</h2><p>Rule number one of state management is to store state at the most granular level you can. This means, in part, that each slice of your state, the table in your store, should be flat.</p>\n<p>What does it mean that the data is flat? It means that the object only contains primitive values. Strings, number, booleans, dates, or collections of objects that only contain primitive values. Just like you would in a relational database table.</p>\n<p>But, this may not be the most granular level.</p>\n<p>Say you have a row in your database that contains 3 fields that you always want but 50 or so that you only want if a particular presentation is running.  I would recommend creating a slice for the 3 main fields and then another slice or more, for the remaining fields and allow for the fact that you may not have all of them all the time.</p>\n<p>While most systems don’t need this. The system I’m working on does.</p>\n<p>This solves the storing nested data issue.</p>\n<h2 id=\"The-Job-of-Effects\"><a href=\"#The-Job-of-Effects\" class=\"headerlink\" title=\"The Job of Effects\"></a>The Job of Effects</h2><p>Apparently, some people think that the job of an effect is to manipulate data.  But as we’ve already established, manipulating data is the job of selectors. No, the job of Effects is to retrieve data from wherever we are persisting it and to update the persistent store with any changes we’ve made. If we need to manipulate data to do either of those, again, Selectors is where we would do this work.</p>\n<p>Once you’ve narrowed the job of your effects down to this, you no longer need to return multiple actions from an effect.  Ideally an effect should fire one action.  But, no more than two.</p>\n<h2 id=\"The-Job-of-Reducers\"><a href=\"#The-Job-of-Reducers\" class=\"headerlink\" title=\"The Job of Reducers\"></a>The Job of Reducers</h2><p>Reducers only have three jobs: add new data to the slice, remove data from the slice, and update data in the slice. That’s it. If your reducers are doing more than that, you’re doing it wrong.</p>\n<h2 id=\"Extra-Credit\"><a href=\"#Extra-Credit\" class=\"headerlink\" title=\"Extra Credit\"></a>Extra Credit</h2><p>The above, is the bare minimum and may server you well for small projects. However, for larger projects you will want to consider using NgRX Entities.  This will reduce the amount of boiler plate code you need to write as well as making it easy to join your slices however you need to.</p>\n<p>One place in the code I’m working on this would be particularly useful is to see what slice owns another slice.  As the data is stored and returned we only know who the children are most of the time.  To find the parent, we have to iterate through the data to find the child and then look at what parent we are in.</p>\n<p>It gets even more complicated when a row of data could have more than one parent.</p>\n<h2 id=\"Thinking-About-Code\"><a href=\"#Thinking-About-Code\" class=\"headerlink\" title=\"Thinking About Code\"></a>Thinking About Code</h2><p>The last point I want to make regarding state management is that how we think about our code impacts how we write our code.</p>\n<p>I’ve discovered over the years that most of us think about code from a GUI perspective. But, by doing this, we also tend to put a lot of logic in our components and keep doing so, until that doesn’t work any more. At that point, we start to consider state management.</p>\n<p>But what if we thought about code strictly from a data perspective? If every time you thought about the code you were writing and though, “what if I didn’t have a presentation layer? What problem am I trying to solve really? How can I do this without a presentation layer?” Then, your code would be more flexible, easier to maintain, and more scalable.</p>\n<p>How would it be more flexible?</p>\n<p>Back as the dotCom days were starting I had a manager come to me with a VB6 😝 application he had had build and said, “I’d like to take this code and run it on the web, or from a phone, or from the desktop.”  And my response to him was, “You can’t get their from here.” because the code was so tightly coupled to the presentation layer.</p>\n<p>But to bring it today, we often have the same kind of requirements. We originally solve a problem only to have our managers come to us with a new requirement that suggest using the same data to look at the code in a different way.  If all your data logic is in the presentation layer, you might achieve the goal but you’ll also have a lot of duplicate code if you are very careful. But, lets say you manage to pull that off. Six months later you are working on a bug in one of those two views. You fix it, but you forget about that other view and never think to fix it there too. And this is where your troubles begin.</p>\n<p>By pushing code as far down the stack as is practical, you reduce the amount of code you write, reduce the size of the code that your customer has to download, reduce the code you have to maintain, and in the case of NgRX end up writing code that performs faster.</p>\n<p>So, how might you force yourself to think in this way? By following this simple rule: Presentational components should only 1) display the data they’ve been give or 2) fire events indicating that some action has taken place.</p>\n<p>There is another type of component generally referred to as “Smart” components. They too have a rule. They should only 1) retrieve data from the store via Selectors and 2) fire actions to update the Store or trigger an Effect.</p>\n<h2 id=\"Storing-Ancillary-State\"><a href=\"#Storing-Ancillary-State\" class=\"headerlink\" title=\"Storing Ancillary State\"></a>Storing Ancillary State</h2><p>Thinking about your code this way leads to the last point I want to make. If your data is always your single source of truth, you’ll want to store information in the Store that will help you determine things like sort order and filtering as well as other information that may be in your form.</p>\n<p>Personally, I tend to store all my form data in my store beyond, and including, the data I need to send back to the server. This helps me derive the data for my presentation layer and allows my actions to have smaller payloads.</p>\n<p>Many of you send all your form data with your action to update the database because you still think of the update as something the presentation layer is doing. The way I work with data is I just send an action that notifies the store that I want to update the data with the data from my form. The Effect grabs that data from the store and sends it to the server.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>While I’ve centered the discussion above to NgRX. The main ideas port to other methods of state management including things like Redux, MobX, and even Apollo GraphQL.</p>\n<p>By following the above architecture and design patterns your code will be easier to maintain, have fewer bugs and scale better.</p>\n",
            "tags": [
                "angular",
                "ngrx",
                "state-management"
            ]
        },
        {
            "id": "http://davembush.github.com/ngzones-performance-impact/",
            "url": "http://davembush.github.com/ngzones-performance-impact/",
            "title": "NgZones Performance Impact",
            "date_published": "2022-05-28T23:03:40.000Z",
            "content_html": "<p>I’ve been working on this article for a month, off and on. When I started, I set out to demonstrate the performance impact of change detection in Angular. In particular, I wanted to demonstrate that turning zones off would have a significant impact on performance even if you followed all my other advice regarding performance optimization.</p>\n<p>That is, if you had:</p>\n<span id=\"more\"></span>\n<ul>\n<li>Implement OnPush notification</li>\n<li>Keep your components small</li>\n<li>Use pure pipes</li>\n<li>Use NgRX Selectors</li>\n<li>Use distinctUntilChanged on your Observables</li>\n<li>Don’t bind to computed values.</li>\n<li>User RxJS distinct()</li>\n<li>Use RxJS replay()</li>\n<li>Style the :host</li>\n<li>Use TrackBy x in ngFor</li>\n<li>Lazy-load routes</li>\n<li>Preload lazy-loaded routes</li>\n<li>Lazy-load resources</li>\n<li>Use virtual scrolling</li>\n<li>Don’t use nested data in your store</li>\n<li>Pre-load lookup tables.</li>\n<li>Use virtual arrays</li>\n<li>Tune your server</li>\n</ul>\n<p>Once you’ve done all those things, the only question left is “exactly how much time does the change detection cycle take if nothing has changed?”</p>\n<h2 id=\"First-Attempts\"><a href=\"#First-Attempts\" class=\"headerlink\" title=\"First Attempts\"></a>First Attempts</h2><p>Assuming that change detection would be an issue, I set out to determine how much of a performance impact I would see with some pretty simple code.  So I created a component that updated a value when a button was clicked.</p>\n<p>I then used the performance tools in developer tools to see just how long the update cycle would take.</p>\n<p>At first I thought I was on to something, but it was actually the compiler kicking in on the first run. When I clicked the button a second time, the performance was not any different regardless of where I put the changes.</p>\n<p>I thought maybe the difference was the number of @Inputs that were being watched, but even updating all those did not make any significant difference.  Even using prop drilling, if the component didn’t actually use the value from the @Input() there was no difference in performance.</p>\n<h2 id=\"How-Much-Time-Does-ChangeDetection-Take\"><a href=\"#How-Much-Time-Does-ChangeDetection-Take\" class=\"headerlink\" title=\"How Much Time Does ChangeDetection Take?\"></a>How Much Time Does ChangeDetection Take?</h2><p>So, today I set out to see just how much time change detection takes if nothing updates in the app.  Just trigger a change detection cycle.</p>\n<p>That’s easy, create a button that you can click nested in the inner most component.</p>\n<p>To get a better sense of timing I also created a tree of components 1000 levels deep.</p>\n<p>The entire click event where the change detection cycle occurs take about 20ms with the developer tools CPU performance set to 4x.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>If you are turning off zones as THE way of optimizing your performance you are masking architectural issues that should have been addressed first. Don’t let anyone tell you otherwise. It just isn’t true. Take it from someone who tried to prove it was.</p>\n",
            "tags": [
                "angular",
                "performance",
                "change-detection"
            ]
        },
        {
            "id": "http://davembush.github.com/every-programming-issue-solved/",
            "url": "http://davembush.github.com/every-programming-issue-solved/",
            "title": "Every Programming Issue Solved",
            "date_published": "2021-09-26T12:06:30.000Z",
            "content_html": "<p>As I’ve considered all the issues I’ve seen over the years and, as I’ve talked with and interviewed with other developers, I’ve come to the conclusion that our industry has two main problems.  Fix these and all the other issues we face will solve themselves.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Not-Understanding-the-Problem\"><a href=\"#Not-Understanding-the-Problem\" class=\"headerlink\" title=\"Not Understanding the Problem\"></a>Not Understanding the Problem</h2><p>The first sounds so simple and yet it is a lot more pervasive than one would expect.</p>\n<p>You might think I’m talking about not understanding the problem we are trying to code for.  And of course, that is one obvious area this displays itself.</p>\n<p>But, let’s demonstrate other ways in which this manifest itself.</p>\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><p>I find that, for whatever reason, many programmers jump into a new development tool without fully understanding how the new tool works or the best practices for using it.</p>\n<p>And, by the time most programmers have figured out what the best way to use the tool is, they’ve moved on to another tool. As an industry, we tend to use every new tool like we used the last tool we used because it is the only way we know.</p>\n<p>The result is that we end up writing front-end code that looks more like backend code.  Or we write code using language A that looks like code using language B.</p>\n<p>The above scenario has played itself out multiple times over my career. As the industry was moving from C to C++, most of the programmers I worked with would write C code in C++. Unfortunately, because you could do this and still end up with working code, most of them got away with it.</p>\n<p>More recently, I’ve seen it with developers who knew C# backed programming and moved to TypeScript and front end programming. The result is “Redux” code that looks like Entity Framework code.  They are similar, but not the same.</p>\n<h3 id=\"Design-Patterns\"><a href=\"#Design-Patterns\" class=\"headerlink\" title=\"Design Patterns\"></a>Design Patterns</h3><p>Next, we tend to misuse design patters for the same reason.</p>\n<p>For example, I once saw a project that was trying to use the “Repository” (Entity Framework) design pattern. The problem is, the “Repositories” look a lot like the “Business Logic” layer which means that a lot of the code that could be making one call to the database is making multiple calls to the database simply because the repository code isn’t properly returning an IQueryable as it should be.</p>\n<h3 id=\"Process\"><a href=\"#Process\" class=\"headerlink\" title=\"Process\"></a>Process</h3><p>Another place I’ve seen this issue is with Agile and Scrum.</p>\n<p>I can’t tell you how many times I’ve heard people say that Agile&#x2F;Scrum doesn’t work. As I dig deeper, I find that they’ve never actually used the Agile&#x2F;Scrum process. They’ve used something they were told was Agile&#x2F;Scrum.</p>\n<p>In fact, personally, I’ve yet to work for an organization that actually used Agile&#x2F;Scrum. They all SAY they do. But each of them are either using Agile&#x2F;Scrum as a reason for no process at all, or they are using it as a way to pick and choose the ceremonies they like without really being Agile at all.</p>\n<h3 id=\"Best-Practices\"><a href=\"#Best-Practices\" class=\"headerlink\" title=\"Best Practices\"></a>Best Practices</h3><p>Similarly, I’ve seen this issue is in a recent Medium article saying the Single Responsibility Principle (SRP) is “garbage.”</p>\n<p>The problem seems to be, the person who wrote the article doesn’t fully understand SRP and so, well, it MUST be garbage.  The clear indication of this is when he states that he tried to keep his classes from knowing about each other when he “suddenly realized” it would be so much easier if he didn’t worry about SRP.</p>\n<p>Um, yeah. No one said implementing SRP was easy.</p>\n<p>And just in case you would dismiss this as “you don’t know the exact issue they were facing,” you are right, I don’t.  But whenever someone tries to push back against an industry standard that I’ve actually seen benefit in following, time has informed me that the problem is almost always the way it is being implemented.  Just like with “Agile” and “Scrum.”</p>\n<h2 id=\"Granularity\"><a href=\"#Granularity\" class=\"headerlink\" title=\"Granularity\"></a>Granularity</h2><p>This SRP issue leads me to my second observation.  Rather than being too granular, I’ve found that the problem is that the problem is we tend to not break a problem down far enough to be useful.</p>\n<h3 id=\"The-Scrum-x2F-Kanban-Board\"><a href=\"#The-Scrum-x2F-Kanban-Board\" class=\"headerlink\" title=\"The Scrum&#x2F;Kanban Board\"></a>The Scrum&#x2F;Kanban Board</h3><p>Going back to the Agile&#x2F;Scrum example…</p>\n<p>I would maintain that if you have task on your board that are considered “Work in Progress”… that is, items you expect to work on in the next sprint, and the number you’ve assigned does not reasonably represent work that can be done within 8 hours of effort, you probably have not broken the tasks down far enough.</p>\n<p>If you are one of those rare groups who can estimate your tasks in larger increments and you are able to achieve everything you’ve put in your sprint, then you are probably doing the right thing and you can ignore my advice. My guess is you’ve broken the tasks down further within the tasks and that’s why it works for you. Most places I’ve worked think a sentence estimated as a week is a task that can be reasonably estimated.</p>\n<h3 id=\"Bugs\"><a href=\"#Bugs\" class=\"headerlink\" title=\"Bugs\"></a>Bugs</h3><p>No where is it more obvious that we are not granular enough than that our code is buggy.</p>\n<p>To be fair, bugs are part of writing software. But with few exceptions, most bugs could be avoided by breaking the code down into smaller pieces.</p>\n<p>One of my best examples of this is from code I was asked to rewrite over 30 years ago.</p>\n<p>The code in question had a continuous series of bugs that kept creeping up. My recommendation was to essentially put the code apart and put it back together again. Not something I would recommend today and the process took much longer than I had expected. However, my re-write broke the code down into functions that were essentially two to three lines of code per function all the way down the stack. When I was done, the code worked and we never saw an issue with it again.</p>\n<h3 id=\"Deploying-Software\"><a href=\"#Deploying-Software\" class=\"headerlink\" title=\"Deploying Software\"></a>Deploying Software</h3><p>To a more recent example, I had a discussion with an organization about deployment issues they are facing.  Specifically about how to release software to production when all the dependant parts are not ready.  The obvious solution to this is feature flags.  But, the problem with using feature flags is that they only work if your code granular enough that you can feature flag out the parts that are not ready.  This can be either because your code is not granular enough or, in the case of microservices, because your services are not granular enough.  Or, both.</p>\n<h3 id=\"Understanding-existing-code\"><a href=\"#Understanding-existing-code\" class=\"headerlink\" title=\"Understanding existing code\"></a>Understanding existing code</h3><p>The last place the granularity issue manifests itself is in the existing code. Rarely have I worked on a system where the documentation is up to date and I had the luxury of relying on it.  And so, we are called on to deduce what the code should be doing by looking at the code itself.</p>\n<p>But, if a function or method goes on forever, or has conditions that are a combination of conditions that are not obvious, then it is not granular enough.</p>\n<p>My recommendation is to apply linting rules that apply complexity, line length and number of lines per method&#x2F;function filters to your code to limit how much information is embedded in any one method or function. I know from experience it has forced me to think about the granularity of my own code as I bump up against the limits.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>When I perform code reviews, most of what I look at revolve around proper use of the tools we use and the complexity of the end result because if you can control these, just about every other issue will take care of itself.</p>\n",
            "tags": []
        },
        {
            "id": "http://davembush.github.com/rethinking-action-names-redux-ngrx/",
            "url": "http://davembush.github.com/rethinking-action-names-redux-ngrx/",
            "title": "Rethinking Action Names (Redux/NgRX)",
            "date_published": "2021-05-29T10:52:47.000Z",
            "content_html": "<p>If you’ve been using some form of Redux, you are familiar with the basic flow of data through the Redux loop. Central to this flow are Actions, the messages that trigger code in our Reducer or Effect&#x2F;Epic&#x2F;Saga (depending on what flavor of Redux you are using).</p>\n<p>The model allows us to disconnect our code so that it only cares that an action was triggered in some way.  That is, “when this action occurs, I will run this code.”</p>\n<p>Because of this, we can create an action that triggers multiple code blocks to run. Our only concern is that the code that gets triggered can’t depend on each other.</p>\n<p>In fact, much of the official literature encourages this practice.</p>\n<p>And, this is where all our troubles begin.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Current-Recommendation\"><a href=\"#Current-Recommendation\" class=\"headerlink\" title=\"Current Recommendation\"></a>Current Recommendation</h2><p>You see, the official literature around actions also suggest a naming convention that is tied to what we want to happen, rather than what just happened or something otherwise more generic.</p>\n<p>For example, take the simple act of loading a list of employees from the server. To do this, we would typically create two actions.  The first would be <code>LoadEmployees</code> and the second would be <code>LoadEmployeeResults</code>. Both of these actions represent what we want to do, not what just happened.</p>\n<p>Now, let’s say we also want to display some sort of wait state and that we want to control it using Redux.  For that we would create a Reducer in our store.  Let’s call it <code>Wait</code>. And for the purposes of this post, we will assume that <code>Wait</code> tracks wait state by incrementing and decrementing a counter.</p>\n<p>But, we don’t need to create new Actions for our Wait state because we can re-use the actions we’ve already created. When we fire <code>LoadEmployees</code> we can increment <code>Wait</code> and when we fire <code>LoadEmployeesResult</code> we can decrement the load.</p>\n<h2 id=\"What’s-Wrong-With-That\"><a href=\"#What’s-Wrong-With-That\" class=\"headerlink\" title=\"What’s Wrong With That?\"></a>What’s Wrong With That?</h2><p>Do you see the problem here? We now have a reducer responding to an event that is not obviously tied to an action that has anything to do with the code that is getting executed. <code>Wait</code> is not a <code>LoadEmployees</code> thing although, you might reasonably say it is a <code>Load</code> thing.</p>\n<p>And so how might we think about restructuring our code so that this makes more sense.</p>\n<h2 id=\"A-Change-In-Perspective\"><a href=\"#A-Change-In-Perspective\" class=\"headerlink\" title=\"A Change In Perspective\"></a>A Change In Perspective</h2><p>What if instead of naming actions what we wanted to do, we named them something more along the lines of what just happened.  That would make our <code>LoadEmployees</code> action <code>NeedEmployees</code> and our <code>LoadEmployeesResult</code> action, <code>EmployeesLoaded</code>.</p>\n<p>Even these names don’t get at the fact that Needing Employees doesn’t mean we need to increment the wait state.</p>\n<h2 id=\"Rethinking-The-Problem\"><a href=\"#Rethinking-The-Problem\" class=\"headerlink\" title=\"Rethinking The Problem\"></a>Rethinking The Problem</h2><p>One way we can think about this problem is to look at other messaging systems, like the windows messaging system. It’s been a while since I’ve used the raw messages in Windows but I seem to recall a <code>WM_BUTTON</code> or <code>WM_BUTTON_CLICK</code> message that would get passed to my application when a button was clicked.  One message for every button in my system that had, as part of the payload, what button was clicked so my code could listen for that message for that button and do something because of it.</p>\n<p>We could do something similar with the code above. Instead of tying the actions to particular code we want to run, our actions could be more generic.<br>What if we had two generic messages, <code>Load</code> and <code>LoadResult</code>. The payload for these messages could then have a <code>LoadType</code> property that defined WHAT we were loading so that we could Load Employees, Addresses, and Phone Numbers all using the same two actions and we could also use <code>Load</code> and <code>LoadResult</code> to increment and decrement our wait state.</p>\n<p>This would work except we still have a problem.</p>\n<h2 id=\"That’s-Not-How-It-Was-Designed\"><a href=\"#That’s-Not-How-It-Was-Designed\" class=\"headerlink\" title=\"That’s Not How It Was Designed\"></a>That’s Not How It Was Designed</h2><p>Most of the tools we currently have in place to reduce the boiler plate code we need to write are based on a one-to-one relationship between actions and the code that gets run. This isn’t to say that we couldn’t adapt them but doing so would be more trouble than it is worth because we would be working against the intended design.</p>\n<p>And so, I would suggest to you that the advice the current literature gives us about using Actions to trigger multiple blocks of code is wrong. Since Actions are primarily used as loosely coupled method calls, using them in unrelated places violates the Single Responsibility Principle and makes the code hard to follow.</p>\n<p>I’ve seen one code base where the code that gets triggered has absolutely nothing to do with the Action that triggers it. Not something in the simple case of LoadEmployee triggering Wait, but in more obscure relationship like <code>LoadCandyBars</code> triggering <code>LoadSteakDinner</code>.  The result is that the code becomes extremely difficult to follow. This is one of the biggest causes of bugs in this system.</p>\n<h2 id=\"Maybe-This-Will-Work\"><a href=\"#Maybe-This-Will-Work\" class=\"headerlink\" title=\"Maybe This Will Work\"></a>Maybe This Will Work</h2><p>For our discussion about the Wait state, I would suggest that we create a separate set of Actions for our Wait state, possibly WaitStart() and WaitEnd() that get fired when we fire EmployeeLoad() and EmployeeLoadResult(). You could wrap these calls in a function or method to ensure they always get called together, but the actions themselves need to be unique to make the code easier to follow.</p>\n<p>Currently, this is my recommended implementation. While not ideal, it gets the job done and makes maintaining the code simple and straight forward even if I do have to duplicate more Actions that I would like to.</p>\n",
            "tags": [
                "angular",
                "react",
                "ngrx",
                "redux"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-avoid-binding-to-computed-values-in-angular/",
            "url": "http://davembush.github.com/how-to-avoid-binding-to-computed-values-in-angular/",
            "title": "How to Avoid Binding to Computed Values in Angular",
            "date_published": "2021-05-08T15:55:53.000Z",
            "content_html": "<p>In my previous article about <a href=\"../optimizing-angular-for-speed/\">Angular Performance</a>, I indicated that one of the many ways you can produce an Angular application that performs well is by ensuring that you bind to a computed value.</p>\n<p>First, what did I mean by that?</p>\n<span id=\"more\"></span>\n\n<p>There two ways you might bind to a computed value.</p>\n<p>The most obvious way is by calling a method in the template’s corresponding class. But, properties count to. To be clear, a property is some code that uses a <code>get</code> prefix.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title function_\">somePropertyNameHere</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;something here&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now, you might think you need to avoid this when you use the square brackets to assign a variable to a component property, but this also goes for ngIf and ngFor code as well.</p>\n<p>What we are striving for is to not have the template recompute anything unless the data has actually changed.</p>\n<p>The only exception to this is the ngFor trackBy attribute which is used to ensure the whole list doesn’t re-render just because the array changed. I’m assuming you are using this.</p>\n<p>But, you say, I NEED to compute those values in order to display them correctly.</p>\n<p>OK, let’s assume for a second that this is true. The way you do this is with pipes.</p>\n<h2 id=\"Pipes\"><a href=\"#Pipes\" class=\"headerlink\" title=\"Pipes\"></a>Pipes</h2><p>You should already be familiar with pipes because this is how we format dates, format numbers and subscribe to observables in the template.  But you aren’t limited to using the built-in pipes. You can create your own, and it is quite easy to do.</p>\n<p>All you need is a class with the <code>@pipe</code> attribute that implements the <code>PipeTransform</code> interface.</p>\n<p>The code you would normally place in the method of property of your component class can go in here instead.</p>\n<p>By doing this, Angular can see that the variable that is passed to it has changed, or not, and can determine when the code needs to be recomputed.</p>\n<h2 id=\"ngOnChanges\"><a href=\"#ngOnChanges\" class=\"headerlink\" title=\"ngOnChanges()\"></a>ngOnChanges()</h2><p>Another way you might achieve the same goal is by trapping the <code>ngOnChanges()</code> event for the component.</p>\n<p>Many times, any value that we would compute in a method or property to be pulled from the template is only going to change if an <code>@input</code> value changed.</p>\n<p>Instead of pulling the value and computing it on every change detection cycle, you can listen for the dependency during the <code>ngOnChanges</code> event and assign the new value to a class field and have your template look at the field instead.</p>\n<p>Be careful though. If you are lazy and recompute the field every time <code>ngOnChanges()</code> is called, you really haven’t gained anything by it.  <code>ngOnChanges()</code> will pass into you exactly what changed and you can use that to determine if the value should be recomputed.</p>\n<h2 id=\"NgRX-Store-Selector\"><a href=\"#NgRX-Store-Selector\" class=\"headerlink\" title=\"NgRX Store Selector\"></a>NgRX Store Selector</h2><p>My favorite means of achieving the goal of not calling computed values is by using NgRX Store Selectors.</p>\n<p>When you are new to NgRX you may only be using the simple selector.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> observerThing = <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">select</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.<span class=\"property\">storeSlice</span>));</span><br></pre></td></tr></table></figure>\n\n<p>And of course you can drill down from storeSlice into children if you need to.</p>\n<p>If you’ve graduated to Feature Selectors, your code may have graduated to:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> observerThing = <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">select</span>(featureSelector));</span><br></pre></td></tr></table></figure>\n\n<p>where <code>featureSelector</code> looks something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">createSelector</span>(</span><br><span class=\"line\">  <span class=\"title function_\">createFeatureSelector</span>(<span class=\"string\">&#x27;feature&#x27;</span>),</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.<span class=\"property\">featureSlice</span>);</span><br></pre></td></tr></table></figure>\n\n<p>but there are other uses for <code>createSelector</code>.</p>\n<p>You can use it to combine slices:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">createSelector</span>(</span><br><span class=\"line\">  slice1Selector,</span><br><span class=\"line\">  slice2Selector,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">s1, s2</span>) =&gt;</span> combineLogicGoesHere</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>Or, you can use it to create a selector for a specific bit of information.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">createSelector</span>(</span><br><span class=\"line\">  sliceSelector,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">s1</span> =&gt;</span> s1.<span class=\"property\">s1Part</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>And by combining this, we can create a selector that does our formatting for us only when the underlying data has changed.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> partSelector = <span class=\"title function_\">createSelector</span>(</span><br><span class=\"line\">  sliceSelector,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">s1</span> =&gt;</span> s1.<span class=\"property\">s1Part</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> formatedPart = <span class=\"title function_\">createSelector</span>(</span><br><span class=\"line\">  partSelector,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">ps</span> =&gt;</span> <span class=\"title function_\">formatPsHere</span>(ps)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>And now, our template can listen to this the same as it would listen to any other selector.</p>\n<p>This is the method I most prefer. By pushing this code down into a selector, I don’t have to be concerned with explicitly detecting what has changed. I let the selector do that for me. I just respond to the change when it happens.</p>\n",
            "tags": [
                "angular",
                "ngrx",
                "functional",
                "reactive",
                "mvp"
            ]
        },
        {
            "id": "http://davembush.github.com/rxjs-conditional-logic/",
            "url": "http://davembush.github.com/rxjs-conditional-logic/",
            "title": "rxjs-conditional-logic",
            "date_published": "2020-11-05T13:01:10.000Z",
            "content_html": "<p>The temptation, when using RxJS is to include conditional logic inside your map, tap, or subscribe blocks.  But there is a much better way to deal with conditional logic that will make your code much easier to read and reason about. It also should make your code easier to test. But of course, once you have code that is easy to test, you probably no longer need to test it.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h2><p>The easiest, most straight forward way to handle conditional logic is by using the <code>filter()</code> operator.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">streamThing.<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> condition),</span><br><span class=\"line\">    <span class=\"comment\">// additional code here</span></span><br><span class=\"line\">  ).<span class=\"title function_\">subscribe</span>();</span><br></pre></td></tr></table></figure>\n\n<p>This code shouldn’t look so strange.  It pulls your logic out from within whatever additional logic you have and also reduces your need for multi-line map, tap or subscribe blocks.</p>\n<h2 id=\"Partition\"><a href=\"#Partition\" class=\"headerlink\" title=\"Partition\"></a>Partition</h2><p>On the other hand, you may need an if&#x2F;else block.  This is what <code>partition</code> is for.  The partition function is considered an Observable creation function because it takes one stream and returns two more.</p>\n<p>The <code>partition</code> function works similar to the <code>filter()</code> operator.  You pass in the stream you want to split and the predicate for the truthy evaluation and the function returns an array where element 0 is the true Observable and element 1 is the false Observable.</p>\n<p>Where things can get tricky with this operator is that each stream inherits the stream it was based on.  If you subscribe to either, it will trigger whatever action created the original Observable.  That is, if your original Observable is based on a call to the server and you subscribe to both of the new Observables that <code>partition()</code> created, you call to the server will happen twice.</p>\n<p>Therefore, you should <code>share()</code> the original Observable before you split it with <code>partition()</code>.  This will prevent the original Observable creations from getting called twice.</p>\n<p>Once you have the two Observables, you’ll probably want to merge them back together at some point and subscribe to both at the same time.  There are multiple ways you might consider doing this, but you will use <code>merge()</code> most often.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [trueObs, falseObs] =</span><br><span class=\"line\">  <span class=\"title function_\">partition</span>(</span><br><span class=\"line\">    originalObs</span><br><span class=\"line\">      .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">share</span>()),</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> <span class=\"comment\">/* x true condition */</span>)</span><br><span class=\"line\"><span class=\"title function_\">merge</span>(trueObs, falseObs)</span><br><span class=\"line\">  .<span class=\"title function_\">subscribe</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Case-Statements\"><a href=\"#Case-Statements\" class=\"headerlink\" title=\"Case Statements?\"></a>Case Statements?</h2><p>The closest operator we have to a being able to perform case statements is <code>groupBy()</code>. But this is not typically not what you want because you have no idea where the result will show up in the results.</p>\n<p>No, the best you can do is to start with a base <code>Observeable</code> and use a filter against it for each of the conditions and then merge all the results back together.</p>\n<p>In fact, you may find that using two filters makes your code easier to reason about than if you were to use <code>partition()</code>.</p>\n",
            "tags": [
                "RxJS"
            ]
        },
        {
            "id": "http://davembush.github.com/fixing-single-responsibility/",
            "url": "http://davembush.github.com/fixing-single-responsibility/",
            "title": "Fixing Single Responsibility",
            "date_published": "2020-10-04T17:58:05.000Z",
            "content_html": "<p>The Single Responsibility principle is a well-known, Object Oriented principle that states that we should narrow the scope of the code in our Module&#x2F;Class&#x2F;Function so that is it only responsible for one thing.</p>\n<p>By doing so, this reduces the size of our code that needs to be tested.</p>\n<p>Linting rules can generally help enforce this rule by making sure your Class file isn’t too long, and your functions are not too complex. But there are other ways of violating this principle that linting rules can not pick up.</p>\n<span id=\"more\"></span>\n\n<p>For example, in the world of Entity Framework, there has been a design pattern that has us putting our code in distinct layers.</p>\n<ul>\n<li>Controller</li>\n<li>Business Logic</li>\n<li>Repository</li>\n<li>Data Access</li>\n</ul>\n<p>In the world of Angular, you may be using NgRX and OnPush notification (if you aren’t you should). Here are the layers you should see in an Angular project:</p>\n<ul>\n<li>Component</li>\n<li>Component-Service</li>\n<li>NgRX<ul>\n<li>Actions</li>\n<li>Reducers</li>\n<li>Effects</li>\n<li>Selectors</li>\n</ul>\n</li>\n</ul>\n<p>In both of these architectures, you can completely jumble your code by putting it in the wrong place.</p>\n<p>You see, Single Responsibility is not only about “doing one thing” but it is also about understanding WHERE the code goes so that each layer of the code is only responsible for one thing.</p>\n<h2 id=\"A-Place-for-Everything-…\"><a href=\"#A-Place-for-Everything-…\" class=\"headerlink\" title=\"A Place for Everything …\"></a>A Place for Everything …</h2><p>Both of these architectures have a definition of where everything goes. I continue to see, in both cases, code going in the wrong location.</p>\n<h3 id=\"Entity-Framework-Example\"><a href=\"#Entity-Framework-Example\" class=\"headerlink\" title=\"Entity Framework Example\"></a>Entity Framework Example</h3><p>A couple of examples.  The Repository layer is where we retrieve our data. This might be from the database and often is, but it might also be from a service of some sort.</p>\n<p>The Business Logic layer is where we perform actions on that data to do some sort of meaningful work.</p>\n<p>Clear?</p>\n<h4 id=\"Repository-or-Business-Logic\"><a href=\"#Repository-or-Business-Logic\" class=\"headerlink\" title=\"Repository or Business Logic\"></a>Repository or Business Logic</h4><p>Well, I guess it isn’t because what I often see is the conflation of the two so that, most often, you end up with Business logic inside the Repository.</p>\n<p>Unfortunately, there is an easy rule to follow that eliminates most of this.</p>\n<p>The only thing your repository should return is an IQueryable of the type represented by the Repository name.  If your repository is for accessing a particular table, it should return an IQueryable of that table’s Model and ONLY IQueryables for that Model.  Not some of one Model and some of another.</p>\n<blockquote>\n<p>Yes, I know, technically speaking, the Repository is both dead and could also return IEnumerable, but I find that adds to the problem of putting Business Logic inside the Repository.  So, I’m going to assert that IF you are going to use the Repository pattern, it really should ONLY return IQueryable.</p>\n</blockquote>\n<p>In a typical Entity Framework application, your goal is to not actually retrieve data until you are in the Business Logic layer.  By returning IQueryable, you prevent any data retrieval from occurring and you also give yourself and your team the added benefit of being able to use multiple methods in your repository from the business logic layer by combining them all into one query.</p>\n<p>Code reuse and a possible performance gain.  What could be better?</p>\n<h4 id=\"Projects\"><a href=\"#Projects\" class=\"headerlink\" title=\"Projects\"></a>Projects</h4><p>The other place I see issues with the Single Responsibility principle while using Entity Framework is when try to cram multiple classes for a layer into one project.  A good dose of Domain Driven Design would go a long way to helping this but here again, we need to consider what we are trying to do and the impact we are having on future coding efforts.</p>\n<p>On really large projects, you can particularly end up with migration headaches because you’ve managed to combine everything into one Context.  If you were to break your models into multiple context, you could avoid many of these conflicts because they would each have their own migration history.</p>\n<p>Similarly, at the controller level, you should consider how much sense it makes to add yet another end point to an existing class.  Or maybe it makes more sense to start a new class.</p>\n<h3 id=\"Angular\"><a href=\"#Angular\" class=\"headerlink\" title=\"Angular\"></a>Angular</h3><h4 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h4><p>Angular components are pretty easy to create and, most of the time use code that has already been tested.  It is the logic of our components that is hard to test.  To separate the two, I suggest using a Component-Service leaving the only logic that is in the component.ts file logic that is specific to the presentation.</p>\n<p>Think of it this way.  If you had to replace the presentation layer?  How much of the code would you have to duplicate or rewrite?  If you push that code down a layer, would that simplify things for you?</p>\n<h4 id=\"NgRX\"><a href=\"#NgRX\" class=\"headerlink\" title=\"NgRX\"></a>NgRX</h4><p>One of the more difficult concepts for most people to wrap their heads around fully is the concept of NgRX.  With in this, where do I message my data?</p>\n<p>The temptation is to message the data in the component or the component-service.  But a better location is in a function that a selector calls.  By doing this, you only end up messaging the data IF the underlying data changes and now your component and component service become ways of displaying what’s in your store.</p>\n<p>In fact, you may find that your component service has nothing to do because all the work has been done in the selector.</p>\n<h2 id=\"The-Real-Problem\"><a href=\"#The-Real-Problem\" class=\"headerlink\" title=\"The Real Problem\"></a>The Real Problem</h2><p>Given these examples, you’d expect me now to dive into how to really work these patterns.  But, I’ve been intentionally vague about the solutions because the problem isn’t really about where stuff lives or how closely we follow the Single Responsibility principle.</p>\n<p>The problem is that too many of us are hackers and not learners.</p>\n<p>I made the comment to a friend of mine recently that the reason I don’t believe a team should have options on architecture is because, largely the people on the team “learn” by copy and pasting existing code. Even if it is wrong.</p>\n<p>And so, the reason we have issues with Single Responsibility at all is because, as an industry, we believe we can just dump people into a new language or a framework and they’ll “pick it up.”  Managers need to get beyond, “well it works” to “can this be maintained?”</p>\n<p>To do this they need to do several things up front:</p>\n<p>First, make sure their developers understand the patterns and practices they are using. This may mean sending them to training. This may mean pairing them with someone who you know already knows.</p>\n<p>Second, you need a watchdog on your team to ensure that patterns are followed closely. In my experience, this is not something that comes naturally to programmers.</p>\n<p>I’ve frequently said that it takes most programmers 5 years just to get to a point where they’ve stopped learning how to program and see programming as more than just learning the syntax of a language.  It takes another 5 years before they begin to see the advantages of architecture, if they see it at all. It could take another 10 years past that before they are able to mentor and train others.</p>\n",
            "tags": [
                "Single Responsibility",
                "Architecture"
            ]
        },
        {
            "id": "http://davembush.github.com/you-aren%E2%80%99t-doing-scrum-if%E2%80%A6/",
            "url": "http://davembush.github.com/you-aren%E2%80%99t-doing-scrum-if%E2%80%A6/",
            "title": "You Aren’t Doing Scrum If…",
            "date_published": "2020-06-20T11:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2015/01/YouArentDoingScrumIf.png\" alt=\"You Aren&#39;t Doing Scrum If...\" title=\"YouArentDoingScrumIf\">I’ve been frustrated lately by the flippant use of the words “Scrum” and “Agile” in our industry. </p>\n<p>Actually, I’m STILL frustrated.  I originally wrote this article January 2015.  Not only is it still true.  It is <strong>more</strong> true.</p>\n<p>Our industry has been treating Scrum and Agile as “buzzwords that mean nothing.” These words get slapped onto job requirements like the typical requirements we’ve all seen.</p>\n<ul>\n<li>Must be able to communicate</li>\n<li>Must be able to work in a team environment</li>\n<li>Must be able to work under pressure</li>\n<li>Must be able to work in an Agile environment</li>\n</ul>\n<p>What’s really funny is when I see</p>\n<ul>\n<li>Meet tight deadline</li>\n<li>Expert in Agile</li>\n</ul>\n<p>together in the same job request.</p>\n<p>And even if it doesn’t show up in the job description.  Once you get into the organization, you find out they are no different than any other organization.  All those promises about running “Agile” or “Scrum” as a well of figuring out how long a project will take fly right out the window as soon as a manager wants something done by a specific date.</p>\n<p>If management ain’t Agile, ain’t no one Agile.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Really-Do-you-know-what-you’re-saying\"><a href=\"#Really-Do-you-know-what-you’re-saying\" class=\"headerlink\" title=\"Really?  Do you know what you’re saying?!\"></a>Really?  Do you know what you’re saying?!</h2><p>Many people even use the words “Agile” and “Scrum” interchangeably.  Most because they really do think they are the same thing.</p>\n<p>I’m finding that what most people mean when they use these words is, either, “we work really fast”, “we work iteratively”, or “we don’t really have a plan.”</p>\n<h2 id=\"So-the-first-thing-we-need-to-clarify-is-what-is-Scrum-and-what-is-Agile\"><a href=\"#So-the-first-thing-we-need-to-clarify-is-what-is-Scrum-and-what-is-Agile\" class=\"headerlink\" title=\"So, the first thing we need to clarify is, what is Scrum and what is Agile.\"></a>So, the first thing we need to clarify is, what is Scrum and what is Agile.</h2><p>Agile is a set of values.  It is what we believe about software development specifically and, I would argue, also impacts how we view life.  You might have other beliefs that live on top of Agile, but these beliefs will have an impact on how you manage the software development process specifically and your organization in general. Check out the <a href=\"//www.agilemanifesto.org/\">Agile Manifesto</a>.  This is what it means to be Agile.</p>\n<p>In contrast to this, Scrum is a methodology that helps an organization BE agile.</p>\n<p>Now here is where things get tricky for some people.  They read in the manifesto that we should value “Individuals and interactions over processes and tools” and think that they can make Scrum be whatever they want it to be because, they would say, “we don’t value processes and tools”.</p>\n<p>But the Agile Manifesto never says that.  It says we value individuals and interactions MORE than, not INSTEAD of, processes and tools.</p>\n<p>So, yes, you can adapt and modify Scrum to fit your situation.  You may need to.  But there are some specific elements of Scrum that you simply can’t ignore because to do so would mean either that you are no longer Agile or you are not implementing Scrum.</p>\n<h2 id=\"And-so-you-aren’t-doing-Scrum-if\"><a href=\"#And-so-you-aren’t-doing-Scrum-if\" class=\"headerlink\" title=\"And so, you aren’t doing Scrum if:\"></a>And so, you aren’t doing Scrum if:</h2><h4 id=\"You-have-deadlines-especially-if-you-have-“tight-deadlines”\"><a href=\"#You-have-deadlines-especially-if-you-have-“tight-deadlines”\" class=\"headerlink\" title=\"You have deadlines, especially if you have “tight deadlines”\"></a>You have deadlines, especially if you have “tight deadlines”</h4><p>“Now wait a minute,” you say, “I heard that Scrum has these things called ‘Sprints’ that are a fixed length.  Don’t those qualify as ‘deadlines?’” Well, yes and no.  You see, I don’t think what Scrum treats as a “deadline” is what most managers mean by “deadline.” At the end of the day you’ll get to the end of the Sprint and you’ll show what you’ve got.  The GOAL is to have a complete set of code that you wouldn’t be embarrassed to show to another programmer.  You should have only selected what could reasonably get done in the timeframe of a sprint so that all that needs to be done to complete the task could get done.</p>\n<p>One of the confusions is that somewhere along the line we were told that at the end of each sprint we should have a “shippable unit of software” and we’ve confused that with “a viably marketable product”  All that shippable means is, “if the customer thinks what you’ve completed so far is something they can use, you would not respond with, ‘but it still needs…’” This ties in with the other way you know you aren’t doing Scrum</p>\n<h4 id=\"You-aren’t-doing-scrum-if-you-don’t-have-a-“definition-of-done-”\"><a href=\"#You-aren’t-doing-scrum-if-you-don’t-have-a-“definition-of-done-”\" class=\"headerlink\" title=\"You aren’t doing scrum if you don’t have a “definition of done.”\"></a>You aren’t doing scrum if you don’t have a “definition of done.”</h4><p>And once again, there is confusion.  To most people, the “definition of done” is “I can ship this code.”  But that may not be appropriate.  You’re definition of done during your first sprint may be “a set of stories that begin to describe the application we are trying to build.”  As you are learning scrum, you’re definition of done may be as simple as, “all of the code we’ve written so far have Unit Test, appropriate documentation, and we’ve learned something of how long a story point will take our team.” Definition of done doesn’t always have to mean “I’ve written code I can ship.”</p>\n<h4 id=\"You-aren’t-doing-Scrum-if-you-HAVE-to-work-more-than-40-hours-a-week\"><a href=\"#You-aren’t-doing-Scrum-if-you-HAVE-to-work-more-than-40-hours-a-week\" class=\"headerlink\" title=\"You aren’t doing Scrum if you HAVE to work more than 40 hours a week.\"></a>You aren’t doing Scrum if you HAVE to work more than 40 hours a week.</h4><p>One of the benefits of Scrum is that it allows us to pace ourselves.  We no longer scramble to get stuff done.  We work consistently toward the goal.  But it isn’t a race.</p>\n<p>I have a rule.  If I tell you something will be done by a set time, I’ll bust my butt to make that happen.  If you tell me when it will be done, good luck with that.</p>\n<p>Of course, even when I tell someone when something will be done, I pad the estimate with enough hours that I never work more than 45 hours a week.  There is one day, in the 26 years I’ve been doing this where I worked longer than 12 hours.</p>\n<p>In fact, I had one manager who called me into his office and asked me to come in on Saturdays.  I was already working 10 hour days 5 days a week!  Talk about getting blood out of a turnip! I looked him straight in the eye and said, “I have 50 hours a week in me.  I’d prefer to give them to you Monday through Friday.  But if you want me to come in on Saturday, I can do that, but you are still only going to get 50 hours a week.” Needless to say, I never came in on Saturday.</p>\n<h2 id=\"I-could-go-on…\"><a href=\"#I-could-go-on…\" class=\"headerlink\" title=\"I could go on…\"></a>I could go on…</h2><p>But I won’t</p>\n",
            "tags": [
                "agile",
                "scrum"
            ]
        },
        {
            "id": "http://davembush.github.com/an-angular-application-architecture-that-works/",
            "url": "http://davembush.github.com/an-angular-application-architecture-that-works/",
            "title": "An Angular Application Architecture That Works",
            "date_published": "2020-01-01T16:55:53.000Z",
            "content_html": "<p>The purpose of this article is to specify a working architecture that everyone can use for any Angular applications.  This architecture aims to achieve the following goals:</p>\n<ul>\n<li>Ensure that all parts of an application have a home so that anyone can pick up any application that uses this architecture and modify the application without having to learn where everything lives.</li>\n<li>Reduce the overall complexity of any one application by using well-established design patterns that work within the Angular ecosystem.</li>\n<li>Reduce the number of bugs introduced into an application by reducing the need for duplicate code.</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"Guiding-Principles\"><a href=\"#Guiding-Principles\" class=\"headerlink\" title=\"Guiding Principles\"></a>Guiding Principles</h2><ul>\n<li>Largely adhere to the <a href=\"https://angular.io/guide/styleguide\">Angular Style Guide</a></li>\n<li>Prefer Functional&#x2F;Reactive programming over Imperative&#x2F;Object Oriented programming.</li>\n<li>Prefer Composition over Inheritance when using Object Oriented programming</li>\n<li>For Object Oriented code, and where it applies, Functional&#x2F;Reactive code, make your code S..D<ul>\n<li>Adhere to the Single Responsibility Principle:<ul>\n<li>Keep the size of the individual files (html, css, ts) small</li>\n<li>Separate file for each class, function, interface, enum, etc.</li>\n<li>Keep the cyclomatic complexity of functions and methods small.</li>\n</ul>\n</li>\n<li>Keep your code DRY</li>\n<li>Because we prefer Composition over Inheritance, the OLI part of SOLID don’t apply.</li>\n</ul>\n</li>\n<li>Prefer composition over child routes.</li>\n</ul>\n<h2 id=\"Directory-Structure\"><a href=\"#Directory-Structure\" class=\"headerlink\" title=\"Directory Structure\"></a>Directory Structure</h2><p>Let’s start with the directory structure our applications will use.  To start with, the directory structure outlined in the <a href=\"https://angular.io/guide/styleguide\">Angular Style Guide</a> should be used with some minor modifications that still obey the general principles outlined in the style guide.</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">projectFolder</span><br><span class=\"line\">+- src</span><br><span class=\"line\">  +- core</span><br><span class=\"line\">  +- dialogs</span><br><span class=\"line\">    +- dialog1</span><br><span class=\"line\">      +- helper-component-1</span><br><span class=\"line\">      +- helper-component-2</span><br><span class=\"line\">      main dialog files go here directly</span><br><span class=\"line\">      under the dialog directory</span><br><span class=\"line\">        - html, css, ts</span><br><span class=\"line\">        - dialog specific NgRX code</span><br><span class=\"line\">    +- dialog2</span><br><span class=\"line\">      +- helperComponent3</span><br><span class=\"line\">      main dialog files go here</span><br><span class=\"line\">    +- etc...</span><br><span class=\"line\">  +- routes</span><br><span class=\"line\">    +- route-1</span><br><span class=\"line\">      +- supporting-component-1</span><br><span class=\"line\">      +- store</span><br><span class=\"line\">        supporting route specific NgRX files go here</span><br><span class=\"line\">        these include actions, effects, services, reducers,</span><br><span class=\"line\">        and selectors.  Each set of files get their own</span><br><span class=\"line\">        directory. The extensions for each are:</span><br><span class=\"line\">        - *.actions.ts</span><br><span class=\"line\">        - *.effects.ts</span><br><span class=\"line\">        - *.service.ts</span><br><span class=\"line\">        - *.reducer.ts</span><br><span class=\"line\">        - *.selector.ts</span><br><span class=\"line\">        route store slice module goes here</span><br><span class=\"line\">      route1 components go here</span><br><span class=\"line\">      route1 module goes here</span><br><span class=\"line\">    +- route-1-subroute-a</span><br><span class=\"line\">      similar to above.  This is only IF you have sub-routes.</span><br><span class=\"line\">      I strongly advise against them.</span><br><span class=\"line\">  +- shared</span><br><span class=\"line\">    +- components</span><br><span class=\"line\">      only components that are shared between routes go here</span><br><span class=\"line\">    +- store</span><br><span class=\"line\">      only store files that are shared between routes go here</span><br><span class=\"line\">    +- services</span><br><span class=\"line\">      only services, if any, that aren&#x27;t used by your store go here</span><br></pre></td></tr></table></figure>\n\n<p>What is slightly different from the style guide is that a separate directory is created for dialogs and routes as these will be where my top-level components will live.  Within a route or a dialog, everything that route or dialog needs should live under it.  In the case where a class is needed by multiple routes or dialogs, these files live under shared.</p>\n<p>As a guiding principle, you should think of each route as a stand-alone application with its own module.  It should be able to run on its own using the classes, functions, etc from either its directory and sub-directories or the classes, functions, etc in the shared directory.</p>\n<p>This leads us to Lazy Loading</p>\n<h2 id=\"Lazy-Loading\"><a href=\"#Lazy-Loading\" class=\"headerlink\" title=\"Lazy Loading\"></a>Lazy Loading</h2><p>While it is possible to create an application where the routes are all specified in one file, this file will quickly get out of hand if you are working with a large application.  You can save yourself a lot of trouble and reduce the cognitive load necessary to digest one file with all the routes if you commit to lazy loading up front.</p>\n<h3 id=\"Routes\"><a href=\"#Routes\" class=\"headerlink\" title=\"Routes\"></a>Routes</h3><p>What this means from a practical perspective is that each route will be loaded in as it is needed. One of the side benefits of this is that the files necessary to run each route will only be loaded as they are needed. This will decrease the time it takes to load the application.</p>\n<p>You will, however, need to ensure that each route can be loaded directly because sometimes taking the expected path will load modules that you forgot to load as part of the route.</p>\n<h3 id=\"NgRX\"><a href=\"#NgRX\" class=\"headerlink\" title=\"NgRX\"></a>NgRX</h3><p>Similarly, you should make use of feature stores in NgRX so that you can dynamically add in store slices with each module rather than loading them all in when the application loads.  Done correctly, this will also reduce the cognitive load around your store structure as you will only need to be concerned about the store structure for each route.</p>\n<p>For consistency’s sake, I create feature slices in my shared folder for NgRX slices that are shared rather than load them all at the application level. Again, this reduces the cognitive load necessary to understand any one part of the application. It has the added benefit of making it easier to move slices of the store from a route feature to a shared feature because the structure remains essentially the same.</p>\n<h2 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h2><p>A large part of the front-end code is written using components which include the route, controls, and components that encompass blocks of components.</p>\n<p>The following addresses how to create components in a way that can be maintained.</p>\n<h3 id=\"Keep-em-Small\"><a href=\"#Keep-em-Small\" class=\"headerlink\" title=\"Keep em Small\"></a>Keep em Small</h3><p>One of the main problems I’ve seen in my career with all code, but especially components, is that we try to put all the code for a page all in one place. We don’t even think of the third category of components.  My advice for your template code is that once it has gotten past the point of code that can’t fit in a file that is 150 lines long and 80 characters wide, or has nested to a point beyond 6 elements, you should consider breaking them out. There may be a few exceptions, but this metric will keep your code easy to understand.</p>\n<p>One way you can reduce the nesting without a lot of effort is to style the @host element of the template rather that using a containing DIV tag around the other elements that are the functional components of your component.  Other than because it reduces nesting, it also eliminates a layer of HTML that needs to be rendered. Since we are going to favor lots of small components over a few large components, this will, ultimately, impact the performance of your application.</p>\n<p>Another way you can reduce nesting is by recognizing patterns in your code and extracting them into their own component.</p>\n<p>Finally, consider measuring the cyclomatic complexity of your templates.  Codelyzer has a rule you can add to your linting.  I’d set this to no more than 10.  Cyclomatic complexity measures how many paths there are through your code.  Once you’ve added if, switch or for loops in your template, you’ve introduced some cyclomatic complexity. If you keep to the metrics I’ve already mentioned, you should never hit the cyclomatic complexity metric.</p>\n<h3 id=\"Component-Services\"><a href=\"#Component-Services\" class=\"headerlink\" title=\"Component Services\"></a>Component Services</h3><p>Let’s talk about the purpose of components for a bit. The point of components is to allow the end user to interact with the program. In practical terms this means it has two jobs:</p>\n<ul>\n<li>Display data that is meaningful to the user</li>\n<li>Allow the user to issue commands that either manipulate the data or take them to another screen.</li>\n</ul>\n<p>This is true for whatever programming environment you are using.</p>\n<p>I’ve been programming now for 32 years and I still see programmers who try to make the component, or the view as they are sometimes called, do something else.</p>\n<p>This also means that business rules have no place in a component.</p>\n<p>Having said that, it is often true that to get the data to display we often need to introduce logic into our component somewhere. Once we’ve introduced logic, it would be great if we could also write unit tests for that logic without a lot of pain.</p>\n<p>If we put this code in the TS file that is our component, this means that in order to test the logic we need to scaffold the component.  Wouldn’t it be better or at least easier, if we didn’t need the component at all?</p>\n<p>This is where component services come in.  If you are familiar with the Model View Presenter design pattern, this is an adaptation of that.</p>\n<p>You can read details of how this is implemented on the following two sites:</p>\n<ul>\n<li><a href=\"https://davembush.github.io/model-view-presenter-angular-and-testing/\">Model View Presenter, Angular, and Testing</a></li>\n<li><a href=\"https://dev.to/this-is-angular/model-view-presenter-with-angular-533h\">Model View Presenter with Angular</a></li>\n</ul>\n<p>The basic idea is that you leave the component as the thing that only presents the data and receives notifications from the user. Any logic that is needed goes into an Angular service that is registered with the component using the viewProviders property of the @Component decorator.</p>\n<p>One thing to be careful of here is that you may be tempted, as I have been for a while, to pull the information from the service up into the view. The problem with this is that it is not an optimal implementation for change detections.</p>\n<p>The preferred method would be to use the model as it was originally intended and have the service set fields in the presentation layer so that change detection only happens when the data actually changes rather than every time the component is checked simply because your data has to be computed in a property or method every time.</p>\n<p>And while we are discussing change detection, you should also avoid changing the state of your component internally. By using OnPush notification, all changes have to come in on an <code>@Input()</code> field for the component to know it has to do change detection. You can, of course, get around this by using <code>markForCheck()</code> but the disadvantage there is that you may force change detection more often than it is actually needed.</p>\n<p>This is why we prefer the smart component&#x2F;dumb component model. It forces many of these issues. To do this properly, you’ll probably need to create child components so you can take advantage of the <code>@Input()</code> fields.</p>\n<h3 id=\"Smart-x2F-Dumb\"><a href=\"#Smart-x2F-Dumb\" class=\"headerlink\" title=\"Smart&#x2F;Dumb\"></a>Smart&#x2F;Dumb</h3><p>Broadly speaking, Angular components can be classified as “Smart Components” or “Dumb Components”.  Smart Components get their data form the outside world and pass data out to the outside world.  In the architecture defined here, that will be from the NgRX store via selectors and into the NgRX store using Actions.</p>\n<p>Dumb Components render data they are passed via the @Input() decorators and fire events back up to the containing component via @Output() decorators.</p>\n<p>A lot of people understand these concepts but misunderstand how they apply to an Angular application. You can’t follow these rules simply by wrapping your Dumb Components in Smart Components. While this technically obeys the definition, the result is code that is hard to understand. What we want is a central location in our code that is always responsible for getting data to and from the store.</p>\n<p>We do this by specifying that our Routes are the Smart Components.  This includes child routes, if you have them.</p>\n<p>I’ve found that it is often easier to make a dialog a smart component as well, so if you find this is easier than passing the data that the dialog needs to the dialog, you can make dialogs smart as well. This is why we have a <code>dialogs</code> directory and a <code>routes</code> directory as immediate children of the <code>app</code> directory.</p>\n<h3 id=\"Forms\"><a href=\"#Forms\" class=\"headerlink\" title=\"Forms\"></a>Forms</h3><p>Technically, there are two ways of programming forms using Angular. The first way uses the old 2-way data-binding model and is called “Templated Forms.” These were popular in AngularJS (aka Angular 1).  The second is new to Angular (aka Angular 2+) and is called “Reactive Forms”. Our architecture will use the newer model because it conforms to the guiding principle of keeping things as Functional as possible and removing as much logic from the component as possible.</p>\n<p>There are several implications of how we program our forms related to this.</p>\n<p>First, you will define your FormGroup(s) in the Route’s component service.</p>\n<p>Second, in order to keep your templates small, you may be a need to put bits of your form in child components. You will find that each child component needs its own <code>formGroup</code> attribute around the <code>formControls</code> that it is responsible for.  The best way to do this is to pass the <code>formGroup</code> down from the router into the child components and then assign that variable to the <code>formGroup</code> attribute in the child component’s template.</p>\n<p>For particularly complex forms, I recommend creating a formGroup object as a separate file in each component’s directory and then use <code>Object.assign()</code> to concatenate the parts into one whole.  This keeps the related code together while allowing you to assemble them into a form that Angular can use.</p>\n<h3 id=\"onPush-Notification\"><a href=\"#onPush-Notification\" class=\"headerlink\" title=\"onPush Notification\"></a>onPush Notification</h3><p>One of the optimizations available to Angular is a method of change detection called “Push Notification”.  Simply stated, with Push Notification enabled, change detection for the component is only initiated if new data has been pushed into it via one of it’s @Input() variables. Otherwise it is skipped.</p>\n<p>In a large application, the performance gains using this mechanism are enormous. This is particularly true of an application that has an extremely nested or repetitive set of components. Each instance will be checked with each event that would cause the change detection cycle to kick off.</p>\n<p>Since we will be striving to keep our components small, our apps are even more susceptible to the problems associated with change detection.</p>\n<p>While it is true that Push Notification handles most of the situations, you will find that occasionally data in your component changes for some other reason. For this, you should use the ChangeDetectorRef methods.</p>\n<h3 id=\"Styling\"><a href=\"#Styling\" class=\"headerlink\" title=\"Styling\"></a>Styling</h3><p>In an ideal world, you would have a theme that is external to all of your projects and that can be <code>npm install</code>ed into all the projects you work on.  This should control the basic look and feel of your application including:</p>\n<ul>\n<li>font color, size, family etc</li>\n<li>background color</li>\n<li>default style for common components</li>\n</ul>\n<p>Lacking a separate project for your theming information, place this information in a global styles.css file.</p>\n<p>Under no circumstance would you ever place the above information directly in a component file within your application.</p>\n<p>Also, because all the main information is going to be in your theme, there is no benefit to using SCSS within your project. And, in fact, every project I’ve ever been a part of that tried to use SCSS as part of the project has become more of a mess and harder to maintain because of it.</p>\n<p>Use SCSS for your theme project and CSS for your application projects.</p>\n<h2 id=\"NgRX-1\"><a href=\"#NgRX-1\" class=\"headerlink\" title=\"NgRX\"></a>NgRX</h2><p>We’ve already addressed some of how NgRX should be used when we talked about using Features instead of one great big Store blob.</p>\n<p>But, there are some other major places where NgRX gets misused that need to be addressed.</p>\n<h3 id=\"One-to-One-vs-One-to-Many\"><a href=\"#One-to-One-vs-One-to-Many\" class=\"headerlink\" title=\"One to One vs One to Many\"></a>One to One vs One to Many</h3><p>If you are new to NgRX, one of the first things that will seem like a really good idea is that you should be able to create an action and have multiple Reducers or Effects respond to it. If you were to act on this impulse, you would (eventually) find that this ultimately makes your code hard to maintain because you are now calling multiple functions “at the same time.”</p>\n<p>From a maintenance perspective, this is a problem.  Imagine trying to track down the flow of execution in your application only to find that when you get to point X you now have to trace the action down multiple paths, not really knowing which ultimately is executing the code you are really interested in.</p>\n<p>But, you have a further hidden problem. The order those functions get called is, for all practical purposes, undefined. At least, from a programming perspective, they should be considered undefined. The order is probably deterministic for any particular version of NgRX that you are running, but when you upgrade there is no reason to believe the code will still execute in the same order.</p>\n<p>Similarly, your actions, reducers, and effects should only relate to each other. You shouldn’t have an action that is part of slice A being handled by slice B even if it is a one-to-one relationship.</p>\n<p>Some code I’ve seen has also aliased actions so that, technically action A is actually action B. Don’t do that! All the above make your code incredibly hard to track flow of control.</p>\n<p>If you were to do this, which I still don’t recommend, you should create actions that are clearly multi-use actions.</p>\n<p>So what if indeed a particular event needs to kick-off or update seperate slices of a store? The can be answered in a few ways.</p>\n<ul>\n<li><p>It may be worthwhile re-examining the architecture of your overall store. Is there a good rational for why a single Action will impact separate slices of a store in the first place? This is especially important if the resulting actions end up doing the same thing or are using the same data. If so, consider normalizing the store slices and removing redundancies.</p>\n</li>\n<li><p>If that passes the sniff test, consider dispatching different actions in sequence for that event. For example, you may be updating different parts of the application each with different information and structure or different service calls. Under this scenario, separate store slices will be updated via different store action sets and different information structures, regardless of whether they were initiated by the same event.</p>\n</li>\n</ul>\n<p>To reiterate, do not mix the various store slice actions just to intercept the same event.</p>\n<h3 id=\"Flat-Store\"><a href=\"#Flat-Store\" class=\"headerlink\" title=\"Flat Store\"></a>Flat Store</h3><p>Another temptation you may encounter when you start working with NgRX is that you’ll return data from the server in a nested format and then try to deal with it in your reducer in that form.</p>\n<p>Don’t do that!</p>\n<p>Instead, flatten the data into multiple slices and use the Selectors to reassemble the data when you need it.</p>\n<p>If you are going to flatten the data on the client side, you should use <a href=\"https://www.npmjs.com/package/normalizr\">Normalizr</a>. Or, you could use <a href=\"https://www.npmjs.com/package/normalizr\">NgRX-Normalizr</a> and let it do some of the work for you.</p>\n<p>If you have the option, you should flatten your data on the server before you return it. The main advantage to doing this is that you will return less data.</p>\n<p>The reason you want to work with a flat store is because of immutability. Because the store is immutable, or at least, it SHOULD be, you will need to ensure that when you change an element of the data the object pointers above it all change as well. If you don’t, your change detection mechanisms won’t work correctly.</p>\n<p>If you use Normalizr and reassemble the nesting in your selectors, you won’t have to deal with this mess.</p>\n<h3 id=\"Store-Everything\"><a href=\"#Store-Everything\" class=\"headerlink\" title=\"Store Everything\"></a>Store Everything</h3><p>You also may be tempted to only store some of your application state in the NgRX store.  Maybe you think storing search form data is overkill. That you’ll pass the data over as it is needed. That might work, for a while.</p>\n<p>But think about this. Once you’ve placed the data in the store, when you come back to a particular route, the data is still there. If you don’t, the data is gone and you have to fill in the form again.</p>\n<p>You might say, “But that’s what I want them to do.” Yes, but, what if the customer changes their mind? Now you have options.</p>\n<p>Another advantage to the “Store Everything” approach is that you’ve pushed the logic for handling the data changes further down the stack. One place this becomes noticeable is that when you decide to process the data, you no longer have to pass the data with the Action to process the data. The Effect that processes the Action can now retrieve the data from the store.</p>\n<p>If nothing else, this makes the code easier to test.  Code that is easier to test is code that is easier to maintain, even if you never write any test for the code.</p>\n<h3 id=\"Data-Transformation\"><a href=\"#Data-Transformation\" class=\"headerlink\" title=\"Data Transformation\"></a>Data Transformation</h3><p>There are two places where data transformations might need to occur.  The first is after we retrieve the data or right before we send the data back. In an ideal world the server would always send back exactly what we need in the form we need it and we would send it back in a similar form. There are at least two advantages to this.  The first is that it will reduce the amount of processing that the client side code has to perform. Second, the data that that comes back will be generally smaller.</p>\n<p>The second place is as we are working with the data on the client side.</p>\n<p>One scenario where this would occur is when you update a field and the side effect is that data someplace else on the screen should change as well. Not because you retrieved data from somewhere but simply because you changed data in an input field.</p>\n<p>As I’ve already mentioned, we want to keep processing of data out of our components or even our component services unless the processing is specific to what the component does. The next logical place to put the processing of our store data is in our reducers.  But this has problems too. Maybe the data you want to display has no resemblance to the data that is in your store. Beyond that, this gets difficult to manage.</p>\n<p>Instead, the best place to handle data transformation is in your selector. Selectors have a function call as their last parameter that takes all the data slices from the previous parameters. This function can manipulate the data and return it in any way that makes sense for the application. It has the added advantage of being able to leverage memoization and changing the object pointer as I’ve already mentioned.</p>\n<h3 id=\"Services\"><a href=\"#Services\" class=\"headerlink\" title=\"Services\"></a>Services</h3><p>A final temptation may be to ditch the Services that the Effects use and go after the REST end points directly. This seems to make sense since the Effects and the Services are both <code>@Injectable()</code>s but the problem with this is primarily that it violates the Single Responsibility Principle.</p>\n<p>For retrieval of data, the Service is responsible for retrieving the data and possibly morphing it into the shape that we want it in. The Effect is primarily responsible for moving the resulting data into the store.</p>\n<p>The reverse is also true. Effects are responsible for collecting the data from wherever it is in the store and passing it to the Service.  The Service is responsible for sending that data to the server in the form that it needs it.</p>\n<p>One error I’ve seen is to inject the Store into the Service. The only <code>@Injectable()</code> that should be injected into your HTTP Service is HttpClient.</p>\n<h2 id=\"Angular-as-Functional-x2F-Reactive\"><a href=\"#Angular-as-Functional-x2F-Reactive\" class=\"headerlink\" title=\"Angular as Functional&#x2F;Reactive\"></a>Angular as Functional&#x2F;Reactive</h2><p>At the beginning of this article, I said one of the guiding principles of how we code is that we prefer Functional&#x2F;Reactive programming over Imperative&#x2F;Object Oriented programming.</p>\n<p>What does that mean?</p>\n<p>Imperative programming is code most of us are familiar with. It is code that says, do this, then do that, then do something else. Everything happens in sequence and it is very clear what happens when because the code says so.</p>\n<p>The problem with imperative programming is that it often contributes to tightly coupled code. In fact, this is the main reason Object Oriented code uses dependency injection and inversion of control.</p>\n<p>Object Oriented programming adds a layer on to imperative programming and tries to model everything in the world as a thing.  For example, a database Table, and User Interfaces are things. They lend themselves well to Object Oriented programming. By layering in dependency injection they decouple a lot of the code.</p>\n<p>But Object Oriented code still suffers from a problem. Not everything we are trying to write code for is a thing. Most of what we code is a process. Until recently, we’ve tried to shoehorn in a programming model that works for things and tried to make processes things somehow. It hasn’t worked well.</p>\n<p>Another problem with Imperative&#x2F;Object Oriented programming is that it mutates memory and each function can return different values even though I’ve passed in the same values. This can make this model difficult to test.</p>\n<p>Think about it, which would you rather write a test for?  Code that given the same parameters always returns the same value, or code that is indeterminate.</p>\n<p>But wait, you say, all code is deterministic. Or is it?</p>\n<p>Take for example a method in a class that has two member variables.  The method itself takes a parameter and makes a call out to a database. How many possible return values are there for any given value we pass in?</p>\n<p>Well, here’s the problem, you actually have 4 parameters and one of these is difficult to control. Oh, sure, you could mock the call to the database and get some control. But if you could write code that didn’t require taming, wouldn’t that be helpful?</p>\n<p>Which leads us to Functional Programming. In Functional Programming we have a number of key advantages. First any given function passed the same parameters always returns the same value. Testing issues solved! Second, strictly functional code has no variables. As one article I read states, “You can’t screw up what you can’t change.” Third, everything is a function.</p>\n<p>This is an oversimplification, you can read more on functional programming elsewhere. One final advantage that most of the literature doesn’t mention is that Functional Programming models processes better than Object Oriented programming. And because of the features I mentioned above, it is also much easier to test and much more deterministic.</p>\n<p>Which leads to Reactive. Aside from the fact that we are using RxJS in Angular which is a Reactive library, this also means that we react to “events” that get fired.  This is essentially what is happening when you dispatch an action in NgRX, what you are effectively saying is, “someone do this thing for me.”</p>\n<p>In the past, you would have just coded for that process to start. Here, that action could just as easily happen on some other computer, or at least some other thread. And so, instead of coding “do this, then that, then this other thing.”  You are coding, “when I get notified, I’m going to do this and then, optionally, notify the system that I’m done.”</p>\n<p>And so, we favor Functional&#x2F;Reactive programming because it makes our programs more stable but we admit that not everything can be done using a Functional&#x2F;Reactive model.</p>\n<h2 id=\"Data-over-Presentation\"><a href=\"#Data-over-Presentation\" class=\"headerlink\" title=\"Data over Presentation\"></a>Data over Presentation</h2><p>This is a specific instance of the previous point, but I want to call it out directly because I recognize that it is not quite as obvious to most people as it is to me.</p>\n<p>Most programmers, because they are still thinking in an imperative model, think of their code in terms of the presentation layer. What this means in terms of how they code is that when an event occurs in the view, they tend to fire an action. Sometimes this is the right thing to do. But, if the action that just occurred in the view also changed the state of your data in someway, it would make more sense to observe the data change in your store and react to it there than to fire off an event from the view to do the same thing.</p>\n<p>By following the rule of Data over Presentation, you benefit in two ways. The first is that more of your code will transfer to whatever JavaScript framework or library becomes popular in the future because RxJS is agnostic to which one you use.</p>\n<p>Second, by observing the data using <code>distinctUntilChanged()</code> you can ensure that you only respond when the data actually changed instead of every time it looks like there may have been a change.</p>\n",
            "tags": [
                "angular",
                "ngrx",
                "functional",
                "reactive",
                "mvp"
            ]
        },
        {
            "id": "http://davembush.github.com/what-if-unit-testing-wasn%E2%80%99t-necessary-notdd/",
            "url": "http://davembush.github.com/what-if-unit-testing-wasn%E2%80%99t-necessary-notdd/",
            "title": "What If Unit Testing Wasn’t Necessary? #noTDD",
            "date_published": "2018-10-06T10:30:05.000Z",
            "content_html": "<p>I recently read (yet another) post proposing that <a href=\"//blogs.msdn.microsoft.com/ericgu/2017/06/22/notdd/\">TDD “doesn’t work” and that we shouldn’t use it, or should use it very little</a>. What was shocking about this article wasn’t the content, but the fact that it is hosted on a Microsoft site.</p>\n<p>While I’m not entirely on board with throwing out TDD, the one thing I will agree to is that learning TDD is difficult. I am also willing to admit that, to a large extent, TDD is broken. If you’ve been following my post for a while, this SHOULD be shocking news.</p>\n<p>And so, I’ve been thinking.</p>\n<p>Maybe we’ve been asking the wrong question.  Maybe, instead of asking “How do we encourage people to implement TDD?”  We should be asking, “How do we make TDD either unnecessary, or trivial to implement?”</p>\n<figure>![](/uploads/2017/06/2017-06-27.jpg \"What If Unit Testing Wasn't Necessary? #noTDD\")<figcaption>Photo credit: [abraham.williams](//www.flickr.com/photos/4braham/5867328365/) via [VisualHunt.com](//visualhunt.com/re/0e2a0e) / [ CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Benefits-of-TDD\"><a href=\"#Benefits-of-TDD\" class=\"headerlink\" title=\"Benefits of TDD\"></a>Benefits of TDD</h2><p>So, let’s review why we think TDD is a good idea. One of the first reasons that you’ll find is that when TDD is done correctly, it encourages loose coupling of code. In fact, one of the things that make TDD hard to learn is that our code tends to be SO tightly coupled that it can’t be tested. There are whole books about how to decouple legacy code so we can get tests around them. There are problems with this, but we’ll get to those in a bit.</p>\n<p>The next major benefit of TDD is that it allows us to refactor our code without worrying about breaking anything. This is the feature I like the most. I was working on a system recently where the requirements were being “leaked” to me a bit at a time. I’d get something done and it would be “oh, I forgot to tell you about…”  </p>\n<p>Arrrgh.</p>\n<p>I was able to add the new code up until the last, “Oh, I forgot…”  And that broke my whole pattern. But it forced a much better architecture.</p>\n<p>Now in the old days, before I started writing tests, I would have been really nervous about tearing the code apart and putting it back together again. What if I broke something that already worked? But, because I had a large suite of tests around this code, I could refactor, run the tests, and fix the tests until I was back to everything working. Without the tests, I would not have known that I broke anything.</p>\n<p>BTW, no one has found any bugs in this code yet and it has been almost a year since I wrote it.</p>\n<p>Related to refactoring, by having a suite of tests in place, we can be reasonably sure that, as we add new features, we aren’t breaking any existing features.</p>\n<p>Next, TDD forces, or it should force, incremental coding.</p>\n<p>I was surprised when I found out that people don’t program incrementally. I always write just enough code to move the project along and then test it. But I know people who write code for hours and even days before they run any of it. And then, they can’t figure out where they broke the code. TDD done correctly, doesn’t let this happen.</p>\n<p>And finally, once you’ve learned how to test, TDD actually increases the speed with which you can produce quality code. I know a guy who brags about how fast he can code. But I also know he’s only counting the time until he said he was done, not the time it took him to fix all the bugs he found. Is he really any faster than any other programmer? It is hard to judge. But studies have shown that using TDD leads to greater over all speed and less technical debt. Something to consider.</p>\n<h2 id=\"Disadvantages-of-TDD\"><a href=\"#Disadvantages-of-TDD\" class=\"headerlink\" title=\"Disadvantages of TDD\"></a>Disadvantages of TDD</h2><p>But for all those benefits, there are still some major problems with TDD as a practice. </p>\n<p>The first and most looming of all, is the fact that using TDD introduces A LOT of friction into the programming process. As an exercise, I wrote a demo application using TDD while learning a new framework. I knew the language and the testing framework, I was just learning a new programming framework. The problem was I not only had to learn the new framework, but the framework has its own helper functions for testing that I also had to learn.</p>\n<p>I would say this friction is what holds most people back and is often voiced as, “TDD slows down my programming.”  Which is true until you’ve learned it all.</p>\n<p>The tendency with TDD is to try to get 100% code coverage. This often lulls us into the belief that we’ve tested everything that can be tested. But the problem is, because our code often has hidden parameters, we can’t always be sure we’ve written enough tests to be sure that we’ve covered all the possible ways those parameters show up. So, the fact is, we can’t be sure we have 100% coverage of the situations our code may run into even if we have 100% coverage of our code.</p>\n<p>The next two disadvantages impact relatively new programmers. That is, people who have been programming for less than 5 years. The problem is, that’s half of the programmers available to the market. After 5 years, you’ve either been promoted to management where you eventually forget how to program or, at the very best only know what you knew when you were promoted, or you’ve moved on to a new career. And then there are people like me who can’t stop coding.</p>\n<p>The problem with programmers who have less than 5 years of experience is that they don’t have any concept of design patterns and they know nothing of architecture. And unless you work in an organization that has senior level programmers with more than 10 years of experience, you aren’t likely to know it is even something you need to learn. And here is the problem. It is nearly impossible to implement TDD if you don’t have a broad understanding of these two subjects. If you have less than 5 years of experience, you are still focused on the basic problem of naming things, keeping your code DRY, and making sure you are implementing the single responsibility principle.</p>\n<p>And finally, there is simply nothing that is making you write tests. Your code will compile and run just fine without them. The syntax of your language really doesn’t care. So given all the detractors, it is really easy to just not write them at all. There, I’ve said it. Yes, we SHOULD use TDD, but it is impractical to expect any but the most seasoned programmers to use this methodology. And by then, they may not need them as much.</p>\n<h2 id=\"What-Tests-Aren’t-Needed\"><a href=\"#What-Tests-Aren’t-Needed\" class=\"headerlink\" title=\"What Tests Aren’t Needed\"></a>What Tests Aren’t Needed</h2><p>But what if we could write code that didn’t need to be tested? Well, generally any code you can look at and be sure you know what it does and what you can expect is code you don’t have to test. Code with a cyclomatic complexity of 2 or lower, which still allows for a condition or two. Code that is:</p>\n<ul>\n<li>Small.</li>\n<li>No conditions</li>\n<li>No hidden parameters</li>\n<li>No side effects</li>\n</ul>\n<p>By “small” I’m talking about code that is, ideally, 5 lines or fewer with the occasional 10 lines in the rarest of instances. </p>\n<p>No hidden parameters. This is a big one. Think about code you’ve recently written. If you are writing Object-Oriented code, you typically have a method that takes a parameter or two (maybe more) and then accesses a member variable and may even create a new object in the middle of the function. The reason we have Dependency Injection is to give us the ability to inject mock objects into our tests so that we can write test against something stable and known rather than these hidden parameters that are constantly changing. </p>\n<p>“No side effects” is a specific instance of a hidden parameter. Anyone try to test code that accesses a database? What if all the code you wrote that had some side effect was isolated to a specific area of your program? In that case, it would reduce the number of tests you would need to write to just that area. And if you wrote that code correctly, the tests would be trivial to write.</p>\n<h2 id=\"I’ve-Fallen-in-Love-…\"><a href=\"#I’ve-Fallen-in-Love-…\" class=\"headerlink\" title=\"I’ve Fallen in Love …\"></a>I’ve Fallen in Love …</h2><p>And this is why I’ve fallen in love with the concepts behind Functional Programming.</p>\n<p>In Functional Programming you have a series of functions that you chain together. Much like fluent programming in the Object-Oriented world, the return value of a function becomes the input for the next function. Each function does just one thing, so they implement the Single Responsibility principle probably better than any class you can possibly write. Each function only works on the parameters it has been given, so you don’t need to worry about hidden parameters and the function is not allowed to generate a side effect.  Even your conditions are handled by functions that filter the data before passing it on. This all makes your code REALLY easy to test if you decide you need to test it at all.</p>\n<p>Of course, no one ever said we couldn’t have side effects. Those are all isolated to specific code that is super easy to test.</p>\n<p>If this is all new to you, I suggest you take a look at the <a href=\"//reactivex.io/\">ReactiveX</a> and start learning this library in the language of your choice.</p>\n<p>For me, the gateway drug into the Functional world has be NgRX and the Flux&#x2F;Redux pattern which is based on RxJS a JavaScript implementation of ReactiveX.</p>\n",
            "tags": [
                "tdd",
                "agile",
                "noTDD"
            ]
        },
        {
            "id": "http://davembush.github.com/linkedin-tips-for-programmers/",
            "url": "http://davembush.github.com/linkedin-tips-for-programmers/",
            "title": "LinkedIn Tips For Programmers",
            "date_published": "2018-09-22T10:00:00.000Z",
            "content_html": "<p>As I was sharing my LinkedIn tips with a co-worker this past week that made me realize that I’ve accumulated an incredible amount of knowledge about using LinkedIn that I should probably share. Things that aren’t obvious to the typical user.</p>\n<p>But first, I have to ask a question.</p>\n<span id=\"more\"></span>\n\n<p>Why are you on LinkedIn?</p>\n<p>From my discussions with many of my peers, I think many of you are on LinkedIn simply because you think you should be. Your behavior on LinkedIn makes me believe you would rather not be on LinkedIn at all. Maybe you should delete your account?</p>\n<p>Why do I say this?</p>\n<p>Because many of you have not spent the time to even get the basics of your account setup. And even if you have, you have everything set so that only your first degree connections can find you. This isn’t going to help you at all.</p>\n<h2 id=\"Why-Be-On-LinkedIn\"><a href=\"#Why-Be-On-LinkedIn\" class=\"headerlink\" title=\"Why Be On LinkedIn?\"></a>Why Be On LinkedIn?</h2><p>So, let’s start at the beginning. Why should you be on LinkedIn in the first place?</p>\n<p>There are two main reasons to be on LinkedIn. The first reason is because you want to be found when someone needs the thing it is that you do. The second is so that you can find someone when you or your organization need to hire a new employee. Everything you do on LinkedIn should be focused on those two goals. This goes double if you have a particularly rare skill.</p>\n<h2 id=\"What-About-Relationships\"><a href=\"#What-About-Relationships\" class=\"headerlink\" title=\"What About Relationships?\"></a>What About Relationships?</h2><p>Many people have the mistaken idea that the point of LinkedIn is to maintain professional relationships.  Therefore, they argue, you should only connect to people you know.</p>\n<p>The problem with this line of thinking is that you can maintain relationships with people you know using much more effective means than LinkedIn. Call them on the phone. Go out for a meal, or coffee with them. Communicate via email. This is much more effective than using LinkedIn.</p>\n<p>No, LinkedIn is for ESTABLISHING relationships. And, just like in real life, these relationships are going to vary from people you barely know to people you have deep relationships with. This means that if you are only connecting to people you know, you are wasting your time and might as well not be on LinkedIn at all.</p>\n<h2 id=\"How-LinkedIn-Works\"><a href=\"#How-LinkedIn-Works\" class=\"headerlink\" title=\"How LinkedIn Works\"></a>How LinkedIn Works</h2><p>I don’t mean, how you set it up. There are other sites and books that talk about this. What I’m talking about is the internals. What you need to know that will influence how you setup your LinkedIn account.</p>\n<p>You see, there is a whole other section of LinkedIn for recruiters. This section allows the recruiters to check out your profile based on the jobs they are looking for. In fact, LinkedIn has made this easy for them by looking at the jobs the recruiter is trying to fill and suggesting candidates to the recruiter based on those jobs. They also get to associate notes with your profile and see when you’ve made a change to your profile.</p>\n<h2 id=\"Don’t-Forget-About-External-Search-Engines\"><a href=\"#Don’t-Forget-About-External-Search-Engines\" class=\"headerlink\" title=\"Don’t Forget About External Search Engines\"></a>Don’t Forget About External Search Engines</h2><p>One of the best kept secrets of LinkedIn is that you have to use LinkedIn to find people on LinkedIn. But if I were looking for someone on LinkedIn, I would use a regular search engine. It isn’t that hard to find people I’m looking for by using the following google search string:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:linkedin.com inurl:/pub/ -inurl:/vsearch/</span><br><span class=\"line\">  -inurl:/dir/ -inurl:/company/ [keywords here]</span><br></pre></td></tr></table></figure>\n\n<p>This would be all on one line. I’ve just wrapped it here to make it easy to read.</p>\n<p>This search tells Google to search the site linkedin.com for the keywords I’ve listed in [keywords here] that have “&#x2F;pub&#x2F;” in the url and don’t have “&#x2F;vsearch&#x2F;”, “&#x2F;dir&#x2F;” or “&#x2F;company&#x2F;” in the url. This will bring up a list of people with the keywords listed on their publicly visible profile.</p>\n<h2 id=\"LinkedIn-Tips\"><a href=\"#LinkedIn-Tips\" class=\"headerlink\" title=\"LinkedIn Tips\"></a>LinkedIn Tips</h2><h3 id=\"Get-a-real-photograph-for-your-profile-picture\"><a href=\"#Get-a-real-photograph-for-your-profile-picture\" class=\"headerlink\" title=\"Get a real photograph for your profile picture\"></a>Get a real photograph for your profile picture</h3><p>OK, technically, this won’t help you get found any better. But I need to start some place and this is the easiest change to make and it will make a difference as we proceed through the tip list. A real photograph tells me you “get” LinkedIn. It tells me you are serious about your LinkedIn presence. This photo should almost always be a picture of you that is as much of your face as you can make fit in the square they give you. This is otherwise known as a “head shot”.</p>\n<p>At this point, I have almost 13000 connections. I’ve seen a lot of profile pictures. Here are some common mistakes I see.</p>\n<ul>\n<li>The picture in the person is tiny relative to the space they’ve been given.</li>\n<li>The person looks bored.</li>\n<li>The person put up a group picture, like they would have done on Facebook. This should be a picture of you alone.</li>\n<li>The person put up a drawing of themselves. (This may be OK if you are a designer. But if you are a programmer, not so much.)</li>\n<li>The person put up some kind of Logo.</li>\n</ul>\n<h3 id=\"Make-sure-your-profile-is-filled-out-completely\"><a href=\"#Make-sure-your-profile-is-filled-out-completely\" class=\"headerlink\" title=\"Make sure your profile is filled out completely.\"></a>Make sure your profile is filled out completely.</h3><p>Make sure you fill out the skills section. In fact, the skills you have should show up not only in the skills section, but also in the summary, your work titles, and your work descriptions. It is the skills that people are going to use to find you.</p>\n<p>When you fill out the skills section, make sure you use skills that LinkedIn recognizes. These are the skills people will be more likely to find you by. While you might be awesome at “managing people” that’s probably not how people are going to search for you. Generally they want to know what tools you know how to use. Yeah, I know that’s a lot like searching for a painter who can use red paint instead of blue paint. But that’s how it seems to work.</p>\n<p>This leads me to your summary. I’ve seen all kinds of advice about this. I had one “Social Media Expert” tell me my summary was too technical. And it might be. But once again, it is the technical details that most people are looking for. I put a link to a less technical version of what I do at the beginning of my summary, but in general, I think it is best to summarize the same information you would put in the skills area. Check out <a href=\"//www.linkedin.com/in/davembush\">my profile</a> to see what I mean.</p>\n<p>As for the rest of your profile, fill out everything until LinkedIn says you are an “All-Star”. And then keep adding information. The more information you add, the easier it will be to find you and when you are found, the more valuable you will seem.</p>\n<h3 id=\"Be-Visible\"><a href=\"#Be-Visible\" class=\"headerlink\" title=\"Be Visible\"></a>Be Visible</h3><p>I mentioned this above, but this is a major tip that most people don’t understand. Hopefully you are beginning to see that the main trick to making LinkedIn work for you is that you need to make your profile visible to as many people as possible. Several of my other tips are going to circle back on this theme as well. The main thing you should do to become visible is to make your entire profile publicly visible. This will make your profile easier to find from regular search engines as well as making it easier to search from 2nd and 3rd degree connections.</p>\n<h3 id=\"Be-Easy-to-Contact\"><a href=\"#Be-Easy-to-Contact\" class=\"headerlink\" title=\"Be Easy to Contact\"></a>Be Easy to Contact</h3><p>Yes, yes. Spam is a problem. But, most of the time the spam filters do a pretty good job of keeping the spam out. At least they do for me. Put your phone number and&#x2F;or your email on your profile some place that is easy to see. I’ve placed my contact information at the top of my summary because that is as far at the top of the page as I can get it.</p>\n<h3 id=\"Make-Connections\"><a href=\"#Make-Connections\" class=\"headerlink\" title=\"Make Connections\"></a>Make Connections</h3><p>As I’ve already mentioned above, as much as LinkedIn would like to think of itself as a way of building relationships and networking, it isn’t. If you want to manage networking relationships, get a CRM program. If you want to make sure you can get found easily, connect to other people in your industry on LinkedIn.</p>\n<p>Connecting is why we’ve placed our email address in our profile. This makes it easy for people to connect to us when LinkedIn ask them for an email address.</p>\n<p>Now, you might ask, why do I need more connections than the people I actually know?</p>\n<p>Because, when someone searches on LinkedIn, the results they see are not ALL the results that are possible. LinkedIn only searches your 1st, 2nd, and 3rd degree connections as well as any people in any of the groups you are a member of. The more people you are connected to, the more likely you are to be found when someone is searching for your skill set.</p>\n<p>There are two ways you can connect. The aggressive way and the passive way. You can use both and put this on steroids.</p>\n<p>The aggressive way is to look through your “people you may know” list, which you can get to by going to the “My Network” tab and viewing the “People” tab under “Discover”. Skip everyone who just has the default “shadow” image. Look for people who look like they may have skills related to yours. When you find one, right click the image and open in another tab or window to view the profile without losing the list. If the profile still looks like someone who is related to your skills, go back to the “people you may know” page and click connect. Most people don’t know that you do not need an email address if they show up in the “people you may know” list.</p>\n<p>You can also use LinkedIn search to find people. I would only use search to get things going if you need to. But if you use search for this, you will run out of searches pretty quickly so don’t rely on search.</p>\n<p>What I’ve found is that most people will connect with me if I ask. I’ve had a few people who have asked me why I’ve asked for a connection. When they ask, I tell them, “You and I have related skills and I was hoping to connect to mutually enhance our ability to be found on LinkedIn.”</p>\n<p>The passive alternative is to view profiles. You’ll have to view A LOT of profiles but eventually, one of those people will ask you for a connection.</p>\n<p>Finally, accept connections from anyone who ask regardless of what industry they are in or what skills they have. The last I heard, LinkedIn allows you to have up to 30,000 connections. Once you get that many connections, you may want to go through your connections and prune them, but until you get there, more connections mean you can get found easier. If you find out that your connection is a jerk, you can always <a href=\"https://www.linkedin.com/help/testing/answer/49/removing-a-connection-on-linkedin\">disconnect</a>.</p>\n<p>Finally, you should spend the extra time to at least thank the person who connected with you, either in response to your connection or because they connected to you first. It just shows you aren’t a machine and adds a few more “Nice Guy” points to the transaction.</p>\n<h3 id=\"Join-Groups\"><a href=\"#Join-Groups\" class=\"headerlink\" title=\"Join Groups\"></a>Join Groups</h3><p>As I mentioned above, LinkedIn searches the people in the groups you are a part of when someone does a search. It also uses this list for the “People You May Know” list that it presents to you. So the more relevant groups you are a part of, the better.</p>\n<p>The one set of relevant groups that may not be so obvious are the groups for recruiters. Since you probably want recruiters to find you, you should join at least one of the recruiter groups.</p>\n<h3 id=\"Get-Noticed\"><a href=\"#Get-Noticed\" class=\"headerlink\" title=\"Get Noticed\"></a>Get Noticed</h3><p>This is something I’ve only started to recognize as I’ve work on my own profile. But the more popular you look to LinkedIn, the higher you show up in the search results, and it would seem the external search engines as well. I think profile views really matter to LinkedIn. They can track this and they do have some idea of how often your profile is being viewed. It only makes sense that they would use this as a way to rank the search results.</p>\n<p>Aside from getting profile views because you asked for a connection or profile views because you’ve viewed other people’s profiles, the other thing you can do is that you can post relevant content as a LinkedIn status. If your LinkedIn home page looks anything like mine, you probably have a lot of articles and links posted that look very business related and very few that look like anything you would read.</p>\n<p>What do we post here?</p>\n<p>Since my major focus is Test Driven Development, C#, ASP.NET, JavaScript, TypeScript, Angular, Agile and Scrum, I tend to post links relevant to those areas. Occasionally one of those links will get re-shared.</p>\n<p>Don’t forget to view the profile of people you are already a first degree connection with. If nothing else, it will remind them that you exist. It may also generate a profile view.</p>\n<p>My final tip here may be slightly controversial, but here it goes.</p>\n<p>For the most part, the whole voting up skills on LinkedIn is a joke. We all know that we can vote up someone we know nothing about. It is basically meaningless. Yeah, I know all that. And frankly, I don’t care.  Because I have a theory that while we don’t care and recruiters don’t care both LinkedIn and the external search engines do. So what you want to do is you want to go vote up people with skills that match the skills on your profile.</p>\n<p>Why?</p>\n<p>Because this is going to generate a link back to your profile from their profile and the anchor text is going to be a keyword you want to rank for.</p>\n<p>I may be totally wrong about how this works, but at the very least, this may generate a profile view which LinkedIn has already indicated it does pay attention to.</p>\n<p>Well, there you go. My complete brain dump of LinkedIn Tips. Oh, and don’t forget to <a href=\"//www.linkedin.com/in/davembush\">connect with me on LinkedIn</a>.</p>\n<h4 id=\"Related-Resources\"><a href=\"#Related-Resources\" class=\"headerlink\" title=\"Related Resources:\"></a>Related Resources:</h4><ul>\n<li><a href=\"//talent.linkedin.com/blog/index.php/2014/12/5-unique-features-of-linkedin-recruiter-that-will-make-your-job-easier\">5 Unique Features of LinkedIn Recruiter</a></li>\n<li><a href=\"//www.careergirldaily.com/tips-to-create-a-killer-linkedin-profile/\">Tips To Create a Killer LinkedIn Profile</a></li>\n<li><a href=\"//guildofbloggers.com/spending-1-hour-per-day-linkedin-got-3-clients-less-month/\" title=\"http://guildofbloggers.com/spending-1-hour-per-day-linkedin-got-3-clients-less-month/\">How Spending 1 Hour-Per-Day on LinkedIn Got 3 Clients in Less Than a Month&#x2F;</a></li>\n</ul>\n",
            "tags": [
                "linkedin",
                "social media",
                "tips"
            ]
        },
        {
            "id": "http://davembush.github.com/typescript-basics-for-angular-developers/",
            "url": "http://davembush.github.com/typescript-basics-for-angular-developers/",
            "title": "TypeScript Basics for Angular Developers",
            "date_published": "2018-09-08T10:30:30.000Z",
            "content_html": "<p>For the most part, TypeScript feels a lot like JavaScript.  Most people pick it up without having any formal training.</p>\n<p>But, here’s the deal.  “Just because you can, doesn’t mean you should.” </p>\n<p>The thing that makes me most nervous about Angular is that it is structured so that you can write some really clean code.  But, you don’t have to.  Which mean most won’t. </p>\n<p>In fact, recruiters continue to contact me about Angular jobs with rates that make it obvious that hiring an Angular programmer is the same as hiring an HTML “programmer” 10 years ago.  Sorry gang, JavaScript has grown up and so has Angular. </p>\n<p>So, here are a few things you need to know about TypeScript that will make you a better Angular developer. <figure><img src=\"/uploads/2017/07/TypescriptBasicsForAngular.jpg\" title=\"TypeScript Basics for Angular Developers\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/mujitra/8059355303/\">MIKI Yoshihito. (#mikiyoshihito)</a> via <a href=\"//visualhunt.com/re/b6d829\">VisualHunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Variable-Declaration\"><a href=\"#Variable-Declaration\" class=\"headerlink\" title=\"Variable Declaration\"></a>Variable Declaration</h2><p>There are three ways of declaring a variable in TypeScript.  You can either use the JavaScript <code>var</code> keyword like you’ve always done or you can use the <code>let</code> keyword or the <code>const</code> keyword. </p>\n<p>But first, what problem are we trying to solve? </p>\n<p>In the old JavaScript world, we would declare variables in a block of code, but where-ever we declared that variable, the actual declaration was “hoisted” to the top of the function.  In fact, there never was anything like block scope.  Just function scope. </p>\n<p>This caused one particular problem that was rather common.  If I created a for&#x2F;next loop that called an asynchronous function, the asynchronous function would use the last value of the for&#x2F;next incrementer. </p>\n<p>The primary benefit of using <code>let</code> or <code>const</code> is that they effectively provide for block level scope so that we can write code like I described above and it will behave in the way we would expect from other languages. </p>\n<p>Unless you explicitly want to avoid block level scope, you should never use the <code>var</code> keyword to declare a variable in TypeScript.  This falls under the “just because you can, doesn’t mean you should” rule. </p>\n<p>In my experience, you will use <code>const</code> more often than <code>let</code>.  Here’s the difference. </p>\n<p>If you are declaring a variable that will only ever be assigned one value, you declare it using <code>const</code>.  What isn’t obvious is that changing the contents of an object does not change the value of an object.  So, doing something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myArray = [];  </span><br><span class=\"line\">myArray.<span class=\"title function_\">push</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Would be more valid as:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myArray = [];</span><br><span class=\"line\">myArray.<span class=\"title function_\">push</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Because pushing something into the array doesn’t change the value, or the pointer, of myArray.  It only changes the content of the array.</p>\n<p>You DID know that, right?</p>\n<h2 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h2><p>The main thing that makes TypeScript what it is, is that it allows us to type-check our code.  You don’t have to.  In fact, there are times when this might get in your way.  But, you have a choice. </p>\n<p>By default, TypeScript uses inference when it can to figure out the type of a variable.  This is important because I can bet one of the first errors you are going to see is a type mismatch error. You might try to do something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> v = <span class=\"string\">&#x27;abc&#x27;</span>;  </span><br><span class=\"line\"><span class=\"comment\">// some other code, and then ...  </span></span><br><span class=\"line\">v = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure>\n\n<p>That’s not going to compile. But you could do something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">v</span>: <span class=\"built_in\">any</span> = <span class=\"string\">&#x27;abc&#x27;</span>;  </span><br><span class=\"line\"><span class=\"comment\">// some other code, and then …  </span></span><br><span class=\"line\">v = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure>\n\n<p>That is telling the TypeScript compiler that we are OK with the variable v being any type. </p>\n<p>Other than the Classes and Interfaces that are either part of JavaScript or that we, or a third party, create, there are boolean, number, string, array, enum, any, void, tuple, never, null, and undefined. </p>\n<p>I’m going to assume that until I mentioned “tuple” you were ok with the types I mentioned.  So, let’s dig a little deeper on those last few. </p>\n<p>A tuple is a type that wars have been fought over.  Well, it isn’t that bad, but it is controversial. What we care about here is why you might want to use it.  It allows you to return a highly defined array or object directly into local variables.  That is, I can specify that a function returns an array or object that has a specific number of elements and each element is a specific type.  It has its uses, but it is probably one of the types that you want to reserve for special cases.  It saves you from having to access array elements or object fields or properties.  That’s the long and short of it. </p>\n<p>The never type allows you to specify that a function never returns.  There are two reasons why this would be true.  First, you’ve entered an infinite loop or second, you’ve thrown an exception.  Again, not something you are likely to use. </p>\n<p>You can also explicitly specify that a type can only handle null or undefined.  But what is much more likely is that you specify that you don’t want to use these.</p>\n<h2 id=\"Combined-Types\"><a href=\"#Combined-Types\" class=\"headerlink\" title=\"Combined Types\"></a>Combined Types</h2><p>So, let’s say you have a parameter or a variable that accepts multiple types.  You could just use any and go on your merry way.  But, wouldn’t it be nice if you could say, “I want this type to be either a string or a number.”?  Well, you can.  Simply by using the pipe operator between types.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">v</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Remember our example above where we said we needed a variable to be either a number or a string, the above syntax is a much better way of typing the variable to do this because it limits the variable to exactly the types that we want to allow rather than letting anything be assigned to it.</p>\n<p>Amd we can take this even further.  Let’s say we want to make sure that the variable is a particular class type that we also want to be sure implements a specific interface.  For that, we use the ampersand.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">v</span>: <span class=\"title class_\">Person</span> &amp; <span class=\"title class_\">Manager</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And while we are at it, what if we want to make sure that a variable only accepts string types that are not null or undefined?  By default, the compiler allows null and undefined to be assigned to anything, but there is a compiler switch that turns that feature off.  If you use the compiler switch and you want to allow null or undefined, you’ll need to use the pipe operator to include them.</p>\n<h2 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h2><p>For the most part, a TypeScript Interface looks a lot like an Interface in other languages. However, there are some differences that you need to know about. </p>\n<p>First, you don’t need to create a class that implements an Interface and then instantiate an object from that class in order to have an object of a particular interface type.  Actually, if you stop to think about it, this makes sense.  The problem is, there are a lot of people teaching TypeScript who are still using interfaces this way. </p>\n<p>But, in JavaScript, you can create an Object Literal.  TypeScript adds to JavaScript.  So, it only makes sense that TypeScript also allows you to create an Object Literal.  So, let’s say you have a parameter that takes an interface of type Name.  As long as the object we pass in conforms to the interface definition, the code will compile.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// interface Name with firstName and lastName as properties  </span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// function that takes a Name as a parameter  </span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"params\">name: Name</span>) &#123;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// call the function with an object literal  </span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(&#123;<span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Dave&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Bush&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Optional\"><a href=\"#Optional\" class=\"headerlink\" title=\"Optional\"></a>Optional</h2><p>We’ve been talking a lot about Parameters and Interfaces.  In both cases, we often want to define a parameter or a property as optional. </p>\n<p>For example, most people have a middle name, but our Name interface doesn’t account for that.  If we added it, we’d want to make it optional since it is possible for that to not be included.  On the other hand, we don’t want people added whatever they want. </p>\n<p>The way we make sure a parameter is optional is by placing a question mark after the property, but before the colon.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// middleName is optional</span></span><br><span class=\"line\">  middleName?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// foo() now takes an optional name parameter  </span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"params\">name?: Name</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>I would highly recommend that you tweak your tslint rules to require type annotations on all of your code.  Out of the box, the tslint rules that come with the Angular-CLI are a bit too lax in this area.</p>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>The <code>this</code> keyword in JavaScript is probably the hardest concept to fully understand.  And while recent advances in the language have helped tame it, it still doesn’t fully conform to the model most people have in their mind of how an Object-Oriented language should behave.  This is because, of course, JavaScript isn’t an Object-Oriented language.  It is a Prototypal language.  There are similarities, but they aren’t they same. </p>\n<p>TypeScript, on the other hand, is more object oriented.  I say “more” because it is really only object-oriented in the places where you are taking advantage of TypeScript specific features, such as a Class.  If you create an object literal that has an inline function, you are back in JavaScript land. </p>\n<p>In a class, if you have a method that calls another method in the same class, you must use the <code>this</code> keyword to go after it.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SomeClass</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">someFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"title function_\">someOtherFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"title function_\">someFunction</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This may take some getting used to if you are coming from JavaScript where you can call any function that is in scope without using the this keyword.  But, I can assure you that having this rule imposed on the language solves a lot of bugs caused the “this” side effects, that it is well worth the adjustment.</p>\n<h2 id=\"Arrow-Functions\"><a href=\"#Arrow-Functions\" class=\"headerlink\" title=\"Arrow Functions\"></a>Arrow Functions</h2><p>Fat Arrow functions, Arrow Functions, or Lambda Expressions all refer to the same concept.  They are probably one of my favorite features of the latest version of TypeScript and JavaScript both because they allow me to write code with fewer characters and because they solve a very real problem that has confused JavaScript developers for years. </p>\n<p>First the problem. </p>\n<p>If you’ve written any serious application using JavaScript, one of the following scenarios will be familiar to you. </p>\n<p>Any time you create an event handler, when the function gets called, the ‘this’ keyword isn’t pointing to the object you are in, it is pointing to the context of the event that fired it.  This could be null, a windows object, or something else.  We often get around this problem by using the bind() function to wrap the context of the function. </p>\n<p>What the arrow functions in TypeScript do is that they form a closure around the current ‘this’ context by taking advantage of how TypeScript is compiled into JavaScript. </p>\n<p>You see, when your TypeScript code is compiled, every place you referred to <code>this</code> it refers to a variable named <code>_this</code>.  Inside the arrow function, they refer to this same <code>_this</code> instead of creating a new one or looking at the context the function was called from. </p>\n<p>The main difference between a regular anonymous function and an arrow function is that we leave out a lot of junk. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newFunc = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something with x  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Compared to:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">newFunc</span> = (<span class=\"params\">x</span>) =&gt; &#123;  </span><br><span class=\"line\">  <span class=\"comment\">// do something with x  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But wait! There’s more.  </p>\n<p>If you only have one line, you can remove the curly braces. </p>\n<p>Let’s say you want to create an arrow function that returns the square of some number.  You could write this as:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">newFunct</span> = (<span class=\"params\">x</span>) =&gt; x * x;</span><br></pre></td></tr></table></figure>\n\n<p>Fat arrow functions return the value from the function automatically.</p>\n<h2 id=\"Decorators\"><a href=\"#Decorators\" class=\"headerlink\" title=\"Decorators\"></a>Decorators</h2><p>I don’t want to spend a lot of time on decorators.  If you’ve been using .NET, you’ll recognized decorators as “Attributes”. Java programmers are probably used to calling them annotations. </p>\n<p>Effectively, what a decorator does is that it adds additional information to a function, field, or class that marks it for special use.  While you can create your own decorators, we will only concentrate on implementing decorators that have already been defined for us. </p>\n<p>You’ll know that something is a decorator because it is a symbol prefixed with the at symbol.</p>\n<h2 id=\"Import-and-Export\"><a href=\"#Import-and-Export\" class=\"headerlink\" title=\"Import and Export\"></a>Import and Export</h2><p>Last in our discussion of TypeScript are the keywords import and export. </p>\n<p>Now, why do we need these keywords? </p>\n<p>If you are familiar with other languages such as C#, VB.NET or Java, you will recognize the concept of Import as the keyword that says, “Tell this file I’m going to reference code from that other file over there in here.”  And then when we compile our code, the compiler makes sure that we are using that other code correctly. </p>\n<p>A similar thing happens in TypeScript, but in Angular we get the added benefit of also being able to use this information so that we only include the code we are actually using. </p>\n<p>You see, in the old days, we would suck in entire JavaScript libraries just because we were using a few functions.  But now with concepts like “Tree Shaking” that we will cover later, we can look at the actual code we are referencing and only include that code.  This reduces the size and number of files that our customer has to download to use our applications. </p>\n<p>The export keyword, on the other hand, tells the compiler what functions, classes, and interfaces external code is able to reference.  If it isn’t exported, it is only available to code in the file it was declared in.</p>\n<h2 id=\"More\"><a href=\"#More\" class=\"headerlink\" title=\"More\"></a>More</h2><p>I have barely scratched the surface of TypeScript here.  There is a lot more available in the language than what I’ve introduced to you here and knowing the parts I’ve left out will ultimately make you a better programmer and make your code more stable.  But the parts I have introduced will get you going and will make you familiar with the parts you will see most often.</p>\n",
            "tags": [
                "angular",
                "typescript"
            ]
        },
        {
            "id": "http://davembush.github.com/the-tyranny-of-emotions/",
            "url": "http://davembush.github.com/the-tyranny-of-emotions/",
            "title": "The Tyranny of Emotions",
            "date_published": "2018-09-01T10:30:33.000Z",
            "content_html": "<p>Emotions are a weird element of being human.  They can propel us forward or hold us back.  Sometimes they are violent.  Most of the time they whisper. </p>\n<p>Several events have occurred recently that have me thinking about this more. </p>\n<p>To start with, I’ve started paying more attention to my health.  There were a lot of things holding me back from this in the past.  It turns out, most of what was holding me back was just a lie. </p>\n<p>I’ve started interviewing again.  The nature of what I do means I get to do this a lot.  You’d think I’d get used to it.  But, I don’t like the interview process.  I don’t like changing jobs.  I really don’t like code interviews.  But, I do them because I like to program for a living.</p>\n<p>And for those of you who know me, just because I’m interviewing doesn’t mean I don’t like where I am and have any intention of leaving.  I interview when I have work so I still have the skill when I don’t have work.  And who knows?  I may just find something I like better than where I am.</p>\n<p>Some of the interviews I’ve been on have revealed that managers think in similar short-term ways that I have.  Short-term thinking is so easy to see when it is someone else. <figure><img src=\"/uploads/2017/08/2017-08-19.png\" title=\"The Tyranny of Emotions\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/whinmobzappmedia/16016836686/\">whinmobzappmedia</a> via <a href=\"//visualhunt.com/re/fb1f6a\">VisualHunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Health\"><a href=\"#Health\" class=\"headerlink\" title=\"Health\"></a>Health</h2><p>I was under the misconception that if I paid more attention to my health, it would take time away from things I would rather be doing.  As it turns out, paying attention to my health has more than made up for the time it has taken. </p>\n<p>I was “afraid” of being uncomfortable.  I admit it.  I’m generally a pain wimp.  I wasn’t looking forward to sweating.  But it turns out, you get use to stuff like that. </p>\n<p>Now, the question to ask here is, “what was it that was keeping me from trying and what was it that got me started?” </p>\n<p>In a word, fear.  I was afraid I was going to lose the ability to do things that I considered more fun.  I was afraid of the discomfort. </p>\n<p>Now, the thing that got me started was slowly being exposed to the many benefits of living a slightly healthier life style.  I can’t say when exactly I started thinking I might want to make some changes, but I can tell you the first step was asking myself, “what can I do that is sustainable?” </p>\n<p>I’ve learned, “what can I do?” is the best question I can ask when all that is being offered are reasons why something can’t happen. </p>\n<p>It turns out, the answer to that question was, “if you got a tread mill, you could start walking every morning in the comfort of your own home.  You wouldn’t have to go outside when it is too hot or too cold.” </p>\n<p>I’ve also learned that walking every morning is a medically proven way to reduce the chances of getting cancer, reduce cholesterol, lower my resting heart rate, improve my confidence, improve brain function, reduce depression and help me sleep better. With all of those benefits, why wouldn’t I walk every morning? </p>\n<p>Prior to starting to walk every morning, I had already started to focus on my diet.  I’m not particularly over-weight.  I’m just over-weight for me.  So, I started on a high fat diet.  </p>\n<p>Lately, I’ve worked in MCT oil, some super food supplements as well as some magnesium oil, and reduced my caffeine intake to the first two hours of my day.  Between this and the walking, I actually have more time in my day and I don’t feel nearly as tired by the end of the work day as I had been. </p>\n<p>Now, the more I focus on my health, the more I want to focus on my health because I’ve found that most of the stuff holding me back from even starting were lies and half-truths.  Not to mention momentum and addictions to unhealthy foods. </p>\n<p>Here’s a super tip for anyone who is interested in this stuff.  Diet isn’t about will power.  If you are playing the will-power game, you are going to lose.  Your current life-style is formed on food addictions (with the help of food companies) emotions and occasionally the belief that you can’t afford to eat healthy.  The dirty little secret is, if you eat healthy and figure out what the emotional triggers are, the addictions practically take care of themselves.</p>\n<h2 id=\"Interviewing\"><a href=\"#Interviewing\" class=\"headerlink\" title=\"Interviewing\"></a>Interviewing</h2><p>I’ve been a contract programmer most of my career.  By definition, most of the places I’ve worked have been about a year and a half long and then I move on.  There are exceptions, but that is the general rule.  And let’s just say that my career has been nice and long.  So, you’d think at some point I would get used to interviewing and switching jobs. </p>\n<p>But I haven’t.  I’ve never liked new.  And, every job is new.  Every interview is new. </p>\n<p>I think the thing I dislike the most is that interviewing is a game that I don’t think anyone has figured out.  The strong temptation is to tell the person interviewing you what you think they want to hear.  I’ve found I do better if I tell them what I actually believe. If they don’t like the answer, I figure I probably wouldn’t be happy working there anyhow.</p>\n<p>And then there is the code interview.  I’ve talked about this several times on this blog before.  I still don’t think it is a good measure of what I can bring to an organization.  But, with all of the “programmers” who can’t do the simple stuff, I acknowledge they are probably necessary. </p>\n<p>Now, the problem with code interviews is that they are “test” constructed by other programmers, not by a professional testing organization.  This means that the first thing I have to figure out about the question is, “what are you really asking me?”  Also, you can never be quite sure what they are testing for.  Do they just want to see that you can solve the problem?  Do they have a particular implementation they are expecting from you?  Do they care about the answer at all and they are just using the code portion of the interview to weed out people who can’t code at all?  And if they are looking for a particular answer, how can they be so sure they have the “right” answer and that my answer is “wrong?”</p>\n<p>As an example, I was once asked how .NET memory management works.  The official answer is, “there is nothing in the .NET specification that says how it should work at all.”  But, the way it has been implemented in Windows is typically the answer people are looking for.  I’ve learned the best answer is the full answer.  Then again, why is this something anyone cares about.  Memory gets managed.  That should be all you really need to know. </p>\n<p>With all of these problems, why do I continue on? </p>\n<p>Well, as I’ve mentioned in other post, hopefully, I’ll learn something with each interview.  I’ll either learn something about myself, or I’ll learn some bit of programming that I still need to work on. </p>\n<p>And, the growth experience of doing something hard has benefit too.  If I avoid hard stuff, I learn that hard stuff is bad.  If I do hard stuff, I learn that hard stuff is just hard.  It won’t kill me.  Besides, I can’t even say what it is about new stuff that scares me.  It is just that feeling.  And I need to silence that lizard.  This is one reason why I believe in interviewing even if you have a job. </p>\n<p>I’ve worked with people in the past who won’t do code interviews.  They say things like, “I have thirty years of experience, if that’s not good enough for you, I don’t want to work for you.”  And I get it.  But I think secretly, they’re afraid of doing the interview.  I always ask, “why not just do the interview?  The worse that can happen is you don’t get the gig, and you might learn something in the process.”</p>\n<h2 id=\"Hiring-Managers\"><a href=\"#Hiring-Managers\" class=\"headerlink\" title=\"Hiring Managers\"></a>Hiring Managers</h2><p>I’ve hit this one at several levels.  Mostly I deal with recruiters.  Most of the recruiters I deal with are just looking for warm bodies.  Having dealt with them on both ends, as a person conducting interviews and as the one looking for work, I can tell you the market is saturated with the “any warm body” variety of recruiter. I’ve started filtering out the “any warm body” recruiters from my email and only work with recruiters that work with companies that are looking for programmers at a level above that.</p>\n<p>I hit this in full force this week when I did a phone interview with a lady who works for a company that has a pool of remote developers who work on their client’s programs.  So when we started talking about rate I found out that they pay everyone the same because it makes the math easier for the owner. I don’t know about you but that sounds short sighted at best and like slave labor at its worse.</p>\n<p>I’ve interviewed at other places where they seemed more concerned with what they would have me work on than IF they wanted to hire me. </p>\n<p>I get that the hiring process is difficult, and figuring out my worth might be difficult.  But, let’s take a look at this for a bit. </p>\n<p>Let’s just say you have 10 programmers who you pay $100K a year each.  You are interviewing someone who can demonstrate that they are twice as productive AND that they’ll be able to improve the productivity of everyone else you already have by at least 10% simply by being on your team, mentoring your existing staff, and implementing process improvements to your organization.  How much value does this 11th programmer possess?  Simple math would indicate at least $200K. </p>\n<p>So, fear holds us back, does it not?  All we hear is that this programmer is asking for a salary that is 1.5 times as much as what you’re paying everyone else and think, “I can’t afford that.”  The reality is, you probably can’t afford to NOT hire them. </p>\n<p>Imagine if you found a diamond mine in a field that was worth $1,000,000 and the land you found the mine in was being sold for $700,000 wouldn’t you find some way to buy the field? </p>\n<p>Maybe you don’t have $700,000.  And you think, “I can’t afford that.”  But isn’t a better question, “how can I afford that?”</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>So, my challenge this week is, “Don’t let fear hold you back.” </p>\n<p>Look for a way.  Stop listening to the whispers in your head telling you something can’t be done. </p>\n<p>Do something hard today and improve by 1%.</p>\n",
            "tags": [
                "interview",
                "health",
                "emotions",
                "hiring"
            ]
        },
        {
            "id": "http://davembush.github.com/where-to-store-angular-configurations/",
            "url": "http://davembush.github.com/where-to-store-angular-configurations/",
            "title": "Where To Store Angular Configurations",
            "date_published": "2018-08-11T10:59:34.000Z",
            "content_html": "<p>Because this is a frequent problem, because it is so often done incorrectly and because there is a great alternative, today I want to discuss where to store Angular configurations. You know, all that information that changes as you move from your local development environment to the Development, QA and Production servers?</p>\n<p>There’s a place for that!</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Wrong-Place\"><a href=\"#Wrong-Place\" class=\"headerlink\" title=\"Wrong Place\"></a>Wrong Place</h2><p>I know it is tempting, but the environment.ts and environment.prod.ts files were never meant for configuration information other than to tell the run-time you are running a production version of the code instead of developing the code locally. Yes, I know it is possible to create a file for your different environments and you can effectively use the file for your configuration information. But, just because you can, doesn’t mean you should.</p>\n<p>In an ideal world, you would build a release candidate and place it on your Development server and then move it from there to QA and then to Production. You would never rebuild the application. You want to be absolutely sure that the code you tested in the Development environment is the code you ran in the QA environment and that the code you ran in the QA environment is the code that is running in the Production environment. You want to know for sure that the only possible reason why something isn’t working is because the configuration information is incorrect.</p>\n<p>There are other ways to mitigate the risk, but they all involve recompiling the code and tagging your repository so you can get the same code back. This works when there isn’t a better way. But, there is a better way!</p>\n<h2 id=\"Where-Instead\"><a href=\"#Where-Instead\" class=\"headerlink\" title=\"Where Instead?\"></a>Where Instead?</h2><p>If we can’t put our configuration information in our code, where do we put it? Obviously external to your code. This leaves us several solutions. One is to create a static json file that gets copied into your dist directory when the code is deployed to each environment. Another place that I’ve see work is to place the code in a database. The advantage to the database method is that you can have one database that handles the configuration information for all of your applications and even all of your environments. Put a good administration GUI on top of it and you can change the configuration easily without having to deploy even a file.</p>\n<h2 id=\"Jumping-The-Hurdle\"><a href=\"#Jumping-The-Hurdle\" class=\"headerlink\" title=\"Jumping The Hurdle\"></a>Jumping The Hurdle</h2><p>Now that you’ve put your configuration information in an external location, you realize that you’ll need to make a GET request to retrieve that information. You may also quickly realize that you need that configuration information as soon as your application starts up. Maybe putting that information in an external file wasn’t such a great idea after all?</p>\n<p>Well, not so fast!</p>\n<p>There is a little known API feature in Angular that lets us load stuff up front and will actually wait until the loading has completed before continuing on with our code.</p>\n<h2 id=\"APP-INITIALIZER\"><a href=\"#APP-INITIALIZER\" class=\"headerlink\" title=\"APP_INITIALIZER\"></a>APP_INITIALIZER</h2><p>APP_INITIALIZER is a multi provider type that lets you specify a factory that returns a promise. When the promise completes, the application will continue on. So when you get to the place in your code where you need the configuration information, you can be sure it has been loaded. It’s pretty slick.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">APP_INITIALIZER</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_INITIALIZER</span>,</span><br><span class=\"line\">            <span class=\"attr\">useFactory</span>: load,</span><br><span class=\"line\">            <span class=\"attr\">multi</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>where <code>load</code> is a <code>function</code> that returns a <code>function</code> that returns a <code>Promise&lt;boolean&gt;</code>. The promise function loads your configuration information and stores it in your application.  Once your configuration has been loaded, you resolve the promise using <code>resolve(true)</code>.</p>\n<p>This last point is really important.  If you get this wrong, the code won’t wait for this to finish loading before moving on.  <code>useFactory</code> points to a <code>function</code> that returns a <code>function</code> that returns a <code>Promise&lt;boolean&gt;</code>!</p>\n<p>The <code>multi: true</code> thing is because APP_INITIALIZER allows multiple instances of this provider. They all run simultaneously, but the code will not continue beyond APP_INTITIALIZER until all of the Promises have resolved.</p>\n<h2 id=\"An-example\"><a href=\"#An-example\" class=\"headerlink\" title=\"An example.\"></a>An example.</h2><p>Now, as a discussion point, let’s assume that you have a regular Angular CLI based project and you need to load in the base location of your REST endpoints.  You might have a config.json file that looks something like this:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;baseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://davembush.github.io/api&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>You would create a different one of these for each of the environments you wanted to deploy to, and, as part of your deployment process, you would copy the appropriate file to <code>config.json</code> in the same location that you deploy all of your Angular CLI generated static files.</p>\n<h3 id=\"Basic-App-Initializer\"><a href=\"#Basic-App-Initializer\" class=\"headerlink\" title=\"Basic App Initializer\"></a>Basic App Initializer</h3><p>Now, the thing we want to do is to load this config file at runtime using APP_INITIALIZER.  To do that, let’s add an APP_INITIALIZER provider to our app.module.ts file.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">APP_INITIALIZER</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">load</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [&#123;</span><br><span class=\"line\">    <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_INITIALIZER</span>,</span><br><span class=\"line\">    <span class=\"attr\">useFactory</span>: load,</span><br><span class=\"line\">    <span class=\"attr\">multi</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>For now, you’ll notice, we are ignoring the implementation of the <code>load()</code> function.  Typically, I add load to another file and import it, but for the purposes of explaining how this works, we will leave it as part of this code.</p>\n<h3 id=\"Type-the-load-function\"><a href=\"#Type-the-load-function\" class=\"headerlink\" title=\"Type the load() function\"></a>Type the load() function</h3><p>Since I made such a big deal about the typing of the load function, we should type the load function to make sure it actually returns what we have in mind. The following is skeleton code that we will embellish.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">load</span>(<span class=\"params\"></span>): (<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (): <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt;((<span class=\"attr\">resolve</span>: <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">boolean</span></span>) =&gt;</span> <span class=\"built_in\">void</span>): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>At this point, the code doesn’t do anthing useful, but you should be able to compile and run the code at this point without seeing any errors in the console.</p>\n<h3 id=\"Proof-that-it-waits\"><a href=\"#Proof-that-it-waits\" class=\"headerlink\" title=\"Proof that it waits\"></a>Proof that it waits</h3><p>Next, we want to prove that this really is stopping the rest of our code from running.  To do this, we are going to use a simple <code>setTimeout()</code> to simulate a long running process that we need to wait on to complete.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">load</span>(<span class=\"params\"></span>): (<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (): <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt;((<span class=\"attr\">resolve</span>: <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">boolean</span></span>) =&gt;</span> <span class=\"built_in\">void</span>): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>), <span class=\"number\">10000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This code waits for 10 seconds before resolving.  You can play with the timeout value to prove to yourself that this code really is waiting.</p>\n<h3 id=\"The-fun-begins\"><a href=\"#The-fun-begins\" class=\"headerlink\" title=\"The fun begins\"></a>The fun begins</h3><p>Now, the purpose of this code is to load the config.json file.  For that we are going to need to get access to the HttpClient service. Normally, we use dependency injection to access this, and this code is no different.</p>\n<p>Back in the provider, add a <code>deps: []</code> section.  To inject HttpClient, use:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deps</span>: [<span class=\"title class_\">HttpClient</span>]</span><br></pre></td></tr></table></figure>\n\n<p>And change the load function to take HttpClient as a parameter.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">load</span>(<span class=\"params\">http: HttpClient</span>): (<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (): <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt;((<span class=\"attr\">resolve</span>: <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">boolean</span></span>) =&gt;</span> <span class=\"built_in\">void</span>): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>), <span class=\"number\">10000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Don’t forget to import <code>HttpClientModule</code> into your module.</p>\n<p>And, once we load the configuration file, we will want to save the information some place.  There are a couple of ways that you might do this, but the most Angular like would be to create a service.  In our case our service will have one field named <code>baseUrl</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigService</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">baseUrl</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Since our service is using the new <code>provideIn</code> flag, we don’t need to worry about adding it to a module.</p>\n<p>In order to set this, we will need to add ConfigService to the <code>deps:</code> array.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deps</span>: [</span><br><span class=\"line\">  <span class=\"title class_\">HttpClient</span>,</span><br><span class=\"line\">  <span class=\"title class_\">ConfigService</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n\n<p>And make it a parameter of our <code>load()</code> function.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">load</span>(<span class=\"params\">http: HttpClient, config: ConfigService</span>): (<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (): <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt;((<span class=\"attr\">resolve</span>: <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">boolean</span></span>) =&gt;</span> <span class=\"built_in\">void</span>): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>), <span class=\"number\">10000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Loading-config-json\"><a href=\"#Loading-config-json\" class=\"headerlink\" title=\"Loading config.json\"></a>Loading config.json</h3><p>The rest is pretty straight forward Angular code.  We will</p>\n<ul>\n<li>http.get(‘.config.json’)</li>\n<li>if it gives us a 404 error, we set default values</li>\n<li>if it succeeds we set the values from the data that got loaded.</li>\n</ul>\n<p>Now, why would we get a 404 error?</p>\n<p>Well, the one place where this file won’t be available is when we are using <code>ng serve</code> during development.  But when we load this with a regular server like Apache, IIS, or Nginx, the file will be available.</p>\n<p>Now, where we have the <code>setTimeout()</code> code, replace it with <code>http.get()</code> code.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;./config.json&#x27;</span>)</span><br><span class=\"line\"> .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">   <span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x: ConfigService</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     config.<span class=\"property\">baseUrl</span> = x.<span class=\"property\">baseUrl</span>;</span><br><span class=\"line\">     <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">   &#125;),</span><br><span class=\"line\">   <span class=\"title function_\">catchError</span>((<span class=\"attr\">x</span>: &#123; <span class=\"attr\">status</span>: <span class=\"built_in\">number</span> &#125;, <span class=\"attr\">caught</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">void</span>&gt;): <span class=\"title class_\">ObservableInput</span>&lt;&#123;&#125;&gt; =&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (x.<span class=\"property\">status</span> !== <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">       <span class=\"title function_\">resolve</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     config.<span class=\"property\">baseUrl</span> = <span class=\"string\">&#x27;http://localhost:8080/api&#x27;</span>;</span><br><span class=\"line\">     <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"title function_\">of</span>(&#123;&#125;);</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"> ).<span class=\"title function_\">subscribe</span>();</span><br></pre></td></tr></table></figure>\n\n<p>I’m not going to bother explaining all of the details of RxJS 6, you can look that all up if you are interested.</p>\n<h2 id=\"Caveats\"><a href=\"#Caveats\" class=\"headerlink\" title=\"Caveats\"></a>Caveats</h2><p>Regardless of which of the two methods you use, you’ll need to make sure that your code will not need to change to access the database or the config file. If you are going to use a database, even then, I would not hard-code anything other than a relative URL. If the database is on some external server, make sure that you can proxy the code to is from your application’s server so that if and when the database location changes, you won’t need to recompile your code.</p>\n<h2 id=\"Full-resulting-code\"><a href=\"#Full-resulting-code\" class=\"headerlink\" title=\"Full resulting code\"></a>Full resulting code</h2><p>Just in case I left out a step or you are otherwise lost or maybe all you really care about is the code so you can copy and paste it.</p>\n<p>Here it is:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">APP_INITIALIZER</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClientModule</span>, <span class=\"title class_\">HttpClient</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ConfigService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./config.service&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span>, <span class=\"title class_\">Observable</span>, <span class=\"title class_\">ObservableInput</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../node_modules/rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; map, catchError &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/operators&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">load</span>(<span class=\"params\">http: HttpClient, config: ConfigService</span>): (<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (): <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt;((<span class=\"attr\">resolve</span>: <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">boolean</span></span>) =&gt;</span> <span class=\"built_in\">void</span>): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">       http.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;./config.json&#x27;</span>)</span><br><span class=\"line\">         .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">           <span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x: ConfigService</span>) =&gt;</span> &#123;</span><br><span class=\"line\">             config.<span class=\"property\">baseUrl</span> = x.<span class=\"property\">baseUrl</span>;</span><br><span class=\"line\">             <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">           &#125;),</span><br><span class=\"line\">           <span class=\"title function_\">catchError</span>((<span class=\"attr\">x</span>: &#123; <span class=\"attr\">status</span>: <span class=\"built_in\">number</span> &#125;, <span class=\"attr\">caught</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">void</span>&gt;): <span class=\"title class_\">ObservableInput</span>&lt;&#123;&#125;&gt; =&gt; &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (x.<span class=\"property\">status</span> !== <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">               <span class=\"title function_\">resolve</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             config.<span class=\"property\">baseUrl</span> = <span class=\"string\">&#x27;http://localhost:8080/api&#x27;</span>;</span><br><span class=\"line\">             <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"title function_\">of</span>(&#123;&#125;);</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\">         ).<span class=\"title function_\">subscribe</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">HttpClientModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [&#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_INITIALIZER</span>,</span><br><span class=\"line\">      <span class=\"attr\">useFactory</span>: load,</span><br><span class=\"line\">      <span class=\"attr\">deps</span>: [</span><br><span class=\"line\">        <span class=\"title class_\">HttpClient</span>,</span><br><span class=\"line\">        <span class=\"title class_\">ConfigService</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "angular",
                "configuration",
                "devops"
            ]
        },
        {
            "id": "http://davembush.github.com/ngrx-actions-class-vs-object-literal/",
            "url": "http://davembush.github.com/ngrx-actions-class-vs-object-literal/",
            "title": "NgRX Actions - Class vs Object Literal",
            "date_published": "2018-07-03T10:30:58.000Z",
            "content_html": "<p>When NgRX 4 came out and I discovered that the “right” way of creating Actions is to use TypeScript classes and not Object Literals, I was a bit surprised.  Why would you use a Class that requires you to use the “new” keyword?  Why would you put multiple classes in one file?  This is insane! <figure><img src=\"/uploads/2018/07/2018-07-04.png\" title=\"NgRX Actions - Class vs Object Literal\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/dkobras/8342620023/\">dkobras</a> &#x2F; <a href=\"//creativecommons.org/licenses/by-sa/2.0/\"> CC BY-SA</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h2><p>An Action is an object that contains a type variable and optionally, a payload. Depending on how you code your action, the payload may or may not have “payload” as the variable name. In NgRX version 2, payload was an optional variable. To improve type checking, payload was removed from the Action interface. </p>\n<p>The official documentation for NgRX version 4 encourages us to create a class for each action we want to dispatch. </p>\n<p>Suppose you have a Wait reducer that needs a Start action and an End action.  The code might look something like:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Action</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ngrx/store&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">START</span> = <span class=\"string\">&#x27;Wait.Start&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Start</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Action</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"keyword\">type</span> = <span class=\"variable constant_\">START</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">END</span> = <span class=\"string\">&#x27;Wait.End&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">End</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Action</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"keyword\">type</span> = <span class=\"variable constant_\">END</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>To use this code in our reducer or effects you would import like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Wait</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./wait.actions&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And then we would dispatch the action using the store we’ve injected into our code. We’ll cover that later. But for now, the dispatch basically looks like this: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Wait</span>.<span class=\"title class_\">Start</span>());</span><br></pre></td></tr></table></figure>\n\n<p>If you need to pass other information to an Action, your constructor can accept them: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">ACTION_WITH_MESSAGE</span> = <span class=\"string\">&#x27;Wait.ActionWithMessage&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ActionWithMessage</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Action</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"keyword\">type</span> = <span class=\"variable constant_\">ACTION_WITH_MESSAGE</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> message: <span class=\"built_in\">string</span></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This allows us to access the action payload as <code>Wait.message</code> instead of <code>Wait.payload</code>. Contrast this to putting the same code in a class with static methods as I’ve explained in previous articles:</p>\n<ul>\n<li><a href=\"/how-to-upgrade-ngrx-to-4-x/\">How to Upgrade to NgRX 4</a></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Wait</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"variable constant_\">START</span> = <span class=\"string\">&#x27;Wait.Start&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"variable constant_\">END</span> = <span class=\"string\">&#x27;Wait.Start&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"variable constant_\">ACTION_WITH_MESSAGE</span> = <span class=\"string\">&#x27;Wait.ActionWithMessage&#x27;</span>;    </span><br><span class=\"line\">  <span class=\"title function_\">start</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>: <span class=\"title class_\">Wait</span>.<span class=\"property\">START</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">end</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>: <span class=\"title class_\">Wait</span>.<span class=\"property\">END</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">actionWithMessage</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">Wait</span>.<span class=\"property\">ACTION_WITH_MESSAGE</span>,</span><br><span class=\"line\">      <span class=\"attr\">payload</span>: message&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In summary, we can have multiple classes and new them up.  Or we can have one class with multiple static methods that return object literals.</p>\n<h2 id=\"Advantage-Object-Literal\"><a href=\"#Advantage-Object-Literal\" class=\"headerlink\" title=\"Advantage Object Literal\"></a>Advantage Object Literal</h2><p>The main advantage to using the object literal way is that you don’t need to create an object.  You also stay with the “One class, one file” model that is so common in Angular. On the surface, this seems to be a clear winner.</p>\n<h2 id=\"Advantage-Classes\"><a href=\"#Advantage-Classes\" class=\"headerlink\" title=\"Advantage Classes\"></a>Advantage Classes</h2><p>But, because of the way we import the class bundles, the way we end up using the code looks nearly the same.  The main difference is that we must instantiate the class.  But we also get the option of having a different variable type for each action, we aren’t forced to use a variable named “payload” to hold all the associated data.  Further, if you need multiple payloads, you can do that.  You aren’t limited by how many parameters&#x2F;member variables each of your Action classes use.  When using Effects, we can type the return value of the Effect to the Action we want it to return. </p>\n<p>In fact, it is this type safety that is the main reason we should be creating Actions using the Class method instead of the object literal method.</p>\n<h2 id=\"Tweaking-Classes-For-Bigger-Advantage\"><a href=\"#Tweaking-Classes-For-Bigger-Advantage\" class=\"headerlink\" title=\"Tweaking Classes For Bigger Advantage\"></a>Tweaking Classes For Bigger Advantage</h2><p>There is a further tweak we can make to using classes that will give us an additional advantage when we use the code in our Reducers. Instead of marking the action types as strings, we can make them enums.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Action</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ngrx/store&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Types</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">START</span> = <span class=\"string\">&#x27;Wait.Start&#x27;</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">END</span> = <span class=\"string\">&#x27;Wait.End&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Start</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Action</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"keyword\">type</span> = <span class=\"title class_\">Types</span>.<span class=\"property\">START</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">End</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Action</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"keyword\">type</span> = <span class=\"title class_\">Types</span>.<span class=\"property\">END</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see below that this will give us extra type safety in our Reducers.</p>\n<h2 id=\"Type-Safety-in-Reducers\"><a href=\"#Type-Safety-in-Reducers\" class=\"headerlink\" title=\"Type Safety in Reducers\"></a>Type Safety in Reducers</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">ActionReducer</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ngrx/store&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Wait</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./wait.actions&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This could go in wait.actions.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">Action</span> = <span class=\"title class_\">Wait</span>.<span class=\"property\">End</span> | <span class=\"title class_\">Wait</span>.<span class=\"property\">Start</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">WaitReducer</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  state = <span class=\"number\">0</span>, action: Action</span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Wait</span>..<span class=\"property\">Types</span>.<span class=\"property\">START</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Wait</span>.<span class=\"property\">Types</span>.<span class=\"property\">END</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>We’ve ensured that the only Actions we will get are from Wait.</p>\n<p>Now, what you can’t see here is that if the payload we were send were of different types, each case statement would automatically typecast the action to the proper type.  This only works with Enums.  If you try this with strings, it won’t work the same way.</p>\n<h2 id=\"Type-Safety-in-Effects\"><a href=\"#Type-Safety-in-Effects\" class=\"headerlink\" title=\"Type Safety in Effects\"></a>Type Safety in Effects</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Wait</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./wait.actions&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WaitEffects</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Effect</span>()</span><br><span class=\"line\">  <span class=\"attr\">start$</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">Wait</span>.<span class=\"property\">Add</span>&gt; =</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actions$</span></span><br><span class=\"line\">      .<span class=\"title function_\">ofType</span>(<span class=\"title class_\">Wait</span>.<span class=\"property\">START</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">switchMap</span>(<span class=\"function\">(<span class=\"params\">action: Wait.Add</span>) =&gt;</span></span><br><span class=\"line\">        <span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">1</span>).<span class=\"title function_\">take</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">      )</span><br><span class=\"line\">      .<span class=\"title function_\">map</span>((): <span class=\"title class_\">Wait</span>.<span class=\"property\">Add</span> =&gt;</span><br><span class=\"line\">        (&#123;<span class=\"attr\">type</span>: <span class=\"title class_\">Wait</span>.<span class=\"property\">ADD</span>, <span class=\"attr\">payload</span>: <span class=\"number\">1</span>&#125;));</span><br><span class=\"line\">        </span><br><span class=\"line\">  <span class=\"meta\">@Effect</span>()</span><br><span class=\"line\">  <span class=\"attr\">end$</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">Wait</span>.<span class=\"property\">Add</span>&gt; =</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actions$</span></span><br><span class=\"line\">      .<span class=\"title function_\">ofType</span>(<span class=\"title class_\">Wait</span>.<span class=\"property\">END</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">switchMap</span>(<span class=\"function\">(<span class=\"params\">action: Wait.End</span>) =&gt;</span></span><br><span class=\"line\">        <span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">1</span>).<span class=\"title function_\">take</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    .<span class=\"title function_\">map</span>((): <span class=\"title class_\">Wait</span>.<span class=\"property\">Add</span> =&gt;</span><br><span class=\"line\">      (&#123;<span class=\"attr\">type</span>: <span class=\"title class_\">Wait</span>.<span class=\"property\">ADD</span>, <span class=\"attr\">payload</span>: -<span class=\"number\">1</span>&#125;));</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> actions$: Actions</span>)&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We’ve ensured that the only Action that get returned from either Effect is the Add action.</p>\n<h2 id=\"Tweak-Object-Literal-Implementation\"><a href=\"#Tweak-Object-Literal-Implementation\" class=\"headerlink\" title=\"Tweak Object Literal Implementation\"></a>Tweak Object Literal Implementation</h2><p>Now, you might think, “I can get all that type safety by creating a separate interface for each action type.  And this would be true.  But this would be even more files and the only thing to be gained is that your Action object gets created faster because you are using Object Literals.  I’m not sure the advantage is worth the pain.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>If you are converting an NgRX 2 site to NgRX 4, you’ll probably want to follow the advice I originally gave for upgrading.  But, once you’ve upgraded, you’ll want to move to using Classes so that you can take advantage of the stronger typings this will afford you.</p>\n",
            "tags": [
                "angular",
                "NgRX"
            ]
        },
        {
            "id": "http://davembush.github.com/vmware-s-clarity-design-system-for-angular/",
            "url": "http://davembush.github.com/vmware-s-clarity-design-system-for-angular/",
            "title": "VMWare's Clarity Design System for Angular",
            "date_published": "2018-03-20T10:30:51.000Z",
            "content_html": "<p>Unless you are a CSS wizard, you are probably using one of two CSS frameworks for your Angular projects or some sort of adaptation of them.  Bootstrap or Angular Material.  These have served us well, but they have one major flaw.  They target the “Mobile First” method of design.  This is great if your application must work on a mobile device.  But most corporate web applications target web applications.</p>\n<p>Have you ever heard any of these objections from your end users?</p>\n<ul>\n<li>Why is everything so big?</li>\n<li>Why can’t I have the label NEXT to the input field?</li>\n</ul>\n<p>And then you explain, it is so the screen can run on a mobile device and you hear, “But, this application will never run on a mobile device!”  Which is a valid point. </p>\n<p>Therefore, I was so excited to hear that VMWare has finally taken up the challenge of creating a Desktop First CSS Framework called <a href=\"//vmware.github.io/clarity/\">Clarity</a>. </p>\n<figure style=\"text-align: center\">\n<img src=\"/vmware-s-clarity-design-system-for-angular/2018-03-20.jpg\" class=\"\" title=\"VMWare&#39;s Clarity Design System for Angular\"><figcaption>Photo credit: [Sean Hering Photography](//visualhunt.com/author/2edd3b) on [Visual Hunt](//visualhunt.com/re/764a8a) / [ CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption>\n </figure> \n\n<span id=\"more\"></span>\n\n<h2 id=\"What-Is-Clarity\"><a href=\"#What-Is-Clarity\" class=\"headerlink\" title=\"What Is Clarity?\"></a>What Is Clarity?</h2><p>To call it a CSS Framework though doesn’t really do it justice.  It is a UI&#x2F;UX System.  Much like Angular Material.  In fact, an application written using Clarity is going to end up looking a lot like a Material Design application.  The main differences are going to be, it will be built for the desktop rather than a mobile device.  This means the components won’t be so fat and the components will look more like what you would expect from a desktop application.</p>\n<h2 id=\"Why-Clarity\"><a href=\"#Why-Clarity\" class=\"headerlink\" title=\"Why Clarity?\"></a>Why Clarity?</h2><p>Aside from the Desktop vs Mobile issue, there are other reasons you might want to consider using Clarity.</p>\n<h3 id=\"Material-Meets-Bootstrap\"><a href=\"#Material-Meets-Bootstrap\" class=\"headerlink\" title=\"Material Meets Bootstrap\"></a>Material Meets Bootstrap</h3><p>Now, while the end result looks a lot like Angular Material, the way you style your application feels a lot more like Bootstrap.  This is something that has always bothered me about Angular Material.  In fact, one of the main reasons we didn’t use Angular Material at one of the places I’ve worked is specifically because it was too hard to make the site follow the design guides that were handed down to us.  Bootstrap, on the other hand, gave us an easy way to adapt the CSS to fit the requirements.  Give me components that provide functionality and provide a way that I can style them.  But don’t make common components their own special component just so you can add CSS to the standard element.  Make that a common CSS thing that you can change with CSS!</p>\n<h3 id=\"508-Compliance\"><a href=\"#508-Compliance\" class=\"headerlink\" title=\"508 Compliance\"></a>508 Compliance</h3><p>Another big motivation for me to look at Clarity is that they have stricter 508 compliance if you use the default theme.  The one that is particularly important to me is the issue of contrast to support people who are color blind like me.  That’s 10% of the population that is impacted by color blindness in general which is a pretty large sample size to be pissing off with your color choices when there are tools that will let you see what it will look like to the various type of color blind people.  There compliance doesn’t end there, but that is the one that impacts me, so I care more about it.</p>\n<h3 id=\"More-x2F-Better-Components\"><a href=\"#More-x2F-Better-Components\" class=\"headerlink\" title=\"More&#x2F;Better Components\"></a>More&#x2F;Better Components</h3><p>Third, several components exist that meet some requirements that the team I’m currently working on could have benefited from. While Angular Material is moving to fill in some of the gaps, the Clarity system has those components already.</p>\n<h3 id=\"Great-Documentation\"><a href=\"#Great-Documentation\" class=\"headerlink\" title=\"Great Documentation\"></a>Great Documentation</h3><p>While it isn’t necessarily unique to Clarity, I found the documentation complete and easy to locate.  However, just like any of the other systems, you should take the time to read through most of the documentation, so you understand how it should work prior to actually trying to code anything.</p>\n<h3 id=\"Easy-to-Use\"><a href=\"#Easy-to-Use\" class=\"headerlink\" title=\"Easy to Use\"></a>Easy to Use</h3><p>Finally, I took Clarity for a spin and found it MUCH easier to use than either Bootstrap or Angular Material.  Everything worked the way I expected it to and I don’t believe there was one time I had to add CSS to one of my components to make it do what I really wanted it to do.  This says a lot for a product that hasn’t even been officially released yet.</p>\n<h3 id=\"VMWare\"><a href=\"#VMWare\" class=\"headerlink\" title=\"VMWare\"></a>VMWare</h3><p>Oh, and did I mention that it is backed by VMWare?  I always like it when an open source project is backed by a major company that doesn’t appear to be going away anytime soon.  This is why I tend to stay away from some of the smaller projects, like Vue, regardless of how great they are.  Yes, I know it has a big community.  But, people need to eat.  A project with corporate sponsorship is much more likely to be run well, progress at a steady pace, and be responsive to issues that crop up.</p>\n<h2 id=\"Why-You-Might-Want-to-Pass\"><a href=\"#Why-You-Might-Want-to-Pass\" class=\"headerlink\" title=\"Why You Might Want to Pass\"></a>Why You Might Want to Pass</h2><p>For all these benefits, there are a couple of reasons why you might want to at least wait if not ignore Clarity. </p>\n<p>As I mentioned above, the product hasn’t been released yet and therefore there will be breaking changes as the project makes its way to version 1.0.  This is easily mitigated by freezing your development efforts to the current release and only upgrading when you have time to address the breaking changes. </p>\n<p>You also might want to avoid using Clarity if you really need Mobile First.  I’m sure you could adapt the CSS to work with Mobile as well as Desktop.  Personally, I’d just make sure all of my business logic was outside my components so that I could develop a Mobile front-end and a Desktop front-end without losing any functionality.  This would mean one site would use Bootstrap, Angular Material, or IONIC and the other would use Clarity.</p>\n<h2 id=\"Installation-The-Right-Way\"><a href=\"#Installation-The-Right-Way\" class=\"headerlink\" title=\"Installation - The Right Way\"></a>Installation - The Right Way</h2><p>The clarity site has instructions for installing Clarity that are general enough that you could use the styles on multiple frameworks.  What follows is an adaptation of those instructions that are specific to an Angular site that uses the Angular CLI.</p>\n<ul>\n<li><p><code>npm install --save @webcomponents/custom-elements@^1.0.0</code></p>\n<ul>\n<li><p>This is a polyfill that we will add to our polyfills.ts file</p>\n<p>  <code>import &#39;@webcomponents/custom-elements/custom-elements.min&#39;;</code></p>\n</li>\n</ul>\n</li>\n<li><p><code>npm install --save @clr/icons</code></p>\n</li>\n<li><p><code>npm install --save @clr/ui</code></p>\n</li>\n<li><p><code>npm install --save bootstrap@4.0.0-alpha.5</code>(note I didn’t try using the current release version.  It may, or may not, work.)</p>\n</li>\n<li><p><code>npm install --save @clr/angular</code></p>\n</li>\n<li><p>Add the icon css and js files to the .angular-cli.json file in the “styles” and “scripts” section:</p>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;styles&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;styles.css&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;../node_modules/@clr/icons/clr-icons.css&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;../node_modules/@clr/ui/clr-ui.min.css&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;../node_modules/@clr/icons/clr-icons.min.js&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Import the clarity module into your AppModule to make the components available</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ClarityModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@clr/angular&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">ClarityModule</span></span><br><span class=\"line\">],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>npm start</code> to make sure everything builds correctly.  If everything builds and you run the app, you will see that the page has bigger fonts than you may be used to.  If it looks like it has always looked, you probably don’t have it configured correctly yet.</li>\n</ul>\n<p>If Clarity looks like it might meet your requirements better than the alternatives, I encourage you to take <a href=\"//vmware.github.io/clarity/\">Clarity</a> for a spin.</p>\n<h2 id=\"Other-Places-Talking-About-VMWare-Clarity\"><a href=\"#Other-Places-Talking-About-VMWare-Clarity\" class=\"headerlink\" title=\"Other Places Talking About VMWare Clarity\"></a>Other Places Talking About VMWare Clarity</h2><ul>\n<li><a href=\"//www.starwindsoftware.com/blog/vmware-clarity-why-should-you-care\">VMware Clarity – Why should you care</a></li>\n<li><a href=\"//devchat.tv/adv-in-angular/aia-172-clarity-project-vmware-eudes-petonnet-vincent-matt-hippely\">The Clarity Project at VMware</a> (podcast episode)</li>\n</ul>\n",
            "tags": [
                "angular",
                "css",
                "clarity",
                "ui",
                "ux"
            ]
        },
        {
            "id": "http://davembush.github.com/the-full-stack-developer-myth/",
            "url": "http://davembush.github.com/the-full-stack-developer-myth/",
            "title": "The Full Stack Developer Myth",
            "date_published": "2018-03-06T11:30:01.000Z",
            "content_html": "<p>Once upon a time, there were Full Stack Developers, but as time progressed, they disappeared. Now, all we have are impostors. People trying to be full stack, but failing. The Full Stack Developer is now as obsolete as a unicorn. </p>\n<p>Back when I started programming, you could get by only knowing one language and a couple of supporting “languages”. </p>\n<p>My story is similar to many from my generation. I learned a little Basic to catch the programming bug. Then I tried Pascal and moved on to C before I went back to school where I learned COBOL, JCL and CICS. Mostly it was COBOL. </p>\n<p>It didn’t take long to learn any of those languages because the language was the language. Things didn’t move quickly. CICS was simple. And we only needed enough JCL to get our programs to compile. <figure><br><img src=\"/uploads/2018/03/2018-03-06.jpg\" title=\"The Full Stack Developer Myth\"><figcaption>Photo credit: <a href=\"//visualhunt.com/author/751f9f\">Avariel Falcon</a> on <a href=\"//visualhunt.com/re/1f7533\">Visual hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"The-Beginning-of-Complexity\"><a href=\"#The-Beginning-of-Complexity\" class=\"headerlink\" title=\"The Beginning of Complexity\"></a>The Beginning of Complexity</h2><p>Once I graduated, I moved into the world of PCs. Here, I quickly adopted Clipper, a dBase III compiler. Once again, there wasn’t a lot to know and I was able to quickly become an expert in the language. Not because I was any super smart programmer, but because there wasn’t much to know. In fact, at my first job, there was so little to know that I was able to easily be a one-man IT department. </p>\n<p>But today is different. Especially if you are programming anything of significance for the web. Today, to get a web application up and running that looks good and performs well, you’ll need to know: HTML, CSS, JavaScript and some sort of backend programming language. That’s just the minimum. If you are working in an enterprise environment, you’ll also probably need to know one of the popular JavaScript frameworks. Maybe some SASS. Node and WebPack. A UX&#x2F;UI framework such as Bootstrap, Material, or Clarity. And the list can keep growing. We haven’t even touched on authentication protocols, knowing enough about security to keep your site safe, or anything about DevOps, Continuous Integration, or Continuous Delivery. </p>\n<p>And yet, I still see most job request advertising for “Full Stack Developers” </p>\n<p>Is that even possible?</p>\n<h2 id=\"What-Does-Full-Stack-Mean\"><a href=\"#What-Does-Full-Stack-Mean\" class=\"headerlink\" title=\"What Does Full Stack Mean?\"></a>What Does Full Stack Mean?</h2><p>When we first started developing web applications, two things were true. They weren’t very complicated, and they didn’t use a lot of technology. Keep in mind that in the beginning, our biggest issue was cross browser compatibility. This kept us from advancing quickly. So, a typical web application would do 99% of the work on the server and make it all look good with CSS. HTML wasn’t that complicated. So, one developer could, with a little effort, keep everything they needed to know in their head.</p>\n<h2 id=\"The-Boiling-Frog\"><a href=\"#The-Boiling-Frog\" class=\"headerlink\" title=\"The Boiling Frog\"></a>The Boiling Frog</h2><p>As things progressed, we added JavaScript, then some simple JavaScript widgets. HTML improved. CSS improved. And then on the server side, this thing called REST came along. Suddenly, the amount of stuff we need to know has exploded. A new framework is born every hour it seems. Updates happen at a blindingly fast pace. Can anyone keep up? </p>\n<p>And yet, companies still want “Full Stack Developers”</p>\n<h2 id=\"The-Emperor-Has-no-Clothes\"><a href=\"#The-Emperor-Has-no-Clothes\" class=\"headerlink\" title=\"The Emperor Has no Clothes\"></a>The Emperor Has no Clothes</h2><p>Is there no one who can see that this is a recipe for disaster? </p>\n<p>I think programmers kind of like being able to dabble in several different technologies. Spend a little time here. A little time there. Here a little, there a little. It certainly isn’t boring. </p>\n<p>But, the problem with this is all your code suffers. Oh, sure, I’m definitely a proponent in learning multiple languages. The more you learn, the better you get. But, I’m also a proponent of being an expert in one of them. At least one at a time. And there is the problem. Because we have to know so much, we can’t possibly be an expert in anything. </p>\n<p>This last week, someone asked me how much of Angular I know. I had to confess, “maybe 80%” It wouldn’t surprise me if I knew even less. The framework keeps getting new features and I have little time to keep up. And I’m fortunate enough that I’ve spent 90% of my time over the last 4 years doing JavaScript development. And since Angular started the RC cycle, I’ve been spending a 100% of my time with Angular. If I’m having trouble keeping up, what about the guys who are trying to everything else? </p>\n<p>Because I don’t currently even know what I don’t know, my code suffers. Which leads to my next point.</p>\n<h2 id=\"Bad-for-Business\"><a href=\"#Bad-for-Business\" class=\"headerlink\" title=\"Bad for Business\"></a>Bad for Business</h2><p>Business at some level understands that having one guy who is the IT department isn’t going to work well. You don’t see any jobs advertised for that. </p>\n<p>But “Programming” gets lumped together as one giant thing. But I’ll tell you. Work with a guy who really knows CSS. Or really knows Angular. Or really knows HTML. Two things would happen. Quality code would be produced much faster. The code would have fewer bugs. And the other developers, would probably become better in the areas they are weak in. This means that hiring a Full Stack developer is costing business more, even if they pay more for the individual experts.</p>\n<h2 id=\"Why-I-Care\"><a href=\"#Why-I-Care\" class=\"headerlink\" title=\"Why I Care\"></a>Why I Care</h2><p>Some may accuse me of being some old dude who can’t find a job.  Trust me, I have no problem finding work!  No.  The reason I care is because I’m sick of working on the crappy code left behind by guys who either didn’t invest the time to learn how to code correctly using the tools they had, or lacked the experience to know where to even start. </p>\n<p>Now that client side development is a thing, it isn’t enough to be able to hack a result together, which is what most full-stack developers are doing who have most of their experience on the back-end. Even otherwise really smart programmers are getting this wrong.  Just because you know JavaScript or TypeScript (or whatever client side language you use that transpiles to JavaScript) doesn’t mean you know how to properly write a client side application that can be maintained, let alone one that can be tested properly!</p>\n<h2 id=\"I’m-Not-The-Only-One\"><a href=\"#I’m-Not-The-Only-One\" class=\"headerlink\" title=\"I’m Not The Only One\"></a>I’m Not The Only One</h2><p>When I first wrote this article, I had no idea this was such a hot topic.  Some agree.  Others disagree.  All seem pretty passionate in their view.  Many didn’t seem to read the whole article. </p>\n<p>But here’s the deal, I’m not the only one.  A quick search for “Full Stack Developer Myth” brings up the following articles:</p>\n<ul>\n<li><a href=\"//medium.com/swlh/the-full-stack-developer-is-a-myth-4e3fb9c25867\">The Full Stack Developer Is a Myth</a></li>\n<li><a href=\"//www.atlanticbt.com/blog/myth-full-stack-unicorn-developer/\">The Myth of The Full-Stack Unicorn Developer</a> (love the title)</li>\n<li><a href=\"//andyshora.com/full-stack-developers.html\">The Myth of the Full-Stack Developer</a></li>\n<li><a href=\"//aquent.com/blog/full-stack-developer-myth\">The Myth of the Full Stack Developer</a></li>\n</ul>\n<p>And that’s just the first four I could find. </p>\n<p>To be fair, a small company may think they need to hire someone who can do it all.  But, they’d be better off hiring a “Full-Stack Agency” who has specialist in each area.  Unfortunately, my experience has shown a company who should be using an agency also has no clue about the skill level they should be hiring.</p>\n<h2 id=\"Practical-Reality\"><a href=\"#Practical-Reality\" class=\"headerlink\" title=\"Practical Reality\"></a>Practical Reality</h2><p>I’m not sure I have an answer for the dilemma I’ve presented. Show your manager this article? Refuse to take Full Stack jobs? </p>\n<p>No, I doubt those will work. </p>\n<p>What I’ve been doing is interviewing for jobs on the strength of what I’m an expert in. It doesn’t always work. But for the companies that recognize that I know way more than most of their developers who are just getting by, this lands me a secure, well-paying place in the dev shop. </p>\n<p>Spread the word. Full Stack developers don’t really exist. The best developers are specialist and business would do well to hire specialist over generalist.</p>\n",
            "tags": [
                "full stack developer",
                "web development"
            ]
        },
        {
            "id": "http://davembush.github.com/how-you-do-anything/",
            "url": "http://davembush.github.com/how-you-do-anything/",
            "title": "How you do Anything ...",
            "date_published": "2018-02-20T11:30:35.000Z",
            "content_html": "<p>I’ve been programming now for 30 years. Over those thirty years, and more so over the last five to ten years, I’ve become increasingly frustrated by the attitude of managers and programmers alike toward programming. </p>\n<p>One programmer I know is pretty vocal about this attitude.  All he seems to care about is how fast he can write the code.  “I got that application done in a month!”  And then he’ll complain about how it is everyone else’s fault that he spent the next four months fixing bugs. </p>\n<p>And it is no wonder he has this attitude.  Most of the managers I’ve worked for will acknowledge that there is a lot of technical debt, but the pressure of getting the code written always outweighs the pressure of the debt. </p>\n<p>I’ve said for years that I’m not at all surprised that software has bugs.  What surprises me most is that any of our code works at all.  If we are honest about our code, we recognize that our code is worse than a store front on the wild west.  A nice facade on the front that everyone sees (if we are lucky) but look behind the facade and the store is barely standing up because the design, architecture and lumber is so bad. </p>\n<p>But, if it is true that “How you do anything is how you do everything.”  shouldn’t we spend a little time practicing quality in the not so obvious places so that we can get in the habit of quality?  Maybe a culture of quality will rub off into our code and produce code that really does get written quickly and has very little technical debt.  Not just in the area of bugs, but in flexibility, architecture, and design. </p>\n<p>So, what could we change in our programming practice that wouldn’t require persuading a manager to make a change in how the whole organization worked? <figure><img src=\"/uploads/2018/02/2018-02-20.jpg\" title=\"How you do anything...\"> Photo on <a href=\"//visualhunt.com/re/cecba2\">Visualhunt</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"How-do-you-Dress\"><a href=\"#How-do-you-Dress\" class=\"headerlink\" title=\"How do you Dress?\"></a>How do you Dress?</h2><p>When I first started programming, I had to wear a suit to work.  I forgot my tie one day and actually got reprimanded.  This, despite the fact that the programmers were tucked away in a back room that you had to know existed to get to.  That is, there was no way one of the customers our business worked with was going to find us.  I hated it. </p>\n<p>The pendulum has in the opposite direction.  I’ve been on several interviews where I’ve explicitly been told to NOT wear a suit. </p>\n<p>But I do wonder.  Does how we dress have an impact on our code?  If we don’t care much about how WE look, might we not care that much about what our code looks like?  Does it matter?  I think it might. </p>\n<p>Might it also subconsciously impact other’s view of the quality of code you produce?  You know the adage.  Always dress just below your manager.  But what if your manager dresses like a slob?  Currently, my signature work clothes are black jeans, button down shirt and a sweater.  But, I’m thinking of bumping it up a notch.</p>\n<h2 id=\"What-does-your-desk-look-like\"><a href=\"#What-does-your-desk-look-like\" class=\"headerlink\" title=\"What does your desk look like?\"></a>What does your desk look like?</h2><p>There was a guy I worked with early on in my career who always left his desk in a condition that looked like no one had worked at the desk in months.  Everything was put away.  Several years ago, I decided to take on that habit. </p>\n<p>Funny story.  A couple of gigs ago, a manager from three levels up came down to visit after I had left for the day.  She looked at my desk and said, “Does anyone work here?”  My manager said, “YES!!! Don’t touch anything!”  Guess she was hunting for stray equipment. </p>\n<p>I would say, this simple act was the pivot point for me when I started to care more about my code beyond “Does it work?” </p>\n<p>There is something about working in a clean area slightly dressed up.  Other parts of your life follow along for the ride.</p>\n<h2 id=\"Linters\"><a href=\"#Linters\" class=\"headerlink\" title=\"Linters\"></a>Linters</h2><p>One of those areas is what your code looks like.  A linter can be configured to enforce style rules on your code.  And can also catch dumb mistakes.  The more I use linters, the more convinced I am everyone should use one. </p>\n<p>Here is some of the ways you will benefit, even if you are the only one using a linter.</p>\n<ul>\n<li>Your code will always follow the same format.  This will make the code easier to read and understand.</li>\n<li>As I mentioned, some rules help catch dumb mistakes before you even run the code.</li>\n<li>Just like a clean desk feels inviting, well formatted code feels inviting.  The converse, poorly formatted code, adds to the stress level of working on the code.</li>\n</ul>\n<h2 id=\"Learn-Your-Tools\"><a href=\"#Learn-Your-Tools\" class=\"headerlink\" title=\"Learn Your Tools\"></a>Learn Your Tools</h2><p>I am amazed at how many places I’ve worked where they expect you to learn a particular tool on the fly.  No training.  “We are now using X on this next project.  Download it and start using it!”  And then they wonder why the project is such a disaster.  Bugs everywhere. </p>\n<p>Want to look like a rock star?  Want to be the guy the boss ask “what should we do?”  Be the guy who knows that new tool better than anyone else. </p>\n<p>In the process, you’ll also be the guy who uses the tool the way the people who developed that tool intended it to be used. </p>\n<p>Here’s a truth I’ve observed.  Everyone wants to use whatever tool they’ve just started using like the last tool they used.  And then, when it doesn’t, the new tool “doesn’t work.”  This one truth has done more to hold our industry back than any other one thing I can point to.</p>\n<h2 id=\"Design-Patterns\"><a href=\"#Design-Patterns\" class=\"headerlink\" title=\"Design Patterns\"></a>Design Patterns</h2><p>Learn the basic design patterns for your environment.  But go beyond learning the pattern.  Learn why the pattern exist.  What problem does it solve?  Be able to recognize counterfeits.</p>\n<h2 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h2><p>Along with Design Patterns, learn the basics of Architecture.  Here’s a hint.  All good architecture answers the question, “How can I write code that is not dependent on any other code?”  This is one of the reasons I love Functional Programming.  By design, Functional code is not dependent on other code.  Dependencies are passed into the function.  But you can achieve similar objectives using Object Oriented programming languages or even Procedural languages.</p>\n<h2 id=\"Single-Responsibility\"><a href=\"#Single-Responsibility\" class=\"headerlink\" title=\"Single Responsibility\"></a>Single Responsibility</h2><p>Granular is better than Monolithic!  Don’t be afraid to split things up.  Use components.  Compose classes of other classes.  Components of other components.  And most important of all, don’t create a Utils class of any kind.  In some languages this is easier than others.  But if you can, any method you have in a Utils class should be a function in its own file.  If you can’t do that, maybe each function belongs in its own class unless there is a strong argument for putting them together in a class that can be reasonably named in a way that obviously groups those methods. </p>\n<p>Another pet peeve of mine is putting multiple classes or interfaces in one file. Split them up!  Don’t make me go hunting for the source of a class. </p>\n<p>The ONLY time you might be excused from splitting things up is if the only place the code is being used is in the file’s main class.  But once you make that class available to the outside world, out it comes.</p>\n<h2 id=\"Alternate-Languages\"><a href=\"#Alternate-Languages\" class=\"headerlink\" title=\"Alternate Languages\"></a>Alternate Languages</h2><p>This should go without saying.  But the more languages you learn, the better programmer you will become.  I remember when I started learning C++, I had a hard time understanding references.  And then I started learning Clipper (a dBase III compiler) and something they said made references make sense suddenly. </p>\n<p>And this has been my experience all along.  Every new thing I learn helps me see problems in a slightly different perspective.  Making my code in every language I know that much better.</p>\n<h2 id=\"Code-Reviews\"><a href=\"#Code-Reviews\" class=\"headerlink\" title=\"Code Reviews\"></a>Code Reviews</h2><p>So far, everything I’ve mentioned is something you can do on your own.  This last one will require at least one other person.  Maybe you can buddy up with someone at work for this. </p>\n<p>It amazes me that in 30 years of programming, only three of those years have been in an environment where my code was ever reviewed by someone else.  But getting another set of eyes on your code is helpful if for no other reason than someone else has had to try to understand what you did while you still remember instead of waiting years and you’ve forgotten or moved on.  None of us are as smart as all of us.  Take advantage of another pair of eyes on your code, even if that’s not a formal thing where you currently work.</p>\n",
            "tags": [
                "agile",
                "best practices",
                "extreme programming"
            ]
        },
        {
            "id": "http://davembush.github.com/property-based-testing-in-angular-with-jsverify/",
            "url": "http://davembush.github.com/property-based-testing-in-angular-with-jsverify/",
            "title": "Property Based Testing in Angular with jsVerify",
            "date_published": "2018-02-06T11:30:58.000Z",
            "content_html": "<p>Several weeks ago, I mentioned that I’ve been playing around with <a href=\"/property-based-testing-revealed-a-better-way-to-test/\">Property Based Testing</a>.  In particular, I’ve been using it with my Angular code.  The framework I’ve chosen is <a href=\"//github.com/jsverify/jsverify\">jsVerify</a> because it seemed like the most straight forward of the available tools and it has a documented way of integrating with Jasmine, which Angular test use by default.  Angular with jsVerify.  How does that work?</p>\n<p>The documentation for how to use jsVerify seems to be written for people who already understand Property Based Testing from some other environment.  This makes picking it up and using it awkward at best.</p>\n<p>Here’s what I’ve learned along the way. <figure><img src=\"/uploads/2018/02/2018-02-06.jpg\" title=\"Property Based Testing in Angular with jsVerify\"><figcaption>Photo credit: <a href=\"//visualhunt.com/author/a3b62c\">Official U.S. Navy Imagery</a> on <a href=\"//visualhunt.com/re/d44953\">Visual Hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h2><p>To install jsVerify into your dev environment, use:</p>\n<p><code>npm install --save-dev jsverify</code></p>\n<p>To use the code in your spec file, import jsverify using:</p>\n<p><code>import * as jsc from &#39;jsverify&#39;;</code></p>\n<p>We us ‘jsc’ because jsVerify originated from <a href=\"//github.com/douglascrockford/JSCheck\">jsCheck</a>.  Why not just use jsCheck?  Well, because it looks even less well documented.  That doesn’t mean that it is, but that is how I felt when I went to the sites and I couldn’t be bothered to wade through the wall of text the documentation site presented me with.</p>\n<h2 id=\"A-Simple-Test\"><a href=\"#A-Simple-Test\" class=\"headerlink\" title=\"A Simple Test\"></a>A Simple Test</h2><p>Now to setup a simple test.  We won’t really test anything.  I just want to show the structure of the test.</p>\n<p>There are two methods you might use that seem very similar.  <code>assertForall()</code> and <code>checkForall()</code>.  What I didn’t realize at first is that <code>assertForall()</code> is the one you want to use because it will throw the exception that Jasmine is listening for so that I knows the test failed.  If you use <code>checkForall()</code> the test will fail, but Jasmine will think it succeeded.  And if you’re thinking, yeah but you should use expect() with checkForAll(), that doesn’t always work quite the way you would expect.  No pun intended.</p>\n<p>The basic structure of a test will go inside of your <code>it()</code> block.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;Any two numeric values&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should equal 20&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    jsc.<span class=\"title function_\">assertForall</span>(jsc.<span class=\"property\">integer</span>, jsc.<span class=\"property\">integer</span>,</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> a_and_b_equal_20 = a + b === <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a_and_b_equal_20;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>This test will, obviously, fail.  A test we would expect to pass would look like this.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;Any two numeric values&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should be able to be added in any order&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    jsc.<span class=\"title function_\">assertForall</span>(jsc.<span class=\"property\">integer</span>, jsc.<span class=\"property\">integer</span>,</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> a_and_b_equal_20 = a + b === b + a;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a_and_b_equal_20;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>You may have guessed by now that <code>assertForall()</code>takes a variable number of parameters.  The last parameter is a callback that runs our test.  The parameters before the callback describe the kinds of parameters that will be passed to the callback.  The description of the parameter is of type Arbitrary.  So, what we’ve said above is something to the effect of, “generate two random integers and pass them to the callback.”  You can check the jsVerify site for “Primitive Arbitraries” to see what is built in.</p>\n<h2 id=\"Adding-Complexity\"><a href=\"#Adding-Complexity\" class=\"headerlink\" title=\"Adding Complexity\"></a>Adding Complexity</h2><p>It won’t be long before you run into a situation where the primitive arbitraries won’t do the job for you and you’ll need to resort to the combinators.  This allows you to create a brand new arbitrary by combining primitives together.  The one I found myself using the most was <code>oneof()</code> where you pass a list of arbitraries as an array and the system will pick from the list and generate a new random value from the list.  Don’t confuse this with <code>either()</code>.  I’ve used <code>oneof()</code> in combination with <code>constant()</code>for cases where I’ve needed to create a random value from a list of possible values.</p>\n<p>Where things really got interesting though was when I needed to create an object with random values for the properties.  For this, you’ll need to use a record.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> recordArb = jsc.<span class=\"title function_\">record</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: jsc.<span class=\"property\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: jsc.<span class=\"property\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">arrayThing</span>: jsc.<span class=\"title function_\">array</span>(jsc.<span class=\"title function_\">record</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">fieldOne</span>: jsc.<span class=\"property\">integer</span>,</span><br><span class=\"line\">    <span class=\"attr\">dateField</span>: jsc.<span class=\"property\">datetime</span></span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>This will let us pass random objects to our tests.  This is great for testing Reducers.  You’ll notice we even were able to create a nested array.  This will create a random length array with random records inside of it.</p>\n<h2 id=\"Arbitraries-from-Generators\"><a href=\"#Arbitraries-from-Generators\" class=\"headerlink\" title=\"Arbitraries from Generators\"></a>Arbitraries from Generators</h2><p>Now that I’ve been working with it for a while, I can’t remember why it was so difficult.  But the one place I did have some trouble was the concept of Generators vs Arbitraries.  Arbitraries are what we need to pass into <code>assertForall().</code> Generators are what we use when we need to come up with some way of creating our own special random data.  You rarely need to use this, but when you do, being able to convert the Generator to an Arbitrary will become critical.</p>\n<p>To convert a generator to an arbitrary, use bless.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jsc.<span class=\"property\">generator</span>.<span class=\"title function_\">bless</span>(generatorThing);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Typing\"><a href=\"#Typing\" class=\"headerlink\" title=\"Typing\"></a>Typing</h2><p>As of this writing, the typing for <code>checkForall()</code> is incorrect.  It is typed as returning <code>Result&lt;any&gt;</code>when it in fact returns <code>Result&lt;any&gt; | boolean</code>I just discovered this so I haven’t entered a pull request that will fix the issue.  If you decide to use <code>checkForall()</code> instead of <code>assertForall()</code>, you’ll need to fix up the typings yourself.</p>\n<h2 id=\"Puzzles\"><a href=\"#Puzzles\" class=\"headerlink\" title=\"Puzzles\"></a>Puzzles</h2><p>The one thing I’m still trying to figure out is the best way of running the test.  The fact of the matter is that jsVerify tests do not lend themselves to the structure of a Jasmine test.  And since I have to generate 100 instances of random data for each test, it may not be efficient to separate each test out into separate it statements.</p>\n<p>For now, I’m running all related evaluations within one it statement and using the back-tick string delimiter to allow me to have a multi-line it() string that describes all that I’m testing.  But, by combining all of my test like this, I can no longer determine which of my test actually failed.</p>\n<p>I’m not exactly sure what the best solution to that is (yet) and right now, there don’t seem to be a lot of people using jsVerify or any other property based framework with Jasmine to get a lot of hints on how we might write tests that are easy to use.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I encourage you to give jsVerify a try.  It really isn’t that hard to pick up and hopefully, this short article will smooth over some of the problems you may have as you get started.  Despite the puzzles I mentioned above the advantages of using it over example based testing encourage me to see just how far I can push this framework.</p>\n",
            "tags": [
                "angular",
                "jasmine",
                "property based testing"
            ]
        },
        {
            "id": "http://davembush.github.com/property-based-testing-revealed-a-better-way-to-test/",
            "url": "http://davembush.github.com/property-based-testing-revealed-a-better-way-to-test/",
            "title": "Property Based Testing Revealed - A Better Way to Test",
            "date_published": "2018-01-23T11:30:24.000Z",
            "content_html": "<p>Over the last couple of weeks, I’ve been experimenting with Property Based Testing.  While I’m probably doing it “wrong” by many definitions, I’m finding it useful enough that I’m adding it to my testing toolbox. <figure><img src=\"/uploads/2018/01/2018-01-23.jpg\" title=\"Property Based Testing Revealed - A Better Way to Test\"><figcaption>Photo credit: <a href=\"//visualhunt.com/author/0651d3\">abraham.williams</a> on <a href=\"//visualhunt.com/re/284007\">VisualHunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by-sa/2.0/\"> CC BY-SA</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"What’s-A-Property\"><a href=\"#What’s-A-Property\" class=\"headerlink\" title=\"What’s A Property?\"></a>What’s A Property?</h2><p>As you introduce yourself to Property Based Testing, one of the first things you’ll need to understand is what they mean by a “property.”  Most of us who have been doing some form of Object Oriented Programming think of “properties” as data points on an object.  That’s not even close to what the word means when we talk about Property Based Testing. </p>\n<p>Roughly translated, a “property” is some feature of the code under tests.  Most of the beginner literature uses the classic add(a, b) method.  Properties of an add method include:</p>\n<ul>\n<li><code>add(a, b) === add(b, a)</code></li>\n<li>if <code>a</code> is zero then <code>add()</code> will return the value of <code>b</code></li>\n<li><code>add(a, b) - a</code> will equal b (and similar for minus b equals a).</li>\n</ul>\n<p>The key here is that we shouldn’t need to know too much about the data we are sending in to our add method because we are going to send in random data.  So, any property we test needs to be expressed in a data agnostic way.</p>\n<h2 id=\"What-are-the-Advantages\"><a href=\"#What-are-the-Advantages\" class=\"headerlink\" title=\"What are the Advantages?\"></a>What are the Advantages?</h2><p>And while having to think about our test in a data agnostic way is hard, at first, the first advantage is that we start thinking about testing our code in terms of generalities instead of specifics.  And, really, a general test is a much more robust test. </p>\n<p>But, we need data for our tests, right?  Where does that come from?  Depending on the framework you are using, this may vary, but the general idea is that you describe what the data should look like, and the framework will generate random parameters to pass in.  This fact leads us to two more benefits of Property Based Testing. </p>\n<p>First, since all I need to do is describe what the data should look like, I’m not forced to think of the data I want to use to tests my function.  I don’t know about you, but my tendency is to create data that works with my function instead of trying to create data that will break my function.  By having the framework create random data, I’m more likely to test with data that will break my code. </p>\n<p>And that leads to the second benefit of random data.  I’m more likely to find the edge cases for my function under test. Now, one detail I’ve left out is that each test you create gets run multiple times with different random data.  So, it isn’t like one day your tests work great and another day they fail.  No.  The system I use generates 100 different sets of data per tests.  You can have it create more or less tests as needed.</p>\n<h2 id=\"Places-You-Might-Not-Use-Property-Based-Testing\"><a href=\"#Places-You-Might-Not-Use-Property-Based-Testing\" class=\"headerlink\" title=\"Places You Might Not Use Property Based Testing\"></a>Places You Might Not Use Property Based Testing</h2><p>Now, running 100 different permutations on a test that takes a long time to run may not be practical.  My first question would be, why does your code take that long?  Are you trying to unit test HTML code and the rendering is taking a long time?  That’s probably a poor use case. </p>\n<p>Another place where you might want to avoid property based tests is when you’ve already basically tested the component parts and you just need to do a sanity check in the integration of the parts.</p>\n<h2 id=\"Places-You-Might-Use-Property-Based-Testing-Anyhow\"><a href=\"#Places-You-Might-Use-Property-Based-Testing-Anyhow\" class=\"headerlink\" title=\"Places You Might Use Property Based Testing Anyhow\"></a>Places You Might Use Property Based Testing Anyhow</h2><p>On the other hand, not having to come up with my own parameter values makes the whole Property Based Testing pretty attractive, even when it doesn’t make a lot of sense.  And it might encourage you to write smaller functions.</p>\n<h2 id=\"Problems-I’ve-Run-Into\"><a href=\"#Problems-I’ve-Run-Into\" class=\"headerlink\" title=\"Problems I’ve Run Into\"></a>Problems I’ve Run Into</h2><p>I would say the biggest problem I’ve run into using Property Based Testing is learning how to write tests that don’t re-implement the logic in my code in order to test the logic in my code. </p>\n<p>Going back to the <code>add(a, b)</code> example above.  It is tempting to test that function by verifying that <code>add(a, b) === a + b</code>.  But that wouldn’t be a very good test because we used the same logic that is probably already being used inside the <code>add()</code> function.  In example based testing (classic unit testing), we have the same problem, we just don’t use code to implement it.  We add the numbers in our head and verify that <code>add(a, b) = c</code>.  But, <code>c</code> is just <code>a + b</code> done in our head. </p>\n<p>Which leads me back to, even though it is “harder” we end up with better tests.</p>\n<h2 id=\"I’m-Probably-Doing-it-Wrong\"><a href=\"#I’m-Probably-Doing-it-Wrong\" class=\"headerlink\" title=\"I’m Probably Doing it Wrong\"></a>I’m Probably Doing it Wrong</h2><p>I’m so new to this way of thinking, that I’m pretty sure I’m doing everything wrong.  But, I figure I can take advantage of what I understand and as I write more tests, I’ll find more and better ways of writing tests.  I encourage you to pick up a property based framework for your development environment and give it a try.</p>\n<h2 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources:\"></a>Resources:</h2><ul>\n<li><a href=\"//hypothesis.works/articles/what-is-property-based-testing/\">What is Property Based Testing?</a></li>\n<li><a href=\"//fsharpforfunandprofit.com/posts/property-based-testing/\">An Introduction to Property Based Testing</a></li>\n</ul>\n",
            "tags": [
                "tdd",
                "testing",
                "property based testing"
            ]
        },
        {
            "id": "http://davembush.github.com/why-more-angular-modules-are-better-than-one/",
            "url": "http://davembush.github.com/why-more-angular-modules-are-better-than-one/",
            "title": "Why more Angular Modules are Better than One",
            "date_published": "2018-01-16T11:30:00.000Z",
            "content_html": "<p>I recently reviewed some Angular code that uses one module.  The AppModule. To manage the entire code base.  And, this isn’t tiny code base.  The main excuse I’ve heard for this is that the code originated during the beta cycle, prior to NgModule being added to the framework.  I call it out as an excuse because once it was added, it was clear that we needed to have more than one module.  The fact that this code base doesn’t have more than one module shows a disregard for doing things right over doing things fast.  In the best case, it shows ignorance.</p>\n<p>But, the larger question this code base raises for me is this: “Why are more modules better than fewer modules?”  After all, using one module obviously works.  Isn’t the fact that it works sufficient enough?</p>\n<p>And here are three really good reasons to use more modules. <figure><img src=\"/uploads/2018/01/2018-01-16-1.jpg\" title=\"Why more Angular Modules are Better than One\"><figcaption>Photo credit: <a href=\"//visualhunt.com/author/1d5a2d\">goodrob13</a> on <a href=\"//visualhunt.com/re/0a04dc\">Visualhunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Avoid-Component-Collision\"><a href=\"#Avoid-Component-Collision\" class=\"headerlink\" title=\"Avoid Component Collision\"></a>Avoid Component Collision</h2><p>For discussion purposes, let’s say you have an application with two routes.  Each route allows you to edit different kinds of content.  You may be inclined to create some child components in each route to assist with your functionality.  In the process of doing this, you may end up with two components that have the same name.  Both as a class and as a selector.  If you are including everything in one mega module, you will need to artificially give the components different names.  However, if each route has its own module, you can declare the components in the declaration section of each module with the same name and each route will be able to call the appropriate component.  Components aren’t shared across modules until you export the component.  In that case, you would also want the component to live in a shared module where we would give it a more meaningful, generic, name that made sense as a shared module.</p>\n<h2 id=\"Lazy-Loading\"><a href=\"#Lazy-Loading\" class=\"headerlink\" title=\"Lazy Loading\"></a>Lazy Loading</h2><p>Once you’ve created modules for each of your routes, the next logical step in your development effort will be lazy loading the module.  Lazy loading provides more advantages than just the ability to load only what you need when you need it.  That’s just the most obvious gain.  Lazy loading also provides a separate context for @Injectables.  Once again, just like having the ability to isolate the components, by using modules in conjunction with lazy loading, we have the ability to have route specific @Injectables with the same name and each route&#x2F;module will behave appropriately.</p>\n<p>There is one caveat.  You can’t provide an @Injectable in a lazy loaded module and an application level module and expect things to work correctly.  And, if you are still using a framework like NgRX 2 that needs to have access to services, you’ll need to make your services globally available.  This is one of many reasons why I believe you should upgrade to NgRX 4 as soon as is possible.  This allows you to take full advantage of the Angular Lazy Loading capabilities and all their benefits.</p>\n<h2 id=\"Cleaner-Code\"><a href=\"#Cleaner-Code\" class=\"headerlink\" title=\"Cleaner Code\"></a>Cleaner Code</h2><p>Even if you’ve never seen a major application with one module, I’m sure you can imagine what a mess that module is.  I don’t think I really need to say much more about this.</p>\n<p>For more on Angular Modules, I recommend <a href=\"//angular.io/guide/ngmodule-faq\">this FAQ that the Angular team put together</a>. <a href=\"//medium.com/@cyrilletuzi/understanding-angular-modules-ngmodule-and-their-scopes-81e4ed6f7407\">This Medium article</a> is also pretty good.</p>\n",
            "tags": [
                "angular",
                "modules",
                "ngmodule"
            ]
        },
        {
            "id": "http://davembush.github.com/attaching-an-angular-child-component-s-form-to-a-parent/",
            "url": "http://davembush.github.com/attaching-an-angular-child-component-s-form-to-a-parent/",
            "title": "Attaching an Angular Child Component's Form to a Parent",
            "date_published": "2018-01-02T11:30:57.000Z",
            "content_html": "<p>This past week I implemented a pattern I’ve been pondering for almost a year now.  I like to create rather modular and granular code such that if my data structures are nested, the components that represent them on the screen should be nested as well. The question becomes, how does one create a reactive form in a child component and attach that form to the parent form in a way that:</p>\n<ol>\n<li>Leaves the definition of the child form entirely in the child</li>\n<li>Leaves the processing of the data in the parent where the parent form is the “Smart Component” and the child is a “Dumb Component”</li>\n</ol>\n<p>Most solutions I was able to find attack this problem assuming the child component will be part of an array of controls.  And I suppose, if you wanted to, you could implement that pattern using an array with one element.  But, that just felt like a hack.  If you are interested in that solution, this is the wrong article. <figure><img src=\"/uploads/2018/01/2018-01-02.jpg\" title=\"Attaching an Angular Child Component&#39;s Form to a Parent\"> Photo by <a href=\"//visualhunt.com/author/e29ed9\">loomingy1</a> on <a href=\"//visualhunt.com/re/b9f011\">Visual hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Avoiding-the-Problem\"><a href=\"#Avoiding-the-Problem\" class=\"headerlink\" title=\"Avoiding the Problem\"></a>Avoiding the Problem</h2><p>Up until recently, I’ve been able to avoid this problem entirely by creating separate forms and listening to each individually.  I could have done the same thing here.  But, every time I use this solution, I feel like there must be a better way.  Besides, when you do this correctly, you only need to have one place where you are listening for changes to the form and one place where you send changes into the form.  The work around requires multiples of each.</p>\n<h2 id=\"Basics-of-Nested-Forms\"><a href=\"#Basics-of-Nested-Forms\" class=\"headerlink\" title=\"Basics of Nested Forms\"></a>Basics of Nested Forms</h2><p>Another way of avoiding the problem is to create the form as one monolithic component.  A very simple implementation would be to have a form that looked something like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;mainInput&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">formGroupName</span>=<span class=\"string\">&quot;childGroup&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;childInput&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  &lt;/<span class=\"attr\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>And the reactive definition in the typescript that looked like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">form</span>: <span class=\"title class_\">FormGroup</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">formBuilder: FormBuilder</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">form</span> = formBuilder.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">mainInput</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">childGroup</span>: formBuilder.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">childInput</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And then we would grab the data from the valueChanges observable or patch the data into the form using </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">childGroup.<span class=\"property\">childInput</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Creating-the-Child-Component\"><a href=\"#Creating-the-Child-Component\" class=\"headerlink\" title=\"Creating the Child Component\"></a>Creating the Child Component</h2><p>But what if you we want everything in the childGroup to be a control?  That control would look something like this: </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;form&quot;</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;childInput&quot;</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>and then our TypeScript code looks like a normal formGroup:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">form</span> = formBuilder.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">childInput</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Embedding-the-Child-in-the-Parent\"><a href=\"#Embedding-the-Child-in-the-Parent\" class=\"headerlink\" title=\"Embedding the Child in the Parent\"></a>Embedding the Child in the Parent</h2><p>Now that we have a separate component for our child form, we can use normal directives to add it into our main form.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;mainInput&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-child</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>And our TypeScript code now only needs a reference to mainInput.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">formBuilder: FormBuilder</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">form</span> = formBuilder.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">mainInput</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Connecting-the-Child-to-the-Parent\"><a href=\"#Connecting-the-Child-to-the-Parent\" class=\"headerlink\" title=\"Connecting the Child to the Parent\"></a>Connecting the Child to the Parent</h2><p>The problem is, whenever the childInput element changes, the parent form’s valueChanges observer won’t get notified because the parent form no longer knows about the child form.  And this is where things interesting.</p>\n<p>Hooking the child form to the parent form is actually pretty straight forward.  The trick is knowing when in the component life-cycle to run the code.</p>\n<p>The first thing to know is that we aren’t going to be able to hookup the child in the parent until after the child component has been created.  This happens after ngOnInit() so we need to find another lifecycle hook to wire everything up in.  It just so happens that ngAfterViewInit() is the perfect place for this. </p>\n<p>Second, it might be tempting to hookup everything in the child component during it’s ngOnInit() method.  But this would too tightly couple the child component to the parent.  Something we would like to avoid. </p>\n<p>So, the next thing we need to do is that we need to use @ViewChild() to allow the parent to get a hold of the child component, and ultimately the formGroup member variable it will initialize for us.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ViewChild</span>(<span class=\"title class_\">ChildComponent</span>) <span class=\"attr\">childComponent</span>: <span class=\"title class_\">ChildComponent</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And now in <code>ngAfterViewInit()</code> we can add the child’s <code>FormGroup</code> as an additional “control” and set the parent <code>FormGroup</code> to the parent control’s <code>FormGroup</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">ngAfterViewInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>.<span class=\"title function_\">addControl</span>(<span class=\"string\">&#x27;childForm&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">childComponent</span>.<span class=\"property\">form</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">childComponent</span>.<span class=\"property\">form</span>.<span class=\"title function_\">setParent</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">form</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And finally, you’ll want to subscribe to <code>valueChanges</code> and your NgRX <code>Store</code> in <code>ngAfterViewInit()</code> after this wire-up code.</p>\n",
            "tags": [
                "angular",
                "reactive forms",
                "child component"
            ]
        },
        {
            "id": "http://davembush.github.com/angular-cross-field-validation/",
            "url": "http://davembush.github.com/angular-cross-field-validation/",
            "title": "Angular Cross Field Validation",
            "date_published": "2017-12-19T11:30:36.000Z",
            "content_html": "<p>This past week I had my first need to do use cross field validation in Angular.  While the general mechanics are pretty trivial, my particular implementation ran into some issues that you might be interested in. <figure><img src=\"/uploads/2017/12/2017-12-19.jpg\" title=\"Angular Cross Field Validation\"> Photo by <a href=\"//visualhunt.com/author/525a6d\">MSVG</a> on <a href=\"//visualhunt.com/re/2a53de\">VisualHunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h2><p>As I said, the mechanics of implementing cross field validation in Angular is rather trivial.  It all hinges on the concept of a FieldGroup which is a key concept of <a href=\"/tags/reactive-forms/\">Reactive Forms</a>. What we need to do to implement cross field validation is to attach a validation function to the form instead of the field. </p>\n<p>I’m going to use the AppComponent to host the FormBuilder for simplicity:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">form</span>:<span class=\"title class_\">FormGroup</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">formBuilder: FormBuilder</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>=formBuilder.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// form field definitions here</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      <span class=\"attr\">validator</span>: <span class=\"title class_\">AppComponent</span>.<span class=\"property\">formGroupValidationFunction</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that <code>formBuilder.group()</code> takes a second parameter which takes a <code>validator</code> function or function array.  This parameter can also the <code>asyncValidator</code> key or the <code>state</code> key. </p>\n<p>The function we are pointing to takes the <code>FormGroup</code> as a parameter.  So, within the function, we can access the controls that are part of the <code>FormGroup</code>.  Once we have the fields, we can access the values of the fields and perform whatever comparisons we need, which is pretty trivial.  Then, if there is an error, we call setError() on the control(s) that are impacted.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"title function_\">formGroupValidationFunction</span>(<span class=\"attr\">formGroup</span>: <span class=\"title class_\">FormGroup</span>):<span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  constfield1=formGroup.<span class=\"property\">controls</span>[<span class=\"string\">&#x27;field1&#x27;</span>];</span><br><span class=\"line\">  constfield2=formGroup.<span class=\"property\">controls</span>[<span class=\"string\">&#x27;field2&#x27;</span>];</span><br><span class=\"line\">  <span class=\"comment\">// compare field1 to field2</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">    field1.<span class=\"title function_\">setError</span>(&#123;<span class=\"attr\">formGroupValidationFunction</span>:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">    field2.<span class=\"title function_\">setError</span>(&#123;<span class=\"attr\">formGroupValidationFunction</span>:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dealing-with-Field-Validations\"><a href=\"#Dealing-with-Field-Validations\" class=\"headerlink\" title=\"Dealing with Field Validations\"></a>Dealing with Field Validations</h2><p>One of the problems I ran into was that my fields also had individual validations on them.  Specifically, the two fields were numbers that I was validating to make sure they were positive and only displayed two decimal places.  By the time I entered the validation for the FormGroup, that validation had already run.  I also wanted to clear any pre-existing errors from my form validation.</p>\n<p>It turns out that the way Angular determines if there is an error is if the forms errors object exist.  If it is null, it is assumed there aren’t any errors. </p>\n<p>Now, to clear the pre-existing errors, the safest thing to do is to first delete the error I was adding from each field, and then check to see if there are any other errors in the errors object.  If there aren’t any errors, we then call <code>setError(null)</code> to clear out the error object.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(field1.<span class=\"property\">errors</span>&amp;&amp;field1.<span class=\"property\">errors</span>.<span class=\"property\">formGroupValidationFunction</span>) &#123;</span><br><span class=\"line\">  deletefield1.<span class=\"property\">errors</span>.<span class=\"property\">formGroupValidationFunction</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(field1.<span class=\"property\">errors</span>).<span class=\"property\">length</span>===<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    field1.<span class=\"title function_\">setErrors</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>When adding the <code>FormGroup</code> error, we only call <code>setError()</code> if the errors object is null.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!field1.<span class=\"property\">errors</span>) &#123;</span><br><span class=\"line\">  field1.<span class=\"title function_\">setError</span>(&#123; <span class=\"attr\">formGroupValidationFunction</span>:<span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>By doing this, we ensure that the field validation errors aren’t overwritten by the <code>FormGroup</code> validations.</p>\n<h2 id=\"Alternatives\"><a href=\"#Alternatives\" class=\"headerlink\" title=\"Alternatives\"></a>Alternatives</h2><p>The code I’ve shown works well enough if you only have a one-off validation.  But in my case, I needed to use the validation between multiple sets of fields.  To do this, I created a function that returns another function. </p>\n<p>The outer function takes two parameters.  Strings that are keys into the controls of the form group.  So, now instead of:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">formBuilder:FormBuilder</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>=formBuilder.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// form stuff here</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attr\">validator</span>:formGroupValidationFunctionHere</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>I have:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">formBuilder:FormBuilder</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>=formBuilder.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// form stuff here</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attr\">validator</span>:<span class=\"title function_\">formGroupValidationFunction</span>(<span class=\"string\">&#x27;field1&#x27;</span>, <span class=\"string\">&#x27;field2&#x27;</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And my validation function looks something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"title function_\">formGroupValidationFunction</span>(<span class=\"attr\">f1</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">f2</span>: <span class=\"built_in\">string</span>): <span class=\"title class_\">Function</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"attr\">formGroup</span>: <span class=\"title class_\">FormGroup</span>): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">    constfield1=formGroup.<span class=\"property\">controls</span>[f1];</span><br><span class=\"line\">    constfield2=formGroup.<span class=\"property\">controls</span>[f2];</span><br><span class=\"line\">    <span class=\"comment\">// compare field1 to field2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">      field1.<span class=\"title function_\">setError</span>(&#123;<span class=\"attr\">formGroupValidationFunction</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">      field2.<span class=\"title function_\">setError</span>(&#123;<span class=\"attr\">formGroupValidationFunction</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that my <code>setError()</code> uses the name of the function as the error key.  I just do this for clarity.  You CAN name it whatever you want.  I name it the same to be consistent with how the Angular validations work. </p>\n<p>Finally, I like to put my custom validations in a separate Static Class rather than including them in the component code.  I’ve only placed them in the component code here for illustrative purposes.</p>\n",
            "tags": [
                "angular",
                "formgroup",
                "validation"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-really-screw-up-an-angular-project/",
            "url": "http://davembush.github.com/how-to-really-screw-up-an-angular-project/",
            "title": "How to Really Screw Up an Angular Project",
            "date_published": "2017-12-12T11:30:38.000Z",
            "content_html": "<p>We all know about best practices.  But what does it take to really mess up a project?  Well, for starters, you do EVERYTHING wrong.  You don’t just ignore one or two best practices, you ignore them all.  By evaluating the mess you can get yourself into by ignoring best practices, I think we can all learn better why these recommendations exist. <figure><img src=\"/uploads/2017/12/2017-12-12.png\" title=\"How to Really Screw Up an Angular Project\"> Photo on <a href=\"//visualhunt.com/re/f81060\">VisualHunt</a></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Don’t-Use-the-CLI\"><a href=\"#Don’t-Use-the-CLI\" class=\"headerlink\" title=\"Don’t Use the CLI\"></a>Don’t Use the CLI</h2><p>I can grant a pass if you aren’t using the Angular CLI because you started your project before the CLI became viable.  But, by this point you should have already converted your project over to use the CLI or be making plans to move to the CLI.</p>\n<p>Why is this a problem? </p>\n<p>Because 99% of the developers you are going to find will expect that when you ask for an Angular developer, what you mean is that you are looking for someone who can write Angular code using the Angular CLI.  This brings with is a certain number of expectations about how your code is laid out.  Some of these are outlined below.  But just as a way of generalizing, if your code doesn’t look like it started as an Angular CLI project, you are going to slow down any future developers you hire.</p>\n<h2 id=\"Ignore-Naming-Conventions\"><a href=\"#Ignore-Naming-Conventions\" class=\"headerlink\" title=\"Ignore Naming Conventions\"></a>Ignore Naming Conventions</h2><p>Ignoring naming conventions may seem trivial, but naming conventions add clarity.  The reason we name component files as components is so we know they are all part of a component.  Reducer file names should be named <code>foo-bar.reducer.ts</code>.  Not naming the files in a way that is clear reduces the ability to maintain the code in a clear and efficient way. </p>\n<p>Maybe you’ve come up with your own naming conventions for your organization.  This is better.  But still this is not best.  This means that you probably won’t be able to use the CLI to scaffold out your code and any future developer is going to have to learn your way of writing Angular instead of the industry standard way of writing Angular. </p>\n<p>But the absolute worst thing you can do is to not have any standard or to mix standards.  This is confusing and just looks ugly.</p>\n<h2 id=\"Cluster-Code-by-Function-Instead-of-Feature\"><a href=\"#Cluster-Code-by-Function-Instead-of-Feature\" class=\"headerlink\" title=\"Cluster Code by Function Instead of Feature\"></a>Cluster Code by Function Instead of Feature</h2><p>The other thing you might be tempted to do is to cluster your code by function.  That is, you might want to group all of your components together.  And then all your services under another folder.  Maybe put your reducers under one folder and your effects under another. </p>\n<p>Trust me, this just adds fuel to the argument that “NgRX is confusing”.  Group all your similar NgRX code together and put all of your code together grouped by feature.  If you’ve named the files correctly, you won’t need the directories to keep things sorted out and you won’t be forced to use one module for your entire project.</p>\n<h2 id=\"Use-one-Module\"><a href=\"#Use-one-Module\" class=\"headerlink\" title=\"Use one Module\"></a>Use one Module</h2><p>Maybe you don’t know any better.  Or maybe it is because you’ve violated the rules above.  But no matter the reason, if you end up putting all your imports, providers, and declarations in your app module, you’ll soon see just how ugly this looks.  One for the whole application violates the single responsibility principle.  You want a module per feature at the very least.  I often create modules just to provide an additional level of granularity that further implements the single responsibility principle.</p>\n<h2 id=\"No-Lazy-Loading\"><a href=\"#No-Lazy-Loading\" class=\"headerlink\" title=\"No Lazy Loading\"></a>No Lazy Loading</h2><p>Yes, even if your application has only one route.  You want to lazy load your code so that a different bundle gets created for each route.  Done well, you can make changes to one route without impacting any of the others.  When you deploy the new code, your end user should only have to reload the route(s) that changed.  Without lazy loading, when you redeploy, they’ll have to reload an entirely new set of files.</p>\n<h2 id=\"Embed-Colors-and-Fonts-in-Component-CSS\"><a href=\"#Embed-Colors-and-Fonts-in-Component-CSS\" class=\"headerlink\" title=\"Embed Colors and Fonts in Component CSS\"></a>Embed Colors and Fonts in Component CSS</h2><p>You should have a theme file, or an application level CSS file that defines the fonts, and colors that should be used throughout your application.  The only CSS that should be included at the component level is CSS that is necessary to layout the html within the component.  That is, position information.  If you are putting color information in, or specifying a font size or font, you are probably doing it wrong. </p>\n<p>Why is this an issue?  </p>\n<p>Well, let’s suppose that someone decides that all of your warnings should be a different color.  If you can make that change in one CSS file, that is going to be a lot easier than looking through all the CSS in all of your components to make sure you found every place the color needs to be changed. </p>\n<p>Don’t repeat yourself makes just as much sense in CSS as anywhere else in your code.</p>\n<h2 id=\"Mix-Template-Files-and-Strings\"><a href=\"#Mix-Template-Files-and-Strings\" class=\"headerlink\" title=\"Mix Template Files and Strings\"></a>Mix Template Files and Strings</h2><p>As you should know by now, you can create the HTML templates and the CSS templates either by using strings in the TS file or by using separate HTML and CSS files.  You should use one style and use it consistently.  I’ve seen one project where they were using a mix of both and they had at least one file that was using a string for the HTML but still had the HTML file next to the TS and CSS file.  That’s just confusing.  Don’t do that!</p>\n<h2 id=\"Don’t-Remove-Dead-Code\"><a href=\"#Don’t-Remove-Dead-Code\" class=\"headerlink\" title=\"Don’t Remove Dead Code\"></a>Don’t Remove Dead Code</h2><p>As we work on code, we might create a variable, or use an import that no longer is needed.  The linter is really good about telling us what code is no longer needed.  Use it and keep you code cleaned up.</p>\n<h2 id=\"Don’t-Stay-Up-to-Date\"><a href=\"#Don’t-Stay-Up-to-Date\" class=\"headerlink\" title=\"Don’t Stay Up to Date\"></a>Don’t Stay Up to Date</h2><p>Angular is progressing at a pretty fast rate and the Angular CLI is as well.  I realize that it isn’t always possible to keep the version you are working on up to date with the latest tools.  But not keeping your tools up to date for several months at a time is also something you want to avoid.  The sooner you update, the easier the update will be. </p>\n<p>Will the update break something?  </p>\n<p>Yes, that is likely.  You should plan that into your work flow.  Otherwise, you’ll get to the point where it will take so long to update, you’ll never get approval to do it because it will take too long.</p>\n",
            "tags": [
                "angular",
                "best practices",
                "cli"
            ]
        },
        {
            "id": "http://davembush.github.com/humpty-dumpty-and-programming/",
            "url": "http://davembush.github.com/humpty-dumpty-and-programming/",
            "title": "Humpty Dumpty and Programming",
            "date_published": "2017-12-05T11:30:32.000Z",
            "content_html": "<p>I’ve noticed a pattern in the programming world at large both with programmers and with managers.  We define things how we want them to be for our organization and not how they are.  We are like Humpty Dumpty who says, “When I use a word … it means just what I choose it to mean – neither more nor less.” </p>\n<p>There are two places where I see this pattern manifesting.  The Agile movement and Design Patterns. <figure><img src=\"/uploads/2017/12/2017-12-05.png\" title=\"Humpty Dumpty and Programming\"> Photo by <a href=\"//visualhunt.com/author/f31767\">aturkus</a> on <a href=\"//visualhunt.com/re/b4881b\">Visualhunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Agile\"><a href=\"#Agile\" class=\"headerlink\" title=\"Agile\"></a>Agile</h2><p>Longtime readers are familiar with my rants against the failure of Agile.  Ever job interview I go to eventually ends up asking the same question. </p>\n<p>“Have you ever worked in an Agile organization before?” </p>\n<p>I have a lot of issues with this question, but my answer is always the same.  “I’ve worked in several organizations that call themselves Agile, but I’ve yet to work in one that really is.”  And there is the problem.  Even if I say I’ve worked in an Agile organization, there is no possible way you can be sure I’ve worked in an Agile organization that defines Agile the way you describe Agile.  So, why even ask the question? </p>\n<p>It is like Humpty Dumpty trying to explain the meaning of the poem <a href=\"//www.jabberwocky.com/carroll/jabber/jabberwocky.html\">Jabberwocky</a>. We define Agile with the bits we like and ignore the bits we don’t like or don’t understand, like the 4 blind men “looking” at an elephant and then wonder why it doesn’t really work for our organization. </p>\n<p>Next time someone ask me that question, I may just answer the question with another question, “Why do you ask?” or “How do you define ‘Agile’?” </p>\n<p>Seriously! What’s the point of asking the question when it doesn’t tell you anything about the applicant you are interviewing?  Agile has become such a major buzzword that I doubt you’ll find any applicants that haven’t worked in an organization that calls itself “Agile.”</p>\n<h2 id=\"Design-Patterns\"><a href=\"#Design-Patterns\" class=\"headerlink\" title=\"Design Patterns\"></a>Design Patterns</h2><p>The more popular the design pattern, the more likely we are to see the exact same issues in our programming.  Currently, we can most clearly see this in the MV* design pattern.  Here again, people are using the design pattern based on what they imagine it to be. </p>\n<p>In an article I wrote several months ago, someone recently commented about MVVM, “Isn’t that the way MVVM works? views don’t have business login, only pure “view” logic, the ViewModel is the one having business logic.” </p>\n<p>This is a common misconception.  That the ViewModel, or the Controller, or the Presenter (MVP) are where our business logic go.  This completely ignores the fact that MV* is a View layer design pattern.  The View part of the MV* is the part within the larger View layer that is responsible for rendering state.</p>\n<h2 id=\"A-Community-of-Hacks\"><a href=\"#A-Community-of-Hacks\" class=\"headerlink\" title=\"A Community of Hacks?\"></a>A Community of Hacks?</h2><p>Are we just a community of hacks?  I think maybe we are. All we care about is that we’ve shipped some code. We, largely, don’t care about our craft.  If we were artist, we starve.  Not because artist starve (which is a myth by the way) but because the code we produce is so crappy, no one would consider it valuable. </p>\n<p>If we built houses, we’d never get past the building inspectors.  If we were architects, the houses would never get built because the plans are too confusing. </p>\n<p>The blessing and the curse of programming is that we can change things quickly.  Because we can change things quickly, this has us believing there is no need to be careful. </p>\n<p>Each year we need more and more programmers to work on code because the codebase becomes crappier each year.  No one cares.  In the 30 years I’ve been programming, I’ve only had my code reviewed as a practice in two organizations.  That alone should tell you something about the state of our code.  And for all the claims about being Agile, none have used any best practices that grew out of Extreme Programming!</p>\n<h2 id=\"What-If\"><a href=\"#What-If\" class=\"headerlink\" title=\"What If?\"></a>What If?</h2><p>In previous post I’ve explored both sides of the technical interview process.  Up until recently, the technical interviews focused on the language, the framework, the tools.  And we try to develop an interview process that assures us that the applicant can actually use those tools.  Then when we hire them, and they can’t actually code. We wonder why? </p>\n<p>What if we got beyond tools to how people think?</p>\n<h2 id=\"Code-Puzzles\"><a href=\"#Code-Puzzles\" class=\"headerlink\" title=\"Code Puzzles\"></a>Code Puzzles</h2><p>Recently, I’ve been challenging myself with coding puzzles that are typically used at places like Google, Facebook and Amazon.  Problems that get at issues such as BigO notation, Binary Trees,  Memoization and much more.  I’m doing this for several reasons.  First, working on problems like this reminds me that I’m really not all that smart.  Oh, I can get by, but I don’t challenge myself to produce the best code possible.  Maybe the rant above is more about me than the industry, but I don’t think so.  I think I’ve risen (or more accurately, sunk) to the level of the people I’m surrounded by who themselves are only as high as the people they’ve been working with. </p>\n<p>I’m also doing these problems because being able to do them will inform my code.  Maybe I’ll never actually need to know about depth first vs breath first searches of a binary tree, but if I can do those problems, I will have additional tools in my toolbox when I code the mundane things.  </p>\n<p>And finally, these kinds of problems almost always have edge cases I don’t see.  I really need to get better at discovering edge cases before my clients do. </p>\n<p>And now, here’s the big question.  If these are the kind of questions that Google, Facebook, Amazon and others are using, what do they know that other companies don’t?  Could it be that hiring programmers that can answer these kinds of questions not only ensures that the quality of the code is better, but is actually cheaper in the long run?  Why not hire programmers who are a dime a dozen and can get the job done, but produce crappy code in the process?  I mean, if code quality doesn’t matter like most of our industry thinks, why do these successful companies not just go hire warm bodies?</p>\n<h2 id=\"The-Advantage\"><a href=\"#The-Advantage\" class=\"headerlink\" title=\"The Advantage\"></a>The Advantage</h2><p>The advantage to hiring based on how people think rather than on what tools they know is that when the tools change, it won’t matter to the developer who can think through these tougher issues.  On the other hand, those who can’t won’t be able to grasp some of the newer concepts that show up in newer tools.  I’ve seen this first hand as I’ve tried to explain NgRX, RxJS and Functional Programming generally to some of my peers.  Are they difficult concepts.  Sure they are! Are they worth learning? Absolutely!</p>\n<h2 id=\"Be-Intentional\"><a href=\"#Be-Intentional\" class=\"headerlink\" title=\"Be Intentional\"></a>Be Intentional</h2><p>So, what’s the point of all of this?  Mostly, be intentional. Don’t coast. Learn everything you can about your craft. </p>\n<p>Do you really know what MVC, MVVM, MVP, etc are and how they work? Or, are you just working off of what someone else has told you? </p>\n<p>Do you really know what Agile is? </p>\n<p>How many design patterns do you know that aren’t the hot new trend? </p>\n<p>Could you code your way out of an interview with Google, Facebook or Amazon? </p>\n<p>Where do you want to be with your career next year?  In 5 years? </p>\n<p>Are you average or striving to be awesome? </p>\n<p>Join me on the journey!</p>\n",
            "tags": [
                "programming",
                "agile",
                "design patterns"
            ]
        },
        {
            "id": "http://davembush.github.com/replacing-an-element-in-an-array-with-rxjs/",
            "url": "http://davembush.github.com/replacing-an-element-in-an-array-with-rxjs/",
            "title": "Replacing an Element in an Array with RxJS",
            "date_published": "2017-11-21T11:30:34.000Z",
            "content_html": "<p>It is not uncommon in our programming endeavors to need to replace one element in an array.  Using old school procedural programming, this would be relatively easy.  Loop through the elements, when we find the one we want to replace, change the value.  Basic for&#x2F;next loop with a conditional statement. </p>\n<p>But when you move to a more functional way of programming as we need to do for NgRX, or are encouraged to do to make our code more testable, the problem becomes less straight forward. </p>\n<p>The initial solution you might try would be to just run <code>reduce()</code> against the array.  But if we do this, we still need to put that nasty conditional within our reducer function.  This is something we’d prefer to avoid.  Yes, it will work.  But it isn’t Functional.  This problem has bothered me for months.  I’ve finally spent the time to figure out the solution. <figure><img src=\"/uploads/2017/11/2017-11-21.jpg\" title=\"Replacing an Element in an Array with RxJS\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/manchesterlibrary/2034771121/\">Manchester Library</a> via <a href=\"//visualhunt.com/re/1b8ae8\">Visualhunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by-sa/2.0/\"> CC BY-SA</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Simple-Problem\"><a href=\"#Simple-Problem\" class=\"headerlink\" title=\"Simple Problem\"></a>Simple Problem</h2><p>For the purposes of our discussion, we are going to assume that we have an array of integers, 1 through 5.  We want to change the value of 3 to 33.  If we were going to just extract the value and change it, we would use a filter.  But what we want to do here instead is split the array into two streams.  Elements that are 3 and elements that are not three.  You might reach for the filter function to do this. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]; </span><br><span class=\"line\"><span class=\"keyword\">const</span> item = array.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">number</span></span>) =&gt;</span> x === <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> notItem = array.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">number</span></span>) =&gt;</span> x !== <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Merging-Arrays\"><a href=\"#Merging-Arrays\" class=\"headerlink\" title=\"Merging Arrays?\"></a>Merging Arrays?</h2><p>But the problem you’ll run into almost immediately is that now that we have the array split in two, how are we going to merge them back together again?  For this, we would need the <code>Observable.merge()</code> method.  But, arrays are not <code>Observables</code>. </p>\n<p>Now, let’s rethink this problem.  What if we turn the array into an observable?</p>\n<h2 id=\"Observable-Arrays\"><a href=\"#Observable-Arrays\" class=\"headerlink\" title=\"Observable Arrays\"></a>Observable Arrays</h2><p>We can still use the <code>filter()</code> but now we can merge the results. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">from</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\"><span class=\"keyword\">const</span> item = array.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">number</span></span>) =&gt;</span> x === <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> notItem = array.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">number</span></span>) =&gt;</span> x !== <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mergedList = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">merge</span>(notItem, item.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"number\">33</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reconstitution\"><a href=\"#Reconstitution\" class=\"headerlink\" title=\"Reconstitution\"></a>Reconstitution</h2><p>And now that our array, that is now an observable, is merged back together again, we can use <code>reduce()</code> to turn it back into an array. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reduced = </span><br><span class=\"line\">  mergedList.<span class=\"title function_\">reduce</span>((<span class=\"attr\">acc</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;, <span class=\"attr\">element</span>: <span class=\"built_in\">number</span>): <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; =&gt;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...acc, element], []);</span><br></pre></td></tr></table></figure>\n<p>And subscribe() to get the return valued. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reduced.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;</span>) =&gt;</span> <span class=\"comment\">/* do something with the array here */</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Out-of-Order\"><a href=\"#Out-of-Order\" class=\"headerlink\" title=\"Out of Order\"></a>Out of Order</h2><p>But, we still have a problem.  Because we are working with an array, there is no timing to make sure the 33 is where the 3 was.  So, we end up with an array that has 33 at the end.  Maybe that’s OK.  But there are times when we need to change the array without changing the order of the elements.  What do we do now?</p>\n<h2 id=\"Async-to-the-Rescue\"><a href=\"#Async-to-the-Rescue\" class=\"headerlink\" title=\"Async to the Rescue\"></a>Async to the Rescue</h2><p>It turns out that <code>Observable.from()</code> takes a second parameter that controls how the elements are handled.  If we pass in <code>async</code> for that parameter, the elements stay in order.</p>\n<h2 id=\"One-pass-Filter\"><a href=\"#One-pass-Filter\" class=\"headerlink\" title=\"One pass Filter\"></a>One pass Filter</h2><p>Now that we have this all working, there is one final tweak we can make.  Rather than creating two different, but very similar filters, we can use the partition() method to achieve the same result in one pass. </p>\n<p>This, combined with array destructuring, allows us to simplify the code where our filter is, to </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [item, notItem] = array.<span class=\"title function_\">partition</span>(<span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">number</span></span>) =&gt;</span> x === <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<p>And now you have a Functional replacement of an element using RxJS.</p>\n<h2 id=\"Final-Code\"><a href=\"#Final-Code\" class=\"headerlink\" title=\"Final Code\"></a>Final Code</h2><p>Imports you’ll need:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">async</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/scheduler/async&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">IntervalObservable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/observable/IntervalObservable&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">TimerObservable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/observable/TimerObservable&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Scheduler</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/Scheduler&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;rxjs/add/observable/interval&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;rxjs/add/observable/from&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;rxjs/add/operator/partition&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;rxjs/add/operator/map&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;rxjs/add/operator/reduce&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;rxjs/add/observable/merge&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Code:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">from</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], <span class=\"keyword\">async</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> [item, notItem] = array.<span class=\"title function_\">partition</span>(<span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">number</span></span>) =&gt;</span> x ===<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">merge</span>(notItem, item.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"number\">33</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">reduce</span>((<span class=\"attr\">acc</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;, <span class=\"attr\">element</span>: <span class=\"built_in\">number</span>): <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; =&gt;</span><br><span class=\"line\">    acc = [...acc, element]</span><br><span class=\"line\">  , [])</span><br><span class=\"line\">  .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;</span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">title</span> += <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(x));</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "RxJS"
            ]
        },
        {
            "id": "http://davembush.github.com/angular-ionic-and-angular-cli/",
            "url": "http://davembush.github.com/angular-ionic-and-angular-cli/",
            "title": "Angular Ionic and Angular CLI",
            "date_published": "2017-11-14T11:30:12.000Z",
            "content_html": "<p>As you might have noticed from last week’s post, I’ve shifted my focus from pure Angular to learning Angular Ionic.  And while last week’s post focused more on just <a href=\"/angular-ionic-putty-ssh-authorized_keys-format\">getting Ionic setup on a Windows environment</a>, this post will focus more on integrating Ionic and Angular CLI to work together. </p>\n<p>If you are familiar with Ionic, you should already know that it provides its own CLI that allows you to scaffold out a new application using a basic template.  This CLI is also used to help register the project with the Ionic Dashboard and scaffold out a limited number of file types if you use Ionic 3.  However, there are several problems I have with using the Ionic CLI.  First, and probably most important to me, is there is no test scaffolding!  Second, it neither follows the standard naming convention for files nor does it comply with the Angular Style Guide when it comes to directory structure. </p>\n<p>My first attempt at correcting the problem was to try to add Ionic to an existing Angular CLI project.  I almost had that working, but I got stuck trying to get the SCSS implementation working.  I finally gave up once I realized that Ionic seems to load files on demand, including SCSS files and templates.  I might come back to this once I’ve gained more experience with Ionic and have a better idea of how it works under the hood. </p>\n<p>Then, my second thought was to just add the Angular CLI to an existing Ionic CLI project.  It turns out this was much easier to get working.  This allows me to use the standard <code>ng</code> commands to scaffold out my components, services, interfaces, etc… and because I’m using the Angular CLI scaffolding, the tests also get scaffold out for me. <figure><img src=\"/uploads/2017/11/2017-11-14.jpg\" title=\"Angular Ionic and Angular CLI\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/internetarchivebookimages/14762635481/\">Internet Archive Book Images</a> via <a href=\"//visualhunt.com/re/09daa4\">VisualHunt.com</a> &#x2F; <a href=\"//flickr.com/commons/usage/\"> No known copyright restrictions</a></figcaption></figure></p>\n<span id=\"more\"></span>  \n\n<p>For the purposes of this post, I’m going to assume you’ve already created a project using the Ionic CLI.  What follows are the steps you need to take to add in the Angular CLI.</p>\n<h2 id=\"Add-Angular-CLI\"><a href=\"#Add-Angular-CLI\" class=\"headerlink\" title=\"Add Angular CLI\"></a>Add Angular CLI</h2><p>All of the additions to the package.json file are in devDependencies.  The version numbers I’ve included are for the version at the time of this writing. You’ll want to modify for newer versions as they are released. First, of course, add the angular cli</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;@angular/cli&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.4.9&quot;</span> </span><br></pre></td></tr></table></figure>\n\n<p>This will give you the ability to use the <code>ng</code> commands to scaffold out files.  To allow the tests to run, you’ll also want to add the following:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;@types/jasmine&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~2.5.53&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;@types/jasminewd2&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~2.0.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;@types/node&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~6.0.60&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;jasmine-core&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~2.6.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;jasmine-spec-reporter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~4.1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;karma&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~1.7.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;karma-chrome-launcher&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~2.1.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;karma-cli&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~1.0.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;karma-coverage-istanbul-reporter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^1.2.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;karma-jasmine&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~1.1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;karma-jasmine-html-reporter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^0.2.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;protractor&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~5.1.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;ts-node&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~3.2.0&quot;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>I also use tslint quite extensively in my projects, so I also add in the following:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;codelyzer&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~3.2.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;tslint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~5.7.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;tslint-immutable&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^4.4.0&quot;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"angular-cli-json\"><a href=\"#angular-cli-json\" class=\"headerlink\" title=\".angular-cli.json\"></a>.angular-cli.json</h2><p>The main file that makes the Angular CLI recognize the project as an Angular CLI project is the <code>.angular-cli.json</code> file.  The easiest thing to do is to take an existing file from another project and copy it into your Ionic project.  This file belongs in the root of your project. </p>\n<p>Once you’ve done that, there is one small change you need to make.  The <code>main.ts</code> file that is the entry point of the application lives under the <code>app</code> directory in an Ionic project rather than directly under <code>src</code> like it does with an Angular CLI project.  It would be tempting to change the location of the file, but the Ionic build process is looking for it under the <code>app</code> directory.  An easier fix is to change the location in our <code>.angular-cli.json</code> file so that our tests can find it.  It is the only place that needs to know of the new location. Change .angular-cli.json so main points to the right location:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;$schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./node_modules/@angular/cli/lib/config/schema.json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;project&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ionic-with-angular-cli&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;apps&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;root&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;src&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;outDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dist&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;assets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;assets&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;favicon.ico&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;index&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;index.html&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      **<span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;app/main.ts&quot;</span><span class=\"punctuation\">,</span>**</span><br><span class=\"line\">      <span class=\"attr\">&quot;polyfills&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;polyfills.ts&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;test.ts&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"> ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"karma-conf-js\"><a href=\"#karma-conf-js\" class=\"headerlink\" title=\"karma.conf.js\"></a>karma.conf.js</h2><p>To run your tests, you’ll need a <code>karma.conf.js</code> file in your root directory.  Again, the easiest thing to do is to copy this file over from a project you created with the Angular CLI.</p>\n<h2 id=\"tsconfig-json\"><a href=\"#tsconfig-json\" class=\"headerlink\" title=\"tsconfig.json\"></a>tsconfig.json</h2><p>You should already have a <code>tsconfig.json</code> file in your project root directory.  If you open it, you’ll see it has an exclude section that is excluding <code>node_modules</code>.  You’ll need to tell it to exclude <code>test.ts</code> and <code>*.spec.ts</code> files so it doesn’t pick up the test files during a normal compile cycle.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;exclude&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"string\">&quot;node_modules&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;test.ts&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;**/*.spec.ts&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"polyfills-ts\"><a href=\"#polyfills-ts\" class=\"headerlink\" title=\"polyfills.ts\"></a>polyfills.ts</h2><p>The tests use the <code>polyfills.ts</code> file, so you’ll need to add one that was originally created using the Angular CLI.  This belongs in your <code>src</code> directory.</p>\n<h2 id=\"test-ts\"><a href=\"#test-ts\" class=\"headerlink\" title=\"test.ts\"></a>test.ts</h2><p>Copy a <code>test.ts</code> file into your <code>src</code> directory from a project that you created with the <code>Angular CLI</code>.  If you don’t put this file in, you won’t be able to run any tests.</p>\n<h2 id=\"tsconfig-spec-json\"><a href=\"#tsconfig-spec-json\" class=\"headerlink\" title=\"tsconfig.spec.json\"></a>tsconfig.spec.json</h2><p>The tests use <code>tsconfig.spec.json</code> located in the <code>src</code> directory.  The problem is, a standard <code>tsconfig.spec.json</code> file inherits from the <code>tsconfig.json</code> file we just modified above which doesn’t look at all like the <code>tsconfig.json</code> file in an Angular CLI project.  I found the easiest thing to do was to create a new copy of <code>tsconfig.spec.json</code> that is a merge of the two files in an Angular CLI project.  This worked at the time of this writing, if you run into trouble, you may need to merge the two files you started with on your own.  My result looks like this:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compileOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;outDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;../out-tsc/spec&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;declaration&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleResolution&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;emitDecoratorMetadata&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;experimentalDecorators&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;es5&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;typeRoots&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;node_modules/@types&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lib&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;es2017&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;dom&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;baseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;commonjs&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;types&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;jasmine&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;node&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;test.ts&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;include&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/*.spec.ts&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/*.d.ts&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"typings-d-ts\"><a href=\"#typings-d-ts\" class=\"headerlink\" title=\"typings.d.ts\"></a>typings.d.ts</h2><p>I’m not sure this file was needed, but it was another file I found in an Angular CLI project that wasn’t in my Ionic CLI project, so I added it.  It goes in your <code>src</code> directory and is just a copy of the file that is in your Angular CLI project.</p>\n<h2 id=\"pages\"><a href=\"#pages\" class=\"headerlink\" title=\"pages\"></a>pages</h2><p>You’ll notice that your <code>pages</code> directory is at the same level as your <code>src</code> directory which doesn’t comply with the Angular CLI.  I moved mine so that it is under the <code>src</code> directory just to keep things consistent.  You’ll need to fix up imports once you move it of course.</p>\n<h2 id=\"Regenerate-Pages\"><a href=\"#Regenerate-Pages\" class=\"headerlink\" title=\"Regenerate Pages\"></a>Regenerate Pages</h2><p>Because the pages that got generated don’t conform to the style guide and don’t have any tests, I just regenerated mine and copied the relevant code into the newly generated files.</p>\n<h2 id=\"Tests\"><a href=\"#Tests\" class=\"headerlink\" title=\"Tests\"></a>Tests</h2><p>At this point, you should have a project that looks a lot more like an Angular CLI project.  You’ll still use the Ionic command to do your regular build and development cycle and the ng commands for testing and generating new files.  Running tests works the same as you should already be used to from using Angular.  The one thing you will notice is that you’ll see a warning in your test: </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Critical dependency: the request of a dependency is an expression</span><br></pre></td></tr></table></figure>\n\n<p>This is a known “error” that neither the  Angular CLI group or the Ionic group seem interested in addressing. </p>\n<p>At this point, I haven’t tried any E2E tests using this setup so I don’t know if there are any additional tweaks that need to be made. </p>\n<p>You can find the code for this at this branch of a project I’m working on. <a href=\"//github.com/DaveMBush/ionic-crud/tree/Add-Angular-CLI\">https://github.com/DaveMBush/ionic-crud/tree/Add-Angular-CLI</a></p>\n",
            "tags": [
                "angular",
                "ionic",
                "angular-cli"
            ]
        },
        {
            "id": "http://davembush.github.com/angular-ionic-putty-ssh-and-authorized-keys-format/",
            "url": "http://davembush.github.com/angular-ionic-putty-ssh-and-authorized-keys-format/",
            "title": "Angular IONIC, Putty SSH, and authorized_keys Format",
            "date_published": "2017-11-07T16:29:21.000Z",
            "content_html": "<p>I started playing with IONIC last week.  Since I do all my development on a Windows computer, this has already lead to a particular Windows based challenge that I was able to track down and deduce the solution for.  But I was unable to find a solution that specifically addressed using IONIC, putty SSH, and authorized_keys Format, which is what someone is likely to search for when they see this issue. <figure><img src=\"/uploads/2017/10/2017-11-07.jpg\" title=\"Angular IONIC, Putty SSH, and authorized_keys\"> Photo via <a href=\"//visualhunt.com/re/64a968\">VisualHunt</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Connect-to-the-dashboard\"><a href=\"#Connect-to-the-dashboard\" class=\"headerlink\" title=\"Connect to the dashboard?\"></a>Connect to the dashboard?</h2><p>When you setup an IONIC project, everything goes pretty much as planned until you get to the question “Do you want to connect to the dashboard?”  I’m going to assume you’ve answered that question in the affirmative and that you’ve already created an IONIC account and successfully logged in or you wouldn’t be here. </p>\n<p>The next thing that is likely to happen is that you’ll try to have it generate an SSH key for you.  But, since you don’t have OpenSSL installed, it failed.  The next thing you probably did was to search for the Windows install of OpenSSL only to find that it hasn’t been maintained in quite a while and that the recommended way of creating a public&#x2F;private key pair is to use Putty.  Which you did. </p>\n<p>Now, what brought you here is that you have a public key in a file that you are trying to upload to IONIC.  The error you are continuing to see is “<em>filename</em> does not appear to be a valid SSH public key. (Not in authorized_keys file format.)</p>\n<h2 id=\"No-Public-Key\"><a href=\"#No-Public-Key\" class=\"headerlink\" title=\"No Public Key?\"></a>No Public Key?</h2><p>OK.  Maybe you got to this site and you don’t have a public&#x2F;private key pair yet.  You don’t even know what putty is.  You can find some good instructions about installing and <a href=\"//www.chiark.greenend.org.uk/~sgtatham/putty/docs.html\">using putty here</a>.</p>\n<p>You will be most interested in the section on using PuttyGen to create a public&#x2F;private key pair (you want to use RSA, the default).</p>\n<h2 id=\"Putty-to-authorized-keys\"><a href=\"#Putty-to-authorized-keys\" class=\"headerlink\" title=\"Putty to authorized_keys\"></a>Putty to authorized_keys</h2><p>And the question you have now is, “How do I convert my putty SSH public key into “authorized_keys format?”  Whatever that is. </p>\n<p>Well you are in luck because, I can tell you exactly what you need to do. </p>\n<p>First, open that public key text file you have in a text editor.  You’ll see it is in the format of: </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---- BEGIN SSH2 PUBLIC KEY ----</span><br><span class=\"line\">Comment: &quot;rsa-key-20171026&quot;</span><br><span class=\"line\">AAAAB3NzaC1yc2EAAAABJQAAAQEAicxYxlgFjQDMtkuuCY3GsnkdWEy38NSgi7N8</span><br><span class=\"line\">/SBj1ohas2GU/0bY2H6Inpg6lQ6oYmvaIy5rQZ8+pcOPQNLNo0EyWbWhmBfWI+b5</span><br><span class=\"line\">XHg5F6eIhaTjKVViJG3tDe3V4boMvgE18Rzof8ZJSa7cH0kqL32SPqnQdgtpDNc5</span><br><span class=\"line\">qjBHN+mQ5fMcxMM4YaViGtq8j6M7obt7oJrnVQWdPWQQYuo6TSm4LCjQ4/q77vqF</span><br><span class=\"line\">L59IFFd6nUnEltpkrh8RXKu6By1+G4eN66AdpZ/h9Z41qwN/oJ2kOf0qqT1t6Wa6</span><br><span class=\"line\">8RcgWxSIgMzE16imwB84o8p9DQtnEb7BVK0UXzt+Wp2ToC3arw==</span><br><span class=\"line\">---- END SSH2 PUBLIC KEY ----</span><br></pre></td></tr></table></figure>\n\n<p>The first thing you want to do is to delete the first two lines and the last line.  Once that is done, remove the line feeds so that the remaining RSA key is all on one line. </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AAAAB3NzaC1yc2EA...t+Wp2ToC3arw==</span><br></pre></td></tr></table></figure>\n\n<p>Now, prefix the line with “ssh-rsa “.  Make sure there is a space after “ssh-rsa” and before the body of the key. </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EA...t+Wp2ToC3arw==</span><br></pre></td></tr></table></figure>\n\n<p>Officially, this puts the key in “authorized_keys file format” but to get IONIC to accept it, you also need to put the email you used when you signed up for IONIC dashboard at the end of the key.  This mean you’ll need to add a space after the double equals that indicates the end of the key, and then your email address goes immediately after that. </p>\n<p>Save the file.  </p>\n<p>Unless you like living dangerously, you should save it to another file.  </p>\n<p>Now upload the file to ionic using: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ionic ssh add</span><br></pre></td></tr></table></figure>\n\n<p>This command will prompt you for the file name, as before, but this time you’ll give it the file you just saved, and it should work.  The only reason I can think of why it might not is if you deleted too many characters when you were removing the line feeds.</p>\n<h2 id=\"IONIC-Private-Key\"><a href=\"#IONIC-Private-Key\" class=\"headerlink\" title=\"IONIC Private Key\"></a>IONIC Private Key</h2><p>For some reason, IONIC only understands OpenSSL for both sides.  I wasted nearly a day trying to get PAgent working.  Don’t waste your time. </p>\n<p>Back in PuttyGen, there is a Conversions menu option.  Under that, what you want to select is the option “Export OpenSSH Key…”  Give it a filename etc. </p>\n<p>Now, back in the terminal window for your IONIC project, finish the setup as they’ve directed on their site, but just before you run “git push ionic master” run </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ionic ssh use path_to_the_filename_you_just_exported.</span><br></pre></td></tr></table></figure>\n\n<p>Once you’ve done this, go to <code>c:\\users\\[username]\\.ssh</code> and look for a file named “<code>config</code>“.  Open the file in an editor that understands files with no carriage returns and make sure the line that starts with “IdentityFile” has quotes around the path to the file if the path has a space in it.  On my computer it doesn’t, but I’ve seen reports from others that this has caused them hours of trouble. </p>\n<p>With all of that configured, now you can run </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push ionic master</span><br></pre></td></tr></table></figure>\n\n<p>If your private key has a password, it will prompt for the password and you are off to the races. </p>\n",
            "tags": [
                "angular",
                "ionic",
                "putty",
                "ssh"
            ]
        },
        {
            "id": "http://davembush.github.com/what-i-learned-using-angular-material/",
            "url": "http://davembush.github.com/what-i-learned-using-angular-material/",
            "title": "What I Learned Using Angular Material",
            "date_published": "2017-10-31T10:30:06.000Z",
            "content_html": "<p>This past week I took Angular Material for a spin.  In the process, I learned a few things you might find helpful.  Some may be helpful even if you aren’t interested in using Angular Material for your projects. <figure><img src=\"/uploads/2017/10/2017-10-31.png\" title=\"What I Learned Using Angular Material\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/30478819@N08/36098571263/\">wuestenigel</a> via <a href=\"//visualhunt.com/re/3c147a\">VisualHunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Choose-Wisely\"><a href=\"#Choose-Wisely\" class=\"headerlink\" title=\"Choose Wisely\"></a>Choose Wisely</h2><p>Up until recently, I’ve been reluctant to try Angular Material for two basic reasons.  First, it didn’t seem quite ready for prime time.  I found out that it now has all of the components I would need for most of the applications I would want to develop.  Second, using Angular Material is a commitment.  Instead of writing primarily HTML, you write primarily angular material tags.  I thought this was a problem.  That I wouldn’t have the flexibility to switch between Angular Material and some other CSS framework.  But, as it turns out.  Angular Material doesn’t really lock me in any more than any other CSS framework or component library.  Which leads to the first lesson learned.  Choose your CSS frameworks and component library wisely.  If you decide to make a change mid-course, it is likely to suck up a lot of time from your project.  I would recommend doing some proof of concepts prior to committing to any component library or CSS framework.</p>\n<h2 id=\"Less-Filling\"><a href=\"#Less-Filling\" class=\"headerlink\" title=\"Less Filling\"></a>Less Filling</h2><p>Because Angular Material is both a CSS framework and a component library, it turns out that writing templates using Angular Material is significantly terser than say, Bootstrap.  I don’t mean to imply that it produces less HTML.  Just that writing the templates tends to be a bit cleaner overall.</p>\n<h2 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"@import\"></a>@import</h2><p>I’ve written before about <a href=\"https://medium.com/@davembush/adding-css-and-javascript-to-an-angular-cli-project-2b843a8283f3\">how to include CSS in your Angular project</a>, but I’ve learned a new trick while implementing Angular Material. </p>\n<p>This might be a relative new thing with the Angular CLI, but apparently, you can <code>@import</code> local and external CSS in your styles.css file.  When I evaluated the code that gets built, I found that the build process knows to keep the external code external yet bundles the internal code with the project.  This is something you could use regardless of what CSS framework or component library you are using.</p>\n<h2 id=\"Layout\"><a href=\"#Layout\" class=\"headerlink\" title=\"Layout\"></a>Layout</h2><p>As I suspected, a lot of layout expects you to use Flex CSS.  Since I already had decided to use Flex-Layout to manage my layout with Bootstrap, this was not a big surprise.  The Flex-Layout project started its life as part of the Angular JS Material project and split out as a separate project when both moved to support Angular.  At times, figuring out where to use what directive may require you to use Developer Tools.  But I didn’t find this to be any more of a deterrent than using CSS in any other platform.  Just keep in mind that some of the Flex CSS is already defined in the Material components.</p>\n<h2 id=\"Creating-Components-from-Injectables\"><a href=\"#Creating-Components-from-Injectables\" class=\"headerlink\" title=\"Creating Components from @Injectables\"></a>Creating Components from @Injectables</h2><p>While creating my demo project, there were two places where I needed to create “snack bars” or dialogs.  In Angular Material, the way you accomplish this is by calling a method on an @Injectable.  aka, a Service.  This is interesting to me and I’m going to have to dig deeper to find out exactly how this works.</p>\n<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h2><p>The first time you write unit tests, you’ll get a warning that says, “Could not find Angular Material core theme…”.  To remove this error, you’ll need to open karma.conf.js and add a “files:” section right under the “plugins:” section.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">files</span>: [&#123; </span><br><span class=\"line\">  <span class=\"attr\">pattern</span>: <span class=\"string\">&#x27;./node_modules/@angular/material/prebuilt-themes/indigo-pink.css&#x27;</span>, </span><br><span class=\"line\">  <span class=\"attr\">included</span>: <span class=\"literal\">true</span>, </span><br><span class=\"line\">  <span class=\"attr\">watched</span>: <span class=\"literal\">true</span> </span><br><span class=\"line\">&#125;],</span><br></pre></td></tr></table></figure>\n\n<p>You can add whatever pre-built theme you’d like.  I’ve added indigo-pink here.</p>\n<h2 id=\"Common-declare-x2F-import-x2F-export\"><a href=\"#Common-declare-x2F-import-x2F-export\" class=\"headerlink\" title=\"Common declare&#x2F;import&#x2F;export\"></a>Common declare&#x2F;import&#x2F;export</h2><p>Strictly speaking, this isn’t Angular Material specific.  But it was because of Angular Material that I discovered this trick.  Again, because it isn’t Angular Material specific, you can use this in any of your Angular code that it makes sense. </p>\n<p>Angular Material requires you to import each of the component modules individually.  This allows tree shaking to be more effective.  Rather than put this code in <code>app.module.ts</code>, I created a <code>material-design.module.ts</code> file and imported it into my <code>app.module.ts</code>. </p>\n<p>Now, if you are familiar with how imports work, you’ll already know that the components that are part of a module you import are only available to the parent module’s components or below.  But we want the component to be available to any module that imports <code>material-design.module.ts</code>.  To do that, we need to export the same list of modules we imported. </p>\n<p>That sounded like too much repeating myself.  In an effort to make my code DRYer, I created a read only array with all my Material modules in it and then used the spread operator to include those in my imports and exports statement.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">materialDesignComponents</span>: <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"title class_\">Type</span>&lt;<span class=\"built_in\">any</span>&gt;&gt; = [</span><br><span class=\"line\">  <span class=\"title class_\">MatSidenavModule</span>,</span><br><span class=\"line\">  <span class=\"title class_\">MatToolbarModule</span>,</span><br><span class=\"line\">  <span class=\"title class_\">MatListModule</span>,</span><br><span class=\"line\">...</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span>,</span><br><span class=\"line\">    ...materialDesignComponents</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [</span><br><span class=\"line\">    ...materialDesignComponents</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MaterialDesignModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>This saved me a lot of time, not just in typing, but in tracking down bugs because I simply forgot to include the modules in both places.</p>\n<h2 id=\"Sample-Project\"><a href=\"#Sample-Project\" class=\"headerlink\" title=\"Sample Project\"></a>Sample Project</h2><p>If you are interested, you can find <a href=\"//github.com/DaveMBush/angular-material-demo\">my sample project on GitHub</a>.</p>\n",
            "tags": [
                "angular",
                "angular material"
            ]
        },
        {
            "id": "http://davembush.github.com/implementing-ngrx-4/",
            "url": "http://davembush.github.com/implementing-ngrx-4/",
            "title": "Implementing NgRX 4+",
            "date_published": "2017-10-24T10:30:46.000Z",
            "content_html": "<p>There seems to be a lot of confusion about Implement NgRX 4 and above in an Angular application.  Some of it I’ve contributed to because NgRX 2 isn’t quite the same as NgRX 4 and as I’ve transitioned, I’ve learned better ways.  In other words, I was wrong and I’m correcting my mistake!  Below is the correct, NgRX approved way, of implementing NgRX 4. </p>\n<p>If you are looking for information about how to convert to NgRX 4 from NgRX 2, you can visit my previous article, <a href=\"/how-to-upgrade-ngrx-to-4-x/\">How to Upgrade to NgRX 4</a>. </p>\n<p>Before we get started, make sure you have TypeScript 2.4.x or above installed in your local project.  The CLI may complain, depending on what version of it you are using.  But, NgRX 4 requires us to use TypeScript 2.4.x. You should also have RxJS 5.4.x or above installed. </p>\n<p>You will also need to install @ngrx.  You can do this using the following NPM command: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save @ngrx/store @ngrx/effects</span><br></pre></td></tr></table></figure>\n\n<p>And finally, I’ve found that I need to use the –aot switch both when I’m using production and development builds, so you’ll want to add that to your scripts in your <code>package.json</code> file. <figure><img src=\"/uploads/2017/10/2017-10-24.jpg\" title=\"Implementing NgRX 4\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/cfaobam/12119410373/\">cfaobam</a> via <a href=\"//visualhunt.com/re/300eff\">VisualHunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h3 id=\"Actions\"><a href=\"#Actions\" class=\"headerlink\" title=\"Actions\"></a>Actions</h3><p>An Action is an object that contains a type variable and optionally, a payload.  Depending on how you code your action, the payload may or may not have “payload” as the variable name.  In NgRX version 2, payload was an optional variable.  To improve type checking, payload was removed from the Action interface. </p>\n<p>The official documentation for NgRX version 4 encourages us to create a class for each action we want to dispatch. </p>\n<p>Assuming we have a Wait component we want to display when a counter is incremented and that should be removed when the counter returns to zero, you might want a Start wait action and an End wait action.  So, you would create a wait.action.ts file that has two classes in it.  A Start action and an End action. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Action</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ngrx/store&#x27;</span>; </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">START</span> = <span class=\"string\">&#x27;Wait.Start&#x27;</span>; </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Start</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Action</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"keyword\">type</span> = <span class=\"variable constant_\">START</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">END</span> = <span class=\"string\">&#x27;Wait.End&#x27;</span>; </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">End</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Action</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"keyword\">type</span> = <span class=\"variable constant_\">END</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>While this violates the “one class per file” rule, it actually provides us the ability to group our Actions together in one file, as you will see soon. </p>\n<p>To use these actions in our code, we would import them as a bundle: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Wait</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./wait.actions&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>This particular way of importing a packages groups all of the exported items under the variable named Wait.  Which allows us to dispatch the action using the store we’ve injected into our code using:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Wait</span>.<span class=\"title class_\">Start</span>());</span><br></pre></td></tr></table></figure>\n\n<p>Start is an exported class from <code>wait.actions</code> that we’ve grouped under <code>Wait</code>. </p>\n<p>What makes this method of creating actions useful is that when we need to pass additional data along with our action, we can do that simply by adding parameters to our constructor.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">ADD</span> = <span class=\"string\">&#x27;Wait.Add&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Add</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Action</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"keyword\">type</span> = <span class=\"variable constant_\">ADD</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> payload: <span class=\"built_in\">number</span></span>)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We don’t even have to call the payload, “payload.”  How about calling it “value.” </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">ADD</span> = <span class=\"string\">&#x27;Wait.Add&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Add</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Action</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"keyword\">type</span> = <span class=\"variable constant_\">ADD</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> value: <span class=\"built_in\">number</span></span>)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And if you need more than one payload item, you can pass in multiple parameters.</p>\n<h3 id=\"Improved-Actions\"><a href=\"#Improved-Actions\" class=\"headerlink\" title=\"Improved Actions\"></a>Improved Actions</h3><p>We can improve our actions even further by using <code>enums</code> instead of <code>const</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Types</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">START</span> = <span class=\"string\">&#x27;Wait.Start&#x27;</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">END</span> = <span class=\"string\">&#x27;Wait.End&#x27;</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">ADD</span> = <span class=\"string\">&#x27;Wait.Add&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And then we can use the types in our Action classes like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">ADD</span> = <span class=\"string\">&#x27;Wait.Add&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Add</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Action</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"keyword\">type</span> = <span class=\"title class_\">Types</span>.<span class=\"property\">ADD</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> value: <span class=\"built_in\">number</span></span>)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>What this does for us that <code>const</code> doesn’t is that it when we use our case statements in the reducer, it will save us having to cast everything because TypeScript will know what type it should be because of the <code>enum</code> that was assigned to the type field.</p>\n<h3 id=\"Reducers\"><a href=\"#Reducers\" class=\"headerlink\" title=\"Reducers\"></a>Reducers</h3><p>Reducers are functions that allow us to change the state of our entity within our application Store.  Reducers respond to the actions that have been dispatched and return a new object based on the changes requested. </p>\n<p>To continue on with our Wait example, <code>wait.reducer.ts</code> might look like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">ActionReducer</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ngrx/store&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Wait</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./wait.actions&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// This could (and probably should) go in wait.actions.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">Action</span> =</span><br><span class=\"line\">    <span class=\"title class_\">Wait</span>.<span class=\"property\">Add</span> | <span class=\"title class_\">Wait</span>.<span class=\"property\">End</span> | <span class=\"title class_\">Wait</span>.<span class=\"property\">Start</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">WaitReducer</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  state = <span class=\"number\">0</span>, action: Action</span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">Wait</span>.<span class=\"property\">Types</span>.<span class=\"property\">START</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">Wait</span>.<span class=\"property\">Types</span>.<span class=\"property\">END</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">Wait</span>.<span class=\"property\">Types</span>.<span class=\"property\">ADD</span>:</span><br><span class=\"line\">      <span class=\"comment\">// TypeScript knows that our action have a value field here</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> state + action.<span class=\"property\">value</span>;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Notice that we have a <code>default</code> in our switch statement.  Don’t forget to add this.  It isn’t an accident.  You see, when we register our Reducers and Effects with the store and then subsequently dispatch actions to them, all the reducers and effects get called.  In the case of reducers, if you don’t return something for each one of them, you’ll end up with a store that doesn’t know what kind of state it is in.  So, always return the current state as your default. </p>\n<p>The one thing that may not be obvious here is that the Reducer is a function.  Not a class.  This means you can’t inject other classes into it.  This is one of the reasons that the file is named <code>wait.reducer.ts</code> and not <code>wait.reducer**s**.ts</code>. But, Effects are different.</p>\n<h3 id=\"Effects\"><a href=\"#Effects\" class=\"headerlink\" title=\"Effects\"></a>Effects</h3><p>Effects are classes.  Each Effect within the Effects class is a member variable.  This means, we name our Effects file for Wait, <code>wait.effects.ts</code>. </p>\n<p>Now, remember I said that Effects were for things that caused side effects?  You may wonder, why kind of side effect does our Wait stuff need? </p>\n<p>Under normal circumstances, not any.  However, you can get into a situation in development mode where one of the safe guards Angular provides for you detects that you’ve changed the state of wait multiple times in a change detection loop.  Angular expects changes to be static. </p>\n<p>One way we can deal with this is to delay incrementing and decrementing to another change detection loop using setTimeout() indirectly. </p>\n<p>To do this, we are going to rip out the START and END case statements from our Reducer and add them into our Effects class. And then in <code>wait.effects.ts</code>:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/Rx&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Actions</span>, <span class=\"title class_\">Effect</span> &#125; <span class=\"keyword\">from</span><span class=\"string\">``</span><span class=\"string\">&#x27;@ngrx/effects&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Wait</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./wait.actions&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WaitEffects</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Effect</span>()</span><br><span class=\"line\">    <span class=\"attr\">start$</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">Wait</span>.<span class=\"property\">Add</span>&gt; =</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">actions$</span></span><br><span class=\"line\">      .<span class=\"title function_\">ofType</span>(<span class=\"title class_\">Wait</span>.<span class=\"property\">START</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">switchMap</span>(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">        <span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">1</span>).<span class=\"title function_\">take</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">      ).<span class=\"title function_\">map</span>((): <span class=\"title class_\">Wait</span>.<span class=\"property\">Add</span> =&gt;</span><br><span class=\"line\">        (<span class=\"keyword\">new</span> <span class=\"title class_\">Wait</span>.<span class=\"title class_\">Add</span>(<span class=\"number\">1</span>)));</span><br><span class=\"line\">        </span><br><span class=\"line\">  <span class=\"meta\">@Effect</span>()</span><br><span class=\"line\">    <span class=\"attr\">end$</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">Wait</span>.<span class=\"property\">Add</span>&gt; =</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">actions$</span></span><br><span class=\"line\">      .<span class=\"title function_\">ofType</span>(<span class=\"title class_\">Wait</span>.<span class=\"property\">END</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">switchMap</span>(<span class=\"function\">(<span class=\"params\">action: Wait.End</span>) =&gt;</span></span><br><span class=\"line\">          <span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">1</span>).<span class=\"title function_\">take</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">        ).<span class=\"title function_\">map</span>((): <span class=\"title class_\">Wait</span>.<span class=\"property\">Add</span> =&gt;</span><br><span class=\"line\">          (<span class=\"keyword\">new</span> <span class=\"title class_\">Wait</span>.<span class=\"title class_\">Add</span>(-<span class=\"number\">1</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> actions$: Actions</span>)&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You can name the member variables whatever you want.  They never get used.  <code>ofType()</code> is a filter that makes the observable stuff only fire for that particular type. </p>\n<p>The magic happens in the <code>Observable.timer(1).take(1)</code>.  Here we wait for one millisecond, take the first item out of the stream and immediately close the observable.  Once that completes, the <code>map()</code> returns a new action. </p>\n<p>Every Effect must return an action or you must tell the Effect that it won’t return an action.  Notice that we don’t dispatch the action.  That is done by NgRX for us.  We just return the action. </p>\n<p>To tell an Effect that no action will be returned, pass <code>&#123;dispatch: false&#125;</code> into <code>@Effect()</code>. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Effect</span>(&#123;<span class=\"attr\">dispatch</span>: <span class=\"literal\">false</span>&#125;) …</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Returning-Multiple-Actions-from-Effects\"><a href=\"#Returning-Multiple-Actions-from-Effects\" class=\"headerlink\" title=\"Returning Multiple Actions from Effects\"></a>Returning Multiple Actions from Effects</h3><p>At the other end of possibilities, you may need to return multiple Actions from an Effect.  One way to do this is by using mergeMap().</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"title function_\">mergeMap</span>(<span class=\"function\">(<span class=\"params\"><span class=\"comment\">/* previous value here */</span></span>) =&gt;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">ActionGroup</span>.<span class=\"title class_\">Action1</span>(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">ActionGroup</span>.<span class=\"title class_\">Action2</span>()</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Registration\"><a href=\"#Registration\" class=\"headerlink\" title=\"Registration\"></a>Registration</h3><p>Now, none of this is going to work if we don’t register our Reducers and Effects with the NgRX Store. </p>\n<p>If you look at a lot of the literature on how to write NgRX code, you’ll often see that they recommend that you put the code in AppModule.  That will work, but how much more effective to put the code for your Store in its own module.  I create a Module class called AppStores and put it in a file named <code>app.stores.ts</code>.  I know, technically it is a module and it should be <code>app-stores.module.ts</code>.  Using <code>app.stores.ts</code> isolates it from a normal module.  All I want to put in here is Store stuff. </p>\n<p>Then, in my <code>app.stores.ts</code> file, I put code that looks like this: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">WaitEffects</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./wait.effects&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppState</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.state&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">WaitReducer</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./wait.reducer&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">StoreModule</span>, <span class=\"title class_\">ActionReducerMap</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ngrx/store&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">EffectsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ngrx/effects&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">reducers</span>: <span class=\"title class_\">ActionReducerMap</span>&lt;<span class=\"title class_\">AppState</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">wait</span>: <span class=\"title class_\">WaitReducer</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">StoreModule</span>.<span class=\"title function_\">forRoot</span>(reducers),</span><br><span class=\"line\">    <span class=\"title class_\">EffectsModule</span>.<span class=\"title function_\">forRoot</span>([<span class=\"title class_\">WaitEffects</span>])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppStore</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>And the AppState interface that I used for my reducer map looks like this: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AppState</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">wait</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>A couple of things you should notice about this code.  First, the reducers object we create at the top of the file describes what our store looks like.  So far, we have an entity named “wait” that is controlled by our WaitReducer. </p>\n<p>Then to register the reducers with our application, we pass them on to <code>StoreModule.forRoot()</code> in the imports section of our module definition. </p>\n<p>Similarly, we must register our Effects with the application.  We do this by passing an array of Effects to <code>EffectsModule.forRoot()</code> in the imports section of our module definition. </p>\n<p>Of course, none of this code will even get included in your project unless you import this module into your AppModule class. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    **<span class=\"title class_\">AppStore</span>**</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Retrieving-Data\"><a href=\"#Retrieving-Data\" class=\"headerlink\" title=\"Retrieving Data\"></a>Retrieving Data</h2><p>Retrieving an entity from a store is quite simple.  Leaving out the imports that a good editor should help you with, here is the relevant code: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">wait</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">number</span>&gt;;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">store: Store&lt;AppState&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">wait</span> = store.<span class=\"title function_\">select</span>(<span class=\"function\">(<span class=\"params\">s: AppState</span>)</span></span><br><span class=\"line\"><span class=\"function\">      =&gt;</span> s.<span class=\"property\">wait</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And now you can subscribe to wait and whenever the value changes, you’ll get a notification and can do something with it.</p>\n<h2 id=\"Lazy-Loading-NgRX\"><a href=\"#Lazy-Loading-NgRX\" class=\"headerlink\" title=\"Lazy-Loading NgRX\"></a>Lazy-Loading NgRX</h2><p>Prior to NgRX version 4, all our state stuff had to live in the root of the application.  This was problematic because it also meant we were unable to easily locate our Actions, Reducers and Effects with the Routes they belonged to.  So, we had feature level components but everything else was more function based.  That is, all our State stuff lived together in one directory separate from the feature they supported.  Ugly! </p>\n<p>But now, we can create Reducers and Effects that live with the feature we support.</p>\n<h3 id=\"Always-Import-forRoot\"><a href=\"#Always-Import-forRoot\" class=\"headerlink\" title=\"Always Import forRoot()\"></a>Always Import forRoot()</h3><p>The first thing you’ll need to be aware of is that even if you aren’t storing any state at the application level, you will need to call <code>StoreModule.forRoot()</code> and <code>EffectsModule.forRoot()</code> with an empty object and array. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">imports</span>: [</span><br><span class=\"line\">  <span class=\"title class_\">StoreModule</span>.<span class=\"title function_\">forRoot</span>(&#123;&#125;),</span><br><span class=\"line\">  <span class=\"title class_\">EffectsModule</span>.<span class=\"title function_\">forRoot</span>([])</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AppState-vs-FeatureState\"><a href=\"#AppState-vs-FeatureState\" class=\"headerlink\" title=\"AppState vs FeatureState\"></a>AppState vs FeatureState</h3><p>You’ll remember that you’ll typically use an interface called AppState to define the structure of the Store for your application.  You are going to want to create a separate interface for each set of feature reducers you are loading.</p>\n<h3 id=\"Feature-Name-as-AppState-Property\"><a href=\"#Feature-Name-as-AppState-Property\" class=\"headerlink\" title=\"Feature Name as AppState Property\"></a>Feature Name as AppState Property</h3><p>When you add a feature reducer, you’ll need to supply a name as the first parameter. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">imports</span>: [</span><br><span class=\"line\">  <span class=\"title class_\">StoreModule</span>.<span class=\"title function_\">forFeature</span>(<span class=\"string\">&#x27;featureName&#x27;</span>,</span><br><span class=\"line\">    featureReducers),</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>Where <code>featureReducers</code> is the map of reducers for the feature.  Like what we did for the root level reducers. </p>\n<p>This “featureName” becomes the name of the store entity you’ll need to select to get at the store entities in your feature reducers. </p>\n<p>Imagine you have a feature named “featureName” as we’ve coded above and your <code>featureReducer</code> object has a feature property named “sub”.  Not super original, but it will do for an example. To select “sub” from your store, you would use code that would look something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.<span class=\"title function_\">select</span>(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span></span><br><span class=\"line\">  s.<span class=\"property\">featureName</span>.<span class=\"property\">sub</span>);</span><br></pre></td></tr></table></figure>\n\n<p>This means that if you want to strongly type your selections using AppState, you will need to define a field in your AppState interface as “featureName” that is typed as the State interface for that feature.  Let’s call that FeatureState. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">FeatureState</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">sub</span>: <span class=\"title class_\">SubModel</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And then our AppState would look like this: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AppState</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">featureName</span>: <span class=\"title class_\">FeatureState</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And now we can write our select code like this: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.<span class=\"title function_\">select</span>(<span class=\"function\">(<span class=\"params\">x: AppState</span>) =&gt;</span> x.<span class=\"property\">featureName</span>.<span class=\"property\">sub</span>);</span><br></pre></td></tr></table></figure>\n\n<p>If you have Effects that go with your reducers, you’ll also need to import them with </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">imports</span>: [</span><br><span class=\"line\">  <span class=\"title class_\">EffectsModule</span>.<span class=\"title function_\">forFeature</span>([</span><br><span class=\"line\">    …list <span class=\"keyword\">of</span> effects here</span><br><span class=\"line\">  ])</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Features-Without-AppState\"><a href=\"#Features-Without-AppState\" class=\"headerlink\" title=\"Features Without AppState\"></a>Features Without AppState</h3><p>It is possible to access the feature state without putting it in your AppState.  This alternate method may be the only way you can access the code, but you might want to implement this method generally so that your features don’t necessarily have to know about the application. </p>\n<p>To implement this access method, you use the <code>createFeatureSelector()</code>and <code>createSelector()</code> methods which you can import from <code>@ngrx/store</code>. The above code using these methods would look something like this: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> featureSelector = createFeatureSelector&lt;<span class=\"title class_\">FeatureState</span>&gt;(<span class=\"string\">&#x27;featureName&#x27;</span>); <span class=\"keyword\">const</span> subSelector = <span class=\"title function_\">createSelector</span>(featureSelector, <span class=\"function\">(<span class=\"params\">x: FeatureState</span>) =&gt;</span> x.<span class=\"property\">sub</span>));</span><br><span class=\"line\">store.<span class=\"title function_\">select</span>(subSelector);</span><br></pre></td></tr></table></figure>\n\n<p>Where store is injected using </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">store: Store&lt;FeatureState&gt;</span>)&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Note: I’m not suggesting that you write your code like this.  If you are repeating the <code>createFeatureSelector()</code> <code>createSelector()</code> code in multiple places, you should look for a way of not repeating yourself.  I’ve put it all in one place here, so you can see how the methods tie together in the bigger picture.  In my production code, I tend to write this as a separate function in a separate file that can be called from anywhere.</p>\n",
            "tags": [
                "angular",
                "NgRX"
            ]
        },
        {
            "id": "http://davembush.github.com/ngrx-effects-design-patterns/",
            "url": "http://davembush.github.com/ngrx-effects-design-patterns/",
            "title": "NgRX Effects Design Patterns",
            "date_published": "2017-10-17T10:30:03.000Z",
            "content_html": "<p>Since I don’t seem to have a blogs worth of any one topic to write about, I thought maybe something more along the lines of a cluster of small tips and tricks might work.  Since I’ve been writing my Angular book over the last couple of weeks, there hasn’t been much new that I’ve discovered worth sharing.  But there are a few small discoveries I’ve made.  This week, they center around NgRX Effects. <figure><img src=\"/uploads/2017/10/2017.10.17.png\" title=\"NgRX Effects Design Patterns\"> Photo via <a href=\"//visualhunt.com/re/79a90d\">Visual hunt</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Returning-No-Actions\"><a href=\"#Returning-No-Actions\" class=\"headerlink\" title=\"Returning No Actions\"></a>Returning No Actions</h2><p>There have been times in the past where I didn’t want to return an Action from my Effect.  Not knowing any better, I just returned the Object Literal, <code>&#123;type: &#39;noop&#39;&#125;</code>.  But there is a much better way. </p>\n<p>BTW, did you know that unless you tell NgRX otherwise, all @Effects must return an Action? </p>\n<p>So, what is the better way?  It turns out that the guys who wrote NgRX already thought of the possibility that you wouldn’t want to return an action from an @Effect.  All you need to do is to pass the object literal <code>&#123;dispatch: false&#125;</code> to the @Effect() decoractor. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Effect</span>(&#123;<span class=\"attr\">dispatch</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\"><span class=\"attr\">member$</span>: <span class=\"title class_\">Observable</span>&lt;&#123;&#125;&gt; = </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">actions$</span> ...</span><br></pre></td></tr></table></figure>\n\n<p>Like I said, I needed this because I didn’t yet know about some of the other things I’m going to mention below.  My experience says, if you need this, you are probably doing something wrong.</p>\n<h2 id=\"Strong-Typing\"><a href=\"#Strong-Typing\" class=\"headerlink\" title=\"Strong Typing\"></a>Strong Typing</h2><p>If you’ve read any of my other post about Angular, you’ll know I’m a very strong proponent of strongly typing everything.  Nowhere is this more useful than when creating the Effect chain.  By typing everything, I can easily tell that my code is written correctly.  Even while writing my book on how to get started with Angular, it has helped me figure out that I’m missing a closing bracket or parenthesis.  Not to mention it has told me exactly what block of code I had wrong.  I’ve probably saved hours of debugging time with this one simple enhancement to my coding practice.</p>\n<h2 id=\"Chaining-Observables\"><a href=\"#Chaining-Observables\" class=\"headerlink\" title=\"Chaining Observables\"></a>Chaining Observables</h2><p>I’m almost ashamed to mention this next one.  But, I never really caught on that <code>switchMap()</code> was a silent subscriber.  Oh! So many places you can use this. If you’ve been using Effects, you’ve probably seen code that looks like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Effect</span>()</span><br><span class=\"line\"><span class=\"attr\">get$</span>:<span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">Edit</span>.<span class=\"property\">Update</span>&gt; =</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">actions$</span></span><br><span class=\"line\">    .<span class=\"title function_\">ofType</span>(<span class=\"title class_\">Edit</span>.<span class=\"property\">GET</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">switchMap</span>((<span class=\"attr\">action</span>: <span class=\"title class_\">Edit</span>.<span class=\"property\">Get</span>): <span class=\"title class_\">Observable</span>&lt;&#123;&#125; |</span><br><span class=\"line\">      <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"title class_\">Contact</span>&gt;&gt; =&gt;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">contactsService</span>.<span class=\"title function_\">get</span>(<span class=\"string\">``</span>action.<span class=\"property\">id</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">map</span>((<span class=\"attr\">x</span>: <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"title class_\">EditForm</span>&gt;):<span class=\"string\">``</span><span class=\"title class_\">Edit</span>.<span class=\"property\">Update</span> =&gt;</span><br><span class=\"line\">      newEdit.<span class=\"title class_\">Update</span>(x[<span class=\"number\">0</span>]));<span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<p>But, do you know why it works? </p>\n<p>That <code>switchMap()</code> bit expects that you’ll return an observable.  It subscribes to it and passes the data inside the observable to the <code>map()</code> that follows.  Kind of like how the <code>async</code> pipe works in our templates. </p>\n<p>The cool thing about this is that you can chain subscriptions together using this.  It isn’t just some cleaver way of getting the results of a service into your final action that you will return.  I’ve used <code>switchMap()</code> to get data from the store and pass that on to a <code>switchMap()</code> that call my service with that data. </p>\n<p>The only thing you need to watch out for is that your observable is either a cold observable or that you call <code>.first()</code> so you it becomes a cold observable.  Otherwise, you’ll end up in an infinite loop.  Ask me how I know :).</p>\n<h2 id=\"Grouping-Observables\"><a href=\"#Grouping-Observables\" class=\"headerlink\" title=\"Grouping Observables\"></a>Grouping Observables</h2><p>Chaining observables together using <code>switchMap()</code> works well when the output only needs to be used by the next function in the chain.  But what about when you need to use the results from two different observables at once.  There are a couple of different ways you might do this. </p>\n<p>One function you might consider using is <code>withLatestFrom()</code>. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firstObservable</span><br><span class=\"line\">  .<span class=\"title function_\">withLatestFrom</span>(secondObservable, <span class=\"function\">(<span class=\"params\">[firstResult, secondResult]</span>) =&gt;</span> </span><br><span class=\"line\">  <span class=\"comment\">// your code here)</span></span><br></pre></td></tr></table></figure>\n\n<p>or if you have more than two you need to combine, you can use <code>combineLatest()</code> </p>\n<p>Another way you might consider combining them is with <code>forkJoin()</code> although that might be the last tool you reach for.</p>\n<h2 id=\"Single-Responsibility\"><a href=\"#Single-Responsibility\" class=\"headerlink\" title=\"Single Responsibility\"></a>Single Responsibility</h2><p>Another mistake I’ve been making is trying to make my Effect do too much.  If I restrict my effect to only doing one thing at a time and always returning one or more actions, they become much easier to manage.  Maybe this has only be my problem.  But once I saw what switchMap() could do for me, the light bulb went on in my brain.</p>\n<h2 id=\"Returning-Multiple-Actions\"><a href=\"#Returning-Multiple-Actions\" class=\"headerlink\" title=\"Returning Multiple Actions\"></a>Returning Multiple Actions</h2><p>And speaking of returning one or more actions, it is possible to return multiple actions from an Effect using.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"title function_\">mergeMap</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\"> result: <span class=\"built_in\">string</span>[] </span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">from</span>([ </span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">ActionOne</span>( result ), </span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">ActionTwo</span>() </span><br><span class=\"line\">    ]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://davembush.github.com/using-ngrx-to-cleanly-aggregate-data/",
            "url": "http://davembush.github.com/using-ngrx-to-cleanly-aggregate-data/",
            "title": "Using NgRX to Cleanly Aggregate Data",
            "date_published": "2017-10-03T10:30:50.000Z",
            "content_html": "<p>For the last 18 months, I’ve been working for an organization that has what some might consider a unique requirement.  Because of where our application’s data is sourced, we need to aggregate data on the client side rather than on the server.  What this means is that for any one screen, we may make multiple calls to the server to grab all the data we need.  Fortunately, because we adopted NgRX early in our adoption of Angular, we could avoid a lot of the headaches associated with client-side aggregation. <figure><img src=\"/uploads/2017/09/2017-10-03.png\" title=\"Using NgRX to Cleanly Aggregate Data\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/gsfc/14486243743/\">NASA Goddard Photo and Video</a> via <a href=\"//visualhunt.com/re/296da9\">Visualhunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>There are multiple ways this problem might manifest itself in an application.  But one of the most common is a basic search screen that displays a list of results.  Everything is simple when your data comes back with all the data you need.  But in our case, the data that is returned might contain all but one or two fields that we need.  Those fields exist in other end points.  To keep the basic problem small, let’s just assume that you search for a list of records.  That search returns 10 items.  For each of those records, you now need to make two more calls to retrieve the content of the two missing fields.  This means that to get a complete result set back, you need to make a total of 21 calls.  The problem becomes even worse if you have a total of 100 records, or you now have 3 fields that you need to retrieve for each row.</p>\n<h2 id=\"The-Old-Way\"><a href=\"#The-Old-Way\" class=\"headerlink\" title=\"The Old Way\"></a>The Old Way</h2><p>Prior to using NgRX, the main way we might solve this problem would be to introduce callback hell, or promise hell if you are that lucky.</p>\n<ul>\n<li>Make a call for the original list</li>\n<li>When the list gets returned<ul>\n<li>Iterate through the records and<ul>\n<li>Make a call for Child Record One<ul>\n<li>When callback returns, add the new value to the parent record</li>\n</ul>\n</li>\n<li>Make a call for Child Record Two<ul>\n<li>When the callback returns, add the new value to the parent record</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Once all the calls have returned, return the list so it can be displayed.</li>\n</ul>\n<p>As you can see, this not only becomes difficult to manage, but it also introduces a system that is going to be perceived as slow. </p>\n<p>But, now, we can do better.</p>\n<h2 id=\"Using-NgRX\"><a href=\"#Using-NgRX\" class=\"headerlink\" title=\"Using NgRX\"></a>Using NgRX</h2><p>By using NgRX, we use a series of Effects to retrieve our data, typically via a Service.  When the effect is done, it returns the results to a reducer which puts them in our store entity for us. </p>\n<p>The basic work flow looks like something like this:</p>\n<ul>\n<li>Dispatch an action to get the main results</li>\n<li>Effect hears the action and makes a call for the top-level list</li>\n<li>When the list returns,<ul>\n<li>Iterate through the records and<ul>\n<li>we dispatch an action to get Child Record One</li>\n<li>we dispatch an action to get Child Record Two</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Return an Action that will use a reducer to fill our list</li>\n<li>Child Record One Effect hears the actions for each of the rows</li>\n<li>When each of the values are retrieved the Effect returns an Action that uses a Reducer to put the value in the store</li>\n<li>Child Record Two Effect hears the actions for each of the rows</li>\n<li>When each of the values are retrieved, the Effect returns an Action that uses a Reducer to put the value in the store</li>\n</ul>\n<p>You’ll notice, we no longer have the nesting mess that we had using the old way and we can list our results as soon as the first set of data is returned.</p>\n<h2 id=\"Meanwhile-back-on-our-View\"><a href=\"#Meanwhile-back-on-our-View\" class=\"headerlink\" title=\"Meanwhile, back on our View\"></a>Meanwhile, back on our View</h2><p>Now, there are two ways you can deal with displaying this information in your view and it all depends on what you are doing. </p>\n<p>The easy way is to just let the View display the information as it comes back.  Most of the time this will work.  If you need to filter your data in the display once it comes back, you will need to decide if data that doesn’t have the child fields yet should, or should not be displayed. </p>\n<p>Another quirk I had to deal with was that we were displaying child rows with child rows.  Letting the data display as we got it back gave the screen a kind of exploding effect.  For this, I added a debounceTime(500) to the store observer so that the screen only updated once all the data had been retrieved.  Using the pattern above was still easier to reason about than the old way, we just didn’t get the added benefit of being able to see the data as it was being retrieved.</p>\n<h2 id=\"Watch-Out\"><a href=\"#Watch-Out\" class=\"headerlink\" title=\"Watch Out!\"></a>Watch Out!</h2><p>One of the wrong ways you might be tempted to use this pattern would be to chain all the child stuff in one effect and dispatch actions to your reducers from within the one Effect.  This would be a mistake.  Sure, it would work.  But now because your effect is doing more than one thing, your code becomes MUCH harder to reason about.  While each of your Effects may ultimately call the same reducer function, or not, you definitely want to have a separate set of Actions and Effects that retrieve the data from the server.</p>\n",
            "tags": [
                "angular",
                "design patterns",
                "NgRX"
            ]
        },
        {
            "id": "http://davembush.github.com/upgrade-to-angular-from/",
            "url": "http://davembush.github.com/upgrade-to-angular-from/",
            "title": "Upgrade to Angular from...",
            "date_published": "2017-09-26T10:30:23.000Z",
            "content_html": "<p>As I’ve been interviewing for a new contract, the question, “How do we Upgrade to Angular from …?” has come up several times.  And as I’ve thought about the question, several patterns have emerged. <figure><img src=\"/uploads/2017/09/2017-09-26.jpg\" title=\"Upgrade Angular from ...\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/archer10/12414442945/\">archer10 (Dennis) 102M Views</a> via <a href=\"//visualhunt.com/re/426124\">Visualhunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by-sa/2.0/\"> CC BY-SA</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"From-a-Portal\"><a href=\"#From-a-Portal\" class=\"headerlink\" title=\"From a Portal\"></a>From a Portal</h2><p>The first time I was asked this question, the team I was talking with had an existing Web 1.0 site setup using WebSphere Portal.  Not something that you can easily plug any Single Page Application (SPA) into. But all is not lost. </p>\n<p>One of the easiest ways to solve the problem is to create a reverse proxy.  One popular tool for this is mod_proxy for the Apache server.  If you are using IIS, you could use URL Rewrite rules to setup a reverse proxy. </p>\n<p>In either case, you will need to setup rules that ensure that anyone trying to access a URL that is still on the old portal site would still be able to access that directly.  Once that is in place, you would create one page, or maybe a set of related pages, at a time and stand them up on another server.  Then you would change your rules so that anyone trying to access the old URLs that are no longer being served by the old site get redirected to the new SPA application. </p>\n<p>Now, this sounds pretty simple.  But, I imagine keeping everything in sync as you go might be more of a pain that you might imagine.  If you have pages that link to each other, you’ll need to convert links to routes as you go.  Say you convert page one.  It still has links to the old site.  Not a big problem.  But as the pages it is linking to now become part of the SPA, you’ll want to convert those links to route directives.  One way you might mitigate this issue is to convert pages with the fewest links out first.  It might help to create a graph, or at least a spreadsheet, to help you manage the interdependent relationships. </p>\n<p>An added advantage of this setup is that any pages in the portal that have relatively static content, and any resources, can be cached, or even moved, to the proxy server where they will probably be served up faster than the original portal.</p>\n<h2 id=\"From-a-Web-1-0-Site\"><a href=\"#From-a-Web-1-0-Site\" class=\"headerlink\" title=\"From a Web 1.0 Site\"></a>From a Web 1.0 Site</h2><p>Switching from an existing Web 1.0 site might be a bit easier.  Although, using the proxy method there still might be the best choice.  Many of the same issues exist.  But in the case of an existing Web 1.0 site that doesn’t depend on a portal, you’ll probably have greater control over the server.  Again, you are probably running the site on Apache, nginx, or IIS.  In all of those cases, you can setup a rule that says, “if you can’t find the URL, load up this page over here instead.”  Where “this page over here” is your Angular site you are converting to.  You’ll need to implement something like this anyhow for your Angular SPA to work correctly, so this is probably the least amount of extra work to get you where you need to be. </p>\n<p>Then, you convert a page or a set of related pages at a time like I described in the Portal implementation.</p>\n<h2 id=\"From-Another-Framework\"><a href=\"#From-Another-Framework\" class=\"headerlink\" title=\"From Another Framework\"></a>From Another Framework</h2><p>Let’s say that you are moving from React, or some other framework to Angular.  I know of a company that is doing just this.  The wrinkle is, they have no plans on converting their existing pages to Angular.  This makes the transition relatively simple.  You setup rules on your server, similar to how you would setup a conversion from a Web 1.0 site.  “URLs that look like this, go to the old index.html page and URLs that look like that go to the new index.html page.” </p>\n<p>Once again, you’ll need to keep track of routes as you change from one to the other.  But it is manageable.</p>\n<h2 id=\"Converting-AngularJS-to-Angular\"><a href=\"#Converting-AngularJS-to-Angular\" class=\"headerlink\" title=\"Converting AngularJS to Angular\"></a>Converting AngularJS to Angular</h2><p>Yes, I know ngUpgrade exist.  But, if you don’t need to use it, why would you.  ngUpgrade exist so you can embed Angular in AngularJS or AngularJS in Angular.  But, it might make more sense to create a new SPA for Angular and have the two sites reference each other similar to how you would do this for a Web 1.0 site or if you were converting from an entirely different framework. </p>\n<p>The reason I recommend using the two-site method first is because Angular really is a different framework.  There are similarities between AngularJS and Angular.  But that is all they are.  What if you just pretended they weren’t at all related.  That the ngUpdate bridge didn’t exist.  Wouldn’t that make life just a bit easier in the long run?  I think it would.</p>\n",
            "tags": [
                "angular",
                "react.js",
                "portal",
                "web 1.0",
                "web 2.0"
            ]
        },
        {
            "id": "http://davembush.github.com/this-one-tweak-improved-my-angular-code/",
            "url": "http://davembush.github.com/this-one-tweak-improved-my-angular-code/",
            "title": "This One Tweak Improved my Angular Code",
            "date_published": "2017-09-12T10:30:10.000Z",
            "content_html": "<p>I made a tweak to my Angular code process over the last month or so that has resulted in greater productivity in my development environment and fewer bugs. </p>\n<p>Now, I didn’t make this change because I thought it would improve my productivity.  At least that wasn’t the primary reason.  I made the change because I thought it would reduce the chance of introducing bugs into my code.  And while it does reduce the number of bugs in my code, the result has been generally improved productivity. </p>\n<p>What is this great secret? <figure><img src=\"/uploads/2017/09/2017-09-12.jpg\" title=\"This One Tweak Improved my Angular Code\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/sheila_sund/36859429262/\">docoverachiever</a> via <a href=\"//visualhunt.com/re/d75fb5\">Visual Hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h2><p>Before I tell you the secret, I want to tell you how I got here.  Yesterday, I was listening to a podcast that was reviewing another framework with the creators of that framework.  All during the podcast they were comparing their framework to Angular and React.  Fine, compare and contrast is good.  Except, they were comparing and contrasting something they knew really well, their framework, to something they had a lesser understanding of.  So, in the process, one of their complaints about Angular was that Angular doesn’t take full advantage of TypeScript.  Or, it doesn’t take as full advantage of TypeScript as their framework does. </p>\n<p>As I listened to this I realized that most Angular developers probably aren’t taking as full advantage of TypeScript as they could.  I think this is by design.  But, it is too our hurt.  Fortunately, we can turn things on that Angular leaves turned off.</p>\n<h2 id=\"Type-Safety\"><a href=\"#Type-Safety\" class=\"headerlink\" title=\"Type Safety\"></a>Type Safety</h2><p>Now, if you are like most developers I know, you just want to get your code working.  And so, you don’t pay attention to things like Linters.  And you have learned enough TypeScript to get your code working.  This is especially true of those who are coming from “old school” JavaScript. </p>\n<p>Now, I’m going to challenge you to do two things.  First, use TSLint.  Next, make the rules as rigid as possible.</p>\n<h3 id=\"TSLint\"><a href=\"#TSLint\" class=\"headerlink\" title=\"TSLint\"></a>TSLint</h3><p>If you are using the Angular CLI, TSLint is built in.  To run TSLint, all you need to do is to run </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run lint</span><br></pre></td></tr></table></figure>\n\n<p>On the command line. </p>\n<p>This will verify that you haven’t made any really stupid syntax mistakes by default. </p>\n<p>Next, the editor you are using should have a way of hooking TSLint up to the editor so that you can tell you have a problem in your code as you write your code.  If your editor doesn’t have a way of doing this, find a new editor.  The two editors I recommend are VS Code and WebStorm.  Each have their own strengths and weaknesses.</p>\n<h3 id=\"Rules\"><a href=\"#Rules\" class=\"headerlink\" title=\"Rules\"></a>Rules</h3><p>The rules that come with the Angular CLI are, in my opinion, too relaxed.  They are strong enough to not annoy JavaScript programmers.  They protect you from making really stupid TypeScript programming errors.  But, they don’t help you write code that you have a high assurance will work correctly the first time without running it. </p>\n<p>We are going to fix this. </p>\n<p>The main thing we want to do is that we want to tighten up type checking.  So, instead of using the defaults that either let variables be anything or default them to the type they are assigned to when they are declared if that can be determined, we are going to force variables to be declared.</p>\n<h2 id=\"Why-This-Helps\"><a href=\"#Why-This-Helps\" class=\"headerlink\" title=\"Why This Helps\"></a>Why This Helps</h2><p>When I first made this kind of change, I was doing it to <a href=\"/typescript-functional-programming/\">improve my NgRX code</a>.  Once I did that, I immediately saw that by enforcing type safety, I could easily tell if the functions I was using in my Observable chains was going to end up returning what I thought it was going to.  This means, I can write my code and if I don’t get any tslint warnings in my editor, I can have a high degree of certainty that the code will run correctly once I compile it and run it. </p>\n<p>Maybe you think type safety is for sissies.  OK then, you can continue to run your code multiple times to find the same error that I can find before I ever run the code.  I think we all know who will be more productive. </p>\n<p>Once I saw this productivity gain, I determined to add type safety to my entire project.  This took much less time than you would expect and I was able to apply the rules incrementally so that I was not disrupting the progress of the project I was working on.</p>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><p>The implementation is actually pretty simple.  The first thing you are going to want to do is that you’ll want to change the npm lint script from: </p>\n<p><code>&quot;lint&quot;: &quot;ng lint&quot;</code> </p>\n<p>to </p>\n<p><code>&quot;lint&quot;: &quot;ng lint --type-check --fix&quot;</code> </p>\n<p>This does two things.  First it allows us to change to tslint rules to use rules that require type checking.  And second it will cause the tslint to fix any problems it finds that it can fix automatically. </p>\n<p>Next, you’ll want to install tslint-immutable, which will allow us to add in rules for immutability that I mentioned in my previous post that I linked to above.  As of this writing, I’m using version 4.1.0 </p>\n<p><code>npm install --save-dev tslint-immutable</code> </p>\n<p>Next, open up tslint.json which should be at the root of your application. </p>\n<p>Inside this file, right before the rulesDirectory section, add this code: </p>\n<p><code>&quot;extends&quot;: [&quot;tslint-immutable&quot;],</code> </p>\n<p>This will allow us to access the immutable rules we just added with <code>npm install</code>.</p>\n<h3 id=\"typedef\"><a href=\"#typedef\" class=\"headerlink\" title=\"typedef\"></a>typedef</h3><p>The first thing we want to do is that we want to force everything to have a type definition. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;typedef&quot;</span>: [ <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;call-signature&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;arrow-call-signature&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;parameter&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;arrow-parameter&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;property-declaration&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;variable-declaration&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;member-variable-declaration&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;object-destructuring&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;array-destructuring&quot;</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n\n<p>The one place where you might have a problem is that by default, the no-inferable-types rule is turned on, which is what we want.  Currently, tslint is not smart enough to know that no-inferable-types should take precedence over typedef.  So, you’ll need to occasionally exclude the rule using the <a href=\"//palantir.github.io/tslint/usage/rule-flags/\">tslint comment exclusion</a>.  I exclude the typedef when I run into this problem. </p>\n<p>If you are interested, you can google each of the typedef declarations (rather than linking to them and have the links go stale).</p>\n<h3 id=\"no-any\"><a href=\"#no-any\" class=\"headerlink\" title=\"no-any\"></a>no-any</h3><p>Now that we are forcing everything to have a type definition, the next thing you want to do is that you’ll want to disallow using “any” as a type definition.  Otherwise, why force the type definition at all?  I’d love to be able to disallow “object” as well, but there is currently no definition for that so until someone creates that rule, you’ll just have to use discipline.</p>\n<p><code>&quot;no-any&quot;: true,</code></p>\n<p>You may complain that sometimes you want to have the variable really be anything.  Anything?  Really?  I bet most of the time what you really want to be able to do is that you’ll want to define the variable as one of two, maybe three types.  You can achieve this definition as of TypeScript 2.4, by using the pipe operator.</p>\n<p><code>var stringOrNumber: string | number;</code></p>\n<h3 id=\"no-unused-variable\"><a href=\"#no-unused-variable\" class=\"headerlink\" title=\"no-unused-variable\"></a>no-unused-variable</h3><p>To keep your code clean, the next rule you want to enable is to disallow creating variables that you aren’t using.  This will have the side effect of cleaning up your import statements as well. </p>\n<p><code>&quot;no-unused-variable&quot;: true,</code> </p>\n<p>Those are all the rules I use that impact type safety.  Here are a few more you might want to consider adding.</p>\n<h3 id=\"Cyclomatic-Complexity\"><a href=\"#Cyclomatic-Complexity\" class=\"headerlink\" title=\"Cyclomatic Complexity\"></a>Cyclomatic Complexity</h3><p>Cyclomatic Complexity is a measure of how complicated your functions and methods are.  While the default implementation for this is 20, I find that if I’ve written a function that is that complex, even I have trouble understanding it any more.  While keeping my complexity lower than 10 contributes to extremely readable code.  Yes, there are times when there really isn’t any good way of breaking the code into smaller chunks.  But that is rare and code comment exclusions will let you handle those exceptions. </p>\n<p><code>&quot;cyclomatic-complexity&quot;: [true, 10],</code></p>\n<h2 id=\"Optional-Rules\"><a href=\"#Optional-Rules\" class=\"headerlink\" title=\"Optional Rules\"></a>Optional Rules</h2><p>Some other rules you might want to consider adding in that could improve your code include:</p>\n<h3 id=\"array-type-generic\"><a href=\"#array-type-generic\" class=\"headerlink\" title=\"array-type generic\"></a>array-type generic</h3><p>Coming from a C# background, I prefer to define my arrays as Array<T> instead of T[].  By default nothing is defined.  If it is just you working on the code, it probably doesn’t matter than much.  But on a team, I find consistency useful. </p>\n<p><code>&quot;array-type&quot;: [true, &quot;generic&quot;],</code></p>\n<h3 id=\"readonly-array\"><a href=\"#readonly-array\" class=\"headerlink\" title=\"readonly-array\"></a>readonly-array</h3><p>For my NgRX code, I like to have readonly-array turned on to ensure immutability.  I’ve found that I rarely need to turn this off in the rest of my code since NgRX is where I would be mutating anything that isn’t local to a function.  So, I just turn this rule on globally. </p>\n<p><code>&quot;readonly-array&quot;: [true, &quot;ignore-local&quot;],</code></p>\n<h2 id=\"Final-Notes\"><a href=\"#Final-Notes\" class=\"headerlink\" title=\"Final Notes\"></a>Final Notes</h2><p>I mentioned above that if you are using TypeScript 2.4.n, you can use the pipe operator to combine types.  You also get stronger type checking if you use that version.  However, if you are using codelyzer, as of this writing, you’ll have trouble if you use TypeScript 2.4.n with a version of Codelyzer greater than 3.0.1.  I keep trying the newer versions to see if this issue has been corrected.  Anyhow, your mileage may vary moving your code to TypeScript 2.4.n.</p>\n<h2 id=\"My-TSLint-file\"><a href=\"#My-TSLint-file\" class=\"headerlink\" title=\"My TSLint file\"></a>My TSLint file</h2><p>For those who are curious, my full tslint.json file is below. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;extends&quot;</span>: [<span class=\"string\">&quot;tslint-immutable&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;rulesDirectory&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;node_modules/codelyzer&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;rules&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;typedef&quot;</span>: [<span class=\"literal\">true</span>, </span><br><span class=\"line\">            <span class=\"string\">&quot;call-signature&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;arrow-call-signature&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;parameter&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;arrow-parameter&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;property-declaration&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;variable-declaration&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;member-variable-declaration&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;object-destructuring&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;array-destructuring&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;array-type&quot;</span>: [<span class=\"literal\">true</span>, <span class=\"string\">&quot;generic&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;readonly-keyword&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;readonly-array&quot;</span>: [<span class=\"literal\">true</span>, <span class=\"string\">&quot;ignore-local&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;no-let&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-any&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;cyclomatic-complexity&quot;</span>: [<span class=\"literal\">true</span>, <span class=\"number\">10</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;no-unused-variable&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;arrow-return-shorthand&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;callable-types&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;class-name&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;comment-format&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-space&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;curly&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;eofline&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;forin&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;import-blacklist&quot;</span>: [<span class=\"literal\">true</span>, <span class=\"string\">&quot;rxjs&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;import-spacing&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;indent&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;spaces&quot;</span>,</span><br><span class=\"line\">            <span class=\"number\">4</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;interface-over-type-literal&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;label-position&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;max-line-length&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"number\">140</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;member-access&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;member-ordering&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;static-before-instance&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;variables-before-functions&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;no-arg&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-bitwise&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-console&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;debug&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;info&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;time&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;timeEnd&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;trace&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;no-construct&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-debugger&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-duplicate-super&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-duplicate-variable&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-empty&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-empty-interface&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-eval&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-inferrable-types&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-misused-new&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-non-null-assertion&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-shadowed-variable&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-string-literal&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-string-throw&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-switch-case-fall-through&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-unnecessary-initializer&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-trailing-whitespace&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-unused-expression&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-use-before-declare&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-var-keyword&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;object-literal-sort-keys&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;one-line&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-open-brace&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-catch&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-else&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-whitespace&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;prefer-const&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;quotemark&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;single&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;radix&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;semicolon&quot;</span>: [</span><br><span class=\"line\">            <span class=\"string\">&quot;always&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;triple-equals&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;allow-null-check&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;typedef-whitespace&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;call-signature&quot;</span>: <span class=\"string\">&quot;nospace&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;index-signature&quot;</span>: <span class=\"string\">&quot;nospace&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;parameter&quot;</span>: <span class=\"string\">&quot;nospace&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;property-declaration&quot;</span>: <span class=\"string\">&quot;nospace&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;variable-declaration&quot;</span>: <span class=\"string\">&quot;nospace&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;typeof-compare&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;unified-signatures&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;variable-name&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;whitespace&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-decl&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-operator&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-separator&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-type&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;directive-selector&quot;</span>: [<span class=\"literal\">true</span>, <span class=\"string\">&quot;attribute&quot;</span>, <span class=\"string\">&quot;app&quot;</span>, <span class=\"string\">&quot;camelCase&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;component-selector&quot;</span>: [<span class=\"literal\">true</span>, <span class=\"string\">&quot;element&quot;</span>, <span class=\"string\">&quot;app&quot;</span>, <span class=\"string\">&quot;kebab-case&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;use-input-property-decorator&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;use-output-property-decorator&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;use-host-property-decorator&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-input-rename&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-output-rename&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;use-life-cycle-interface&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;use-pipe-transform-interface&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;component-class-suffix&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;directive-class-suffix&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-access-missing-member&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;templates-use-public&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;invoke-injectable&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "angular",
                "typescript"
            ]
        },
        {
            "id": "http://davembush.github.com/thinking-in-javascript/",
            "url": "http://davembush.github.com/thinking-in-javascript/",
            "title": "Thinking in JavaScript",
            "date_published": "2017-09-05T10:30:54.000Z",
            "content_html": "<p>Over the last week I’ve gradually come to the realization that the fundamental reason why most people have trouble with JavaScript is because it doesn’t fit their mental model of how programming should be done.  This isn’t to say that most programmers don’t manage to achieve their end goal.  But if you sit back and take an objective look at the code we end up writing, you have to admit, the code ends up being quite ugly. </p>\n<p>Now, this isn’t a dig at the way we’ve been doing things.  We’ve all been doing the best we can with what we have.  But, the JavaScript world has progressed and there is a better mental model that has developed and should even be expanded which will allow us to develop more complex and feature rich applications now and well into the future. <figure><img src=\"/uploads/2017/09/2017-09-05.jpg\" title=\"Thinking in JavaScript\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/froderik/8283727226/\">freddie boy</a> via <a href=\"//visualhunt.com/re/fb4c57\">Visual Hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by-sa/2.0/\"> CC BY-SA</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Where-We’ve-Been\"><a href=\"#Where-We’ve-Been\" class=\"headerlink\" title=\"Where We’ve Been\"></a>Where We’ve Been</h2><p>I’ve been saying for years that the thing that holds most programmers back is that they always want to treat whatever new thing they are using like the last thing they were using.  And nowhere has this displayed itself more apparently than with JavaScript. </p>\n<p>Take the most obvious of examples.  Everyone knows, or should know by now, that JavaScript is not really object-oriented.  And yet, we’ve been trying to force JavaScript to BE object-oriented pretty much from the beginning.  This hasn’t been such a big problem, although one could argue that by trying to make JavaScript object-oriented, we’ve prevented it from being able to do some of the things it does best. </p>\n<p>Where we really run into trouble is with the event based, and often asynchronous nature of JavaScript. Think about this.  For years, we’ve been trying to synchronize something that is inherently asynchronous.  And this is where the real trouble begins. </p>\n<p>First, we had call back. Then promises. Now Observables. Soon async and await. And while callbacks are how the asynchronous nature of JavaScript is handle under the hood, the others are attempts to tame the asynchronous beast.  Especially async and await.</p>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>Now, this is where we are. Constantly trying to make JavaScript be something it isn’t. But, why is this? </p>\n<p>I believe it is because we are trying to impose models onto JavaScript that were useful in our desktop and server-side applications.  MVC, MVVM, Object-Oriented, and others all grew up in a world that was both synchronous, multi-threaded, and lent themselves well to an object-oriented model.  As various frameworks have evolved, the attempt has been to take these familiar models and apply them to an asynchronous, single threaded and not really object-oriented.  From where I sit, I am amazed any of this worked at all.  It seems to me it should have failed long ago.</p>\n<h2 id=\"A-Light-in-The-Darkness\"><a href=\"#A-Light-in-The-Darkness\" class=\"headerlink\" title=\"A Light in The Darkness\"></a>A Light in The Darkness</h2><p>Hey, I’ve been stuck in the old school model too.  But, I’m starting to think there may be a better way.  I’ve written about Redux and NgRX a lot on this blog.  I’ve fielded a lot of questions on the Angular slack channel.  Most of the questions revolve around the basic question of handling multiple asynchronous calls for data as part of one action.  All of the questions presuppose you would need to make each of the calls for data and then use some method of waiting for everything to return and assemble the data before moving on.  In each case, I recommend an alternative.  What if, each call was a unique action.  When each returns, another action is fired that places the return data in the appropriate store, or sub store.  In this model, we don’t care when the data comes back.  When it comes back, we deal with it appropriately.</p>\n<h2 id=\"An-Example\"><a href=\"#An-Example\" class=\"headerlink\" title=\"An Example\"></a>An Example</h2><p>Let’s go with one of the more common examples I see. </p>\n<p>I need to make a request for a set of records.  Once I have the results, for each record in the result, I need to go get a set of child records.  Here is how I would deal with this at a very high level using NgRX.  I’m sure this would work for multiple Redux patterns but they may call things by different names.</p>\n<ul>\n<li>Fire an Action that request the main set of records.</li>\n<li>The appropriate Effect responds to the action by making an AJAX call for the data.</li>\n<li>When the AJAX call returns,<ul>\n<li>fire an Action that puts the main records in the store.</li>\n<li>for each record in the result fire an Action asking for the child record(s).</li>\n</ul>\n</li>\n<li>The appropriate Effect(s) responds to the request for child records by making AJAX calls.</li>\n<li>When the data returns fire an Action that places the data in the store.</li>\n</ul>\n<p>Since your view is listening for changes on the entities in your store, it will update as the data comes in. Even better if you setup a debounce on your listener, the screen will update only when all of the data has been retrieved.</p>\n<h2 id=\"The-Key-Concept\"><a href=\"#The-Key-Concept\" class=\"headerlink\" title=\"The Key Concept\"></a>The Key Concept</h2><p>The key concept here is that we no longer care WHEN something happens.  We only care THAT it happens.  And rather than trying to setup forkJoins() or some other mechanism to flatten this all out, our code ends up being quite simple.  Discrete bits of functionality.  And now, all our asynchronous code becomes Reactive code.  We no longer need to flatten anything out.</p>\n<h2 id=\"Server-Side\"><a href=\"#Server-Side\" class=\"headerlink\" title=\"Server Side\"></a>Server Side</h2><p>Sadly, on the server side, things aren’t quite so easy.  At best we are tied to an implementation Observables and the various methods of combining Observables.  But I could also see some kind of client&#x2F;server implementation that used a framework like SignalR or Socket.io so that as the various Observables complete, the data on the client would get updated.  An interesting way to make all of the AJAXy calls rather transparent to the user.</p>\n<h2 id=\"Taking-it-To-the-Next-Level\"><a href=\"#Taking-it-To-the-Next-Level\" class=\"headerlink\" title=\"Taking it To the Next Level\"></a>Taking it To the Next Level</h2><p>You may call me a dreamer, but what if we made a JavaScript framework that was all message driven and reactive like I’ve described above?  We’ve done it before. </p>\n<p>When Windows was first created in ran on single core CPUs.  It was essentially single threaded.  The way it worked was primarily by putting “events” on a que and then sending the events to the appropriate application that needed to know about them. </p>\n<p>If you applied this model to JavaScript and folded in what I’ve described above, you could easily have a system that appeared to be multi-threaded even though it was single threaded at its core.</p>\n<h2 id=\"Don’t-Throw-the-Baby-Out-…\"><a href=\"#Don’t-Throw-the-Baby-Out-…\" class=\"headerlink\" title=\"Don’t Throw the Baby Out …\"></a>Don’t Throw the Baby Out …</h2><p>Now, you may think I’m endorsing throwing out object-oriented JavaScript.  Actually, I think most of the View stuff we do lends itself well to object-oriented programming.  But, most of our business rules lend themselves better to the model I’ve described above.  Functional and Reactive.</p>\n",
            "tags": [
                "javascript",
                "mvvm",
                "redux",
                "MVC",
                "NgRX"
            ]
        },
        {
            "id": "http://davembush.github.com/model-view-presenter-angular-and-testing/",
            "url": "http://davembush.github.com/model-view-presenter-angular-and-testing/",
            "title": "Model View Presenter, Angular, and Testing",
            "date_published": "2017-08-29T10:30:33.000Z",
            "content_html": "<p>While testing Components is possible, it is not easy and is often pointless.  Using the Model View Presenter pattern, or a variation of it, solves the problem. </p>\n<p>Here’s the deal. Long time readers of my blog know I’ve been a proponent of Unit Testing for a very long time. While I was learning React, I went through the exercise of trying to write test as I was learning.  Now, the great thing about Angular and React is that it is possible to test your components.  The problem with testing components is that you are either testing that your HTML ended up in the right spot, that Angular directives did what they should, or you are evaluating the DOM to verify that component logic worked.  In most cases, putting tests that do any of these at the component level is the wrong way to test. <figure><img src=\"/uploads/2017/08/2017-08-27.jpg\" title=\"Model View Presenter, Angular, and Testing\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/tamworthboroughcouncil/15657023428/\">Tamworth Borough Council</a> via <a href=\"//visualhunt.com/re/e21893\">Visualhunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Evaluating-HTML\"><a href=\"#Evaluating-HTML\" class=\"headerlink\" title=\"Evaluating HTML\"></a>Evaluating HTML</h2><p>Ignoring for a second that setting up a component test is awkward, the question I want to address here is, “is that really an appropriate test?” </p>\n<p>If all your smart component does is pass data down to dumb component, all you really need to verify is that given a dumb component with an html fragment, and another one with another fragment, they will all end up sequentially after each other.  It is a pretty easy test to setup. </p>\n<p>But all you’ve ended up testing is that Angular does what it says it will. It won’t tell you what you can’t already see by running the code. </p>\n<p>Dumb components are even more obvious.  Let’s go for something obvious.  You have a ngFor that allows you to display a list of HTML.  You setup your component so that it has an array of three known items, you pass that into the component, do a change detection cycle, and verify that your HTML displays as expected. </p>\n<p>Great, you’ve verified that Angular works again.  You will have a hard time convincing me that you’ve really tested anything.</p>\n<h2 id=\"Angular-Directives\"><a href=\"#Angular-Directives\" class=\"headerlink\" title=\"Angular Directives\"></a>Angular Directives</h2><p>In this case, you are going to try to verify that when you click on a component, or pass it some data, or… whatever, that Angular does what it should.  Maybe you do need to verify that when you click an element, something else happens.  But this is not the place. </p>\n<p>You might create an integration test, which would, by definition, take longer to run.  It would be better if you tested this using an end to end test.  But testing this as a unit test, doesn’t tell you much more than that Angular has said that it would. </p>\n<p>“But, I need to verify that the code in my event handler does what it should!”  You might complain.  Yes, you do, but you don’t need to fire a click event to do that, just call the event handler.</p>\n<h2 id=\"Big-Fat-Hairy-Logic\"><a href=\"#Big-Fat-Hairy-Logic\" class=\"headerlink\" title=\"Big Fat Hairy Logic\"></a>Big Fat Hairy Logic</h2><p>And then there is that “big fat hairy logic” issue.  You’ve created some sort of component that has some rather complex logic.  OK, that happens.  A grid control is a perfect example.  But, maybe your logic is in the wrong place?</p>\n<h2 id=\"A-Better-Solution\"><a href=\"#A-Better-Solution\" class=\"headerlink\" title=\"A Better Solution\"></a>A Better Solution</h2><p>There is a design pattern called “Model View Presenter” Like all of the MV* patterns it aims to separate out logic from the view so that we can test things easier.  It was popular with WebForms in ASP.NET when that was how you wrote ASP.NET web sites.  The way this worked was that you would create an Interface for your WebForm that represented all of the things you wanted to have access to from your logic code.  Your presenter.  All your component or page code did was respond to events on the page and expose data to the data driven forms.  In a lot of ways, Angular isn’t much different from WebForms.  Your TypeScript file is essentially a “code-behind” file and your template is similar to an ASPX page. </p>\n<p>The beauty of the MVP pattern is that when you do it right, your component has no logic at all.  It renders data and responds to events by calling down to the presenter.  In an Angular world, I doubt the Presenter would ever need to call up to the view.  This is prefect.  Now I can create a test for my component logic in a way very similar to how I would test any other Injectable.  Because Injectables are what we are going to use here.</p>\n<h3 id=\"Injectable-Presenters\"><a href=\"#Injectable-Presenters\" class=\"headerlink\" title=\"Injectable Presenters\"></a>Injectable Presenters</h3><p>For the point of illustration, let’s assume that all components would follow this pattern.  Now a simple component would have four files instead of the normal three.</p>\n<ul>\n<li>*.component.ts</li>\n<li>*.component.html</li>\n<li>*.component.css</li>\n<li>*.component.presenter.ts</li>\n</ul>\n<p>The <code>*.component.presenter.ts</code> file is our new Injectable.  Any properties in our component would pass on down to the presenter.  Any methods, which should be few to none, would pass on down to the presenter.  The presenter is where we do all the work.</p>\n<h3 id=\"Make-the-Presenter-Available-to-the-Component\"><a href=\"#Make-the-Presenter-Available-to-the-Component\" class=\"headerlink\" title=\"Make the Presenter Available to the Component\"></a>Make the Presenter Available to the Component</h3><p>Now, if you’ve studied the Angular tutorials, you probably already know this, but my bet is most people programming the new Angular don’t.  You can make an Injectable available by providing it in a module, or by providing it in a component.  If you provide it in the module, it is globally available.  If you provide it in the component, it is only available to that component or its child components.  This is perfect for our use case here.  So, we provide it in our component and then inject it into our component’s constructor. </p>\n<p>Everything else we might have injected into our component can now be injected into our presenter.</p>\n<h2 id=\"Look-Ma-No-DOM\"><a href=\"#Look-Ma-No-DOM\" class=\"headerlink\" title=\"Look Ma, No DOM\"></a>Look Ma, No DOM</h2><p>The side effect of this pattern is now, the complexity of the methods in our component should be 1.  This means they don’t really need to be tested.  And because they don’t need to be tested, we don’t really need a DOM available to run our tests.  This makes it MUCH easier to use jsDOM to run our unit test without having to wire in a bunch of polyfills just to make it all “work.”</p>\n",
            "tags": [
                "unit test",
                "angular",
                "mvp"
            ]
        },
        {
            "id": "http://davembush.github.com/angular-observable-secrets-revealed/",
            "url": "http://davembush.github.com/angular-observable-secrets-revealed/",
            "title": "Angular Observable Secrets Revealed",
            "date_published": "2017-08-08T10:30:11.000Z",
            "content_html": "<p>If you’ve been programming JavaScript based applications for any length of time, you’ve probably already made the progression from callback hell to promises, but just to recap.  Whenever we make any kind of asynchronous call in JavaScript, we need to provide a callback function to the call so that, when the call completes, the function can be called with any resulting data.  Function calls you may typically make that need this kind of feature are <code>setTimeout()</code>, <code>setInterval(),</code> and AJAX calls using the various libraries that support this. </p>\n<p>The problem with using callbacks is that you can end up with “Callback Hell” where you have callbacks inside of other callbacks.  Our code becomes messy and difficult to reason about. </p>\n<p>To try to flatten this situation out, promises were created.  Instead of creating a callback function and passing it into the asynchronous function, the asynchronous function returns a promise that has a function we can pass our function into.  This function can return yet another promise.  The result is that instead of having nested callbacks, all of our callbacks live at the same level. </p>\n<p>However, in the process, we lost the ability to cancel an asynchronous function using callbacks.  Most of the time, this was not a huge concern, but in the case of AJAX calls, we did end up making more request than we really needed to.  Most people never even recognized this as an issue.  But if you go and take a look at some of your older code, you will see that you have several places where the code would work more efficiently if you were able to cancel a call that was being superseded by a new call. </p>\n<p>Meanwhile, some additional functions were added to JavaScript Arrays.  Maybe you’ve seen some of them?  map(), reduce(), and filter() are three of the more common functions. </p>\n<p>What?  You haven’t seen these?  If you have and you know how they work, you can skip this next section.  But, if you haven’t, pay careful attention because this next section is critical to understanding how Observables work. <figure><img src=\"/uploads/2017/08/2017-08-08.jpg\" title=\"Angular Observable Secrets Revealed\"> Photo via <a href=\"//visualhunt.com/re/4ba464\">VisualHunt.com</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Array-Functions\"><a href=\"#Array-Functions\" class=\"headerlink\" title=\"Array Functions\"></a>Array Functions</h2><h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h3><p>Let’s say you have a list of objects that you need to transform into another form.  In the example below, we want to transform our list of objects into a list that can be used in a dropdown list using fullName for the display and id for the value. </p>\n<p>Without using <code>map()</code>, your code might look something like this: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someList = [</span><br><span class=\"line\">   &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">firstName</span>: ‘<span class=\"title class_\">Dave</span>’, <span class=\"attr\">lastName</span>: ‘<span class=\"title class_\">Bush</span>’&#125;,</span><br><span class=\"line\">   &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">firstName</span>: ‘<span class=\"title class_\">John</span>’, <span class=\"attr\">lastName</span>: ‘<span class=\"title class_\">Doe</span>’&#125;,</span><br><span class=\"line\">   …</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArray = []; </span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; someList.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> item = someList[i];</span><br><span class=\"line\">   newArray.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">fullName</span>: item.<span class=\"property\">firstName</span> + ‘ ‘ +</span><br><span class=\"line\">       item.<span class=\"property\">lastName</span>, <span class=\"attr\">id</span>: item.<span class=\"property\">id</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The thing is, we do most of the code from <code>newArray = []</code> on down over and over again.  It is only the code in the <code>push()</code> that changes. </p>\n<p>What if we were to make the code into a function?  That’s what <code>map()</code> does.  It takes a function as a parameter that takes an item as a parameter.  Inside the function, we use that item to specify how we want to transform the item and the whole map() function returns the new array. </p>\n<p>The code above, turns into this.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someList = [</span><br><span class=\"line\">   &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">firstName</span>: ‘<span class=\"title class_\">Dave</span>’, <span class=\"attr\">lastName</span>: ‘<span class=\"title class_\">Bush</span>’&#125;,</span><br><span class=\"line\">   &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">firstName</span>: ‘<span class=\"title class_\">John</span>’, <span class=\"attr\">lastName</span>: ‘<span class=\"title class_\">Doe</span>’&#125;,</span><br><span class=\"line\">   …</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArray = someList.<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;<span class=\"attr\">fullName</span>: item.<span class=\"property\">firstName</span> + ‘ ‘ +</span><br><span class=\"line\">       item.<span class=\"property\">lastName</span>, <span class=\"attr\">id</span>: item.<span class=\"property\">id</span>&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h3><p>Now, let’s say that for some reason, you only want to include items in the new array that include a last name that starts with ‘B’. Our old style code would look something like this: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someList = [</span><br><span class=\"line\">   &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">firstName</span>: ‘<span class=\"title class_\">Dave</span>’, <span class=\"attr\">lastName</span>: ‘<span class=\"title class_\">Bush</span>’&#125;,</span><br><span class=\"line\">   &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">firstName</span>: ‘<span class=\"title class_\">John</span>’, <span class=\"attr\">lastName</span>: ‘<span class=\"title class_\">Doe</span>’&#125;,</span><br><span class=\"line\">   …</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArray = []; </span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; someList.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> item = someList[i];</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(item.<span class=\"property\">lastName</span>.<span class=\"title function_\">startsWith</span>(<span class=\"params\">‘B’</span>) &#123;</span><br><span class=\"line\">       newArray.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And once again, this is code we tend to write quite a bit.  So, what if we had a function that did this for us? </p>\n<p>This is exactly what the <code>filter()</code> function is for.  So, rewriting the code above using <code>filter()</code> would look like this.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someList = [</span><br><span class=\"line\">   &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">firstName</span>: ‘<span class=\"title class_\">Dave</span>’, <span class=\"attr\">lastName</span>: ‘<span class=\"title class_\">Bush</span>’&#125;,</span><br><span class=\"line\">   &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">firstName</span>: ‘<span class=\"title class_\">John</span>’, <span class=\"attr\">lastName</span>: ‘<span class=\"title class_\">Doe</span>’&#125;,</span><br><span class=\"line\">   …</span><br><span class=\"line\">];</span><br><span class=\"line\">newArray = someList.<span class=\"title function_\">filter</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> item.<span class=\"property\">lastName</span>.<span class=\"title function_\">startsWith</span>(‘B’);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Chaining\"><a href=\"#Chaining\" class=\"headerlink\" title=\"Chaining\"></a>Chaining</h3><p>Once again, you can see that we passed in a function that takes the current item as a parameter.  The function returns true or false.  If it returns true, the item gets included in the new array. </p>\n<p>What if we want to filter AND transform the data? </p>\n<p>The temptation for programmers new to this model is to use the map and push the item into an array that was declared outside of the map. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someList = [</span><br><span class=\"line\">   &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">firstName</span>: ‘<span class=\"title class_\">Dave</span>’, <span class=\"attr\">lastName</span>: ‘<span class=\"title class_\">Bush</span>’&#125;,</span><br><span class=\"line\">   &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">firstName</span>: ‘<span class=\"title class_\">John</span>’, <span class=\"attr\">lastName</span>: ‘<span class=\"title class_\">Doe</span>’&#125;,</span><br><span class=\"line\">   …</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArray = [];</span><br><span class=\"line\">someList.<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(item.<span class=\"property\">lastName</span>.<span class=\"title function_\">startsWith</span>(‘B’)) &#123;</span><br><span class=\"line\">       newArray.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">fullName</span>: item.<span class=\"property\">firstName</span> + ‘ ‘ +</span><br><span class=\"line\">           item.<span class=\"property\">lastName</span>, <span class=\"attr\">id</span>: item.<span class=\"property\">id</span>&#125;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>But that really isn’t all that much better than if we were just using a for&#x2F;next loop like we’ve been doing.  Old habits die hard. </p>\n<p>Instead, we can take advantage of function chaining. What this allows us to do is to filter and then map. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someList = [</span><br><span class=\"line\">   &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">firstName</span>: ‘<span class=\"title class_\">Dave</span>’, <span class=\"attr\">lastName</span>: ‘<span class=\"title class_\">Bush</span>’&#125;,</span><br><span class=\"line\">   &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">firstName</span>: ‘<span class=\"title class_\">John</span>’, <span class=\"attr\">lastName</span>: ‘<span class=\"title class_\">Doe</span>’&#125;,</span><br><span class=\"line\">   …</span><br><span class=\"line\">];</span><br><span class=\"line\">newArray = someList.<span class=\"title function_\">filter</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> item.<span class=\"property\">lastName</span>.<span class=\"title function_\">startsWith</span>(‘B’);</span><br><span class=\"line\">&#125;.<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;<span class=\"attr\">fullName</span>: item.<span class=\"property\">firstName</span> + ‘ ‘ +</span><br><span class=\"line\">       item.<span class=\"property\">lastName</span>, <span class=\"attr\">id</span>: item.<span class=\"property\">id</span>&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>So much cleaner.</p>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h3><p>The final useful function we have available to us for dealing with common array loops is reduce().  reduce() allows to loop through an array and accumulate the items in an array into another array, an object, or a value. </p>\n<p>The reduce() function take two parameters.  The first parameter is a function.  The second parameter is the starting value for the accumulator. </p>\n<p>The function that we pass in takes three parameters.  The current value of the accumulator, the current item, and the current item index.  Most people only use the first two parameters in their function.  The function returns the new accumulator value that then gets passed into the next call to the function. </p>\n<p>So, a really simple example would be, given an array of numbers, add them all up. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> total = numbers.<span class=\"title function_\">reduce</span>(<span class=\"keyword\">function</span>(<span class=\"params\">sum, item</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> sum + item;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>I’ve also used this to turn an array of name&#x2F;value pairs into an object where the properties are the name and the values are the values that were paired with the names.</p>\n<h2 id=\"Events-as-Arrays\"><a href=\"#Events-as-Arrays\" class=\"headerlink\" title=\"Events as Arrays\"></a>Events as Arrays</h2><p>Now, imagine that events that fire are part of one long continuous array.  An array that never ends. If this were true listening to events would be as familiar as processing an array. </p>\n<p>This is all an observable is.  It treats everything as though it were an array, adds several other functions that give us even greater functionality, and several functions that allow us to deal with the fact that events are not only sequential, but also time based. </p>\n<p>And because events aren’t really arrays, we call this series of items a “stream.”  So, when you read about “streams” while working with Observables think, “list of items.”</p>\n<h3 id=\"Button-Click\"><a href=\"#Button-Click\" class=\"headerlink\" title=\"Button Click\"></a>Button Click</h3><p>For example, let’s say you have a button on your screen and you want to know when it is pressed.  Let’s say your button is represented by a member variable name “myButton”.  In your code, you would listen to a button click by writing code that looks something like: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">fromEvent</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">myButton</span>,<span class=\"string\">&#x27;click&#x27;</span>).<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> </span><br><span class=\"line\">   <span class=\"comment\">/* do something in response to the click here */</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>You will notice that we used the <code>subscribe()</code> function instead of <code>map()</code>.  We still have a <code>map()</code> function.  But, <code>subscribe()</code> is how we tell the application, “we want to start listening to the stream now.”  Otherwise, <code>subscribe()</code> works just like map() does. </p>\n<p>Yes, I know what you’re thinking.  “How is that better than just having the template call an event handler?” </p>\n<p>Well, the fact of the matter is, it really isn’t all that much better.  But, here is where it does make more sense.</p>\n<h3 id=\"Debouncing-Keystrokes\"><a href=\"#Debouncing-Keystrokes\" class=\"headerlink\" title=\"Debouncing Keystrokes\"></a>Debouncing Keystrokes</h3><p>If you’ve been writing application in JavaScript for a while, I’m sure you’ve written classic debounce handlers.  You know.  Don’t actually fire this event until you are no longer receiving change events from the input field. </p>\n<p>I won’t write out the old code here.  It is relatively long, hard to follow, and therefore somewhat complicated. </p>\n<p>But here is how we handle it using Observables. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">fromEvent</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">myInput</span>,<span class=\"string\">&#x27;change&#x27;</span>).<span class=\"title function_\">debounceTime</span>(<span class=\"number\">250</span>).<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">/* do something in response to the input field change here */</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><code>debounceTime(250)</code> tells the Observable to wait for 250 milliseconds to see if there is some other event that comes in and use that event instead.  That is much easier than the old way.</p>\n<h3 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h3><p>While you could handle button clicks and debounce logic using old school JavaScript tricks, in Angular, it is practically impossible to make an AJAX call without using Observables.  This is because the <code>Http</code> service and the <code>HttpClient</code> that was introduced in Angular 4.3 use Observables instead of callbacks or promises to manage dealing with the data that eventually is returned from the AJAX call. </p>\n<p>Since <code>Http</code> and <code>HttpClient</code> are similar, we will continue our discussion of handling AJAX calls using <code>HttpClient</code>.  The main advantage to using <code>HttpClient</code> is that it handles parsing the response into a JavaScript object we can use.  <code>Http</code> just returns the raw Response object and parsing it out is up to us. </p>\n<p><code>HttpClient</code>, on the other hand, returns the object we would have parsed out with <code>Http</code>. </p>\n<p>NOw, assuming you’ve injected HttpClient into the class that is going to use it, a typical get might looks something like this: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">get</span>&lt;<span class=\"title class_\">TypeInfo</span>&gt;(<span class=\"string\">&#x27;/api/get-data&#x27;</span>)</span><br><span class=\"line\">   .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">x: TypeInfo</span>) =&gt;</span> <span class=\"comment\">/* do something with the data */</span> );</span><br></pre></td></tr></table></figure>\n\n<p>So, walking through this, you may notice that some things look very similar to Promises and then, there are some other things that aren’t so much.  But trust me this gets much better.  We are just starting out small. </p>\n<p>First, what is that <code>TypeInfo</code> thing? </p>\n<p>You see, our get call is what is normally referred to as a “templated method.”  In simple terms, get doesn’t know what type it returns until you tell it.  So, we are telling it that it returns a <code>TypeInfo</code> type.  <code>TypeInfo</code> is just a name I made up.  You would create an interface that is relevant to the type of information that your AJAX code is returning. </p>\n<p>Other than that, we subscribe to the observable that get() returns and process the data. </p>\n<p>Noq, what if our get call fails? </p>\n<p>Oh! We have methods for that. </p>\n<p>First, we can trap failures with a <code>catch()</code> call. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">get</span>&lt;<span class=\"title class_\">TypeInfo</span>&gt;(‘/api/get-data’)</span><br><span class=\"line\">   .<span class=\"title function_\">catch</span>(<span class=\"attr\">err</span>: <span class=\"function\"><span class=\"params\">Error</span> =&gt;</span> <span class=\"comment\">/* do something with the error */</span>)</span><br><span class=\"line\">   .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">x: TypeInfo</span>) =&gt;</span> <span class=\"comment\">/* do something with the data */</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Next, maybe you want to <code>retry</code> the failed call before you give up. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">get</span>&lt;<span class=\"title class_\">TypeInfo</span>&gt;(‘/api/get-data’)</span><br><span class=\"line\">   .<span class=\"title function_\">retry</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">   .<span class=\"title function_\">catch</span>(<span class=\"attr\">err</span>: <span class=\"function\"><span class=\"params\">Error</span> =&gt;</span> <span class=\"comment\">/* do something with the error */</span>)</span><br><span class=\"line\">   .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">x: TypeInfo</span>) =&gt;</span> <span class=\"comment\">/* do something with the data */</span>);</span><br></pre></td></tr></table></figure>\n\n<p>And because we have a <code>catch()</code>, with must have a <code>finally</code> too, right? </p>\n<p>Try doing all of that with a Promise or a Callback. </p>\n<p>Oh, and did I mention you can cancel AJAX calls using Observables?  Yep.  It’s true.  In fact, my experience has been that if you make the same call from the same service two times in a row, it will cancel the first call before it makes the second.  Pretty cool. </p>\n<p>The final thing that tends to trip people up who are learning about Observables is that nothing in the observable chain executes until you subscribe to the observable and an event happens. </p>\n<p>Once you start getting comfortable with all of the methods you have available to you, you’ll begin to see the power of using Observables over using Promises or Callbacks, even if there are similarities.</p>\n",
            "tags": [
                "angular",
                "observables",
                "RxJS"
            ]
        },
        {
            "id": "http://davembush.github.com/enforce-typescript-functional-programming/",
            "url": "http://davembush.github.com/enforce-typescript-functional-programming/",
            "title": "Enforce TypeScript Functional Programming",
            "date_published": "2017-07-25T10:30:00.000Z",
            "content_html": "<p>As consistent readers of this blog are aware, I’ve fallen in love with Functional Programming.  But I also live in a primarily Angular&#x2F;TypeScript world where some code is still Object Oriented and other code is more Functional in nature.  And while TypeScript lets you do some Functional things, I’ve found it hard to force functional concepts in TypeScript.  So, I’ve gone searching.  Wouldn’t it be great if there were some sort of flag you could set that said, “Hey compiler, I’m in ‘Functional’ mode now!”  And the compiler would make sure that you never used a conditional statement, never accessed hidden parameters, and never mutated state? </p>\n<p>Well, I think I’ve figured out some of how to manage all of this using nothing more than TypeScript and some TSLint rules. <figure><img src=\"/uploads/2017/07/2017-07-25.jpg\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/archer10/15127010075/\">archer10 (Dennis) 99M Views</a> via <a href=\"//visualhunt.com/re/52cd50\">VisualHunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by-sa/2.0/\"> CC BY-SA</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Immutability\"><a href=\"#Immutability\" class=\"headerlink\" title=\"Immutability\"></a>Immutability</h2><p>Several weeks ago, I demonstrated how to <a href=\"/really-use-ngrx-better/\">protect against immutability using freeze</a>.  But, wouldn’t it be better to catch immutability issues at compile time? </p>\n<p>There are a couple features in TypeScript that do just that. </p>\n<p>First, we can use the <code>readonly</code> keyword on a field to ensure that it doesn’t change.  And second, we can declare arrays using <code>ReadonlyArray</code>.  For this to be most useful, we are going to want to provide an interface for all of our data that needs to be immutable.  This is how I typically use NgRX.</p>\n<h2 id=\"Enforcing-Functional\"><a href=\"#Enforcing-Functional\" class=\"headerlink\" title=\"Enforcing Functional\"></a>Enforcing Functional</h2><p>Now, that is as far as it goes for support in TypeScript itself, as far as I am aware.  But, we can get more support by using TSLint.  If you are using the Angular-CLI, this gets installed when you create your project.  If you aren’t using the Angular-CLI, or you are using some other framework, you are on your own for getting that installed and setup. </p>\n<p>There are two problems we need to overcome in order to use TSLint to solve our “switch into Functional mode” issue.  First, is that we need a set of rules we can use.  The second is that we will need some way of isolating where those rules take effect. </p>\n<p>Fortunately, we can create a separate <code>tslint.json</code> file for each directory.  And since all of my Functional code is isolated to my NgRX state management stuff, I can put a file in that directory and it will take care of my Functional needs while leaving my normal <code>tslint.json</code> file for the rest of my code. </p>\n<p>The other thing you will want to do is that you’ll want to install <a href=\"//www.npmjs.com/package/tslint-immutable\">tslint-immutable.</a> </p>\n<p>tslint-immutable adds some rules specifically for immutability that are not included in the core implementation.  I love plugable systems. </p>\n<p>I’ll let you read the documentation on the site for the rules that it adds.  Who knows when you’ll be reading this and the package may have changed by the time you get here.</p>\n<h2 id=\"pre-commit-hooks\"><a href=\"#pre-commit-hooks\" class=\"headerlink\" title=\"pre-commit hooks\"></a>pre-commit hooks</h2><p>Having a good set of linting rules if of no use if they get ignored.  Right? </p>\n<p>Now, another package I install into my projects is pre-commit.  Be warned though.  If you are using Windows as your development computer, you’ll also need to install <a href=\"//gnuwin32.sourceforge.net/packages/coreutils.htm\">coreutils</a> because pre-commit assumes you are able to run bash. </p>\n<p>But of course, someone could comment out or remove the pre-commit hooks or otherwise force a commit.  This is why you also want a good code review process in place for your team.  Or better yet, a job that runs on your central repository that verifies that these precommit task have run successfully. </p>\n<p>When I review code, I check several items regularly.</p>\n<ul>\n<li>What changed and was it changed in a way consistent with how we want things coded.</li>\n<li>If something wasn’t coded correctly, is there a linting rule we can put in place to correct it?</li>\n<li>When I pull down the code, can I compile for production as well as for development mode?</li>\n</ul>\n<p>Point 2 is critical.  The more reviewing the computer can do for you the better off you’ll be.</p>\n<h2 id=\"Conditionals\"><a href=\"#Conditionals\" class=\"headerlink\" title=\"Conditionals\"></a>Conditionals</h2><p>What I haven’t been able to find is a rule that will prevent conditions from showing up inside of observable functions or their array cousins.  If you know of something, please let me know in the comments below.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>Now, a little code would be nice to flesh this all out.  So, this is what I’m currently using: </p>\n<p>First, the scripts and pre-commit sections from my package.json file: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng lint --type-check&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;pre-commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lint&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>And then the tslint that I put with my NgRX code: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;tslint-immutable&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;rulesDirectory&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;../../../node_modules/codelyzer&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* New rules to enable immutable checks */</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;typedef&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"keyword\">true</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"string\">&quot;call-signature&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;arrow-call-signature&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;parameter&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;arrow-parameter&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;property-declaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;variable-declaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;member-variable-declaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;object-destructuring&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;array-destructuring&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;readonly-keyword&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;readonly-array&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"keyword\">true</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;ignore-local&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;no-let&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;no-any&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">/* existing rules follow */</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "functional",
                "typescript",
                "tslint"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-implement-angular-routing/",
            "url": "http://davembush.github.com/how-to-implement-angular-routing/",
            "title": "How to Implement Angular Routing",
            "date_published": "2017-07-18T10:30:23.000Z",
            "content_html": "<p>In the old world where all of our pages were on the server and every change on the client side required a full round trip to the server, each page was a unique URL on the server.  In the SPA world, we only load one “Page” from the server and the client takes care of making it look like we have moved from one page to another. </p>\n<p>When done well, we can create pages that reuse existing content on the screen causing a minimal screen refresh while still allowing the user to link to a specific “Page” in our application. </p>\n<p>These “Pages” are called “Routes”  As in, here is the route to some code I want to execute. <figure><img src=\"/uploads/2017/07/2017-07-18.png\" title=\"How to Implement Angular 2+ Routing\"> Photo via <a href=\"//visualhunt.com/re/9589c4\">Visual Hunt</a></figure></p>\n<span id=\"more\"></span>  Sounds pretty cool.  But there is a down side that shows up every time someone tries to do this for the first time.  You won’t see this problem until the first time you try to deploy your code because the development server handles this issue for you. \n\n<p>The problem is this.  When a server receives a request from the browser, it tries to find that file on the server.  If it doesn’t exist, the server returns a 404 error.  File not found. </p>\n<p>Most servers provide ways of circumventing this issue by providing rules.  Essentially, you write a server rule that says, “If the browser ask for a file that doesn’t exist, send them back index.html instead.”  You may need to provide exceptions or otherwise refine the rule if your server is also rerouting other traffic. If you are running on an IIS server, <a href=\"/asp-net-angular-js-html5mode/\">I wrote instructions for how to take care of this issue</a> for AngularJS (1.x).  The instructions work for any client side framework that implements routing. </p>\n<p>Assuming you have that end of things working correctly, here are the steps to get basic routing working in your Angular application.</p>\n<h2 id=\"Define-Your-Routes\"><a href=\"#Define-Your-Routes\" class=\"headerlink\" title=\"Define Your Routes\"></a>Define Your Routes</h2><p>While we could easily define our routes in app.module.ts, the code we write will be much easier to maintain if we create a separate module file named app-routes.module.ts.  So to start, create an app-routes.module.ts file right next to your app.module.ts file.  You can do this with the Angular CLI by typing the following in the command line from within the src&#x2F;app directory: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g module app-routes</span><br></pre></td></tr></table></figure>\n\n<p>When you create a module with the Angular CLI, it will put it in a sub-directory.  In this case, it created an app-routes sub-directory.  We want it next to our app.module.ts file.  So, now we need to move the module up a directory and remove the app-routes directory. </p>\n<p>Open up the file, it has some stuff in it that we don’t need.  Remove the CommonModule references and the declarations section of the @NgModule decorator. </p>\n<p>In this new file, you will create an empty Routes array, called routes and decorate the class with @NgModule </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutesModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You need to also import Routes and while you are doing that, you might as well import RouterModule because you are going to need that soon too. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">RouterModule</span>, <span class=\"title class_\">Routes</span>&#125; <span class=\"keyword\">from</span> ‘<span class=\"meta\">@anguler</span>/router’; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutesModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Next, in your app.modules.ts file, import AppRoutesModule using both the TypeScript import and as part of the imports section of the @NgModule decorator.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">AppRoutesModule</span>&#125; <span class=\"keyword\">from</span> ‘./app-routes.<span class=\"property\">module</span>’;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  …,</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">  …,</span><br><span class=\"line\">  <span class=\"title class_\">AppRoutesModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We really haven’t done anything useful yet, we’ve just setup some boilerplate code that will compile so we won’t have to think about it any more. </p>\n<p>Now, back to the app-routes.module.ts file. </p>\n<p>Each element in our Routes array defines a specific route in our system relative to the parent route it is a part of.  At the top level the parent route would be the root of the application. </p>\n<p>Here are the properties that are available to us:</p>\n<h3 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h3><p>The path property allows us to specify what path, or URL, will load this route.  If you want the component to load for any path, use ‘<strong>’ as the value.  If you want the component to load for the root element, use ‘’ for the path and specify pathMatch: ‘full’ as another property.  You can also use the value ‘</strong>’ to mean, “match anything.”  We typically use ** to match what would typically be thought of as 404 errors.  For this to work correctly, it should be the last element in your top most route definition.</p>\n<h3 id=\"pathMatch\"><a href=\"#pathMatch\" class=\"headerlink\" title=\"pathMatch\"></a>pathMatch</h3><p>As we’ve already mentioned, pathMatch should be ‘full’ to match ‘’ as the exact path.  But you can also give this value ‘prefix’ to tell it to match any path that starts with the value.  You only need to specify this value if you want to use ‘full’. </p>\n<p>It should also be noted that this value only evaluates the part of the path you are in.  If you use this in a child path, it won’t match the whole path, but only the part that is in the child.</p>\n<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a>component</h3><p>Component specifies what component should get loaded when the path is matched.</p>\n<h3 id=\"children\"><a href=\"#children\" class=\"headerlink\" title=\"children\"></a>children</h3><p>The children property allows us to specify an array of child paths.</p>\n<h2 id=\"Route-Components\"><a href=\"#Route-Components\" class=\"headerlink\" title=\"Route Components\"></a>Route Components</h2><p>Since our routes will need components, let’s start by creating several components so that we can illustrate routing. </p>\n<p>But first, a short word about how we organize our code. </p>\n<p>In many demos online, the tendency is to put all of our components right under the app directory.  But, in larger applications, I’ve found that it makes a lot more sense to create a route directory under the app directory that we place each of our routes in. </p>\n<p>Now, you might think that we would want to place our child routes as child directories under the routes they are a part of, but the problem with this is that we often have child components in our routes.  How do we know which directory represents a child route and which represents a child component? </p>\n<p>No.  </p>\n<p>What we really want to do is place even the components that represent child routes right under our routes directory.  So, say we have a Page1 route and there is a SubPage route that is a child of Page1.  To make it clear, we put SubPage in a directory named page1.sub-page. </p>\n<p>As for components that are common to multiple pages, we place those in a components directory which is right under the app directory.  This keeps our directories well organized and the code neatly organized as well. </p>\n<p>The next obvious thing that we need to do is that we need to create a routes directory.  Do that now. </p>\n<p>Now, at the command line, inside the new routes directory, execute the following Angular CLI commands </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g component page1</span><br><span class=\"line\">ng g component page2</span><br><span class=\"line\">ng g component page1-subpage</span><br></pre></td></tr></table></figure>\n\n<p>As you executed each command, it should have created a directory for each component with the corresponding css, html, ts and spec files.  Then it updated the app.module.ts file for you so that the components are available for use in the system. </p>\n<p>You may also notice that we created the component as page1-subpage instead of page1.subpage.  The reason for this is that the CLI doesn’t like period separation of file names.  Now, the next thing we are going to do is change the directory name to page1.subpage.  You will also need to change the TypeScript import line that references this directory in your app.module.ts file. </p>\n<p>Now that we have components to page to, let’s create our route definitions.  Back to the Routes array in our app-routes.module.ts file. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: ‘page1’,</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: ‘’,</span><br><span class=\"line\">    <span class=\"attr\">pathMatch</span>: ‘full’,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: ‘<span class=\"title class_\">Page1Component</span>’ &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: ‘subpage’,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Page1SubpageComponent</span></span><br><span class=\"line\">  &#125;]&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: ‘page2’,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"title class_\">Page2Component</span></span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>The first definition may look a bit odd.  We are setting up a route to page1, but the route is the children.  Then in the children we define a route to ‘’.  This is where the Page1Component is specified as the component we want to load. </p>\n<p>You will also note that we specified <code>pathMatch: &#39;full&#39;</code> for the Page1Component.  This is because we only want this component to be loaded when the child path is empty. </p>\n<p>Using this definition, everything loads into the top level router-outlet.  If we placed Page1Component at the same level as we defined the page1 path, then Angular would expect to have a router-outlet in Page1Component where Pag1SubpageComponent would be loaded. </p>\n<p>Needless to say, you need to be careful how you define your routes. </p>\n<p>Next, you will need to import the three components using the TypeScript import statement. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Page1Component</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./routes/page1/page1.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Page2Component</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./routes/page2/page2.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Page1SubpageComponent</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./routes/page1.subpage/page1-subpage.component&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Now that everything is defined, we just need to tell Angular where we want these components to show up.  For right now, open the app.component.html file and remove everything that is there and add the router-outlet component. </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Now, <code>router-outlet</code> is a component that is defined in the RouterModule, so we need to import that in the imports section of our AppRoutesModule.  But we don’t just import the RouterModule, we use RouterModule.forRoot() and pass in the route array we just defined into forRoot(). </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutesModule</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>There is one final tweak that we need to make to our route definition.  Right now, if you go to the root of the application, there isn’t a component defined for it.  To fix this, we are going to add the following definition at the top of  our routes: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  path<span class=\"punctuation\">:</span> &#x27;&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  redirectTo<span class=\"punctuation\">:</span> &#x27;page1&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  pathMatch<span class=\"punctuation\">:</span> &#x27;full&#x27;</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>You need <code>pathMatch: &#39;full&#39;</code> to tell the router to only match this rule when the path is ‘’ exactly, just like we did with the Page1Component in the children list.  Otherwise, it will match everything. </p>\n<p>The <code>redirectTo: &#39;page1&#39;</code> part tells it to redirect to the page1 path when this rule is true.</p>\n<h2 id=\"Lazy-Loading\"><a href=\"#Lazy-Loading\" class=\"headerlink\" title=\"Lazy Loading\"></a>Lazy Loading</h2><p>I realize that I still need to show you how to navigate to routes in your application, but first let’s look at lazy loading the routes. </p>\n<p>In the past, when building a Single Page Application, the custom was to load all of the JavaScript code we needed for the page up front.  But, if you have multiple pages in your application, some of those may never be needed by your user.  So, what are we doing loading stuff that will never get used? </p>\n<p>No, it is better to load only what we need when we need it.  While it might take longer if you totaled up each load, the user perceives the experience as faster.  Therefore what we want to do is to make each of our pages load as we need them. </p>\n<p>To do this, we need to create a module for each of the components that represent our top level routes.  We want to import modules and services into the module that is closest to where we need them.  This is why.  By only importing things where we need them, Angular can create the smallest package necessary all up and down the dependency tree. </p>\n<p>To make things easy and to do them the way you would have done them if you had done it this way to begin with, let’s delete all of the sub-directories under routes.  It’s OK.  We aren’t losing any work that we can’t quickly get back.  We haven’t added any code to these routes yet. </p>\n<p>At the command line, navigate to the routes directory and then type in the following Angular-CLI commands:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g module page1</span><br><span class=\"line\">ng g component page1</span><br><span class=\"line\">ng g module page1-subpage</span><br><span class=\"line\">ng g component page1-subpage</span><br><span class=\"line\">ng g module page2</span><br><span class=\"line\">ng g component page2</span><br></pre></td></tr></table></figure>\n\n<p>And then, just like we did the first time, rename the page1-subpage directory to page1.subpage. </p>\n<p>Now, go to the app.modules.ts file and remove the references to the Page1, Page2, and Page1Subpage components anywhere you see them. </p>\n<p>Do the same thing in the app-routes.module.ts file. </p>\n<p>Now, the way we define our routes changes slightly.  We will still need the redirect route, but everything else changes. </p>\n<p>The key to making this work is the property <code>loadChildren</code>, which is a string in the format of: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;pathToModule#ModuleClassName&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>We’ll work from the top down.  Change the routes array in app-routes.module.ts to look like this: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">redirectTo</span>: <span class=\"string\">&#x27;page1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">pathMatch</span>: <span class=\"string\">&#x27;full&#x27;</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;page1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>: <span class=\"string\">&#x27;./routes/page1/page1.module#Page1Module&#x27;</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;page2&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>: <span class=\"string\">&#x27;./routes/page2/page2.module#Page2Module&#x27;</span></span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>When we try to access something from page1, it will load the Page1Module and try to resolve it from there.  When we try to access something from page2, it will load the Page2Module.  Both of these happen during run time. </p>\n<p>Next, go to page1.module.ts and, import RouterModule and add the following to the imports section of @NgModule.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forChild</span>([&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">pathMatch</span>: <span class=\"string\">&#x27;full&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"title class_\">Page1Component</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;subpage&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>: ‘../page1.<span class=\"property\">subpage</span>/page1-subpage.<span class=\"property\">module</span>#<span class=\"title class_\">Page1SubpageModule</span>’</span><br><span class=\"line\">&#125;]),</span><br></pre></td></tr></table></figure>\n\n<p>Next move over to page2 and do something similar.  Since page2 doesn’t have a sub-route, you only need, one route. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forChild</span>([&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">pathMatch</span>: <span class=\"string\">&#x27;full&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"title class_\">Page2Component</span></span><br><span class=\"line\">&#125;]),</span><br></pre></td></tr></table></figure>\n\n<p>And again, similarly for page1-subpage. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forChild</span>([&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">pathMatch</span>: <span class=\"string\">&#x27;full&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"title class_\">Page1SubpageComponent</span></span><br><span class=\"line\">&#125;]),</span><br></pre></td></tr></table></figure>\n\n<p>If you haven’t already, move your command-line prompt back to the root of the project and type</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<p>To start the server and compile your code.  If everything compiles, you should see 3 chunk files along with the other files we saw when we compiled the code without lazy loading. One each for each of the routes. </p>\n<p>Run the app in your browser now to make sure it works correctly. </p>\n<p>See how easy that was?  It isn’t really that much harder than specifying the routes like we did the first time, but we get huge benefits in performance.</p>\n<h2 id=\"Passing-Parameters\"><a href=\"#Passing-Parameters\" class=\"headerlink\" title=\"Passing Parameters\"></a>Passing Parameters</h2><p>The last thing you need to know about is how to pass parameters.  You would normally do this when you are coming from an existing list of items.  Each item has some sort of unique identifier.  We click some link and that takes us to another page to show details or to edit the content.  For our purposes here, it doesn’t matter. </p>\n<p>To specify that a route takes a parameter, use colon notation: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">path</span>: <span class=\"string\">&#x27;detail/:id&#x27;</span> </span><br></pre></td></tr></table></figure>\n\n<p>Angular knows it is a parameter when you use a URL to get to it because of the location.</p>\n<h2 id=\"Retrieving-Parameters\"><a href=\"#Retrieving-Parameters\" class=\"headerlink\" title=\"Retrieving Parameters\"></a>Retrieving Parameters</h2><p>Let’s say you have a component that represents a route with a parameter.  For that to be useful, you’ll need to pull the parameter out of the route information. </p>\n<p>To do this, you’ll need to inject <code>ActivatedRoute</code> into the component.  Then when you need the parameter(s) you can use: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route.<span class=\"property\">params</span>.<span class=\"title function_\">take</span>(<span class=\"number\">1</span>).<span class=\"title function_\">subscribe</span>(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">params</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// Use params[&#x27;id&#x27;], where ‘id’ is the name</span></span><br><span class=\"line\">  <span class=\"comment\">// we gave the parameter in the path.</span></span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Route-Navigation\"><a href=\"#Route-Navigation\" class=\"headerlink\" title=\"Route Navigation\"></a>Route Navigation</h2><p>Now that we have routes in place, we need to discuss how to navigate from one route to another.  The temptation, having just used URLs to go from one to the other, would be to use hyperlinks and put the information in the href attribute. </p>\n<p>No doubt, you could probably get that to work, but the main problem with using that method is that there is no safeguards to make sure that the URL you use to navigate when you are developing will work when you move the site to another environment. </p>\n<p>The reason for this is that we have to set the base href for the site.  During development this is normally ‘&#x2F;’.  But when you go to production, it could be some sub directory. </p>\n<p>Also, because of this base href, every page&#x2F;route we land on is still relative to that base.  This means that every route we want to navigate to would have to be hard wired to the base of the site, and again, that’s assuming that the site will always be in the same relative location when it is deployed. </p>\n<p>Now, if we can’t using a regular URL to navigate, what do we use instead?</p>\n<h3 id=\"routerLink\"><a href=\"#routerLink\" class=\"headerlink\" title=\"routerLink\"></a>routerLink</h3><p>You use the routeLink directive added to your anchor tag.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/page1&#x27;]&quot;</span>&gt;</span>go here<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>This may look a little different from what you expected, so let’s break this down. </p>\n<p>The routerLink directive takes an array.  Since we can’t pass an array as a string, the only way we can pass it is by evaluating it at run time.  Remember, the square bracket syntax is an indication to the Angular compiler that what we are assigning is something that should be evaluated.  Typically this would be pointing to a function or variable in our TypeScript code.  In this case, we are pointing to a literal array.  Everything between the opening and closing quotes is JavaScript. </p>\n<p>As for the actual parameter, the string in the single element array works much like you would use a URL.  The forward slash says to start at the root of the web application (instead of the root of the domain like a URL would.)  And the page1 is the route we’ve already defined.  If you leave the forward slash off, it is relative to the current route. </p>\n<p>But what about passing parameters? </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/page1&#x27;, someVariable]&quot;</span>&gt;</span>go here<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Each comma delimited value represents a segment of your route.</p>\n<h3 id=\"Router-navigate\"><a href=\"#Router-navigate\" class=\"headerlink\" title=\"Router.navigate()\"></a>Router.navigate()</h3><p>The other way you might want to cause navigation to a page to occur is by using the navigate() method hanging off the Router class.  Using dependency injection, you inject the Router into the class that needs to use it and then use that instance to call navigate().  The parameter you pass in looks very similar to what you used for routerLink. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.<span class=\"title function_\">navigate</span>(‘/page1’,someVariable);</span><br></pre></td></tr></table></figure>\n\n<p>Yes, both routerLink and Router.navigate() both support URL like references using ‘.&#x2F;path’ or ‘..&#x2F;path’.</p>\n<h2 id=\"Where-Am-I-Now\"><a href=\"#Where-Am-I-Now\" class=\"headerlink\" title=\"Where Am I Now?\"></a>Where Am I Now?</h2><p>The last part of routing you will commonly need to know about is detecting what the current route is.  Once again this will require you to inject the Router object into the component that needs the information.  Once you have the router object, you can use code like this: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.<span class=\"property\">routerState</span>.<span class=\"property\">snapshot</span>.<span class=\"property\">url</span>;</span><br></pre></td></tr></table></figure>\n\n<p>This will get the current route url.  I normally grap this as part of listening for the router’s NavigationEnd. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"property\">events</span></span><br><span class=\"line\">  .<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> arg <span class=\"keyword\">instanceof</span> <span class=\"title class_\">NavigationEnd</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selectedTab</span> = router.<span class=\"property\">routerState</span>.<span class=\"property\">snapshot</span>.<span class=\"property\">url</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">selectedTab</span>;</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">subscribe</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Guards\"><a href=\"#Guards\" class=\"headerlink\" title=\"Guards\"></a>Guards</h2><p>Guards control access to our routes.  What happens if you have a route that only certain people should have access to.  Like an admin page.  Sure, you could leave the link off so no one can click the link to get to the page, but that doesn’t prevent someone from pasting the link to the forbidden page into the address bar of the browser and getting there anyhow. </p>\n<p>In Angular, we have four kinds of guards and two ways of creating them. </p>\n<p>The four types of guards are:</p>\n<ul>\n<li>CanActivate</li>\n<li>CanActivateChild</li>\n<li>CanDeactivate</li>\n<li>CanLoad</li>\n</ul>\n<p>If you follow my advice and always lazy load your routes, than the two you will most often use are CanLoad and CanDeactivate.  CanLoad provides rules for lazy loading a module.  CanDeactive provides rules for leaving a route. </p>\n<p>If you decide to bundle routes together, then you may also need CanActivate and CanActivateChild.  CanActivate is exactly what it sounds like.  Can I activate this route?  CanActivateChild would go on a route definition that has a children’s collection.  This rule determines if I can activate the children. </p>\n<p>To use Guards in our application, the first thing we need to do is to define them.  The easiest way to define them is as a function that returns a boolean value, a boolean Observable, or a boolean Promise.  For our purposes here, we will just return a boolean value.  But when you have some asynchronous call you need to make to determine if we should return true or false, you’ll want to return an Observable or a Promise.  I favor Observables. </p>\n<p>The definition for a Guard rule looks like this: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [&#123;</span><br><span class=\"line\">    <span class=\"attr\">provide</span>: <span class=\"string\">&#x27;ruleNameHere&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">useValue</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Then, to use the rule, you assign the appropriate rule the name of the rule. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;page1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">canLoad</span>: [<span class=\"string\">&#x27;ruleNameHere&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>: <span class=\"string\">&#x27;./routes/page1/page1.module#Page1Module&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Notice that canLoad, as well as the other guard properties, takes an array.  This allows you to apply multiple rules to a route. </p>\n<p>The other way of defining a route is as a class that implements an interface, or multiple interfaces that include CanActivate, CanActivateChild, CanDeactivate, and CanLoad.  You them implement the corresponding functions in your class. </p>\n<p>Now, to include the rule you use the Class rather than a string: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;page1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">canLoad</span>: [<span class=\"title class_\">RuleClassHere</span>],</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>: <span class=\"string\">&#x27;./routes/page1/page1.module#Page1Module&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"But-wait-there’s-more-…\"><a href=\"#But-wait-there’s-more-…\" class=\"headerlink\" title=\"But wait, there’s more …\"></a>But wait, there’s more …</h2><p>Believe it or not, there is even more to routing than we’ve discussed here.  But we’ll leave that for another day or this post will turn into a <a href=\"https://davembush.github.io/get-started-with-angular/\">book</a>. </p>\n",
            "tags": [
                "angular",
                "routing"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-be-an-awesome-programmer/",
            "url": "http://davembush.github.com/how-to-be-an-awesome-programmer/",
            "title": "How To Be an Awesome Programmer",
            "date_published": "2017-07-11T10:30:48.000Z",
            "content_html": "<p>It isn’t what you think.  Being an awesome programmer, or being awesome at anything has a lot less to do with any given topic: programming, boxing, writing.  It has a lot to do with being a healthy human.  So, the simple answer to the question of “How to be an awesome programmer” is simply, “be healthy.” </p>\n<p>But what does healthy look like? </p>\n<p>I really couldn’t tell you what got me started, but I’ve been reading an experimenting with Brain Hacks, Diet, Exercise, and Social Skills for over a year now.  Turns out, they are all related. Now, most of my audience has less than 5 years of experience.  I can say that because most of the programming population has less than 5 years of experience, so I’m going on the assumption that the people who read this blog, are a small representation of the global population.  Many symptoms I will reference are going to be things you may not suffer with … yet.  If you fall in that group, think of this post as a letter from your older self.  I was young once too.  I remember, I thought I was immune to some of these issues and if I wasn’t, there wasn’t much I could do. </p>\n<p>But we’ve learned SO much in the last 20 years.  Much of what we’ve thought was “normal” really isn’t.  We are just proverbial frogs in a pan of water being heated to death. <figure><img src=\"/uploads/2017/07/2017-07-11.jpg\" title=\"How To Be an Awesome Programmer\"> Photo via <a href=\"//visualhunt.com/re/4bde52\">VisualHunt.com</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h2><p>Now, the stuff I’m going to talk about in here is what I’ve learned and from my experience.  I’m a programmer.  Not a doctor, Jim.  I write this in the hopes that it helps at least one other person.  But, I also leave the research and due diligence to you.  Just like I could give you some general programming guidance, but I would expect you to dig for more details.  Not that I do that intentionally when I write about programming.  Just be aware that I’m definitely not giving details here. </p>\n<p>Also, there is this funny little thing called “reactance” that causes us to want to believe that what we currently believe is the right way.  So, I’m going to ask you a simple little question.  It is the one I try to implement every time I hear a new idea.  “What if they are right?  What if I am wrong?” </p>\n<p>The truth is, just because you are used to living a certain way, doesn’t make it the right way.</p>\n<h2 id=\"Brain-Health\"><a href=\"#Brain-Health\" class=\"headerlink\" title=\"Brain Health\"></a>Brain Health</h2><p>So, as I’ve thought about what I want to write, I could literally start from just about any angle.  The cool thing about our bodies is that they are SO intertwined.  When one system gets out of whack, other systems in the body fail as well.  But I wanted to start with Brain Health because if you can hack that, it seems most of the other stuff we should be doing becomes quite a bit easier.</p>\n<h3 id=\"Sleep\"><a href=\"#Sleep\" class=\"headerlink\" title=\"Sleep\"></a>Sleep</h3><p>So, our first stop in brain health is sleep.  There are a lot of hacks that you can implement to get better sleep, but if you are going to be late and getting up early so that you are in bed for less than 8 hours, you are already starting out in a bad place.  I’ve always been pretty good at sleeping.  But there was a time when I was trying to cram more useful day out of my 24 hours so I was getting up an hour earlier than I currently do. </p>\n<p>Meanwhile, I developed aching shoulder muscles that I caulked up to a change in office chairs. </p>\n<p>Then I changed sleep habits.  I decided I didn’t really need that extra hour.  Almost immediately, my shoulders stopped aching.</p>\n<h3 id=\"Food\"><a href=\"#Food\" class=\"headerlink\" title=\"Food\"></a>Food</h3><p>Talking about food is like talking about religion.  People have some very strongly held beliefs.  I’m guessing you do too. </p>\n<p>Now, before I try to break through some myths, let’s address where our current beliefs about how to eat “right” come from. </p>\n<p>When I was a kid, we had the “4 square meal.”  Equal portions of different categories of food.  Then, it was a REALLY big deal when USDA came out with the “Food pyramid.”  And now we have a “food plate.” </p>\n<p>How can you believe that any one of those is “right” when they’ve changed so often?  Either our research is flawed, or something else is influencing the changes.  They sure aren’t reliable.  And, we want to believe them because an “authority” says they are. </p>\n<p>Let me tell you something about “authorities.”  They aren’t all knowing and sometimes, they are wrong. </p>\n<p>Another thing that sticks with me is something a psychologist (employer) of mine told me.  “The schools are at least 20 years behind the research.”   WOW!  This means that your doctor is recommending things he learned 20+ years ago.  And it gets worse.  With lawsuits as prevalent as they are and insurance companies in control, few doctors are going to tell you what the current research says about what you should be eating, even if they know.  The “system” moves slowly. </p>\n<p>Now, it doesn’t take long to find information on the Internet that supports the following basic food truths:</p>\n<ol>\n<li>Stay away from sugar</li>\n<li>Stay away from carbs</li>\n<li>Eat more fat</li>\n</ol>\n<p>You’ve heard it before.  Probably from some diet thing.  But, did you know that eating primarily carbs and sugars, as we’ve been doing now for over a generation, also makes us dumber?! </p>\n<p>Now, I’ve been on a basically ketogenic diet for several years now.  Up until recently, I struggled with the temptation of eating foods on the naughty list.  There are two things that turned that around for me. </p>\n<p>First, I realized that the foods that held the strongest temptation had some emotional trigger or event tied to them.  But, in truth, I didn’t REALLY like the food. </p>\n<p>Second, I increased the amount of fat in my diet.  Now, I crave vegetables.  And as an added bonus, I don’t eat as many calories and I’m almost never hungry. </p>\n<p>Now, what does this have to do with brain health?  </p>\n<p>It turns out that your brain is mostly fat.  And not just any fat, but the kind of fat you’ll find in butter, coconut oil, olive oil, and meat.  There is still “bad fat” but it is the fat that is manmade.  Margarine, and corn oil for example.  Anyhow, if you remove good fat from your diet, your brain doesn’t function as well. </p>\n<p>In fact, there are studies that indicate that a lot of brain disease is caused by a lack of fat in our diets. </p>\n<p>Carbs are bad.  Fats are good.  Check it out for yourself.</p>\n<h3 id=\"Exercise\"><a href=\"#Exercise\" class=\"headerlink\" title=\"Exercise\"></a>Exercise</h3><p>The next thing that heavily influences brain health is exercise.  Yes, it helps for dieting too.  But, that’s not the only benefit.  And only certain kinds of exercise is beneficial to exercise.  But the simple act of walking for 30 minutes every day 6 days a week, has several brain healthy benefits:</p>\n<ol>\n<li>Improves confidence</li>\n<li>Helps fight depression</li>\n<li>Improves sleep (which also helps your brain)</li>\n<li>Reduces stress</li>\n<li>Generally improves cognition.</li>\n</ol>\n<p>It is a simple thing to do that has so many benefits that using the excuse, “I’m too busy to exercise.” Is just that.  An excuse.</p>\n<h3 id=\"Cortisol-and-Oxytocin\"><a href=\"#Cortisol-and-Oxytocin\" class=\"headerlink\" title=\"Cortisol and Oxytocin\"></a>Cortisol and Oxytocin</h3><p>Cortisol is the hormone that is triggered by stress.  It isn’t all bad.  But the amount we generally live with is bad.  The thing about Cortisol is that it can wreck your diet.  You’ve been trying to shed pounds but you’ve reached a floor.  It could be you are under too much stress.  Maybe because you aren’t getting enough sleep.   Or maybe you’ve just forgotten how to relax.  Or, it could be you aren’t eating correctly. </p>\n<p>Oxytocin, on the other hand, is the “feel good” drug.  There are a lot of ways to increase this and the great news is, no one has yet run a study that has concluded you can get too much. </p>\n<p>And once again, what is generally bad for our general health is directly linked to our brain health.</p>\n<h3 id=\"Breath\"><a href=\"#Breath\" class=\"headerlink\" title=\"Breath\"></a>Breath</h3><p>This one kind of surprised me.  Just doing nothing more than focusing on your breath for 10 minutes a day, lowers cortisol and has many other health benefits. </p>\n<p>Sometimes you’ll see this phrased as “meditation” which kind of freaks some people out.  So, don’t meditate.  Just go to a quiet place and focus on breathing.  If you want to move it up a notch focus on breathing and relaxing on the exhale. 10 minutes a day.  Who doesn’t have time for that?</p>\n<h2 id=\"Ask-Good-Questions\"><a href=\"#Ask-Good-Questions\" class=\"headerlink\" title=\"Ask Good Questions\"></a>Ask Good Questions</h2><p>Now, when I mention some of my practices to people I work with, I’m invariably met with, “I could never do that.”  Which reminds me of what my dad always said, “Can’t went to the poor house and died.” </p>\n<p>The point is, if you think you can’t, you surely won’t.  I won’t go so far as to say, “If you think you can or you think you can’t, in either case you are right.”  But, thinking you can will lead you to asking the right question and will at least get you closer to “there” where ever that may be. </p>\n<p>Here are some questions for you to ponder: </p>\n<ul>\n<li>How can I get the right amount of sleep? </li>\n<li>How can I get good quality sleep? </li>\n<li>What is keeping me from sleeping? </li>\n<li>How can I eat healthier? </li>\n<li>What foods will help me? </li>\n<li>What foods will hurt me? </li>\n<li>What in my environment needs to change?</li>\n</ul>\n<h2 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h2><p>I’d put resources here of stuff I’ve read.  But I want you to do the research.  If I give it to you, you are a lot less likely to put it into action. </p>\n<p>Instead, I want to ask you a few questions. </p>\n<p>Listen, I know you are reluctant to change.  I get that.  I really do.  But if you were to change even just a few of your habits, what might some of the benefits be for you? </p>\n<p>On a scale of 1 to 10, how likely are you to investigate some of the changes mentioned above? </p>\n<p>Why didn’t you rate it lower? </p>\n<p>Imagine you’ve investigated the changes and implemented them, what kind of impact would that have on your life? </p>\n<p>Why is that important to you? </p>\n<p>Now, what are you going to do about this next?</p>\n",
            "tags": [
                "brain",
                "health",
                "programmer"
            ]
        },
        {
            "id": "http://davembush.github.com/upload-an-image-as-a-file-in-angular/",
            "url": "http://davembush.github.com/upload-an-image-as-a-file-in-angular/",
            "title": "Upload an Image as a File in Angular",
            "date_published": "2017-07-04T10:30:08.000Z",
            "content_html": "<p>This past week, I needed to be able to upload an image in my application to the server as a file so that I could crop it and upload it. </p>\n<p>Now, uploading an image that you pulled up using the file upload control is relatively straight forward.  But, in our case, the image we want to be able to upload didn’t always come from the user’s file system.  This causes two problems. </p>\n<p>First, you can’t crop an image you retrieved from a different URL using the HTML Canvas because of Cross Origin restrictions and second, you can’t upload the file using the standard file upload mechanism because you didn’t get it from the file system. <figure><img src=\"/uploads/2017/07/2017-07-04.jpg\" title=\"Upload an Image as a File in Angular\"> Photo via <a href=\"//visualhunt.com/re/3bc74d\">Visual Hunt</a></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Image-to-Data-without-Canvas\"><a href=\"#Image-to-Data-without-Canvas\" class=\"headerlink\" title=\"Image to Data without Canvas\"></a>Image to Data without Canvas</h2><p>Now, the standard way of converting an Image to a data URL is to</p>\n<ul>\n<li>create a new Image,</li>\n<li>set the onload event handler to a function</li>\n<li>set the Image src attribute to the file</li>\n<li>in the onload function,<ul>\n<li>draw the image onto the canvas</li>\n<li>call canvas.toDataUrl(mimeType) to get the data url.</li>\n</ul>\n</li>\n</ul>\n<p>It is pretty trivial code: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span><br><span class=\"line\">context = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&#x27;2d&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> base_image = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">base_image.<span class=\"property\">src</span> = <span class=\"string\">&#x27;img/base.png&#x27;</span>;</span><br><span class=\"line\">base_image.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  context.<span class=\"title function_\">drawImage</span>(base_image, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dataUrl = canvas.<span class=\"title function_\">toDataURL</span>(<span class=\"string\">&#x27;image/jpeg&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But, the trouble starts when you use a URL that doesn’t originate from the file system, or the same domain as the application your are running. </p>\n<p>The trick is to read the image using an XMLHttpRequest for foriegn URLs and then use a FileReader object and call readAsDataURL passing the result of the XMLHttpRequest.read. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">reader.<span class=\"property\">onloadend</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    reader.<span class=\"property\">onloadend</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// make sure the image is loaded before we go</span></span><br><span class=\"line\">    <span class=\"comment\">// after width and height;</span></span><br><span class=\"line\">    image.<span class=\"property\">src</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    image.<span class=\"property\">onload</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        image.<span class=\"property\">onload</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// do something with the new image here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    image.<span class=\"property\">src</span> = reader.<span class=\"property\">result</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">image.<span class=\"property\">onload</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    image.<span class=\"property\">onload</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    xhr.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        reader.<span class=\"title function_\">readAsDataURL</span>(xhr.<span class=\"property\">response</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, image.<span class=\"property\">src</span>);</span><br><span class=\"line\">    xhr.<span class=\"property\">responseType</span> = <span class=\"string\">&#x27;blob&#x27;</span>;</span><br><span class=\"line\">    xhr.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(action.<span class=\"property\">payload</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">File</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// won&#x27;t be using image.onload so we need to turn it off</span></span><br><span class=\"line\">    image.<span class=\"property\">onload</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    reader.<span class=\"title function_\">readAsDataURL</span>(action.<span class=\"property\">payload</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this triggers image.onload which triggers reader.readAsDataURL</span></span><br><span class=\"line\">    image.<span class=\"property\">src</span> = action.<span class=\"property\">payload</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now we can put the image using the data URL on the canvas and the canvas doesn’t know we got it from a foreign URL any more so we no longer get a cross origin URL. </p>\n<p>The entry point for this code is on line 27.  You see  that if we are working with a File, we just use the FileReader directly.  But if we are using http, we go through the XMLHttpRequest.</p>\n<h2 id=\"Fake-File-Upload\"><a href=\"#Fake-File-Upload\" class=\"headerlink\" title=\"Fake File Upload\"></a>Fake File Upload</h2><p>The only problem with this is that now we no longer have the file point, so if we want to upload the file, as a file, to the server we have come up with some way of creating a fake file object.  And believe it or not, that is a lot easier than you might think. </p>\n<p>You see, a File object is just a kind of Blob object.  So, all we really need to do is to create a Blob.  But, we have one additional issue.  Our image is in base 64 and we need to convert it to a binary byte array. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">b64toFile</span>(dataURI): <span class=\"title class_\">File</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// convert the data URL to a byte string</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> byteString = <span class=\"title function_\">atob</span>(dataURI.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// pull out the mime type from the data URL</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> mimeString = dataURI.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;:&#x27;</span>)[<span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;;&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Convert to byte array</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ab = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBuffer</span>(byteString.<span class=\"property\">length</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ia = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(ab);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; byteString.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        ia[i] = byteString.<span class=\"title function_\">charCodeAt</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create a blob that looks like a file.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([ab], &#123; <span class=\"string\">&#x27;type&#x27;</span>: mimeString &#125;);</span><br><span class=\"line\">    blob[<span class=\"string\">&#x27;lastModifiedDate&#x27;</span>] = (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()).<span class=\"title function_\">toISOString</span>();</span><br><span class=\"line\">    blob[<span class=\"string\">&#x27;name&#x27;</span>] = <span class=\"string\">&#x27;file&#x27;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// Figure out what extension the file should have</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(blob.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;image/jpeg&#x27;</span>:</span><br><span class=\"line\">            blob[<span class=\"string\">&#x27;name&#x27;</span>] += <span class=\"string\">&#x27;.jpg&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;image/png&#x27;</span>:</span><br><span class=\"line\">            blob[<span class=\"string\">&#x27;name&#x27;</span>] += <span class=\"string\">&#x27;.png&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// cast to a File</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;<span class=\"title class_\">File</span>&gt;blob;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You can use the resulting “File” anywhere you would use a File you had retrieved from the file system.</p>\n<h2 id=\"Upload-via-Http\"><a href=\"#Upload-via-Http\" class=\"headerlink\" title=\"Upload via Http\"></a>Upload via Http</h2><p>The last bit of this is that we need to upload this via the Http service.  This is going to be harder to show with code because it depends on what you need to do. </p>\n<p>In my case, I needed to just upload the file, so the post was pretty straight forward.  I used an Http.post() and passed the returned “file” as the data parameter. </p>\n<p>But, you may need to upload it by wrapping the file in a Form object and specifying varying headers.</p>\n<h2 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The End\"></a>The End</h2><p>I know it is a relatively short post, but I hope it is helpful to someone.  There are a lot of examples out there of how to do this in JavaScript and jQuery, but I was unable to find anything that was specific to TypeScript and Angular.</p>\n",
            "tags": [
                "angular",
                "images",
                "file upload"
            ]
        },
        {
            "id": "http://davembush.github.com/real-world-rxjs-marble-testing-revealed/",
            "url": "http://davembush.github.com/real-world-rxjs-marble-testing-revealed/",
            "title": "Real World RxJS Marble Testing Revealed",
            "date_published": "2017-06-13T10:30:25.000Z",
            "content_html": "<p>There must be some evil plot to keep this information a secret because whenever I search for how to use RxJS Marble Testing all I see is how to use it to write tests for RxJS.  Well I’ve finally “cracked the code.” </p>\n<p>In this article you’ll learn the basics of RxJS Marble Testing and how to apply Marble Testing to your own code.</p>\n<figure>![](/uploads/2017/06/2017-06-13.jpg \"Real World RxJS Marble Testing Revealed\") Photo via [Visualhunt](//visualhunt.com/re/9662e0)</figure>\n\n<span id=\"more\"></span> \n\n<h2 id=\"It-All-Started-When-…\"><a href=\"#It-All-Started-When-…\" class=\"headerlink\" title=\"It All Started When …\"></a>It All Started When …</h2><p>It all started about a month ago when I needed to write a unit test for code that updated the screen once every 15 seconds. Writing a test that would simulate the clock moving forward 15 seconds in old school JavaScript would have been pretty easy.  But I had written my code using RxJS instead of the old school <code>setTimeout()</code> method we’ve been using for this kind of feature in the past. </p>\n<p>Specifically, I had used <code>Observable.timer(0, 15000);</code> </p>\n<p>My first attempt to write tests for this were based on the assumption that, under the hood, <code>setTimeout()</code> was still being used. Just a simple matter of mocking the clock and advancing the timer. Right?</p>\n<p>Wrong!</p>\n<p>Then my initial search brought me to the NgRX 4 way of writing tests for Observables. Only, I didn’t find that out until I had written some code that didn’t work. </p>\n<p>Eventually, I found this thing called Marble Testing. But, as I’ve already mentioned, all the examples I’ve found for how to write test are for written test for the various methods available in the RxJS library. </p>\n<p>I’m guess, if you are still reading, I’ve described your journey as well.</p>\n<h2 id=\"Assumptions\"><a href=\"#Assumptions\" class=\"headerlink\" title=\"Assumptions\"></a>Assumptions</h2><p>For the remainder of this article, I’m going to assume you know how to use RxJS. If you don’t there is already a lot of good information available on that topic that you should easily be able to find by using one of the search engines.</p>\n<p>I’m also going to describe how to use marbles in your tests using Jasmine. I use Jasmine because that is the engine all the frameworks that I use end up using. There are other tools that may or may not be better. But I have no reason to leave what everyone else has already picked as a defacto standard.</p>\n<h2 id=\"Marble-Basics\"><a href=\"#Marble-Basics\" class=\"headerlink\" title=\"Marble Basics\"></a>Marble Basics</h2><p>Since there is a lot of detail on the basics of using Marbles, I only plan on summarizing what you need to know here.  For more details, check out <a href=\"//github.com/ReactiveX/rxjs/blob/master/doc/writing-marble-tests.md\">the documentation</a>.</p>\n<h3 id=\"Create-Observables\"><a href=\"#Create-Observables\" class=\"headerlink\" title=\"Create Observables\"></a>Create Observables</h3><p>First, you can create either hot observables or cold observables. To do this, you’ll need to create an instance of <code>TestScheduler</code> and then you call either <code>createHotObservable()</code> or <code>createColdObservable()</code> passing a string that defines what you want your observables to do. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> testScheduler = <span class=\"keyword\">new</span> <span class=\"title class_\">TestScheduler</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> hotObservable = testScheduler.<span class=\"title function_\">createHotObservable</span>(hotMarbleString);</span><br><span class=\"line\"><span class=\"keyword\">const</span> coldObservable = testScheduler.<span class=\"title function_\">createColdObservable</span>(coldMarbleString);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Marble-Syntax\"><a href=\"#Marble-Syntax\" class=\"headerlink\" title=\"Marble Syntax\"></a>Marble Syntax</h3><ul>\n<li><code>&quot;-&quot;</code> time: 10 “frames” of time passage.</li>\n<li><code>&quot;|&quot;</code> complete: The successful completion of an observable. This is the observable producer signaling <code>complete()</code></li>\n<li><code>&quot;#&quot;</code> error: An error terminating the observable. This is the observable producer signaling <code>error()</code></li>\n<li><code>&quot;a&quot;</code> any character: All other characters represent a value being emitted by the producer signaling <code>next()</code></li>\n<li><code>&quot;()&quot;</code> sync groupings: When multiple events need to single in the same frame synchronously, parenthesis are used to group those events. You can group next values, a completion or an error in this manner. The position of the initial <code>(</code>determines the time at which its values are emitted.</li>\n<li><code>&quot;^&quot;</code> subscription point: (hot observables only) shows the point at which the tested observables will be subscribed to the hot observable. This is the “zero frame” for that observable, every frame before the <code>^</code> will be negative.</li>\n</ul>\n<p>The most simple of observables using marbles would look like this: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;a|&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>This would cause an observable event to fire right away and it would pass “a” as the data for the observable.  The observable would then end because the | comes next. </p>\n<p>In the case of the timer I was testing, I don’t need the data, I just need the “event” to fire so my code runs.</p>\n<h2 id=\"Marbles-as-Mocks\"><a href=\"#Marbles-as-Mocks\" class=\"headerlink\" title=\"Marbles as Mocks\"></a>Marbles as Mocks</h2><p>So far, I probably haven’t told you anything that you couldn’t already figure out by doing a basic search.  But, the question remains, how do we use this marble stuff in our own test? </p>\n<p>And the answer that no one seems to be talking about is that you use marbles to mock out the real observable just like you might create a mock object to replace a real object in any other test. </p>\n<p>In the case of the timer problem above, what I needed to do was to make sure that <code>Observable.timer(0, 15000);</code> returns an observable that was created with a marble instead of an observable created with the timer.  In Jasmine, we do that with <code>spyOn()</code> </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testScheduler = <span class=\"keyword\">new</span> <span class=\"title class_\">TestScheduler</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"title function_\">spyOn</span>(<span class=\"title class_\">Observable</span>, <span class=\"string\">&#x27;timer&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"property\">and</span></span><br><span class=\"line\">  .<span class=\"title function_\">returnValue</span>(testScheduler.<span class=\"title function_\">createHotObservable</span>(<span class=\"string\">&#x27;---a|&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>The rest of your code really doesn’t care what kind of observable it is, it will do whatever it is it has been coded to do. </p>\n<p>The only thing you need to do to make sure the observable and subscribes do their thing is to make sure you call <code>flush()</code> on the <code>TestScheduler</code> instance prior to running an <code>expect()</code> in your Jasmine test.</p>\n<h2 id=\"Other-Uses\"><a href=\"#Other-Uses\" class=\"headerlink\" title=\"Other Uses\"></a>Other Uses</h2><p>What I’ve shown so far takes care of my 15 second refresh issue. But now, what if I have an observable that expects data? For example, how would I write a test that uses an observable based on an AJAX request as a dependency? In Angular, this would be Http. </p>\n<p>This is actually very simple. The second parameter to either <code>createHotObservable()</code> or <code>createColdObservable()</code> is the data you want to send on to the subscribe when it hits the associated marble. You pass this in as an object literal. So, just to keep things simple. Say that when you hit the “a” marble, you want to pass the subscribe an object that has a first name and a last name. Your code might look something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testScheduler</span><br><span class=\"line\">  .<span class=\"title function_\">createHotObservable</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;-a|&#x27;</span>,</span><br><span class=\"line\">    &#123;<span class=\"attr\">a</span>: &#123;<span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Dave&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Bush&#x27;</span>&#125;&#125;</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n\n<p>By using this type of marble mocking, you could not just create unit tests, but you could also create End to End tests that use marbles to return consistent data rather than hitting the back end. Obviously, you would still need to write tests that ensure your back end is going to return the same type of data, but I see that as a separate issue from ensuring that the front end does everything it should do as a system. Anyhow, it is an option.</p>\n",
            "tags": [
                "angular",
                "RxJS",
                "Marble Testing"
            ]
        },
        {
            "id": "http://davembush.github.com/ngrx-store-coding-sanity-epiphany/",
            "url": "http://davembush.github.com/ngrx-store-coding-sanity-epiphany/",
            "title": "NgRX/Store Coding Sanity Epiphany",
            "date_published": "2017-06-06T10:30:44.000Z",
            "content_html": "<p>Maybe this is all obvious to you, but since I don’t see anyone talking about this when I search for “how to do NgRX” or the various variants, I thought I’d call it out in this weeks post.</p>\n<p>If you haven’t been following along, you’ll want to review <a href=\"/tags/ngrx/\">my previous posts on NgRX</a>.</p>\n<figure>![](/uploads/2017/06/2017-06-06.jpg \"NgRX/Store Coding Sanity Epiphany\")<figcaption>Photo credit: [spcbrass](//www.flickr.com/photos/spcbrass/394867154/) via [Visual Hunt](//visualhunt.com/re/cff786) / [ CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<p>If it isn’t clear yet, I’m still sorting out a lot of this Angular&#x2F;Redux&#x2F;NgRX stuff. But as I was working on my current project this week, I realized I have WAY too much code in my presentation layer.</p>\n<h2 id=\"The-Epiphany\"><a href=\"#The-Epiphany\" class=\"headerlink\" title=\"The Epiphany\"></a>The Epiphany</h2><p>I have two main screens I’m working on. As you read the articles on the Internet that explain how to use this pattern or the Redux pattern it was derived from, you’ll quickly learn that you want to work with a “Smart Component.” This component is kind of a traffic cop. It uses observables to listen to state change in your Store and it sends actions to, primarily, update the database and change the store’s state. From what I’ve been able to gather, the expectation is that a lot of the logic that would be needed to actually process the data is going to go in this smart component. The first screen I worked on, followed this basic pattern. This put a whole crap load of code in my smart component.</p>\n<p>On the second page, I kind of stumbled onto what I believe is a cleaner model. I realized that I was hanging onto data in my smart component that was also in my store. That seems kind of dumb. If all I need is in my store, why not just fire off an action to do whatever it is I want to do and have the @Effect grab the data from the store?</p>\n<p>This is why I ended up making my smart component listen to the observables and dispatch events to the store based on changes in my components. This includes things like button clicks. Any other processing that needs to take place takes place in either an @Effect or is called from an @Effect.</p>\n<p>I can’t describe for you how much cleaner my codebase is as a result! WOW!</p>\n<p>But, will it work on the first page the same as it works on the second page?</p>\n<h2 id=\"The-Test\"><a href=\"#The-Test\" class=\"headerlink\" title=\"The Test\"></a>The Test</h2><p>You see, there is a big difference between the first page and the second page. The first page is basically a search and list page. The second page is an edit page for an item. On the first page, I had multiple store entities for the various parts. I had an entity for the search fields. An entity for the search results. And others. Let’s just say my model isn’t very flat.</p>\n<p>The fact of the matter is, the second page that I created wasn’t really all that flat either. But because I started with the concept of not putting any logic in my smart component, it felt easier to manage.</p>\n<p>So, the first thing I wanted to do was to create a reducer for the page. All this reducer will do is distribute the action down into sub-reducers. This allowed me to keep all of my action code the same. The only thing that changes is that the directories for my sub-reducers and the @Effects, Actions and Interfaces that are associated with them go under my directory for my main Reducer and Model.</p>\n<p>I still have a bit of code that I’d like to clean up, but on the whole, I like this pattern much better than what I was doing before.</p>\n<h2 id=\"Advantages\"><a href=\"#Advantages\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>The main advantage to using this new architecture is that it simplifies and reduces testing considerations.</p>\n<p>For example, because all my presentation layer is now doing is either reflecting the state that is in my store or telling my store to do something, there really isn’t much, if anything, left to test in my presentation layer. If you’ve written your code correctly, none of the methods in your view should have a cyclomatic complexity of greater than two. You may still want to write some end-to-end tests to make sure that the NgRX&#x2F;Store loop is working correctly. But that is an entirely different subject.</p>\n<p>This does not mean that we don’t have to test anything. All of that code had to go some place, right?</p>\n<p>But, here’s the deal. Because the code is in an @Effect or a Service (generally) your tests become much more simple. You might have to dummy up a store or a service. But for the most part, your tests won’t really look much different that tests you would write for regular JavaScript code without a framework.</p>\n<p>The other HUGE advantage to using this architecture is that it allows you to distribute your code so that no file is too large and hard to reason about. It allows you to follow the “Single Responsibility Principle” in greater granularity than you might otherwise be able to do.</p>\n<p>And finally, this architecture allows you to treat all the component code: the html template, the CSS, and the TypeScript file, as all View code. And I think this is where many people are confused about Angular.</p>\n<h2 id=\"View-Confusion\"><a href=\"#View-Confusion\" class=\"headerlink\" title=\"View Confusion\"></a>View Confusion</h2><p>In a MVC or even an MVVM pattern, we’ve also considered the HTML template the “View” and the JavaScript (or in our case, TypeScript) code the controller. This is a common misconception that I believe the ASP.NET crowd still gets wrong. Code-behind code isn’t your controller. It is helper code for your View. And so, we end up putting processing code in our view, when it really belongs in an entirely different file. This is what the Model View Presenter pattern solves. If you aren’t going to use NgRX and Reactive Forms, you should check out MVP as a way of architecting your code using the older Template Driven Forms approach that was common in AngularJS.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>For the purposes of this article, I’m going to assume you’ve read my other articles which I’ve linked to at the beginning of this post.</p>\n<p>So first, the basic directory and file structure of this new method might look something like this:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app/</span><br><span class=\"line\"> +-store/</span><br><span class=\"line\">   +-route1/</span><br><span class=\"line\">     +-sub-reducer1/</span><br><span class=\"line\">       --sub-reducer1.actions.ts</span><br><span class=\"line\">       --sub-reducer1.effects.ts</span><br><span class=\"line\">       --sub-reducer1.model.ts</span><br><span class=\"line\">       --sub-reducer1.reducer.ts</span><br><span class=\"line\">     +-sub-reducer2/</span><br><span class=\"line\">     --route1.actions.ts</span><br><span class=\"line\">     --route1.effects.ts</span><br><span class=\"line\">     --route1.model.ts</span><br><span class=\"line\">     --route1.reducer.ts</span><br><span class=\"line\">   +-route2/</span><br></pre></td></tr></table></figure>\n\n<p>Some things to note:</p>\n<ol>\n<li>Your Actions are defined in the target. You would seldom, if ever, define an action at the route level.</li>\n<li>Effects are optional, just like any other time you would use them.</li>\n<li>Effects are seldom, if ever, defined at the route level.</li>\n<li>I’m using “route1” etc and “sub-reducer1” etc as sample names. Use names that represent your route names and the data you are storing.</li>\n<li>The only reducers that gets defined in our app.store.ts file are the reducers in the route directories.</li>\n<li>You still need to register each of your effects in app.store.ts as you have been doing.</li>\n</ol>\n<p>The next thing that is probably not clear is that your top-level model, ie “route1.model.ts” should only hold the sub-reducers. I’ve also found it useful to make all of my top-level properties optional.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Route1Model</span> &#123;</span><br><span class=\"line\">  subItem1?: <span class=\"title class_\">SubModel1</span>;</span><br><span class=\"line\">   subItem2?: <span class=\"title class_\">SubModel2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And this is used in your route reducer as:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">route1Reducer</span>(<span class=\"params\">state: Route1Model =</span></span><br><span class=\"line\"><span class=\"params\">  &#123;</span></span><br><span class=\"line\"><span class=\"params\">    subReducer1: &#123;/* subReducer definition here */&#125;,</span></span><br><span class=\"line\"><span class=\"params\">    subReducer2: &#123;/* subReducer definition here */&#125;</span></span><br><span class=\"line\"><span class=\"params\">  &#125;, action: Action</span>) &#123;</span><br><span class=\"line\"> <span class=\"comment\">// process action here</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Route1Reducer</span>: <span class=\"title class_\">ActionReducer</span>&lt;<span class=\"title class_\">Route1Model</span>&gt; = route1Reducer;</span><br></pre></td></tr></table></figure>\n\n<p>Now, the trick we need to implement is that we need to delegate the actions down to the appropriate reducers and we only want to change the state object to a new object if a child state has changed.</p>\n<p>In the top level reducer, you need to put code that looks something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reducerList = &#123;</span><br><span class=\"line\">  <span class=\"attr\">subReducer1</span>: subReducer1,</span><br><span class=\"line\">  <span class=\"attr\">subReducer2</span>: subReducer2</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> returnState = state;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(reducerList).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newState = reducerList[item](state[item], action);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(newState !== state[item]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> newItem = &#123;&#125;;</span><br><span class=\"line\">      newItem[item] = newState;</span><br><span class=\"line\">      returnState = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, returnState, newItem);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">return</span> returnState;</span><br></pre></td></tr></table></figure>\n\n<p>The key here is that you want the property names in the reducerList to be the same name as what is in the Route1Model and you want the values assigned to them to be the function pointer (notice, no parenthesis) that should be called.</p>\n<p>The actual sub-reducers look like a regular reducer.  The only real difference is that you will be calling the function that returns the state, the second export statement we normally put in our reducers that returns the ActionReducer&lt;&gt; is not needed.</p>\n<p>So, our Object.keys().map() processes each reducer and updates the parent object if the child has changed.</p>\n<p>Now, by way of reminder. You can observe all the store, or part of the store. So, your smart component might observe just a sub entity or the whole entity depending on the need at the moment.</p>\n<p>Finally, lets say you want to have a “Save” button that causes the information in your store to be persisted to a database. You would place a method in your smart component that gets triggered by the button and fires a “Save” action to an @Effect.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">save</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">stopPropagation</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"title class_\">Route1Actions</span>.<span class=\"title function_\">save</span>());</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Your @effect will respond, and since @Effects typically already have a store injected into them, you can use the store to retrieve the data.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Effect</span>(&#123;<span class=\"attr\">dispatch</span>: <span class=\"literal\">false</span>&#125;) _save$ = <span class=\"variable language_\">this</span>.<span class=\"property\">update$</span></span><br><span class=\"line\">  .<span class=\"title function_\">ofType</span>(<span class=\"title class_\">StagedEditActions</span>.<span class=\"property\">SAVE</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">switchMap</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">select</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.<span class=\"property\">route1</span>).<span class=\"title function_\">first</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">route1Data</span> =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.<span class=\"title function_\">save</span>(route1Data))</span><br><span class=\"line\">  .<span class=\"title function_\">map</span>(requestId$ =&gt; &#123;</span><br><span class=\"line\">    requestId$.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">id</span> =&gt;</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(route1Actions.<span class=\"title function_\">load</span>(id))</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "angular",
                "design patterns",
                "NgRX"
            ]
        },
        {
            "id": "http://davembush.github.com/functional-reactive-angular-revealed/",
            "url": "http://davembush.github.com/functional-reactive-angular-revealed/",
            "title": "Functional Reactive Angular Revealed",
            "date_published": "2017-05-30T10:30:46.000Z",
            "content_html": "<p>Over the last month or so, I’ve been presenting the basics of <a href=\"/tags/ngrx/\">how to use NgRX&#x2F;Store with Angular</a>. In the past, I’ve praised the virtues of <a href=\"/tags/reactive-forms/\">Reactive Forms</a>, also known as <a href=\"/tags/model-driven/\">Model Driven Forms</a>. These along with RxJS make up the pillars of Functional Reactive Angular Programming.</p>\n<p>What is sad is that this reality is lost on so much of the Angular community. When I listen to podcast where they talk about any of these concepts individually, Function Reactive Programming (FRP) is barely, if ever, mentioned.</p>\n<p>But the scary thing is this, there are many people who are going to use the new Angular the way they used the old Angular and they will completely miss the main advantages. They may even jump from Angular to React or (even) Aurelia. And that’s just picking on the most recent frameworks. Some will want to go back to Egypt and decide jQuery is a good choice!</p>\n<p>Functional Reactive Programming is not just a hot new model. It solves a lot of problems.</p>\n<figure>![](/uploads/2017/05/2017-05-30.png \"Functional Reactive Angular Revealed\") Photo via [VisualHunt.com](//visualhunt.com/re/b10788)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Object-Oriented-Failure\"><a href=\"#Object-Oriented-Failure\" class=\"headerlink\" title=\"Object-Oriented Failure\"></a>Object-Oriented Failure</h2><p>Several years ago, I wrote an article called, “<a href=\"/object-oriented-programming-has-failed-us/\">Object-Oriented Programming Has Failed Us</a>”. In the article, I put forth the reality that most people are unable to think in object-oriented terms. Humans think sequentially and chunk down. Object-Oriented Programming requires us to think holistically, frequently in parallel, and chunk up.</p>\n<p>So, lets define some terms. Chunking down is the act of finding differences between things. This is why we discriminate. At times, it is useful to find differences. If you are a microbiologist, you want to do this so you know you are working with one strain of virus vs some other strain.</p>\n<p>As you might have guessed, Chunking Up, is the exact opposite. We look for commonalities. Given two different things, what is the same between them?</p>\n<p>The problem is, that’s not how most of us naturally process the world. There are other problems with Object-Oriented Programming.</p>\n<h3 id=\"Hard-to-Reason-About\"><a href=\"#Hard-to-Reason-About\" class=\"headerlink\" title=\"Hard to Reason About\"></a>Hard to Reason About</h3><p>Back when I was teaching for a training company, I was explaining some concept of Object-Oriented Programming, probably Virtual Functions, to a student that came from a procedural programming world. His comment was, “this is going to make the code really hard to debug!” to which I responded, “not if you step through with the debugger.” But, the truth is, he was right. Debugging Object-Oriented code is difficult because the code is hard to read and reason about. Looking at any one class, am I ever sure that I’m seeing the whole picture?</p>\n<p>Think about this. When you write a class, and have a member variable, how long is it before you’ve forgotten the fact that the variable exists and is implicitly a parameter that is being passed to your function. Not long! And this means that you can never really be sure that when you go to use that function, the state of the object will always be the same.</p>\n<p>This makes the code incredibly hard to test. I’m not even talking about using Test Driven Development. Just any kind of test that have way ensures that the code you’ve written does what you think it does and doesn’t do what you don’t think it does.</p>\n<h3 id=\"Single-Responsibility\"><a href=\"#Single-Responsibility\" class=\"headerlink\" title=\"Single Responsibility\"></a>Single Responsibility</h3><p>One of the rules for Object-Oriented Programming is that we should follow the “Single Responsibility Principle” I ask you, how far do we chunk down to ensure we are only doing one thing in our class?  In fact, many of the principles we have developed are trying to put fences around the inherent problems with programming in an Object-Oriented mindset.</p>\n<h2 id=\"Procedural-Programming\"><a href=\"#Procedural-Programming\" class=\"headerlink\" title=\"Procedural Programming\"></a>Procedural Programming</h2><p>The benefit of Procedural Programming is that I at least knew what parameters I was always going to get.  The disadvantage is that it was still incredibly hard to test because my function could call other function that could call yet other functions.  This meant that I could only really test the functions that were at the end of the hierarchy and really had no good way of mocking out child functions.  While testing is hard in an Object-Oriented world, it is nearly impossible in a procedural world.</p>\n<h2 id=\"What-If\"><a href=\"#What-If\" class=\"headerlink\" title=\"What If\"></a>What If</h2><p>But, what if there were a way to write code that solved most of these problems. A way that better mirrored how we thought, that is easier to reason about, that allows you to chunk down – that forced you to chunk down. A way of coding that was so easy to test, that you frequently didn’t even need to write the test. This is the advantage of Functional Programming generally, and the reason you want to use the combination of NgRX&#x2F;Store, Reactive Forms, and RxJS in the bulk of your Angular code.</p>\n<h2 id=\"How-To\"><a href=\"#How-To\" class=\"headerlink\" title=\"How To\"></a>How To</h2><h3 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h3><p>You’ll remember from our discussion of NgRX that we setup a reducer to return a new state object for a particular entity in our store. You’ll also remember that we are able to create an entity that has child entities and that we can subscribe to any entity using code that looks something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.<span class=\"title function_\">select</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.<span class=\"property\">entityName</span>)</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.<span class=\"title function_\">select</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.<span class=\"property\">entityName</span>.<span class=\"property\">subEntity</span>)</span><br></pre></td></tr></table></figure>\n\n<p>If you need to, you can read my previous articles that I’ve already referred to.</p>\n<p>I normally setup an entity in my store for each screen, then for data I am just displaying I subscribe in the template using</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;(observerThing | async)?.variableThing&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The <code>(observerThing | async)</code> is the same as the code we would normally write in TypeScript:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">observerThing.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x);</span><br></pre></td></tr></table></figure>\n\n<p><code>async</code> does the <code>subscribe</code> and returns <code>x</code>. The <code>?</code> ensures that we don’t attempt to go after <code>.variableThing</code> if <code>x</code> is <code>null</code> or <code>undefined</code>.</p>\n<p>This is all pretty basic stuff.</p>\n<p>But what about working with forms.</p>\n<h3 id=\"Forms\"><a href=\"#Forms\" class=\"headerlink\" title=\"Forms\"></a>Forms</h3><p>I’ve found that the best way to work with forms is to create a structure in my entity that maps directly to my form. So, if I have a form with firstName, lastName, and birthDate, I’ll define my form in my template with a form group using firstName, lastName, and birthDate as formControlName values.</p>\n<p>Next, in my TypeScript code, I’ll subscribe to the form group’s valueChanges property. Any time my form changes, the subscribe dispatches the changes to the reducer for my entity and updates the store.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span></span><br><span class=\"line\">  .<span class=\"property\">myFormGroup</span></span><br><span class=\"line\">  .<span class=\"property\">valueChanges</span></span><br><span class=\"line\">  .<span class=\"title function_\">subscribe</span>(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> store.<span class=\"title function_\">dispatch</span>(<span class=\"comment\">/* action thing goes here */</span>)</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n\n<p>Similarly, I can setup a <code>subscribe</code> on my entity and any time the data in the entity changes, I can update the form group.</p>\n<p>There is a small little trick you need to know about here. I already showed you how to update the form group using <code>patchValue()</code> <a href=\"/angular2-model-driven-forms-are-superior/\">here</a>. But because we were not dealing with a fully Functional Reactive programming model, I left out a part you’ll need here.</p>\n<p>When you update your code using <code>patchValue()</code>, the first parameter will still be the data you want to change. That is, the values from the store’s entity. But for the second parameter, you’ll need to pass in <code>&#123;emitEvent: false&#125;</code>, otherwise, you’ll end up with an infinite loop. Your form will cause your reducer to change and your store will cause your form to change. What that second parameter is saying is that we don’t want any of the change events to fire because we’ve updated the form.</p>\n<p>You may also want to consider writing code in your reducer that only returns a new state object if no data has changed.</p>\n<h3 id=\"RxJS\"><a href=\"#RxJS\" class=\"headerlink\" title=\"RxJS\"></a>RxJS</h3><p>Now, nothing about anything I’ve written in the “how to” is particularly Functional, but it is Reactive. By virtue of the subscribes, it is reacting to state change and reacting to changes in the form. What makes our code Functional, is that we make use of RxJS, a Reactive library, to process the data. If you’ve already been using the Http object in Angular, you’ve already been using RxJS.</p>\n<p>There is a great <a href=\"//reactivex.io/learnrx/\">tutorial for learning RxJS</a> that the guys at NetFlix have put together. I’m not even going to attempt to teach RxJS here. They’ve got the best material and it is what helped me wrap my head around the basic concepts.</p>\n<p>What I do want to point out here is what makes Functional programming Functional so that you end up using RxJS correctly.  While these are not hard and fast rules, I would encourage you to break these rules only after you can’t find any other way:</p>\n<ol>\n<li>The output of one function becomes the input for the next function.</li>\n<li>A function never causes a side effect (this is why NgRX has Effects)</li>\n<li>The same parameters in will always produce the same data out.</li>\n<li>Avoid conditionals and use .filter(), .case() etc instead.</li>\n<li>Ideally the cyclomatic complexity of a function should be 1</li>\n</ol>\n<p>By following these rules, you will find that most of the code you write doesn’t need to have any test.  Why would you ever test a function with a cyclomatic complexity of 1, or code that has no conditions?</p>\n<h2 id=\"The-Right-Tool-for-the-Job\"><a href=\"#The-Right-Tool-for-the-Job\" class=\"headerlink\" title=\"The Right Tool for the Job\"></a>The Right Tool for the Job</h2><p>While I would love to be able to use Functional programming everywhere, I recognize that it isn’t always the best tool for the job. For example, at least with Angular, there isn’t a good way of writing our components and pages in a strictly Functional way. However, if you use what I’ve illustrated here, you’ll find that even though the structure of your components are Object-Oriented, much of the code within the component is quite functional.</p>\n",
            "tags": [
                "angular",
                "RxJS",
                "NgRX"
            ]
        },
        {
            "id": "http://davembush.github.com/secrets-to-your-first-programming-job/",
            "url": "http://davembush.github.com/secrets-to-your-first-programming-job/",
            "title": "Secrets to Your First Programming Job",
            "date_published": "2017-05-13T16:47:50.000Z",
            "content_html": "<p>This past week I was talking to a guy who is graduating from College and looking for a job. He asked me what most people ask at that point in their career. “Everyone wants experience, but how do you get experience if no one will give it to you?”</p>\n<p>What is interesting is that for all the advances in the 30 years since I started my career, that question is still the main question every graduate asks.</p>\n<p>Now, before I get started, I want to make sure we are clear. These tips may or may not work for you. They are what I would do, and in large part are what I did 30 years ago, just updated to be appropriate to the current technology. How well they work for you are going to depend on a lot of different factors, not least of which is how much effort you apply. They are also very much based on my culture here in the USA. If you are looking for a job in another country that is dissimilar culturally, you may want to ignore this advice completely. But, I’ll also say this. If what you are currently doing isn’t working, what do you have to lose?</p>\n<figure>![](/uploads/2017/05/2017-05-13.png)<figcaption>Photo credit: [MDGovpics](//www.flickr.com/photos/mdgovpics/8157677890/) via [Visualhunt.com](//visualhunt.com/re/abeb67) / [ CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n\n<h2 id=\"Get-a-Job\"><a href=\"#Get-a-Job\" class=\"headerlink\" title=\"Get a Job\"></a>Get a Job</h2><p>Wait! Wasn’t the whole point of this article to help you find a job? No! The point of this article is help you get a Programming job. And the first step in the process is to get A job. Any job. Don’t be picky. When I started my career, I was working in the Sporting Goods and Automotive department at K-Mart. Minimum wage. Nothing to write home about. Prior to that I worked as a maintenance man.</p>\n<p>Listen, I know you want a job in whatever it was you went to school for. But the fact of the matter is, you have college bills to pay off. You probably have a car that needs gas and insurance. You may even have rent and groceries. If Mom and Dad are taking care of all that for you, shame on them! And shame on you for letting them, no matter how easy that makes life. Cut the cord and grow up!</p>\n<p>OK, enough on that rant. If I can’t convince you on the financial terms, let me try a couple other really good reasons.</p>\n<p>First, the fact of the matter is, no one wants to be the first one to take a chance on you.  If you don’t currently have a job that you’ve been able to hold for a while, how can I be sure that you will work out?  Even if you have all the credentials I’m looking for, will you stick around when things get hard?  Getting a job, particularly a crappy job, shows that you are a worker.  That nothing is beneath you.  And trust me, with all the stories about how millennials are lazy and want the world handed to them (even if that isn’t totally accurate) you can bet someone who is working for minimum wage at a job that don’t particularly like is going to stand out.</p>\n<h2 id=\"Your-Job-is-Getting-a-Job\"><a href=\"#Your-Job-is-Getting-a-Job\" class=\"headerlink\" title=\"Your Job is Getting a Job\"></a>Your Job is Getting a Job</h2><p>Until you have a job of some kind, your job is getting a job. The harder you work at getting a job, the faster you will get the job you want. This means you should have a list of things you can do today that will get you closer to landing a job.  Work on your resume. Implement some of the tips below. Apply for any and every job that is open.  Go door to door if you have to.</p>\n<p>Once you’ve finished reading this article, make a list and work through it.</p>\n<h2 id=\"It’s-a-Numbers-Game\"><a href=\"#It’s-a-Numbers-Game\" class=\"headerlink\" title=\"It’s a Numbers Game\"></a>It’s a Numbers Game</h2><p>Now here is a very sad truth. Getting that first job is a numbers game. You are going to apply to a lot of places before anyone hires you. And the thing your college won’t tell you as they prepare you to get out into the real world is just how much work this is going to be.</p>\n<p>When I was your age…</p>\n<p>…we just had the newspaper. I sent my resume to anyone and everyone that looked like they might have a programming job available.</p>\n<p>In your case, you are going to make sure you are as visible as possible. Post your resume on job boards. Apply to every company that has an open computer job, even if you don’t qualify for the one they advertised. Ask your friends if they know anyone who might be able to help.</p>\n<p>Note: I said, “might be able to help.” Not, “might be able to get you a job.” I’ll talk more about this later. But HOW you ask for help plays a HUGE part in being able to GET help.</p>\n<p>When someone ask you what you do, the answer is, “Well, actually, right now I’m trying to find a job as a ______ do you know anyone who might be able to help?”</p>\n<p>It is the whole networking thing.</p>\n<p>Allow me to tell you a story. When I graduated, this was the exact line I used. “Do you know anyone who might be able to help?” And when I contacted the person I was referred to, I asked the same question. Typically, the letter I sent looked something like this:</p>\n<blockquote>\n<p>Dear sir, I just graduated from such and such college&#x2F;university. My degree is in X and I’m trying to find work.</p>\n</blockquote>\n<blockquote>\n<p>I was speaking with John Doe who suggested that I contact you. I realize you may or may not have anything for me, but I was hoping you might be able to suggest some people who might be able to help me find an entry level programming position.</p>\n</blockquote>\n<blockquote>\n<p>Thanks for any help you can give me.</p>\n</blockquote>\n<h2 id=\"Your-Degree-isn’t-Primary\"><a href=\"#Your-Degree-isn’t-Primary\" class=\"headerlink\" title=\"Your Degree isn’t Primary\"></a>Your Degree isn’t Primary</h2><p>I know your degree is probably all you feel like you have. But mostly, no one cares. Oh, we care that you have a degree, but that is about all.</p>\n<p>What do we care about?</p>\n<p>What can you do?</p>\n<p>Now, what you need to do is think outside the box. When you put your resume together, you are going to put anything on your resume that is remotely related to the kind of job you are trying to get. Even if you did it for free.</p>\n<p>The next best thing you can do is to put something on your resume that indicates you are a go-getter. Did you have any leadership roles in college? Make sure that gets on your resume! Have you done a lot of volunteer work?</p>\n<h2 id=\"Dress-Up\"><a href=\"#Dress-Up\" class=\"headerlink\" title=\"Dress Up\"></a>Dress Up</h2><p>Really! This shouldn’t need to be said. But unless you are told otherwise ahead of time, you never get in trouble for dressing up for an interview. But nothing will kill it faster if you don’t. Yes, even in this modern day and age. Even if the organization sells itself as a casual organization, dress in business attire. Guys, this means where a suit. Gals, let’s face it, I doubt you’ll have any problem with this.</p>\n<h2 id=\"LinkedIn\"><a href=\"#LinkedIn\" class=\"headerlink\" title=\"LinkedIn\"></a>LinkedIn</h2><p>I wrote about <a href=\"/linkedin-tips-for-programmers/\">my LinkedIn strategy</a> a while ago.  As I stated there, the more connections you have, the better off you will be.  This is true of all social media.  Connect to anyone who ask to connect with you.</p>\n<p>Your LinkedIn connections are a large field of people you can send a version of the letter above.  Remember, you aren’t asking them for work, you are asking for help finding work.</p>\n<p>Which leads to a little rant I have built up about how to ask for help on LinkedIn.</p>\n<h2 id=\"Asking-for-Help\"><a href=\"#Asking-for-Help\" class=\"headerlink\" title=\"Asking for Help\"></a>Asking for Help</h2><p>This time of year, I get multiple in-Mails that all say essentially the same thing.  “Hi, I am graduating from X with a degree in Y.  Let me know if you have any work.”  Oh, yes, they use a few more words than that.  But the gist is exactly that short little sentence.</p>\n<p>Now, imagine you are me and everyone sends you that same in-Mail. What would you do? Probably the same thing I do. Delete it.</p>\n<p>Occasionally, I’ll get some sort of variation that amounts to exactly what I’ve been saying. “I was hoping I could talk to you about …” Why does this work when the other way doesn’t. Simple, you aren’t asking me for work. You are asking for advice.</p>\n<p>If you want to get help, you need to stand out.  If you ask me for advice and I have a job for you, I’ll let you know.  If all you do is ask for a job… “Delete”</p>\n<p>This, of course, doesn’t always work. But, this is exactly how I got my first job. Now, if you follow the advice I’ve given so far, eventually, you’ll find a job. But there is a lot more you can do that will make you stand out.</p>\n<h2 id=\"Volunteer\"><a href=\"#Volunteer\" class=\"headerlink\" title=\"Volunteer\"></a>Volunteer</h2><p>Hey, you aren’t doing anything yet anyhow.  If you took my advice and have a minimum wage job, you still have some brain power left.  So, find some organization that needs help with what you want to do and volunteer.  Now you have experience you can put on your resume and the organization has some program that helps them along.</p>\n<h2 id=\"Stack-Overflow\"><a href=\"#Stack-Overflow\" class=\"headerlink\" title=\"Stack Overflow\"></a>Stack Overflow</h2><p>Another place you can gain some points is on Stack Overflow.  Answer question.  The fastest way to learn is to find a question that no one has answered.  Figure out the answer and post it.  If you do one question a day, your points will rise and you can include a link to your profile as part of your resume.</p>\n<h2 id=\"Open-Source\"><a href=\"#Open-Source\" class=\"headerlink\" title=\"Open Source\"></a>Open Source</h2><p>Regardless of the type of work you want, participating in an Open Source project is another way of showing that you know your stuff. You might think you need to know a lot to participate in a project. But there are some low entry ways of participating.</p>\n<p>An easy way to get started is by visiting these sites and finding some low hanging fruit that will get you started:</p>\n<ul>\n<li><a href=\"//up-for-grabs.net/#/\">Up for Grabs</a> – A list of sites looks for help from new contributors.  Easy way to get started.</li>\n<li><a href=\"//github.com/MunGell/awesome-for-beginners\">Awesome for Beginners</a> – List of beginner friendly projects</li>\n<li><a href=\"//medium.freecodecamp.com/finding-your-first-open-source-project-or-bug-to-work-on-1712f651e5ba\">Check Out this Post</a> – Even more ways to get started</li>\n</ul>\n<h2 id=\"Your-Resume\"><a href=\"#Your-Resume\" class=\"headerlink\" title=\"Your Resume\"></a>Your Resume</h2><p>I wrote about <a href=\"/your-programming-resume-is-garbage/\">how I think a Resume should be put together</a> before.  Read it and implement it. Two things to remember:</p>\n<ul>\n<li>You need to stand out.</li>\n<li>The how-to class your college gave you is useless.</li>\n</ul>\n<h2 id=\"Job-Boards\"><a href=\"#Job-Boards\" class=\"headerlink\" title=\"Job Boards\"></a>Job Boards</h2><p>You can post your resume to all the job boards if you like.  But the only one I bother with is Dice.com because it is the only one I know of that is focused on what we do.</p>\n<h2 id=\"The-Interview\"><a href=\"#The-Interview\" class=\"headerlink\" title=\"The Interview\"></a>The Interview</h2><p>Once again, I’ve <a href=\"/categories/Interview/\">written about the interview process</a> before too.</p>\n<p>But here I want to talk to the new programmer specifically.</p>\n<p>First, no one expects you to have all the answers. If you don’t know, just say so. Don’t try to bluff you way through. They will find out you don’t know eventually. But more importantly, saying “I don’t know.” Means you really do know the stuff you’ve given an answer for.</p>\n<p>Second, while hardly anyone in this field wants to admit it, the interview is about interpersonal skills. A lot of the time, if you <a href=\"/confident-programmer-secrets-revealed/\">act confident in yourself</a>, they will be confident in you.</p>\n<p>Learn body language, power poses, etc.</p>\n<p>I was just thinking about this more today and realized … what’s the one thing most people want? They want to be liked. They want people to be interested in them. Sure, there are a lot of hacks I could tell you. But the simplest, and most genuine hack of all is to be interested in your interviewer.</p>\n<p>You know that part of the interview where they ask you if you have any questions? This is where you ask question that show you know something about the job you are interviewing for. But, you can also use this to ask a question that is both about the job and the person interviewing. Like, “What is your favorite part of working here?” and “What is your least favorite …” You find out something about the organization and you get them talking about something that is important to them.</p>\n<h2 id=\"Bet-on-Yourself\"><a href=\"#Bet-on-Yourself\" class=\"headerlink\" title=\"Bet on Yourself\"></a>Bet on Yourself</h2><p>As a last resort. Bet on yourself. “I’ll work for you for free for 3 months to prove to you that you want to hire me full-time.”  Even if things don’t work out, you’ve gotten more experience.</p>\n",
            "tags": [
                "interview",
                "job search"
            ]
        },
        {
            "id": "http://davembush.github.com/using-real-world-ngrx/",
            "url": "http://davembush.github.com/using-real-world-ngrx/",
            "title": "Using Real World NgRX",
            "date_published": "2017-05-09T10:30:00.000Z",
            "content_html": "<p>This week, I want to demonstrate some ways you might use NgRX in your own code.</p>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p>Last week we went into a lot of detail about how the NgRX system should be wired together. Here is all of that in picture form.</p>\n<p><img src=\"/uploads/2017/05/image.png\" alt=\"image\" title=\"image\"></p>\n<p>A component fires an event to either an effect or a reducer using an action. If an effect was called, it fires another action which is normally picked up by a reducer. The Reducer mutates the state which then gets placed in the store. “Magic happens here.” You don’t write any code to get it to the store other than that you create a reducer. Anything that is observing the table in the store that got changed will get notified via RxJS observables and the cycle is complete.</p>\n<p>Note that the action you dispatch can be handled by either an Effect, a Reducer or both.</p>\n<h2 id=\"Basic-CRUD\"><a href=\"#Basic-CRUD\" class=\"headerlink\" title=\"Basic CRUD\"></a>Basic CRUD</h2><p>Most of the time, we think of NgRX as a way of handling CRUD operations. We need to see the current record so we fire off a LOAD action that uses an effect to retrieve the data from the database. Once the data comes back, we return an action that tells the reducer to put that new data into the store. Since our component is observing the store, it updates the screen with the new values.</p>\n<p>If we need to add a record, we fire an ADD action. If we need to delete we fire a DELETE action. If we need to update, we fire an UPDATE action. Each of these are picked up by the Effect, which then fires an action that places new state information in the store via the Reducer.</p>\n<h2 id=\"Wait-State\"><a href=\"#Wait-State\" class=\"headerlink\" title=\"Wait State\"></a>Wait State</h2><p>When most people think of how to use NgRX or any similar pattern, they immediately think of the CRUD pattern I mentioned above. But, we don’t have to start the Action chain from a component. For that matter, we don’t have to listen to our Store data from a component either.</p>\n<p>One way I’ve implemented NgRX that solves a lot of common issues is that I’ve created a wait state component that shows when a count variable has been incremented and doesn’t show when the count is zero. Since Store is <code>Injectable</code>, I can increment and decrement the count from just about anywhere. Most often I increment it from an effect just before I make an AJAX call and decrement it in a finally() block of the Http observable. I have a start() action that increments the count and an end() action that decrements the count and ensures that I never go below zero. I can start off multiple asynchronous processes which will all increment the counter and decrement the counter appropriately. The wait state GUI displays until everything has finished.</p>\n<p>This is OH! So much easier than how we’ve had to handle this problem with other design patterns. I’m not saying it couldn’t be done, or that it was even particularly hard. But this way is easier.</p>\n<h2 id=\"Error-Handling\"><a href=\"#Error-Handling\" class=\"headerlink\" title=\"Error Handling\"></a>Error Handling</h2><p>Another place where you might want to present information but trigger the display from just about anywhere is with error handling. In the code I work on, I have a modal popup component that displays whenever my error collection has something in it. Anytime I need to display an error, I add the error to the collection via an Action and it magically displays. The great thing about this mechanism is that regardless of how many errors I send to the collection, they all display until I close the window, which clears out the collection.</p>\n<h2 id=\"Page-State\"><a href=\"#Page-State\" class=\"headerlink\" title=\"Page State\"></a>Page State</h2><p>Most page state is handled by the fact that we’ve stored the data into a database. But there are times when we want to come back to a page we had been working on previously and we want it to display with the data that was on it at the time we left.</p>\n<p>Or maybe you want to work on a series of pages prior to saving so that everything gets saved as a set.</p>\n<p>No matter. You can use NgRX to store everything into the store and a separate action can trigger an effect that pushes that data to the database.</p>\n<p>Or, as is the case in an application I’m working on, I’m using a form to search a database. When I come back, I want the same search fields and I want the search to reinitialized. In my particular case, I don’t have a search field. You change a field, a new search is automatically initiated. This case is just a little bit more complicated than what we’ve looked at so far.</p>\n<p><img src=\"/uploads/2017/05/image-1.png\" alt=\"image\" title=\"image\"></p>\n<p>In order to keep the state information available so that it is there when I come back to it, I need to store that information in the search table via the Search Reducer. So, every time something changes in the Search Form, I send off an action to the Search Reducer so that the change can be recorded.</p>\n<p>Meanwhile, the Search Form also is listening to the Search Table so that when it comes back it can put the changes in the form, and it can send an action to the Search Results Reducer telling it to search for the information. When it gets the results, the Search Results Table picks them up and since the Search Results Component is listening to the Search Results Table, they display.</p>\n<p>If I leave the page, the Search Form grabs the current search parameters from the Search Table and Fills the Form and sends the action to the Search Results Reducer and the page is back where we left it.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>The point is, NgRX isn’t just about basic CRUD forms and because there are multiple ways you can mix and match the parts, even your basic CRUD implementation has a lot more flexibility than you might be used to.</p>\n",
            "tags": [
                "angular",
                "design patterns",
                "NgRX"
            ]
        },
        {
            "id": "http://davembush.github.com/angular-2-model-driven-forms-are-superior/",
            "url": "http://davembush.github.com/angular-2-model-driven-forms-are-superior/",
            "title": "Angular(2+) Model Driven Forms Are Superior",
            "date_published": "2017-04-18T10:30:00.000Z",
            "content_html": "<p>If you are programming in Angular and haven’t tried Model Driven Forms yet, I’m assuming that is because you’ve not taken the time to try to learn it. In this article, I am going to try to convince you that the Model Driven Form based approach is superior to Template Driven Forms and that the only people that are still using Template Driven Forms are people who either have not been enlightened or lazy.</p>\n<figure>![](/uploads/2017/04/image-4.png \"Angular(2+) Model Driven Forms Are Superior\")<figcaption>Photo credit: [DarlingJack](//www.flickr.com/photos/aceofknaves/33346081006/) via [Visualhunt.com](//visualhunt.com/re/f8175d) / [ CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"What-are-Template-Driven-Forms\"><a href=\"#What-are-Template-Driven-Forms\" class=\"headerlink\" title=\"What are Template Driven Forms\"></a>What are Template Driven Forms</h2><p>For those who aren’t already familiar with the terms, let’s define them first.  A template driven form is an Angular form that has most of the form logic in the template code.  The elements that give away the fact that we are working with a template driven form are that we are using ngModel in our form fields, all of our form fields have a name attribute, and our form has ngForm declared as assigned to the form variable.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">form</span>=<span class=\"string\">&quot;ngForm&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;nameField&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>In our code, each form field is handled individually.  While we might bind them all to a structure of some sort in our TypeScript code, the result is we continue to think of the data as parts rather than wholes.</p>\n<h2 id=\"What-are-Model-Driven-Forms\"><a href=\"#What-are-Model-Driven-Forms\" class=\"headerlink\" title=\"What are Model Driven Forms\"></a>What are Model Driven Forms</h2><p>Model Driven Forms, on the other hand, put a minimal amount of information in the template. It isn’t that we eliminate the template completely, we just put more of the responsibility into the TypeScript code.</p>\n<p>Typical template code for Model Driven Forms looks like this</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;form&quot;</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Notice how much less code is needed.</p>\n<p>But, you may ask, how do I get the code in and out of the field? How do I validate the field?</p>\n<p>Oh, but you see, that is exactly why I love Model Driven forms. That’s all in the TypeScript code.</p>\n<p>But other than the fact that there is less code in the template and we can handle everything about the form in our TypeScript, the main difference between Template Driven Forms and Model Driven Forms is that Model Driven Forms let us treat the form as a whole rather than individual parts. This solves problems that used to be rather tricky using Template Driven Forms.</p>\n<h2 id=\"Flexible-Validation\"><a href=\"#Flexible-Validation\" class=\"headerlink\" title=\"Flexible Validation\"></a>Flexible Validation</h2><p>Just so we have a reference, this is what our TypeScript code would look like to wire up our TypeScript code to our template.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">form</span> = formBuilder.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: [<span class=\"string\">&#x27;&#x27;</span>,<span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: [<span class=\"string\">&#x27;&#x27;</span>,<span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">  <span class=\"attr\">dob</span>: [<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Validators</span>.<span class=\"title function_\">compose</span>([ <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>, <span class=\"title class_\">View</span>.<span class=\"property\">isDate</span>])]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>this.form</code> references a public member in the form class. It is the same name that we named our form group in the template file.</p>\n<p>Within the form group, we have a property for each field in our form group. In the sample above, we only created one input field named ‘name’. This form group references two other fields, ‘sex’ and ‘dob’. I added these in so I could show you some other features.</p>\n<p>You’ll see that we’ve defined some validations. Simple required validations until we get to ‘dob’ where we want to make sure we give them a real date. For this, we use two new features. We use the <code>compose</code> feature to combine several validations into one. We also created a custom validation called <code>isDate.</code></p>\n<p>Custom validations are static methods that take the control they are associated with as a parameter. Each control has a value property that you can use to retrieve the current value of the control.</p>\n<p>The problem that this solves is that now we can write any validation we need without having to make it a directive. We could also cross validate between this control and another control on the form by climbing up to the parent Form Group and back down to a sibling Form Control. It really is quite flexible.</p>\n<h2 id=\"Easy-Change-Detection\"><a href=\"#Easy-Change-Detection\" class=\"headerlink\" title=\"Easy Change Detection\"></a>Easy Change Detection</h2><p>If you are working with Template Driven Forms, you know that the way you know a value in a control has changed is because the property it is associated with gets a new value. Setting up a simple setter lets you know the field has changed. Or if you prefer you can use the split syntax of</p>\n<p><code>[ngModel]=&#39;field&#39; (ngModelChange)=&#39;changeHander($event)&#39;</code></p>\n<p>In Model Driven forms we can tell when any field has changed by subscribing to the valueChanges property.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">form</span>.<span class=\"property\">valueChanges</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">contact</span> = <span class=\"title function_\">deepAssign</span>(&#123;&#125;, <span class=\"variable language_\">this</span>.<span class=\"property\">contact</span>, value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>The value that gets passed in has information about the field or fields that changed. So, rather than getting every field every time, you are only getting the information that actually changed. So, in your subscription, you can detect what changed and deal with that field individually if you need to. In the code above, I’m just dispatching the new state to my reducer. By doing this, my store has the current state so that when I’m ready to put it in a database, I don’t have to go around my form and gather up all the information. I already have it all.</p>\n<h2 id=\"Centralized-Form-Handling\"><a href=\"#Centralized-Form-Handling\" class=\"headerlink\" title=\"Centralized Form Handling\"></a>Centralized Form Handling</h2><p>And that’s what I mean by “Centralized Form Handling.” All my form validation stuff is centralized. All the code I need to get the data out of my form is centralized. And, as you’ll see soon, all the code I need to get the data into my form is centralized.</p>\n<h2 id=\"Completing-the-Picture\"><a href=\"#Completing-the-Picture\" class=\"headerlink\" title=\"Completing the Picture\"></a>Completing the Picture</h2><p>The only bit we have left out is, how do we get the data into the form?</p>\n<p>That’s pretty easy.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">form</span>.<span class=\"title function_\">patchValue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: contact.<span class=\"property\">name</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>:contact.<span class=\"property\">sex</span>,</span><br><span class=\"line\">  <span class=\"attr\">dob</span>:contact.<span class=\"property\">dob</span>.<span class=\"title function_\">toLocaleDateString</span>()</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Where contract is an object that has the new data I want to put into the corresponding fields.</p>\n<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h2><p>One thing we haven’t talked about is my favorite subject of testing. Because all of our logic resides in our TypeScript file, testing our screen logic becomes almost trivial. In fact, if you’ve done this correctly, you shouldn’t need to write anything more than a set of Unit Tests to make sure your screen works as expected. If you marry this with NgRX&#x2F;Store, you will be even better off because you’ll never have to deal with a real database while testing your screen. And you won’t have to do a lot of mocking to achieve this.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>So, maybe this hasn’t convinced you. So, here is a challenge. Try it! While I have had people reject this model when I explain it to them, those who have actually tried it have seen that it really is a superior model. Which just goes to show that my dad was right, “It is amazing how much I don’t understand, when it doesn’t fit my plan.”  </p>\n<h2 id=\"Further-Your-Education\"><a href=\"#Further-Your-Education\" class=\"headerlink\" title=\"Further Your Education:\"></a>Further Your Education:</h2><p><a href=\"//blog.thoughtram.io/angular/2016/06/22/model-driven-forms-in-angular-2.html\">Reactive Forms in Angular</a> <a href=\"//scotch.io/tutorials/using-angular-2s-model-driven-forms-with-formgroup-and-formcontrol\">Using Angular’s Model Driven Forms</a> <a href=\"//toddmotto.com/angular-2-forms-reactive\">Angular Reactive Form Fundamentals</a> <a href=\"//angular.io/docs/ts/latest/guide/reactive-forms.html\">Reactive Forms</a> (From the Angular Site)</p>\n",
            "tags": [
                "angular",
                "model driven",
                "reactive forms"
            ]
        },
        {
            "id": "http://davembush.github.com/more-control-with-angular-flex-layout/",
            "url": "http://davembush.github.com/more-control-with-angular-flex-layout/",
            "title": "More Control with Angular Flex Layout",
            "date_published": "2017-04-11T10:30:00.000Z",
            "content_html": "<p>If you are using Angular(2+) and you are looking for an easy way to layout your components that gives you lots of flexibility and very few restrictions, you owe it to yourself to checkout <a href=\"//github.com/angular/flex-layout\">Angular Flex Layout</a>.  While it is still in Beta, the framework is quite usable.  I’ve been using it in one of my projects and I’ve been quite happy with the results.</p>\n<figure>![](/uploads/2017/04/image-2.png \"More Control with Angular Flex Layout\") Photo via [VisualHunt.com](//visualhunt.com/re/7d8037)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"The-Old-Days\"><a href=\"#The-Old-Days\" class=\"headerlink\" title=\"The Old Days\"></a>The Old Days</h2><h3 id=\"Straight-CSS\"><a href=\"#Straight-CSS\" class=\"headerlink\" title=\"Straight CSS\"></a>Straight CSS</h3><p>I tell people, “I’ve been programming websites since ‘Al Gore invented the Internet’” Which is to say, some time prior to 1998. So, I’ve had to deal with layout issues for a very long time. At least in terms of “Internet Time.” And during that time, being able to lay things out on the page in some sort of intelligent way has matured quite a bit. But still, coding it all by hand, unless you are a fulltime CSS person, is not the best use of my time.</p>\n<p>This is, in part, why Bootstrap was created.</p>\n<h3 id=\"Bootstrap\"><a href=\"#Bootstrap\" class=\"headerlink\" title=\"Bootstrap\"></a>Bootstrap</h3><p>I generally love Bootstrap. A great CSS framework that allows me to style my application easily, is easy to modify, and has a pretty respectable grid systems for placing my controls on the page. The problem with Bootstrap though is that the grid system is really all you have available for layout, and it is rather limited. At least that has been my experience. By default, you get a grid with 12 columns. And while you can next grids in other grids, you still end up with alignment issues. There must be an easier way.</p>\n<h3 id=\"AngularJS-Material-Design\"><a href=\"#AngularJS-Material-Design\" class=\"headerlink\" title=\"AngularJS Material Design\"></a>AngularJS Material Design</h3><p>The Angular Flex Layout used to be part of the AngularJS Material Design project. But instead of making it part of the Angular Material Design project, it has been broken out so that we can use it in combination with other systems. Grids where they make sense and Flex Layout where that will work better.</p>\n<h2 id=\"Flex-Layout-Benefits\"><a href=\"#Flex-Layout-Benefits\" class=\"headerlink\" title=\"Flex Layout Benefits\"></a>Flex Layout Benefits</h2><h3 id=\"No-Grids\"><a href=\"#No-Grids\" class=\"headerlink\" title=\"No Grids\"></a>No Grids</h3><p>Now, what makes Flex Layout so great? The first thing that I think of is that I can do everything I was able to do with the Bootstrap grid system, but I have a lot more control. In fact, this past week, I converted an existing layout that was using nested grids to achieve the layout I was looking for and flattened it significantly by switching it to use Flex. You see, in Flex, you can say you want a row and then for each cell in that row, you can specify the width of the cell in any unit you want, or you can tell it to take up the remaining space. And just like Bootstrap grids, the DIVs wrap if needed.</p>\n<h3 id=\"Directive-Based\"><a href=\"#Directive-Based\" class=\"headerlink\" title=\"Directive Based\"></a>Directive Based</h3><p>The other thing that is true of flex is that all of this control is specified at the template level. I’m not specifying layout in a file that is separate from the template I want to apply it to.</p>\n<p>Now, the CSS purist might object to this. “Style information should all go in a global CSS file so you aren’t repeating yourself.” They’ll say. </p>\n<p>Well, yes, that’s true, if you are creating multiple pages that you want to all look the same. But we are talking about Angular here. A Single Page Application. If you have multiple templates that all need the same layout information, you are probably not thinking about your components correctly. That is, your problem isn’t a CSS&#x2F;Style issue, it is a component issue.</p>\n<p>In a SPA, each page looks the same because each page uses the same parent component. Rarely, do you really have a need to share layout styles. Mostly we share component look and feel. That’s different.</p>\n<h3 id=\"Responsive\"><a href=\"#Responsive\" class=\"headerlink\" title=\"Responsive\"></a>Responsive</h3><p>And if I want a cell to be one size for desktop and another size for tablets or phones, I can easily specify what size each should be. Similar to how we would do it with Bootstrap, but in much finer detail.</p>\n<h2 id=\"It’s-Just-CSS\"><a href=\"#It’s-Just-CSS\" class=\"headerlink\" title=\"It’s Just CSS\"></a>It’s Just CSS</h2><p>Before we move on, I want to point out that Flex Layout doesn’t do anything that the current CSS spec doesn’t already allow us to do. However, the current Flexbox CSS implementations are so new that each browser implements the spec enough different that we can’t be sure the styles will work the same way as we move from browser to browser.</p>\n<p>What Flex Layout attempts to do is to normalize the differences in a way similar to how jQuery normalized the DOM for us. Someday, we may not need Flex Layout. But until then, this is going to save you a lot of time trying to figure things out.</p>\n<h2 id=\"What-You-Can-Do\"><a href=\"#What-You-Can-Do\" class=\"headerlink\" title=\"What You Can Do\"></a>What You Can Do</h2><h3 id=\"Maintain-Aspect-Ratios\"><a href=\"#Maintain-Aspect-Ratios\" class=\"headerlink\" title=\"Maintain Aspect Ratios\"></a>Maintain Aspect Ratios</h3><p>I first started playing with the Flexbox CSS spec when I needed to implement a layout that included a video player that was bounded by a splitter control. As the splitter resizes the panel, the video needs to shrink and grow maintaining the aspect ratio while at the same time allowing the cell under it to grow and shrink. This is something that Flex can handle easily.</p>\n<h3 id=\"Rows-with-Cells\"><a href=\"#Rows-with-Cells\" class=\"headerlink\" title=\"Rows with Cells\"></a>Rows with Cells</h3><p>As I’ve already mentioned, it is as easy to set up a new row and place wrapping DIVs in it as it is with Bootstrap.</p>\n<h3 id=\"Columns-with-Cells\"><a href=\"#Columns-with-Cells\" class=\"headerlink\" title=\"Columns with Cells\"></a>Columns with Cells</h3><p>But unlike Bootstrap, you can also create groups of Columns with Cells.</p>\n<h3 id=\"Responsive-Card-Layouts\"><a href=\"#Responsive-Card-Layouts\" class=\"headerlink\" title=\"Responsive Card Layouts\"></a>Responsive Card Layouts</h3><p>The last couple of weeks, I needed to implement a card layout that changed the number of columns displayed based on the width of the container. By using Flex Layout along with min-width and max-width on the cards, I was able to get this to layout correctly regardless of the container width.</p>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p>I’m not going to spend a lot of time going over the ins and outs of using Flex Layout. They do a pretty respectable job on the website. But, the one thing I did have trouble getting started with was exactly what syntax to use. Some stuff I found used <code>fx-flex</code> syntax and other sites used <code>fxFlex</code>. The one you want is <code>fxFlex</code>. That and a bit of experimentation should get you well on your way.</p>\n",
            "tags": [
                "angular",
                "css",
                "flex"
            ]
        },
        {
            "id": "http://davembush.github.com/unit-testing-angular-2-with-jsdom/",
            "url": "http://davembush.github.com/unit-testing-angular-2-with-jsdom/",
            "title": "Unit Testing Angular(2+) with JSDOM",
            "date_published": "2017-04-04T10:30:00.000Z",
            "content_html": "<p>Unit Testing Angular(2+) with JSDOM can be problematic unless you know the secret handshake that allows ZoneJS and JSDOM to coexist.</p>\n<p>The great thing about Angular is that you can write Unit Tests from the presentation layer all the way down to calls to the server.  But up until now, you either ran those tests in a browser, which doesn’t work well in a CI system, or you used PhantomJS, which tends to be REALLY slow!  But there is a better way, and hopefully, by the time this post goes live, the patches needed to use JSDOM will be available.  If not, I’ll show you the hack that I’ve found works and the pull request I’m hoping will go live.</p>\n<figure>![](/uploads/2017/04/image.png \"Unit Testing Angular(2+) with JSDOM\")<figcaption>Photo credit: [Juanedc](//www.flickr.com/photos/juanedc/14896919066/) via [Visual Hunt](//visualhunt.com/re/cf947c) / [ CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Why-JSDOM\"><a href=\"#Why-JSDOM\" class=\"headerlink\" title=\"Why JSDOM?\"></a>Why JSDOM?</h2><p>As I mentioned in the introduction, there are two problems that JSDOM fixes.</p>\n<p>To run the Angular unit tests, you need to run them in a browser. The problem with this is that you would need to have a browser installed on your CI server to run them, if you run them at all. It can be done, but if you are working in an environment like the one I work in, it isn’t going to be easy.</p>\n<p>The second choice is to use PhantomJS. Unfortunately, PhantomJS, while easy to install, runs slowly. For all but the most trivial of applications, this isn’t going to work well.</p>\n<p>JSDOM, on the other hand, runs fast like a browser, and doesn’t have the problems that running it on a CI system has. This is because it is a headless browser that never renders. All it does is produce HTML. For unit tests, this is all we really care about. And because it is running inside of Node, it is running as fast as the V8 engine will let it. Making it theoretically faster than running the tests in Chrome. I say, “theoretically faster” because I have not tested this and the V8 engines in the most recent browser tends to be a bit ahead of the V8 engine used in the most recent version of Node.</p>\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Knowing this was possible caused me to give it a try. What I found was that I routinely crashed with the following error.</p>\n<p><code>Cannot set property onreadystatechange of [object Object] which has only a getter</code></p>\n<p>As I googled this, I found several fixes for JSDOM that would allow this to work, but I also discovered that JSDOM did not consider this an issue they needed to fix. And rightly so, why should they adapt just so it would work for Angular2? But, what in the Angular2 code would cause this problem. By doing a search for <code>onreadystatechange</code> in my node_modules directory, I discovered that ZoneJS was:</p>\n<ol>\n<li>Saving off the original definition of <code>onreadystatechange</code></li>\n<li>Overriding the definition with a getter (only)</li>\n<li>Setting the definition back to the original</li>\n</ol>\n<p>Which all works well if the original <code>onreadystatechange</code> has a definition.  But in the case of JSDOM, it doesn’t. Then, when they set the definition back, nothing happens and we keep the definition they created.</p>\n<h2 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution 1\"></a>Solution 1</h2><p>The file in question is <code>property-descriptor.ts</code> under the <code>lib/browser</code> directory (the js version is in the file <code>zone.js</code> under the <code>dist</code> directory). Sticking with the TS file… of version 0.8.5, scroll down to line 64 and you’ll see that they retrieve the current definition but never verify that they actually got something back. But at line 80 they set it back to an empty object if it doesn’t exist.</p>\n<p>The easy fix that seems to work for me, is to just change the new definition so that it works if that is the one that is left over after this function completes:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">XMLHttpRequest</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;onreadystatechange&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">orsc</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span>(<span class=\"params\">f</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">orsc</span> = f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Because we’ve changed the getter from returning a hardcoded value, we also need to set <code>onreadystatechange</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> req = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">req.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = !!req.<span class=\"property\">onreadystatechange</span>;</span><br></pre></td></tr></table></figure>\n\n<p>The full fix looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">canPatchViaPropertyDescriptor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((isBrowser || isMix) &amp;&amp; !<span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(<span class=\"title class_\">HTMLElement</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;onclick&#x27;</span>) &amp;&amp;</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> <span class=\"title class_\">Element</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// WebKit https://bugs.webkit.org/show_bug.cgi?id=134364</span></span><br><span class=\"line\">    <span class=\"comment\">// IDL interface attributes are not configurable</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> desc = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(<span class=\"title class_\">Element</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;onclick&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (desc &amp;&amp; !desc.<span class=\"property\">configurable</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> xhrDesc = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(<span class=\"title class_\">XMLHttpRequest</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;onreadystatechange&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// add enumerable and configurable here because in opera</span></span><br><span class=\"line\">  <span class=\"comment\">// by default XMLHttpRequest.prototype.onreadystatechange is undefined</span></span><br><span class=\"line\">  <span class=\"comment\">// without adding enumerable and configurable will cause onreadystatechange</span></span><br><span class=\"line\">  <span class=\"comment\">// non-configurable</span></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">XMLHttpRequest</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;onreadystatechange&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">orsc</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span>(<span class=\"params\">f</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">orsc</span> = f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> req = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">  req.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = !!req.<span class=\"property\">onreadystatechange</span>;</span><br><span class=\"line\">  <span class=\"comment\">// restore original desc</span></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">XMLHttpRequest</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;onreadystatechange&#x27;</span>, xhrDesc || &#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution 2\"></a>Solution 2</h2><p>The <a href=\"//github.com/angular/zone.js/pull/711/commits/edc9d7a2145f9ddc4acbe6a49d1325d676c65429\">current pull request</a> adds a bit more code that I’m assuming is needed. I haven’t tested this, but I’m assuming it is a safer alternative than my hack.</p>\n<h2 id=\"One-Additional-Gotcha\"><a href=\"#One-Additional-Gotcha\" class=\"headerlink\" title=\"One Additional Gotcha!\"></a>One Additional Gotcha!</h2><p>Once I had this basic issue solved, I was able to run my suite of test except one. It turns out <code>element.innerText</code> doesn’t exist in JSDOM. There is a technical reason for this that I won’t discuss here other than to say it is, evidently, somehow dependent on the rendering engine, and since JSDOM has no rendering engine (remember, it just produces HTML) it can’t really implement <code>innerText</code>. So, I had to refactor my test to use <code>innerHTML</code> instead. Trivial issue. Just something you need to be aware of.</p>\n<h2 id=\"Setting-Up-Karma\"><a href=\"#Setting-Up-Karma\" class=\"headerlink\" title=\"Setting Up Karma\"></a>Setting Up Karma</h2><p>Now, from here to the end, we are going to assume that this got fixed, or you are using one of the solutions above. Now, how do we set karma up to use JSDOM instead of Chrome or PhantomJS?</p>\n<p>Well, for starters, you’ll need to <code>npm install --save-dev jsdom karma-jsdom-launcher</code>.</p>\n<p>Then, you’ll need to make a few changes to your <code>karma.conf.js</code> file.</p>\n<p>First, in the plugins array, add <code>require(&#39;karma-jsdom-launcher&#39;)</code>.</p>\n<p>Then, at the bottom of the file, change the browsers line to specify <code>&#39;jsdom&#39;</code> instead of <code>&#39;Chrome&#39;</code>.</p>\n<p>I normally just comment out the Chrome line and put in a line for jsdom so I can use Chrome to debug when I need to.</p>\n<p>I’ve always said that Angular mixes the best of AngularJS and React and with this fix, we now have some React Unit Testing goodness added into the mix.</p>\n",
            "tags": [
                "unit test",
                "jsdom",
                "karma"
            ]
        },
        {
            "id": "http://davembush.github.com/coasting-curiosity-diversification-and-being-awesome/",
            "url": "http://davembush.github.com/coasting-curiosity-diversification-and-being-awesome/",
            "title": "Coasting, Curiosity, Diversification and Being Awesome",
            "date_published": "2017-03-21T10:30:00.000Z",
            "content_html": "<p>There are two twin evils that I see in the programming community. The first is the programmer who knows what he knows and has no desire to learn more. I call these, “coasters”. And then there are the programmers who are so curious that they try to learn every new thing that comes along, with no focus. The interesting thing is, both of these types of people end up at the same place. Out of work. The cure for both is the same.  Being Awesome.</p>\n<figure>![](/uploads/2017/03/image-3.png \"Coasting, Curiosity, Diversification and Being Awesome\")<figcaption>Photo credit: [aaronHwarren](//www.flickr.com/photos/pedalfreak/3745777389/) via [Visual hunt](//visualhunt.com/re/1b14eb) / [ CC BY-ND](//creativecommons.org/licenses/by-nd/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Coasting-Is-for-Morons\"><a href=\"#Coasting-Is-for-Morons\" class=\"headerlink\" title=\"Coasting Is for Morons\"></a>Coasting Is for Morons</h2><p>If you are reading this blog, you are probably not in this category. In fact, it probably frustrates you to watch these types of programmers as much as it does me. But for completeness, let’s describe the coasting moron.</p>\n<p>These are the programmers who learned how to program more than 5 years ago and got a job and have never moved since. They are still programming in the same language they learned originally. They are probably still at the same job they started at. And, if they had to get a new job, they probably would not be able to find one because their skills are SO out-of-date.</p>\n<p>They are still using Web Forms or MVC in ASP.NET, have no idea how to use anything beyond .NET 2.0. Or worse, they learned how to program in Visual Basic back in the day and couldn’t write a proper .NET application to save their life.</p>\n<p>They know HTML 3.2 and maybe xHTML, but have no idea what HTML5 is.</p>\n<p>And if they had to use JavaScript, they are probably still stuck using ECMA Script 3. This is to say nothing of knowing the dangers of global variables or what prototypal inheritance is.</p>\n<p>They are doomed because they are so far behind, it would be impossible to catch up.</p>\n<h2 id=\"Curiosity-Killed-the-Cat\"><a href=\"#Curiosity-Killed-the-Cat\" class=\"headerlink\" title=\"Curiosity Killed the Cat\"></a>Curiosity Killed the Cat</h2><p>On the opposite end of the spectrum is the programmer who chases every new programming idea that comes out. These are the programmers who typically complain about things like <a href=\"/javascript-fatigue-makes-me-scream/\">JavaScript Fatigue</a>. While they are slightly better off than the programmer who learns nothing, they problem they face is that because they are trying to learn too much at once, they learn nothing. You have to commend their curiosity though.</p>\n<p>Fortunately, with a bit of structure, we can help the curious programmer. They are already motivated. And while I might be able to help the coaster in a one on one situation, I’m not going to spend a lot of time trying in this post. Why write to people who aren’t even likely to read?</p>\n<p>But I can help you.</p>\n<h2 id=\"Diversification-for-Programmers\"><a href=\"#Diversification-for-Programmers\" class=\"headerlink\" title=\"Diversification for Programmers\"></a>Diversification for Programmers</h2><p>So, first, what should you learn next? Another language? A new operating system?</p>\n<p>Well, the first thing you need to do is list out all the things you are interested in. Once you have that list, the next thing you want to try to figure out is which of those things is going to make you more valuable where you are today without causing you to learn more than one new thing.</p>\n<p>For example, you may currently know how to program in C# or VB.NET but only have a rough idea of how to use SQL other than basic CRUD operations. Maybe a deep dive into <a href=\"/SqlForNetProgrammers\">learning SQL</a> would be the next path.</p>\n<p>Or maybe you are doing some web development and know a bit of JavaScript, but haven’t looked at any of the SPA frameworks that are currently available. Pick one and learn it. I recommend Angular2 at this point, but it doesn’t really matter. Find something on your list and learn it.</p>\n<p>Anything you learn is good. Or maybe you are interested in a brand new language, but you can stay within the same basic framework. For example, I know C#, but I’m intrigued by functional programming. F# is on my short list of things I might learn next.</p>\n<p>The idea is to move incrementally rather than leaping to something where everything is new again. If you can somehow work this all into your day job, even better. You can’t always, but it is the fastest way to learn new stuff.</p>\n<h3 id=\"Learn-Outside-of-Programming\"><a href=\"#Learn-Outside-of-Programming\" class=\"headerlink\" title=\"Learn Outside of Programming\"></a>Learn Outside of Programming</h3><p>But it isn’t all about programming, is it? What can you learn that isn’t directly related to programming? There are all kinds of things. And the broader knowledge can help your programming as well. Maybe you have a side interest in business, finance, or marketing. Maybe you find yourself having trouble with interpersonal relationships. There are all kinds of other things you could be studying that really have nothing to do with programming directly, but have everything to do with making you more valuable both as a person and as an employee.</p>\n<p>Find outside interest!</p>\n<h2 id=\"Focus-Makes-Awesome\"><a href=\"#Focus-Makes-Awesome\" class=\"headerlink\" title=\"Focus Makes Awesome\"></a>Focus Makes Awesome</h2><p>Having said all of this. The real trick is focus. As I pointed out above, it is great to be curious. We can do something with that. But, if you try to learn more than 3 things at a time, you will end up learning nothing well.</p>\n<p>One of the guys I work with has a Trello board with a list of possible things to learn. I have a stack of sample kindle books to read someday, maybe. They are things I was curious about at one point. If I’m still interested when I’m looking for something new to read, I’ll pull them down and read the sample.</p>\n<p>But here’s the thing. I only focus on learning 2 or 3 new things at a time. Generally, one new programming thing and one new not programming thing.</p>\n<p>Currently, I’m learning all things Angular2. My goal is to be THE Angular2&#x2F;JavaScript expert in Connecticut. I’m well on my way.</p>\n<p>I have two other interest that have nothing to do with programming. One is Options Trading. I’m at a point with that where it only takes a few minutes a day. So, I have room for something else.</p>\n<p>That something else is everything brain science. Psychology, Sociology, Hypnosis, Memory, and more. It is a fascinating world.</p>\n<h2 id=\"Be-Awesome\"><a href=\"#Be-Awesome\" class=\"headerlink\" title=\"Be Awesome\"></a>Be Awesome</h2><p>There is a story about two guys who were in the woods when they ran into a bear. Being smart hikers, they agreed to try standing still to see if the bear would just ignore them. This worked well.</p>\n<p>But, after the bear left, one of the guys said to the other, “What would you have done if standing still didn’t work?” To which the second guy said, “I would have run as fast as I can.” The first guy responded, “But, do you really think you can outrun a bear?!” And then the second guy says, “I wouldn’t have to out run the bear. I only need to out run you.”</p>\n<p>And that is the market we live in. The good news is, there are so many people that are coasting right now that “awesome” is a pretty easy level to achieve in life.</p>\n<p>So, go out, do some focused learning and be awesome</p>\n",
            "tags": [
                "programming",
                "javascript",
                "c#",
                ".net"
            ]
        },
        {
            "id": "http://davembush.github.com/3-javascript-fallacies-you-might-believe/",
            "url": "http://davembush.github.com/3-javascript-fallacies-you-might-believe/",
            "title": "3 JavaScript Fallacies You Might Believe",
            "date_published": "2017-03-14T11:30:00.000Z",
            "content_html": "<p>You know, you think the whole world knows something is true until you hear someone people respect say something really dumb.  The three JavaScript fallacies I have here are actual statements I’ve heard over the last week during a discussion about Angular2 and Rect.  What makes these fallacies particularly interesting is that they sound plausible.  In fact, there are time when they are even true.  But in the larger context of a JavaScript application they are nearly always false.</p>\n<p>So, here are 3 JavaScript Fallacies you may still believe that you may want to reevaluate.</p>\n<figure>![](/uploads/2017/03/image-2.png \"3 JavaScript Fallacies You Might Believe\")<figcaption>Photo credit: [bark](//www.flickr.com/photos/barkbud/4341791754/) via [VisualHunt](//visualhunt.com/re/8dc251) / [ CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Direct-Access-to-the-DOM-is-Faster-than-using-a-Virtual-DOM\"><a href=\"#Direct-Access-to-the-DOM-is-Faster-than-using-a-Virtual-DOM\" class=\"headerlink\" title=\"Direct Access to the DOM is Faster than using a Virtual DOM\"></a>Direct Access to the DOM is Faster than using a Virtual DOM</h2><p>OK. I will grant that if you only ever want to change one thing on the screen at a time, yes accessing the DOM directly from JavaScript is probably going to be faster than going through some kind of Virtual DOM layer as is common in React, Angular2 and several other libraries and frameworks that are available today.</p>\n<p>But, the fact is, that’s not how most code works. If you are writing this kind of application and you are using a library or framework that uses a virtual DOM layer, something is wrong. I would argue you’ve probably chosen the wrong library for what you are trying to do.</p>\n<p>But, let’s assume that you are writing a typical SPA application that doesn’t just update one area of the screen. In this case, the fastest way to make this update is all at once. One call to the DOM from JavaScript. I’ve written before about how <a href=\"/javascript-performance-tweaks/\">slow accessing the DOM is</a>. And for all the performance enhancements since I wrote that article, accessing the DOM is still one of the slowest things you can do. So, a framework that lets you write your code in a way similar to how you would write to the DOM directly, but lets you do this in a way that doesn’t actually write to the DOM until the last minute is FASTER than writing to the DOM directly.</p>\n<h2 id=\"Immutable-Objects-are-Necessarily-Slower-than-Mutable-Objects\"><a href=\"#Immutable-Objects-are-Necessarily-Slower-than-Mutable-Objects\" class=\"headerlink\" title=\"Immutable Objects are Necessarily Slower than Mutable Objects\"></a>Immutable Objects are Necessarily Slower than Mutable Objects</h2><p>Functional JavaScript programming has become the latest cool new buzzword in the JavaScript community, for a lot of good reasons, but one main concept that comes along for the ride is the idea of making all of our object immutable. This means, for example, that if I want to modify an array, instead of changing the current array, I would create a new array and copy the elements and the new element into it. No more push.</p>\n<p>Similarly, for a regular object that isn’t a list, we would create a new object and copy the existing elements into it and then overwrite the items that have changed.</p>\n<h3 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h3><p>Now, why would we want to go to all of this work? It does seem like it would be faster to just modify the existing object. Right?</p>\n<p>But you see, there is this little thing called “change detection” that more than makes up for all of this overhead I just described.</p>\n<p>In most of our applications, at some point we want to know if an object has changed, right? If we can’t rely on the fact that we have a new object, we have to do a deep comparison of the two objects until we’ve determined that there is a difference, or we’ve been through the whole list and verified that the nothing has changed.</p>\n<p>Once we can rely on objects being immutable, we can use the equals operator (&#x3D;&#x3D;, or &#x3D;&#x3D;&#x3D;) to see if the object has changed. I’m sure you can see that this takes much less time than evaluating an entire object tree, even if you object only has two properties in it that need to be compared.</p>\n<h3 id=\"Real-Problem\"><a href=\"#Real-Problem\" class=\"headerlink\" title=\"Real Problem?\"></a>Real Problem?</h3><p>But let’s step back and look at the bigger picture. In most of the code that I write, what we are really talking about is immutable arrays. Yes there are other non-array places where we would use immutable objects, but my guess is that immutable objects impacts 80% of my code. Get a list of records from the database for example.</p>\n<p>The fact of the matter is, every time I access the database, I get a new array back anyhow. Even in the case of retrieving a single record, I still get a new object back.</p>\n<p>If I need to delete an element from an array, here again, I’ll end up creating a new object.</p>\n<p>In fact, except modifying a row, or adding a record to the end of a list, just about everything I tend to do with an array ends up being an immutable operation anyhow. By making everything immutable, we are forcing the areas that we aren’t already implementing immutability to be immutable. The point is, in terms of performance the net is an obvious gain both in terms of performance and in terms of consistency.</p>\n<p>And, going back to the issue of rendering our data into the DOM, because the change detection is faster, we can determine that a particular component doesn’t need to have the DOM updated quicker rather than re-rendering the entire DOM.</p>\n<h2 id=\"Backwards-Compatibility-means-I-can’t-upgrade-my-Development-Environment\"><a href=\"#Backwards-Compatibility-means-I-can’t-upgrade-my-Development-Environment\" class=\"headerlink\" title=\"Backwards Compatibility means I can’t upgrade my Development Environment\"></a>Backwards Compatibility means I can’t upgrade my Development Environment</h2><p>Continuing on, remember the conversation I’m referencing was about React and Angular2. And the guy who was making these statements about performance was asserting that he couldn’t upgrade his React environment to use the latest and greatest tool chain because he had to support older browsers. He specifically stated IE6. Now, knowing the site he’s talking about, I doubt we make any money at all from people who run IE6. But, let’s just assume for a second that we do.</p>\n<h3 id=\"So-what-you’re-telling-me-is…\"><a href=\"#So-what-you’re-telling-me-is…\" class=\"headerlink\" title=\"So, what you’re telling me is…\"></a>So, what you’re telling me is…</h3><p>… that you are willing to let performance suffer for 99% of your very large customer based because you need to support the 1% (I’m being generous here) of the people who have refused to upgrade and probably aren’t producing any revenue for the company? Maybe I’m missing something, but this seems rather short-sighted. That, or maybe you just don’t know that the new features in the newer browsers allow you to not just write better JavaScript but also allow you to do things without JavaScript that perform better. If you are really interested in writing fast web sites, you should be moving to the latest and greatest tool chain as often as is humanly possible.</p>\n<h3 id=\"Bugs-and-Security-Risk\"><a href=\"#Bugs-and-Security-Risk\" class=\"headerlink\" title=\"Bugs and Security Risk\"></a>Bugs and Security Risk</h3><p>Just this last week I saw a study that said that over a third of the web sites on the Internet were running code that left them venerable to security risk. That is, the code they were running had known security risk. By not upgrading your tools for public facing sites, you are leaving your company at risk. When your site is compromised, do you want to be the one who has to explain to your boss that it is because you refused to upgrade your tools? I sure don’t.</p>\n<h3 id=\"But-what-about-the-old-browsers\"><a href=\"#But-what-about-the-old-browsers\" class=\"headerlink\" title=\"But what about the old browsers?\"></a>But what about the old browsers?</h3><p>Well, if you really need to support the old stuff, there are polyfills that you can apply that will let you run the newer stuff in the older browsers. Seems to me you get the best of both worlds. Your customers who are up to date benefit with a better performing, and less buggy website, and the customers using older browser still get to see something. Are there places where you might still have to make some compromises. Sure. There are a few places. But not enough that you shouldn’t upgrade.</p>\n<h2 id=\"What-is-the-Bigger-Problem\"><a href=\"#What-is-the-Bigger-Problem\" class=\"headerlink\" title=\"What is the Bigger Problem?\"></a>What is the Bigger Problem?</h2><p>So, how can this happen? How can really smart people make really bad choices like this?</p>\n<p>I don’t really know, but I have a few theories.</p>\n<p>One is just plain arrogance. Being so sure you are right that you never stop to think you might be wrong.</p>\n<p>I have to admit, when I first learned about immutability, I thought it sounded slow too. But, my thinking went along the lines of, “well, much smarter people than me are working on this, they must think it makes sense. I wonder why?” And then I started digging for answers.</p>\n<p>So, I would encourage those who are responsible for making decisions to make sure that the people they are listening to can actually back up what they are saying and not just assume they are right because they seem so confident.</p>\n",
            "tags": [
                "angular",
                "javascript",
                "performance",
                "react.js"
            ]
        },
        {
            "id": "http://davembush.github.com/confident-programmer-secrets-revealed/",
            "url": "http://davembush.github.com/confident-programmer-secrets-revealed/",
            "title": "Confident Programmer Secrets, Revealed",
            "date_published": "2017-03-07T12:30:00.000Z",
            "content_html": "<p>To say there are secrets to being a confident programmer may seem a bit over the top. But, you would be surprised at what makes a programmer seem confident, how you can be more confident, why confidence is no real indicator of truth, and why you need to arm yourself against confidence.</p>\n<figure>![](/uploads/2017/03/image.png \"Confident Programmer Secrets Revealed\") Photo via [VisualHunt.com](//visualhunt.com/re/7edea7)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Why-Be-Confident\"><a href=\"#Why-Be-Confident\" class=\"headerlink\" title=\"Why Be Confident\"></a>Why Be Confident</h2><h3 id=\"Persuade-the-Decision-Makers\"><a href=\"#Persuade-the-Decision-Makers\" class=\"headerlink\" title=\"Persuade the Decision Makers\"></a>Persuade the Decision Makers</h3><p>Look around the organization you work at.  Have you ever noticed that there are one or two people who have your manager’s ear?  Every time a decision needs to be made, the boss goes to them?  Why is that?  Why don’t they come to you?  You know just as much as they do, right?  Could it be that you simply don’t portray yourself as confident?  I didn’t say you weren’t confident.  Just that you aren’t perceived as confident.  Don’t worry, we’ll fix that shortly.</p>\n<h3 id=\"Better-Pay\"><a href=\"#Better-Pay\" class=\"headerlink\" title=\"Better Pay\"></a>Better Pay</h3><p>You will also notice that people who seem more confident also command a larger salary. This is both because their confidence has moved them up the corporate ladder faster and because they are better able to interview for positions that most people would feel like are out of their reach. Confidence, and the ability to communicate confidence is better for your bottom line.</p>\n<h3 id=\"Interview-Skills\"><a href=\"#Interview-Skills\" class=\"headerlink\" title=\"Interview Skills\"></a>Interview Skills</h3><p>Anyone who knows me knows I’m a big proponent of interviewing for new jobs even if you like where you are. But let’s raise the bar on that. Don’t just interview. Practice interviewing for jobs that are a bit out of your reach projecting confidence that you do, indeed, qualify. I can tell you from firsthand experience. If you know your stuff and you project confidence that you know your stuff, you’ll end up being asked to fill positions you never dreamed of filling.</p>\n<h3 id=\"Consistency-with-Who-You-Are\"><a href=\"#Consistency-with-Who-You-Are\" class=\"headerlink\" title=\"Consistency with Who You Are\"></a>Consistency with Who You Are</h3><p>You are confident, right? Imagine what would happen if you projected that confidence? How would you feel if everyone else thought you were confident as well?</p>\n<h3 id=\"Feel-better\"><a href=\"#Feel-better\" class=\"headerlink\" title=\"Feel better\"></a>Feel better</h3><p>Let’s just assume for a second that nothing else I’ve said comes true. I can tell you that if you follow my suggestions on how to be confident, you will feel better about yourself. The fact of the matter is, you may have to exercise this confidence muscle a bit. But the good news is that by following my confidence tips, you’ll also end up feeling more confident which will make the tips easier to implement, which will make you feel more confidence. Confidence breeds confidence. And, confidence feels really good.</p>\n<h2 id=\"How-to-Be-Confident\"><a href=\"#How-to-Be-Confident\" class=\"headerlink\" title=\"How to Be Confident\"></a>How to Be Confident</h2><h3 id=\"Know-your-stuff\"><a href=\"#Know-your-stuff\" class=\"headerlink\" title=\"Know your stuff\"></a>Know your stuff</h3><p>While it is possible to fake confidence, eventually that is going to catch up with you. Confidence isn’t a con game. Confidence is a projection of something that already exist. So, the foundation of confidence is to know your stuff. If you are projecting confidence about all things JavaScript, you’d better know all things JavaScript. Follow podcast. Read blogs. Read books.  Rinse, lather, repeat.</p>\n<p>But the simple fact is, there are some of you who know all there is to know about a subject and you still aren’t confident.</p>\n<h3 id=\"Stand-up-straight\"><a href=\"#Stand-up-straight\" class=\"headerlink\" title=\"Stand up straight\"></a>Stand up straight</h3><p>I’ve written before about how <a href=\"/the-psychology-of-programming/\">your body language impacts your perception of yourself</a>. I’ll say it again here. If you want to feel more confident, stand up straight. It isn’t just good for your posture. It’s good for your emotional health. And the fastest way I know of feeling more confident and being perceived as more confident is to stand up as straight as I can. As you stand, walk and sit, imagine a string attached to your scalp pulling you up. Be as tall as you possibly can. Tuck in your belly.</p>\n<h3 id=\"Spread-out\"><a href=\"#Spread-out\" class=\"headerlink\" title=\"Spread out\"></a>Spread out</h3><p>Another body position that communicates confidence is spreading out. The open, spread out posture communicates that you are comfortable in your own skin. Avoid the closed off posture. This communicates that you are protecting yourself. The obvious question the brain has to ask is, “what are they protecting themselves from?”</p>\n<h3 id=\"Speak-with-authority\"><a href=\"#Speak-with-authority\" class=\"headerlink\" title=\"Speak with authority\"></a>Speak with authority</h3><p>The more confidently you can state a fact, the more likely it is to be accepted. In fact, I’ve seen people state things that were verifiably false with such confidence even I wanted to believe them. The only thing that kept me from doing so is that I intentionally went into that meeting keeping in mind that I was probably the most authoritative person on the subject in the room even though the person we were meeting with was the one who had been designated the authority for the moment.</p>\n<h3 id=\"Start-a-blog\"><a href=\"#Start-a-blog\" class=\"headerlink\" title=\"Start a blog\"></a>Start a blog</h3><p>Starting a blog is a confidence muscle exercise. The more you write, the more you will end up knowing about what you are writing about. It will also be the place where you are told you are wrong the most often. I’ve written articles in the past where people have told me I was wrong. Many times, they haven’t been very nice in how they tell me. But this has been good because now I have learned to take criticism and correction even of the worst kind without losing confidence in my overall knowledge. I’ve learned stuff in the process which has made me even more confident.</p>\n<h3 id=\"Be-willing-to-be-wrong\"><a href=\"#Be-willing-to-be-wrong\" class=\"headerlink\" title=\"Be willing to be wrong\"></a>Be willing to be wrong</h3><p>Which leads to the last point. Be willing to be wrong. You can be confident. As long as you are right most of the time, you can be wrong a few times and no one will care. What you don’t want to do is to be wrong all the time. Soon, no one will listen to you. This is what happened in the situation I mentioned above.  here were so many things the “authority” said during our meeting that were verifiably wrong that I left not trusting anything he had said.</p>\n<h2 id=\"Defending-against-confidence\"><a href=\"#Defending-against-confidence\" class=\"headerlink\" title=\"Defending against confidence\"></a>Defending against confidence</h2><p>And this leads nicely into my next point. Just because someone is confident, doesn’t mean they are right. And some people will, knowingly or not, project confidence to bullshit their way to where they want to go.</p>\n<h3 id=\"When-Two-People-Meet\"><a href=\"#When-Two-People-Meet\" class=\"headerlink\" title=\"When Two People Meet\"></a>When Two People Meet</h3><p>Basic social interaction theory says that when two people meet, a pecking order will be established such that one will be the leader and the other the follower. In a group, a leader will emerge. If you are a speaker, you can leverage this by identifying the perceived leader and speaking to them. Everyone else will follow.</p>\n<p>In our situation, you want to go into meetings with the knowledge that you know as much as the person leading. That everything that person says is subject to how you understand the world. If they say something that contradicts your understanding, you can do one of two things. You can contradict on the spot. Or, you can verify later. This depends on the situation and how well each strategy will advance your cause. In the meeting I’ve been referencing, I kept my mouth shut. He was already going the direction we wanted him to go, contradicting him would have worked against us and would not have served our purposes even a small amount.</p>\n<p>But, I maintained my status as the authority in the room, even if I said nothing.</p>\n<h3 id=\"Fact-Checking\"><a href=\"#Fact-Checking\" class=\"headerlink\" title=\"Fact Checking\"></a>Fact Checking</h3><p>I already mentioned this, but let’s bring this further into focus. Just because someone says something is true doesn’t mean it is. If someone says something and this is the first you’ve heard of it. You’d better make sure it really is true. This goes double if you’ve already heard him say things you know are wrong.</p>\n<p>Which items you actually point out will depend on the situation. Again, in the case above, while we were told several things that were wrong, I only pointed out one that could have been a potential stumbling block.</p>\n<h3 id=\"Emotional-Awareness\"><a href=\"#Emotional-Awareness\" class=\"headerlink\" title=\"Emotional Awareness\"></a>Emotional Awareness</h3><p>One thing I think programmers tend to have a really hard time doing is listening to their emotions. But, if you get good at this, you will often know that something is not right before you can articulate why. Listen to that inner voice.</p>\n<h2 id=\"Authority-and-Confidence\"><a href=\"#Authority-and-Confidence\" class=\"headerlink\" title=\"Authority and Confidence\"></a>Authority and Confidence</h2><h3 id=\"Confidence-Without-Speaking\"><a href=\"#Confidence-Without-Speaking\" class=\"headerlink\" title=\"Confidence Without Speaking\"></a>Confidence Without Speaking</h3><p>You might think that authority and confidence are the same thing. But they aren’t. I can be the perceived authority on a subject without confidence and I can portray confidence without being the authority. In fact, just how I hold myself shows that I am confident even if I have no authority or don’t perceive myself as an authority.</p>\n<h3 id=\"Confidence-vs-Respect\"><a href=\"#Confidence-vs-Respect\" class=\"headerlink\" title=\"Confidence vs Respect\"></a>Confidence vs Respect</h3><p>In the same way, I can be confident while still respecting those who are in authority. We all have people who are in authority over us. This does not have to reduce our confidence. I’m good at what I am good at. They are good at what they do. We each have jobs that we are best suited for. Confidence doesn’t mean we take over, it just means we have influence.</p>\n<h2 id=\"Don’t-Get-Caught\"><a href=\"#Don’t-Get-Caught\" class=\"headerlink\" title=\"Don’t Get Caught\"></a>Don’t Get Caught</h2><h3 id=\"Don’t-Assert-Something-You-Can’t-Defend\"><a href=\"#Don’t-Assert-Something-You-Can’t-Defend\" class=\"headerlink\" title=\"Don’t Assert Something You Can’t Defend.\"></a>Don’t Assert Something You Can’t Defend.</h3><p>Do yourself a favor. If you aren’t sure, keep your mouth shut. As I’ve already illustrated, if you say something that someone else can verify is inaccurate, everything else you say is subject to evaluations.</p>\n<h3 id=\"Know-Your-Topic-Inside-Out\"><a href=\"#Know-Your-Topic-Inside-Out\" class=\"headerlink\" title=\"Know Your Topic Inside Out\"></a>Know Your Topic Inside Out</h3><p>The danger, of course, is that you may think you know, but you really don’t. Make sure you are a student of what you think you know. Don’t be that guy who thinks he knows, but really knows nothing. Or that guy who is working with old information.</p>\n<h4 id=\"4-Levels-of-Learning\"><a href=\"#4-Levels-of-Learning\" class=\"headerlink\" title=\"4 Levels of Learning\"></a>4 Levels of Learning</h4><p>There are four levels of learning. Or knowledge. The first level is that we don’t even know that there is something to know. Most of us start there. But the second level is probably the most dangerous. Knowing just enough to think you know when you really know relatively little. As you progress, you’ll eventually end up realizing there is a whole lot more to know than what you thought until finally, you know the subject so well you aren’t even thinking about it anymore. Kind of like breathing.</p>\n<p>You want to make sure you are working from the level of knowing the subject so well, it is like breathing. The problem is, many people who are in the second level think they are in the fourth level. If you are not reading the latest on the subject, not reading blog post, not listening to podcast, you are probably still in level 2 and working off of assumptions rather than facts.</p>\n<h4 id=\"One-eyed-Man-is-King\"><a href=\"#One-eyed-Man-is-King\" class=\"headerlink\" title=\"One-eyed Man is King\"></a>One-eyed Man is King</h4><blockquote>\n<p>In the kingdom of the blind, the one-eyed man is king.</p>\n</blockquote>\n<p>The point is this, you may currently be that one-eyed man. The only reason you have the authority you do is because you are the best they have. In fact, most of us are where we are because that’s the best they have. But, don’t rest there. Try to gain that second eye. You really don’t want to be in a position where a two-eyed man can come in and point out all that isn’t right. This is why you want to go for the fourth level of learning in all that is important to you.</p>\n",
            "tags": [
                "programming",
                "authority",
                "confidence"
            ]
        },
        {
            "id": "http://davembush.github.com/accessing-private-fields-in-typescript/",
            "url": "http://davembush.github.com/accessing-private-fields-in-typescript/",
            "title": "Accessing Private Fields in TypeScript",
            "date_published": "2017-02-28T12:30:00.000Z",
            "content_html": "<p>Have you ever needed to access a private field in TypeScript? The most common place you may find yourself needing to do this is while writing a unit test. But, I also found myself needing to do this while using a JavaScript library where the field wasn’t declared in the type file for the library I was using.</p>\n<p>Now, suppose you could access those private fields effortlessly and easily. How valuable would that be to you?</p>\n<figure>![](/uploads/2017/02/image-3.png \"Accessing Private Fields in TypeScript\") Photo via [VisualHunt](//visualhunt.com/)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Unit-Test\"><a href=\"#Unit-Test\" class=\"headerlink\" title=\"Unit Test\"></a>Unit Test</h2><p>In general, when you write a unit test, you only want to access public fields for both the purposes of setting up your tests and for evaluating the success or failure of the tests.</p>\n<p>But, occasionally, this is not possible.</p>\n<p>Now, what most people don’t realize is that, unlike private members in JavaScript, where the members aren’t accessible, in TypeScript, the resulting JavaScript has the variables just as public as the public members. In fact, the only thing that makes a member private in TypeScript is the compiler. This means that this TypeScript code:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">member1</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ends up looking something like this in JavaScript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">member1</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">bar</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Which means that</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = v.<span class=\"property\">member1</span>;</span><br><span class=\"line\">v.<span class=\"title function_\">bar</span>();</span><br></pre></td></tr></table></figure>\n\n<p>Should be working code.</p>\n<p>But, if you type that code into JavaScript and try to compile it, it won’t compile. Which means you can’t write your unit test in TypeScript and access the private variables.</p>\n<p>Or can you?</p>\n<h2 id=\"TypeScript-is-just-JavaScript-with-Sugar\"><a href=\"#TypeScript-is-just-JavaScript-with-Sugar\" class=\"headerlink\" title=\"TypeScript is just JavaScript with Sugar\"></a>TypeScript is just JavaScript with Sugar</h2><p>One small little fact about TypeScript that we seem to forget is that it is just JavaScript with some sugar. What this means in practical terms is that, if we want to, or in this case, need to, we can write plain old boring JavaScript as part of our TypeScript code. And then the other little bit we tend to forget is that we can access a field using the name of the field as an indexer. That is, this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v.<span class=\"property\">member</span> = <span class=\"string\">&#x27;x&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>is functionally the same as this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v[<span class=\"string\">&#x27;member&#x27;</span>] = <span class=\"string\">&#x27;x&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And because it all compiles down to JavaScript, and the private fields are public JavaScript fields, we can use the named index to access the field.</p>\n<h2 id=\"JavaScript-Libraries\"><a href=\"#JavaScript-Libraries\" class=\"headerlink\" title=\"JavaScript Libraries\"></a>JavaScript Libraries</h2><p>Similarly, this past week I was working on finishing up some Angular 2 code. And one of my tests was failing. Even though the code was working in Chrome fine. The issue was that I was using PhantomJS which doesn’t have the latest JavaScript spec implemented, so it relies on polyfills. One of the polyfills I was using was not compressing the Regular Expressions that I was indirectly using correctly which resulting in the test throwing an exception.</p>\n<p>After tracking down the source of the problem for a day, I finally found a line at the bottom of the GitHub page that told me that I could turn the routine off by calling a function. And here is where the trouble begins.</p>\n<p>You see, I’m using an otherwise documented internal library that has a set of types already defined for it. This particular function is not a part of the types for this class. So, when I tried to call it, I got a compiler error.</p>\n<p>So, I pulled out the named index trick above and got the code to compile and ultimately got my test to run successfully. It all just requires that we think outside the box a bit and most any problem can be solved.</p>\n<h2 id=\"Addendum\"><a href=\"#Addendum\" class=\"headerlink\" title=\"Addendum\"></a>Addendum</h2><p>As TypeScript has matured, the trick above doesn’t work quite as directly as when I originally wrote this article.  Now, you need to assign the original variable to a type of Object before using the indexer method, or you can just cast your variable to an Object and use the indexer.  But typescript is now smart enough to know that the indexer is accessing a property that is private and it won’t let you at it.</p>\n",
            "tags": [
                "private",
                "testing",
                "typescript"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-fatigue-makes-me-scream/",
            "url": "http://davembush.github.com/javascript-fatigue-makes-me-scream/",
            "title": "JavaScript Fatigue Makes Me Scream",
            "date_published": "2017-02-21T12:30:00.000Z",
            "content_html": "<p>Maybe JavaScript Fatigue makes you scream too. Are you annoyed with the constantly changing JavaScript environment? Do you wish things could just settle down for a bit? Have you decided that you won’t learn anything new because there will just be something new to learn tomorrow? Welcome to JavaScript Fatigue. But frankly, unlike many people who talk about JavaScript Fatigue, I see JavaScript Fatigue and the much broader subject of language fatigue as a symptom of a much larger problem that has less to do with JavaScript and more to do with human psychology and the state of the programming community at large. <img src=\"/uploads/2017/02/image-2.png\" alt=\"image\" title=\"image\"></p>\n<h2 id=\"What-is-JavaScript-Fatigue\"><a href=\"#What-is-JavaScript-Fatigue\" class=\"headerlink\" title=\"What is JavaScript Fatigue\"></a>What is JavaScript Fatigue</h2><p>JavaScript Fatigue is the belief that there are so many ways of assembling a JavaScript project that instead of just having to learn JavaScript, you have to learn several other related technologies.  It is in essence, more about decision overload than it is about JavaScript specifically. Think about the average JavaScript project that goes beyond the (now) old school “Augment my form with some jQuery.” Here are a sample of decisions that need to be made:</p>\n<ul>\n<li>Should you use a JavaScript framework, or just write native JavaScript?</li>\n<li>If you decide to use a framework, which one should you use?</li>\n<li>What tool(s) will you use to bundle, minify, cache bust, and tree shake your code?</li>\n<li>Should you bother lazy loading?</li>\n<li>Will you use MVVM, MVC, Redux or something else as a basic architecture?</li>\n<li>How do you plan on dealing with AJAX calls? Callback hell? Promises? RxJS? Something yet to be created?</li>\n<li>What directory structure will you use?</li>\n<li>What component libraries will you use?</li>\n<li>How will you style your application?  Raw CSS? Bootstrap? Material Design?</li>\n<li>What development environment will you use?</li>\n<li>Oh and by the way, to use most of these tools you’ll need to learn node and may need to decide between NPM and YARN.</li>\n</ul>\n<p>I recently heard that for a basic React application there are about 40 different decisions of this kind that need to be made.</p>\n<h2 id=\"Why-JavaScript-Fatigue-Is-Considered-a-Problem\"><a href=\"#Why-JavaScript-Fatigue-Is-Considered-a-Problem\" class=\"headerlink\" title=\"Why JavaScript Fatigue Is Considered a Problem\"></a>Why JavaScript Fatigue Is Considered a Problem</h2><p>If you are working on your own, or working in a small shop without any clear architectural direction, the choices can seem overwhelming. For that matter, if you are an architect, this is still a pretty long list of things that you need to learn well enough to evaluate. But the reason JavaScript fatigue is a problem is because it triggers emotions of fear, anger, and depression. It all starts with fear. You look at all the stuff that you “need to learn” and think, “I can’t possibly learn all of that. And even if I do, there will be something newer tomorrow that I’ll need to learn.” And so your fear turns to anger. I’m not talking rage kind of anger. Just that mild, “I’m not in control here and I’m feeling a bit uncomfortable” kind of anger. And this point, the next most logical thing most of us attempt to do is to try to get some sort of control over the situation. But in this case, the beast can’t be tamed.  So, we resign ourselves to the situation and decide that since we can’t control any of it, we’ll give it a name and in really extreme situations give up learning any of it. Yes, I’ve actually read comments and had conversations with people who have told me as much. “Too much new stuff to keep track of, I’ve just given up.” Hey, OK. Don’t complain to me when you can’t get a job though.</p>\n<h2 id=\"How-to-Fix-JavaScript-Fatigue\"><a href=\"#How-to-Fix-JavaScript-Fatigue\" class=\"headerlink\" title=\"How to Fix JavaScript Fatigue\"></a>How to Fix JavaScript Fatigue</h2><p>I used to think that the people who had given up like this had either lost their love of learning, or were so distracted by the bright and shiny that they had hit overload and couldn’t continue. I now see that the real problem is depression. A natural extension of anger. But, suppose there was a different way of looking a all of this JavaScript Fatigue stuff? Yes, there is a lot of stuff to learn. A lot of stuff you could learn. And you see, that’s the first step. There is a world of difference from NEEDing to learn all that is out there and having that all be things you could learn. I doubt you evaluated all the possible languages you could use prior to using the first language you used. Maybe it was chosen for you by your first job. Maybe it was the language you were most attracted to. In my case, I tried three different languages prior to my first job and when I started my first job, I wasn’t using any of them. Even today. How many languages are there? How many do you know? The point is, you don’t HAVE to know everything about anything. You really only need to know enough to get your work done. Sure, there will be something new and shiny. Take your time and evaluate if it is even worth looking at. Dip your toes in.  Does what you’ve seen so far make sense? Go further. Recently, YARN has become the “hot new thing.”  I tried it. It didn’t work in my current environment. At least for now, we are sticking with NPM. We’ll take another look when it matures a bit further. I love learning. But, I also realize I can only learn one thing at a time. I can’t be awesome at everything. So, I focus. Everything else I might need to know, I learn well enough to get the core thing done.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>And so, the cure for JavaScript Fatigue lies not outside of us, but within. Fix your perspective.  Focus on what you need to know now. Learn bits at a time. Don’t worry about what is coming. There will always be new stuff. Not just with JavaScript but in the programming world in general. Even in the world at large. Don’t worry, be happy!</p>\n",
            "tags": [
                "javascript"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-fatigue-makes-me-scream/",
            "url": "http://davembush.github.com/javascript-fatigue-makes-me-scream/",
            "title": "JavaScript Fatigue Makes Me Scream",
            "date_published": "2017-02-21T12:30:00.000Z",
            "content_html": "<p>Maybe JavaScript Fatigue makes you scream too.</p>\n<p>Are you annoyed with the constantly changing JavaScript environment?  Do you wish things could just settle down for a bit?  Have you decided that you won’t learn anything new because there will just be something new to learn tomorrow?</p>\n<p>Welcome to JavaScript Fatigue.</p>\n<p>But frankly, unlike many people who talk about JavaScript Fatigue, I see JavaScript Fatigue and the much broader subject of language fatigue as a symptom of a much larger problem that has less to do with JavaScript and more to do with human psychology and the state of the programming community at large. <img src=\"/uploads/2017/02/image-2.png\" alt=\"image\" title=\"image\"></p>\n<h2 id=\"What-is-JavaScript-Fatigue\"><a href=\"#What-is-JavaScript-Fatigue\" class=\"headerlink\" title=\"What is JavaScript Fatigue\"></a>What is JavaScript Fatigue</h2><p>JavaScript Fatigue is the belief that there are so many ways of assembling a JavaScript project that instead of just having to learn JavaScript, you have to learn several other related technologies. It is in essence, more about decision overload than it is about JavaScript specifically.</p>\n<p>Think about the average JavaScript project that goes beyond the (now) old school “Augment my form with some jQuery.”</p>\n<p>Here are a sample of decisions that need to be made:</p>\n<ul>\n<li>Should you use a JavaScript framework, or just write native JavaScript?</li>\n<li>If you decide to use a framework, which one should you use?</li>\n<li>What tool(s) will you use to bundle, minify, cache bust, and tree shake your code?</li>\n<li>Should you bother lazy loading?</li>\n<li>Will you use MVVM, MVC, Redux or something else as a basic architecture?</li>\n<li>How do you plan on dealing with AJAX calls? Callback hell? Promises? RxJS? Something yet to be created?</li>\n<li>What directory structure will you use?</li>\n<li>What component libraries will you use?</li>\n<li>How will you style your application? Raw CSS? Bootstrap? Material Design?</li>\n<li>What development environment will you use?</li>\n<li>Oh and by the way, to use most of these tools you’ll need to learn node and may need to decide between NPM and YARN.</li>\n</ul>\n<p>I recently heard that for a basic React application there are about 40 different decisions of this kind that need to be made.</p>\n<h2 id=\"Why-JavaScript-Fatigue-Is-Considered-a-Problem\"><a href=\"#Why-JavaScript-Fatigue-Is-Considered-a-Problem\" class=\"headerlink\" title=\"Why JavaScript Fatigue Is Considered a Problem\"></a>Why JavaScript Fatigue Is Considered a Problem</h2><p>If you are working on your own, or working in a small shop without any clear architectural direction, the choices can seem overwhelming.</p>\n<p>For that matter, if you are an architect, this is still a pretty long list of things that you need to learn well enough to evaluate.</p>\n<p>But the reason JavaScript fatigue is a problem is because it triggers emotions of fear, anger, and depression.</p>\n<p>It all starts with fear. You look at all the stuff that you “need to learn” and think, “I can’t possibly learn all of that. And even if I do, there will be something newer tomorrow that I’ll need to learn.”</p>\n<p>And so your fear turns to anger. I’m not talking rage kind of anger. Just that mild, “I’m not in control here and I’m feeling a bit uncomfortable” kind of anger. And this point, the next most logical thing most of us attempt to do is to try to get some sort of control over the situation. But in this case, the beast can’t be tamed. So, we resign ourselves to the situation and decide that since we can’t control any of it, we’ll give it a name and in really extreme situations give up learning any of it.</p>\n<p>Yes, I’ve actually read comments and had conversations with people who have told me as much. “Too much new stuff to keep track of, I’ve just given up.”</p>\n<p>Hey, OK. </p>\n<p>Don’t complain to me when you can’t get a job though.</p>\n<h2 id=\"How-to-Fix-JavaScript-Fatigue\"><a href=\"#How-to-Fix-JavaScript-Fatigue\" class=\"headerlink\" title=\"How to Fix JavaScript Fatigue\"></a>How to Fix JavaScript Fatigue</h2><p>I used to think that the people who had given up like this had either lost their love of learning, or were so distracted by the bright and shiny that they had hit overload and couldn’t continue. I now see that the real problem is depression. A natural extension of anger.</p>\n<p>But, suppose there was a different way of looking at all this JavaScript Fatigue stuff?</p>\n<p>Yes, there is a lot of stuff to learn. A lot of stuff you could learn. And you see, that’s the first step. There is a world of difference from NEEDing to learn all that is out there and having that all be things you could learn.</p>\n<p>I doubt you evaluated all the possible languages you could use prior to using the first language you used. Maybe it was chosen for you by your first job. Maybe it was the language you were most attracted to. In my case, I tried three different languages prior to my first job and when I started my first job, I wasn’t using any of them.</p>\n<p>Even today. How many languages are there? How many do you know?</p>\n<p>The point is, you don’t HAVE to know everything about anything. You really only need to know enough to get your work done. Sure, there will be something new and shiny. Take your time and evaluate if it is even worth looking at. Dip your toes in. Does what you’ve seen so far make sense? Go further.</p>\n<p>Recently, YARN has become the “hot new thing.” I tried it. It didn’t work in my current environment. At least for now, we are sticking with NPM. We’ll take another look when it matures a bit further.</p>\n<p>I love learning. But, I also realize I can only learn one thing at a time. I can’t be awesome at everything. So, I focus. Everything else I might need to know, I learn well enough to get the core thing done.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>And so, the cure for JavaScript Fatigue lies not outside of us, but within. Fix your perspective. Focus on what you need to know now. Learn bits at a time. Don’t worry about what is coming. There will always be new stuff. Not just with JavaScript but in the programming world in general. Even in the world at large.</p>\n<p>Don’t worry, be happy!</p>\n",
            "tags": [
                "javascript"
            ]
        },
        {
            "id": "http://davembush.github.com/reasons-software-architecture-matters/",
            "url": "http://davembush.github.com/reasons-software-architecture-matters/",
            "title": "Reasons Software Architecture Matters",
            "date_published": "2017-02-14T12:30:00.000Z",
            "content_html": "<p>Several weeks ago, I was talking to a programmer and we got into a discussion about the importance of software architecture. I maintained that having a defined architecture is important regardless of the team size, the person I was talking to asserted that architecture wasn’t necessary when there was just one person involved.</p>\n<p>But here’s the thing. All software has an architecture. Even the most junior of programmers has an idea of how code should fit together. At issue isn’t really about architecture. It is about having a defined architecture, based on experience and best practices, that will allow the team to develop the software in question as efficiently as possible. Software architecture, at its core, says, “this is how we build software.”</p>\n<p>To find the reasons why software architecture matters, it is helpful to think about what happens when there isn’t any defined architecture in place.  For the purposes of this article, I’m going to generalize on how architecture impacts teams and where appropriate show why that is also important when your team is just you. <figure><img src=\"/uploads/2017/02/image-1.png\" title=\"Reasons Software Architecture Matters\"> Photo via <a href=\"//visualhunt.com/\">VisualHunt</a></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Assumptions\"><a href=\"#Assumptions\" class=\"headerlink\" title=\"Assumptions\"></a>Assumptions</h2><p>In a team, having an architecture is important simply because it means we can make certain assumptions about how someone wrote the code you are now looking at.</p>\n<p>Have you ever been in a situation where you wrote some code assuming that the programmers who would be using it had written their code in a particular way only to find out that they hadn’t and because of that, your code needs to be rewritten?</p>\n<p>Or, how about the time you went to work on a bug? Once again, you made some assumptions that weren’t true so it took you much longer to fix the bug than it would have had you known that your assumptions were wrong.</p>\n<p>Imagine what it would be like in those situations if the assumptions you were making were legitimate because everyone was using the same playbook. How much easier would that make your life?</p>\n<p>Ah, but your team is just you, and you know how you put the code together. </p>\n<p>OK. Fine. </p>\n<p>But what about two years from now? Without a defined architecture, would you say you code things the same way every time? I know, even with an architecture, sometimes I “cheat” and my code doesn’t always follow the rules I’ve set out. If I do that WITH an architecture, I can just imagine how sloppy my code would be without it.</p>\n<h2 id=\"Arguments\"><a href=\"#Arguments\" class=\"headerlink\" title=\"Arguments\"></a>Arguments</h2><p>Get any two programmers in a room and you will almost always get two different opinions about how software should be written. A good architecture reduces the number of arguments so we can get on with the craft of writing code. I’ve been in situations where, even with an architecture, there are programmers who disagree. Some with good reason. But if you don’t have any definition, all you end up with is two opinions with no rule book to say who is “right.”</p>\n<h2 id=\"Cognitive-Load\"><a href=\"#Cognitive-Load\" class=\"headerlink\" title=\"Cognitive Load\"></a>Cognitive Load</h2><p>With so much to consider in software development, the fewer decisions we have to make, the better. This leaves brain power for solving problems that still need answers.</p>\n<p>There are people who wear the same thing every day, or nearly the same, so they don’t have to make that decision. I’m actually one of those people. I kind of fell into this mode of dressing because I’m color blind and this is one of my ways of compensating. But I can tell you, it leaves me free to think about other things as I get ready in the morning.</p>\n<p>This is another place where software architecture will help you regardless of team size. Even if you are the only one on the team, this is one less thing to think about.</p>\n<h2 id=\"Scrambled-Eggs\"><a href=\"#Scrambled-Eggs\" class=\"headerlink\" title=\"Scrambled Eggs\"></a>Scrambled Eggs</h2><p>Software built without an architecture will eventually take on the feel of scrambled eggs. Imagine how hard it will be to modify the code when you have no idea where the different parts of your code should go.</p>\n<p>And once again, we end up with a system that is difficult to maintain simply because no one knows for sure where the various parts of the system should live.</p>\n<h2 id=\"Good-Architecture\"><a href=\"#Good-Architecture\" class=\"headerlink\" title=\"Good Architecture\"></a>Good Architecture</h2><p>You’ll notice I’ve been saying “Good” architecture. This is because I’ve been in situations where the architecture has not been defined tightly enough leaving too many loop holes. I’ve also seen architectures misapplied. It is important when an architecture is defined that the person defining is knows something about the tools that will be used and the environment they will be used in.</p>\n<p>It is also helpful if the architectures that are defined, are defined by consensus rather than having one person defining it. We all have holes in our thinking. Someone may be a great architect, but maybe they suffer from the old saying, “when all you have is a hammer, everything looks like a nail.” More people bring more points of view. This can fill in gaps and can produce an architecture that can be used rather than one that will be resisted.</p>\n<h2 id=\"Success\"><a href=\"#Success\" class=\"headerlink\" title=\"Success\"></a>Success</h2><p>This is all about building successful systems. But just because you got some code working and into production doesn’t mean the code is going to hold up over time.</p>\n<p>There is one guy I know who brags about how fast he can write code. Well, yes, you did get that into QA in a month. But, it took you three months to get it out of QA. The test of a good architecture is:</p>\n<ol>\n<li>Does it help make the project successful?</li>\n<li>Is it relatively easy to understand?</li>\n<li>Has it been adopted by the team using it?</li>\n<li>Is it generally accepted as a valid architecture in the community at large for similar software.</li>\n<li>Does it make the code easier to maintain?</li>\n</ol>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p>So, now I’ve convinced you that you should be using an architecture. How do you get started? It is a lot easier than you think. Most frameworks either have an architecture already defined, or somewhere the community has already defined one for it. Start there. Maybe refine it a bit and settle on something that works.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>If you don’t use an architecture yet, you are probably still thinking, “Yeah, but I don’t have any issues that this would solve.” To which I would answer, “How do you know? What if your wrong?”</p>\n<p>You see, most of my reasons have to do with making software development easier or better. I’m not saying you can’t get something done without architecture. What I am saying is that with architecture you can do everything you are already doing better, faster, cheaper, and easier. Until you try it, you’ll never know if I’m right or not.</p>\n",
            "tags": [
                "best practices",
                "software architecture"
            ]
        },
        {
            "id": "http://davembush.github.com/the-psychology-of-programming/",
            "url": "http://davembush.github.com/the-psychology-of-programming/",
            "title": "The Psychology of Programming",
            "date_published": "2017-02-07T12:30:00.000Z",
            "content_html": "<p>Over the past week, I’ve listened to and read several articles that have started me thinking more about the Psychology of Programming.</p>\n<p>Not that I haven’t been thinking about this for a while. I’ve been quite intrigued by human behavior for a while now. But more recently, there was this podcast over on dotNetRocks about “<a href=\"//dotnetrocks.com/?show=1406\">Punishment Driven Development</a>”. And this comment:</p>\n<blockquote>\n<p>The happiest people in my experience are those that have options. They have transferable skills, see their employment as a personal choice, have self-confidence that they are providing value to the company and are in a position professionally and personally where they could change job if they needed. The feeling of being trapped in a position from which you can’t escape (either a dissatisfying job, bad manager or whatever) will lead to negativity.</p>\n</blockquote>\n<p>Which I almost agree with, except I think it is the negativity that leads to feeling trapped. And then there is the book I am reading, “<a href=\"//amzn.to/2l4O96Y\">Influence: The Psychology of Persuasion</a>” which goes into detail on why we make decisions that seem to go against our better judgment.</p>\n<p>Then there is another podcast that discusses <a href=\"//devchat.tv/js-jabber/jsj-247-building-a-development-environment-with-cory-house\">the decisions we make as we start a new JavaScript project</a>.</p>\n<p>And all of this culminates into the following thoughts: <figure><img src=\"/uploads/2017/02/image.png\" title=\"The Psychology of Programming\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/deltamike/751707089/\">deltaMike</a> via <a href=\"//visualhunt.com\">VisualHunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-Makes-You-Happy\"><a href=\"#What-Makes-You-Happy\" class=\"headerlink\" title=\"What Makes You Happy?\"></a>What Makes You Happy?</h2><p>It really does amaze me that I work with people who seem so unhappy with their work place and yet, aren’t making any effort to find another place to work. As a consultant with nearly 30 years of experience, I can tell you first-hand that some places are better than others to work. There is probably a place for you if you’d just try to find it.</p>\n<p>Or, maybe the problem is you. Maybe you’ve never liked working. Or maybe you like complaining. Maybe being happy is an attitude and isn’t really dependent on our circumstances. Maybe, the happy people like their jobs?</p>\n<p>Or maybe it is just easier to blame the company than to take responsibility. I find happy people take action. Make opportunities. Learn new stuff. </p>\n<p>The unhappy people I know blame something or someone for who they are.</p>\n<h2 id=\"It’s-All-in-your-Head\"><a href=\"#It’s-All-in-your-Head\" class=\"headerlink\" title=\"It’s All in your Head\"></a>It’s All in your Head</h2><p>Here is a scary thought though. All your ways of reacting to events in your life are learned responses. Most of those responses you learned before you were 5. But, here’s the good news. Since they are learned responses, you can, if you want to, re-learn responses.</p>\n<p>We all have behaviors we don’t like. Some of us get angry for stupid stuff. Some of us over eat. Some drink too much. Some smoke. In almost all cases, the behavior isn’t the real issue. The question we need to ask ourselves is why do we do those things? In what way do we believe doing these things is going to help us? What would you need to believe differently in order to change? What is keeping you from believing something different?</p>\n<h2 id=\"It’s-Just-an-Opinion\"><a href=\"#It’s-Just-an-Opinion\" class=\"headerlink\" title=\"It’s Just an Opinion\"></a>It’s Just an Opinion</h2><p>I have a rule.  “Never argue about opinion.” I’ll present why I believe something is true. State all my reasons. Clarify if I think that is necessary. But as soon as I realize that the discussion has turned into an argument where no one is going to convince the other of anything. I disengage.</p>\n<p>Not everything is opinion. I’ve had people leave comments correcting my understanding and pointing to authoritative documentation that says they are right. Thank you. But, in the grand scheme of life, there is very little that falls into the realm of fact. Most of what we argue about as programmers is opinion.</p>\n<p>What is interesting about opinion is that the more you know about a subject, the more opinionated you are likely to be. That can be a good thing. Show me a programmer who doesn’t have opinions and I’ll show you a programmer who is just doing what they’ve been told to do. Show me a programmer who has an opinion but can actually argue multiple sides of an argument and I’ll show you a programmer who really knows his stuff. If you hold opinions so strongly that you are offended when someone disagrees with you, you have an issue.</p>\n<h2 id=\"Herd-Mentality\"><a href=\"#Herd-Mentality\" class=\"headerlink\" title=\"Herd Mentality\"></a>Herd Mentality</h2><p>For years, it has puzzled me how, as a community, we can know that writing unit test for our code is a worthwhile activity, and yet hardly anyone I know does this. Truth be told, it is a struggle even for me.</p>\n<p>But, here’s an interesting fact. We tend to do what we SEE others doing. If no one on your team is writing test, you think, “we don’t write test here.” This behavior explains why, in test after test, groups will ignore people who need help while individuals by themselves will provide aid. This impacts a lot of our life if you think about it. How many times have I assumed that someone else is going to call the power company when the power goes out during a snow storm? Certainly, if the whole street is impacted, someone will call.</p>\n<p>The very fact that it has impacted the whole street is indication enough that no one else has called. I hope I remember this the next time the power goes out.</p>\n<h2 id=\"Appeal-to-Authority\"><a href=\"#Appeal-to-Authority\" class=\"headerlink\" title=\"Appeal to Authority\"></a>Appeal to Authority</h2><p>Another scary statistic is that people will do whatever they are told to do if an authority figure has told them to do it. If there is any question about what we should do, we will try to figure out what the authority figure wants.</p>\n<p>This is how con men work. In a very scary experiment, a “doctor” calls the nursing desk and tells the person who answers the phone to administer a drug to a patient. The problem is, the prescription is too high and is of a drug that is not approved for the nurses to give. Yet, because a doctor has said so, they are willing to comply In a more humorous example, a patient had an ear ache in their right ear. The doctor left a note with instructions to administer ear drops to the R ear. So, the nurse administered ear drops to the patients rear. Neither the nurse nor the patient questioned the instructions.</p>\n<p>Oh, but that would never happen to programmers now. Or would it?</p>\n<p>Again, I go back to the point of testing. I can’t tell you how many times I’ve heard programmers tell me they “aren’t allowed to write unit test.” For the most part, I’m not sure anyone asked, they are just assuming that the boss won’t let them because of the Herd Mentality I mentioned above. But let’s assume the boss really has made such an edict. Is that a good reason to not tests? I’m not sure it is. At least no more so than administering ear drops to someone’s butt.</p>\n<p>But I’ve also seen this behavior first hand. I was on a project once where the organization claimed to be “Agile.” For the most part they were. They worked iteratively. They had something resembling sprints.</p>\n<p>But a “boss” several layers up the ladder who we never saw had “instructed” the team to do this project using a waterfall approach because “we already know what this product is supposed to do.”</p>\n<p>The problem is, while this project was a rewrite of an older system, the rewrite encompassed many changes to the existing system. So, even using that argument, using waterfall made no sense. But, everyone on the team also knew that what made a project an agile project vs a waterfall project had a lot more to do with being able to adjust. Why no one ever told the manager he was wrong is beyond me. What is further interesting is that even though that project received a new manager, the team STILL tried to obey the old rule because they hadn’t been given an alternate direction.</p>\n<h2 id=\"Inertia\"><a href=\"#Inertia\" class=\"headerlink\" title=\"Inertia\"></a>Inertia</h2><p>The famous last words of every dying group are, “But, we’ve never done it that way before.” Why?</p>\n<p>Did you know that people will work twice as hard to keep the dollar in their pocket than they will to gain an extra dollar? This explains so much of human behavior for me. This is why startups have such an advantage over established companies. The startup has nothing to lose. As soon as they feel like making a change will cause them to lose something important, they’ll stop innovating. They become the established company. If an established company can survive long enough to have nothing to lose, they might innovate. For an example of this, check out the turn around of both Apple and Microsoft. If you look very closely, you’ll see that Apple is moving into the “we have something to lose” cycle.</p>\n<p>Now, how does this apply to you as the lonely programmer?</p>\n<p>Well, back to our sad programmer example. Could it be that our sad programmer doesn’t change jobs because he’s holding on to his dollar instead of trying to get a new one?</p>\n<p>Could it be you aren’t testing your code with formal unit test because you are holding onto your dollar?</p>\n<p>When is the last time you tried anything new?</p>\n<h2 id=\"Break-Free\"><a href=\"#Break-Free\" class=\"headerlink\" title=\"Break Free\"></a>Break Free</h2><p>And so, the question naturally becomes, “How do we break free?”</p>\n<p>So much of this is a part of who we’ve learned to be. Many of our behaviors have helped us get to where we are. But like the company who has moved from startup to established player, we need to become comfortable with being uncomfortable so that we can not just break free, but break into a better version of ourselves.</p>\n<p>Maybe you are comfortable where you are. I don’t know  Personally, I’m always trying to improve. I’d much rather have the new dollar than keeping the dirty old one. You might have a different set of values. Maybe a different opinion.</p>\n<p>I could be wrong. But, what if I’m right?</p>\n",
            "tags": [
                "programming",
                "behavior",
                "psychology"
            ]
        },
        {
            "id": "http://davembush.github.com/secrets-to-styling-angular2/",
            "url": "http://davembush.github.com/secrets-to-styling-angular2/",
            "title": "Secrets to Styling Angular2",
            "date_published": "2017-01-31T12:30:00.000Z",
            "content_html": "<p>This past week, while working on a new project, I discovered some secrets to styling Angular2 that I don’t think are very well-known.</p>\n<p>There are two specific issues I needed to solve this week that took a bit of digging. The first was that I wanted my routes to fade in and out as I move between routes. The second was that I was using a grid control from a third party and I needed to style an inner component. We will cover both as well as some more basic operations.</p>\n<figure>![](/uploads/2017/01/image-2.png \"Secrets to Styling Angular2\") Photo via [Visual hunt](//visualhunt.com/)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Angular2-Version\"><a href=\"#Angular2-Version\" class=\"headerlink\" title=\"Angular2 Version\"></a>Angular2 Version</h2><p>Just so there isn’t any confusion, this article is accurate for Angular 2.x as of 2.5</p>\n<h2 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h2><p>Just to make sure we have the basics covered, we want to start with generic styling. The temptation might be to style each of your components independently. This would be a mistake. Angular2 doesn’t throw out all the existing CSS rules. Instead, it adds to them. Therefore, anything you can do with a generic style should be handled at that level.</p>\n<p>Since I generally use Bootstrap to theme my applications, this is what I’ll reference here. Using the angular-cli, the way you would add the CSS theme information is to include it in the angular-cli.json file of your application in the “styles” section.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;styles&quot;: [</span><br><span class=\"line\">  <span class=\"string\">&quot;../node_modules/bootstrap/dist/css/bootstrap.css&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;styles.css&quot;</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n\n<p>If you have a component that you need to style in a way that is outside the bounds of the general CSS you’ve included, you can add CSS to the components CSS file. This all works as expected with one small exception. The CSS you add to this file only applies to the component and will override any other CSS that might already be applied by the general CSS.</p>\n<p>This is Angular2 CSS 101 stuff. I’ve written pretty extensively about this in the article “<a href=\"https://medium.com/@davembush/adding-css-and-javascript-to-an-angular-cli-project-2b843a8283f3\">Adding CSS and JavaScript to an Angular-CLI Project</a>”</p>\n<h2 id=\"Host-access\"><a href=\"#Host-access\" class=\"headerlink\" title=\"Host access\"></a>Host access</h2><p>But there are times when the thing you want to style is the host container of the component. Not just the HTML inside it. There are two ways that you might do this.</p>\n<h3 id=\"host\"><a href=\"#host\" class=\"headerlink\" title=\":host\"></a>:host</h3><p>The first way is to use the <code>:host</code> directive in your CSS. But you’ll need to be careful with this, as I found out recently.</p>\n<p>You see, you might expect that</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:host</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>would cause the background color of the element to turn blue. But if you try that with a simple component you’ll find out that nothing shows up with a background color of blue because by default an element that isn’t part of the HTML spec has no size and basically disappears from the display. We want it to display an essentially be a container for all our other HTML so what you really want to do is something like:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:host</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The only way it will show up, in my experience, is to make the position ‘absolute.’ Remember, we are doing this only because we want the :host to have some impact as a container for all the other elements that might be in it. Normally, you can get by styling the html inside it.</p>\n<h3 id=\"HostBinding\"><a href=\"#HostBinding\" class=\"headerlink\" title=\"@HostBinding()\"></a>@HostBinding()</h3><p>An alternate way of setting style on the component container is by using the @HostBinding() decorator. What this does is that it binds a variable to the containers attribute so that you can change the value from your TypeScript code.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">&#x27;app-view&#x27;</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">&#x27;./view.component.html&#x27;</span>,</span><br><span class=\"line\">  styleUrls: [<span class=\"string\">&#x27;./view.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export <span class=\"keyword\">class</span> <span class=\"title\">ViewComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> &#123;</span><br><span class=\"line\">  @HostBinding(<span class=\"string\">&#x27;style.backgroundColor&#x27;</span>)</span><br><span class=\"line\">    backgroundColr = <span class=\"string\">&#x27;blue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor() &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Child-Elements\"><a href=\"#Child-Elements\" class=\"headerlink\" title=\"Child Elements\"></a>Child Elements</h2><p>Now, the other problem you might run into is that you’ll be using some third-party control and you’ll want to style some container element inside of it to fit your needs. Again, this isn’t a particularly common problem, but it might just take you a while to find the answer.</p>\n<p>The first thing you may try is to just style the markup.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">component-parent component-child &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* style stuff here */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But, try as you might, you’ll never get those styles to show up. You can style the <code>component-parent</code> all you want, but not the <code>component-child</code> no matter what you do.</p>\n<p>Here is the trick that allows you to style the <code>component-child</code>:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">component-parent &gt;&gt;&gt; component-child &#123;</span><br><span class=\"line\">    /\\* style stuff here */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>That <code>&gt;&gt;&gt;</code> thing is call the “piercing” operator. All you need to know is that it is how you get the child elements styled.</p>\n<h2 id=\"Animations\"><a href=\"#Animations\" class=\"headerlink\" title=\"Animations\"></a>Animations</h2><p>You might wonder, at first, why we would need an Animation API in Angular2. Aren’t CSS animations good enough? Well, actually… It isn’t that CSS animations aren’t good enough, but because Angular2 “hide” and “shows” elements by putting them into and out of the DOM and does other DOM manipulations that conflict with CSS animations, you will find there are time you are going to need to use the Angular2 Animation API.</p>\n<p>The Animation API works in a similar way to how the CSS Animations work so this isn’t going to be a big stretch for you if you are already familiar with CSS Animations.</p>\n<p>To animate a component, you are going to need to add an animations section to the @Component decorator of your component:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">&#x27;app-view&#x27;</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">&#x27;./view.component.html&#x27;</span>,</span><br><span class=\"line\">  styleUrls: [<span class=\"string\">&#x27;./view.component.css&#x27;</span>],</span><br><span class=\"line\">  animations: [</span><br><span class=\"line\">      <span class=\"comment\">/* animation definitions here */</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>The question then, is “how do we define an animation” Since animations is obviously an array, we want to know, what is it an array of? It is an array of triggers. A trigger has two parts. A name, an an array that specifies how the animation should work. This name gets used in our template using the [@name] syntax to bind to a component property.</p>\n<p>Next, we define each of the states we want to respond to and style we want to end up with when that state is triggered.</p>\n<p>Finally, we define each of the transitions.</p>\n<p>The combination gives us a lot of flexibility. While we can create the same kind of transitions that we might have using CSS, we can also create transitions the we never could have using CSS. All we need to do is have our component change the value of some member variable in some predictable way and the transitions will kick into work.</p>\n<p>You can read more about transitions on the <a href=\"//angular.io/docs/ts/latest/guide/animations.html\">Angular2 documentation page</a>.</p>\n<h2 id=\"Route-Animations\"><a href=\"#Route-Animations\" class=\"headerlink\" title=\"Route Animations\"></a>Route Animations</h2><p>Route animations are similar. However, this is where everything I’ve said above comes together.</p>\n<p>The first problem you are going to run into trying to animate a route is that the state you want to base your animations on is the route, which is the parent component of your component you are probably trying to animate. But the reality is, what you are really doing is animating something when it is first displayed and animating it again when it is going away. That is, when it is placed into the DOM and when it is being removed from the DOM. Angular2 has to predefined states for this, ‘:enter’ and ‘:leave’.</p>\n<p>So, we create a trigger named ‘routeAnimation’ and in our route components we bind to it using the @HostBinding() decorator.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@HostBinding(<span class=\"string\">&#x27;@routeAnimation&#x27;</span>) routeAnimation = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Everything else you need to know I’ve already discussed above.</p>\n<p>For more information about routing animations, you can check the <a href=\"//angular.io/docs/ts/latest/guide/router.html\">router documentation on the Angular2 documentation page</a>.</p>\n<h2 id=\"Finally\"><a href=\"#Finally\" class=\"headerlink\" title=\"Finally\"></a>Finally</h2><p>It took me way too long to figure this out because a lot of the information has changed since RC0. Hopefully, it will point you in the right direction.</p>\n",
            "tags": [
                "angular",
                "animation",
                "css"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-be-a-lucky-programmer/",
            "url": "http://davembush.github.com/how-to-be-a-lucky-programmer/",
            "title": "How to be a Lucky Programmer",
            "date_published": "2017-01-24T12:30:00.000Z",
            "content_html": "<p>I’ve been studying topics related to social science recently and one item that keeps popping up in various places is the idea of luck. It turns out that lucky people aren’t really all that lucky. There life has been arranged either by them directly or indirectly by their environment so they end up having more chances of good things happening to them. </p>\n<p>How can we apply this to programming? How can you be a lucky programmer? <figure><img src=\"/uploads/2017/01/image-1.png\" title=\"How to be a Lucky Programmer\"> Photo <a href=\"//visualhunt.com/p/gaertringen/\">Gaertringen</a> via <a href=\"//visualhunt.com/\">Visual Hunt</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"What-You-Believe\"><a href=\"#What-You-Believe\" class=\"headerlink\" title=\"What You Believe\"></a>What You Believe</h2><p>It turns out that what you believe about yourself has a HUGE impact on how lucky you are. In fact, lucky people see themselves as lucky.</p>\n<h3 id=\"Lucky-People-are-Lucky\"><a href=\"#Lucky-People-are-Lucky\" class=\"headerlink\" title=\"Lucky People are Lucky\"></a>Lucky People are Lucky</h3><p>Now, you might think that a lucky person seeing themselves as lucky would be self-evident, right? I mean if good stuff keeps happening to you, you are obviously going to view yourself as lucky. But, the dirty little secret is that bad stuff happens to lucky people too. They just aren’t as likely to see it as unlucky and may even see it as lucky. </p>\n<p>To take an example from my own life, I was in an accident about a month and a half ago. I totalled the car. But,</p>\n<ul>\n<li>No one got hurt, and given the shape of the car, I’m still amazed.</li>\n<li>Someone showed up within minutes and stopped long enough to help me figure out what my next steps were.</li>\n<li>The police man showed up immediately after I hung up the phone with the dispatcher.</li>\n<li>We got more for the car than we would have if we had traded it in.</li>\n<li>We ended up with a much nicer car than we were planning on.</li>\n</ul>\n<p>Was I lucky or unlucky? It is just a matter of what I focus on. </p>\n<p>In short, lucky people focus on what they have instead of what they don’t. According to people who measure these things, if you made more than $34K (usd) in 2012 you made more than 99% of the world’s population. Yes, I know, there are other factors, like cost of living to consider. But really, by just about any standard, I’d say from an income perspective, we as programmers are pretty lucky!</p>\n<h3 id=\"Lucky-People-Ask-Good-Questions\"><a href=\"#Lucky-People-Ask-Good-Questions\" class=\"headerlink\" title=\"Lucky People Ask Good Questions\"></a>Lucky People Ask Good Questions</h3><p>It turns out that our brains answer any question we give it. In fact, you’ve probably been in situations where someone has asked you a question you really didn’t want to answer and you’ve answered it anyhow. This is how compelling question are. </p>\n<p>The problem lies in the questions we ask ourselves. When you are struggling with an issue, are you more likely to ask, “How can I solve this?” or “Why can’t I solve this?” Do you see the three things you’ve tried as proof that the problem can’t be solved or just three ways that it can’t be solved? </p>\n<p>I’m going to guess that if you are any good at programming, you’ll be more likely to ask “How can I…” questions. But what about the rest of your life? Does this carry over into finding your dream job? Making friends? Investing?</p>\n<h3 id=\"Entitled-vs-Deserving\"><a href=\"#Entitled-vs-Deserving\" class=\"headerlink\" title=\"Entitled vs Deserving\"></a>Entitled vs Deserving</h3><p>This last point is a little tricky to explain. Lucky people feel like they deserve to have good things happen because they’ve put in the effort so that good things can happen. This is different from either feeling entitled or wishful thinking. Lucky people have studied hard, made connections, tried stuff, improved their social skills, and more. So, you can believe you are lucky all you want, and that’s a really good start, but there is more to being lucky than just being “The Little Engine That Could” you need to be “The Little Engine That Does”</p>\n<h2 id=\"Try-New-Stuff\"><a href=\"#Try-New-Stuff\" class=\"headerlink\" title=\"Try New Stuff\"></a>Try New Stuff</h2><p>You could also call this “be curious.” </p>\n<p>I think my love of learning has helped make me lucky. But again, the people who study this stuff agree with me. The more stuff you try, the more likely you are to be lucky. When you try lots of stuff, you can keep what works, toss what doesn’t. Do more of what is working. Do less of what is not. </p>\n<p>That sounds pretty simple. But where most people goof this up is that they see themselves as failures when something doesn’t work. It may not have worked for a lot of different reasons. One may just be you don’t have enough other experience yet. Some might be that it isn’t who you are deep down. </p>\n<p>Check this out. Do an inventory of yourself and try to figure out what has always been true of you. For me, it is learning. I remember all through Jr High and High School, I would come home, finish whatever homework I had, and then I’d go learn something that was interesting to me. I studied flying, weather, electronics. And that hasn’t changed. If you’ve been following this blog, you’ve benefited from a lot of what I’ve learned over the last several years. </p>\n<p>I also like to teach and help people get ahead. Something I’ve been doing in some fashion since I was twelve. </p>\n<p>I got very involved in the Internet Marketing thing for a while. I made about as much money as I spent learning, so it wasn’t an entire waste of time. But, the year I gave up on that, I made significantly more money by using my resources in a more productive way. Learn when you’ve done enough. But don’t give up when something doesn’t work out right away either. Doing several things at a time will help you figure out what you should be spending more time on.</p>\n<h2 id=\"Hone-Your-Skills\"><a href=\"#Hone-Your-Skills\" class=\"headerlink\" title=\"Hone Your Skills\"></a>Hone Your Skills</h2><p>One of the biggest frustrations I have is when I find someone “over 50” who has posted a comment saying he (most always it is a male) can’t find a job because of age discrimination. I always wonder what skills he has, because where I live, we’ll hire anyone who has an up to date skill set who can prove to us they really do know what they are doing. </p>\n<p>So, you have a job. Great. Don’t coast, or you’ll be that guy. I almost was. I got comfortable at a company and didn’t keep my programming skills up to date. It took me three years to recover. </p>\n<p>Not only should you not coast. If you are serious about programming, you should become an expert in something. Full stack is crap! Niche down. This doesn’t mean you can’t do some other part of the stack. But be awesome at something. Trust me, it WILL pay off. </p>\n<p>But also, learn around the fringes. It does no good for you to proclaim “Windows is the best operating system.” if you’ve never tried Linux or OSX. (Just as an example). In the same way, you can’t say a particular framework is the best if you don’t have several that you’ve tried. Bonus points if you can explain what the differences are and why someone might choose one over the other, even if it isn’t what you would select. </p>\n<p>Since you are reading this, I have to assume you read several tech related blogs. But how about podcasts? How are you spending that time on your commute to work? I have so many podcasts that I listen to that I have to listen to them on evenings and weekends to keep up. And don’t just read blogs and listen to podcasts about tech. Branch out. Get a life. </p>\n<p>Finally, interview for a job at least once a year even if you aren’t looking for a new job. Why? Well, remember I told you I got comfortable working for one company? It turns out the whole interview process changed while I was sleeping. Like Rip Van Winkle, nothing was the same to me. The more you interview, the better you get at it. This is why I recommend interviewing four times a year. Once a year is the absolute minimum. Better to try new interview strategies on an interview you don’t care about than when you really need a job. And who knows, you might find a job you really like in the process.</p>\n<h2 id=\"Social-Skills\"><a href=\"#Social-Skills\" class=\"headerlink\" title=\"Social Skills\"></a>Social Skills</h2><p>But it doesn’t matter how great you are technically if you can’t convince someone else that you are. And this means you are going to need to work on your social skills. Yes, lucky people, and that means lucky programmers, need social skills. And I’m not just talking “Please” and “Thank you” But, that would be a great place to start.</p>\n<h3 id=\"Body-Language\"><a href=\"#Body-Language\" class=\"headerlink\" title=\"Body Language\"></a>Body Language</h3><p>Body language is a great place to start. You’ve probably seen the Amy Cudy video where she talks about power poses. But body language goes much further than power poses. But let’s start there. </p>\n<p>As I walk around the office, I notice that between typing on our keyboards and keeping our eyes glued to our phones, our default “pose” is one of submission and meekness. Have you ever noticed that even people who aren’t looking at their phone when they walk are looking at the ground? Doesn’t anyone make eye contact anymore? </p>\n<p>Over the last several months, I’ve focused on looking up and out as I walk. What a difference in how I feel about myself, not to mention how people perceive me. Look out. Not up. You don’t want to look like a snob. </p>\n<p>On the off chance that someone makes eye contact with you, smile at them. An interesting thing will happen, they’ll smile back which will make you want to smile more. </p>\n<p>An interesting story. There is a guy in our office who seems to have caught the giggles. He’s got this contagious smile and is almost always laughing. It is a genuine laugh and I am going to try to incorporate laughing more into who I am. The thing is, the more he smiles and laughs, the more people want to be around him. Hmmmmm. </p>\n<p>The other thing you can do related to power posing is to just take up space. Again, don’t overdo this. Stand up straight. Spread your arms. Show you are comfortable more than that you are the boss. Too much in the wrong place and you’ll just look like you are posing. Think of the posing as something that changes how you feel about you, not how you want them to feel about you.</p>\n<h3 id=\"Make-Them-Like-You\"><a href=\"#Make-Them-Like-You\" class=\"headerlink\" title=\"Make Them Like You\"></a>Make Them Like You</h3><p>We’ve already discussed laughing. That’s a great way to make people like you. And smiling also makes people think you are smart. But there are some other “tricks” you can learn that will help people like you. </p>\n<p>One simple one to implement is eye contact. People feel like you are listening if you make eye contact. How you pull this off is to look at one of their eyes. Obviously, you can’t look at both of them. But where people get this eye contact thing wrong is that they tend to stare instead of look. Don’t be a robot about it. And it is OK to look away for a second or two. </p>\n<p>The other way you can make people like you is by mirroring their words and body language. Especially gestures. </p>\n<p>I find this fascinating. </p>\n<p>You may have heard that you should use “active listening” to make sure you understand what the other person is saying. For those of you who don’t know, active listening is the process of paraphrasing what the person said and saying it back to them in your own words to make sure you got the idea of what they said. </p>\n<p>The problem is, using active listening won’t make the person FEEL like you understand them. Mirroring does this. And you mirror by using the same words and phrases they used. In particular, you want to use the words that seem to have the most emotion attached to them. What’s even crazier about this than the fact that it establishes rapport quickly is that the person you are mirroring won’t notice. </p>\n<p>Now, all these tricks are just tools to grease the process. But if you just take the attitude of genuinely being interested in other people, you’ll probably end up doing a lot of this stuff anyhow. But if you are genuinely interested in people AND you add on the above skills, other people around you will feel the love and be attracted to you. You’ll be that guy or gal everyone wants to hang with.</p>\n<h3 id=\"Networking\"><a href=\"#Networking\" class=\"headerlink\" title=\"Networking\"></a>Networking</h3><p>Yeah, networking. It is amazing to me that I can go to a programming user group meeting where we are all there for the same reason. That is, we all KNOW we have something in common. And no one is talking. 30 people in the room and barely a noise. This is not good. Your next job could be in that room. </p>\n<p>But, what should we do? </p>\n<p>One thing I’ve started doing is this. You walk up to someone who isn’t already talking to someone and you shake their hand while saying, “Hi, I’m (your name here)” And then you ask them a question to get things rolling. Here are a few of my favorites:</p>\n<ul>\n<li>Ask them something about the event.</li>\n<li>Are you using X yet?</li>\n<li>What brought you here tonight?</li>\n<li>How did you get started in programming?</li>\n<li>What does a typical day look like for you?</li>\n</ul>\n<p>Once they’ve given you an answer, just ask them a question about something they just told you. </p>\n<p>It really isn’t that hard unless it becomes obvious that the person isn’t in the mood to talk. But that hardly ever happens when you’ve asked them about something they care about. </p>\n<p>Some of these questions are appropriate even if you are talking with someone who doesn’t program and you can quickly use them to get people talking about things they care about. </p>\n<p>Once they start talking, just listen, mirror, and ask more questions.</p>\n<h2 id=\"Connections\"><a href=\"#Connections\" class=\"headerlink\" title=\"Connections\"></a>Connections</h2><p>Another interesting thing I’ve learned is that lucky people have lots of connections. This doesn’t mean they have a lot of close friends. But they are connected, even if all that means is that you are connected on the social networks. So, when someone wants to connect to you on LinkedIn, FaceBook, Google+ or some other social network, connect. If they end up being jerks, you can delete them. </p>\n<p>One of the most common objections I hear when I suggest that people connect to anyone and everyone on LinkedIn is that they will get all kinds of messages and emails from recruiters. So, I want to address that now. </p>\n<p>You’re looking at something that has the biggest chance of making you lucky as an annoyance. Yes, I have nearly 10,000 connections on LinkedIn. Yes, every day I get a ton of email. But, I’ve also been able to narrow down which recruiters I am willing to talk with and which ones I may want to talk with and the ones I never want to hear from again. My white list, grey list, and black list. </p>\n<p>When I need a new contract, guess how long it will take me to find something I want to do?</p>\n<h2 id=\"Take-Action\"><a href=\"#Take-Action\" class=\"headerlink\" title=\"Take Action\"></a>Take Action</h2><p>Finally, lucky people do something. The whole self-help industry is banking on the fact that you’ll never do anything they tell you to do. A lot of what they tell you to do in those books would work if you did what they said. But for various reasons, we think buying the book, or even reading the book, is going to change our life. </p>\n<p>So, pick something I’ve mentioned above that you aren’t already doing and do it. </p>\n<p>For a start, connect with me on social media using one of the buttons in the upper right corner. I highly recommend LinkedIn because I am connected with so many people, you’ll automatically get all of my first-degree connections as your second-degree connections and all of my second-degree connections as your third-degree connections. What this means is that by connecting to me, more people will be able to find you on LinkedIn when they search for you on LinkedIn. </p>\n<p>For more about how to use LinkedIn, check out my article, “<a href=\"/linkedin-tips-for-programmers/\">LinkedIn Tips for Programmers</a>”</p>\n",
            "tags": [
                "programming",
                "luck",
                "social skills"
            ]
        },
        {
            "id": "http://davembush.github.com/amazing-angular2-dom-tips-tricks-and-warnings/",
            "url": "http://davembush.github.com/amazing-angular2-dom-tips-tricks-and-warnings/",
            "title": "Amazing Angular2 DOM Tips, Tricks, and Warnings",
            "date_published": "2017-01-17T12:30:00.000Z",
            "content_html": "<p>I’ve been working with Angular2 now since RC0 and I’ve learned quite a few things about Angular2 DOM tips, tricks, and warnings that you’ll want to pay attention to as you get started.</p>\n<figure>![](/uploads/2017/01/image.png \"Amazing Angular2 DOM Tips, Tricks and Warnings\")<figcaption>Photo credit: [Sister72](//www.flickr.com/photos/sis/196867770/) via [VisualHunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Avoid-DOM-Manipulation\"><a href=\"#Avoid-DOM-Manipulation\" class=\"headerlink\" title=\"Avoid DOM Manipulation\"></a>Avoid DOM Manipulation</h2><p>One of the first things you need to understand about how Angular2 works compared to AngularJS is that any DOM manipulation you do using Angular2 isn’t really manipulating the DOM. At least not directly. Everything that happens at the DOM level is a result of a state change in the component. When Angular2 realizes that the state has changed, it changes the DOM to reflect the change.</p>\n<p>What this means, generally, is that if you need to know about some state change that happened at the DOM level, you’ll want to track that change in your component class. Can you access the DOM directly from your code? Yes. And sometimes you might just have to. But you’ll produce code that is much easier to test if you avoid having your code reach up into the DOM to get current state information.</p>\n<p>You may have already heard about the experimental Web Workers support in Angular2. To make sure you can use this, it would be best to avoid direct DOM manipulation until we are sure the Web Workers implementation will be able to deal with this properly. What this all means in practical terms is that you’ll want to avoid using libraries such as jQuery to manipulate your code and instead replicate that behavior using native Angular2 calls.</p>\n<h2 id=\"Only-Generate-the-HTML-You-Need\"><a href=\"#Only-Generate-the-HTML-You-Need\" class=\"headerlink\" title=\"Only Generate the HTML You Need\"></a>Only Generate the HTML You Need</h2><p>On a similar note, you only want to render the HTML you’re going to need at any one time. Not everything all at once. This will allow your code to render much more efficiently.</p>\n<p>For example, if you have a menu that has dropdown menus, the temptation is going to be to render all the HTML the menu may need all at once and use JavaScript to show or hide the dropdowns as you mouse over them or click them. But with Angular2, you could use the *ngIf directive to include and exclude the menu option as you need them to show. This reduces the initial page size and simplifies your code. Been there, done that.</p>\n<p>By the way, there are other directives you’ll want to get familiar with, but *ngIf is probably the most often ignored because you are likely to try to use display:none to hide an element instead of just eliminating it from the DOM completely.</p>\n<h2 id=\"Minimize-Change-Detection\"><a href=\"#Minimize-Change-Detection\" class=\"headerlink\" title=\"Minimize Change Detection\"></a>Minimize Change Detection</h2><p>I was recently working on a component that displayed a nested array as a set of tabs and dropdown menus. Everything was working great but I wanted to check the CSS on the dropdown so I could make some adjustments. This is when I discovered that the HTML was being rewritten about once a second even though nothing had changed. I couldn’t see this on the main screen, but it became super evident when I opened the developer tools.</p>\n<p>Fortunately, I had already learned about OnPush change detection. So I was able to set my component to use Push notification:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">    templateUrl: <span class=\"string\">&#x27;template.html&#x27;</span>,</span><br><span class=\"line\">    changeDetection: ChangeDetectionStrategy.OnPush <span class=\"comment\">// &lt;===</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export <span class=\"keyword\">class</span> <span class=\"title\">View</span> ...</span><br></pre></td></tr></table></figure>\n\n<p>And now the component only re-renders when the data it is looking at changes.</p>\n<p>For Push notification to work correctly, all the data that the component is looking at has to be <a href=\"/what-if-everything-was-immutable/\">immutable</a> or an <a href=\"/reasons-to-use-rxjs-today/\">Observable</a>. These are both patterns you should become familiar with because any well architected Angular2 application will make significant use of both of these.</p>\n<h2 id=\"Accessing-the-Component-Container\"><a href=\"#Accessing-the-Component-Container\" class=\"headerlink\" title=\"Accessing the Component Container\"></a>Accessing the Component Container</h2><p>Another problem I recently had was that I wanted to use the class attributes from the container on a child component. The question I had trouble getting the answer to was, “just how to I access the container element?” This was very easy. It is always easy once you know the secret handshake.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.elementRef</span><br></pre></td></tr></table></figure>\n\n<p>There are various properties and methods hanging off that which might be useful to you. In my case, I wanted to go after the classes that had been attached and reattach them to the INPUT element that was a child of the component. So, I needed to use:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.elementRef.nativeElement.classList</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Accessing-Child-Elements\"><a href=\"#Accessing-Child-Elements\" class=\"headerlink\" title=\"Accessing Child Elements\"></a>Accessing Child Elements</h2><p>Similarly, you might want to access child elements from your code. This is much easier to find when you search the Internet.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ViewChild(<span class=\"string\">&#x27;input&#x27;</span>) input: ElementRef;</span><br></pre></td></tr></table></figure>\n\n<p>@ViewChild is an attribute that tells the Angular2 compiler to look for an element in the template with the variable named input. I’ll explain template variables in a bit. In the code above, I’m going after the INPUT element with a template variable named “input” so I typed it as ElementRef since I don’t have a specific class name for it.</p>\n<p>If you only have one unique element, you can just use code that looks more like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ViewChild(ElementClassName) variableName: ElementClassName;</span><br></pre></td></tr></table></figure>\n\n<p>Of course, you’ll want to make sure you imported <code>ElementClassName</code> for this to work. In this case, I’m going after a specific type of element so I type the variable as that type. Now my typescript code knows what properties, fields, and methods I have available.</p>\n<h2 id=\"Template-Variables\"><a href=\"#Template-Variables\" class=\"headerlink\" title=\"Template Variables\"></a>Template Variables</h2><p>As I mentioned above, you can create template variables to allow you to access your child elements from your typescript code. But you can use them for other purposes as well. To create a template variable, just put a hash in front of the variable name you want to use.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">firstName</span> <span class=\"attr\">...</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Now you can use this in your typescript using ViewChild() as explained above, or you can use it in your template as a regular variable.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123; &#123;firstName.value&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Use-a-Model-Driven-Approach\"><a href=\"#Use-a-Model-Driven-Approach\" class=\"headerlink\" title=\"Use a Model Driven Approach\"></a>Use a Model Driven Approach</h2><p>If you are coming from AngularJS, you may be tempted to use what is commonly referred to as a Template Driven approach. This is approach that relies no “Two-Way” data-binding to update the data in the typescript code to the fields in your template. While this works for a lot of simple apps, you never know when a simple app will turn into a complex app and your Template based approach will quickly become insufficient.</p>\n<p>No, what you want to use is the Model Driven approach. This approach gives you A LOT more control over what we typically are attempting to do in our forms and scales well as the complexity of our forms increases.</p>\n<p>I’ve written a lot more about this in my post on <a href=\"/awesome-angular2-architecture-options-and-opinions/\">Angular2 Architecture</a>.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Obviously, there is a lot to learn. If you keep using Angular2 like you’ve been using AngularJS, you are going to run into a lot of difficulties. It pays to learn how a system works prior to using it for a real application.</p>\n<p>What have you learned along the way? Leave a comment.</p>\n",
            "tags": [
                "angular",
                "typescript",
                "DOM"
            ]
        },
        {
            "id": "http://davembush.github.com/what-if-everything-was-immutable/",
            "url": "http://davembush.github.com/what-if-everything-was-immutable/",
            "title": "What if Everything Was Immutable?",
            "date_published": "2017-01-10T12:30:00.000Z",
            "content_html": "<p>The first time a programmer who was trained in the classical procedural&#x2F;object oriented history is confronted with the concept of making everything immutable, the first question that comes to mind is, “won’t that make my application slow?”  This is because of how most programmers have been trained.  Making everything immutable generally means that we must copy a lot of memory from one place to another.  Moving memory around is generally considered slow.</p>\n<p>And so, most programmers dismiss the whole idea as crazy talk.  But is it really all that crazy?</p>\n<figure>![](/uploads/2016/12/image-4.png \"What if Everything Was Immutable?\")<figcaption>Photo credit: [Paul Stevenson](//www.flickr.com/photos/pss/354177349/) via [Visualhunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Two-Paths\"><a href=\"#Two-Paths\" class=\"headerlink\" title=\"Two Paths\"></a>Two Paths</h2><p>So, let’s look at some computer history.  If you’ve been in this industry any length of time, you’ve probably heard the name Turing and you know the Turing machine has something to do with programming.  But you may not know how it impacts your day to day programming life.</p>\n<p>In short, Turing is the guy we can point to as the father of modern computing, complete with the fact that we generally process everything sequentially.  It is this sequential processing that causes us to have instructions working on memory and it has served us well.</p>\n<p>But there is another branch of computer science that was made popular by Alonzo Church that is based on Lambda Calculus.  This branch of computer science is where the bulk of Functional Programming can be traced back to.  In this branch, everything is a function.  Any parameters you pass in cannot have their state changed and the value that is returned is a new value.</p>\n<p>The main benefits to this newer functional style are:</p>\n<ul>\n<li>If I pass in the same parameters, I’ll always get back the same value.</li>\n<li>State is never mutated accidentally because state is never mutated.</li>\n<li>Functions never have an unpredictable side effect.</li>\n</ul>\n<p>Just think of how many bugs you wouldn’t have introduced into your code had this been true when you wrote it.</p>\n<h2 id=\"Convergence\"><a href=\"#Convergence\" class=\"headerlink\" title=\"Convergence\"></a>Convergence</h2><p>Recently, functional programming has become more popular and the two branches of computer science have started to merge.  Taking the best of both worlds and using what makes sense from each.  But, we’ve already had at least one immutable object in most of our object-oriented languages.  The String object.  So, what does String give us that we use nearly every day?</p>\n<h2 id=\"Immutable-Strings\"><a href=\"#Immutable-Strings\" class=\"headerlink\" title=\"Immutable Strings\"></a>Immutable Strings</h2><h3 id=\"No-Side-Effects\"><a href=\"#No-Side-Effects\" class=\"headerlink\" title=\"No Side Effects\"></a>No Side Effects</h3><p>As we’ve already mentioned, that fact that something is immutable means it can’t be changed.  So, when you pass a string as a parameter, even though it is an object, the string won’t change if the function changes the string.  This is good news because the calling function doesn’t have to protect itself against unintended consequences.</p>\n<h3 id=\"Memory-Efficiency\"><a href=\"#Memory-Efficiency\" class=\"headerlink\" title=\"Memory Efficiency\"></a>Memory Efficiency</h3><p>The other thing that happens with immutable object is that every string representation only exist once.  So, we never duplicate memory.</p>\n<p>What do I mean by this? Well, take this example from C#</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string1 = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> string2 = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (string1 == string2) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">writeLn</span>(<span class=\"string\">&#x27;is equal&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Testing-Equality\"><a href=\"#Testing-Equality\" class=\"headerlink\" title=\"Testing Equality\"></a>Testing Equality</h3><p><code>string1</code> and <code>string2</code> point to the same object “abc” not two different instances of “abc”.  This is why we can write <code>string1 == string2</code>.  Unfortunately, the &#x3D;&#x3D; operator is overloaded so we are still doing string comparison.  </p>\n<p>But if you want efficiency, you can use the <a href=\"/net-string-pool-not-just-for-the-compiler/\">Intern()</a> method and ReferenceEquals() to bypass this overload and use pointer comparison.  This is a good thing because we test for string equality and inequality so often the performance penalty we incur from making strings immutable is more than offset by the performance gains we get testing for equality.</p>\n<h2 id=\"Make-Everything-Immutable\"><a href=\"#Make-Everything-Immutable\" class=\"headerlink\" title=\"Make Everything Immutable\"></a>Make Everything Immutable</h2><p>If you think about the code you typically write, how much of the time would you benefit from every object in your code working in a similar way to strings? Wouldn’t it be a great thing if you knew that when you passed an object into a function, that function was not going to change the object at all?  Can you think of times that might have prevented a bug? Think of the memory optimizations you would benefit from.</p>\n<p>And how much easier would it be to test for equality if all you had to test was a memory pointer?  Not only would it be fast, but it would be reliable and a lot less work to code.</p>\n<h2 id=\"Immutability-is-Hard-–-or-is-it\"><a href=\"#Immutability-is-Hard-–-or-is-it\" class=\"headerlink\" title=\"Immutability is Hard – or is it?\"></a>Immutability is Hard – or is it?</h2><p>So now that you know what the benefits are, you are probably thinking, “Yes, but coding immutability into a language that doesn’t support it natively is a lot of work.  It is so much easier to write code the way I always have, even if it isn’t quite a safe.” Yes, I feel your pain.  But there are libraries for that.  Say you could get all the benefits of immutability with very little programming or performance cost?  Would you be interested? I know I was.  Just having the benefits of immutable data with the performance was benefit enough for me.  But then I was introduced to <a href=\"//facebook.github.io/immutable-js/\">immutable.j</a>s and I realized that I could have all of the benefits with a lot less performance cost than I was expecting because the library uses data structures that allow us to manipulate pointers rather than raw data.  The result is that only pointers to data that have actually changed change.  Nearly everything else stays as it was and adding items to List instead of arrays and Maps ends up being a lot more efficient.</p>\n<h2 id=\"Impact-on-Angular2\"><a href=\"#Impact-on-Angular2\" class=\"headerlink\" title=\"Impact on Angular2\"></a>Impact on Angular2</h2><p>By using immutable object in Angular2 along with libraries like <a href=\"//github.com/ngrx/store\">NgRX&#x2F;Store</a> you can see some major performance increases because the view will be able to determine when it needs to change based on simple object pointer comparison rather than checking entire objects.  For compute-intensive tasks, this is going to be a huge benefit.</p>\n<p>But it is also well worth learning how to use this before you ever need it simply because it will be a new way of thinking about your project that may take some time to get accustomed to.</p>\n",
            "tags": [
                "angular",
                "javascript",
                "immutable"
            ]
        },
        {
            "id": "http://davembush.github.com/the-irrational-fear-of-javascript-script-kiddies/",
            "url": "http://davembush.github.com/the-irrational-fear-of-javascript-script-kiddies/",
            "title": "The Irrational fear of JavaScript \"Script Kiddies\"",
            "date_published": "2017-01-03T12:30:00.000Z",
            "content_html": "<p>Over the last several months, I’ve seen a lot of whining, complaining a fear regarding Angular 2 in particular and the JavaScript platform in general.</p>\n<p>Terms like “JavaScript fatigue” are indicative of the attitude.</p>\n<p>Another place I see this is with the recent announcement from the Angular team stating there will be another major point release every six months.  Like this is a bad thing? Or the general attitude that particular (modern) design decisions that have been made in some of the more recent frameworks that have been released are bad for JavaScript.</p>\n<p>And I look at that and honestly wonder why these people are programming in the first place.  If change bothers you, you are really in the wrong industry.</p>\n<figure>![](/uploads/2016/12/image-3.png \"The Irrational fear of JavaScript \"Script Kiddies\"\") Photo via [tookapic](//pixabay.com/en/users/tookapic-1386459/) via [Visualhunt.com](//visualhunt.com/)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"I’m-Moving-To-…\"><a href=\"#I’m-Moving-To-…\" class=\"headerlink\" title=\"I’m Moving To …\"></a>I’m Moving To …</h2><p>I seriously saw this comment on one of the articles announcing the major point release and jumping to version 4 instead of 3.  The actual comment was, “I’m going to move to React.”  Now, the reason he was going to move to React because he’s afraid that these major point releases are going to be drastically different from the previous version so that he’ll always need to be learning something new.  I understand the fear.  But, I think it is unfounded.  Aside from the fact that the Angular team has assured us that there won’t be any breaking changes in the next version, what we have to take a look at is WHY there were so many breaking changes from version 1 to version 2.</p>\n<h2 id=\"Remember-when…\"><a href=\"#Remember-when…\" class=\"headerlink\" title=\"Remember when…\"></a>Remember when…</h2><p>Remember back to when AngularJS was first introduced?  The best platform we had at the time was jQuery and KnockOut.  Yes, there were others, but those were the most prominent.  Especially jQuery.  Since then, the browsers have stabilized and most of the reasons for using jQuery have vanished.</p>\n<p>Another factor we need to consider is that the language has changed.  Oh, yeah, you can still write code like you used to 10 years ago, if you want.  But, the standards committee has finally committed to putting out new standards for the language every year.  So now, we have improvements that handle scope closure issues and fat arrow functions and the promise of not having to use promises or callbacks to force JavaScript into a more synchronous flow by using async and await.</p>\n<p>And then there is the history of various frameworks that have come out since.  We’ve made a lot of mistakes in the past that have led to improved ways of working with JavaScript to achieve various goals.  Function programming has crept into the mainstream.  Reactive programming has become more popular.</p>\n<p>For any framework to stay stagnant under these conditions would be foolish, if not suicidal.</p>\n<p>And to that programmer who is leaving Angular for React?  Good luck.  You think Angular is bad.  React makes all those changes you dread without changing the major number.</p>\n<h2 id=\"What-would-it-be-like-if-…\"><a href=\"#What-would-it-be-like-if-…\" class=\"headerlink\" title=\"What would it be like if …\"></a>What would it be like if …</h2><p>Just imagine with me what it would be like if nothing ever changed.  How far back do you want to go?  How about back to where I started programming.  OK, that was 29 years ago.  I started programming on DOS 3.1 using Clipper (that’s a dBase III compiler).  We had 640K (that’s 640,000 bytes, not megs, not gigs) to program in.  We used overlay tricks to cram programs that were three times that size into the computer.  There was no GUI and what graphics we did have were incredibly grainy.  You were lucky if you had color.  There was no Internet, that was still the “property” of the colleges and the universities.  No Google to find answers to your questions.  No blogs.</p>\n<p>No cell phones.</p>\n<p>No social media.</p>\n<p>And all of that was less than 30 years ago.</p>\n<p>And yet, the way many people act, they would like things to stay the same.  And I ask, “Why?”  So that 30 years from today we are still struggling with the same issues we are today?</p>\n<h2 id=\"Maturity\"><a href=\"#Maturity\" class=\"headerlink\" title=\"Maturity\"></a>Maturity</h2><p>Every new technology goes through essentially the same process.</p>\n<p>At first, it is brand new.  No one really knows the best way to use it.  Some are better planned than others, others were accidents and were subject to more discovery than others.  JavaScript was one of those that was more of an accident.  So, we’ve spent a lot of time trying to figure out the best way to use it.  Think about this, if we had known then what we know now, don’t you think JavaScript would have been designed differently from the beginning? At some point the new technology either dies, or matures enough that people start experimenting with how to use it best.  This is the place where design patterns are developed and features are added to the language.  This is the part of the cycle I love and is generally where I tend to jump into the technology.</p>\n<p>Eventually the technology matures and gets boring.  This is where I tend to jump off.  Java and .NET are in this phase.  The patterns for both are well established.  What features are being added are at the “nice to have” level.  But generally everything most people need to be able to do can already be done with what is available.</p>\n<p>We are currently at the beginning of the experimental phase.  Expect to see A LOT of change in the next several years.  If you don’t like it, move to a more mature technology that won’t change so much on you.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>The final factor that magnifies all of the problems with JavaScript I’ve mentioned is that for way too long, JavaScript has been the language of Script Kiddies.  These are “programmers” who think that because they can achieve some sort of animation or validation on an HTML page by copy and pasting JavaScript they are real programmers.  So when someone with much more experience comes along and shows them a better way to program, instead of trying to learn they assert that this new way is wrong, or ridiculous, or declare they are going to take their toys and go to some other castle.</p>\n<p>The problem is, all the castles are now occupied by Kings and Queens instead of children who don’t know any better.</p>\n",
            "tags": [
                "javascript"
            ]
        },
        {
            "id": "http://davembush.github.com/awesome-angular2-architecture-options-and-opinions/",
            "url": "http://davembush.github.com/awesome-angular2-architecture-options-and-opinions/",
            "title": "Awesome Angular2 Architecture Options and Opinions",
            "date_published": "2016-12-27T12:30:00.000Z",
            "content_html": "<p>On the subject of Angular2 Architecture, the perception is that Angular 2 is a highly-opinionated architecture. But even though there is a <a href=\"/angular.io/styleguide\">style guide for Angular 2</a>, there are a lot of decisions that still need to be made when working on any but the most trivial of applications. And even then, since most applications take on a life of their own, one could make the case that you need to make these decisions for any application you are building regardless of the initial size. Applications grow up. But, that’s another blog post</p>\n<p>I’ve identified, and have formed opinions about 5 areas that Angular 2 leaves open for decisions. Areas that if you don’t spend time considering the choices and making decisions could cost you in the future</p>\n<p>The five areas I’ve identified are:</p>\n<ol>\n<li>Handling Forms</li>\n<li>Page State Management</li>\n<li>Component State Management</li>\n<li>Data Flow</li>\n<li>Client Side Data</li>\n</ol>\n<figure>![](/uploads/2016/12/image-2.png \"Awesome Angular2 Architecture Options and Opinions\") Photo via [africaniscool](//pixabay.com/en/users/africaniscool-216435/) via [Visualhunt.com](//visualhunt.com/photos/business/)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Handling-Forms\"><a href=\"#Handling-Forms\" class=\"headerlink\" title=\"Handling Forms\"></a>Handling Forms</h2><p>There are, at this point, two ways of dealing with forms in Angular 2. The first looks a lot like Angular 1 in that it is “Template Driven.” That is, everything you would describe about the form goes in the template. Using declarative syntax, the bulk of your form logic is declared in “HTML” like syntax and bound to your TypeScript code in a “code behind” kind of way. In a lot of ways, this will be very familiar to people who have coded ASP.NET or Angular 1</p>\n<p>But, the problem with using this method is that at some point, you won’t be able to do something you need to do using just a declarative syntax. The option is to use a “Model Driven” approach. These leaves the HTML parts in the template with a few tags to wire the template to the TypeScript code it is associated with, but the bulk of the processing is all in the TypeScript file. On the surface, you might think, “but Template Driven is much easier to think about.” But I assure you, using a predominately model driven approach has several advantages that the serious programmer will enjoy.</p>\n<h3 id=\"More-control-over-your-forms\"><a href=\"#More-control-over-your-forms\" class=\"headerlink\" title=\"More control over your forms.\"></a>More control over your forms.</h3><p>The first advantage you will notice is that you’ll have more control over your form. One place you will notice this is with form validation. But, you’ll also notice greater control because you will have direct control on how the data moves in and out of your form instead of the “magic happens here” of data binding that can, with complex forms, become entirely too complex to reason about.</p>\n<h3 id=\"Easier-to-test-the-forms\"><a href=\"#Easier-to-test-the-forms\" class=\"headerlink\" title=\"Easier to test the forms.\"></a>Easier to test the forms.</h3><p>Another huge advantage to using Model Driven forms is that you end up with forms that are MUCH easier to test. You can assume that the HTML is doing what it should and just test the TypeScript code. With a more template driven approach you’ll need to work out how to actually test your HTML. It can be done, and it isn’t really all that hard. But using a model driven approach is easier.</p>\n<h3 id=\"Easier-to-reason-about-how-the-code-is-being-processed\"><a href=\"#Easier-to-reason-about-how-the-code-is-being-processed\" class=\"headerlink\" title=\"Easier to reason about how the code is being processed.\"></a>Easier to reason about how the code is being processed.</h3><p>Related to the two previous points, using Model Driven forms makes your cod much easier to reason about. Once again, that whole “magic happens here” approach of data-binding can get in the way, while using the model driven approach will allow you to be very direct about what gets updated when more directly.</p>\n<h2 id=\"Page-and-Component-State-Management\"><a href=\"#Page-and-Component-State-Management\" class=\"headerlink\" title=\"Page and Component State Management\"></a>Page and Component State Management</h2><p>The temptation is to try to architect an Angular 2 project so that it looks something like how we used to write Angular 1 applications. That is, using an MV* architecture. Where this gets messed up is that the HTML template, the TypeScript and the CSS are really all part of the same class. Once you start thinking of them as one, MV* stops making as much sense</p>\n<p>The pattern I prefer here is one that uses the top-level View as a Controller View. That is, it is the one component that is responsible for being the traffic data cop. All the components under it are responsible for either rendering the state information they have been passed by the Controller View, updating that state information or firing event out when they’ve done something the outside world should know about</p>\n<p>The View Controller, on the other hand, is responsible for getting the data to and from where ever it needs to go</p>\n<p>By doing this, you end up with very testable, modular code and it becomes very clear that all your logic for a page, or sub-page, exist in one very well-defined section of your code. In fact, you can eliminate the need for most dependency injection by following this pattern. Any dependency injection you do need will probably end up in your Controller View.</p>\n<h2 id=\"Data-Flow\"><a href=\"#Data-Flow\" class=\"headerlink\" title=\"Data Flow\"></a>Data Flow</h2><p>So far, the three main methods of data management that have emerged for Angular 2 seem to be:</p>\n<ol>\n<li>Direct Access</li>\n<li>Flux&#x2F;Redux</li>\n<li>NgRX&#x2F;Store</li>\n</ol>\n<h3 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h3><h4 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h4><p>While MVVM was possible in Angular 1, and it works at the View level in Angular 2, the preferred model is what has come to be known as “One way data binding” which sounds odd, and really doesn’t describe what it does</p>\n<p>In short, while all the code you write may act like it is using two-way data-binding, the reality is that the code is only ever flowing in one direction</p>\n<p>The problem with true MVVM data binding is that when it is done correctly, data changes because other data changed</p>\n<p>This makes it very difficult to reason about the data in your application in all but the smallest of applications</p>\n<p>Further, to get this to work correctly, the resulting system is almost always slower than it needs to be. I’ve written before about <a href=\"/4-reasons-to-drop-mvvm/\">why I think MVVM is a poor choice for design patterns</a>.</p>\n<h4 id=\"Direct\"><a href=\"#Direct\" class=\"headerlink\" title=\"Direct\"></a>Direct</h4><p>It is possible to write an application that kind of looks like old style three layer architectures that some might try to call MVC, but it is a poor man’s implementation at best, and only because Angular 2 implements its own Dependency Injection Container mechanism does the result end up being anything close to loosely coupled</p>\n<p>This implementation generally has the top-level component managing the state of the application, or at least the state of that particular page, and calling out directly to services that retrieve data from the server and manipulate data</p>\n<p>While it works, in larger applications it can be difficult to manage and respond to state changes throughout your application. Imagine if that could happen for “free”.</p>\n<h4 id=\"Flux\"><a href=\"#Flux\" class=\"headerlink\" title=\"Flux\"></a>Flux</h4><p>The React community introduced a new pattern called Flux. There are multiple implementations of Flux, but the one that has become the defacto standard is called Redux. In general, Flux is made up of a series of publish subscribe mechanisms and ends up looking a lot like what the Gang of Four originally defined MVC to be while not actually being MVC.</p>\n<p>In very simple terms, the View fires an event to a “Dispatcher” which is a singleton. Each repository, or data store, or model (just depends on what you want to call it) registers a listener with the “Dispatcher” that lets the dispatcher know that it wants to know whenever something significant happens. These repositories are also singletons.</p>\n<p>When the Dispatcher receives a notification from a View, it notifies all the listeners in turn. The listeners look at the message they receive from the dispatcher to see if it is something they care about. If it is, they process the message accordingly.</p>\n<p>Once they are done, they fire an event to each Controller View that has registered a listener with them. The Controller View then updates the view based on the information it was passed in the event. I don’t want this to get too far down the road of “How” but to make the above paragraph just a bit clearer…</p>\n<p>There is a top-level View item that does no rendering. It is only responsible for responding to event notifications and passing the data down into the child views. You may hear this referred to as a View Controller, but it is more accurately a Controller View.</p>\n<p>Hopefully, you can see how this solves the problem up needing to force an update on a View because some other View changed the state of something. Because everyone who cares about the state is listening for a notification that something changes, the screen update “just works” and is much more reliable than a more MVVM style of updating the view and data.</p>\n<h4 id=\"NgRX-x2F-Store\"><a href=\"#NgRX-x2F-Store\" class=\"headerlink\" title=\"NgRX&#x2F;Store\"></a>NgRX&#x2F;Store</h4><p>Reactive Extensions are available for multiple platforms, including JavaScript. You can read more about them at <a href=\"//reactivex.io/\">http://reactivex.io/</a> and I’ve written about <a href=\"/reasons-to-use-rxjs-today/\">the reasons you want to use them</a> before. But for purposes of this article, one of the problems that Reactive programming solves is cleanly dealing with the asynchronous nature of JavaScript</p>\n<p>Nowhere is this more obvious than with Ajax request.</p>\n<p>If you’ve ever needed to deal with having to wait for multiple Ajax request to complete before you do something meaningful with the data, you are going to love Reactive programming.</p>\n<p>Another thing that Reactive programming gives you is it makes everything a “stream”.</p>\n<p>In simple terms imagine working with an array that never ends and being able to respond appropriately to each element that come through that stream of arrays and you’ll have a good conceptual idea of what it means that everything is a stream. This is how Reactive programming deals with asynchronous calls and events. Add to this the concept that streams can be combined and you’ll start to understand why this cleans up the asynchronous nature of JavaScript.</p>\n<p>The result is that we can write code that fills the stream and other code that says, “when a particular item comes in on the stream, let me know about it.” Basically, an embellished publish&#x2F;subscribe design pattern.</p>\n<p>From the description above, you should be able to see that Reactive programming can be used to implement Flux.</p>\n<p>This is exactly what NgRx&#x2F;Store does. It allows us to concentrate on writing Reducers while it focuses on managing the dispatcher, event handling, and the various repositories, or stores, our application might need.</p>\n<p>As I’ve used NgRX&#x2F;Store in my own applications, I’ve found that it further reduces the need for dependency injection and increases the testability of my code. The tradeoff is that there is a learning curve. But the time learning this new design pattern is well worth the effort.</p>\n<h2 id=\"Client-Side-Data\"><a href=\"#Client-Side-Data\" class=\"headerlink\" title=\"Client Side Data\"></a>Client Side Data</h2><p>At some point, you are going to need to manage the data on the client side. There are several issue you might want to consider. But at the most fundamental layer, you will end up with data on the client side that looks like a relational data in a database. The only difference is that your data will be primarily JSON data. Eventually, you’ll want to join that data or filter it. How will you do that? One product you might consider is <a href=\"//www.getbreezenow.com/\">Breeze</a>. It does a lot of stuff that makes your client side data look more like a database. It is worth a look</p>\n<p>If you end up using NgRX&#x2F;Store and RxJS, you may find that does everything you need. So that is another option. The advantage to using this method is you are no longer constrained by trying to make everything look like a relational database table even when it isn’t</p>\n<p>The other option, of course, is to use both for what they are good at.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Angular 2 brings a lot of new concepts. While it might be tempting to use coding patterns that seem more comfortable, I believe that the path that Angular 2 has chosen is the future of JavaScript specifically and the programming world in general.</p>\n<p>Just about everything that is new falls into the general category of “Functional Programming” and much like the switch from procedural programming to object oriented programming, there are going to be people who are not able to wrap their heads around the concepts. How many guys ended up using C++ syntax to write C code? However, the productivity gains once we make the jump to this new way of thinking about our code will be well worth both the learning curve and the possible loss of some older programmers who can’t or won’t be retrained.</p>\n<p>There is also a danger of not being able to retain good programmers because we are still stuck using design patterns that were popular in the past but have been superseded by ways the developer community at large considers “better.”</p>\n",
            "tags": [
                "angular",
                "javascript",
                "archietcture"
            ]
        },
        {
            "id": "http://davembush.github.com/dissecting-angular-2-modules/",
            "url": "http://davembush.github.com/dissecting-angular-2-modules/",
            "title": "Dissecting Angular 2 Modules",
            "date_published": "2016-12-20T12:30:00.000Z",
            "content_html": "<p>In the new world of Angular 2, and even in the world of Angular.js, you might feel like the concept of a module is the most difficult to wrap your head around.</p>\n<p>This is especially if you’ve only ever written client side JavaScript code. Once you’ve learned why you need a module, the temptation is to use one module for all your code. I am guilty of doing that myself when I first started. But, many times using one module for your entire application is the wrong thing to do because it reduces the ability to reuse your code in other modules. Once you understand why modules exist, you’ll begin to reason about how to use modules appropriately.</p>\n<figure>![](/uploads/2016/12/image-1.png \"Dissecting Angular 2 Modules\")<figcaption>Photo credit: [Sappymoosetree](//www.flickr.com/photos/bahkubean/416801559/) via [Visual hunt](//visualhunt.com) / [CC BY-ND](//creativecommons.org/licenses/by-nd/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Why-Do-Modules-Exist\"><a href=\"#Why-Do-Modules-Exist\" class=\"headerlink\" title=\"Why Do Modules Exist?\"></a>Why Do Modules Exist?</h2><p>When the Angular 2 project started, modules did not exist, even though they had existed in Angular.js. But as the RC process continued, it became obvious that modules were going to be necessary. We could have written our code without modules, but the amount of code we would need to repeat to get the same functionality would be dramatically greater.</p>\n<p>It also often becomes more complex and harder to reason about.</p>\n<p>So, what exactly do modules get us? If you’ve worked in languages in the past that have the concept of a namespace, it might help you to think of a module as a substitute for namespaces. They allow us to group similar functionality together, and specify what functionality that belongs to the module can be accessed by the outside world. For example, I recently wrote a component that all the applications in our organization will be starting out with. It is composed of multiple components, but I only want the top most component exposed to the developers who will be using it.</p>\n<p>So, modules allow us to both group code together and encapsulate code so that code that might otherwise be publicly available becomes private to the outside world.</p>\n<h2 id=\"Dissecting-Modules\"><a href=\"#Dissecting-Modules\" class=\"headerlink\" title=\"Dissecting Modules\"></a>Dissecting Modules</h2><p>You may remember that in the <a href=\"//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-4\">application we’ve been working on</a> we’ve already created a module. In fact, when you create any application using the CLI, there will always be this top-level module.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  declarations: [</span><br><span class=\"line\">    AppComponent</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    BrowserModule,</span><br><span class=\"line\">    FormsModule,</span><br><span class=\"line\">    HttpModule,</span><br><span class=\"line\">    GettingStartedWithAngular2RoutingModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export <span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>The declarations section simply specifies the components that this module owns. In the case of our app so far, the only component it owns is the top-level AppComponent.</p>\n<p>The imports section loads modules this module is going to need available in the components it owns. Many times, the components we need access to are only needed in our templates. Prior to using modules, we would need to include our components in our TS files just so the templates could access them. By loading them in the module, we can load modules once even though we may have multiple components that are part of the module that may need them.</p>\n<p>Since our module is not using any injectables, the providers section is empty. But that is what the providers section is for. Any class that we will need to inject in the constructor of other code would be listed in this providers section.</p>\n<p>Finally, the bootstrap section has the one component this module should load. This only shows up in the top-level module. While it is needed, I’ve yet to figure out why. We’ve already loaded the module, and therefore the component and the tag for the top-level component is in our index.html file, so I can’t see the point of specifying it here yet again.</p>\n<p>You may wonder, “How does this AppModules get loaded?” Go back to the root of your app directory and look for the main.ts file. You’ll see that we loaded it in there.</p>\n<p>platformBrowserDynamic().bootstrapModule(AppModule);</p>\n<p>You might wonder why this code is not included in the application module. This is because you might not always want to use platformBrowserDynamic(). If you are using Web Workers to run your code or using Ahead of Time compile, you would use two other methods of bootstrapping the module. I’ve only mentioned three here, but there are others.</p>\n<p>The next property you are likely to see in a module declaration is the exports section:</p>\n<p>exports:  [Edit]</p>\n<p>This tells the module that has imported this module that it can use the Edit component. We didn’t need this in the app module because the app module isn’t being used by another module. It is the top most module and really can’t be used by any other module by definition.</p>\n<h2 id=\"Routing-and-Modules\"><a href=\"#Routing-and-Modules\" class=\"headerlink\" title=\"Routing and Modules\"></a>Routing and Modules</h2><p>Several weeks ago we took a look at <a href=\"/angular-2-lazy-loading/\">implementing Lazy Loading by modifying our routing module</a>. What is unique about this situation is that every time you lazy load a module, it becomes the top most module, so once again, there is no real need to export it.</p>\n<h2 id=\"When-Should-Modules-Be-Used\"><a href=\"#When-Should-Modules-Be-Used\" class=\"headerlink\" title=\"When Should Modules Be Used?\"></a>When Should Modules Be Used?</h2><p>As I said when I started, the temptation is to just put all our import statements that our application is going to need in our app module. But that seems like an extremely lazy way of writing code. And when you go to write lazy loaded modules, that’s not going to work so well for you. So, there are two ways you can approach this.</p>\n<p>First, you can just create a module for every component you write. It is probably over kill, but it would be hard to go too far wrong here. Given the choice between too many modules and not enough, I’d error on the side of too many. At least it gives you the flexibility do make necessary changes in the future.</p>\n<p>But the more reasonable approach would be one module per feature and a module for common stuff. For example, if you are writing a component library, you would probably be safe writing a module for all the components in your library so you only have to import the library module and all your component would automatically become available to you. You’ll want to at least want to have one module per route so that you can lazy load the routes if you decide that is necessary.</p>\n",
            "tags": [
                "angular",
                "javascript",
                "modules"
            ]
        },
        {
            "id": "http://davembush.github.com/reasons-to-use-rxjs-today/",
            "url": "http://davembush.github.com/reasons-to-use-rxjs-today/",
            "title": "Reasons to use RxJS Today",
            "date_published": "2016-12-13T12:30:00.000Z",
            "content_html": "<p>If you’ve started looking at Angular 2, one of the things that you’ll notice is that <a href=\"//github.com/Reactive-Extensions/RxJS\">RxJS</a> has gotten a bit of a toe hold in the framework. This becomes apparent the first time you try to access data. Gone is the $http service that returns a promise. Instead, we now have a service that returns an Observable. Now, writing the code to access the server is arguably easy to learn. But, as you travel down the rabbit hole that is Angular 2, you realize that RxJS shows up in places as disperse as <a href=\"//github.com/ngrx/store\">NgRX&#x2F;Store</a>, handling events, and as we’ve already mentioned, AJAX calls.</p>\n<p>Because it shows up in so many places, this new API is set to be the next thing we will need to learn to be effective JavaScript programmers. But, should we?</p>\n<figure>![](/uploads/2016/12/image.png \"Reasons to use RxJS Today\")<figcaption>Photo credit: [Dace Kiršpile](//www.flickr.com/photos/91035846@N05/9374805577/) via [Visualhunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"A-Story\"><a href=\"#A-Story\" class=\"headerlink\" title=\"A Story\"></a>A Story</h2><p>As I first started to dig into using RxJS, I found myself being more confused than I expected. And yet, I was convinced that this new way of thinking about my code would be well worth the effort.</p>\n<p>It reminds me of the days when we switched from Procedural Programming (PP) to Object Oriented Programming (OOP). Yes, I’ve been coding that long.</p>\n<p>Somewhere around the third year of my career, C++ finally became popular enough that both Borland and Microsoft produced a C++ compiler and framework for developing Windows applications. I remember falling in love with it. Maybe I hadn’t been using procedural programming long enough to make switching difficult. Maybe I just thought about code as Objects anyhow. But, whatever the reason, I couldn’t figure out why some of my peers had such a hard time grasping the concepts.</p>\n<p>As I was working on learning RxJS, I found myself feeling like I was either too old to learn a new trick, or I was just getting dumb in my old age. Why is it so hard? Fortunately, I found a site that helped me understand RxJS specifically and Reactive Functional programming in general. I am no longer in the class of “old farts who can’t learn new stuff.” And now that I understand, everything is starting to look for Reactive.</p>\n<h2 id=\"What-Is-RxJS\"><a href=\"#What-Is-RxJS\" class=\"headerlink\" title=\"What Is RxJS?\"></a>What Is RxJS?</h2><p>If you’ve ready anything about RxJS or any of the ReactiveX libraries that are available for other languages, you’ll find that most of them start off by saying that RxJS “makes everything a stream.” Which, while that may be technically true, isn’t very helpful. What would it look like if we redefine that? The best way to think about RxJS is that it makes everything a special type of collection called an Observable.</p>\n<h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><p>In JavaScript, you are already deal with a special type of collection called an Array.</p>\n<p>Now, let me lead you though the thought process you’ll need to travel down to see how RxJS is going to be helpful for you.</p>\n<p>For now, let’s just assume everything is an array. This will make the jump easier.</p>\n<p>In pure JavaScript, you are typically writing code that either looks like this: (old school)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someArray = [...data here...];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; array.<span class=\"property\">length</span>;i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = someArray[i];</span><br><span class=\"line\">   ... <span class=\"keyword\">do</span> something <span class=\"keyword\">with</span> the data ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Or using newer syntax:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someArray = [...data here...];</span><br><span class=\"line\">someArray.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\"> ...<span class=\"keyword\">do</span> something <span class=\"keyword\">with</span> the data...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"//code.tutsplus.com/tutorials/what-they-didnt-tell-you-about-es5s-array-extras--net-28263\">Array Extras</a> takes some of the code we typically write in these loops and standardizes them so we can reduce the amount of code we need to write, while still achieving the same goals.</p>\n<p>For example, you might loop through an array to generate a new array. For that you would use map(). Or you might loop through an array to filter out elements. That would be filter().</p>\n<p>The great thing about this Array Extra functions is that they each return a new array. This means you don’t impact the original array and you can chain these functions together:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someArray = [...data here...];</span><br><span class=\"line\"><span class=\"keyword\">var</span> transformedAndFiltered = someArray</span><br><span class=\"line\">   .<span class=\"title function_\">filter</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>)&#123;...filter code...&#125;)</span><br><span class=\"line\">   .<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>)&#123;...tranform code...&#125;);</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` javascript</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span>someArray<span class=\"string\">` still has the original data and transformedAndFiltered has the new data.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### Events</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Now, imagine we create a system where we have arrays that never end. Instead of using the old school for/next loop, we would be left with only being able to use a forEach, or one of the Array Extras function. Which would be fine. The function would just wait until the next element showed up or it got some sort of signal that there wouldn’t be any more elements.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This is exactly what RxJS does. So, now we can listen for events as though they were arrays.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> javascript</span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">fromEvent</span>(element,<span class=\"string\">&#x27;click&#x27;</span>)</span><br><span class=\"line\">   .<span class=\"title function_\">subscribe</span>(<span class=\"keyword\">function</span>(<span class=\"params\">x</span>)&#123;...<span class=\"keyword\">do</span> something <span class=\"keyword\">in</span> response...&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Pretty cool, right? If you need to, you can place a filter prior to the subscribe so that you only get events that meet the exact condition. In fact, if any of the functions you pass as parameters have conditional logic in them, this is a good indication that you are not yet thinking in a Reactive way.</p>\n<h3 id=\"Asynchronous-Code\"><a href=\"#Asynchronous-Code\" class=\"headerlink\" title=\"Asynchronous Code\"></a>Asynchronous Code</h3><p>Now, as I’ve already mentioned, RxJS also lets you deal with asynchronous code as though it is an array. This works pretty much as you would expect on the surface, but there are some added advantages to using RxJS to deal with asynchronous calls. The most significant of them being that you can achieve better flow of control.</p>\n<p>If you’ve ever dealt with needing to make multiple calls to the server for data prior to allowing the user to use the screen, you’ll appreciate that you can make all the calls at once and only continue once all of them have completed. Or, you could make the calls one after the other, if you have calls that depend on each other. Yes, promises do this as well, but the Reactive method is a bit cleaner.</p>\n<p>The other way RxJS improves on promises is that you can cancel a request instead of just letting it run even though you no longer want the data. This means, you won’t be tying up bandwidth waiting for data to come back when you want newer data instead.</p>\n<p>Finally, using RxJS, you can easily retry a failing request, as well as deal with failing request using the .retry() and catch() functions.</p>\n<h2 id=\"Functional-Matters\"><a href=\"#Functional-Matters\" class=\"headerlink\" title=\"Functional Matters\"></a>Functional Matters</h2><p>Now, all of this is great. But the side effect of the fact that RxJS is both Functional and Reactive is that it not only reduces the amount of code that you need to write, but it also produces code that is less prone to errors and easier to test.</p>\n<p>Let me explain.</p>\n<p>We’ve already shown above that all the RxJS functions return new Observables. I kind of brushed over this. But this is a big deal. Because the original data in the Observable is never modified, you never run the risk of modifying the data that some other part of your code is expecting to never be modified. This is even more important when you are working on a larger project with multiple developers. This means all your assumptions about your data will remain true when your team commits to using functional paradigms throughout your code base.</p>\n<p>But this effect doesn’t just impact the observable code base. What I’ve found is that the more code you write that is functional and obeys the immutable rules, the easier the rest of your code is to test. Specifically, I find myself using less dependency injection simply because I am using immutable objects. Because I can depend on the code not having any side effects, my functional code is easier to test and my none functional, more object-oriented code, is easier to test because it has fewer dependencies.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>The most difficult thing about using RxJS or any other Reactive Functional library is the fact that it requires you to think a little bit differently about the problems you are solving. But the advantages far outweigh the learning curve. Don’t be like so many of the script kiddies on the web who complain every time they must learn something new. Step up to the challenge. Your customers will thank you. The guy who maintains your code in the future will thank you. Your future self will thank you.</p>\n",
            "tags": [
                "javascript",
                "rxjs. angular 2"
            ]
        },
        {
            "id": "http://davembush.github.com/angular-2-lazy-loading/",
            "url": "http://davembush.github.com/angular-2-lazy-loading/",
            "title": "Angular 2 Lazy Loading",
            "date_published": "2016-12-06T12:30:00.000Z",
            "content_html": "<p>Last week when we took a look at <a href=\"/adding-client-side-routing-to-angular-2/\">Client side Routing</a>, I mentioned that one of the reasons you’d want to implement a component in its own module is so that we could lazy load the component and its dependencies</p>\n<p>This week, we want to dig into how to implement lazy loading in your Angular 2 application</p>\n<figure>![](/uploads/2016/11/image-5.png \"Angular 2 Lazy Loading\") Photo via [jordan](//pixabay.com/en/users/jordan3600-400129/) via [Visualhunt](//visualhunt.com/)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"What-Is-Lazy-Loading\"><a href=\"#What-Is-Lazy-Loading\" class=\"headerlink\" title=\"What Is Lazy Loading?\"></a>What Is Lazy Loading?</h2><p>Imagine that you’ve written an application that is divided into four main sections. The people using the site may only use one or two sections of the site at a time, or at all. Is it fair to make them download the entire site? Or maybe you’ve written a monster site. Wouldn’t it make more sense to download only what you need as you need it? The perceived performance of a site written like this far exceeds the performance of a site that requires you to download everything at once</p>\n<p>And so, Lazy Loading was developed as a way of solving these issues and others. The idea is, rather than downloading everything, download only what is needed when it is needed.</p>\n<h2 id=\"The-Code\"><a href=\"#The-Code\" class=\"headerlink\" title=\"The Code\"></a>The Code</h2><p>Remember that last week we implemented a View module and an Edit module. We called them from our router by importing the modules and telling the router to load the components when a route was specified</p>\n<p>Because we are no longer loading the modules as part of our main application, we are going to go into the <code>app-routing.module.ts</code> file and remove all of the references to the components and the module. Instead, we are going to load the module using the <code>loadChildren</code> property in our route array.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\">import &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// import &#123; ViewComponent &#125; from &#x27;./view/view.component&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">// import &#123;ViewModule&#125; from &quot;./view/view.module&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">// import &#123;EditModule&#125; from &quot;./edit/edit.module&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">// import &#123;EditComponent&#125; from &quot;./edit/edit.component&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123; path: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    loadChildren: <span class=\"string\">&#x27;./view/view.module#ViewModule&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//component: ViewComponent</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; path: <span class=\"string\">&#x27;Add&#x27;</span>,</span><br><span class=\"line\">    loadChildren: <span class=\"string\">&#x27;./edit/edit.module#EditModule&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//component: EditComponent</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; path: <span class=\"string\">&#x27;Edit/:id&#x27;</span>,</span><br><span class=\"line\">    loadChildren: <span class=\"string\">&#x27;./edit/edit.module#EditModule&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//component: EditComponent</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    RouterModule.forRoot(routes)</span><br><span class=\"line\">    <span class=\"comment\">//ViewModule,</span></span><br><span class=\"line\">    <span class=\"comment\">//EditModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  exports: [RouterModule],</span><br><span class=\"line\">  providers: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export <span class=\"keyword\">class</span> <span class=\"title\">GettingStartedWithAngular2RoutingModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice the format of the loadChildren string is:</p>\n<ol>\n<li>The path to the module (without the file extension)</li>\n<li>hash</li>\n<li>The class in the component that is exported</li>\n</ol>\n<p>But, there is nothing in the code that tells us what component is supposed to load. This is because the job of deciding what component to load has now been delegated to the module</p>\n<p>This is the part that remained a mystery to me for quite a while. I would look at the code demos but never saw the next part. Maybe this will save you some of that trouble</p>\n<p>In the view module, add this line to the imports array:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> RouterModule.forChild([</span><br><span class=\"line\">    &#123;path: <span class=\"string\">&#x27;&#x27;</span>, component: ViewComponent&#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n\n<p>Notice that we are using forChild here instead of forRoot but otherwise this looks the same as what we originally had for the View component prior to implementing lazy loading</p>\n<p>We can implement a similar line in the EditModule, except the component will be EditComponent.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RouterModule.forChild([</span><br><span class=\"line\">    &#123;path: <span class=\"string\">&#x27;&#x27;</span>, component: EditComponent&#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Under-the-Hood\"><a href=\"#Under-the-Hood\" class=\"headerlink\" title=\"Under the Hood\"></a>Under the Hood</h2><p>Build the system using <code>ng build</code> because I want to show you what is happening under the hood</p>\n<p>Once you’ve built the system, look in the <code>dist</code> directory. You’ll see a <code>0.chunk.js</code> and a <code>1.chunk.js</code> file. These files hold the module and dependencies that we’ve lazy loaded</p>\n<p>If you load the application with the developer tools loaded and look at the network tab, you’ll see that one chunk is loaded immediately, for the view. The other is loaded when you navigate to the add or edit path</p>\n<p>The code so far can be found at <a href=\"//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-4\" title=\"https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-4\">https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-4</a></p>\n",
            "tags": [
                "angular",
                "lazy loading"
            ]
        },
        {
            "id": "http://davembush.github.com/adding-client-side-routing-to-angular-2/",
            "url": "http://davembush.github.com/adding-client-side-routing-to-angular-2/",
            "title": "Adding Client Side Routing to Angular 2",
            "date_published": "2016-11-29T12:30:00.000Z",
            "content_html": "<p>Over the last several Angular 2 posts, we’ve been building up our application bit by bit and examining the various features of Angular 2 along the way using the Angular CLI where that makes sense and modifying it along the way. So far, routing is an area that the Angular CLI does not yet support and so, when you want to use routing in your Angular 2 application, you’ll need to wire most of it in by hand. Now, the routing engine has changed several times during the development of Angular 2. And I know you’re wondering which version of the router this article is going to be talking about. So, to be clear, this article was written using the Angular CLI version 1.0.0-beta.21 and Router version 3.2.1.</p>\n<figure>![](/uploads/2016/11/image-4.png \"Adding Client Side Routing to Angular 2\")<figcaption>Photo credit: [xomiele](//www.flickr.com/photos/xomiele/6759264721/) via [Visualhunt](//visualhunt.com/photos/snow/) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"What-is-Routing\"><a href=\"#What-is-Routing\" class=\"headerlink\" title=\"What is Routing?\"></a>What is Routing?</h2><p>If you are new to developing Single Page Application (SPAs) you might wonder what Routing is. You might be surprised to find out that you already know what routing is, but you’ve never actually called it by this name.</p>\n<p>For example, using MVC in the ASP.NET world, you used routing whenever you specified what controller you expected your code to hit when you specified a particular URL. You’ll remember that we set our code up so that when we specified that URL, code in a controller would get hit. We also had the option of specifying parameters that we wanted to have passed into our controller methods.</p>\n<p>In a SPA, routing does essentially the same thing. The only difference is that we never have to call the server. This makes all our “Pages” virtual. Instead of requiring that our visitors always start at our home page and navigate into the rest of our site; instead of creating a separate page on the server for each page in our site; we can load all the site up front and the user can navigate to exactly the page they want to be at. They can even link directly to that page and the client side will handle displaying the page appropriately.</p>\n<h2 id=\"There’s-a-Catch\"><a href=\"#There’s-a-Catch\" class=\"headerlink\" title=\"There’s a Catch\"></a>There’s a Catch</h2><p>One of the problems you’ll quickly discover is that for this to work, you’ll need to set your server up so that it doesn’t try to handle the routing as well.</p>\n<p>You see, if you navigate to the home page of your web site and then click around into the sub-pages, everything is going to appear to work correctly. But once you try to navigate directly to an inner page, you are going to become extremely frustrated. The problem lies in order your code gets executed.</p>\n<p>When you request a page directly, what happens is that the server will look for that page on the server. If it can’t find it, it will return, appropriately, a 404 error. The problem is that when we ask for a page that only exist because the client side has said it does, when the server goes to look for it, it will return the 404 error. It isn’t there.</p>\n<p>For the moment, I’m ignoring the fact that Angular 2 supplies a feature called Server Side Rendering, which can also take care of this problem. Given regular, out of the box, Angular 2 code, you’ll want to make sure you server knows what to do when the files don’t exist. What I normally do is that I create a rule on my server that says, “if I’m looking for a path that doesn’t have an extension, just return the index.html page you would have returned if I had asked for the home page.” In Express on Node.JS, the code for this looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This comes last.  right before we start listening</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this sends back the index.html file when</span></span><br><span class=\"line\">    <span class=\"comment\">// it looks like they are looking for</span></span><br><span class=\"line\">    <span class=\"comment\">// a client side route</span></span><br><span class=\"line\">    <span class=\"comment\">// assuming a real file will have an extension</span></span><br><span class=\"line\">    <span class=\"comment\">// and a route will not.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(req.<span class=\"property\">url</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;.&#x27;</span>) &gt; -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">status</span>(<span class=\"number\">404</span>)        <span class=\"comment\">// HTTP status 404: Not Found</span></span><br><span class=\"line\">            .<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Not found&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">sendFile</span>(__dirname + <span class=\"string\">&#x27;/www/index.html&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>If you are using IIS and ASP.NET, you might find this article I wrote about using <a href=\"/asp-net-angular-js-html5mode/\">Angular, Routing, and ASP.NET</a> useful.</p>\n<h2 id=\"Enabling-Routing\"><a href=\"#Enabling-Routing\" class=\"headerlink\" title=\"Enabling Routing\"></a>Enabling Routing</h2><p>Since the Angular CLI has included the packages you’ll need to enable routing, there is nothing to install. We just need to write some code.</p>\n<p>Typically routes get enabled at the top of your application after all the common code has been implemented. So, in the location where you want the routing to take effect, add the following tag:</p>\n<p><router-outlet></router-outlet></p>\n<p>I’ve added this to my <code>app.component.html</code> file in the sample app I’ve been working on. Replacing the <code>&lt;h1&gt;&#123; &#123;title&#125;&#125;&lt;/h1&gt;</code> code that we had from the previous weeks.</p>\n<p>If you were to run the code now all that you would see is that the title no longer shows up. We need to add the route code next. You will notice that an <code>app-routing.module.ts</code> file already exist. Open this file. You will see that the bulk of the code we are going to need is already there.</p>\n<p>You should see a line that looks like:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [];</span><br></pre></td></tr></table></figure>\n\n<p>We are going to add a route to this array:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: <span class=\"title class_\">ViewComponent</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>What this is saying is that whenever we ask for the home page, load the “ViewComponent” component.</p>\n<p>But wait, we haven’t added any components yet.</p>\n<p>While we COULD just add a component, what I prefer to do is to add a new module. This is because I dislike the idea of making all the components in my code part of one huge modules. It makes it extremely difficult to refactor my code. I also want the ability to implement lazy loading in the future and I will need the component I am routing to, to be part of its own component in order for that to work.</p>\n<p>To add a View component to our code run the following line from the terminal&#x2F;command line <code>ng g module view</code> This will create a new ViewModule module with a new ViewComponent component located in the view directory.</p>\n<p>The rest of what we need to do is to just wire this all into the existing application.</p>\n<p>Go back to <code>app-routing.module.ts</code> and add an import statement to load in <code>ViewComponent</code> and the <code>ViewModule</code>:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ViewComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./view/view.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">ViewModule</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./view/view.module&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>We also need to add <code>ViewModule</code> to the imports array.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes),</span><br><span class=\"line\">    <span class=\"title class_\">ViewModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: []</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Next, we need to register the routing module with the application. So, load up the app.module.ts file and add an import statement to import the app-routing module:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; _applicationName_RoutingModule&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And add <code>_applicationName_RoutingModule</code> to the imports array:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AppComponent</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">FormsModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">HttpModule</span>,</span><br><span class=\"line\">    _applicationName_RoutingModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Adding additional routes is more of the same. Let’s add another module for editing.</p>\n<p><code>ng g module edit</code></p>\n<p>Add two new paths. One so we can add a new item and one so we can edit an existing item.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">ViewComponent</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;Add&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">EditComponent</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;Edit/:id&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">EditComponent</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>Notice that for the Edit command I added :id at the end. The :id specifies that this location is where the parameter will be. In this case, the ID of the record that we want to edit.</p>\n<p>We will flesh these out later and I’ll leave adding import statements and adding modules to the import arrays to you. It is essentially copy&#x2F;paste&#x2F;modify from the previous code. When you have the code working, you should be able to navigate to &#x2F;Add or &#x2F;Edit&#x2F;id and see the new page.</p>\n<p>If you get stuck, the code so far can be found here: <a href=\"//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step3\" title=\"https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step3\">https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step3</a></p>\n",
            "tags": [
                "angular",
                "routing"
            ]
        },
        {
            "id": "http://davembush.github.com/unit-testing-an-angular-2-cli-project/",
            "url": "http://davembush.github.com/unit-testing-an-angular-2-cli-project/",
            "title": "Unit Testing an Angular 2 CLI Project",
            "date_published": "2016-11-23T00:30:00.000Z",
            "content_html": "<p>This week we want to continue our series about Angular 2 by looking at the Unit Testing capabilities that Angular 2 provides for us. What we want to cover today is:</p>\n<ul>\n<li>Tweaking Karma to avoid using the Browser Window</li>\n<li>Code Coverage</li>\n<li>Tips to testing components</li>\n</ul>\n<p>This article was written using Angular CLI version 1.0.0-beta.20-4 (Tip, if you are upgrading on windows, <code>rm –rf node_modules dist temp</code> just means to delete the three directories. You can do that part manually, or install bash for Windows and run the command in bash.)</p>\n<figure>![](/uploads/2016/11/image-3.png \"Unit Testing an Angular 2 CLI Project\")<figcaption>Photo credit: [jimmiehomeschoolmom](//www.flickr.com/photos/jimmiehomeschoolmom/4427775569/) via [VisualHunt.com](//visualhunt.com) / [CC BY-NC-SA](//creativecommons.org/licenses/by-nc-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Tweaking-Karma\"><a href=\"#Tweaking-Karma\" class=\"headerlink\" title=\"Tweaking Karma\"></a>Tweaking Karma</h2><p>Open up the project we’ve been working on.</p>\n<ul>\n<li><a href=\"/getting-started-angular-2/\">Getting Started With Angular 2</a></li>\n<li><a href=\"https://medium.com/@davembush/adding-css-and-javascript-to-an-angular-cli-project-2b843a8283f3\">Adding CSS and JavaScript to an Angular CLI Project</a></li>\n</ul>\n<p>Drop into command line mode and run <code>ng test</code> The first thing you will notice is that this brings up the Chrome browser to run your test. I don’t know about you, but I really dislike having a browser window up. I have enough windows running on my screen as it is. This is the first thing we need to fix. To do this we are going to install PhantomJS.</p>\n<p><code>npm install --save-dev phantomjs-prebuilt</code></p>\n<p>Then, we need to tell karma to use PhantomJS. This is a two step process. First, we install the karma phantomjs runner <code>npm install --save-dev karma-phantomjs-launcher</code> Next, we modify the karma.conf.js file Change <code>require(&#39;karma-chrome-launcher&#39;),</code> and <code>browsers: [&#39;Chrome&#39;],</code> To <code>require(&#39;karma-phantomjs-launcher&#39;),</code> and <code>browsers: [&#39;PhantomJS&#39;],</code> Last, since we are not using the browser, we will need a better reporting mechanism.</p>\n<p>To do this we will install spec reporter.</p>\n<p><code>npm install --save-dev karma-spec-reporter</code></p>\n<p>and we replace this line in karma.conf.js</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reporters<span class=\"punctuation\">:</span> config.angularCli &amp;&amp; config.angularCli.codeCoverage</span><br><span class=\"line\">          ? <span class=\"punctuation\">[</span>&#x27;progress&#x27;<span class=\"punctuation\">,</span> &#x27;karma-remap-istanbul&#x27;<span class=\"punctuation\">]</span></span><br><span class=\"line\">          <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>&#x27;progress&#x27;<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>with</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reporters<span class=\"punctuation\">:</span> config.angularCli &amp;&amp; config.angularCli.codeCoverage</span><br><span class=\"line\">          ? <span class=\"punctuation\">[</span>&#x27;spec&#x27;<span class=\"punctuation\">,</span> &#x27;karma-remap-istanbul&#x27;<span class=\"punctuation\">]</span></span><br><span class=\"line\">          <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>&#x27;spec&#x27;<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>And we add a require line at the top of the file with the other requires</p>\n<p><code>require(&#39;karma-spec-reporter&#39;),</code></p>\n<p>Now, when we run <code>ng test</code> We get a nice text report in our terminal windows instead of the browser popping up.</p>\n<h2 id=\"Code-Coverage\"><a href=\"#Code-Coverage\" class=\"headerlink\" title=\"Code Coverage\"></a>Code Coverage</h2><p>To get a code coverage report for our test use the command ng test –cc The code coverage files will end up in a directory named ‘coverage’ hanging off the root of your project. You can view the coverage&#x2F;index.html file to see how well your files are covered.</p>\n<h2 id=\"Testing-Components\"><a href=\"#Testing-Components\" class=\"headerlink\" title=\"Testing Components\"></a>Testing Components</h2><p>For the purposes of this article, I’m going to assume you have some familiarity with creating Jasmine tests. If you don’t the documentation for Jasmine is pretty easy to understand.</p>\n<p>But what I do want to cover here is how we test components.</p>\n<p>If you open up the <code>app.component.spec.ts</code> file, you’ll notice a <code>TestBed</code> class that gets used quite a bit. Since your test isn’t going to test modules because they only package our other code together, you need some way of faking that out so you can test the components. To do that, you use</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">TestBed</span>.<span class=\"title function_\">configureTestingModule</span>( &#123; <span class=\"attr\">declarations</span>: [ <span class=\"title class_\">AppComponent</span> ] &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Which just sets up the declarations you need to reference the component you need to test. You can put anything in this block that you would normally put in your module definition.</p>\n<p>Another <code>TestBed</code> method you’ll see is</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">TestBed</span>.<span class=\"title function_\">createComponent</span>()</span><br></pre></td></tr></table></figure>\n\n<p>which you probably have guessed, creates an instance of the module so you can test it. The object it creates has a <code>debugElement</code> property hanging off of it. There are two properties that hang off this object that you’ll make use of a lot. <code>componentInstance</code> is the actual instance of the component that you created. Any properties and methods that your component has will be available off of <code>componentInstance</code>.</p>\n<p>The other object that will be available is <code>nativeElement</code>. This is the DOM element that the component renders to and you can use <code>querySelector(cssSelectorGoesHere)</code> to select the first element matches the selector or <code>querySelectorAll(cssSelectorGoesHere)</code> to retrieve an array of elements that match.</p>\n<p>Of course, a test isn’t any good if you don’t make changes to the component and test for them. And for that we have <code>detectChanges()</code>. You’ll see that being used in the third test. You’ll want to use that before you <code>expect()</code> anything.</p>\n<h2 id=\"Ready-Set-…\"><a href=\"#Ready-Set-…\" class=\"headerlink\" title=\"Ready, Set, …\"></a>Ready, Set, …</h2><p>Now that we have some way of testing our code, we can actually begin to write so. Don’t forget to subscribe to the email I sent out so you don’t miss the next article in this series.</p>\n<p>Code so far is located at <a href=\"//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step2\">https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step2</a></p>\n",
            "tags": [
                "unit test",
                "angular",
                "javascript",
                "typescript"
            ]
        },
        {
            "id": "http://davembush.github.com/what%E2%80%99s-the-truth-about-running-asp-net-webapi-asynchronously/",
            "url": "http://davembush.github.com/what%E2%80%99s-the-truth-about-running-asp-net-webapi-asynchronously/",
            "title": "What’s the Truth about Running ASP.NET WEBAPI Asynchronously?",
            "date_published": "2016-11-15T12:30:00.000Z",
            "content_html": "<p>When Node.JS started getting popular, one of the major benefits people were proclaiming about it is that the web servers running under Node.JS were all processing the request asynchronously. This is how a single threaded environment was able to handle a significant load without falling over. Cool! So, you might wonder how does ASP.NET process request? It processes code synchronously. So, one might assume that if there were a way of running code asynchronously, we might be able to improve the performance of our applications. But can we? And if we can, is it worth it?</p>\n<figure>![](/uploads/2016/11/image-2.png \"What’s the Truth about Running ASP.NET WEBAPI Asynchronously?\") Photo via [VisualHunt](//visualhunt.com/)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>The general idea of an asynchronous request is that a thread handles the incoming requests and immediately fires up another thread to handle the request. When the processing thread is done, it calls a callback function to notify the request thread that it is ready to send data back to the client. Meanwhile, the request thread has been able to handle additional request from additional clients. In contrast, a synchronous request processes the request itself so it is unable to handle any additional request.</p>\n<p>In Node.JS, this is important because there is only one thread. It handles all of the request. If we had blocked, there would be no way of processing additional incoming request.</p>\n<p>In ASP.NET, we are running in a system that can run multiple thread per process. So, we are able to handle multiple request because each thread is handled by a different thread. The problem, however, is that there are a limited number of threads that we can spawn per process and eventually we are handling so much traffic that we can’t handle any more. The longer our request take to respond, the more likely we are to experience this problem.</p>\n<p>Imagine the kind of through put we could get on an ASP.NET application if we could make it run asynchronously, more like how Node.JS does.</p>\n<h2 id=\"So-What’s-the-Problem\"><a href=\"#So-What’s-the-Problem\" class=\"headerlink\" title=\"So What’s the Problem?\"></a>So What’s the Problem?</h2><p>So, all of this sounds really good. But then when I went to try to find out how it works, I stumbled on a Stack Overflow question that basically indicated that it shouldn’t work. This, along with a project I was working on, lead me down the road of testing it for myself. Lesson: “Just because someone says something is true, doesn’t mean it is!”</p>\n<h2 id=\"The-Test\"><a href=\"#The-Test\" class=\"headerlink\" title=\"The Test\"></a>The Test</h2><h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><p><strong>WestWind Web Surge (WWWS)</strong> <a href=\"//websurge.west-wind.com/\">http://websurge.west-wind.com/</a> Simple load testing tool.</p>\n<p>Add a URL, set number of threads to run concurrently, run, check report.</p>\n<p>There is a command line version you can use as well.</p>\n<p><strong>Strathweb.CacheOutput</strong> There is a version for WEB API v1 and v2.</p>\n<p>This allows us to add server and client side caching information to REST end points.</p>\n<p><strong>Web Server</strong> I’m using the web server built into Visual Studio 2015. I’m assuming IIS performs similarly.</p>\n<p>All the tests were run on an 8 core computer with 16 gig of RAM. The numbers are for relative comparison. Your tests may show slightly different results.</p>\n<h3 id=\"Baseline\"><a href=\"#Baseline\" class=\"headerlink\" title=\"Baseline\"></a>Baseline</h3><p>For a baseline, I ran WWWS against this end point:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">Get</span>()</span> &#123;</span><br><span class=\"line\">    System.Threading.Thread.Sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[] &#123; <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;value2&quot;</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Notice that while I am returning static information, I am simulating processing time with the Sleep() method. This makes it look like it took a minute to process the information prior to returning the information from the server.</p>\n<p>I was able to run WWWS against the end-point for 20 seconds at a rate of 100 threads at a time without any errors. However, I was only able to achieve 28 request per second with an average response time of 4 seconds. Pretty slow once you see the optimizations.</p>\n<h3 id=\"Asynchronous-Optimization\"><a href=\"#Asynchronous-Optimization\" class=\"headerlink\" title=\"Asynchronous Optimization\"></a>Asynchronous Optimization</h3><p>The next test was to see what performance improvements I could get by running the end-point asynchronously.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IEnumerable&lt;<span class=\"built_in\">string</span>&gt;&gt; Get()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> Task.Delay(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[] &#123; <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;value2&quot;</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Note: you cannot just add the <code>async</code> keyword to the method, you must also have code you are <code>await</code>-ing inside your method. Otherwise the code will fall back to the baseline code. This is why I replaced Sleep() with Task.Delay(). It gives me something to await, while still waiting for a second prior to returning from the request.</p>\n<p>Keeping all the parameters the same and running this code, request per second improved to 97. Average response time was just over 1 second.</p>\n<p>I wasn’t able to get any failures within 20 seconds until I set simultaneous threads to 2000. At 1900 simultaneous threads the average response time was 9 seconds and the request processed per second was 444.</p>\n<p>So while the response time was longer, more items were able to be processed by simply making the call asynchronous. So, that seems to prove that making the request asynchronous improves the performance.</p>\n<h2 id=\"Even-Better-Performance\"><a href=\"#Even-Better-Performance\" class=\"headerlink\" title=\"Even Better Performance\"></a>Even Better Performance</h2><p>But wait! There’s more.</p>\n<p>What would it be like if we added caching onto this? By using the <code>CacheOutput</code> mechanism, we gain further benefit. While it might be difficult to add this in every situation, at least for static output this is something to be considered. I used the Strathweb implementation because it most closely implemented what had previously been available for WebForms and it now available in .NET Core The code</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">CacheOutput(ClientTimeSpan = 50000,ServerTimeSpan = 50000)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IEnumerable&lt;<span class=\"built_in\">string</span>&gt;&gt; Get()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> Task.Delay(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[] &#123; <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;value2&quot;</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>While WWWS doesn’t allow us to test client caching, it does allow us to test server caching.</p>\n<p>In the code above I set the cache time to 50 seconds. Using the same 1900 threads as before, the average response time was 6 seconds with an average request processed per second of 347. I gave up maxing out the system at 3200 threads. This was returning results on average after 10 seconds of the request with request processed per second of 344.</p>\n<p>If you were able to implement smart caching so new data was returned from the server only when something had actually changed, I’m sure you could achieve similar results with data that changed more frequently than your basic lookup tables.</p>\n",
            "tags": [
                "asp.net",
                "async",
                "await",
                "webapi"
            ]
        },
        {
            "id": "http://davembush.github.com/getting-started-with-angular-2/",
            "url": "http://davembush.github.com/getting-started-with-angular-2/",
            "title": "Getting Started with Angular 2",
            "date_published": "2016-10-25T10:30:00.000Z",
            "content_html": "<p>Angular 2 is finally released. But the biggest problem with learning Angular 2 is that it is a “Choose your own adventure” kind of framework. And while React has a similar problem, I think Angular has out done them. This means that you can learn bits and pieces of Angular 2, but it will be a while before you get a cohesive understanding of what choices you need to make, which choices are the right choices, and why all of this matters.</p>\n<p>And all of this is even more difficult if you are a relatively new programmer. I’m talking those of you who have less than 5 years of experience and even some of you who have less than 10 years of experience.</p>\n<p>So, what I thought I’d do to address this very real problem is to assemble a very opinionated Angular 2 tutorial. Over the next several weeks I plan to show you how to create a simple CRUD application using Angular 2 in a way that will scale up to larger projects. While I may mention some of the other options along the way, what you’ll end up with is the “right way.” OK. To be fair, most of what I consider “right” is opinion. Some very smart people disagree with me. But, some other very smart people agree with me too.</p>\n<figure>![](/uploads/2016/10/image-2.png \"Getting Started with Angular 2\")<figcaption>Photo credit: [mikecogh](//www.flickr.com/photos/mikecogh/11300349426/) via [VisualHunt](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>  Here’s where I think we are going with this.\n\n<ul>\n<li>Getting the project set up.</li>\n<li>Building, Running, Testing</li>\n<li>Adding in external packages</li>\n<li>Client Side Routing</li>\n<li>Building Components</li>\n<li>Using Reactive Programming</li>\n<li>Managing Application State</li>\n<li>Accessing the Server</li>\n<li>Using Web Workers for more Responsive Applications</li>\n<li>Ahead of Time (AoT) Compiling</li>\n<li>Server Side Rendering</li>\n</ul>\n<p>In this article, let’s focus on just getting a basic application up and running.</p>\n<h2 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h2><p>If you haven’t installed Node yet, I suggest you do that now. <a href=\"/you-can-start-using-node-today/\">Here’s an article on how to install Node if you are new to Node</a>. Even if you think you know how to install node (“How hard can that be?”) read the article. You might learn something. I would recommend installing Node 6.x as of this writing or whatever the latest version is when you are reading this.</p>\n<p>You’ll also want to get an editor that has good support for TypeScript, HTML, and CSS. I’ve heard a lot of good things about VS Code, but the editor I use is WebStorm. If you are a .NET programmer, Visual Studio will get you kind of close. If you can’t or won’t switch to WebStorm for your JavaScript development, at least get the ReSharper plugin for Visual Studio. You’ll also need plugins to enable Node and TypeScript development from within Visual Studio if you haven’t installed them already.</p>\n<p>For those of you in the Java world using Eclipse. Eclipse has the worse JavaScript support I’ve ever seen. I understand that it is familiar, but just about any other JavaScript editor will be better.</p>\n<p>Anyhow, I’m using WebStorm. If you are using another editor, you are on your own.</p>\n<h2 id=\"Angular-CLI\"><a href=\"#Angular-CLI\" class=\"headerlink\" title=\"Angular CLI\"></a>Angular CLI</h2><p>Now that you have Node installed and you have a reasonably good JavaScript&#x2F;TypeScript editor, the next thing you will want to install is the <a href=\"//github.com/angular/angular-cli\">Angular CLI</a>. As of this writing, the Angular CLI is at Beta .17 so I can understand that you might be hesitant to use it. But it is done enough that we can use it to get our project going with MUCH less effort than if we did it by hand. And hopefully, the parts we need will get completed by the time we need them.</p>\n<p>There are a few other practical reasons for using the CLI rather than coding it yourself. First, the CLI conforms to the Angular 2 style guide. This was developed by the team that wrote Angular 2. Who better to tell us what the code should look like? And while I may not always agree with some of the recommendations, I understand why they are there and I’m willing to live with them. Hopefully, organizations coding Angular 2 applications will conform to these conventions so that anyone who writes Angular 2 code will already know them as they move from one organization to another.</p>\n<p>The instructions are on the web site for installing. But here is what you need to do in a little more detail.</p>\n<p>First, install the angular cli globally.</p>\n<p><code>npm install -g angular-cli</code></p>\n<p>By the way, when you run <code>npm</code> commands, or <code>ng</code> commands later on, you’ll do that from the command line.</p>\n<p>The next thing you’ll want to do is create a new project using the Angular CLI. This is where things are not as clear as I would have liked. Probably because their development environment looks different than mine. The official documents say to run these commands</p>\n<p><code>ng new PROJECT_NAME cd PROJECT_NAME ng serve</code></p>\n<p>where PROJECT_NAME is the name you want to give your project. This project name will become a sub directory under the directory you executed the command from. But what if you want to create a new project first, using your editor, and then you want to run <code>ng new</code>? My first attempt was to run ng new using the directory where my project existed. But that just gave me an error message that said the directory already existed. Yeah, I know.</p>\n<p>Then I tried running <code>ng new</code> without the directory name inside the project directory. The result of that was being told that I forgot a parameter.</p>\n<p>Well, what about using <code>ng new</code> with “.” as a parameter, meaning “current directory”. Nope, “.” is not a valid name. It took me a while to figure this out.</p>\n<p>But you can execute <code>ng init</code> from within the directory your existing project is in and it will scaffold out your application in your current directory.</p>\n<h2 id=\"NG-SERVE\"><a href=\"#NG-SERVE\" class=\"headerlink\" title=\"NG SERVE\"></a>NG SERVE</h2><p>One of the commands you’ll see above is <code>ng serve</code>.</p>\n<p>You may wonder what this is and why you would want to run it. Don’t I just deploy my application on my own server? Well, yes, eventually you will. But while you are developing the application you will want or need to test it locally.</p>\n<p>Since Angular 2 requires a build and packaging step, you’ll want to automate this as much as possible. So, before you toss the idea of using <code>ng serve</code> out, let’s take a look at what this gives you.</p>\n<p>First, <code>ng serve</code> gives you a web server to run your application. By default, this runs on <a href=\"//localhost:4200\">http://localhost:4200</a>. You can try this now.</p>\n<p>Oh wait! What’s it doing? It looks like it is doing way more than starting a web server.</p>\n<p>Well, yes, it is. You see <code>ng serve</code> automatically compiles all of your typescript files and bundles all of your resulting files together every time a file changes. The first time you run <code>ng serve</code>, it will do this because everything has changed. But it gets better, it will also refresh whatever browser is looking at the application so that your browser will always reflect whatever changes you’ve made in your source code.</p>\n<p>There are a few specific cases where this won’t work, but generally this works out pretty well.</p>\n<p>If you make a change and it doesn’t get reflected as you would expect, try restarting the server. That will probably fix the issue.</p>\n<p>The other thing you can do is that you can configure the server to proxy request to another server. This would be useful if you want to pull data from your Java, ASP.NET, or other platform while still running ng serve for the client side development work.</p>\n<p>If everything is working so far, you should be able to pull up your browser and run the application on <a href=\"//localhost:4200\">http://localhost:4200</a> and see a message “app works!” It really is just the barest of all possible applications.</p>\n<h2 id=\"What-Else\"><a href=\"#What-Else\" class=\"headerlink\" title=\"What Else?\"></a>What Else?</h2><p>If you are curious like I am, you may have taken a look around the file structure to see what was installed. One directory you may have noticed is the “e2e” directory. This is where your end to end tests go. You can run these using the command</p>\n<p><code>ng e2e</code></p>\n<p>Just make sure you have already run ng serve in another window. You can also run the unit tests that are in *.spec.ts files by running the command</p>\n<p><code>ng test</code></p>\n<p>This will run the tests using Jasmine in a Chrome browser.</p>\n<p>The final thing to note about the CLI is that it uses Webpack instead of System.JS to manage bundling and minification. As of this writing, the tour of heroes demo still uses System.JS so this might be a point of confusion for you. The good news is that Webpack is a bit more straight forward than System.JS and I believe you’ll find it a lot easier to use.</p>\n<h2 id=\"Follow-Along\"><a href=\"#Follow-Along\" class=\"headerlink\" title=\"Follow Along\"></a>Follow Along</h2><p>The result of step one can be found on my GitHub account: <a href=\"//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-1\" title=\"https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-1\">https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-1</a></p>\n",
            "tags": [
                "angular",
                "javascript"
            ]
        },
        {
            "id": "http://davembush.github.com/the-myth-of-sloppy-code/",
            "url": "http://davembush.github.com/the-myth-of-sloppy-code/",
            "title": "The Myth of Sloppy Code",
            "date_published": "2016-10-18T10:30:00.000Z",
            "content_html": "<ul>\n<li>Tightly coupled code runs faster.</li>\n<li>Tightly coupled code is easier to write.</li>\n<li>Test Driven Development increases development time.</li>\n<li>Test Driven Development negatively impacts code design.</li>\n<li>Knowing the names of design patterns isn’t important as long as you can use them.</li>\n<li>All my customer cares about is how soon they can have the product, not how clean the code is.</li>\n</ul>\n<p>All of these statements, and others like them, are excuses for not writing code correctly. And you know what an excuse is, right?</p>\n<blockquote>\n<p>The skin of a reason stuffed with a lie.</p>\n</blockquote>\n<figure>![](/uploads/2016/10/image-1.png \"The Myth of Sloppy Code\")<figcaption>Photo credit: [dynamosquito](//www.flickr.com/photos/dynamosquito/5866244470/) via [Visualhunt.com](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>  \n\n<p>Now, I could go through and argue each of the points above. But today, I want to look more at the attitude behind these statements.</p>\n<h2 id=\"It’s-All-in-Your-Head\"><a href=\"#It’s-All-in-Your-Head\" class=\"headerlink\" title=\"It’s All in Your Head\"></a>It’s All in Your Head</h2><p>Man is a funny being. We make decisions with our hearts and justify the decisions with our brains. Once you know this, you can hack it to your favor. But how does this relate to what we’ve been talking about? It is really quite simple. All of the best practices I’ve mentioned above require work to learn. We would rather not invest the time to learn how to do these well, and so rather than just saying, “this is not where I choose to spend my time right now” we say things like, “my management won’t let me do that” or “my way is more efficient” or at times, we even resort to vilifying the practice.</p>\n<p>I have the same issue when I try to convince management that their process needs to change. It took seven years for me to get one company to move their project management system from email to project management software. Why? Because what they were doing “worked” and they couldn’t see that doing something different would work better in any way.</p>\n<h2 id=\"A-Skin-of-a-Reason\"><a href=\"#A-Skin-of-a-Reason\" class=\"headerlink\" title=\"A Skin of a Reason\"></a>A Skin of a Reason</h2><p>So, let’s look at the parts of these myths that are true.</p>\n<p>First, it is true that while you are learning how to use any one of these best practices, it will in fact, take you longer to write your code. Tightly coupled code is easier to reason about and one could argue is therefore easier to write. Test Driven Development is one of the most difficult things to learn. And just like the myth that Agile&#x2F;Scrum&#x2F;Kanban doesn’t work, the myth that Test Driven Development doesn’t work is largely based on misconceptions about what Test Driven Development is. Initially, it will impact the time it takes for you to write your code. But the more interesting argument to me is that testing negatively impacts design. If you mean that you can’t use the design you are used to using and that design involves writing tightly coupled code. Yeah, I guess it does.</p>\n<p>Implementing design patterns is better than not. It is true. But that doesn’t mean you shouldn’t learn the names.</p>\n<p>Yes, your customer cares about how fast you can get the project done. But, that isn’t all they care about.</p>\n<h2 id=\"The-Lies\"><a href=\"#The-Lies\" class=\"headerlink\" title=\"The Lies\"></a>The Lies</h2><p>Just because something takes longer while you are learning how to do it, doesn’t mean it will always take longer. It probably took you a while to learn how to program proficiently too. That didn’t stop you did it? Does it take you as long to program now as when you first started? Of course not! Let’s look at this from another angle. As you’ve learned multiple languages, would you say that it made you a better or worse programmer? Unless you have a very strange perspective, you will probably answer better. Was the new language hard to learn? Of course. Did it take you longer to code using the new language than one you knew previously? Of course. Would you say the result of being proficient in both has made it easier or harder to code in both? Easier, right? Tightly coupled code is easier to write, but as the application grows, tightly coupled code becomes harder to add to and harder to maintain. It lends itself to code duplication and is more likely to be the code base that needs to be rewritten first.</p>\n<p>Tightly coupled code is also the hardest to tests and is probably the reason you don’t want to write test for your code. Because you write tightly coupled code, testing is MUCH harder than it should be. This leads you to have a firm belief that writing tests is hard as well. A vicious cycle.</p>\n<p>And if you believe that tightly coupled code is a proper design, you will believe that tightly coupled code hinders design. But in fact, writing tests will force you to write loosely coupled code. So, instead of hindering design, it actually helps it.</p>\n<p>I used to think not learning the correct names for design patterns didn’t matter. But the advantage of knowing the proper name for things is that we can all talk about something using the name rather than trying to explain what that thing is with lots of words. It saves time. But, there is another much more subtle reason why you need to learn the proper name for things. You might be calling a design pattern you are using by an incorrect name and confusing the people you are communicating with. And, finally, learning the names for all of the design patterns will expose you to design patterns you aren’t aware of, broadening your horizons.</p>\n<p>This last one is, or should be the most obvious. Getting the project done quickly isn’t ALL your customer cares about. It might be a relatively high priority, but I can assure you, if you explain to them that getting the project done as fast as possible will mean you have to rewrite the code if they want any changes, you’ll quickly find out that redoing work they’ve already paid for doesn’t sit well with them either.</p>\n<h2 id=\"Benefits\"><a href=\"#Benefits\" class=\"headerlink\" title=\"Benefits\"></a>Benefits</h2><p>It is a sad, sad truth that by convincing yourself that not investing in these best practices really is best for you and the clients you work for, you’ve also limited yourself to the quality of client you can work for. The places that pay well expect you to know how to do this stuff. They believe in good design. They believe in testing. They know how to implement design patterns.</p>\n<p>And guess what, these places also pay better too. It raises you beyond the level of “commodity programmer” and into the level of “rare gem” How do I know? This past year I’ve been doing a lot of interviewing. For various reasons, I decided to interview for jobs that pay 25% better than what I currently make. In the beginning, I did this because I figured it would expose me to people more like myself who wanted to be better. In the process, I discovered that the interview process is a little harder, but not impossible. I figured out what I still need to learn. And, I managed to beat my goal. Time to notch it up a bit more.</p>\n<h2 id=\"Are-You-Dead\"><a href=\"#Are-You-Dead\" class=\"headerlink\" title=\"Are You Dead?\"></a>Are You Dead?</h2><p>You hear stories all the time about people who can’t find work in our industry. When you ask, you find out that all they know is something that was hot 10 years ago or longer. Well, of course you can’t find a job. And it is no wonder the last company got rid of you. You provide no value.</p>\n<p>This past week I heard someone tell me the equivalent of, “I’m not going to learn anything new. Every time I do, it ends up being hot for a few years and then it is gone.” I was stunned. I fear for this guy. You might as well say, “I’m planning to retire in 10 years or less.” because that is what will happen to you. Worse, if you stop learning completely, you could end up with dementia or worse.</p>\n<p>My plan is to program until I’m at least 75. Longer if I stay healthy enough. Even if I could retire, I won’t. What would I do? I love programming. I love mentoring other programmers. I love learning new stuff.</p>\n<h2 id=\"Do-hard-stuff\"><a href=\"#Do-hard-stuff\" class=\"headerlink\" title=\"Do hard stuff\"></a>Do hard stuff</h2><p>And so what’s the point of all this? Do hard stuff. It will make you a better programmer.</p>\n",
            "tags": [
                "tdd",
                "agile",
                "design patterns"
            ]
        },
        {
            "id": "http://davembush.github.com/revisiting-the-technical-interview/",
            "url": "http://davembush.github.com/revisiting-the-technical-interview/",
            "title": "Revisiting The Technical Interview",
            "date_published": "2016-10-11T10:30:00.000Z",
            "content_html": "<p>I’ve written about the technical interview before. I’ve written both <a href=\"/3-reasons-responding-to-useless-interview-questions-makes-you-happier/\">for</a> and <a href=\"/cracking-the-programmers-interview-code/\">against</a> code interviews. And I’ve provided both <a href=\"/7-c-interview-questions-that-weed-out-the-losers/\">C#</a> and <a href=\"/7-javascript-interview-questions-to-weed-out-imposters/\">JavaScript</a> questions to weed out fake programmers. But a little more experience under my belt has me rethinking what makes a good interview.</p>\n<p>Now, you may wonder why I think I’m particularly qualified to speak about the interview process. Most people who have opinions about the interview process in particular have it from only one side. The one of being the guy looking for a job. And, most of you only interview when you need a job.</p>\n<p>What makes me qualified is that, I help interview people looking for a job and I interview for lots of jobs. In my opinion, you should be interviewing for a job, even if you don’t need one, at least twice a year. I interview more frequently than that. In the last 6 months, I think I’ve interviewed at least 4 times.</p>\n<p>So, let me start by telling you what the current interview process looks like, and why it doesn’t work. Then, I’ll move on to the few interviews that I believe captured the information everyone was looking for quickly and how you can move the conversation in this direction regardless of what side of the table you are sitting on.</p>\n<figure>![](/uploads/2016/10/image.png \"Revisiting The Technical Interview\")<figcaption>Photo credit: [Gangplank HQ](//www.flickr.com/photos/gangplankhq/5590138183/) via [Visualhunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"The-Oral-Exam-Interview\"><a href=\"#The-Oral-Exam-Interview\" class=\"headerlink\" title=\"The Oral Exam Interview\"></a>The Oral Exam Interview</h2><p>I was part of a phone interview recently where every question we asked, the person who was answering the questions answered every question in such exquisite detail we were left thinking, “This guy is either REALLY smart, or he was reading something.” We later gave him a coding interview where we were able to watch him solve the problem. This revealed that he must have been reading something because the code interview revealed that he didn’t have any idea what he was talking about. It wasn’t even a difficult interview.</p>\n<p>What this tells me is that all interviews that ask specific technical questions can do is tell you that the person you are interviewing can hack the technical interview. Just like certifications, all you know is that they can take a test.</p>\n<p>In fact, we’ve actually hired some people who were able to even make it through a coding interview only to find out they couldn’t code.</p>\n<p>The obvious danger is that you could end up hiring someone who can’t really do the work because they were able to jump through your list of questions like some sort of trick pony.</p>\n<p>But there is an opposite danger.</p>\n<p>Just because someone can’t answer your questions, doesn’t mean they can’t do the work.</p>\n<h2 id=\"The-Coding-Interview\"><a href=\"#The-Coding-Interview\" class=\"headerlink\" title=\"The Coding Interview\"></a>The Coding Interview</h2><p>As I’ve already hinted, the coding interview is no better. Sometimes it will weed out the people who have no business interviewing, but it really tells you nothing other than, “have they used this technology before.” Unfortunately, I’m seeing a rise in this type of interview. It will take a number of consistent failures before we start to see a decline.</p>\n<p>About 7 months ago, I was on the receiving end of a coding interview when I was asked to do some specific things while someone was watching. I failed the interview because the specific things I was asked to do, I had not done yet even though I had written a full application using the tools the test was around.</p>\n<p>I’ve had other interviews where I was asked to code stuff that had no relation to the business I was being asked to interview for.</p>\n<p>So once again, you are just as likely to weed out a good person as you are to weed out a bad person.</p>\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>In both cases, the problem is the same. You are asking questions that are way too specific. Someone who is quick with the search engines can find you the answer you are looking for if they can hide the fact that they are doing it. If you limit yourself to in person interviews, you limit who you can hire to people who live in the same geographic area.</p>\n<p>Even a video interview can hide the fact that the person interviewing is looking up the answers. I know, I’ve seen it done.</p>\n<p>Even if you do a face to face, the answers you are looking for might be wrong or out of date.</p>\n<p>I was at an interview where I was asked how memory was managed in .NET. Since I taught .NET for about 3.5 years at a training company and had actually taught this specific information, I was easily able to give them the information they were looking for. But because I also listen to podcasts, I was also able to amend the information with the fact that how it works in Windows is only how it works in Windows. The spec doesn’t actually dictate how memory gets managed. At least not at the level I think they wanted answered.</p>\n<p>But, what if they were looking for the answer that indicated that I knew how memory was managed under Windows and I gave the answer according to the spec? Fail!</p>\n<h2 id=\"A-Better-Way\"><a href=\"#A-Better-Way\" class=\"headerlink\" title=\"A Better Way\"></a>A Better Way</h2><p>One of the best interviews I ever had was when I was interviewing for a JavaScript position. The question I was asked at the beginning of the interview way, “I know nothing about JavaScript, explain JavaScript to me.” I started talking and occasionally, I would be asked to drill deeper into a subject. It was a hard interview because it required me to break something down I was very familiar with, think on my feet, and demonstrate that I was able to explain things. It also demonstrated how much of JavaScript I knew.</p>\n<p>As I’ve thought about that interview and compared it to others I have been on, what I realize is that this demonstrated that the person who was interviewing me really wanted to know what did I know. In contrast, just about every oral exam interview I’ve been on has made me feel like the person interviewing me wanted to show me how much HE knew.</p>\n<h2 id=\"The-Right-Questions-to-Ask\"><a href=\"#The-Right-Questions-to-Ask\" class=\"headerlink\" title=\"The Right Questions to Ask\"></a>The Right Questions to Ask</h2><p>So, if you want you can steal the question above. But the point is, we want to ask open ended questions.</p>\n<p>“I see on your resume; you’ve worked with Angular. What problems did you face while using that framework?” or “I see you have experience using Git and SubVersion. What do you like and dislike about each?” or “Tell me about some of the issues your ran into with your last project.” In other words, ask very open ended questions around the technology you are interested in that invite them to demonstrate that they’ve really used the technology they say they have used.</p>\n<h2 id=\"What-if-You-Are-the-One-Being-Interviewed\"><a href=\"#What-if-You-Are-the-One-Being-Interviewed\" class=\"headerlink\" title=\"What if You Are the One Being Interviewed?\"></a>What if You Are the One Being Interviewed?</h2><p>So, you walk into an interview and you are asked an oral exam question. What do you do? Well, the first thing to do is to try to answer the stupid question (without reading of course.) And then, and this is the key part because it will change the course of the interview, tell a story.</p>\n<p>Whatever they ask, the thing you want to do as soon as you possibly can, is to change the question into, “where have you used X in the past?” So, let’s take a JavaScript question. “What does it mean that JavaScript uses prototypal inheritance.” You answer the question, “prototypal inheritance means … in fact, knowing this became really important on one of my recent projects because we used it to do …” and you are off to the races. When you finish demonstrating that you know the answer and it has been important to your work in the past, you might consider asking, “I was wondering, how has that been important to your work here?” Remember, your goal is convincing the people interviewing you that you really can do the work. That hiring you compared to the other people they are going to interview is going to be 10 times less risky.</p>\n<p>Turning it all around like this is an art. It takes practice. This is why I encourage developers I coach to interview frequently. Try stuff out. Experiment. When you get home, review what you were asked and think, “how could I answer that better the next time?” Because, many of the questions we get asked get asked by everyone.</p>\n<p>If someone ask a question you don’t know the answer to, just say so. My standard answer is, “I haven’t done much with that, but I’ve been programming for X years and there is Google, and <a href=\"/pluralsight\">PluralSight</a>, how hard can it be?” If you’ve never used it but have sniffed around the edges, say so. An attitude of “I can do this.” works a lot better than lying about it.</p>\n<p>There are some other things you can do to hack the interview process, like sitting sideways, spreading your arms out, and other “hypnotic” tweaks. But the best hack is spinning stories around your answers to change the interview from an exam into something more of a conversation.</p>\n",
            "tags": [
                "interview"
            ]
        },
        {
            "id": "http://davembush.github.com/angular-2-thoughts/",
            "url": "http://davembush.github.com/angular-2-thoughts/",
            "title": "Angular 2 Thoughts",
            "date_published": "2016-10-04T10:30:00.000Z",
            "content_html": "<p>I was asked this past week what my thoughts were on Angular 2. I wrote early on about my impressions of Angular 2 when it was barely done enough to review. But now that I’ve been working with it for a while and know a bit more, what I want to discuss is more along the line of what it means to the average developer and, more importantly, organizations that are planning to use it.</p>\n<p><img src=\"/uploads/2016/09/image-3.png\" alt=\"image\" title=\"image\"></p>\n<h2 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h2><p>While like Angular 1, Angular 2 provides us with most of what we need to build an application. Angular 2 also provides us, out of the box, with very Angular 1 ish ways of putting together an application, complete with modules. What Angular 2 provides that isn’t quite so obvious going into your development is options.</p>\n<p>In angular 1, we had options at the GUI level. And while this is still true for Angular 2, this is not the only place where you will see options.</p>\n<p>In general, you can split your options into, 1) do you want to do things the Angular 1 way, or 2) would you like to use an approach that looks more like React.JS? No place is this more obvious than with how you deal with forms. You can create forms with a declarative syntax, like you’ve done with Angular 1, using <a href=\"//angular.io/docs/ts/latest/guide/template-syntax.html\">Template Syntax</a>. But, in my opinion, a much better way to create forms is with a more reactive approach using the FormControls and FormGroups classes. If all you are doing is just displaying data, you’ll probably find that using the template syntax is all you need. But once you start working with complex forms that accepts data input and implements validation, you’ll probably want to move toward a more reactive approach. The added benefit is that more of you code will be testable.</p>\n<p>The next option you are going to have is figuring out how to move data around your system. Most of the literature is going to suggest you use a data flow that looks a lot like what you were doing in Angular 1. But there is nothing stopping you from using Flux, Redux, or even RxJS instead. And here again, my recommendation would be that you learn these because I think you’ll find that your system will end up being much easier to reason about than the old MVVM stuff you may be used to.</p>\n<h2 id=\"Lazy-Loading\"><a href=\"#Lazy-Loading\" class=\"headerlink\" title=\"Lazy Loading\"></a>Lazy Loading</h2><p>There are several places where we had to make choices in Angular 2 where the feature has been built into the framework. One of these places is lazy loading. Why load all of your JavaScript up front? Load what you need when you need it. Angular 2 makes this easy with Lazy Loading and the choice between using WebPack (the default) or System.JS.</p>\n<p>I’ll warn you though, as of this writing, Lazy Loading only really works when using System.JS unless you want to spend a lot of time tweaking your webpack config file.</p>\n<h2 id=\"Angular-2-CLI\"><a href=\"#Angular-2-CLI\" class=\"headerlink\" title=\"Angular 2 CLI\"></a>Angular 2 CLI</h2><p>Command Line Interfaces seem to be the cool new kid on the block. You aren’t a real framework unless you have one. While the Angular CLI is not quite baked yet, I can see how this is going to make writing Angular 2 apps much easier. There are a lot of moving parts involved in getting even the most basic of applications up and running. The Angular CLI makes starting your first application REALLY easy. It even hides all of the WebPack internals while allowing you to add your own config file if you need to. Once they have the routing bit re-implemented, it should make using Lazy Loading with WebPack much easier.</p>\n<p>The other thing using the CLI will do for you is that you will automatically start following the <a href=\"//angular.io/styleguide\">coding standards</a> that the Angular team have developed.</p>\n<h2 id=\"Angular-2-Components\"><a href=\"#Angular-2-Components\" class=\"headerlink\" title=\"Angular 2 Components\"></a>Angular 2 Components</h2><p>Right now, there aren’t a lot of options available for Angular 2 for custom components. While Kendo UI has been the defacto standard for Angular components in the past, Telerik is in the middle of rewriting <a href=\"//www.telerik.com/blogs/kendo-ui-for-angular-2-r3-roadmap\">Kendo UI for Angular 2</a> (and React.JS). I haven’t seen any movement in the Angular UI camp to support Angular 2. Angular 2 Material has a few components that seem ready, but they are all relatively simple. The only vendors that seems to have a complete Angular 2 package is <a href=\"//wijmo.com/angular2/\">Wijmo</a> and <a href=\"//www.primefaces.org/primeng/\">Prime Faces</a>. I haven’t tried them and I’m not endorsing them. I’m just reporting what I’ve found. There are a few standalone components here and there, but if you are looking for a set of components you can just use from one source, I’m afraid you’ll have to wait. This isn’t necessarily a bad thing. It gives you time to properly learn Angular 2.</p>\n<p>But what about the Angular 1 to Angular 2 bridge? In my mind this is way more trouble than it is worth. We’ve waited two years for Angular 2, I think we can wait just a bit longer for a set of components that we can use with it.</p>\n<h2 id=\"What-Angular-2-Means-for-You\"><a href=\"#What-Angular-2-Means-for-You\" class=\"headerlink\" title=\"What Angular 2 Means for You\"></a>What Angular 2 Means for You</h2><p>The main difference between Angular 1 and Angular 2 is that just about any Script Kiddie could pick up Angular 1 and get something done. Angular 1 was developed during a period of JavaScript history when JavaScript had not quite reach the level of “serious programming language.” But now, JavaScript has not just reached that level, but several very serious frameworks have been developed.</p>\n<p>What I notice as I review the JavaScript landscape is that we’ve moved from just getting stuff done with little to no planning, to treating JavaScript as a first class programming language that requires, and even demands that we adhere to a set of programming best practices that we would use for any other language. These include things like naming conventions and design patterns. For you to write code well in this new universe, you will need to understand what these design patterns are, why they exist and how to implement them well. If you continue on your merry script kiddie way, you will soon find yourself out of work.</p>\n<p>Further, if you think you know Angular 2 just because you know Angular 1, or you think Angular 2 will be easy to pick up because you know Angular 1, you are in for a very big surprise. Many of the concepts are the same. But since Angular 2 has so many options, you should learn the options well so that you can make an educated decision about which option to use.</p>\n<h2 id=\"What-Angular-2-Means-for-Organizations\"><a href=\"#What-Angular-2-Means-for-Organizations\" class=\"headerlink\" title=\"What Angular 2 Means for Organizations\"></a>What Angular 2 Means for Organizations</h2><p>Similarly, if you are an organization that is planning to move to Angular 2, don’t expect your programmers to just pick up and move to Angular 2 overnight. Give them time to learn it. My recommendation is that you make learning it part of their job while they continue to use Angular 1 for the product you are trying to complete. We all have time pressure, so you need to factor learning into the schedule.</p>\n<p>But Angular 2 may also mean you need to find additional programmers who already have the skills and can transfer the knowledge to your team.</p>\n",
            "tags": [
                "angular",
                "javascript"
            ]
        },
        {
            "id": "http://davembush.github.com/4-reasons-to-write-loosely-coupled-code/",
            "url": "http://davembush.github.com/4-reasons-to-write-loosely-coupled-code/",
            "title": "4 Reasons to Write Loosely Coupled Code",
            "date_published": "2016-09-27T10:30:00.000Z",
            "content_html": "<p>This past week I got into a small discussion about the importance of loosely coupled code.  Specifically, I was looking at event handler code that did nothing more than change the size of another element on the screen.  But the event handler code was in the controller which in the particular implementation we are using was the event handler portion of our Model in a MVVM architecture.  The question becomes does this code belong in the view, or does it belong in the controller? The question of where code belongs leads eventually to arguments for loosely coupled code.  If I put code in my controller that is manipulating the view, then I either need to mock out my view in order to test my controller or I have to have an instance of my view available to test my controller.  Having coded enough systems to know that both of those choices are problematic, I opt for placing the view specific code in the view.  Another place where you might place this code would be in a View Specific event handler class.  But that would only be for the purposes of clean separation.  Something we might consider doing if the View were plain HTML.  But in our particular case, the view is generated from code, so placing the handlers in that same code seems to be the most appropriate location for it.</p>\n<p>But all of this leads to a larger question.  Why should your code be loosely coupled at all? <figure><img src=\"/uploads/2016/09/image-2.png\" title=\"4 Reasons to Write Loosely Coupled Code\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/hernanpc/7115374283/\">Hernan Piñera</a> via <a href=\"//visualhunt.com\">VisualHunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by-sa/2.0/\">CC BY-SA</a></figcaption></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Refactoring\"><a href=\"#Refactoring\" class=\"headerlink\" title=\"Refactoring\"></a>Refactoring</h2><p>One of the main advantages of loosely coupled code is that this combined with granularity makes code refactoring easier.  Because my controller class only handles events that cause data to be manipulated and does not cause any changes to the view, I know that any changes I make to my controller will not cause any unexpected presentation layer changes.</p>\n<p>Similarly, and in this case, more importantly, any changes I make to the view will not force me to make changes to the controller class.  That is, all of the code that could be impacted by any one change happen in one and only one class.</p>\n<p>Loose coupling can also occur horizontally, and often does without us thinking too intensely about it.  Have you ever used a control from one vendor only to find another control works better?  The more easily those controls match each other’s programmable interface, the easier the job was to swap them out.  We can do the same type of thing in our own code.  The more granular the code is broken down; the easier any one part of the code can be replaced by something that works “better”.</p>\n<h2 id=\"More-Maintainable\"><a href=\"#More-Maintainable\" class=\"headerlink\" title=\"More Maintainable\"></a>More Maintainable</h2><p>But the argument might be make that this is a lot of work for something that isn’t very likely to happen.  But anyone who has been programming more than a few years on essentially the same system knows that it does.</p>\n<p>Here’s how it looks.  You start out writing a system and you care very little about coupling or not.  Hey, we’ve got code to write and very little time.  Full steam ahead and forget best practices.  And for now, let’s assume you have a small enough system that you actually pull it off.  You get the system delivered, and somehow it miraculously works.  Congratulations.</p>\n<p>A few months go by and you get a new requirement or a change request comes in for an existing requirement.  Either way, you manage to shoe horn the change in.</p>\n<p>More time goes by and a change to the last set of changes comes in.  And now you realize that what you have is a rather fragile architecture that can’t possibly sustain the new request.  A change that might have taken a month given a more loosely coupled architecture is now going to take three because of the amount of rework that is going to be required.</p>\n<p>Another way that loosely coupled code helps is when you are writing a very large system.  Let’s say the system is large.  You write this for a few months and everything seems to be going fine when you hit that first, “oops! we forgot” moment.  So you have to go back and retro fit the change into your tightly coupled code.  And then you progress some more and hit even more of those kind of changes.  Eventually, everyone learns to hate this system because it is so hard to work on and every change we make to existing code causes more and more bugs.</p>\n<h2 id=\"Cross-Platform\"><a href=\"#Cross-Platform\" class=\"headerlink\" title=\"Cross Platform\"></a>Cross Platform</h2><p>Refactoring and maintenance have some practical implications beyond just being able to work on your code.  In this world of multiple platforms, you may find yourself wanting to run some of what you’ve written on another platform.  There are multiple ways you might do this, but keeping your code isolated is going to make this easier.  Say you want to run your code on the web, as a desktop application, on the various mobile phones and tablets that are available.  Even if you do this all in the confines of HTML, JavaScript and CSS, you will most likely have different presentation layers.  If you have view specific code (to use our example again) that isn’t in the view, you’ll need to write code in the controller that detects which of the platforms you are running on.</p>\n<p>But if you’ve decided to use native components on each of the platforms, the view layer is actually going to change drastically.  And the view specific code you wrote might not even work on the new platform.  All the more reason to keep the view code isolated.</p>\n<h2 id=\"Cross-Framework\"><a href=\"#Cross-Framework\" class=\"headerlink\" title=\"Cross Framework\"></a>Cross Framework</h2><p>Or, maybe you are going to upgrade your framework.  Angular 2 just released and it is drastically different from Angular 1.  I can tell you right now, the organizations who wrote loosely coupled Angular 1 code are going to have a much easier time transitioning to Angular 2.  Or maybe you want to switch from Angular to React, or from any of the multitude of frameworks to another.  The more loosely coupled your code, the easier it will be to move.  And nowhere is this more obvious than in the fast moving JavaScript world.</p>\n<h2 id=\"Single-Responsibility\"><a href=\"#Single-Responsibility\" class=\"headerlink\" title=\"Single Responsibility\"></a>Single Responsibility</h2><p>Loosely coupled code is strongly related to the Single Responsibility principle.  You can’t have loosely coupled code unless the code follows the Single Responsibility principle.  And in the case above, putting view code in our controller actually violates both at the same time.  The controller is for manipulating view agnostic data.  The view is where your presentation layer code goes.  Of course, we could turn this around and remove the controller and put all of our code in the View.  Now that would definitely violate the single responsibility principle while giving the appearance of loose coupling.  But if we ever had to create multiple views we would quickly violate yet another principle.  Don’t Repeat Yourself.</p>\n<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing?\"></a>Testing?</h2><p>Normally, I would lead off with testing.  But the argument could be made, “If I’m not going to write unit test, do I still need to do this?”  Actually, someone did make that argument.  And for now, ignoring that not writing unit test is a bad idea that I’ve written about before.  Writing unit test helps us think about these issues up front.  It isn’t that testing is the reason we write good code, although if that’s how you want to think about it I’m not going to stop you.  It is just that writing good test causes us to write good code.  Since it is the most visible benefit we tend to think of it first.  But testing isn’t at all why we do this.  We write test because it provides benefits much like loose coupling does.  Saying that we write loosely coupled code that follows the single responsibility principle so we can test would be like saying we don’t get lost so we can use our GPS.  It is the GPS that helps us to not get lost.  In the same way, it is the test that cause is to write good code.</p>\n<h2 id=\"Best-Practices\"><a href=\"#Best-Practices\" class=\"headerlink\" title=\"Best Practices\"></a>Best Practices</h2><p>I know I’ve been following best practices for so long that I often forget why I’m doing them.  They work.  I do them.  But every once in a while, I need to step back and take a look at what I’m doing and ask “Why?” once again.</p>\n",
            "tags": [
                "tdd",
                "DRY",
                "loose coupling",
                "single responsibility"
            ]
        },
        {
            "id": "http://davembush.github.com/8-reasons-johnny-does-not-write-bug-free-code/",
            "url": "http://davembush.github.com/8-reasons-johnny-does-not-write-bug-free-code/",
            "title": "8 Reasons Johnny Does Not Write Bug Free Code",
            "date_published": "2016-09-20T10:30:00.000Z",
            "content_html": "<p>There have been a number of things that have occurred over the last week that have prompted this particular post.  And for anyone I work with, this is not an indictment of our work place so much as it is an indictment of our industry.  PLEASE don’t take this personally.</p>\n<p>Some of those reasons will show up in this article.  But the question we need to examine today is why is it so hard to write bug free code.  And I’m not even talking about perfection.  Why is it that we miss the simple stuff?  The stuff that once it is found, we think, “how could we have missed that?!”.  I’m perfectly aware that all code has bugs some just haven’t been found yet.  I’m also aware that no matter how hard I try, the stupid bugs always make their way past my desk.</p>\n<figure>![](/uploads/2016/09/image-1.png \"8 Reasons Johnny Does Not Write Bug Free Code\")<figcaption>Photo credit: [~Pawsitive~Candie_N](//www.flickr.com/photos/scjn/3450910519/) via [Visualhunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"No-Training\"><a href=\"#No-Training\" class=\"headerlink\" title=\"No Training\"></a>No Training</h2><p>Certainly not the only reason.  But at the same time I think this is a core reason.  Our industry really sucks when it comes to teaching computer science.  So much so, that I’ve written articles about how, for the most part, you don’t need a college education to become a programmer.  Maybe if we taught what programmers don’t already know how to do, a college education would be valuable.</p>\n<p>But what do we do instead?  We teach programmers how to program.</p>\n<p>Dumb! I think back to my education.  Here’s a basic summary of what I learned:</p>\n<ol>\n<li>COBOL, dBase III, JCS, CICS syntax.</li>\n<li>Break your code into functions</li>\n<li>A bit on how to do requirements analysis.</li>\n</ol>\n<p>Guess what?  I could have learned all of that on my own.  How do I know that?  Because I had already taught myself, Basic and C before.  I taught myself every language I’ve learned since.  I was already writing structured code, and still do.  And how we gather requirements has changed and somehow I managed to learn that on my own.  Programming is a learning profession.  It is one of the things that makes it attractive to me.</p>\n<p>But what didn’t I learn?  At no point did anyone ever teach me how to break my own code.  And while Test Driven Development wasn’t a thing when I was going to school.  I doubt they are teaching it today.  (Let me know if your school did or is.)</p>\n<h2 id=\"Happy-Path-Specs\"><a href=\"#Happy-Path-Specs\" class=\"headerlink\" title=\"Happy Path Specs\"></a>Happy Path Specs</h2><p>So, the programmers have no training.  But it isn’t just a programmer problem.</p>\n<p>When is the last time you got a specification from whoever creates them in your organization that had any more than a happy path set of requirements?  But, certainly there are things the system should not do.  I recently had to go asking for required fields and maximum field lengths in an application I was working on.  And that’s the simple stuff.</p>\n<h2 id=\"Not-My-Job\"><a href=\"#Not-My-Job\" class=\"headerlink\" title=\"Not My Job\"></a>Not My Job</h2><p>If you have a QA department, you might be tempted to leave testing to QA.  My personal goal is to make sure QA doesn’t find anything.  At least, not something really obvious.</p>\n<p>But I know that some programmers get sloppy about testing their code if they know the safety net of QA exist.</p>\n<p>There is also the problem of QA believing they are the only ones who test.  Strange, but true.  When QA found out I was writing unit test for a pretty complex piece of logic, I was asked, “Then what will be left for me to do?!”  Strange but true.</p>\n<p>But what if we started working as teams?  For example, what if I could get QA to help me develop my test plan?  What if developing software was a WE activity instead of several silo developers each doing their own thing?</p>\n<h2 id=\"Batch-Programming\"><a href=\"#Batch-Programming\" class=\"headerlink\" title=\"Batch Programming\"></a>Batch Programming</h2><p>This is one I really don’t understand.  But I know programmers who will write code for hours prior to running it.  Even if you did remember everything you coded, how can you possibly know where a bug is located if you wait that long?  You should be running your code every time you have something different that can be run so that you know what change caused a problem.  And don’t tell me you test every possible condition.  I know you don’t.</p>\n<p>Programmers who program like this are “Debbie Done” programmers.</p>\n<p>Why “Debbie Done”? There is this story about a programmer who used to work at one of the companies I worked at in the past.  She considered code done if it compiled and linked.</p>\n<p>I’m not as good at testing as I would like (yet) and I’m always embarrassed when someone finds a problem with my code.  So, I was shocked one day when I found out that a project manager wanted to give me some work because my code “always works.”  I knew that wasn’t true.  But when I reflected on what he was saying I realized that the difference in how I code and the other programmers he was comparing me to is that I write for a few minutes and then make sure that works before I continue on.</p>\n<h2 id=\"We-Don’t-Plan-to-Test\"><a href=\"#We-Don’t-Plan-to-Test\" class=\"headerlink\" title=\"We Don’t Plan to Test\"></a>We Don’t Plan to Test</h2><p>Ah.  And here we get a little closer to the truth.</p>\n<p>What do I mean by planning to test? For any spec you are working on, you should have, written out or coded, a repeatable set of steps that ensures that your code does what it should and doesn’t do what it shouldn’t.  This is what test driven development attempts to steer us toward.  I’m not going to go off on a rant about TDD again here.  But I will tell you that either having a written out test plan prior to coding enables me to ensure that my code does what the people who gave me the specification think it should.  It also forces me to think about ways I might break the code.  I know my code is delivered with less bugs because of this process.  Hopefully, I’ll get better at thinking of how to break my own code.</p>\n<p>Having a plan helps with the Debbie Done programmer as well as people who code more like me.</p>\n<p>Even though I code&#x2F;test incrementally, I still only test the code right after I’ve written it.  Once I think it is working, I don’t go back, even though something else I’ve written may have changed how the code is working.  Having repeatable tests has save me several times.</p>\n<h2 id=\"We-Don’t-Know-what-we-Don’t-Know\"><a href=\"#We-Don’t-Know-what-we-Don’t-Know\" class=\"headerlink\" title=\"We Don’t Know what we Don’t Know\"></a>We Don’t Know what we Don’t Know</h2><p>Even if we do everything right, we are still going to miss stuff.  One person can’t possibly figure out all that might go wrong.  It is how we deal with the problems once they are revealed that becomes the issue.  This is where we would, ideally, have the team come up with the test scenarios.</p>\n<h2 id=\"Shame-Driven-Development\"><a href=\"#Shame-Driven-Development\" class=\"headerlink\" title=\"Shame Driven Development\"></a>Shame Driven Development</h2><p>I actually heard a project manager say, “Shame on the developer if QA finds bugs.” Really?!  What about “Shame on the BA for not including that item in the requirements.”?  What about “Shame on the product owner for not mentioning it.”? Or what about no shame at all? While shame is a powerful motivator in the short term, it is a sure way to make sure your developers leave.</p>\n<p>That you only retain highly dysfunctional programmers.  Or that you can only retain programmers who can’t really code.</p>\n<p>Shame based development can only lead to even more bugs.  Not fewer.</p>\n<p>At some point I should probably write about the dangers of a shame based culture.   If your organization is using shame to manage personnel.  Get out!</p>\n<h2 id=\"Long-Hours\"><a href=\"#Long-Hours\" class=\"headerlink\" title=\"Long Hours\"></a>Long Hours</h2><p>Another way you can kill the overall effectiveness of your team is to make sure everyone works more than 45 hours a week for months or years at a time.  One of two things will happen, if not both.</p>\n<p>The code will suffer.  Want to introduce more bugs?  Keep everyone working overtime.  A week here or there is a different story.</p>\n<p>If the code doesn’t suffer, then you are likely to find a lot more socialization, social media activities, and just plain goofing off occurring.  People just can’t work that many hours.  Just because someone is at work for 10 hours doesn’t mean they are working 10 hours.  But hours are easy to measure, so this terrible practice continues.</p>\n<h2 id=\"We-Can’t-Fix-Everything\"><a href=\"#We-Can’t-Fix-Everything\" class=\"headerlink\" title=\"We Can’t Fix Everything\"></a>We Can’t Fix Everything</h2><p>I’m in a unique position in that I’m currently functioning as a Scrum coach.  This allows me to influence all the areas I’ve discussed.  As programmers, you can only influence your own stuff.  So, my recommendation to you is to concentrate on what you have control over.  Create a test plan prior to writing code.  Once you’ve learned how to do that, work on learning how to code those test so you don’t have to run them manually over and over again.  Do this slowly.  Maybe start with just one test.  Squeeze it into the cracks of your regular work.  Learning to test and learning to code test takes time, but it will make you a better programmer and will ultimately make you a more reliable and faster programmer.  Someday you might just hear that they want to give you an important job because “Johnny’s code always works.”</p>\n",
            "tags": [
                "tdd",
                "code",
                "agile",
                "scrum",
                "bug"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-establish-peace-to-the-qa-vs-dev-battle/",
            "url": "http://davembush.github.com/how-to-establish-peace-to-the-qa-vs-dev-battle/",
            "title": "How to Establish Peace to the QA vs Dev Battle",
            "date_published": "2016-09-13T10:30:00.000Z",
            "content_html": "<p>Have you ever noticed how, when QA reports a “defect” developers tend to bristle?  I first noticed this in myself a few years ago.  Now that I’m functioning as a Scrum coach, I’m noticing it in others.</p>\n<p>Is there a way to have some kind of quality checking in our code that doesn’t make the whole process feel so adversarial?  I think so.</p>\n<p>I believe there are some adjustments that need to be made organizationally and personally that will bring these two groups together.</p>\n<p>But first, why does this problem exist in the first place? <figure><img src=\"/uploads/2016/09/image.png\" title=\"How to Establish Peace to the QA vs Dev Battle\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/39908901@N06/9129574323/\">m01229</a> via <a href=\"//visualhunt.com\">Visual hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\">CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"How-The-Battle-Started\"><a href=\"#How-The-Battle-Started\" class=\"headerlink\" title=\"How The Battle Started\"></a>How The Battle Started</h2><h3 id=\"How-to-Insult-a-Programmer\"><a href=\"#How-to-Insult-a-Programmer\" class=\"headerlink\" title=\"How to Insult a Programmer\"></a>How to Insult a Programmer</h3><p>When I was growing up, my sister was very direct.  If she thought you were ugly, she’d tell you so.  OK.  Maybe it wasn’t quite that bad.  But one day, I remember she said something to the effect of, “I didn’t say anything that wasn’t true.”  And both my mom and I said, “Yes, but it isn’t what you said so much as how you said it.”  In fact, you can say the same words in two entirely different ways.  Two sets of inflections.  And what they mean can change drastically.  Sometimes just changing the words you use can change the meaning.</p>\n<p>But, to a programmer, no matter how you say, “Your code has a bug,” they will probably end up hearing.</p>\n<p>“Your code sucks!” You see.  Programmers really do care about their code.  At least the really good ones do.  And while it may seem very silly, most programmers get offended when you suggest they’ve written buggy code.</p>\n<p>This, you see, is the core of the problem.  Once you understand this, the fix becomes rather obvious.</p>\n<h3 id=\"Don’t-Call-It-a-Bug\"><a href=\"#Don’t-Call-It-a-Bug\" class=\"headerlink\" title=\"Don’t Call It a Bug\"></a>Don’t Call It a Bug</h3><p>I think nothing has done more damage in the field of programming that the fact that we call software problems “Bugs.”  It is such an ugly word.  When is the last time, other than a Pixar movie, when we’ve thought of bugs as something we would want to welcome?  We might as well say, “Hey, I found some shit in this program!” When I got my Scrum certification, our instructor asked a simple revealing question.  “How many of you think people are doing their best to do the right thing?”  That’s not exactly what he asked, but that’s what he meant.  If you believe that all evil in the world is intentional, you’ll come away believing that all programmer intentionally put bugs in their code.  And while I do know of a few cases where this has happened.  Most of us try our best to write perfect code.  When we don’t it is because we didn’t think of the situation and code for it.</p>\n<p>If on the other hand, you think everyone is trying to do their best, why treat defects in software as something evil? To paraphrase Scott Hanselman, “Most people are not nearly smart enough to be as evil as you act like they are.”</p>\n<h3 id=\"Most-Bugs-are-a-Specification-Problem\"><a href=\"#Most-Bugs-are-a-Specification-Problem\" class=\"headerlink\" title=\"Most Bugs are a Specification Problem\"></a>Most Bugs are a Specification Problem</h3><p>Weather you have a formal specification or an informal specification, my observation is that most “Bugs” that show up in code are a result of either 1) the specification being misunderstood or 2) the specification being incomplete.</p>\n<p>Yes, there are a few places where neither of those are true and the programmer clearly missed the mark.  But, even then, assuming they missed the mark rather than assuming the specification was unclear will go a long way in making the programmer more receptive to the fact that the code needs to be changed.  Just the fact that we call a defect in our programs a “Bug” reveals and colors what we think about who’s fault</p>\n<h2 id=\"What-Programmers-Can-Do\"><a href=\"#What-Programmers-Can-Do\" class=\"headerlink\" title=\"What Programmers Can Do\"></a>What Programmers Can Do</h2><h3 id=\"It’s-Not-Personal\"><a href=\"#It’s-Not-Personal\" class=\"headerlink\" title=\"It’s Not Personal\"></a>It’s Not Personal</h3><p>Listen gang.  Bugs are not a reflection of your personal character.  And even if someone thought it was, that doesn’t make it true.  At worse, it means you might have some stuff you still need to learn about how to program well.  OK.  We’ll never be perfect.  Think about this, while you are writing the code, your compiler, or runtime, tells you you’ve done something wrong quite frequently.  But as soon as a human tells you something similar, you take it personally?  That’s pretty wacked.</p>\n<p>Here are a few tips I’ve learned:</p>\n<ul>\n<li>Emotions are learned responses.  This means your negative response to bugs can be retrained.</li>\n<li>Just because someone says something about you, or disapproves of you personally, doesn’t mean they are right.</li>\n<li>Most criticism is only an opinion based on an expectation.</li>\n</ul>\n<p>If you can internalize these, you will be much more receptive to hearing that your code has a flaw.</p>\n<h3 id=\"Break-the-Spec-into-Tasks\"><a href=\"#Break-the-Spec-into-Tasks\" class=\"headerlink\" title=\"Break the Spec into Tasks\"></a>Break the Spec into Tasks</h3><p>One thing I’ve started doing recently that I’ve found to be a great help is that I’ve started breaking the specification I’ve been given down into the composite task that I’ll need to implement the specification.  How granular.  I aim for task that should take less than four hours.  By getting this granular, I’m able to accurately estimate how long it should take me to complete the specification, and I’m sure I’ve caught all of the tasks involved in completing the specification.</p>\n<p>You should track your time against your estimates so you can get a sense of how far off your gut is relative to reality.  This will improve your ability to estimate projects.</p>\n<p>By breaking down the project like this, you are more likely to see holes in the requirements before you even start coding.</p>\n<h3 id=\"Create-a-Test-Plan\"><a href=\"#Create-a-Test-Plan\" class=\"headerlink\" title=\"Create a Test Plan\"></a>Create a Test Plan</h3><p>The other thing I’ve started doing is that I’ve started writing out how I plan to test the specification once I’ve completed it.  I just write this out.  Once again, this helps me find holes in the requirement.  But this also forces me to start thinking of ways someone might use the code that would break it.  And that simple act of trying to break it in my mind prior to coding it, refines the spec, and makes my code more reliable.</p>\n<h3 id=\"Ask-for-a-Review\"><a href=\"#Ask-for-a-Review\" class=\"headerlink\" title=\"Ask for a Review\"></a>Ask for a Review</h3><p>Once you have your tasks and your test plan, ask the person who gave you the spec to review it.  “Does this look like it reflects what you’ve asked me to do?”  This does two things.  First, and most importantly, it ensures you understand what it is you are building.  But, it also enlists someone else in the responsibility of ensuring what you finally build is what should have been built.</p>\n<h2 id=\"What-QA-Can-Do\"><a href=\"#What-QA-Can-Do\" class=\"headerlink\" title=\"What QA Can Do\"></a>What QA Can Do</h2><h3 id=\"Don’t-Call-Them-Bugs\"><a href=\"#Don’t-Call-Them-Bugs\" class=\"headerlink\" title=\"Don’t Call Them Bugs\"></a>Don’t Call Them Bugs</h3><p>I remember reading a Louis L’amour book one where the basic plot was this wagon train going out west.  At the beginning of the trip they had all agreed that no “bad language” was allowed.  And then one day, someone used the word, “shit” to describe cow poop that was on the ground.  The group was in shock and he was reprimanded.  At that point I remember the line, “If a word makes it any different, why don’t we just call it pudding?” But you see, as I’ve already explained, a word DOES make a difference.</p>\n<p>The word I would prefer to use is “Specification Refinement” because, in the end, that is what they are.</p>\n<h3 id=\"Don’t-Write-Requirements\"><a href=\"#Don’t-Write-Requirements\" class=\"headerlink\" title=\"Don’t Write Requirements\"></a>Don’t Write Requirements</h3><p>One thing I’ve noticed happens quite frequently is that once QA has verified all of the items in the requirement, they start doing exploratory testing, as they should.  But, when they find something, they inadvertently start writing requirements.  It looks like this.</p>\n<p>“I did X, Y and Z.  I expected to get result 1 but instead got result 2.” Some of you are probably thinking, “What’s wrong with this?!” Well, why did you EXPECT to get result 1?  If the expectation was not listed in the requirement, you have no valid reason to expect anything.  Your expectation is just your opinion about what should happen based on previous experience.</p>\n<p>So, how to write up this problem instead? “I did X, Y and Z and 2 happened.  This doesn’t look right but I don’t see anything in the spec that says what should happen.”</p>\n<h3 id=\"Don’t-Assign-Bugs\"><a href=\"#Don’t-Assign-Bugs\" class=\"headerlink\" title=\"Don’t Assign Bugs\"></a>Don’t Assign Bugs</h3><p>This one is going to fly in the face of QA teams everywhere.  But remember, we are trying to find peace in what has become an antagonistic relationship.</p>\n<p>Remember how I said that programmers react emotionally to the fact that you found a bug?  Well, if you assign a bug to them and they get a notification about that bug in the middle of writing code for the current sprint, here is what is going to happen.  First, the email is going to interrupt them.  Second, they will have an emotional response to the bug report that could continue to derail them for the rest of the day.</p>\n<p>Instead, you should be assigning the bug to the project.  Assuming you are using Scrum and have a backlog, the issue should be put on the backlog for grooming.  Grooming would include figuring out who is responsible for the bug or who is responsible for finding out what the core issue is so we can assign the bug appropriately.</p>\n<p>One of the problems I’ve seen with assigning bugs to specific developers is that the bug is often assigned incorrectly.</p>\n<p>By assigning the bugs to the back log as specification refinements, they just become additional features and the sting associated with “Bugs” goes away.</p>\n<p>If you are using software that requires you to assign bugs to an individual, make that individual the Scrum Master, Product Owner, or Project Manager (if you aren’t doing Scrum).</p>\n<h2 id=\"Organizational-Changes\"><a href=\"#Organizational-Changes\" class=\"headerlink\" title=\"Organizational Changes\"></a>Organizational Changes</h2><p>Finally, I want to address organizational changes that you may need to make.  Hopefully, you are already doing this.  But my experience tells me otherwise.</p>\n<h3 id=\"Silos-Kill\"><a href=\"#Silos-Kill\" class=\"headerlink\" title=\"Silos Kill\"></a>Silos Kill</h3><p>Everywhere I go, QA is a separate department.  Why can’t QA be co-located with the developers?  Wouldn’t it make a lot more sense to have QA working with the developers to figure out a test plan so we can code for the plan rather than having the plan developed in isolation?  I get that exploratory testing might reveal additional issues, but certainly some of those issues can be revealed early by defining how the code is going to be explored.  Plus, making everyone part of the same team means they are all working toward the same goal.  No one gets offended that way.</p>\n<p>When one QA person found out I was writing unit tests, she asked, “What will be left for me to tests?”  Which I found to be an incredibly naïve way of thinking.  Wouldn’t you hope that you don’t find any problems with the code I am working on?  How is the fact that I’m testing a problem for QA?  Aren’t we all working on the same goal?</p>\n<h3 id=\"Central-Source-of-Truth\"><a href=\"#Central-Source-of-Truth\" class=\"headerlink\" title=\"Central Source of Truth\"></a>Central Source of Truth</h3><p>Another place that needs to be addressed related to silos – Another area that re-enforces and is a result of silos – is this habit of each group using their own project management software.</p>\n<p>In one organization I’ve worked at we used four different systems.  One system for version control (GitHub) another system for QA (HP Quality Center) a third system to manage requirements (which we only used minimally and instead had documents on a shared drive) and a forth system for managing our Kanban board (Jira).</p>\n<p>The frustrating thing is that 80% of what everyone needed to do could have been achieved by using GitHub.  But even if we needed to use separate systems for the actual artifacts, it seems to me that we could use one system for tracking the project instead of having it tracked three or four different ways.  That’s just craziness.</p>\n",
            "tags": [
                "project management",
                "best practices",
                "QA"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-estimate-software-projects-like-a-pro/",
            "url": "http://davembush.github.com/how-to-estimate-software-projects-like-a-pro/",
            "title": "How to Estimate Software Projects Like a Pro",
            "date_published": "2016-08-30T10:30:00.000Z",
            "content_html": "<p>We’ve all been there.  Either at the micro level or at the macro level.  Business wants to know, “How much is this going to cost me?”  And as software developers, we all know the answer is, “more than you were expecting.”  We also know that whatever number we give will probably be wrong for a number of reasons.  Chief among them is that no one really knows what they want until they see it.</p>\n<p>And yet, there has to be some way of providing business what they need and still allowing for unknowns.</p>\n<p>So what follows are a few tips on estimating that help you estimate software projects like a pro.</p>\n<figure>![](/uploads/2016/08/image-2.png \"How to Estimate Software Projects Like a Pro\") Photo via [Visualhunt](//visualhunt.com/photos/business/)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"You-Don’t-Know-What-You-Don’t-Know\"><a href=\"#You-Don’t-Know-What-You-Don’t-Know\" class=\"headerlink\" title=\"You Don’t Know What You Don’t Know\"></a>You Don’t Know What You Don’t Know</h2><p>This tends to be the most famous argument for not giving an estimate.  Or for giving an estimate that is all but meaningless.</p>\n<p>“My gut says this will take a month, so I’m going to say four months because I really have no idea.” Well, that might be a safe estimate, and you might be right.  But if the business is looking for a number to use for a budget, they are going to learn that you pad your estimates.  So, a better answer is, “Are you looking for a rough ballpark or are you basing your budget on this?” And if they say they need a somewhat accurate number, your answer should be, “I really don’t know enough about the project.  Could we break it down into its component parts?</p>\n<h2 id=\"Virtually-Walk-Through-the-Project\"><a href=\"#Virtually-Walk-Through-the-Project\" class=\"headerlink\" title=\"Virtually Walk Through the Project\"></a>Virtually Walk Through the Project</h2><p>This will work regardless of the project size and regardless of if it is just you or a team.</p>\n<p>Here’s what you need to do, once you’ve broken the project down into the component parts, ask yourself, “What is the next thing I would need to do to get this project moving?”  You write that down, come up with an estimate for how long that will take, and then ask yourself the question, “Assuming I’ve completed what I’ve listed so far, what is the next thing I need to do?”  And you just keep doing this until the project is (virtually) done.</p>\n<p>You want to be careful as you are doing this to:</p>\n<ol>\n<li><p>For estimating actual work at the programming level, make sure none of your tasks take more than 8 hours to complete.  I personally aim for 4 hours.  Even if you use story points instead of actual hours, I’m sure internally you have some idea of how many hours a story point represents for you.  Size the work accordingly.</p>\n</li>\n<li><p>For estimating at the more macro level, I recommend dividing the project into 2-man week chunks.  Basically a sprint.</p>\n</li>\n<li><p>Don’t forget the obvious</p>\n</li>\n<li><p>Setup time</p>\n</li>\n<li><p>Creating tests.</p>\n</li>\n<li><p>Bug fix time.</p>\n</li>\n<li><p>Broken dependencies</p>\n</li>\n</ol>\n<h2 id=\"Everything-takes-twice-as-long-as-you-think-it-will\"><a href=\"#Everything-takes-twice-as-long-as-you-think-it-will\" class=\"headerlink\" title=\"Everything takes twice as long as you think it will.\"></a>Everything takes twice as long as you think it will.</h2><p>This rule of thumb has served me well over the years.  But it isn’t a hard and fast rule.  It often depends on the client.  I switch clients frequently because I am a contract programmer.  If I’m new, I’ll provide estimates with the 2x multiple factored in.  But as I learn more about the people providing the requirements, I’ll tweak that factor appropriately.</p>\n<p>I had one product owner I worked with who I learned to provide a multiple of four to because I only heard half of what he was trying to communicate.  I’m not sure where the communication breakdown was, all I know is if I multiplied by four, I was much better at being able to manage his expectations.</p>\n<h2 id=\"Track-Everything\"><a href=\"#Track-Everything\" class=\"headerlink\" title=\"Track Everything\"></a>Track Everything</h2><p>Even if you implemented everything I’ve recommended, you are still likely to fail in the long term because you’ll never learn from your mistakes.</p>\n<p>So what might you track?  Well, at the personal level, you want to track how close your estimate was to reality.  Over time you’ll learn that you tend to be off by so much.  And as you learn to estimate and track, I would expect your estimates to account for more items so that your multiple gets closer to a factor of 1x than the 2x I recommended you to start with.</p>\n<p>At the more macro level, you want to track the team.  Please, don’t track individuals.  Let the individuals do that.  Provide training so they can get better.  But if you do the tracking for them, you’ll destroy moral.</p>\n<p>But you want to know, when the team says they can do X in a week, that probably means it is going to take a week and a half… or whatever it ends up taking.</p>\n<p>I’m working on a project now where, had I been the project manager, I would have doubled all the estimates I was given.  Oh well, they’ll find out soon enough.  Although I would have expected this particular PM to know better.</p>\n<p>You also want to track items you may have forgotten to put in your plan.  You’ll add this to your “estimation checklist” which I’ll discuss next.</p>\n<h2 id=\"Estimation-Checklist\"><a href=\"#Estimation-Checklist\" class=\"headerlink\" title=\"Estimation Checklist\"></a>Estimation Checklist</h2><p>You want to create a checklist that you can use to make sure you’ve covered everything that needs to be estimated.  Along with the items I included above, here are some others you might want to include:</p>\n<ol>\n<li>Database Refresh side effects – yes I know, each programmer SHOULD have their own copy of the database, but I’ve yet to work for an organization that does this.  Because we don’t have this on my current project, we’ve lost valuable morning time twice this week waiting for the database we are using to get updated.  At least we aren’t all working against the production database.</li>\n<li>Version Control Management – this includes branching, merging, pull request, and code reviews.</li>\n<li>Holidays and Vacations</li>\n<li>Any learning curves that must be mastered.</li>\n</ol>\n<h2 id=\"Management-Doesn’t-Like-the-Estimate\"><a href=\"#Management-Doesn’t-Like-the-Estimate\" class=\"headerlink\" title=\"Management Doesn’t Like the Estimate\"></a>Management Doesn’t Like the Estimate</h2><p>There have been a few times when the manager I’m working for doesn’t like the estimate I provide.  In my experience there are several reasons for this.</p>\n<p>First, and almost always, if I’m right, the project is going to take a lot longer than they expected, or longer than they’ve been told to do it in.</p>\n<p>Second, they are used to estimates that are half as long.  The problem isn’t that my estimates are wrong, but that their expectations have been set lower.</p>\n<p>What to do? Well, I take them to my list and show them where all the time is.  Because I can document where the time is going to be spent, I rarely have to do more than explain how I came to the estimate I did.</p>\n<p>If they still bulk, I simply have this conversation, me: “So, you think my estimates are high?” them: (yes).</p>\n<p>me: “Do your other programmers write tests for their code?”</p>\n<p>them: (no)</p>\n<p>me: “When you compare their time to the time I’ve said I’m going to take, do you account for bug fixes?”</p>\n<p>them: (no)</p>\n<p>me: “If you did account for the bug fixes, would their estimates be more or less accurate?”</p>\n<p>them: (less)</p>\n<p>me: “Do you believe the way I’ve proposed to complete this project will result in less bugs than you normally see?”</p>\n<p>Well, you get the point.  I’ve yet to have to have a conversation that went into that much detail.  And the more you track, the easier this conversation becomes because you can just say, “I’ve been tracking my estimates against reality now for N years and I’ve found that I normally am within X% of my estimate.</p>\n<h2 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h2><p>There are a couple of tools I really like for estimating.  The first one is the Mind Map.  If you aren’t familiar with Mind Mapping, it is a way of just getting your ideas down on paper without having to worry about the structure or the order.  All you concentrate on is relationships.  This is a great way of breaking a project down into the smallest possible units of work.</p>\n<p>Once you have a mind map of your tasks, you can put the individual tasks into a Kanban Board.  You want a board that can provide the ability to attach estimates to the tasks and will show you a burn down&#x2F;up chart based on how much work you’ve completed.</p>\n<p>For Mind Mapping, I currently use <a href=\"//www.mindmup.com\">Mind Mup</a>.</p>\n<p>For Kanban, I use <a href=\"//trello.com/\">Trello</a> with <a href=\"//chrome.google.com/webstore/detail/plus-for-trello-time-trac/gjjpophepkbhejnglcmkdnncmaanojkf?hl=en\">Plus For Trello</a>.</p>\n<p>I wish there was a tool that married the two ideas.  That way I could use Mind Mapping for Epics, Stories, and defining tasks and I could use a Kanban board for tracking work.</p>\n",
            "tags": [
                "project management",
                "estimating"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-sabotage-estimates/",
            "url": "http://davembush.github.com/how-to-sabotage-estimates/",
            "title": "How to Sabotage Estimates",
            "date_published": "2016-08-23T10:30:00.000Z",
            "content_html": "<p>Over the last week, I’ve been helping other programmers estimate the task they’ve been assigned and this has caused me to reflect on how I estimate software.  What works.  What doesn’t.  What mistakes I see people make.</p>\n<p>There has also been a move to avoid estimates entirely.  The argument goes something along the lines of, “we know the least about a project at the beginning of the project, so we can’t really give an accurate estimate.”  Which is mostly true.  And yet, there are people who need to know “how much is this going to cost?”  What do we do for them?  How do we balance the two realities? And then all of this lead me to think of all the ways we sabotage our estimates, or our estimates are sabotaged for us.</p>\n<p>You might think that estimating projects only applies to project managers.  But the truth is, most places I have worked rely on programmers to give them estimates, and frankly, most of us screw this up.</p>\n<figure>![](/uploads/2016/08/image-1.png \"How to Sabotage Estimates\")<figcaption>Photo credit: [Musée McCord Museum](//www.flickr.com/photos/museemccordmuseum/2918567169/) via [Visual hunt](//visualhunt.com/photos/people/) / [No known copyright restrictions](//flickr.com/commons/usage/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Working-Backwards-from-a-Date\"><a href=\"#Working-Backwards-from-a-Date\" class=\"headerlink\" title=\"Working Backwards from a Date\"></a>Working Backwards from a Date</h2><p>This is the most obvious, I think, so we’ll get it out of the way first.  But it has some permutations that aren’t quite so obvious that we need to examine as well.</p>\n<p>Now, I get it.  There are some cases where there is a specific end date.  Something that is out of your control is happening on a specific date.  If you don’t deliver the software by that time, then you might as well not create it.  But, in that case, you have to take the golden triangle into consideration.</p>\n<ul>\n<li>You can have it on a specific date.</li>\n<li>You can do it all.</li>\n<li>You can do it within budget.</li>\n</ul>\n<p>Unfortunately, even each of these have limitations.</p>\n<ul>\n<li>You might be able to release something on a specific date, but it may not be all that was intended.</li>\n<li>Even if you could buy all of the resources you needed, which is hardly ever possible, there will be limitations to using all of the resources.</li>\n<li>If you have a limited budget, doing it all will probably suffer.</li>\n</ul>\n<p>This is where using Scrum has a huge advantage.  Because at least using Scrum, you are constantly picking the next most valuable feature to implement and each feature is released in a potentially deliverable state.  This is quite unlike the project I’m working on where components are being worked on that we can’t even really test because they get called by something that has yet to be built.  Grant it, they’ll eventually be needed to have a viable product, but it is really hard to argue they are the NEXT most valuable feature when they can’t even be tested.</p>\n<p>Now, if you are working backward from a date, this could work if you add more resources, or you cut features.  I’ve worked in some organizations that were really good about figuring out what could be done and making sure the client was on board with the fact that we would only deliver that much.  But there have been other organizations where every time I suggested we not deliver a feature, I’ve been given a hundred reasons why that couldn’t be done.  Needless to say, those projects are doomed.</p>\n<p>Working backwards from a date is largely a management issue or a client issue.  But as they ask programmers for dates in light of the date, I find programmers are inclined to try to give numbers they think their managers want to hear rather than what they expect can really be done.</p>\n<h2 id=\"Going-with-Your-Gut\"><a href=\"#Going-with-Your-Gut\" class=\"headerlink\" title=\"Going with Your Gut\"></a>Going with Your Gut</h2><p>The next most dangerous way of providing an estimate is to just go with your gut feel.  Here’s the thing about your gut.  It’s pretty optimistic.</p>\n<p>I find that everything takes about twice as long as I think it will.  I’ve worked for some people who I quickly learned were only describing half of the project.  In those cases, I’d be off by a factor of four.</p>\n<p>So, I’ve learned to compensate.  Whenever I’m asked for a “rough estimate” I always double whatever my gut thinks.  In some cases, I’ll pad even more.</p>\n<p>But the right thing to do would be to spend a few hours and break the project down into task that take less than a day.  Ideally you want to break those tasks down into half day sized tasks.  Once you have all of the tasks spelled out, you can add up the hours and you’ll have a pretty good idea of just how long the project will take you.</p>\n<p>If you are working in an office, don’t forget to account for meetings, helping others, and other tasks that tend to happen over the course of a week when you provide the date you plan to be done.  Otherwise, you’ll find you’ll end up having gotten the hours right but still end up being late.</p>\n<p>How do you break the plan down?  What I do is I ask a very obvious questions.  What’s the next thing I would need to do? Let’s assume we are starting a new feature.  If you were to sit down and code that feature right now, what is the next thing you’d have to do to code that feature?  It might be, “setup the programming environment” or “setup version control” or “get a test harness in place” or “create a branch from version control” it doesn’t matter that it might take a half an hour to do.   That’s actually good.  Just don’t let it be so big of a task that it is going to take you several days to complete.</p>\n<p>Next, assuming you’ve done the tasks so far, what is the next thing you’ll need to do.</p>\n<p>You just keep doing this until you have a set of task that fit within the half day sized and all fully describe the steps you will take to get the project done.  While breaking task down this way will get you a much more accurate number, I’ve found that I still need to double the time I think it will take.  Especially if I know little or nothing about the project I’m getting in to.  The more you learn about the project, the less padding you should need to do.</p>\n<h2 id=\"Don’t-Plan-for-the-Unknown\"><a href=\"#Don’t-Plan-for-the-Unknown\" class=\"headerlink\" title=\"Don’t Plan for the Unknown\"></a>Don’t Plan for the Unknown</h2><p>But in every project, there will still be some unknowns.  In fact, this past week, I hit one of those.  When I put it on my task list, I put it in as 8 hours figuring there would probably be some refactoring I’d need to do.  But when I got to it, what I found was that the refactoring project was a lot bigger than I had expected.</p>\n<p>In this case, the best thing to do is to raise this new information to the team and adjust your estimate based on the new information.</p>\n<p>At the end of the day, I don’t expect this will actually impact my delivery date because some of my other task are going faster than I was expecting, but I’m still adjusting my estimates to document the fact that it had to be done.</p>\n<h2 id=\"Forget-Who-Is-Asking\"><a href=\"#Forget-Who-Is-Asking\" class=\"headerlink\" title=\"Forget Who Is Asking\"></a>Forget Who Is Asking</h2><p>Most people I work for give me pretty accurate descriptions of the problem I’m going to work on.  I can safely double the amount of time I think it will take and I generally hit my dates.</p>\n<p>But occasionally, there is that client who only tells you half of what he’s actually thinking.  You’ll learn who that is in your life soon enough.  You can either complain that you didn’t get complete enough requirements.  Or you can plan on the requirements being incomplete and pad your estimates accordingly.</p>\n<p>Telling your client or manager (who is your client in most cases) that they did it wrong, may not be the most prudent way of dealing with this issue.  I opt for padding the estimates.</p>\n<h2 id=\"Working-from-a-Summary\"><a href=\"#Working-from-a-Summary\" class=\"headerlink\" title=\"Working from a Summary\"></a>Working from a Summary</h2><p>This kind of gets back to the last two points, but it needs to be called out separately.</p>\n<p>You see, most of the time you’ll be asked for an estimate with enough information to make the call.  But there are other times all you’ll have is a working summary.  I find it best in this case to give the person asking for the estimate such a wide estimate (1 – 8 hours) that it is worthless for anything other than a rough ballpark idea of how much effort the project will take and explain that I would need more information to give a better estimate.</p>\n<p>Most people are pretty understanding when you explain this correctly.  Whatever you do, don’t give a fixed number that you can’t adjust up and down as you discover more information.  In fact, even when you have more information, you should always give your estimates in terms of ranges of time.</p>\n<h2 id=\"Assume-it-Will-Work\"><a href=\"#Assume-it-Will-Work\" class=\"headerlink\" title=\"Assume it Will Work\"></a>Assume it Will Work</h2><p>Even the seasoned programmers make this mistake.  I know one guy who brags about how quickly he can write the code.  But he completely ignores the fact that while he spent a month writing the code, he’s spent three months getting it past the QA department.  So, did he really get the project done it a month?  Oh and those bugs?  God help you if you suggest those bugs are HIS fault! But, I find we all tend to do this in some way or another.</p>\n<p>All I want to say about this here is this.  You can either plan to test your code using some sort of test framework or you need to plan to fix bugs.  Which you plan for is up to you, but those of you who have followed my blog know I’m going to tell you that you’ll save a lot of time if you plan to write and execute tests.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I’m sure many of you could have written a post like this.  So, I invite you to add to it in the comments below.</p>\n",
            "tags": [
                "programming",
                "estimating",
                "software"
            ]
        },
        {
            "id": "http://davembush.github.com/using-javascript-to-drive-selenium-tests/",
            "url": "http://davembush.github.com/using-javascript-to-drive-selenium-tests/",
            "title": "Using JavaScript to Drive Selenium Tests",
            "date_published": "2016-08-16T10:30:00.000Z",
            "content_html": "<p>I’ve written about <a href=\"/tags/selenium/\">using Selenium to test web applications before</a>.  But all of those articles have assumed you are using C#.  I’ve realized that Selenium has multiple language bindings which allow me to use any language I want but C# just seemed easier at the time.  But, now I’m in an environment that doesn’t use .NET at all.  They use Java.  I know Java, but I choose not to use it and instead my focus at this shop is all JavaScript.  Which means, if I want to write Selenium tests to verify my work, I need to write my tests in JavaScript.  But Using JavaScript to Drive Selenium is, in my opinion what everyone should be doing.  At least everyone who is writing most of their web application using client side code.</p>\n<span id=\"more\"></span>\n\n<p>Think about it, the primary language you wrote the client side with is JavaScript, and yet you are going to write your tests using C#, Java, PHP… when you could be writing the tests using JavaScript.  The same language you used to write the bulk of your application.  Further, when you write your tests using C# or Java, you’ll probably either write the tests using a unit testing framework (MSTest, NUnit, JUnit) or you’ll use some sort of BDD adapter like SpecFlow to coerce the unit testing framework into the behavioral pattern you need.</p>\n<p><img src=\"/uploads/2016/08/image.png\" alt=\"image\" title=\"image\">  If, you use JavaScript, you can use Jasmine, which is already behavioral, to run your tests.</p>\n<p>Another added advantage to the binding I’m going to recommend in this post, is that you get parallelization right out of the box.  You don’t need to write any funky code to <a href=\"/running-selenium-in-parallel-with-any-net-unit-testing-tool/\">make your tests run in parallel</a>.  You get that for free.</p>\n<p>Another advantage I see for large companies is that not every group is going to be using the same server side language.  Where I’m at there are several groups using .NET and several groups using Java.  But everyone is using JavaScript.  If we all use JavaScript to drive our Selenium tests, we can share the knowledge we learn with other groups.</p>\n<p>So, let’s get started.</p>\n<p>For the purposes of this article, I’m going to assume you’ve already <a href=\"/you-can-start-using-node-today/\">setup your node environment using the instructions I provided a couple of weeks ago</a>.  If you haven’t, you should do that now.  If you already have Node setup on your computer, but you are still using a version less that 6.3, I’m going to suggest you upgrade to the current version so that you can use some of the new ES2015 functionality like fat arrows.</p>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><p>The tools we are going to use for testing using JavaScript, other than Node are:</p>\n<ul>\n<li><a href=\"//webdriver.io/\">WebDriver.io</a></li>\n<li><a href=\"//webdriver.io/guide/reporters/spec.html\">WebDriver.io Spec Reporter</a></li>\n<li><a href=\"//jasmine.github.io/\">Jasmine</a></li>\n</ul>\n<p>And while the documentation on the WebDriver.IO site is quite complete, you would need to wade through quite a bit of information you don’t need to get this all setup and going.  We are going to give you just enough to get started.  If you want more information, I invite you to visit the website I’ve linked to above.</p>\n<p>For the purposes of this walk through, we are going to ignore the Selenium Grid part.  I’ve written about setting up Selenium Grid before.  Using the grid from WebDriver.io will just be a matter of changing some configurations.  Similarly, if you want to run the test from a cloud provider, the docs for that are on the website.</p>\n<p>Here, we are just going to get setup with a standalone server.  This suits my typical use of Selenium is to write a test for one specific tests at a time.  Once I have it working, I disable the tests.  The only time I run all of my test is prior to deploying the code to DEV just to make sure I didn’t break anything along the way.  Besides, setting up a standalone environment gets you started quickly.</p>\n<p>Before we really get started with the JavaScript stuff, make sure you have Java installed on your computer.  You’ll need that to run the Selenium stuff.</p>\n<p>So, to start out, install WebDriver.io First create a project directory for your new test project.  You can, of course, name it whatever you want.  Just make sure you make that directory your current working directory (CD into it.) Once you’re in the project directory, create your package.json file by typing in npm init Which will ask you several questions about your project.  Answer the questions and&#x2F;or accept the defaults.</p>\n<p>Then install WebDriver.io by using the NPM command <code>npm install webdriverio --save-dev</code> This should place wdio in your .&#x2F;node_modules&#x2F;.bin directory.  Run <code>./node_modules/.bin/wdio --help</code> To verify that it is working.  If you are running on a Windows computer, you’ll want to make those forward slashes back slashes.</p>\n<p>Now that it is working, we are going to use it to configure a test runner file.  Type in .&#x2F;node_module&#x2F;.bin&#x2F;wdio config One of the questions it is going to ask is which framework you want to use.  Pick ‘Jasmine’ Then it will ask if it should install the framework for you, pick ‘Yes’ Then it will ask where your tests are located.  Type in the correct location.</p>\n<p>Then it will ask which adapter you want to use.  Pick ‘spec’ and have it install that library for you.</p>\n<p>For Service, select ‘selenium-standalone’ and let it install that for you as well.  (Noticing a theme here?) For base URL, pick <a href=\"//www.google.com\">https://www.google.com</a> because we are going to write out demo tests against google.</p>\n<p>Now sit back and let the wdio config install the missing parts it needs for your tests.</p>\n<p>By default, this setup makes FireFox the test browser.  You can change that using the instructions located here: <a href=\"//webdriver.io/guide/testrunner/configurationfile.html\" title=\"http://webdriver.io/guide/testrunner/configurationfile.html\">http://webdriver.io/guide/testrunner/configurationfile.html</a> I know that looks like a lot of setup, but it really is pretty easy.  One NPM command to install webdriver.io and another wdio command to get the config file setup and the rest of the dependencies installed.  Pretty sweet.</p>\n<p>Now, let’s write our first test.</p>\n<h2 id=\"Writing-Tests\"><a href=\"#Writing-Tests\" class=\"headerlink\" title=\"Writing Tests\"></a>Writing Tests</h2><p>We are going to put our test in the directory we specified in our config file.  In my case, I put my tests under &#x2F;tests&#x2F;**&#x2F;*.js Just to make sure everything is working correctly, we are going to write a pretty simple first test.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;First test&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">beforeEach</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        browser.<span class=\"title function_\">url</span>(<span class=\"string\">&#x27;https://www.google.com&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should display &quot;Google&quot; in the title&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(browser.<span class=\"title function_\">getTitle</span>()).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;Google&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>There are some bits that might look new here.</p>\n<p>First, because we are running this in node, only the file has scope so we can place ‘use strict’; at the top.</p>\n<p>Second, we are making use of the fat arrow functions.  For our purposes today, ()&#x3D;&gt;{} is the same as function(){}.  Just a bit easier to write.</p>\n<p>Third, we are using a browser variable that hasn’t been defined anywhere.  At least not that we can see.  This is a design decision the WebDriverIO team made that I don’t necessarily agree with.  We should require() it into our module when we need it.  But it is what it is.</p>\n<p>You can checkout the API for the browser object here: <a href=\"//webdriver.io/api.html\" title=\"http://webdriver.io/api.html\">http://webdriver.io/api.html</a> So, our test is loading the default URL and checking the contents of the title tag.</p>\n<p>Now we run our test with wdio <code>./node_modules/.bin/wdio wdio.conf.js</code> Our test should pass.</p>\n<h2 id=\"Page-Objects\"><a href=\"#Page-Objects\" class=\"headerlink\" title=\"Page Objects\"></a>Page Objects</h2><p>So that’s the basics.</p>\n<p>If you are already familiar with writing Selenium testing, that’s the guts of what you need to know to get going.</p>\n<p>If you aren’t, or you’ve never heard of Page Objects, that is what I plan to cover next.</p>\n<p>Generally, when we write our selenium test, we want to use a Page Object.  That is, we want to hide all of our Selenium specific stuff under an object so we can write our test without having to worry about the location of the elements on the screen changing.</p>\n<p>You see, here’s the problem you are going to run into.  You are going to write lots of tests.  At least I hope you do.  And then someday, you are going to want to change an ID of an element, or otherwise change how you find it.  If you write all of the tests so that they code directly to the Selenium code, you’ll need to find every place you were looking for that element and replace it with the new lookup.  Not very DRY.</p>\n<p>But, if you create a page object, you’ll put your code there and call it from your tests.</p>\n<p>So for an example.  Let’s create a GooglePage definition.  Once again, because we are using Node 6.3 (or above) we can use the class keyword.  The browser variable is still available to us because it is global.</p>\n<p>So, a pretty simple page object for Google search might look like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GooglePage</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">load</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        browser.<span class=\"title function_\">url</span>(<span class=\"string\">&#x27;https://www.google.com&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> <span class=\"title function_\">title</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> browser.<span class=\"title function_\">getTitle</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> <span class=\"title function_\">searchInput</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> browser.<span class=\"title function_\">element</span>(<span class=\"string\">&#x27;input[name=&quot;q&quot;]&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> <span class=\"title function_\">searchButton</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> browser.<span class=\"title function_\">element</span>(<span class=\"string\">&#x27;input[name=&quot;btnK&quot;]&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">search</span>(<span class=\"params\">value</span>)&#123;</span><br><span class=\"line\">        <span class=\"title class_\">GooglePage</span>.<span class=\"property\">searchInput</span>.<span class=\"title function_\">setValue</span>(<span class=\"string\">&#x27;Node.js&#x27;</span>);</span><br><span class=\"line\">        browser.<span class=\"title function_\">pause</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">GooglePage</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And then to access it from our test, we modify the test file above to look like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">GooglePage</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../pages/GooglePage&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;First test&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">beforeEach</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title class_\">GooglePage</span>.<span class=\"title function_\">load</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should display &quot;Google&quot; in the title&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(<span class=\"title class_\">GooglePage</span>.<span class=\"property\">title</span>).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;Google&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;and I search for &quot;Node.JS&quot;&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"title class_\">GooglePage</span>.<span class=\"title function_\">search</span>(<span class=\"string\">&#x27;Node.JS&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should display &quot;Node.JS&quot; in the title&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(<span class=\"title class_\">GooglePage</span>.<span class=\"property\">title</span>).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;node.js - Google Search&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>This is a pretty simple example for demonstration purposes.  If you’ve never done any kind of Selenium testing before, I recommend you dig a little deeper than where I’ve gone here</p>\n<h2 id=\"Project\"><a href=\"#Project\" class=\"headerlink\" title=\"Project\"></a>Project</h2><p>The completed project is available on GitHub here <a href=\"//github.com/DaveMBush/WebDriverIO-Sample\" title=\"https://github.com/DaveMBush/WebDriverIO-Sample\">https://github.com/DaveMBush/WebDriverIO-Sample</a>    </p>\n<p>Photo credit: <a href=\"//www.flickr.com/photos/smjb/8107539280/\">smjbk</a> via <a href=\"//visualhunt.com\">Visualhunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\">CC BY</a></p>\n",
            "tags": [
                "javascript",
                "bdd",
                "selenium"
            ]
        },
        {
            "id": "http://davembush.github.com/10-reasons-projects-succeed/",
            "url": "http://davembush.github.com/10-reasons-projects-succeed/",
            "title": "10 Reasons Projects Succeed",
            "date_published": "2016-08-09T22:30:00.000Z",
            "content_html": "<p>We’ll get to Reasons Projects Succeed soon, but I need to do some setup work first.</p>\n<p>I’ve been thinking about starting an Open Source project for a while.  The only issue was; I didn’t have an idea for a project that didn’t already exist.  Now I do.  So, I’ve begun the process.</p>\n<p>The issue with starting a project like this is that I would much rather just start coding.  In fact, I would much rather not even make this Open Source.  But making it Open Source has forced me to face project management issues head on.</p>\n<p>I’ve been listening to enough podcast recently to know that putting something up on GitHub isn’t going to make a project Open Source any more than it will make it successful.  Therefor, I’ve decided to start the project as though it had a team of people already working on it.  It is a team of one for now.  But, one thing I’ve learned in life is that having the structure in place to handle a larger team now will not just benefit me in the future, but it will actually help my small little team of me today.</p>\n<p>I’ve started looking at other successful Open Source projects to see what they are doing and to determine what components of what they are doing I want to include in my project.  As I’ve gone through this exercise, the thought occurred to me, “If the organizations I’ve worked for implemented half of what these projects implement, the projects would have been run so much more efficiently and the projects that were in trouble may have avoided the trouble.” <figure><img src=\"/uploads/2016/07/image-5.png\" title=\"10 Reasons Projects Succeed\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/vuhung/8576985602/\">Nguyen Vu Hung (vuhung)</a> via <a href=\"//visualhunt.com\">Visual Hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\">CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Clear-Mission-Statement\"><a href=\"#Clear-Mission-Statement\" class=\"headerlink\" title=\"Clear Mission Statement\"></a>Clear Mission Statement</h2><p>One of the most fundamental items that must exist in any project is a clear sense of what it is you are doing.  If you can’t explain what it is you are building in a couple of sentences, then how will you know when you are done?  How will you know you’ve succeeded? Once you’ve explained the summary, you might also want to go into some detail.  What makes this project different?  What problem does it solve?  What’s the short term vision?  Where might this project end up long term?  If there are other projects like this one, how is this one different? Why would anyone want to contribute to this tool?</p>\n<h2 id=\"Clear-Expectations\"><a href=\"#Clear-Expectations\" class=\"headerlink\" title=\"Clear Expectations\"></a>Clear Expectations</h2><p>The thing that strikes me most about well-run projects is that they set clear expectations for people who will contribute to the project.  Here’s just a few items that are typically covered:</p>\n<ul>\n<li>Where to go if you have questions.  This typically includes email addresses, web sites, and other communication channels.  In a corporate setting you might also include phone numbers.</li>\n<li>How to file a bug request.  Typically, you find this includes a line that says something about “steps to reproduce consistently”</li>\n<li>How to ask for and&#x2F;or add a new feature.  You’ll probably want to include something about making sure the feature gets accepted prior to working on it.</li>\n<li>What constitutes “done” for a pull request.  Tests, documentation, code quality, etc.</li>\n<li>Specific coding rules that need to be followed.  Even better if your style guide is automated in your build process and violations cause the build to fail.</li>\n</ul>\n<h2 id=\"Easy-Development-Environment\"><a href=\"#Easy-Development-Environment\" class=\"headerlink\" title=\"Easy Development Environment\"></a>Easy Development Environment</h2><p>This one drives me crazy.  In just about every organization I go to, setting up my development environment takes a day.  Some places it takes three days.  Simply because I don’t have rights, or the items I need are scatter here and there.</p>\n<p>Why not write the documentation for this, or better yet, take the time to write a script, that walks you through exactly how to get the development environment setup?  Life would be so much easier.</p>\n<p>And for places that already have this, when is the last time you verified that the instructions or script still worked?  Stuff changes and we barely notice until the new guy shows up.</p>\n<h2 id=\"Continuous-Integration-Server\"><a href=\"#Continuous-Integration-Server\" class=\"headerlink\" title=\"Continuous Integration Server\"></a>Continuous Integration Server</h2><p>It sounds crazy in this world, but how many places still don’t have a continuous integration server.  And yet the most successful OS projects do.  Correlation?</p>\n<h2 id=\"Unit-Tests\"><a href=\"#Unit-Tests\" class=\"headerlink\" title=\"Unit Tests\"></a>Unit Tests</h2><p>Testing.  We all hate it.  And here again, the best projects make sure there are test.  I’ve covered testing in multiple places before.  We’ll just leave this at, “You need tests!”</p>\n<h2 id=\"Application-Level-Tests\"><a href=\"#Application-Level-Tests\" class=\"headerlink\" title=\"Application Level Tests\"></a>Application Level Tests</h2><p>And if you are writing an application, you need application level tests.  At least a few to make sure everything works together.</p>\n<h2 id=\"Centralized-Communication\"><a href=\"#Centralized-Communication\" class=\"headerlink\" title=\"Centralized Communication\"></a>Centralized Communication</h2><p>It amazes me how many places still use email as the primary way of communicating.  What’s wrong with that?  Well, people get included who shouldn’t.  Don’t get included that should.  And finding the email when you need it is impossible.  Which version of the email has what you need anyhow? Most projects fail at the communication level.  There are tools for that.</p>\n<h2 id=\"Project-Management-Tools\"><a href=\"#Project-Management-Tools\" class=\"headerlink\" title=\"Project Management Tools\"></a>Project Management Tools</h2><p>Find a project management tool and use it.  Actually, find a project management tool that your team will use and use it.  There is a lot of crap out there.  Don’t let the sales literature pick your tool.  Try the tool.  I’ve finally been introduced to a VERY popular tool where I’m working now.  I can’t believe it is so popular because I’ve used tools that are SO much better.  Better yet, find a useable tool that doesn’t just integrate with other tools, but merges with other tools.  You shouldn’t have to leave GitHub to use your Kanban board, for example.</p>\n<h2 id=\"Swarms-vs-Silos\"><a href=\"#Swarms-vs-Silos\" class=\"headerlink\" title=\"Swarms vs Silos\"></a>Swarms vs Silos</h2><p>Here’s another places that drives me crazy.  Did you ever notice that in an Open Source project, the QA, Documentation and Coding all happen off of GitHub.  But in most organizations, those are all Silos?  What would happen if your QA, Documentation, and Coding people all worked out of the same space in your office.  In our situation, I have no idea if we even have documentation people.  We certainly don’t have QA people working WITH us daily.  And the programmers are even spread all over the place.  And we wonder why nothing gets done and we have communication problems.  We might as well work from home.  At least then there wouldn’t be an illusion that we were working together and we’d rely on collaboration tools more.</p>\n<h2 id=\"Opt-In\"><a href=\"#Opt-In\" class=\"headerlink\" title=\"Opt-In\"></a>Opt-In</h2><p>OK.  This one is going to scare the managers.  But what would happen if the team of programmers where you worked were able to choose what projects they worked on?  I know in some places this wouldn’t work because there is only one project.  But in larger organizations? In most places, you get hired for a gig and then you get assigned to some project.  In some cases, you get hired for one project and assigned to another.   So even the choice you thought you had, you don’t have.</p>\n<p>Here are some advantages to this:</p>\n<ol>\n<li>Poorly run projects would get abandoned.</li>\n<li>Projects with no viable reason would get abandoned.</li>\n<li>Programmers would work on things they enjoyed.</li>\n<li>Product owners would have to contribute.</li>\n</ol>\n",
            "tags": [
                "project management"
            ]
        },
        {
            "id": "http://davembush.github.com/you-can-start-using-node-today/",
            "url": "http://davembush.github.com/you-can-start-using-node-today/",
            "title": "You Can Start Using Node Today",
            "date_published": "2016-08-02T10:30:00.000Z",
            "content_html": "<p>I was just getting started writing an article about using Node&#x2F;JavaScript to drive my Selenium tests and as I was writing the “Prerequisite” section, I realized I have never written the basics about how to get setup with Node or even why you would want to.</p>\n<p>As popular as Node is, I am still finding that many of the people I work with have no idea what it is or if they do, they only have a partial idea and can’t see how it would apply to the work they do on a daily basis.</p>\n<p>So, let’s start with the fundamentals.</p>\n<figure>![](/uploads/2016/07/image-4.png \"You Can Start Using Node Today\")<figcaption>Photo credit: [stevendepolo](//www.flickr.com/photos/stevendepolo/5749192025/) via [VisualHunt.com](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"What-is-Node\"><a href=\"#What-is-Node\" class=\"headerlink\" title=\"What is Node?\"></a>What is Node?</h2><p>I think the best place to start with our introduction is by providing a comprehensive view of what Node is.  A rather simplistic description would be, “Node is the V8 JavaScript engine from the Chrome browser, wrapped in an executable, that lets you run JavaScript without a browser.” Now, with that simplistic definition, you might think, “Why would I want to do that?”  Maybe you are assuming that this implementation only lets you do the same stuff that you can do in the browser.  And this is where you would be wrong.</p>\n<p>So, let’s start over.</p>\n<p>Node allows you to write cross platform applications that will run directly on your computer using JavaScript as the language.</p>\n<p>And now I hear everyone thinking, “Yeah, yeah, that was the promise of Java.” OK.  Maybe that’s true.  Time will tell.</p>\n<h2 id=\"What-Can-You-Do-with-Node\"><a href=\"#What-Can-You-Do-with-Node\" class=\"headerlink\" title=\"What Can You Do with Node?\"></a>What Can You Do with Node?</h2><p>Several well-known applications use Node.  You may be surprised at how much node is already being used.  Here’s a short list:</p>\n<ul>\n<li>Many Web Servers</li>\n<li>Desktop Applications</li>\n<li>Developer Build Processes</li>\n</ul>\n<p>Does any of that surprise you? There is a <a href=\"//github.com/nodejs/node/wiki/Projects,-Applications,-and-Companies-Using-Node\">long list of companies</a> who are using Node for some part of their development process or infrastructure.  Some more notable implementations include:</p>\n<ul>\n<li>VS Code by Microsoft – a code editor built using Node and Electron.</li>\n<li>Slack Desktop App – uses Node and Electron</li>\n</ul>\n<p>In short, you can do just about anything you can think of.</p>\n<h2 id=\"Installing-Node\"><a href=\"#Installing-Node\" class=\"headerlink\" title=\"Installing Node\"></a>Installing Node</h2><p>This falls under the category of “Things I wish I had known.” You can just go to the <a href=\"//nodejs.org/en/\">Node site</a> and download the version you want to use.  But at some point, you are going to want to use multiple versions of Node.  One version for one project and a different version for some other project.  For that, you are going to need a tool called ‘NVM’.  Life will be a lot easier if you just install NVM first and then install Node from there.</p>\n<p>If you are running Windows, you’ll want to <a href=\"//github.com/coreybutler/nvm-windows/releases\">grab NVM from here</a>.  Everyone else can <a href=\"//github.com/creationix/nvm\">get NVM from here</a>. Once you have NVM installed, you should be able to run <code>nvm install _version.number.here_</code> or you can run <code>nvm install node</code> To install the latest version.</p>\n<p>You can run this command for each version you want to have installed.</p>\n<p>To see which versions are installed, you can run <code>nvm ls</code> And to use a specific version you can run <code>nvm use _version.number.here_</code></p>\n<h2 id=\"Using-the-Node-Package-Manager\"><a href=\"#Using-the-Node-Package-Manager\" class=\"headerlink\" title=\"Using the Node Package Manager\"></a>Using the Node Package Manager</h2><p>When you installed Node, you also installed the Node Package Manager(NPM).  For those of you who are coming from the Microsoft world, NPM is like NuGet.  It is how we install additional “Modules” (think libraries) into our Node environment.</p>\n<p>The commands for NPM are pretty straight forward and most of the time, the documentation will tell you exactly what command to run to get it into your development environment.  But, it is helpful to know why you are running the various commands.</p>\n<p>But, before you start installing Node packages into your development environment, you are going to want a package.json file.  The easiest way to create this in a form that NPM can use is to use the command <code>npm init</code> which will walk you through all of the questions you need to answer to create a proper package.json file.</p>\n<p>The next command you are going to encounter is <code>npm install</code>.</p>\n<p>But <code>npm install</code> has several switches that you’ll be using.  Each with a different purpose.</p>\n<p><code>npm install _packagename_</code></p>\n<p>This will install the most recent version of the package into your node_modules directory and record the dependency in your package.json file in the dependencies section.</p>\n<p>If you want to be explicit about where you are saving the file you can use the <code>--save</code> flag.  It does the same thing as <code>npm install package</code>.</p>\n<p><code>npm install --save _packagename_</code></p>\n<p>Your other option for saving is</p>\n<p><code>--save-dev</code>.</p>\n<p>This puts the dependency in the devDependencies section.</p>\n<p>You might wonder why you would have two different dependency sections.</p>\n<p>The reason for this is because you might have modules that you need simply to build the project. They aren’t needed when you deploy the project. So having the two different sections allows you to deploy without the extra set of modules.</p>\n<h2 id=\"Node-JavaScript\"><a href=\"#Node-JavaScript\" class=\"headerlink\" title=\"Node JavaScript\"></a>Node JavaScript</h2><p>I once had someone assert that even within the same versions of JavaScript, there are different versions of JavaScript.  His main point was that there are differences between JavaScript on the browser and JavaScript in Node.  I assert, they are the same version of JavaScript, but the API that is available, or required, is different based on the environment.</p>\n<p>So, JavaScript on Node is syntactically no different from the JavaScript you write now.  However, Node does solve an age old problem we’ve had in client side code automatically. This problem is global scope pollution. If we write JavaScript that looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Without wrapping the code in a function, the code will end up in global scope.</p>\n<p>The fix for this is to wrap all of our files in immediately invoked function expressions (IIFEs).  I’ve written about using IIFEs before as a best practice for Angular programming.  In fact, it is a best practice for all client side JavaScript programming.</p>\n<p>But, in Node it is completely unnecessary because Node puts each file in its own scope.  Putting something on the global scope is something you have to do intentionally.  This is good, but it does require us to write some extra code.</p>\n<p>You see, the problem is, if all of the code we write is only local to the file we write it in, how are we going to be able to write code in a modular fashion?  We don’t want all of our code in one monolithic file.</p>\n<h2 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h2><p>So, to handle this problem, Node implements two keywords&#x2F;functions&#x2F;variables (depends on how you think about it) We’ll just call them keywords for now.</p>\n<p>The first is the requires() keyword.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fooScript&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>This says go find the script “fooScript.js” and assign what was exported from it to our “foo” variable.  If the file you need to require has been installed with NPM, then all you need is the name of the module, like I did above.  But if you are requiring in a file from your own code, you’ll need to require using a path reference.  For you Windows people, this always works using forward slashes (&#x2F;) not backslash (\\).</p>\n<p>This probably leaves you asking the question, how does fooScript expose its content to the module requiring it? With code that looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = fooFunc;</span><br></pre></td></tr></table></figure>\n\n<p>This line normally appears at the end of a file.  In the case of the line above, assume that fooFunc is a function that is defined somewhere above the module.exports line. You could also write the exports using:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exports</span> = fooFunc;</span><br></pre></td></tr></table></figure>\n\n<p>They do the same thing.</p>\n<p>If our fooFunc is in a file named “fooScript.js” then our foo variable above can call the fooFunc() function by using foo.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = require(&#x27;fooScript&#x27;);</span><br><span class=\"line\">foo(); // this line calls fooFunc() in fooScript.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Optimizations\"><a href=\"#Optimizations\" class=\"headerlink\" title=\"Optimizations\"></a>Optimizations</h2><p>What took me a while to grasp is that you can export anything.  A function, a variable, an object.  It really doesn’t matter.  But you have to be aware of some optimizations that Node makes for you.</p>\n<p>You see, it would be pretty stupid to process the file every time it was required into another file.  So rather than do that, Node caches the export and assigns that the next time it is required.  If you export an object, the next time you require it, you will get the same object.  So an exported object becomes a singleton.  If you want to be able to create new objects, you are better off exporting the function (or class in ES2015) that creates the object and new-ing it up when you need it.</p>\n<h2 id=\"Your-Turn\"><a href=\"#Your-Turn\" class=\"headerlink\" title=\"Your Turn\"></a>Your Turn</h2><p>So, now it is your turn.  If you have not tried using Node.js install it and try a few things.</p>\n",
            "tags": [
                "javascript",
                "node",
                "npm",
                "nvm"
            ]
        },
        {
            "id": "http://davembush.github.com/4-reasons-to-drop-mvvm/",
            "url": "http://davembush.github.com/4-reasons-to-drop-mvvm/",
            "title": "4 Reasons To Drop MVVM",
            "date_published": "2016-07-27T10:30:00.000Z",
            "content_html": "<p>The MVVM design pattern has been around for quite a while now.  It has a lot of strengths when done correctly.</p>\n<p>But, I believe the time has come to recognize that MVVM has a lot of shortcomings that point to its demise.  Since I primarily develop web applications, I will keep this discussion centered on the use of MVVM in web applications.  The use of MVVM for desktop may or may not have these same issues.</p>\n<p>I realize that for some of you, the very suggestion of dropping MVVM will invoke a negative emotional response.  Some very smart people have quit their job at the suggestion that MVVM and its close cousin two-way data-binding, be abandoned in favor of another way.  But just for a few minutes, I would like for you to stop treating programming as a religion and consider the possibility that there may be a better way.</p>\n<p><img src=\"/uploads/2016/07/image-2.png\" alt=\"image\" title=\"image\"></p>\n<h2 id=\"History-of-MVVM\"><a href=\"#History-of-MVVM\" class=\"headerlink\" title=\"History of MVVM\"></a>History of MVVM</h2><p>MVVM was originally created by John Gossman to support the XAML syntax used to create Windows™ desktop applications and Silver Light applications.  Its main advantage has always been that it provides an easy way to decouple the View code from any business logic that might need to run.  Because of this decoupling, our applications become much easier to unit test.</p>\n<p>The next major implementation of MVVM that I can remember is <a href=\"//knockoutjs.com/\">Knockout</a>.  It is the knockout framework that introduced me to MVVM and I have to say it is also the only one I feel like actually got it right.  By that I mean that it actually did what it was advertised to do.  Maybe that’s because of all the implementations I’ve used, Knockout is the only one that ONLY implemented MVVM rather than making it part of a larger framework.</p>\n<h2 id=\"Definition-of-MVVM\"><a href=\"#Definition-of-MVVM\" class=\"headerlink\" title=\"Definition of MVVM\"></a>Definition of MVVM</h2><p>I’ve written about MVVM before where I’ve explained more completely what MVVM is.  But just so we have a working definition of what I mean when I talk about MVVM, let’s define it this way.</p>\n<p>MVVM is a design pattern that uses two-way data-binding to get data in and out of the presentation layer, referred to as the View, without the programmer needing to do any more than specifying that this should happen in the view.  MVVM is also able to have data elements and functions in the “ViewModel” track changes so that anything that is dependent on other data is automatically recalculated without the programmer having to write a lot of code to make this happen.  This creates a model that is able to respond to events in the view, but is primarily data centric rather than event centric has we have often reasoned about our applications in the past.</p>\n<p>It sounds great.  And when it works it is.  But that’s the main problem, it hardly ever works well.</p>\n<h2 id=\"MVVM-Done-Right-is-Slow\"><a href=\"#MVVM-Done-Right-is-Slow\" class=\"headerlink\" title=\"MVVM Done Right is Slow\"></a>MVVM Done Right is Slow</h2><p>If you’ve had any experience or paid any attention to the implementation of MVVM using JavaScript, you will realize that the number one problem with MVVM is that it is a memory hog and performs poorly for all but the most trivial of applications.  In fact, for all of the popularity of Angular JS, the biggest complaint has been around the implementation of the data-binding.  In a large application, you might need to loop through the data multiple times to make sure it has all recalculated correctly.  If you just use the framework and let the framework deal with your sloppy code, this can make the system incredibly slow.  If you actually pay attention to what you are doing, it takes longer to implement than if you had chosen some other design pattern.</p>\n<p>But doing that means we have not moved on to…</p>\n<h2 id=\"MVVM-is-Hard-to-Implement\"><a href=\"#MVVM-is-Hard-to-Implement\" class=\"headerlink\" title=\"MVVM is Hard to Implement\"></a>MVVM is Hard to Implement</h2><p>Recognizing that looping through the data until it stabilizes may not be a good idea, the framework designers have developed rules such as, “We’ll only run the digest cycle once.”  and “We’ll only run it when some user interaction has occurred.”  Well, OK.  That sounds good.  At least now it will be obvious that I have a problem.  But this is where the trouble begins.  If I can’t rely on my data, and ultimately my view, responding to changes in my data correctly, I am left with having to only partially implementing MVVM so that I can work around these limitations and using other means to make sure my view is updated correctly.</p>\n<p>This is to say nothing of many frameworks just not working as you would expect them to.</p>\n<h2 id=\"MVVM-is-Hard-to-Reason-About\"><a href=\"#MVVM-is-Hard-to-Reason-About\" class=\"headerlink\" title=\"MVVM is Hard to Reason About\"></a>MVVM is Hard to Reason About</h2><p>Again, in all but the most trivial of applications, and because of the optimizations that various frameworks have tried to implement, MVVM becomes difficult to implement.  As I’ve tried to explain MVVM to others and even as I’ve tried to implement it myself, I’ve found that the simple act of keeping the view stuff in the view layer and the data stuff in the data layer and making sure it all updates appropriately has me, at times tearing my hair out.  Many times this is caused by incomplete implementations.  But if being hard to implement means it is hard to reason about, maybe we shouldn’t be using it to begin with.</p>\n<h2 id=\"MVVM-is-Overkill\"><a href=\"#MVVM-is-Overkill\" class=\"headerlink\" title=\"MVVM is Overkill\"></a>MVVM is Overkill</h2><p>But it does work sometimes.  In really simple CRUD applications, it works great.  None of the problems I’ve mentioned.  And this is the great seduction of MVVM.  You try it on some small application and you get excited.  Like a gateway drug, it lures you in.  And when you finally go to implement it on some larger application, you find out that it really doesn’t scale all that well.  And on that small app you tried it on, couldn’t you have done that just as easily using another design pattern?</p>\n<h2 id=\"Where-to-Go-from-Here\"><a href=\"#Where-to-Go-from-Here\" class=\"headerlink\" title=\"Where to Go from Here\"></a>Where to Go from Here</h2><p>As I was reviewing these arguments with a co-worker this week, he asked, “Are you saying we shouldn’t be using MVVM?”  And my answer might surprise you.</p>\n<p>I said, “Given the two models we have to work within the framework we are currently using, MVVM is the best choice.” However, what we might want to consider is moving to another framework that provides a better design pattern.  There are several “One-way” design patterns that intrigue me.  The first is the basic Flux pattern that React tends to use.  Done correctly, this uses events to achieve the decoupling we all should be striving for.  At its core, it is basic MVC.</p>\n<p>The second one, which is very flux like, is RxJS.  I’m still wrapping my head around how I to use it in an application and honestly don’t know enough about it at this point to say any more than that it looks interesting.</p>\n<p>And even if we decided to move away from MVVM, I think using two way data-binding between the view and the ViewModel is good.  I just think the ViewModel shouldn’t try to re-compute the values as part of what it does.</p>\n<p>Leave that to the developer to control.  The problem is, trying to get existing systems that implement two-way data-binding to only work at that level would not work correctly.  </p>\n<h3 id=\"Other-places-talking-about-MVVM\"><a href=\"#Other-places-talking-about-MVVM\" class=\"headerlink\" title=\"Other places talking about MVVM\"></a>Other places talking about MVVM</h3><ul>\n<li><a href=\"//blogs.msdn.microsoft.com/johngossman/2006/03/04/advantages-and-disadvantages-of-m-v-vm/\">The Advantages and Disadvantages of MVVM</a> (by John Gossman himself!)</li>\n</ul>\n",
            "tags": [
                "javascript",
                "mvvm"
            ]
        },
        {
            "id": "http://davembush.github.com/test-driven-development-kata-roman-to-arabic-in-javascript/",
            "url": "http://davembush.github.com/test-driven-development-kata-roman-to-arabic-in-javascript/",
            "title": "Test Driven Development Kata - Roman to Arabic in JavaScript",
            "date_published": "2016-07-20T10:30:00.000Z",
            "content_html": "<p>Coding Katas are a way of developing your skills as a programmer.  I thought it might be informative to tackle one of the classics as a blog post. Depending on how this works, I may or may not do another one quite so publicly. The rules I’m going to try to adhere by.</p>\n<ol>\n<li>I will document what I am doing as I go.</li>\n<li>This is not a pre-coded blog post.  You’ll get to “see” me code as I go.</li>\n<li>I will write all tests first.</li>\n<li>I will only write enough code to make the current tests succeed.</li>\n</ol>\n<p>  <img src=\"/uploads/2016/07/image-3.png\" alt=\"Test Driven Kata - Roman to Arabic\" title=\"Test Driven Kata - Roman to Arabic\"></p>\n<h2 id=\"Today’s-problem\"><a href=\"#Today’s-problem\" class=\"headerlink\" title=\"Today’s problem:\"></a>Today’s problem:</h2><p>This is a pretty classic coding problem that shows up in interviews, home-work assignments, and code katas.</p>\n<p>As an interview problem, I find it lacking because it typically does not represent the kind of work you will be doing other than proving that you can solve problems in your chosen language.  It is also a standard coding problem, meaning the person interviewing you is using the most obvious problem to see if you can code.  Much like asking “What is your greatest strength?” and “What is your greatest weakness?”  Finally, it takes longer to complete than I believe interview coding problems should.  This is not to say, I don’t jump through these hoops myself.</p>\n<p>As a kata exercise, it is good because there are several ways you might solve the problem.  And for our purposes, it also demonstrates what Test Driven Development might look like using JavaScript.</p>\n<p>So, what is the problem? Write a function that converts Roman numbers into Arabic numbers and throws an error if the Roman number is in an invalid form.</p>\n<p>That sounds pretty easy.  But the first question we need to ask is, “What, exactly are the rules for converting Roman numbers into Arabic numbers?”</p>\n<ol>\n<li>The values for Roman numbers are as follows:</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Roman</th>\n<th align=\"center\">Arabic</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">I</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">V</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td align=\"center\">X</td>\n<td align=\"center\">10</td>\n</tr>\n<tr>\n<td align=\"center\">L</td>\n<td align=\"center\">50</td>\n</tr>\n<tr>\n<td align=\"center\">C</td>\n<td align=\"center\">100</td>\n</tr>\n<tr>\n<td align=\"center\">D</td>\n<td align=\"center\">500</td>\n</tr>\n<tr>\n<td align=\"center\">M</td>\n<td align=\"center\">1000</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li>Repeating a number up to three times adds that value three times.</li>\n<li>A Roman ‘digit’ can’t repeat more than three times.  Instead the previous 1, 10, or 100 equivalent value is used to subtract from the next ‘digit’.  That is,</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Roman</th>\n<th align=\"center\">Arabic</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">IV</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">IX</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td align=\"center\">XL</td>\n<td align=\"center\">40</td>\n</tr>\n<tr>\n<td align=\"center\">XC</td>\n<td align=\"center\">90</td>\n</tr>\n<tr>\n<td align=\"center\">CD</td>\n<td align=\"center\">400</td>\n</tr>\n<tr>\n<td align=\"center\">CM</td>\n<td align=\"center\">900</td>\n</tr>\n</tbody></table>\n<ol start=\"4\">\n<li>With the exception of the subtraction rule above, all values must decrease in scale from left to right and are added together.</li>\n</ol>\n<h2 id=\"Test-1\"><a href=\"#Test-1\" class=\"headerlink\" title=\"Test 1\"></a>Test 1</h2><p>Since we will be using JavaScript, the testing framework we will be using is Jasmine.</p>\n<p>Our first test will simply test that when we pass in “I” we get back 1.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;tests/roman-to-arabic/RomanToArabic.spec.js&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue;</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When I is passed in&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&quot;I&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And the code that passes this test is:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">romanToArabic</span>(<span class=\"params\">romanNumber</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You might think, what’s the point?  Why just return 1 when you know you are going to have to do more?  Well, when you are doing TDD, you have to work off of what you are testing for now, not what you might test for later.  So, we return 1.</p>\n<h2 id=\"Test-2\"><a href=\"#Test-2\" class=\"headerlink\" title=\"Test 2\"></a>Test 2</h2><p>From here, we can go a couple of different directions.  How about testing for rule 3 next.  How would we do that? To start with, we might just make sure that if we pass in IV, we get back 4.  Now our code is getting a bit more complicated.  But sticking with our TDD principles, we’ll just test for IV.  Another happy path test.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;tests/roman-to-arabic/RomanToArabic.spec.js&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue;</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When I is passed in&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&quot;I&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When IV is passed in&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&quot;IV&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 4&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And the code that implements it:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">romanToArabic</span>(<span class=\"params\">romanNumber</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(romanNumber)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;I&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;IV&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Test-3\"><a href=\"#Test-3\" class=\"headerlink\" title=\"Test 3\"></a>Test 3</h2><p>OK.  What happens if IV shows up twice?  That should be a failure.  IV should never show up more than once.  In fact, none of the codes that show up in rule three should show up more than once.  Let’s make sure they don’t.</p>\n<p>The tests for this will be pretty simple, and to save time, we will code for all of them at once.  In fact, we are going to eventually need the conversion tables above, so let’s go ahead and put them in now.</p>\n<p>Here is what our test file looks like now.  Notice that we’ve put several tests in at once.</p>\n<p>Notice that I didn’t have to write multiple tests to do this.  I just created one test and iterated over it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;tests/roman-to-arabic/RomanToArabic.spec.js&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When I is passed in&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;I&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When IV is passed in&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;IV&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 4&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And the solution also iterates.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">romanToArabic</span>(<span class=\"params\">romanNumber</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This block is probably inefficient, but it is</span></span><br><span class=\"line\">    <span class=\"comment\">// easy to reason about.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">           <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rx = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(prop,<span class=\"string\">&#x27;g&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((romanNumber.<span class=\"title function_\">match</span>(rx) || []).<span class=\"property\">length</span> &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;Poorly formed Roman number!&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(romanNumber)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;I&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;IV&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Test-4\"><a href=\"#Test-4\" class=\"headerlink\" title=\"Test 4\"></a>Test 4</h2><p>Just to make sure we aren’t counting how many times in a row this all shows up, let’s add a valid Roman Number in between.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;tests/roman-to-arabic/RomanToArabic.spec.js&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When I is passed in&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;I&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When IV is passed in&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;IV&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 4&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27;I&#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy + <span class=\"string\">&#x27;I&#x27;</span> + propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Test-5\"><a href=\"#Test-5\" class=\"headerlink\" title=\"Test 5\"></a>Test 5</h2><p>Next, we need to make sure that none of the items in our base table show up more than 3 times.  We’ll write a similar test to what we’ve already written with a twist.  If any of those numerals show up more than 4 times, we know we have a problem either because they are out of order or because they show up all in a row.  So, we only need to check the count.  If there are four of any of them, we have a problem.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;tests/roman-to-arabic/RomanToArabic.spec.js&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When I is passed in&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;I&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When IV is passed in&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;IV&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 4&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27;I&#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy + <span class=\"string\">&#x27;I&#x27;</span> + propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> baseTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!baseTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy+propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And the code to implement it.function romanToArabic(romanNumber){<br>    var minusOneTable &#x3D; {<br>        IV: 4,<br>        IX: 9,<br>        XL: 40,<br>        XC: 90,<br>        CD: 400,<br>        CM: 900<br>    };<br>    var baseTable &#x3D; {<br>        I: 1,<br>        V: 5,<br>        X: 10,<br>        L: 50,<br>        C: 100,<br>        D: 500,<br>        M: 1000<br>    };</p>\n<pre><code>// This block is probably inefficient, but it is\n// easy to reason about.\nfor(var prop in minusOneTable)&#123;\n    if(!minusOneTable.hasOwnProperty(prop))&#123;\n       continue;\n    &#125;\n    var rx = new RegExp(prop,&#39;g&#39;);\n    if((romanNumber.match(rx) || []).length &gt; 1)&#123;\n        throw &#39;Poorly formed Roman number!&#39;;\n    &#125;\n\n&#125;\nfor(var prop in baseTable)&#123;\n    if(!baseTable.hasOwnProperty(prop))&#123;\n        continue;\n    &#125;\n    var rx = new RegExp(prop,&#39;g&#39;);\n    if((romanNumber.match(rx) || []).length &gt; 3)&#123;\n        throw &#39;Poorly formed Roman number!&#39;;\n    &#125;\n\n&#125;\n\nswitch(romanNumber)&#123;\n    case &#39;I&#39;:\n        return 1;\n    case &#39;IV&#39;:\n        return 4;\n&#125;\n</code></pre>\n<p>}</p>\n<h2 id=\"Test-6\"><a href=\"#Test-6\" class=\"headerlink\" title=\"Test 6\"></a>Test 6</h2><p>So, before we move on to actually computing the value of the Roman number, we should ask ourselves if there are any other ways a Roman number could be passed in incorrectly.</p>\n<p>The next one that occurs to me is this.  If you have a number that contains a ‘digit’ from the minusOneTable, the character that is used to subtract should never follow the digit.  For example, if “IV” shows up, there should not be an “I” immediately after it.  That is, we shouldn’t see “IVI” anywhere in our string.  So let’s add that to our tests.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;tests/roman-to-arabic/RomanToArabic.spec.js&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When I is passed in&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;I&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When IV is passed in&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;IV&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 4&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27;I&#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy + <span class=\"string\">&#x27;I&#x27;</span> + propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> baseTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!baseTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy+propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newProp = prop + prop.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + newProp + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,newProp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And the code to implement it:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">romanToArabic</span>(<span class=\"params\">romanNumber</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This block is probably inefficient, but it is</span></span><br><span class=\"line\">    <span class=\"comment\">// easy to reason about.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rx;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">           <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rx = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(prop,<span class=\"string\">&#x27;g&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((romanNumber.<span class=\"title function_\">match</span>(rx) || []).<span class=\"property\">length</span> &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;Poorly formed Roman number!&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rx = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(prop + prop.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>),<span class=\"string\">&#x27;g&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((romanNumber.<span class=\"title function_\">match</span>(rx) || []).<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;Poorly formed Roman number&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> baseTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!baseTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rx = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(prop,<span class=\"string\">&#x27;g&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((romanNumber.<span class=\"title function_\">match</span>(rx) || []).<span class=\"property\">length</span> &gt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;Poorly formed Roman number!&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(romanNumber)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;I&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;IV&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-7\"><a href=\"#Step-7\" class=\"headerlink\" title=\"Step 7\"></a>Step 7</h2><p>There is one more possible problem we could encounter.  What if someone passes in a character that isn’t a valid Roman number character.  We need to make sure that the only characters that show up are Roman number characters.</p>\n<p>Since testing for all of the characters isn’t practical, we are just going to test for a few and assume that if this were a real business problem we’d go to the trouble of testing more.  But, the basic test is going to look the same.  Toss in bad characters in an otherwise valid string and make sure we throw an error.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;tests/roman-to-arabic/RomanToArabic.spec.js&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When I is passed in&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;I&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When IV is passed in&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;IV&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 4&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27;I&#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy + <span class=\"string\">&#x27;I&#x27;</span> + propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> baseTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!baseTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy+propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newProp = prop + prop.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + newProp + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,newProp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// just test for one each of upper case, lower case, number and lower case valid character</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> invalidCharacters = &#123;<span class=\"attr\">A</span>:<span class=\"number\">1</span>,<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;2&#x27;</span>: <span class=\"number\">1</span>, <span class=\"attr\">i</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> invalidCharacters)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!invalidCharacters.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And the solution, which is pretty simple:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">romanToArabic</span>(<span class=\"params\">romanNumber</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This block is probably inefficient, but it is</span></span><br><span class=\"line\">    <span class=\"comment\">// easy to reason about.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rx;</span><br><span class=\"line\">    <span class=\"comment\">// make sure minusOne only shows up once</span></span><br><span class=\"line\">    <span class=\"comment\">// and first character isn&#x27;t also the last character. (IVI for example)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">           <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rx = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(prop,<span class=\"string\">&#x27;g&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((romanNumber.<span class=\"title function_\">match</span>(rx) || []).<span class=\"property\">length</span> &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;Poorly formed Roman number!&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rx = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(prop + prop.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>),<span class=\"string\">&#x27;g&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((romanNumber.<span class=\"title function_\">match</span>(rx) || []).<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;Poorly formed Roman number&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> included = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// make sure digits only show up 3 times</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> baseTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!baseTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        included += prop;</span><br><span class=\"line\">        rx = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(prop,<span class=\"string\">&#x27;g&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((romanNumber.<span class=\"title function_\">match</span>(rx) || []).<span class=\"property\">length</span> &gt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;Poorly formed Roman number!&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// make sure only I, V, X, L, C and D are the only characters that show up</span></span><br><span class=\"line\">    rx = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;[^&#x27;</span> + included + <span class=\"string\">&#x27;]&#x27;</span>,<span class=\"string\">&#x27;g&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((romanNumber.<span class=\"title function_\">match</span>(rx) || []).<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;Poorly formed Roman number&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(romanNumber)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;I&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;IV&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-8\"><a href=\"#Step-8\" class=\"headerlink\" title=\"Step 8\"></a>Step 8</h2><p>OK. I think that gets all of the validations except for ensuring that the numbers show up in numerical order.  To make this work, we are going to need to work through the array and assign each digit a value.  The test we need to write is going to put values in the wrong order.</p>\n<p>Our test will put the next value up after the value.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;tests/roman-to-arabic/RomanToArabic.spec.js&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When I is passed in&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;I&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When IV is passed in&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;IV&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 4&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27;I&#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy + <span class=\"string\">&#x27;I&#x27;</span> + propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> baseTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!baseTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy+propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newProp = prop + prop.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + newProp + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,newProp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// just test for one each of upper case, lower case, number and lower case valid character</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> invalidCharacters = &#123;<span class=\"attr\">A</span>:<span class=\"number\">1</span>,<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;2&#x27;</span>: <span class=\"number\">1</span>, <span class=\"attr\">i</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> invalidCharacters)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!invalidCharacters.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> badOrderPairs = &#123;<span class=\"attr\">DM</span>: <span class=\"number\">1</span>, <span class=\"attr\">LC</span>: <span class=\"number\">1</span>, <span class=\"attr\">VX</span>: <span class=\"number\">1</span>, <span class=\"attr\">IXXL</span>: <span class=\"number\">1</span>, <span class=\"attr\">IXM</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> badOrderPairs)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!badOrderPairs.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And the solution will put them in order and add them along the way.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">romanToArabic</span>(<span class=\"params\">romanNumber</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneSub = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"string\">&#x27;v&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"string\">&#x27;x&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"string\">&#x27;l&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"string\">&#x27;c&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"string\">&#x27;d&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"string\">&#x27;m&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> compositeValueTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">v</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">x</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">l</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">c</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">d</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">m</span>: <span class=\"number\">900</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This block is probably inefficient, but it is</span></span><br><span class=\"line\">    <span class=\"comment\">// easy to reason about.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rx;</span><br><span class=\"line\">    <span class=\"comment\">// make sure minusOne only shows up once</span></span><br><span class=\"line\">    <span class=\"comment\">// and first character isn&#x27;t also the last character. (IVI for example)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">           <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rx = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(prop,<span class=\"string\">&#x27;g&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((romanNumber.<span class=\"title function_\">match</span>(rx) || []).<span class=\"property\">length</span> &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;Poorly formed Roman number!&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rx = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(prop + prop.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>),<span class=\"string\">&#x27;g&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((romanNumber.<span class=\"title function_\">match</span>(rx) || []).<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;Poorly formed Roman number&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> included = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// make sure digits only show up 3 times</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> baseTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!baseTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        included += prop;</span><br><span class=\"line\">        rx = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(prop,<span class=\"string\">&#x27;g&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((romanNumber.<span class=\"title function_\">match</span>(rx) || []).<span class=\"property\">length</span> &gt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;Poorly formed Roman number!&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// make sure only I, V, X, L, C and D are the only characters that show up</span></span><br><span class=\"line\">    rx = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;[^&#x27;</span> + included + <span class=\"string\">&#x27;]&#x27;</span>,<span class=\"string\">&#x27;g&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((romanNumber.<span class=\"title function_\">match</span>(rx) || []).<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;Poorly formed Roman number&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// substitute the minusOnes with tokens we can use to compute value.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rx = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(prop,<span class=\"string\">&#x27;g&#x27;</span>);</span><br><span class=\"line\">        romanNumber = romanNumber.<span class=\"title function_\">replace</span>(rx,minusOneSub[prop]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> romanNumberArray = romanNumber.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> numberIndex = <span class=\"number\">0</span>;numberIndex &lt; romanNumberArray.<span class=\"property\">length</span>;numberIndex++)&#123;</span><br><span class=\"line\">        currentValue = compositeValueTable[romanNumberArray[numberIndex]];</span><br><span class=\"line\">        returnValue += currentValue;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numberIndex &gt; <span class=\"number\">0</span> &amp;&amp; currentValue &gt; lastValue)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;Poorly formed Roman number&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        lastValue = currentValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// switch(romanNumber)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     case &#x27;I&#x27;:</span></span><br><span class=\"line\">    <span class=\"comment\">//         return 1;</span></span><br><span class=\"line\">    <span class=\"comment\">//     case &#x27;IV&#x27;:</span></span><br><span class=\"line\">    <span class=\"comment\">//         return 4;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-9\"><a href=\"#Step-9\" class=\"headerlink\" title=\"Step 9\"></a>Step 9</h2><p>And finally we add some test to verify that we get the right result.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;tests/roman-to-arabic/RomanToArabic.spec.js&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When I is passed in&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;I&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When IV is passed in&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;IV&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 4&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27;I&#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy + <span class=\"string\">&#x27;I&#x27;</span> + propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> baseTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!baseTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy+propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newProp = prop + prop.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + newProp + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,newProp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// just test for one each of upper case, lower case, number and lower case valid character</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> invalidCharacters = &#123;<span class=\"attr\">A</span>:<span class=\"number\">1</span>,<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;2&#x27;</span>: <span class=\"number\">1</span>, <span class=\"attr\">i</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> invalidCharacters)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!invalidCharacters.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> badOrderPairs = &#123;<span class=\"attr\">DM</span>: <span class=\"number\">1</span>, <span class=\"attr\">LC</span>: <span class=\"number\">1</span>, <span class=\"attr\">VX</span>: <span class=\"number\">1</span>, <span class=\"attr\">IXXL</span>: <span class=\"number\">1</span>, <span class=\"attr\">IXM</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> badOrderPairs)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!badOrderPairs.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> romanNumbers = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">II</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">III</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">VI</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">        <span class=\"attr\">VII</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">        <span class=\"attr\">VIII</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">XI</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\">        <span class=\"attr\">XII</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIII</span>: <span class=\"number\">13</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIV</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">        <span class=\"attr\">XV</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVI</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVII</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVIII</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIX</span>: <span class=\"number\">19</span>,</span><br><span class=\"line\">        <span class=\"attr\">XX</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXI</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXII</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIII</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIV</span>: <span class=\"number\">24</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXV</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVI</span>: <span class=\"number\">26</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVII</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVIII</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIX</span>: <span class=\"number\">29</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXX</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLIV</span>: <span class=\"number\">44</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLV</span>: <span class=\"number\">45</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLVI</span>: <span class=\"number\">46</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">LIV</span>: <span class=\"number\">54</span>,</span><br><span class=\"line\">        <span class=\"attr\">LV</span>: <span class=\"number\">55</span>,</span><br><span class=\"line\">        <span class=\"attr\">LVI</span>: <span class=\"number\">56</span>,</span><br><span class=\"line\">        <span class=\"attr\">LX</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">CI</span>: <span class=\"number\">101</span>,</span><br><span class=\"line\">        <span class=\"attr\">CXI</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">        <span class=\"attr\">CMXCIX</span>: <span class=\"number\">999</span>,</span><br><span class=\"line\">        <span class=\"attr\">MDCLXVI</span>: <span class=\"number\">1666</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> romanNumbers)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!romanNumbers.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                returnValue = <span class=\"title function_\">romanToArabic</span>(propCopy);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return &#x27;</span> + romanNumbers[propCopy] ,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(romanNumbers[propCopy]);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p>What?! I thought we were done? Well, we are and we aren’t.  We have code that works.  But is it the best code we can write? Here is what I like about this code:</p>\n<ol>\n<li>It is easy to reason about.</li>\n<li>It allows me to add additional roman numbers by expanding my tables.  No additional code would be needed. (And while it is hard to represent using Arabic letters, there are additional symbols.)</li>\n<li>It works reasonably fast.</li>\n</ol>\n<p>But, it does seem to me that we might make it a bit more efficient without sacrificing these advantages too much.  And the great news is, since we have our test in place, we can refactor with impunity.  No worries about breaking something because we will know as soon as we have and we can revert back to the code that was working.</p>\n<h2 id=\"Step-12\"><a href=\"#Step-12\" class=\"headerlink\" title=\"Step 12\"></a>Step 12</h2><p>One pretty simple change we can make is that our error message is scattered throughout our code.  Let’s make that a variable and just throw the variable.</p>\n<p>The other thing I wonder about is how much of our validations can be combined? One check we might safely eliminate at this point is the check to make sure the minus values only show up once.  If any of them were to show up more than once, they would either show up one after the other, which we still can check for, or they would be in the wrong value order which our final check will catch.  So, let’s eliminate that code as well and re-run our tests to make sure nothing broke.</p>\n<p>And now that we’ve eliminated that check, we can create one big string for checking conditions like “IVI” into one string and check it once instead of creating a new RegExp object multiple times.</p>\n<p>Here is the code we have so far:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;tests/roman-to-arabic/RomanToArabic.spec.js&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When I is passed in&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;I&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When IV is passed in&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;IV&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 4&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27;I&#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy + <span class=\"string\">&#x27;I&#x27;</span> + propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> baseTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!baseTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy+propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newProp = prop + prop.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + newProp + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,newProp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// just test for one each of upper case, lower case, number and lower case valid character</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> invalidCharacters = &#123;<span class=\"attr\">A</span>:<span class=\"number\">1</span>,<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;2&#x27;</span>: <span class=\"number\">1</span>, <span class=\"attr\">i</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> invalidCharacters)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!invalidCharacters.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> badOrderPairs = &#123;<span class=\"attr\">DM</span>: <span class=\"number\">1</span>, <span class=\"attr\">LC</span>: <span class=\"number\">1</span>, <span class=\"attr\">VX</span>: <span class=\"number\">1</span>, <span class=\"attr\">IXXL</span>: <span class=\"number\">1</span>, <span class=\"attr\">IXM</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> badOrderPairs)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!badOrderPairs.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> romanNumbers = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">II</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">III</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">VI</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">        <span class=\"attr\">VII</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">        <span class=\"attr\">VIII</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">XI</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\">        <span class=\"attr\">XII</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIII</span>: <span class=\"number\">13</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIV</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">        <span class=\"attr\">XV</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVI</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVII</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVIII</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIX</span>: <span class=\"number\">19</span>,</span><br><span class=\"line\">        <span class=\"attr\">XX</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXI</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXII</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIII</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIV</span>: <span class=\"number\">24</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXV</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVI</span>: <span class=\"number\">26</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVII</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVIII</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIX</span>: <span class=\"number\">29</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXX</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLIV</span>: <span class=\"number\">44</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLV</span>: <span class=\"number\">45</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLVI</span>: <span class=\"number\">46</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">LIV</span>: <span class=\"number\">54</span>,</span><br><span class=\"line\">        <span class=\"attr\">LV</span>: <span class=\"number\">55</span>,</span><br><span class=\"line\">        <span class=\"attr\">LVI</span>: <span class=\"number\">56</span>,</span><br><span class=\"line\">        <span class=\"attr\">LX</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">CI</span>: <span class=\"number\">101</span>,</span><br><span class=\"line\">        <span class=\"attr\">CXI</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">        <span class=\"attr\">CMXCIX</span>: <span class=\"number\">999</span>,</span><br><span class=\"line\">        <span class=\"attr\">MDCLXVI</span>: <span class=\"number\">1666</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> romanNumbers)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!romanNumbers.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                returnValue = <span class=\"title function_\">romanToArabic</span>(propCopy);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return &#x27;</span> + romanNumbers[propCopy] ,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(romanNumbers[propCopy]);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-11\"><a href=\"#Step-11\" class=\"headerlink\" title=\"Step 11\"></a>Step 11</h2><p>Now that we have our IVI check down to one string, it occurs to me that we can combine this check with our invalid character check.  So, let’s do that next.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;tests/roman-to-arabic/RomanToArabic.spec.js&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When I is passed in&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;I&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When IV is passed in&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;IV&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 4&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27;I&#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy + <span class=\"string\">&#x27;I&#x27;</span> + propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> baseTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!baseTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy+propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newProp = prop + prop.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + newProp + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,newProp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// just test for one each of upper case, lower case, number and lower case valid character</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> invalidCharacters = &#123;<span class=\"attr\">A</span>:<span class=\"number\">1</span>,<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;2&#x27;</span>: <span class=\"number\">1</span>, <span class=\"attr\">i</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> invalidCharacters)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!invalidCharacters.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> badOrderPairs = &#123;<span class=\"attr\">DM</span>: <span class=\"number\">1</span>, <span class=\"attr\">LC</span>: <span class=\"number\">1</span>, <span class=\"attr\">VX</span>: <span class=\"number\">1</span>, <span class=\"attr\">IXXL</span>: <span class=\"number\">1</span>, <span class=\"attr\">IXM</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> badOrderPairs)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!badOrderPairs.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> romanNumbers = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">II</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">III</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">VI</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">        <span class=\"attr\">VII</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">        <span class=\"attr\">VIII</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">XI</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\">        <span class=\"attr\">XII</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIII</span>: <span class=\"number\">13</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIV</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">        <span class=\"attr\">XV</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVI</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVII</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVIII</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIX</span>: <span class=\"number\">19</span>,</span><br><span class=\"line\">        <span class=\"attr\">XX</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXI</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXII</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIII</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIV</span>: <span class=\"number\">24</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXV</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVI</span>: <span class=\"number\">26</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVII</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVIII</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIX</span>: <span class=\"number\">29</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXX</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLIV</span>: <span class=\"number\">44</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLV</span>: <span class=\"number\">45</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLVI</span>: <span class=\"number\">46</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">LIV</span>: <span class=\"number\">54</span>,</span><br><span class=\"line\">        <span class=\"attr\">LV</span>: <span class=\"number\">55</span>,</span><br><span class=\"line\">        <span class=\"attr\">LVI</span>: <span class=\"number\">56</span>,</span><br><span class=\"line\">        <span class=\"attr\">LX</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">CI</span>: <span class=\"number\">101</span>,</span><br><span class=\"line\">        <span class=\"attr\">CXI</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">        <span class=\"attr\">CMXCIX</span>: <span class=\"number\">999</span>,</span><br><span class=\"line\">        <span class=\"attr\">MDCLXVI</span>: <span class=\"number\">1666</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> romanNumbers)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!romanNumbers.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                returnValue = <span class=\"title function_\">romanToArabic</span>(propCopy);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return &#x27;</span> + romanNumbers[propCopy] ,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(romanNumbers[propCopy]);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-12-1\"><a href=\"#Step-12-1\" class=\"headerlink\" title=\"Step 12\"></a>Step 12</h2><p>And the last place we can optimize is our three digit check.  But instead of limiting it to valid Roman numbers, let’s just check for any sequence of characters that repeats 4 times or more.</p>\n<p>And once we know that is working, we can combine it with our other Regular Expressions.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;tests/roman-to-arabic/RomanToArabic.spec.js&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When I is passed in&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;I&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When IV is passed in&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;IV&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 4&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27;I&#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy + <span class=\"string\">&#x27;I&#x27;</span> + propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> baseTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!baseTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy+propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newProp = prop + prop.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + newProp + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,newProp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// just test for one each of upper case, lower case, number and lower case valid character</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> invalidCharacters = &#123;<span class=\"attr\">A</span>:<span class=\"number\">1</span>,<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;2&#x27;</span>: <span class=\"number\">1</span>, <span class=\"attr\">i</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> invalidCharacters)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!invalidCharacters.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> badOrderPairs = &#123;<span class=\"attr\">DM</span>: <span class=\"number\">1</span>, <span class=\"attr\">LC</span>: <span class=\"number\">1</span>, <span class=\"attr\">VX</span>: <span class=\"number\">1</span>, <span class=\"attr\">IXXL</span>: <span class=\"number\">1</span>, <span class=\"attr\">IXM</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> badOrderPairs)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!badOrderPairs.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> romanNumbers = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">II</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">III</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">VI</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">        <span class=\"attr\">VII</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">        <span class=\"attr\">VIII</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">XI</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\">        <span class=\"attr\">XII</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIII</span>: <span class=\"number\">13</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIV</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">        <span class=\"attr\">XV</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVI</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVII</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVIII</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIX</span>: <span class=\"number\">19</span>,</span><br><span class=\"line\">        <span class=\"attr\">XX</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXI</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXII</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIII</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIV</span>: <span class=\"number\">24</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXV</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVI</span>: <span class=\"number\">26</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVII</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVIII</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIX</span>: <span class=\"number\">29</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXX</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLIV</span>: <span class=\"number\">44</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLV</span>: <span class=\"number\">45</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLVI</span>: <span class=\"number\">46</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">LIV</span>: <span class=\"number\">54</span>,</span><br><span class=\"line\">        <span class=\"attr\">LV</span>: <span class=\"number\">55</span>,</span><br><span class=\"line\">        <span class=\"attr\">LVI</span>: <span class=\"number\">56</span>,</span><br><span class=\"line\">        <span class=\"attr\">LX</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">CI</span>: <span class=\"number\">101</span>,</span><br><span class=\"line\">        <span class=\"attr\">CXI</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">        <span class=\"attr\">CMXCIX</span>: <span class=\"number\">999</span>,</span><br><span class=\"line\">        <span class=\"attr\">MDCLXVI</span>: <span class=\"number\">1666</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> romanNumbers)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!romanNumbers.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                returnValue = <span class=\"title function_\">romanToArabic</span>(propCopy);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return &#x27;</span> + romanNumbers[propCopy] ,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(romanNumbers[propCopy]);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-13\"><a href=\"#Step-13\" class=\"headerlink\" title=\"Step 13\"></a>Step 13</h2><p>We’ve cleaned up about all of the logic we can without hard coding the values.  But I would like to combine the lookup tables next.  I don’t like having three tables.  Let’s see if we can pull those into one table.</p>\n<p>The first step to doing this is combining the minusOneTable and baseTable into one table.  To differentiate in the code that is using those tables, we’ll just look at the length of the property.</p>\n<p>In the process of doing this, we notice that it would also make sense to combine the substitution table.  And since the values we’ve assigned to the table aren’t even being used at this point, we’ll just use the substitutions instead of the values.</p>\n<p>And if we make the value of each element in the baseTable an array, we could combine the values into that table as well.  But that would over complicate our lookup logic when we compute the value.  So, I think we’ll just leave that as it is.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;tests/roman-to-arabic/RomanToArabic.spec.js&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When I is passed in&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;I&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When IV is passed in&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;IV&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 4&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27;I&#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy + <span class=\"string\">&#x27;I&#x27;</span> + propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> baseTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!baseTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy+propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newProp = prop + prop.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + newProp + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,newProp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// just test for one each of upper case, lower case, number and lower case valid character</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> invalidCharacters = &#123;<span class=\"attr\">A</span>:<span class=\"number\">1</span>,<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;2&#x27;</span>: <span class=\"number\">1</span>, <span class=\"attr\">i</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> invalidCharacters)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!invalidCharacters.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> badOrderPairs = &#123;<span class=\"attr\">DM</span>: <span class=\"number\">1</span>, <span class=\"attr\">LC</span>: <span class=\"number\">1</span>, <span class=\"attr\">VX</span>: <span class=\"number\">1</span>, <span class=\"attr\">IXXL</span>: <span class=\"number\">1</span>, <span class=\"attr\">IXM</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> badOrderPairs)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!badOrderPairs.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> romanNumbers = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">II</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">III</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">VI</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">        <span class=\"attr\">VII</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">        <span class=\"attr\">VIII</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">XI</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\">        <span class=\"attr\">XII</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIII</span>: <span class=\"number\">13</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIV</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">        <span class=\"attr\">XV</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVI</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVII</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVIII</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIX</span>: <span class=\"number\">19</span>,</span><br><span class=\"line\">        <span class=\"attr\">XX</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXI</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXII</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIII</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIV</span>: <span class=\"number\">24</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXV</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVI</span>: <span class=\"number\">26</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVII</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVIII</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIX</span>: <span class=\"number\">29</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXX</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLIV</span>: <span class=\"number\">44</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLV</span>: <span class=\"number\">45</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLVI</span>: <span class=\"number\">46</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">LIV</span>: <span class=\"number\">54</span>,</span><br><span class=\"line\">        <span class=\"attr\">LV</span>: <span class=\"number\">55</span>,</span><br><span class=\"line\">        <span class=\"attr\">LVI</span>: <span class=\"number\">56</span>,</span><br><span class=\"line\">        <span class=\"attr\">LX</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">CI</span>: <span class=\"number\">101</span>,</span><br><span class=\"line\">        <span class=\"attr\">CXI</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">        <span class=\"attr\">CMXCIX</span>: <span class=\"number\">999</span>,</span><br><span class=\"line\">        <span class=\"attr\">MDCLXVI</span>: <span class=\"number\">1666</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> romanNumbers)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!romanNumbers.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                returnValue = <span class=\"title function_\">romanToArabic</span>(propCopy);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return &#x27;</span> + romanNumbers[propCopy] ,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(romanNumbers[propCopy]);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-14\"><a href=\"#Step-14\" class=\"headerlink\" title=\"Step 14\"></a>Step 14</h2><p>Finally, I think we want to consolidate the loops into one loop.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;tests/roman-to-arabic/RomanToArabic.spec.js&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnValue;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minusOneTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">CD</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">CM</span>: <span class=\"number\">900</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> baseTable = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">D</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">M</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When I is passed in&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;I&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When IV is passed in&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            returnValue = <span class=\"title function_\">romanToArabic</span>(<span class=\"string\">&#x27;IV&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return 4&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27;I&#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy + <span class=\"string\">&#x27;I&#x27;</span> + propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> baseTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!baseTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + prop + prop + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy+propCopy+propCopy+propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> minusOneTable)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minusOneTable.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newProp = prop + prop.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + newProp + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,newProp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// just test for one each of upper case, lower case, number and lower case valid character</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> invalidCharacters = &#123;<span class=\"attr\">A</span>:<span class=\"number\">1</span>,<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;2&#x27;</span>: <span class=\"number\">1</span>, <span class=\"attr\">i</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> invalidCharacters)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!invalidCharacters.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> badOrderPairs = &#123;<span class=\"attr\">DM</span>: <span class=\"number\">1</span>, <span class=\"attr\">LC</span>: <span class=\"number\">1</span>, <span class=\"attr\">VX</span>: <span class=\"number\">1</span>, <span class=\"attr\">IXXL</span>: <span class=\"number\">1</span>, <span class=\"attr\">IXM</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> badOrderPairs)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!badOrderPairs.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should throw an exception&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"title function_\">romanToArabic</span>(propCopy)&#125;).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> romanNumbers = &#123;</span><br><span class=\"line\">        <span class=\"attr\">I</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">II</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">III</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">IV</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">V</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">VI</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">        <span class=\"attr\">VII</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">        <span class=\"attr\">VIII</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">        <span class=\"attr\">IX</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">        <span class=\"attr\">X</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">XI</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\">        <span class=\"attr\">XII</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIII</span>: <span class=\"number\">13</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIV</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">        <span class=\"attr\">XV</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVI</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVII</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">        <span class=\"attr\">XVIII</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">        <span class=\"attr\">XIX</span>: <span class=\"number\">19</span>,</span><br><span class=\"line\">        <span class=\"attr\">XX</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXI</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXII</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIII</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIV</span>: <span class=\"number\">24</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXV</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVI</span>: <span class=\"number\">26</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVII</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXVIII</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXIX</span>: <span class=\"number\">29</span>,</span><br><span class=\"line\">        <span class=\"attr\">XXX</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">        <span class=\"attr\">XL</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLIV</span>: <span class=\"number\">44</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLV</span>: <span class=\"number\">45</span>,</span><br><span class=\"line\">        <span class=\"attr\">XLVI</span>: <span class=\"number\">46</span>,</span><br><span class=\"line\">        <span class=\"attr\">L</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"attr\">LIV</span>: <span class=\"number\">54</span>,</span><br><span class=\"line\">        <span class=\"attr\">LV</span>: <span class=\"number\">55</span>,</span><br><span class=\"line\">        <span class=\"attr\">LVI</span>: <span class=\"number\">56</span>,</span><br><span class=\"line\">        <span class=\"attr\">LX</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">        <span class=\"attr\">XC</span>: <span class=\"number\">90</span>,</span><br><span class=\"line\">        <span class=\"attr\">C</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">CI</span>: <span class=\"number\">101</span>,</span><br><span class=\"line\">        <span class=\"attr\">CXI</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">        <span class=\"attr\">CMXCIX</span>: <span class=\"number\">999</span>,</span><br><span class=\"line\">        <span class=\"attr\">MDCLXVI</span>: <span class=\"number\">1666</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> romanNumbers)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!romanNumbers.<span class=\"title function_\">hasOwnProperty</span>(prop))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;When &#x27;</span> + prop + <span class=\"string\">&#x27; is added&#x27;</span>,(<span class=\"keyword\">function</span>(<span class=\"params\">propCopy</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                returnValue = <span class=\"title function_\">romanToArabic</span>(propCopy);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should return &#x27;</span> + romanNumbers[propCopy] ,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">expect</span>(returnValue).<span class=\"title function_\">toBe</span>(romanNumbers[propCopy]);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,prop));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Review-1\"><a href=\"#Review-1\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p>There are probably a few other optimizations that could be made here.  But I’m afraid that each would sacrifice either the flexibility.  That is, we could hard code the regular expression validations, which would significantly reduce the number of lines of code.  Or we would sacrifice the readability.  Neither of which I am willing to do.</p>\n<p>If you are only interested in the result, you can find the finished project at <a href=\"//github.com/DaveMBush/JavaScriptKatas\" title=\"https://github.com/DaveMBush/JavaScriptKatas\">https://github.com/DaveMBush/JavaScriptKatas</a></p>\n",
            "tags": [
                "tdd",
                "javascript",
                "kata"
            ]
        },
        {
            "id": "http://davembush.github.com/7-reasons-to-evade-ext-js/",
            "url": "http://davembush.github.com/7-reasons-to-evade-ext-js/",
            "title": "7 Reasons To Evade Ext JS",
            "date_published": "2016-07-13T10:30:00.000Z",
            "content_html": "<p>I’ve worked with Ext JS now for a total of 2.5 years.  First with Ext 4.2 and now with Ext 6.x.</p>\n<p>Here’s my experience, and warning, of why you should avoid this disaster of a framework.</p>\n<p><img src=\"/uploads/2016/07/image-1.png\" alt=\"7 Reasons To Evade Ext JS\" title=\"7 Reasons To Evade Ext JS\"></p>\n<h2 id=\"Jack-of-All-Trades\"><a href=\"#Jack-of-All-Trades\" class=\"headerlink\" title=\"Jack of All Trades\"></a>Jack of All Trades</h2><p>Master of none! One of the great selling points of using Ext JS is the fact that it comes with “Everything you need” to build a web application.  That would be great if it were true.  But the fact of the matter is, it comes with all of the features you need but the features are all only partially implemented.  I’ve complained publicly several times that Sencha can’t possibly be testing the code they release because it only works in their demos.  If you try to use a feature they have documented as being available, you are likely to find that the feature doesn’t actually work.  How is it possible that you’ve written documentation for how something is supposed to work and yet you can release it without it working properly?  I can understand fringe stuff getting by.  We can’t think of every test.  But when this happens over and over again, you start to wonder what exactly they are testing.</p>\n<h2 id=\"A-Wolf-in-Sheep’s-Clothing\"><a href=\"#A-Wolf-in-Sheep’s-Clothing\" class=\"headerlink\" title=\"A Wolf in Sheep’s Clothing\"></a>A Wolf in Sheep’s Clothing</h2><p>When I first started with Ext, the only design pattern they had available was what they referred to as MVC.  It took me two months of playing with the framework before I finally realized that what they were calling MVC wasn’t anything the <a href=\"/designPatterns\">Gang of Four</a> would recognize as MVC.  I guess if you have a View, a Model and a Controller, you can call it MVC?  It doesn’t matter that the Models define records in a table or that the Controller is tightly coupled to your view.</p>\n<h2 id=\"Sheep-Without-Legs\"><a href=\"#Sheep-Without-Legs\" class=\"headerlink\" title=\"Sheep Without Legs\"></a>Sheep Without Legs</h2><p>OK.  So when they introduced the MVVM architecture I actually started to have just a bit of hope.  Yes, there were still some fundamental issues I have, but MVVM would make this tolerable.  But here is the issue.  Their idea of MVVM is that you would only need to implement it on a per page basis.</p>\n<p>Let me try to explain.</p>\n<h3 id=\"Broken-Data-Binding\"><a href=\"#Broken-Data-Binding\" class=\"headerlink\" title=\"Broken Data Binding\"></a>Broken Data Binding</h3><p>In my ideal world, when I build a new component, I would build that component using the framework the rest of my application is using.  So my component uses MVVM.  Sencha’s implementation gives you a View, ViewController, and ViewModel.  Mostly this looks more like MVC if you ask me but whatever, it has two-way databinding, so we’ll call it MVVM for now.  If you build a component that lives inside another component, the first thing you’ll discover is that binding only works from the top down.  That is, I can bind data at the outer layer and it will get reflected all of the way in to the inner most component that uses it.  But, if you change the data in the inner most component, it doesn’t reflect back up to the outer most component.  I’ve written a hack for this, and there is no promise from Sencha that this will ever get fixed properly, so I guess my hack is safe.</p>\n<h3 id=\"Broken-Controllers\"><a href=\"#Broken-Controllers\" class=\"headerlink\" title=\"Broken Controllers\"></a>Broken Controllers</h3><p>But it gets worse.  While child components can find data in models that are in parent components properly, they can’t find references to functions in controllers in the same way.  This is particularly problematic if you write a component that is a container of other components.  You would naturally want the child components to use the controller from the component that they were declared in.  But if you have an outer component that has your container component as a child and then other components inside of that.  The only way you can control what controller the child most components are going to notify of events is by wrapping the inner most components in their own component with their own controller.  This gets to be awkward when all you want to do is provide an event handler for one control in a column of a grid control.  Again, I have a monkey patch that fixes this, but why did I have to write it? This is just one specific example of my “Jack of All Trades” point that I started with.</p>\n<p>We won’t even address the question of if this is really MVVM or not!</p>\n<h2 id=\"Never-Use-the-0-release\"><a href=\"#Never-Use-the-0-release\" class=\"headerlink\" title=\"Never Use the .0 release\"></a>Never Use the .0 release</h2><p>I think most of us now are generally conditioned to be wary of the .0 release of anything that hasn’t been developed using Open Source methods.  There just haven’t been enough eyes on the project to ensure that everything works as it should.</p>\n<p>But with Sencha, this extends to all of the patch releases at the very least and even into some minor releases.</p>\n<p>While the 4.0, 5.0, and 6.0 releases were unacceptably broken, we find that every new patch or minor release that comes out afterward breaks something that was working.  We always have to ask, “Can we live with this?”</p>\n<h2 id=\"All-or-Nothing\"><a href=\"#All-or-Nothing\" class=\"headerlink\" title=\"All or Nothing\"></a>All or Nothing</h2><p>As I said at the beginning, Sencha gives you everything.  That sounds good.  You won’t have to go looking for a grid control, or many other common controls you might want to use.</p>\n<p>But the bad news is, you can only use controls that were written to be used with Ext.  Which other than what Sencha provides in the framework, doesn’t give you a lot of choices.  Don’t go thinking you’ll supplement Ext with a selection of third party controls.  It’s not going to happen.</p>\n<h2 id=\"Fences-Protect-AND-Isolate\"><a href=\"#Fences-Protect-AND-Isolate\" class=\"headerlink\" title=\"Fences Protect AND Isolate\"></a>Fences Protect AND Isolate</h2><p>Up until this point in my post, no one can reasonably argue that anything I’ve said is actually a benefit.  At this point we switch to points that may vary based on how well you know JavaScript, HTML, and CSS.</p>\n<p>You see, the good news, and actually a major selling point to many people, is that you can write a web application using Ext without having to know much, if anything about HTML or CSS.  And for that matter even the amount of JavaScript you need to know is relatively limited.</p>\n<p>That’s the good news.  The bad news is, if you know anything about any of these, you’ll probably end up frustrated by EXT.  This is because Ext’s JavaScript controls most of the layout.  So if you are used to going into developer tools to tweak the CSS and then applying that to your style sheet, you are going to be very disappointed.  Pretty much nothing you do in developer tools is going to work as you would expect.  And figuring out how to apply those to your code is going to be a lot harder than you are used to.</p>\n<h2 id=\"Their-Way-or-the-Highway\"><a href=\"#Their-Way-or-the-Highway\" class=\"headerlink\" title=\"Their Way or the Highway\"></a>Their Way or the Highway</h2><p>Once again, many people see this as an advantage.  And once again if you aren’t familiar with how the rest of the JavaScript world does things, this is going to sound fine.</p>\n<h3 id=\"Sencha-CMD\"><a href=\"#Sencha-CMD\" class=\"headerlink\" title=\"Sencha CMD\"></a>Sencha CMD</h3><p>Everything runs through Sencha CMD.  A tool for building all things Ext.  If you want to bundle and minify your code, the standard way of doing this is by using “requires” statements in your code and then running Sencha CMD and have it figure out what you are using and put it all in one bundle.</p>\n<p>The problem with this is that there are several much better ways of doing this that are available using Node and various NPM packages.  Again, if you are a JavaScript developer, you are going to wonder what Sencha is thinking.</p>\n<h3 id=\"Ext-define\"><a href=\"#Ext-define\" class=\"headerlink\" title=\"Ext.define()\"></a>Ext.define()</h3><p>Another place where proprietary shows up is in how Ext defines “Classes”.  When it was first introduced, TypeScript was new.  But now, we not only have TypeScript, which does much of what Ext does and some things it doesn’t, but we have an evolving JavaScript standard that I’m afraid Sencha won’t be able to keep up with.  They already discourage the use of ‘use strict’;.  Once again, there is only one place where this will get you in trouble, and the work around actually produces more efficient code.  But still, the point is, Sencha is relying on ECMA Script 3 standards while the world has largely moved on to ECMA 2015 and beyond.</p>\n<p>Anyhow, my point here is that Ext is not just a framework but also functions, largely, as its own language.  Not quite as much a fork from the standard as Coffee Script, but also not nearly as close to the JavaScript spec as TypeScript.  So while it is still JavaScript, if you are a JavaScript programmer, it isn’t going to feel quite like JavaScript to you.</p>\n<h3 id=\"Themes\"><a href=\"#Themes\" class=\"headerlink\" title=\"Themes\"></a>Themes</h3><p>The final place you will find “Proprietary” lurking is with the Themes.  There are several really good CSS frameworks out there.  Sencha uses none of them.  And while the syntax they use for creating themes has been SASS up until Ext 6, now they even have their own proprietary SASS compiler.  Watch out here because they are still using the SASS extensions so you are likely to make some assumptions here that aren’t true because, once again, they’ve only implemented enough of the SASS engine to do what THEY need to do.</p>\n<h2 id=\"VB-All-Over-Again\"><a href=\"#VB-All-Over-Again\" class=\"headerlink\" title=\"VB All Over Again\"></a>VB All Over Again</h2><p>Every time I hear someone praise how great Ext is, it is normally because it has everything you need out of the box and allows you to get stuff done quickly.  </p>\n<p>Basically the same argument for using Visual Basic back in the day.  And yet I learned to never take a VB job because it almost every instance, while it was possible to write well structured code in Visual Basic, it was generally so difficult to do that the code I would be maintaining would need to be rewritten in order to make any sense of it. Ext suffers the same issue.  There is nothing in Ext to force you to write well structured code.  The code I have had to maintain has almost always followed every anti-pattern known to man.  In this case, this isn’t Sencha’s fault directly other than the fact that the only reason my code tends to be cleaner than most is because I’m more likely to code a fix to an Ext bug than I am to work around the problem with an anti-pattern.</p>\n<p>In comparison to other frameworks that are available, if all you want is a tool that will get you a semi working application quickly, and you don’t care so much about having to rewrite it when you need to change it in some way, Ext is your tool.  If on the other hand, you care about design and you want to be able to maintain what you’ve written, you should look elsewhere.</p>\n<p>Remember, if it sounds too good to be true, it probably is.</p>\n",
            "tags": [
                "javascript",
                "ext js",
                "sencha"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-bind-for-cleaner-code/",
            "url": "http://davembush.github.com/javascript-bind-for-cleaner-code/",
            "title": "JavaScript bind() for cleaner code",
            "date_published": "2016-07-06T10:30:00.000Z",
            "content_html": "<p>Several weeks ago, I wrote about <a href=\"/why-does-javascript-loop-only-use-last-value/\">how closures impact calling asynchronous functions</a> in a loop and several ways of dealing with that problem.</p>\n<p>In my recent coding, I’ve discovered an even more simple way of dealing with this problem.</p>\n<p>In the process, it removes the anonymous function and eliminates the linting error, ‘Don’t make functions within a loop’ You see, I’ve been experimenting with JavaScript <code>bind()</code>.</p>\n<p>And as it turns out, we can use bind in multiple situations, including dealing with the closure issue I mentioned a couple of weeks ago.</p>\n<figure>![](/uploads/2016/07/image.png \"JavaScript bind() for cleaner code\")<figcaption>Photo credit: [Connor Tarter](//www.flickr.com/photos/connortarter/4754231502/) via [VisualHunt](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"What-Is-bind\"><a href=\"#What-Is-bind\" class=\"headerlink\" title=\"What Is bind()?\"></a>What Is bind()?</h2><p>The bind function is a recent addition to the JavaScript spec. So, this will only work on recent browsers. You can <a href=\"//kangax.github.io/compat-table/es5/\">check the compatibility table</a> (for all things JavaScript) to see which browser implement <code>bind()</code> as well as other JavaScript features. I looked over the list and there aren’t any browsers that don’t support <code>bind()</code> that I care to support, so I’m good. Your mileage may vary.</p>\n<p>What bind does is that it automatically wraps your function in its own closure so that we can bind the context (the this keyword) and a list of parameters to the original function. What you end up with is another function pointer.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newFoo = add.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">newFoo</span>());</span><br></pre></td></tr></table></figure>\n\n<p>Notice that we not only bound this to the <code>foo()</code> function, but we also bound the two parameters. So, when we call <code>newFoo()</code> the return value will be 7.</p>\n<p>But what happens if we change the parameters before calling newFoo?</p>\n<h2 id=\"Changing-bind-parameters\"><a href=\"#Changing-bind-parameters\" class=\"headerlink\" title=\"Changing bind parameters\"></a>Changing bind parameters</h2><p>If we bind parameters to <code>foo()</code> using variables and then change the variables prior to calling <code>newFoo()</code>, what do you expect the value to be?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newFoo = add.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,a, b);</span><br><span class=\"line\">a = <span class=\"number\">6</span>;</span><br><span class=\"line\">b = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">newFoo</span>());</span><br></pre></td></tr></table></figure>\n\n<p>The return value is still going to be 7 because <code>bind()</code> binds the value of the parameters, not the actual variables. This is good news and, like I said, we can use this to great advantage in our code.</p>\n<p>But where I think it will display the most usefulness to me is in my call backs</p>\n<h2 id=\"Bind-and-callbacks\"><a href=\"#Bind-and-callbacks\" class=\"headerlink\" title=\"Bind and callbacks\"></a>Bind and callbacks</h2><p>You should remember from that article that one of our solutions to dealing with callbacks in loops was to create an anonymous function around the function we wanted to call.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">ii</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ii);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But we can greatly simplify this code by using bind instead.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">consoleLog</span>(<span class=\"params\">i</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(consoleLog.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,i),<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We can do this because each call to bind gives us a new function pointer and the original function remains unchanged.</p>\n<p>Meanwhile, we also remove the linting error ‘Don’t make functions within a loop’ because we aren’t creating the function in a loop, we are just pointing to a function that was created outside of the loop.</p>\n<h2 id=\"Bind-for-Event-Handlers\"><a href=\"#Bind-for-Event-Handlers\" class=\"headerlink\" title=\"Bind for Event Handlers\"></a>Bind for Event Handlers</h2><p>Another place where <code>bind()</code> will clean up your code is with event handlers.  Everyone knows, or should know, that when an event handler is called, the context it is called on is the thing that generated the event and not the object that the event handler was created in.  But, by using bind, you can be sure that the function is being called on the correct context.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ClassName</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">eventHandler</span> = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Not that you would write your code exactly like that, but that is just to get the point across.</p>\n<h2 id=\"Currying\"><a href=\"#Currying\" class=\"headerlink\" title=\"Currying\"></a>Currying</h2><p>What?! OK. The best explaination of Currying I can give you is that it allows you to pass parameters to function in multiple steps by making the function return other functions that take the remaining parameters. Many functional languages, like F#, do this for you automatically.</p>\n<p>Using binding, we achieve Currying by writing code that looks something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a,b,c</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b+c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> addAgain = add.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"title function_\">addAgain</span>(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "javascript",
                "bind",
                "callbacks",
                "currying",
                "events"
            ]
        },
        {
            "id": "http://davembush.github.com/your-programming-resume-is-garbage/",
            "url": "http://davembush.github.com/your-programming-resume-is-garbage/",
            "title": "Your Programming Resume is Garbage",
            "date_published": "2016-06-30T10:30:00.000Z",
            "content_html": "<p>Over the last several years, I’ve had a chance to read a few Programming Resumes.  Or, I should say, TRY to read a few resumes.  But frankly, if the Programming Resume I typically see is common, everyone who reads my blog needs this advice.  I haven’t seen a barely adequate resume in years.  </p>\n<p>I’m sick of it.  Oh, it’s good for me of course.  I know my resume is going to stand out as such a unique work of art compared to the others, that I will get a call back right away.  After all, if the competition is so incredibly weak, I don’t even need to try.</p>\n<p>On the other hand, as someone who has to read these resumes, I’d like to have something better.</p>\n<p>And no, I’m not going to go over the standard “how to make your resume awesome” stuff because evidently most programmers can’t even get the basics down.  Seriously!</p>\n<figure>![](/uploads/2016/06/image-3.png \"Your Programming Resume is GARBAGE!\")<figcaption>Photo credit: [ollesvensson](//www.flickr.com/photos/ollesvensson/2443240690/) via [Visualhunt.com](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Your-Programming-Resume-is-Too-Long\"><a href=\"#Your-Programming-Resume-is-Too-Long\" class=\"headerlink\" title=\"Your Programming Resume is Too Long!\"></a>Your Programming Resume is Too Long!</h2><p>I struggled for years to keep my resume down to two pages until I started seeing resumes from people with MUCH less experience than me that were 8 and 9 pages long.  And I thought my 4 pager was too long! Here’s a valuable tip.  No one really cares who you worked for 10 years ago.  Even if you are a contract programmer like I am and you tend to switch gigs once every year or so.  If you haven’t done it in the last year, I really don’t need a lot of detail about it.  What have you done recently?! Here’s what happens when I see an 8 pager.  I scan it for the buzz words I’m interested in and I see how often they show up.  I then try to see if I can discern how much you really know other than how to spell the buzzword.</p>\n<h2 id=\"Your-Resume-Has-NO-White-Space\"><a href=\"#Your-Resume-Has-NO-White-Space\" class=\"headerlink\" title=\"Your Resume Has NO White Space\"></a>Your Resume Has NO White Space</h2><p>You need lots of this.  Just like in music, the rest are part of the music.  If nothing stands out in your resume, how am I supposed to tell what you are capable of doing?</p>\n<h2 id=\"Did-you-try-to-USE-a-Word-Processor\"><a href=\"#Did-you-try-to-USE-a-Word-Processor\" class=\"headerlink\" title=\"Did you try to USE a Word Processor?\"></a>Did you try to USE a Word Processor?</h2><p>I’m sure you are thinking, “yeah, I did” But from the resumes I’ve seen it barely looks like you used more than an old fashion type writer.  There are two issues here.  First, your document is boring.  This goes along with the white space issue.  Once again, how can I tell what is important if it is all the same font and all jammed together?  Print out your resume.  Forget for a second that this is your resume.  Squint your eyes or otherwise look at it without being able to see the characters.  What stands out?  Does anything stand out?  What do you want people to focus on? The second issue here is this.  If you can’t use the basic features of a Word Processor, how good of a Programmer are you really?!</p>\n<h2 id=\"Lack-of-Organization\"><a href=\"#Lack-of-Organization\" class=\"headerlink\" title=\"Lack of Organization\"></a>Lack of Organization</h2><p>This one is a little subtler.  I’m sure most people think their resumes are organized.  Most of what I see looks like this: The first page has some form of a “summary” of what the person has done.  Generally, a lot of bullet points that look no different than the same information they put in the work history.</p>\n<p>The next seven or more pages have the work history with bullets under each with what the person did.</p>\n<p>But here is my problem.  You are making me wade through that first section to see if you did anything I’m interested in.  It would be so much easier if you organized those bullets a bit.  Again, white space, different fonts.</p>\n<h2 id=\"You-Have-too-many-Bullets-per-Job\"><a href=\"#You-Have-too-many-Bullets-per-Job\" class=\"headerlink\" title=\"You Have too many Bullets per Job\"></a>You Have too many Bullets per Job</h2><p>Yeah.  I did this too.  But it was for a place I worked at for 8 years.  There was a lot to tell.  But then I realized, no one cares.</p>\n<p>Here is all I care about with your work history.  What technology did you use?  Did you do something interesting?  And bonus points if you can tell me what value you provided.  Who are you beyond what technology you know? My current format has two bullets for each assignment that emphasize my strengths as a programmer generally.  This is the value I provided.</p>\n<p>The third bullet is the list of technology I used at that assignment.  This is because, while I’ve listed all the tech I know at the top, I believe most places want to know where I got the experience.  I know I would.</p>\n<h2 id=\"Multiple-Short-Gigs\"><a href=\"#Multiple-Short-Gigs\" class=\"headerlink\" title=\"Multiple Short Gigs\"></a>Multiple Short Gigs</h2><p>A recent programming resume I saw had multiple 3 and 4 month assignments.  This is a HUGE warning flag.  Anyone looking at your resume is going to take one look at that and all kinds of warning bells are going to go off in their head.  Especially if you can’t explain why they were short.  Maybe they weren’t your fault.  But let me tell you what is going on at the hiring side.  We do a tech interview, the person comes in and we find out they have no clue how to do anything we hired them for.  If you have multiple short assignments, the first thing we think is, “He has to be lying about what he can do.” Then again, if you are lying about what you can do, why not lie about how long you worked some place?  Not that I’m suggesting that.  We’ll find out soon enough.  But if you are already lying…</p>\n<h2 id=\"Only-What-You-Know\"><a href=\"#Only-What-You-Know\" class=\"headerlink\" title=\"Only What You Know\"></a>Only What You Know</h2><p>This should be obvious, but I see so many resumes that have exactly what we are looking for and then when we give a simple coding exercise, they can’t do the exercise.</p>\n<p>We aren’t trying to trip you up.  Just prove you’ve done something with the technology before.  Please.</p>\n<p>Just as a recent example.</p>\n<p>We did a phone screen with a guy and we asked him several very technical questions.  No code.  Just, “what can you tell me about X” kind of questions.  And he answered all of them in very intricate detail.  He sounded really good.  But after a half hour of this, you start to wonder.  “If he is THIS smart, why is he interviewing for THIS job?”  It isn’t like we are any of the really big tech companies.</p>\n<p>When we finished the phone screen, I told the guy I was doing the interview with, “He’s either wicked smart or he was reading.”  Well, there is only one way to find out.  Do a face to face where he can’t read.  Only we couldn’t do that because he lived too far away.  So the next best thing was a skype interview with a shared code screen.</p>\n<p>All we asked the guy to do was a simple object oriented abstraction exercise.  OOP 101.  It became clear that he didn’t have any clue about how to do Object Oriented Programming nor did he know anything about any of the technology we were going to ask him to do.</p>\n<p>I guess this must work some of the time because we keep seeing this.</p>\n<h2 id=\"Keep-On-Generating-Garbage\"><a href=\"#Keep-On-Generating-Garbage\" class=\"headerlink\" title=\"Keep On Generating Garbage\"></a>Keep On Generating Garbage</h2><p>Like I said, the part of me that is competing with you for work wants you to continue producing crap.  It makes it SO much easier for me to land my next gig.  And now that I know, it has actually shaped what my resume looks like.  Two pages.  Just the essentials.  Links to places where they can get more information about me if they want to go that deep.</p>\n",
            "tags": [
                "interview",
                "resumes"
            ]
        },
        {
            "id": "http://davembush.github.com/exposing-secret-javascript-privates-to-unit-tests/",
            "url": "http://davembush.github.com/exposing-secret-javascript-privates-to-unit-tests/",
            "title": "Exposing Secret JavaScript privates to Unit Tests",
            "date_published": "2016-06-23T10:30:00.000Z",
            "content_html": "<p>The question comes up all the time, “How do I access JavaScript privates from my Unit Tests?”  And invariably, the purist chimes in with the answer, “you don’t”.</p>\n<p>But, isn’t the point of unit testing to allow us to test UNITs?  Why artificially limit our ability to test units if we don’t need to?  If we had the ability to create protected members, wouldn’t we tests those separately? So, what follows is how I surface my private JavaScript members so I can access them during tests without having to make them public during the run of my protection code.</p>\n<p><img src=\"/uploads/2016/06/image-2.png\" alt=\"Exposing Secret JavaScript privates to Unit Tests\" title=\"Exposing Secret JavaScript privates to Unit Tests\"></p>\n<h2 id=\"Lean-on-JavaScript\"><a href=\"#Lean-on-JavaScript\" class=\"headerlink\" title=\"Lean on JavaScript\"></a>Lean on JavaScript</h2><p>My JavaScript unit testing framework of choice is Jasmine.  Not so much because it does all I would like it to do or because there isn’t something ‘better’ available but because it has become the defacto standard for unit testing JavaScript and nothing else I’ve seen is significantly better.  There is one part of this technique that is going to lean on the fact that I am using Jasmine, but I’m sure you can adapt it to your testing framework.</p>\n<p>But first, let’s review how you would create private JavaScript members in the first place.</p>\n<h2 id=\"Creating-Private-Members\"><a href=\"#Creating-Private-Members\" class=\"headerlink\" title=\"Creating Private Members\"></a>Creating Private Members</h2><p>In standard ES5 code, a simple object might be defined using syntax that looks something like this.  Recognize there are multiple ways to create objects and things that look like classes in JavaScript.  What follows is just enough code to get the point across.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyClass</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">privateMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">publicMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        privateMember.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">publicMember</span> = publicMember;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Note that our privateMember is used by publicMember but is not accessible from the outside.  I’m also using apply(this) to pass the context to the privateMember function.  This may not be necessary if you aren’t using this in the privateMember function and you could use privateMember.bind(this) to make this automatic.  That’s one of the interesting things about JavaScript.  There are always multiple ways to achieve the same goal.  None of them particularly better than the other but some more standard than the other.</p>\n<p>Notice that the only thing that actually makes our publicMember public is that I’ve attached the function pointer to this.</p>\n<h2 id=\"Exposing-Private-for-Jasmine\"><a href=\"#Exposing-Private-for-Jasmine\" class=\"headerlink\" title=\"Exposing Private for Jasmine\"></a>Exposing Private for Jasmine</h2><p>The easiest way I know of to expose the private member variables for Jasmine is to conditionally assign the private members to this if jasmine is defined.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyClass</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">privateMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">publicMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        privateMember.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">publicMember</span> = publicMember;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jasmine)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">privateMember</span> = privateMember;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As long as you don’t use the jasmine global variable for something other than jasmine, this should work.</p>\n<p>And now you can test your private functions.</p>\n<h2 id=\"What-about-Spys\"><a href=\"#What-about-Spys\" class=\"headerlink\" title=\"What about Spys?\"></a>What about Spys?</h2><p>If you are testing your private functions on their own, you’ll probably have a need to place spys on them when you test the other functions in your application that call them.  This is where things get just a bit interesting.</p>\n<p>If we leave things as they are, and you place a spy on the function that we exposed, your spy will never get called.  The reason for this is because of the way pointers work.</p>\n<p>In our example above, our publicMember() function is going to call our privateMember() function regardless of how we manipulate the this.privateMember pointer.  This is because, while the variables are pointing to the same function, they are still two different variables and, because of the way spys work internally, you’ll end up changing the this.privateMember variable without impacting the call to privateMember().</p>\n<p>We need to write a little extra code in our if(jasmine) block to make sure that after we’ve exposed privateMember(), the now public version of privateMember() gets call by publicMember() instead of the private version of privateMember().</p>\n<p>To do this we are going to need to play “towers of hanoi” with our variables.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyClass</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">privateMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">publicMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        privateMember.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oldPrivateMember;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">publicMember</span> = publicMember;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jasmine)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oldPrivateMember)&#123;</span><br><span class=\"line\">            privateMember = oldPrivateMember;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            oldPrivateMember = privateMember;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">privateMember</span> = privateMember;</span><br><span class=\"line\">        privateMember = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">privateMember</span>();</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The gist of what this new code does is that it captures the pointer to the privateMember() into oldPrivateMember.  Once we have that, we can make this.privateMember point to the original privateMember and then make our original privateMember point to a new method that calls this.privateMember, which is what our spy will call if we’ve set one up.</p>\n<p>The if(oldPrivateMember) stuff is just protection code to make sure we don’t do this more times than we need and end up calling this.privateMember up the call stack multiple times until we finally get to the privateMember function we ultimately want to call.  Depending on how you implement classes, you may or may not need this code.</p>\n",
            "tags": [
                "unit test",
                "javascript",
                "test driven development"
            ]
        },
        {
            "id": "http://davembush.github.com/why-does-javascript-loop-only-use-last-value/",
            "url": "http://davembush.github.com/why-does-javascript-loop-only-use-last-value/",
            "title": "Why does JavaScript loop only use last value?",
            "date_published": "2016-06-16T10:30:00.000Z",
            "content_html": "<p>You see variations of the question, “Why does JavaScript loop only use the last value?” on StackOverflow all the time.  At work, the guy that sits next to me just ran into the same issue.  And the answer to the question requires a solid understanding of closures and <a href=\"/javascript-scope/\">variable scope</a>.  Something I’ve <a href=\"/javascript-scope/\">written about in the past</a>.  But, when I went back and looked at that article, I was surprised that I had not covered this particular very common topic.</p>\n<p>So, here is the basic scenario.  You have some sort of for&#x2F;next loop that then calls some asynchronous function.  When the function runs, what you see when the code runs is that the last value of the loop index is the value that gets used in the function for every instance that it gets called.</p>\n<figure>![](/uploads/2016/06/image-1.png \"Why does JavaScript loop only use last value?\")<figcaption>Photo credit: [col_adamson](//www.flickr.com/photos/57855544@N00/340654162/) via [Visualhunt.com](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"An-Example\"><a href=\"#An-Example\" class=\"headerlink\" title=\"An Example\"></a>An Example</h2><p>Here is a really simple example that demonstrates the problem.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But, you will also see it when you try to fire an event.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">    img.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(testArray[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Or even more common, when you try to make an AJAX call.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"comment\">/* url goes here */</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">moduleHtml</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>For the remainder of this post, we’ll stick with the first example because the problem is the same and the code for that one has the least moving parts.</p>\n<h2 id=\"The-Diagnosis\"><a href=\"#The-Diagnosis\" class=\"headerlink\" title=\"The Diagnosis\"></a>The Diagnosis</h2><p>The solution to the problem starts with understanding how JavaScript works.  In particular how closures work.  What happens when you use a variable that is declared outside the scope the variable is going to be used in, is that it will use the value that variable has at the time it runs.  It doesn’t get a copy of the value at the time the closure is setup.  If you think of closures as pointers rather than values, maybe that will help.</p>\n<p>So, in our working example, when the code actually runs, 10 will get spit out to the console 10 times because by the time the code runs, that is the value that i will have.  Maybe you thought it would be 9.  But the loop stopped looping because i was 10.</p>\n<p>If you think, “OK, so I’ll just make the function fire immediately after I set it up by using setTimeout(func,1), let me remind you that in our second example of firing an event, that is essentially what is happening there.  It won’t work either.</p>\n<h2 id=\"Not-a-Matter-of-Timing\"><a href=\"#Not-a-Matter-of-Timing\" class=\"headerlink\" title=\"Not a Matter of Timing\"></a>Not a Matter of Timing</h2><p>JavaScript has, and probably always will be single threaded.  I say, probably always will be because way too much is relying on the single threaded nature of JavaScript at this point for it to safely change.  If you want to break the web, suddenly change that.</p>\n<p>So, even if we could set a timeout value small enough to execute before the loop will complete, what you have to remember about setTimeout and setInterval is that all we are doing when we make those calls is we are saying, “run this code as soon after the timeout value as possible.”  Under the hood it puts the function in the event queue when the timeout value has expired.</p>\n<p>Since JavaScript is single threaded, none of this will happen until the code we are currently executing has completed.</p>\n<h2 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution 1\"></a>Solution 1</h2><p>One solution is to wrap our code in another closure that will run immediately.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">ii</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ii);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This example is using an IIFE (Immediately Invoked Function Expression) so that the function runs right away.  The effect is the same as the original code except for now the variable ii is local to our IIFE so it will not change every time the variable i changes.</p>\n<h2 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution 2\"></a>Solution 2</h2><p>Now, by this point, you might be thinking, why not just create a new variable ii inside the loop?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ii = i;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ii);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Well, the problem with this is variable hoisting.  Any variable you declare within a function, regardless of where it is declared, is physically declared at the top of the function.  So, you aren’t really creating a variable local to the loop.  You are creating a variable local to the function (or global scope in this case) and you end up with the same problem as before.</p>\n<p>But, ES2015 recognizes and has finally provided a means of creating a variable local to a code block rather than just function blocks.  To do this, they’ve introduced the LET keyword.</p>\n<p>So, if you change your code to:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ii = i;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ii);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The problem of course is that there aren’t a lot of browsers that support the LET keyword right now.  But there are transpilers that will convert your code from ES2015 to ES5.  And the way they do this is our final solution.</p>\n<h2 id=\"Solution-3\"><a href=\"#Solution-3\" class=\"headerlink\" title=\"Solution 3\"></a>Solution 3</h2><p>The problem with solution 1 is that while it works most of the time, it really isn’t the most reliable way of solving the problem.  At the very least it sets up a lot more code that we really need.  If we peek under the hood to how the transpilers implement LET, what we see is that they take advantage of the fact that the CATCH block of the try&#x2F;catch syntax has its own scope.</p>\n<p>So, all we have to do is throw i, catch it in the catch block and use the variable we caught in our callback function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;<span class=\"keyword\">throw</span> i&#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(ii) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ii);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It tends to be a bit cleaner than solution 1 and is the solution I prefer.  But, there is another strong reason for using this last solution that most people overlook.  When you wrap a function with an IIFE like we’ve done with solution 1, it changes the meaning inside the IIFE of <code>this</code>, <code>return</code>, <code>break</code> and <code>continue</code>.  Using the <code>try/catch</code> mechanism allows you to treat the code as if it were inline with the code the <code>try/catch</code> is in.  This is probably closer to what you had in mind when you wrote the original code to begin with.</p>\n",
            "tags": [
                "javascript",
                "closure",
                "loops"
            ]
        },
        {
            "id": "http://davembush.github.com/3-reasons-agile-will-not-succeed/",
            "url": "http://davembush.github.com/3-reasons-agile-will-not-succeed/",
            "title": "3 Reasons Agile Will Not Succeed",
            "date_published": "2016-06-09T10:30:00.000Z",
            "content_html": "<p>I’ve written about <a href=\"/categories/Agile/\">Agile</a> and <a href=\"/tags/scrum/\">Scrum</a> before and most of my regular readers know that I am a huge fan.  But recently I am starting to believe the Agile movement is doomed.  In fact, the most common response to my enthusiasm for Agile and Scrum is, “Yeah, we tried that once and it was a complete failure.”  Which seems odd to me because in every instance where I’ve been able to implement it, it has worked beautifully.  </p>\n<p>So why would I say Agile Will Not Succeed?</p>\n<p>The buzz around Agile has become so loud that Agile has moved from strictly a software development thing, to all corners of the business world.  And yet, as much as I believe Agile is the right way to develop software, as a movement, it is doomed for failure. </p>\n<p>Why?</p>\n<figure>![](/uploads/2016/06/image.png \"3 Reasons Agile Will Not Succeed\")<figcaption>Photo credit: [Tim Evanson](//www.flickr.com/photos/timevanson/9325191852/) via [VisualHunt](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Reminder-Agile-Isn’t-a-Method\"><a href=\"#Reminder-Agile-Isn’t-a-Method\" class=\"headerlink\" title=\"Reminder - Agile Isn’t a Method\"></a>Reminder - Agile Isn’t a Method</h2><p>This is the surest sign that a movement is struggling.  It has become so popular that people are using it without knowing anything of what they are doing.  The surest sign you’ve walked into an organization where Agile is doomed is if they say something along the lines of “We do Agile.”</p>\n<p>Why is this a clear sign? </p>\n<p>Because you can’t DO Agile.  You can only BE Agile.  <a href=\"//www.agilemanifesto.org/\">Read the Agile Manifesto</a>.  There is nothing there about how to implement Agile.  It simply isn’t a methodology.  So, when an organization says to me they are “Doing Agile” it tells me right away that they have no idea what it means to be Agile.</p>\n<h2 id=\"‘Doing-Agile’-for-the-Wrong-Reasons\"><a href=\"#‘Doing-Agile’-for-the-Wrong-Reasons\" class=\"headerlink\" title=\"‘Doing Agile’ for the Wrong Reasons\"></a>‘Doing Agile’ for the Wrong Reasons</h2><p>One of the outcomes of implementing an Agile process is that code tends to get developed faster.  Unfortunately, this has become the main selling point of moving toward Agile.  I get it, every shop I’ve worked in has been under some sort of development pressure to get stuff done.  So it is easy to look at faster delivery as the main reason why you would use an Agile method. </p>\n<p>But, speed is a side effect.  In fact, it is only a long term side effect.  Initially, as you move toward being Agile, you will probably end up being slower.  You might have to lay people off because they only know how to work on their own while true Agile requires teamwork.  The more mature your team, the harder it will be to switch.</p>\n<p>So, if you shouldn’t move toward Agile because of speed, why should you? Well, two of the main reasons for me are: visibility, flexibility, and predictability.</p>\n<p>I was once told the story of how plumbers plumb a new house.  The first day they come in and hang all the pipes in hangers.  By the time the owner comes by that evening, everything is hung and it looks like they are practically done.  They now have two weeks to get it all soldered together before the owner comes by again. This is why most Agile methods require short sprints.  The more you can show the customer the progress you are making, the less nervous they will get and the more likely you are to be left alone to do your job.  However, it will take time because the customer has been burned too often in the past, so it may be a while before they learn to wait for the sprint reviews.</p>\n<p>But there is an added advantage to being visible that is a huge win for everyone.  By letting the customer see the progress you are making, he is able to make tweaks along the way.  I’ve learned over the years that no one really knows what they want until they see it.  But letting them see it often and make tweaks along the way saves me from having to do a complete rewrite when I am “done.” And agile adds predictability that isn’t available using older methods.  It doesn’t let you say up front how long a project will take.  Estimates are still rather futile.  You’ll never know less about a project than the first day you try to provide an estimate.  But, as you progress, you will know roughly how much effort the remaining project will take and how much time that much effort will take on average.  The project becomes predictable using statistics generated by the project.</p>\n<h2 id=\"You-Aren’t-Fully-Committed\"><a href=\"#You-Aren’t-Fully-Committed\" class=\"headerlink\" title=\"You Aren’t Fully Committed\"></a>You Aren’t Fully Committed</h2><p>In my last interview, I was asked if I had any experience with “Agile.”  I really need to learn to qualify that question.  I answered, “<a href=\"//www.scrumalliance.org/community/profile/dbush2\">I have my Scrum Master certification</a>, but I’ve yet to work in a truly Agile environment.”  And yet, I have worked in environments that call themselves “Agile”  But these are all environments that Carl and Richard over at <a href=\"//dotnetrocks.com/\">DotNetRocks</a> call “Scrum But…”.  “Agile But…”?  And at another place, we called it “Scrummerfall”.  The idea is the same, rather than doing either Scrum or Kanban, they take the parts they’ve heard about that they like and merge them into what they are currently doing.</p>\n<p>Of course, they weren’t fully committed to the process they were using either, so it shouldn’t work any worse.  But it often does.</p>\n<p>One of the most obvious points of failure is with project management.  I’ve seen it all.  Scrum masters who are still trying to function as project managers and organizations that have skipped the scrum master role and left the project managers.  Stand ups that last an hour.</p>\n<p>Or how about this one.  Teams trying to estimate stories instead of task.</p>\n<p>I went on one interview that had the following bullets in the job request I was sent:</p>\n<ul>\n<li>Must be able to work in an Agile environment</li>\n</ul>\n<p>followed three points later by</p>\n<ul>\n<li>Must be able to work under tight deadlines.</li>\n</ul>\n<p>Talk about an oxymoron! When I asked what “Agile” meant to him (the owner of the company) he said, “Oh, that just means we do iterative development.” Here’s the deal.  If you are going to say you are going to implement Agile, at least learn enough about it to know what the word means!  You might decide it isn’t for you.  That’s fine.  Doing something simply because it is the “In” thing to do is never a good reason to do something.</p>\n<h2 id=\"Management-Has-No-Clue\"><a href=\"#Management-Has-No-Clue\" class=\"headerlink\" title=\"Management Has No Clue\"></a>Management Has No Clue</h2><p>In my current job, I was told that some boss several levels up who I’ve still not met has declared our project to be a “Waterfall project” because “we already know what this is supposed to do.” As soon as I heard that, I said, “Someone doesn’t know what Agile is.” Here is why this sounds right.  The project I am working on is a rewrite from a very old platform to a web application.  In principle, from that definition, it sounds like a known entity.  However, simply because the GUI has changed there are things that were done on the old platform that make no sense on the new platform.</p>\n<p>But it gets worse.  The application is being expanded to include other business units with additional requirements.  So, we only partially know all this is supposed to do.</p>\n<p>If we were using true Waterfall, we would have to design the whole thing up front.  This project is due in a little less than a year.  Tell me what on the web doesn’t change in a year?</p>\n<h2 id=\"Agile-Will-Not-Succeed\"><a href=\"#Agile-Will-Not-Succeed\" class=\"headerlink\" title=\"Agile Will Not Succeed\"></a>Agile Will Not Succeed</h2><p>So, what’s the point?  People love their perceptions.  Not reality.  What Agile set out to do was nobel, and for the most part, right.  But people are lazy.  They get a snippet of the truth here, a snippet of the truth there, ignore a snippet, paste in a snippet (here a snippet, there a snippet, everywhere a snip of snippet).  And that becomes their truth, while not being THE truth.  We do it with everything we believe.  Agile has reached that point of group think that it can now be classified as “religion.”  It now has so much group think weight that I’m not sure even those who started the movement can clearly articulate what it IS anymore.</p>\n",
            "tags": [
                "agile",
                "failure",
                "kanban",
                "scrum"
            ]
        },
        {
            "id": "http://davembush.github.com/how-not-to-choose-a-framework/",
            "url": "http://davembush.github.com/how-not-to-choose-a-framework/",
            "title": "How Not to Choose a Framework",
            "date_published": "2016-06-02T10:30:00.000Z",
            "content_html": "<p>In my job as a JavaScript architect, trainer and mentor, I’m often asked, “What’s your favorite framework?”  Or “What is the best framework?” And it surprises people when I give them two answers to that question.</p>\n<p>Right now, of the frameworks I’ve looked at, my favorite framework is <a href=\"/tags/react-js/\">React JS</a>.  But if I were picking a corporate framework, at this point I’d probably land on <a href=\"/angular-2-first-impressions-compared-to-angular-1/\">Angular 2.0</a>.</p>\n<p>But the question you are probably asking is , “Why two different selections?”  And, I think a more interesting question would be, “How did you select which one to use?” In fact, when I was thinking about writing this post, I was going to title it “How to Choose a JavaScript Framework” but as I considered what I would actually say, I realized that the factors I would use really apply to any language and any time.</p>\n<p>But an even more interesting question is this.  What factors are essential when picking out a framework.  If I ignored these questions, what are the cost? So, I give you…</p>\n<figure>![](/uploads/2016/05/image-3.png \"How Not to Choose a Framework\")<figcaption>Photo credit: [Tony Webster](//www.flickr.com/photos/diversey/980101167/) via [Visual hunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"How-Not-to-Choose-a-Framework\"><a href=\"#How-Not-to-Choose-a-Framework\" class=\"headerlink\" title=\"How Not to Choose a Framework\"></a>How Not to Choose a Framework</h2><p>As we progress, I’ll mention frameworks I have experience with.  To be fair, I will let you know my preferences.</p>\n<p>In order, the frameworks I would prefer to use would be:</p>\n<ul>\n<li>React JS</li>\n<li>Angular 2</li>\n<li>Angular 1</li>\n<li>Ext JS 5 or 6</li>\n<li>Ext JS 4</li>\n</ul>\n<p>If I were going to recommend a framework for a large enterprise organization, the order would be slightly different:</p>\n<ul>\n<li>Angular 2</li>\n<li>Angular 1</li>\n<li>Ext JS 5 or 6</li>\n<li>React</li>\n<li>Ext JS 4</li>\n</ul>\n<p>With this in mind, here’s what you should pay attention to.</p>\n<h2 id=\"Who-Will-Use-The-Framework\"><a href=\"#Who-Will-Use-The-Framework\" class=\"headerlink\" title=\"Who Will Use The Framework?\"></a>Who Will Use The Framework?</h2><p>At the organization I am working at now, most of the people there are Java programmers.  This means that programming in JavaScript, of any flavor, is going to be as much as a mind-shift as moving from C to C++ or C++ to Java or C#.  Yes, there are similarities to what they are used to, but there are enough differences to consider that you’ll probably gravitate toward a framework that allows them to not have to worry about those differences.  On this point Ext or Angular 2 are probably going to rise to the surface because they, more than any other framework, allow you to work with JavaScript more like it was like Java or C# than any other framework I know about.</p>\n<h2 id=\"How-Steep-is-The-Learning-Curve\"><a href=\"#How-Steep-is-The-Learning-Curve\" class=\"headerlink\" title=\"How Steep is The Learning Curve?\"></a>How Steep is The Learning Curve?</h2><p>Related to who will use the framework is how long will it take them to learn the framework?  For this, you are going to want to look at things like:</p>\n<ul>\n<li>Can I buy support so I can get my questions answered?</li>\n<li>How clear is the documentation?</li>\n<li>How popular is the framework?</li>\n<li>Do I already have an expert on my team?</li>\n<li>Is there a public Slack channel for this framework?</li>\n<li>Do the people behind the framework care about the Enterprise?</li>\n</ul>\n<p>On this point, depending on the experience of your developers, Ext JS and Angular 2 are probably going to surface as the clear winners while React is going to end up at the very bottom.  As much as I love it personally, I have to admit that learning it has taken me the most amount of time.</p>\n<h2 id=\"How-Opinionated-is-the-Framework\"><a href=\"#How-Opinionated-is-the-Framework\" class=\"headerlink\" title=\"How Opinionated is the Framework?\"></a>How Opinionated is the Framework?</h2><p>I remember when VB 1.0 was first introduced.  The reason everyone gave me for why I should love this new development environment was, “Look how fast I can get something up and running.” Well, yes, but… VB let you write code any way that got the job done.  And coming from C++ and MFC and prior to that, OWL from Borland, I recognized that even though you could still write crappy code using a framework that provided some structure, the amount of crappy code you wrote was inversely proportional to the amount of structure the framework provides.</p>\n<p>When you are working with a large team of developers, something needs to be in place to ensure they are writing code in a highly structured way rather than just getting the job done.</p>\n<p>Once again, this places Angular 2 at the top of the pile of the ones I’ve actually worked with.  Ext sinks to the bottom of the pile.  While Ext does implement something they call MVC and MVVM, they don’t protect the developer from coding outside of what those design patterns are supposed to look like.  In the case of MVC, I’m not even sure the people who wrote it know what MVC is.</p>\n<h2 id=\"Industry-Standards\"><a href=\"#Industry-Standards\" class=\"headerlink\" title=\"Industry Standards\"></a>Industry Standards</h2><p>The easiest way for me to illustrate what I mean here is to point out a few ways this gets violated with the existing frameworks.</p>\n<p>In order to make Ext work more like a desktop development environment, they generate the HTML for you and use their own layout mechanism to control where the various elements appear on the screen.  Every other framework I’ve mentioned lets you control the layout using CSS.  The advantage to Ext is that I don’t have to know HTML or CSS in order to get a screen up that looks nice.  The down side is that if I want to do anything just a bit out of the Ext box, I quickly become frustrated.  It also takes more time to render a screen than if I were using HTML and CSS.  This is particularly true if your components are nested more than 3 deep.</p>\n<p>Further, Ext has enabled JavaScript to look more like Java and C# than JavaScript by implementing a proprietary mechanism for defining a class.  What continually worries me is how well this will continue to work as the ECMAScript standards evolve and provide there own mechanisms for achieving the same results.</p>\n<p>Ext also (sorry, but Ext is the primary violator of this point) uses its own proprietary build process.  It is possible to circumvent their build process for most things.  But the question one has to ask is, “why can’t you just use standards like gulp, grunt or npm scripts?” Even though Angular 2 primarily uses TypeScript, the difference between Angular 2 and Ext is that 1) you don’t HAVE to use TypeScript even though it is highly encourages and 2) TypeScript only implements features that look like they are going to eventually end up in the ECMAScript standards.  So, it is a lot more future proof while adding a lot of the same features that Ext implements in a more proprietary fashion.</p>\n<p>Another framework where this kind of shows up is with React JS.  While everything about building the app is built using industry standards, the unit testing framework doesn’t allow you to use Karma as your test running.  There is another more proprietary implentation called Jest.  However, I also don’t have to use PhantomJS to gets my components.  I wish I could have both.</p>\n<h2 id=\"How-Testable-Is-It\"><a href=\"#How-Testable-Is-It\" class=\"headerlink\" title=\"How Testable Is It?\"></a>How Testable Is It?</h2><p>Anyone who is familiar with my history of posts, who know me personally, know <a href=\"/tags/tdd\">I am a huge proponent of TDD</a>. So, any framework I use has to allow me to unit test. This is why Ext JS 4 ends up dead last on my list. You would think that a framework that says they implement MVC would allow you to test the controller without have the view attached. That’s one of the points of MVC. But Ext doesn’t allow this.</p>\n<p>On the other end of the spectrum, React is testable all the way down. This is why I love it. The only reason I don’t consider it the right choice for the enterprise is because it takes so long to learn and the documentation isn’t very well done.</p>\n<h2 id=\"Doing-The-Research\"><a href=\"#Doing-The-Research\" class=\"headerlink\" title=\"Doing The Research\"></a>Doing The Research</h2><p>OK.  So, this is what you should look for, but when you are looking at the frameworks, how would you know?  Most of this information is only stuff you would find out after your programmers started using the framework.</p>\n<p>One way you can find out is to find people who have used the various frameworks you have under consideration.  One of my first test would be, “How much information can I find on the Internet about this framework?”My second question would be, “How popular is this framework?” and then finally I would look for people who don’t like the framework and try to determine if their points are valid.</p>\n<h2 id=\"How-Not-to-Pick-a-Framework\"><a href=\"#How-Not-to-Pick-a-Framework\" class=\"headerlink\" title=\"How Not to Pick a Framework\"></a>How Not to Pick a Framework</h2><p>If you want to pick the wrong framework, trust the sales literature.  Don’t ask any question.  Ignore the points above.</p>\n<p>Ultimately regret your decision.</p>\n",
            "tags": [
                "javascript",
                "react.js",
                "ext js",
                "angular.js"
            ]
        }
    ]
}