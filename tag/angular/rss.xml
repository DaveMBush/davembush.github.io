<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;angular&#34; tag</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Sun, 12 Jan 2025 08:34:41 -0500</pubDate>
        <lastBuildDate>Sun, 12 Jan 2025 08:34:41 -0500</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/optimizing-angular-for-speed/</guid>
            <title>Optimizing Angular For Speed</title>
            <link>http://davembush.github.com/optimizing-angular-for-speed/</link>
            <category>angular</category>
            <category>performance</category>
            <category>best practice</category>
            <pubDate>Sun, 12 Jan 2025 08:34:41 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I was recently asked how I would optimize an Angular site for speed. Interestingly, I’ve never written about this explicitly even though I’ve done a lot of work related to this issue.&lt;/p&gt;
&lt;p&gt;For the purposes of this article, I’m going to assume you have already implemented most of the things that Angular gives you “for free.” For example, we won’t discuss “Tree Shaking” or “AOT.” Those are given.&lt;/p&gt;
&lt;p&gt;Here are my 30 or so tips on how to optimize an Angular application for speed.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;Remove-Code&#34;&gt;&lt;a href=&#34;#Remove-Code&#34; class=&#34;headerlink&#34; title=&#34;Remove Code&#34;&gt;&lt;/a&gt;Remove Code&lt;/h2&gt;&lt;p&gt;Before we get started looking at ways to improve the performance our our application, the first thing we should do is look at ways to eliminate code. The fastest code in the world is the code that doesn’t run. In the case of JavaScript, generally, this also means code that doesn’t load. So, always evaluate if the code you are adding is necessary.&lt;/p&gt;
&lt;p&gt;To that end, you should also evaluate your code for duplicate code. Not just code within the code you write, but code you might be importing from other libraries that are unintentionally duplicating each other. Could you remove a library that is redundant?&lt;/p&gt;
&lt;p&gt;Be ruthless here because the more code you load, the more code the JavaScript engine has to parse, compile, and ultimately try to optimize.&lt;/p&gt;
&lt;h2 id=&#34;Change-Detection&#34;&gt;&lt;a href=&#34;#Change-Detection&#34; class=&#34;headerlink&#34; title=&#34;Change Detection&#34;&gt;&lt;/a&gt;Change Detection&lt;/h2&gt;&lt;h3 id=&#34;OnPush-Notification&#34;&gt;&lt;a href=&#34;#OnPush-Notification&#34; class=&#34;headerlink&#34; title=&#34;OnPush Notification&#34;&gt;&lt;/a&gt;OnPush Notification&lt;/h3&gt;&lt;p&gt;Much has been written about how Angular Change Detection works, so I’m not going to go into much detail about this other than reiterate the basics.&lt;/p&gt;
&lt;p&gt;Without OnPush notification, angular will check the component to see if anything changes whenever an event occurs. This means something as simple as a mouse move will cause change detection evaluation.&lt;/p&gt;
&lt;p&gt;With OnPush, change detection on a component will happen only if one of the component’s properties (field marked with @Input() attribute) has changed or if you’ve explicitly told Angular that a change has occurred.&lt;/p&gt;
&lt;p&gt;In my experience, this isn’t going to generate enough of a performance difference that you can measure in seconds. But it will make a difference overall and is generally a quick win. So, start here.&lt;/p&gt;
&lt;p&gt;One quick way to ensure all your future components use OnPush when using the CLI to generate components is to ensure you add the OnPush configuration to your Angular.json file.&lt;/p&gt;
&lt;p&gt;You can find a good article about this &lt;a href=&#34;https://indepth.dev/overriding-angular-schematics/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;Small-Components&#34;&gt;&lt;a href=&#34;#Small-Components&#34; class=&#34;headerlink&#34; title=&#34;Small Components&#34;&gt;&lt;/a&gt;Small Components&lt;/h3&gt;&lt;p&gt;OnPush notification is only going to be useful if your components are small. Remember that once change detection has determined the component is dirty and needs to be re-rendered, the WHOLE component will be re-calculated even though there is no Virtual DOM diffing in IVY.&lt;/p&gt;
&lt;h3 id=&#34;Run-Outside-Zones&#34;&gt;&lt;a href=&#34;#Run-Outside-Zones&#34; class=&#34;headerlink&#34; title=&#34;Run Outside Zones&#34;&gt;&lt;/a&gt;Run Outside Zones&lt;/h3&gt;&lt;p&gt;It helps to understand how change detection works in Angular to optimize Angular change detection. Part of that equation is that it hooks into the fired events. This is how, for example, Angular knows it should update your screen when a click event occurs or when data is returned from an HttpClient request.&lt;/p&gt;
&lt;p&gt;But sometimes, we may trigger that event in our code when we know that change detection is unnecessary.&lt;/p&gt;
&lt;p&gt;For example, I have code that runs every 20 seconds to see if we should automatically log the user out. To keep this from running the change detection logic, I run this outside of the Zones logic.&lt;/p&gt;
&lt;p&gt;The specific API you are looking for, is &lt;code&gt;Zones.runOutsideAngular()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Another place to look out for is the time-based RxJS operators such as &lt;code&gt;debounceTime()&lt;/code&gt;, &lt;code&gt;throttleTime()&lt;/code&gt;, etc. These operators will trigger change detection every time they fire. If you are using them in your code, consider running them outside of the Zones logic or use unpatched versions of the operators.&lt;/p&gt;
&lt;h3 id=&#34;Turn-Off-Zones&#34;&gt;&lt;a href=&#34;#Turn-Off-Zones&#34; class=&#34;headerlink&#34; title=&#34;Turn Off Zones&#34;&gt;&lt;/a&gt;Turn Off Zones&lt;/h3&gt;&lt;p&gt;Change detection might get triggered in multiple ways. And, in fact, your app probably doesn’t need all of them.&lt;/p&gt;
&lt;p&gt;You can turn things off using &lt;code&gt;__Zone_ignore_on_properties&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is more information on this &lt;a href=&#34;https://github.com/angular/zone.js/blob/master/STANDARD-APIS.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That being said, I’ve done some performance testing and it turns out that &lt;a href=&#34;../ngzones-performance-impact/&#34;&gt;Change Detection is not the first place to look if your screen is rendering slowly&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;Use-Pipes&#34;&gt;&lt;a href=&#34;#Use-Pipes&#34; class=&#34;headerlink&#34; title=&#34;Use Pipes&#34;&gt;&lt;/a&gt;Use Pipes&lt;/h3&gt;&lt;p&gt;This tip is only really valuable in the cases where the Functional programming’s pure functions is relevant.&lt;/p&gt;
&lt;p&gt;The idea behind pure functions, at least as it applies to pipes, is that a pure function will always return the same value when given the same parameters. So, for example, the function &lt;code&gt;Add(a, b)&lt;/code&gt; will always return 4 given the parameters 2 and 2.&lt;/p&gt;
&lt;p&gt;Why recompute the value when you give it the same parameters as the previous time you called it?&lt;/p&gt;
&lt;p&gt;Using memoization, you can further take advantage of this optimization on functions that take extra time. This is what Angular Pipes do for you under the hood. But by implementing it yourself, you can cache more than the last value. I’m talking about the practice of holding onto a computed value and using the parameters as a key to look up the return value. Thus avoiding the computation completely.&lt;/p&gt;
&lt;p&gt;Use this optimization tip intelligently, though. Sometimes, values might be “the same,” but the content is different. I’m thinking about times when you would mutate the contents of an object. Say an array you added a value to instead of creating a new array. The array object pointer is still the same, so your pure function will not recompute the return value because the pointer didn’t change.&lt;/p&gt;
&lt;p&gt;If OnPush isn’t giving you all the optimization that you are looking for, creating a pure Pipe is the next step along the same lines.&lt;/p&gt;
&lt;p&gt;However, this is one place where I’d spend the extra time to verify that my “optimization” isn’t making the performance worse.&lt;/p&gt;
&lt;h3 id=&#34;NgRX&#34;&gt;&lt;a href=&#34;#NgRX&#34; class=&#34;headerlink&#34; title=&#34;NgRX&#34;&gt;&lt;/a&gt;NgRX&lt;/h3&gt;&lt;p&gt;Use NgRX to ONLY manage your state. Reducers should only update state. Effects should only retrieve data from the server and dispatch one and only one action.&lt;/p&gt;
&lt;p&gt;For futher optimization, consider calling the service you’d normally call from your effect directly instead of dispatching through the effect.&lt;/p&gt;
&lt;p&gt;See my article about &lt;a href=&#34;/what-i-learned-writing-smartngrx/&#34;&gt;What I learned writing SmartNgRX&lt;/a&gt; and &lt;a href=&#34;/ngrx-performance-improvements/&#34;&gt;NgRx Performance Improvements&lt;/a&gt; for more information on this topic.&lt;/p&gt;
&lt;h3 id=&#34;Use-NgRX-Selectors&#34;&gt;&lt;a href=&#34;#Use-NgRX-Selectors&#34; class=&#34;headerlink&#34; title=&#34;Use NgRX Selectors&#34;&gt;&lt;/a&gt;Use NgRX Selectors&lt;/h3&gt;&lt;p&gt;Many people aren’t aware that NgRX has a Selector mechanism allowing memoization. When you call the Selector,  if nothing it depends on has changed, you get back the same answer you got the previous time you executed the method without having to run all the code that gave you the answer the first time.&lt;/p&gt;
&lt;p&gt;It also looks a lot cleaner than the &lt;code&gt;() =&amp;gt; state.subState&lt;/code&gt; mechanism we started out with.&lt;/p&gt;
&lt;p&gt;Note that parameterized selectors can’t take advantage of this memoization unless you roll your own.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; selectMemoizedThing = &lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(...);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// vs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;selectCantBeMemoized&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;param&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(... uses param &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; here...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Don’t-Bind-to-Computed-Values&#34;&gt;&lt;a href=&#34;#Don’t-Bind-to-Computed-Values&#34; class=&#34;headerlink&#34; title=&#34;Don’t Bind to Computed Values&#34;&gt;&lt;/a&gt;Don’t Bind to Computed Values&lt;/h3&gt;&lt;p&gt;If your value is computed, Angular can’t easily determine if it has changed unless it calculates it.&lt;/p&gt;
&lt;p&gt;There are three ways to solve this issue.&lt;/p&gt;
&lt;p&gt;The first and most popular is to use a pipe, as described above. But it is the least desirable because it still forces the change detector to do more work than necessary.&lt;/p&gt;
&lt;p&gt;The second way to achieve this goal is by assigning a member field the computed value during the component’s &lt;code&gt;ngOnChanges&lt;/code&gt; event. Do this when the computed value uses values all internal to the component.&lt;/p&gt;
&lt;p&gt;Third, you can perform ALL the calculations in a Selector so that the data you need is already available and is easy to detect by the time you are binding.&lt;/p&gt;
&lt;p&gt;Finally, if you can, do the computation on the server so it isn’t even an issue on the client.&lt;/p&gt;
&lt;p&gt;For more information on this topic see my article &lt;a href=&#34;../how-to-avoid-binding-to-computed-values-in-angular/&#34;&gt;How to Avoid Binding to Computed Values in Angular&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;NgRX-Features&#34;&gt;&lt;a href=&#34;#NgRX-Features&#34; class=&#34;headerlink&#34; title=&#34;NgRX Features&#34;&gt;&lt;/a&gt;NgRX Features&lt;/h3&gt;&lt;p&gt;And while we are on the subject of NgRX, instead of creating one monster state to rule them all in the AppModule, use the Features to only instantiate the store reducers, effects, etc., as you need them.&lt;/p&gt;
&lt;h3 id=&#34;Use-RxJS-distinct&#34;&gt;&lt;a href=&#34;#Use-RxJS-distinct&#34; class=&#34;headerlink&#34; title=&#34;Use RxJS distinct()&#34;&gt;&lt;/a&gt;Use RxJS distinct()&lt;/h3&gt;&lt;p&gt;Did you know that your component is probably re-rendering more times than needed? This is because &lt;code&gt;@Input()&lt;/code&gt; values will mark the component every time it thinks it might have received a new value. You can prevent this by using &lt;code&gt;distinctUntilChanged()&lt;/code&gt; on the Observable.&lt;/p&gt;
&lt;h3 id=&#34;Use-RxJX-replay&#34;&gt;&lt;a href=&#34;#Use-RxJX-replay&#34; class=&#34;headerlink&#34; title=&#34;Use RxJX replay()&#34;&gt;&lt;/a&gt;Use RxJX replay()&lt;/h3&gt;&lt;p&gt;Another trick you can use is to use &lt;code&gt;replay()&lt;/code&gt; on the Observable. There are various ways to configure this, but the advantage is that this is another way to prevent calculations you don’t need. If the value isn’t going to change as you render the content multiple times on the screen, you only need to compute once and allow &lt;code&gt;replay()&lt;/code&gt; to memoize the return.&lt;/p&gt;
&lt;p&gt;Be careful with this trick though, because using it incorrectly can cause memory leaks.&lt;/p&gt;
&lt;h3 id=&#34;Use-RxJS-asapScheduler&#34;&gt;&lt;a href=&#34;#Use-RxJS-asapScheduler&#34; class=&#34;headerlink&#34; title=&#34;Use RxJS asapScheduler&#34;&gt;&lt;/a&gt;Use RxJS asapScheduler&lt;/h3&gt;&lt;p&gt;There are times when you need to schedule a task to run as soon as possible but asynchronously.&lt;/p&gt;
&lt;p&gt;You might think the best way to do this is by using interval(0) or some other mechanism.&lt;/p&gt;
&lt;p&gt;Maybe you want to use debounceTime(0) or throttleTime(0) to prevent the task from running too often.&lt;/p&gt;
&lt;p&gt;Did you know that RxJS has another scheduler, called the asapScheduler that allows you to run things faster than the default scheduler?&lt;/p&gt;
&lt;p&gt;The default scheduler uses the “macro queue”. This is what setTimeout() uses. The asapScheduler uses the “micro queue” which is what Promise.resolve uses.&lt;/p&gt;
&lt;p&gt;The difference is that if you schedule something with setTimeout(), and then run something with Promise.resolve(), the Promise.resolve() will run first. Make those asynchronous calls seems a bit more synchronous.&lt;/p&gt;
&lt;h3 id=&#34;Upgrade-to-IVY&#34;&gt;&lt;a href=&#34;#Upgrade-to-IVY&#34; class=&#34;headerlink&#34; title=&#34;Upgrade to IVY&#34;&gt;&lt;/a&gt;Upgrade to IVY&lt;/h3&gt;&lt;p&gt;In general, I suggest that you always keep your Angular version up to date.&lt;/p&gt;
&lt;p&gt;While we are on the topic of upgrades, in an enterprise environment, I suggest never to fall more than 2 major versions behind and never use the current major version. I keep my team using the latest version of the major version before the current version. This keeps us relatively current but far enough behind that someone else has figured out all the quirks of the version we are using.&lt;/p&gt;
&lt;p&gt;At a minimum, ensure you use a version that uses the IVY rendering engine to take advantage of the performance gains it introduced.&lt;/p&gt;
&lt;h2 id=&#34;Be-smart-about-HTML-and-CSS&#34;&gt;&lt;a href=&#34;#Be-smart-about-HTML-and-CSS&#34; class=&#34;headerlink&#34; title=&#34;Be smart about HTML and CSS&#34;&gt;&lt;/a&gt;Be smart about HTML and CSS&lt;/h2&gt;&lt;h3 id=&#34;Style-the-Host-of-your-Components&#34;&gt;&lt;a href=&#34;#Style-the-Host-of-your-Components&#34; class=&#34;headerlink&#34; title=&#34;Style the Host of your Components&#34;&gt;&lt;/a&gt;Style the Host of your Components&lt;/h3&gt;&lt;p&gt;Another place you can eak out a bit of performance without a lot of work is by eliminating the wrapping DIV element from your components.&lt;/p&gt;
&lt;p&gt;Most Angular developers are unaware that when the HTML template is rendered, the tag you use to render the component is also rendered.  So if you have a component who’s tag is &amp;lt;foo&amp;gt; and inside that component you included a DIV element that wraps all your control’s content, what actually renders on the screen is&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;foo&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    html for component here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;foo&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, it is true that the &amp;lt;foo&amp;gt; will get ignored by the browser. But it still has to evaluate it and determine that it shouldn’t do anything with it and it is extra context that has to be packaged by webpack.&lt;/p&gt;
&lt;p&gt;By styling &amp;lt;foo&amp;gt; to look like a DIV element by using&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-pseudo&#34;&gt;:host&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;display&lt;/span&gt;: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;width&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ... whatever other styling you&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  might have given your &lt;span class=&#34;selector-tag&#34;&gt;div&lt;/span&gt; tag here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;we can eliminate the inner DIV from our component and gain a bit of performance without going to a lot of trouble. The amount of performance gain you will see will depends on how many child components are being displayed at any one time.&lt;/p&gt;
&lt;h3 id=&#34;Don’t-overuse-SASS-SCSS&#34;&gt;&lt;a href=&#34;#Don’t-overuse-SASS-SCSS&#34; class=&#34;headerlink&#34; title=&#34;Don’t overuse SASS&amp;#x2F;SCSS&#34;&gt;&lt;/a&gt;Don’t overuse SASS&amp;#x2F;SCSS&lt;/h3&gt;&lt;p&gt;My general advice is to use CSS for your application and SASS for your component library or theme. Although, even in your component library, most of what you need to do can be done easily with CSS.&lt;/p&gt;
&lt;p&gt;I admit. When LESS and SASS first came out, I saw all the advantages. Since then, I’ve been persuaded by three events.&lt;/p&gt;
&lt;p&gt;First, if you write your Angular components small enough and use view encapsulation, you shouldn’t need any of the features that SASS would provide.&lt;/p&gt;
&lt;p&gt;Second, I’ve seen SASS abused more often than I’ve seen it used well. One project I worked on had 200 character class names because one of the developers was using &amp;amp; to concatenate the class names. The template code was cluttered with these long class names, making it difficult to read. Please! Don’t do this to your future self!&lt;/p&gt;
&lt;p&gt;Third, CSS has grown up. CSS variables now do most of what we may have needed to use SASS for. And, if you can keep your font and color information strictly in a theme.css file, you should never need to access them from your application components.&lt;/p&gt;
&lt;p&gt;Simple CSS is performant CSS.&lt;/p&gt;
&lt;h3 id=&#34;ng-content-Bad-Practices&#34;&gt;&lt;a href=&#34;#ng-content-Bad-Practices&#34; class=&#34;headerlink&#34; title=&#34;ng-content Bad Practices&#34;&gt;&lt;/a&gt;ng-content Bad Practices&lt;/h3&gt;&lt;p&gt;I’ve only recently realized that some of you are doing some pretty strange things with &lt;code&gt;ng-content&lt;/code&gt;, and then you wonder why your application is slow.&lt;/p&gt;
&lt;p&gt;As a refresher, &amp;#96;ng-content&amp;#96;&amp;#96; is what you use when you want to use content projection to pass content into a component. For example, if you wanted to pass in a list of items to a component, you might do something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;my-component&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; *&lt;span class=&#34;attr&#34;&gt;ngFor&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;let item of items&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&amp;#123;item&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;my-component&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, the first thing you should ask yourself here is, “Do I need to use content projection here?”&lt;/p&gt;
&lt;p&gt;We’ve found a significant performance penalty for using content projection. So, if you can avoid it, you should.&lt;/p&gt;
&lt;p&gt;Notice, I said avoid. Not eliminate. There are some valid reasons for using content projections. For example, low-level components often need to use content projection because they could be a container for displaying anything.&lt;/p&gt;
&lt;p&gt;But, if you are using content projection to display exactly the same content or choice of content every time, consider eliminating the content projection and just hard-coding the content into the component. This will make the code easier to understand, and it will make the content render faster.&lt;/p&gt;
&lt;p&gt;The other crazy implementation I’ve seen recently is using ngIf inside ng-content.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;ng-content&lt;/span&gt; *&lt;span class=&#34;attr&#34;&gt;ngIf&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;ng-content&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;It may not be obvious, but you should evaluate your DOM when the page is rendered with foobar equal to false. What you’ll see may surprise you. Inside of ng-content will be all the elements that are projected into the ng-content DOM element, but they will all be hidden.&lt;/p&gt;
&lt;p&gt;So what? So, they will all have to be evaluated by the browser even though they aren’t visible. This is a waste of resources and time rendering.&lt;/p&gt;
&lt;h3 id=&#34;Data-Binding-Issues&#34;&gt;&lt;a href=&#34;#Data-Binding-Issues&#34; class=&#34;headerlink&#34; title=&#34;Data Binding Issues&#34;&gt;&lt;/a&gt;Data Binding Issues&lt;/h3&gt;&lt;h4 id=&#34;innerHTML&#34;&gt;&lt;a href=&#34;#innerHTML&#34; class=&#34;headerlink&#34; title=&#34;innerHTML&#34;&gt;&lt;/a&gt;innerHTML&lt;/h4&gt;&lt;p&gt;Did you know that binding data to &lt;code&gt;innerHTML&lt;/code&gt; is slower than binding to the interpolation markers within the element?&lt;/p&gt;
&lt;p&gt;Often, we use&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;innerHTML&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;someValue&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;instead of&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;someValue&amp;#125;&amp;#125;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;to get around string sanitation issues (which is another problem) but then we get someone on our team who is just learning Angular and they do this by default.&lt;/p&gt;
&lt;p&gt;In both cases, however, you’ll find if you measure the performance that the interpolation markers are significantly faster than the innerHTML binding.&lt;/p&gt;
&lt;h4 id=&#34;Avoid-Binding-to-Functions&#34;&gt;&lt;a href=&#34;#Avoid-Binding-to-Functions&#34; class=&#34;headerlink&#34; title=&#34;Avoid Binding to Functions&#34;&gt;&lt;/a&gt;Avoid Binding to Functions&lt;/h4&gt;&lt;p&gt;We mentioned this above but, another place where you can eak out a bit of performance is by avoiding binding to functions. If you do, you can use a pipe to memoize the return value of the function. But, using a pipe is the lazy man’s way of optimizing against the function issue.&lt;/p&gt;
&lt;p&gt;Why? Because you are still have the overhead of calling a function every time change detection runs, you just aren’t doing the calculation every time. It is better than doing the calculation but it is worse than binding to a field where the change detector can see if anything changed before it does anything else.&lt;/p&gt;
&lt;p&gt;In the interviews we run, we have a section that covers this issue. Code is clearly calling a function inside the template.  We are happy with the “use a pipe” answer. But I’m even more impressed if someone says something like, “This should all be done on the server, or if it can’t be done on the server, it should be done when we retrieve the data from the server.”&lt;/p&gt;
&lt;p&gt;But this can’t always be done. So, if you are going to bind to a function, ask yourself, “how far down the stack can I move this functionality?”&lt;/p&gt;
&lt;p&gt;In order of possibilities, I’d suggest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do the calculation in the pipe if nothing else is possible&lt;/li&gt;
&lt;li&gt;Do the calculation in the component’s TS file when the @Input() value changes&lt;/li&gt;
&lt;li&gt;Do the calculation in a Selector that the component is looking at&lt;/li&gt;
&lt;li&gt;Do the calculation right after you retrieve the data from the server&lt;/li&gt;
&lt;li&gt;Do the calculation on the server&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;HostBinding&#34;&gt;&lt;a href=&#34;#HostBinding&#34; class=&#34;headerlink&#34; title=&#34;HostBinding()&#34;&gt;&lt;/a&gt;HostBinding()&lt;/h3&gt;&lt;p&gt;Related to binding to functions, keep in mind that @HostBinding is databinding.  If you @HostBinding is using a function, it has the same issues as binding to a function in the template.&lt;/p&gt;
&lt;h3 id=&#34;Dynamic-CSS-Classes&#34;&gt;&lt;a href=&#34;#Dynamic-CSS-Classes&#34; class=&#34;headerlink&#34; title=&#34;Dynamic CSS Classes&#34;&gt;&lt;/a&gt;Dynamic CSS Classes&lt;/h3&gt;&lt;p&gt;There are multiple ways of dynamically adding classes to an element. Each one of them, essentially do the same thing. But worse, they all do them individually. So, if you end up using all three methods in your code, you are going to make at least 3 calls to the DOM to add or remove the class.&lt;/p&gt;
&lt;p&gt;Currently, using &lt;code&gt;ngClass&lt;/code&gt; adds and removes each class in it individually. You’d think it would be optimized to add them more efficiently but currently (2023-11-11) they do not.&lt;/p&gt;
&lt;p&gt;I’m hoping this gets fixed by the next major version of Angular.&lt;/p&gt;
&lt;h3 id=&#34;Dynamic-Styles&#34;&gt;&lt;a href=&#34;#Dynamic-Styles&#34; class=&#34;headerlink&#34; title=&#34;Dynamic Styles&#34;&gt;&lt;/a&gt;Dynamic Styles&lt;/h3&gt;&lt;p&gt;You want to avoid adding styles to your elements. Period. This is a performance issue because it deoptimizes the browsers ability to optimize style recalculations. Instead, consider dynamically creating a class and adding the class to the element. If you code it correctly, everything else should be able to use that same class for the same dynamic styling.&lt;/p&gt;
&lt;h3 id=&#34;Avoid-The-Universal-Selector&#34;&gt;&lt;a href=&#34;#Avoid-The-Universal-Selector&#34; class=&#34;headerlink&#34; title=&#34;Avoid The Universal Selector&#34;&gt;&lt;/a&gt;Avoid The Universal Selector&lt;/h3&gt;&lt;p&gt;Adding the universal selector (*) to your CSS, especially to the end of a selector, increases the time to recompute the styles. Just avoid this.&lt;/p&gt;
&lt;h3 id=&#34;Avoid-unqualified-pseudo-classes-and-psuedo-elements&#34;&gt;&lt;a href=&#34;#Avoid-unqualified-pseudo-classes-and-psuedo-elements&#34; class=&#34;headerlink&#34; title=&#34;Avoid unqualified pseudo-classes and psuedo-elements&#34;&gt;&lt;/a&gt;Avoid unqualified pseudo-classes and psuedo-elements&lt;/h3&gt;&lt;p&gt;Doing so is practically the same as saying &lt;code&gt;*::psuedo&lt;/code&gt; which has the same performance issues as using the raw universal selector.&lt;/p&gt;
&lt;h3 id=&#34;CSS-Classes-always-win&#34;&gt;&lt;a href=&#34;#CSS-Classes-always-win&#34; class=&#34;headerlink&#34; title=&#34;CSS Classes always win&#34;&gt;&lt;/a&gt;CSS Classes always win&lt;/h3&gt;&lt;p&gt;Related to the styling issue above, all your styling should be done using CSS classes. This is because using classes are practically free compared to other styling methods.&lt;/p&gt;
&lt;p&gt;Related to this, Angular’s method of implementing emulated view encapsulation is to scope the host element to a random element. Attributes are known to be slower than classes with regard to style recalculations.&lt;/p&gt;
&lt;p&gt;There is a patch for this issue that you can apply to your project. It is available &lt;a href=&#34;https://github.com/laurentgoudet/angular-ie11-bug/commit/13896b53fc61c424ff5c6f98c58cc9ccc0f7d502&#34;&gt;here&lt;/a&gt;. While originally written to address an issue with IE11 in 2019, the problem still exist, to a lesser extent, in modern browsers. That is modern browsers process attributes significantly faster than IE11 did but they are still enough slower that using classes instead of attributes will improve your performance.&lt;/p&gt;
&lt;p&gt;If you want to apply this patch to your project, you can use either &lt;code&gt;pnpm&lt;/code&gt;‘s &lt;code&gt;patch&lt;/code&gt; command or &lt;code&gt;yarn&lt;/code&gt;‘s &lt;code&gt;patch-package&lt;/code&gt; command to apply the patch once you’ve made the changes to the code.&lt;/p&gt;
&lt;h3 id=&#34;SVG-references-vs-SVG-inlining&#34;&gt;&lt;a href=&#34;#SVG-references-vs-SVG-inlining&#34; class=&#34;headerlink&#34; title=&#34;SVG references vs SVG inlining&#34;&gt;&lt;/a&gt;SVG references vs SVG inlining&lt;/h3&gt;&lt;p&gt;Another similar, hidden performance issue is the use of SVG Inlining. When you inject an SVG image into the page using inlining, the browser must evaluate the DOM elements. If you inline the same SVG image multiple times, the browser has to evaluate the DOM elements multiple times.&lt;/p&gt;
&lt;p&gt;The cure is to inline the SVG images once, and then, when you need to display the image, you can reference it using the SVG reference mechanism. There are multiple ways you might do this. One is to load them up front using a sprite and inject the sprite into the DOM. Another would be to inject the SVG image into the DOM using JavaScript the first time it is used and then reference it from that point forward.&lt;/p&gt;
&lt;h3 id=&#34;Measure-your-CSS&#34;&gt;&lt;a href=&#34;#Measure-your-CSS&#34; class=&#34;headerlink&#34; title=&#34;Measure your CSS&#34;&gt;&lt;/a&gt;Measure your CSS&lt;/h3&gt;&lt;p&gt;The most overlooked area of performance I know of is measuring CSS. I can’t go into a lot of detail about this here because it would take far too much time to explain (and read about) but there are good articles on the internet that discuss measuring browser performance using flame charts and other mechanisms that are part of your browser’s developer tools.&lt;/p&gt;
&lt;h2 id=&#34;Compile-for-Production&#34;&gt;&lt;a href=&#34;#Compile-for-Production&#34; class=&#34;headerlink&#34; title=&#34;Compile for Production&#34;&gt;&lt;/a&gt;Compile for Production&lt;/h2&gt;&lt;p&gt;Another place where we shouldn’t have to mention that it is even an option is compiling for production. &lt;/p&gt;
&lt;p&gt;In one product I worked on, I discovered we were deploying code using the development environment instead of the production environment. I only discovered this because we were getting the change detection after change warning in production. That’s the most notable difference. But this check happens with every change detection cycle and further slows down the code.&lt;/p&gt;
&lt;h2 id=&#34;Cache-your-code-on-the-browser&#34;&gt;&lt;a href=&#34;#Cache-your-code-on-the-browser&#34; class=&#34;headerlink&#34; title=&#34;Cache your code on the browser&#34;&gt;&lt;/a&gt;Cache your code on the browser&lt;/h2&gt;&lt;p&gt;If you build your application with an option that attaches a hash code to the file name, you can cache your javascript code on the browser so that the next time that browser tries to access the code, it will load it from the cache.&lt;/p&gt;
&lt;p&gt;Do not cache your index.html file, as you need to make sure that file always gets downloaded.&lt;/p&gt;
&lt;p&gt;Specifically, the options you want to implement on your server for your static files are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;immutable&lt;/li&gt;
&lt;li&gt;max-age 365&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will prevent the browser from even checking the server for new code.&lt;/p&gt;
&lt;h2 id=&#34;CDN&#34;&gt;&lt;a href=&#34;#CDN&#34; class=&#34;headerlink&#34; title=&#34;CDN&#34;&gt;&lt;/a&gt;CDN&lt;/h2&gt;&lt;p&gt;Similarly, putting your files closer to the people retrieving them will improve your performance around “time to first render.”&lt;/p&gt;
&lt;h2 id=&#34;Perception-Beats-Reality&#34;&gt;&lt;a href=&#34;#Perception-Beats-Reality&#34; class=&#34;headerlink&#34; title=&#34;Perception Beats Reality&#34;&gt;&lt;/a&gt;Perception Beats Reality&lt;/h2&gt;&lt;p&gt;One place that gets overlooked when discussing performance is the “time to first render.”&lt;/p&gt;
&lt;p&gt;We recently ran into a situation where the code took so long to load that the client didn’t even see the spinner we had put in place to indicate we were loading data.&lt;/p&gt;
&lt;p&gt;To fix this, we added spinner code directly into our html file. It takes slightly longer to load the index.html file but displays more quickly than if we waited for our javascript to load.&lt;/p&gt;
&lt;h2 id=&#34;TrackBy-X-in-ngFor&#34;&gt;&lt;a href=&#34;#TrackBy-X-in-ngFor&#34; class=&#34;headerlink&#34; title=&#34;TrackBy X in ngFor&#34;&gt;&lt;/a&gt;TrackBy X in ngFor&lt;/h2&gt;&lt;p&gt;Another way to eak out more performance is by implementing the &lt;code&gt;trackBy&lt;/code&gt; property in your &lt;code&gt;ngFor&lt;/code&gt; loops.&lt;/p&gt;
&lt;p&gt;This is particularly useful when displaying a list that updates multiple times from the server. Because it is a brand-new object, every refresh will update the whole list.&lt;/p&gt;
&lt;p&gt;By using trackBy, you can tell Angular only to update the elements in the list that have changed by whatever you specify in TrackBy.&lt;/p&gt;
&lt;h2 id=&#34;Lazy-Loading&#34;&gt;&lt;a href=&#34;#Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;Lazy Loading&#34;&gt;&lt;/a&gt;Lazy Loading&lt;/h2&gt;&lt;h3 id=&#34;Lazy-Load-Routes&#34;&gt;&lt;a href=&#34;#Lazy-Load-Routes&#34; class=&#34;headerlink&#34; title=&#34;Lazy Load Routes&#34;&gt;&lt;/a&gt;Lazy Load Routes&lt;/h3&gt;&lt;p&gt;Most applications have multiple routes that they access. But even if yours doesn’t, you should set your code up to use Lazy Loading for three reasons.&lt;/p&gt;
&lt;p&gt;First, small apps grow up. Eventually, you will have multiple routes. If your app is so small that it doesn’t, implementing Lazy Loading of routes isn’t going to hurt anything.&lt;/p&gt;
&lt;p&gt;Second, implementing Lazy Loading will break your code down further into multiple files. Most of the code in those files will never change, so once they are loaded and cached as instructed above, the only code that will ever need to be downloaded is code in your route when it changes.&lt;/p&gt;
&lt;p&gt;Third, having more files to download could help in the initial load of your application, as the client now has more opportunities to download the files in parallel. Measure this! I’ve seen this overused to the point of causing worse performance!&lt;/p&gt;
&lt;h3 id=&#34;Pre-load-Lazy-Loaded-Routes&#34;&gt;&lt;a href=&#34;#Pre-load-Lazy-Loaded-Routes&#34; class=&#34;headerlink&#34; title=&#34;Pre-load Lazy Loaded Routes&#34;&gt;&lt;/a&gt;Pre-load Lazy Loaded Routes&lt;/h3&gt;&lt;p&gt;Once you’ve started your app, you should load all the other routes in the background so your customer doesn’t have to wait for the next page to render.&lt;/p&gt;
&lt;p&gt;This is even more important when your application is on a mobile device that doesn’t have an Internet connection at times.&lt;/p&gt;
&lt;p&gt;You can also be selective about which routes you pre-load.&lt;/p&gt;
&lt;h3 id=&#34;Lazy-Loading-Resources&#34;&gt;&lt;a href=&#34;#Lazy-Loading-Resources&#34; class=&#34;headerlink&#34; title=&#34;Lazy Loading Resources&#34;&gt;&lt;/a&gt;Lazy Loading Resources&lt;/h3&gt;&lt;p&gt;Angular does most of this for you. Especially as it concerns CSS, but if your application has a lot of images, you should consider lazy loading those images.&lt;/p&gt;
&lt;h3 id=&#34;Virtual-Scrolling&#34;&gt;&lt;a href=&#34;#Virtual-Scrolling&#34; class=&#34;headerlink&#34; title=&#34;Virtual Scrolling&#34;&gt;&lt;/a&gt;Virtual Scrolling&lt;/h3&gt;&lt;p&gt;There are multiple implementations of this. But the idea is only to render what the user can see as the user scrolls rather than rendering everything into the DOM and then letting the browser to the scrolling.&lt;/p&gt;
&lt;p&gt;I reduced the rendering time from 8 seconds to 1 second on one mega app I worked on by implementing this concept.&lt;/p&gt;
&lt;h2 id=&#34;Good-Architecture&#34;&gt;&lt;a href=&#34;#Good-Architecture&#34; class=&#34;headerlink&#34; title=&#34;Good Architecture&#34;&gt;&lt;/a&gt;Good Architecture&lt;/h2&gt;&lt;h3 id=&#34;General-Patterns-and-Practices&#34;&gt;&lt;a href=&#34;#General-Patterns-and-Practices&#34; class=&#34;headerlink&#34; title=&#34;General Patterns and Practices&#34;&gt;&lt;/a&gt;General Patterns and Practices&lt;/h3&gt;&lt;p&gt;I’ve worked on optimizing an application where one of the first things we did was to straighten out the basic architecture.&lt;br&gt;I often tell people, “If you had any idea how software gets created, you’d be amazed that anything works as well as it does.” This application was no different.&lt;/p&gt;
&lt;p&gt;Someone had wanted to implement a feature in the next version of NgRX, so they copied code from the next version into the version we were using.&lt;/p&gt;
&lt;p&gt;It sounds harmless. But the result was the NgRX change detection got thrown into a loop that took thousands of cycles to resolve instead of just one or two. This, in turn, slowed the rendering time down on the application to a point where just switching routes took multiple seconds. On the order of 5–10 seconds.&lt;/p&gt;
&lt;p&gt;Upgrading the application to the version we wanted to use solved the problem.&lt;/p&gt;
&lt;p&gt;Other similar issues with this code were solved simply by fixing how the code had been assembled.&lt;/p&gt;
&lt;h3 id=&#34;Avoid-Code-That-Changes-Angular&#34;&gt;&lt;a href=&#34;#Avoid-Code-That-Changes-Angular&#34; class=&#34;headerlink&#34; title=&#34;Avoid Code That Changes Angular&#34;&gt;&lt;/a&gt;Avoid Code That Changes Angular&lt;/h3&gt;&lt;p&gt;Similar to the issue above is code that adds directives or other functionality that changes how Angular fundamentally works.&lt;/p&gt;
&lt;p&gt;There are two major reasons for this. The first is that we always want to be able to enlist people to help us with our code. Most of the time, we are trying to hire good Angular developers. If our code no longer looks like Angular, why hire Angular developers?&lt;/p&gt;
&lt;p&gt;Second, if the code changes how Angular works, it is probably hooking into some Angular internal that could change in a subsequent version of Angular. This means that you will have to wait for the code’s author to update their code before you can upgrade your application.&lt;/p&gt;
&lt;p&gt;Third, you can’t be sure some little project that thought it would be cool to add some feature to Angular to get around some perceived issue has fully tested their code. You could introduce a bug into your application that you must track down.&lt;/p&gt;
&lt;p&gt;Finally, you have to ask yourself. Does this feature, or set of features, solve a problem that would still exist if I’d written my code correctly in the first place? The one package I have in mind as I write this has contributed more to the technical debt on my project than any other package or programmer we’ve had interact with our code.&lt;/p&gt;
&lt;p&gt;Be careful what code you allow into your application; it could cost you far more than it is worth in the long run.&lt;/p&gt;
&lt;h2 id=&#34;Data-Access&#34;&gt;&lt;a href=&#34;#Data-Access&#34; class=&#34;headerlink&#34; title=&#34;Data Access&#34;&gt;&lt;/a&gt;Data Access&lt;/h2&gt;&lt;p&gt;So far, we’ve talked about what to do once we’ve retrieved the data into our application, but many performance issues can be avoided simply by paying attention to how and when we load our data from the server.&lt;/p&gt;
&lt;h3 id=&#34;Only-Load-What-You-Need&#34;&gt;&lt;a href=&#34;#Only-Load-What-You-Need&#34; class=&#34;headerlink&#34; title=&#34;Only Load What You Need&#34;&gt;&lt;/a&gt;Only Load What You Need&lt;/h3&gt;&lt;p&gt;One guiding principle for data access is that you should only load the data you need from the server at the point you need it.&lt;/p&gt;
&lt;p&gt;An example of where you might see this performance issue is that we tend to do a massive join of data on the server and return everything we retrieved, even if we don’t need the data for the operation at hand.&lt;/p&gt;
&lt;p&gt;The less data you access, the faster your application will perform.&lt;/p&gt;
&lt;h3 id=&#34;Normalization-is-a-Curse&#34;&gt;&lt;a href=&#34;#Normalization-is-a-Curse&#34; class=&#34;headerlink&#34; title=&#34;Normalization is a Curse&#34;&gt;&lt;/a&gt;Normalization is a Curse&lt;/h3&gt;&lt;p&gt;One way to send less data back to the server is to send it back in raw form rather than nested and normalized.&lt;/p&gt;
&lt;p&gt;For this, I recommend a product called Normalizr. This takes the nested data and breaks it into multiple tables. The product was originally written for client-side code to make using Redux and NgRX easier. But there are now server-side implementations you can use that structure the data before sending it back so that you only send back one instance of the data you need rather than multiple instances because multiple parent rows use it.&lt;/p&gt;
&lt;p&gt;Better than using Normalizr, which is now a bit dated, you should consider only asking for un-normalized data from the server and dumping it into NgRX entities. You can use NgRX selectors to join the data together however needed. Now that everyone should at least be using HTTP2, the cost of simultaneously making multiple requests to the server is negligible.&lt;/p&gt;
&lt;h3 id=&#34;Pre-load-Lookup-Tables&#34;&gt;&lt;a href=&#34;#Pre-load-Lookup-Tables&#34; class=&#34;headerlink&#34; title=&#34;Pre-load Lookup Tables&#34;&gt;&lt;/a&gt;Pre-load Lookup Tables&lt;/h3&gt;&lt;p&gt;Along with this same idea. We often have nested data that is the result of some lookup table. By using Normalizr, you could load those tables up front and then only return the key to those tables and use Normalizr and NgRX Selectors to do the JOIN on the client side, further reducing the overall amount of data that you need to retrieve at any one time.&lt;/p&gt;
&lt;h3 id=&#34;Virtual-Arrays&#34;&gt;&lt;a href=&#34;#Virtual-Arrays&#34; class=&#34;headerlink&#34; title=&#34;Virtual Arrays&#34;&gt;&lt;/a&gt;Virtual Arrays&lt;/h3&gt;&lt;p&gt;I mentioned Virtual Scrolling above as one way to reduce the rendering time. By combining this with a concept I refer to as Virtual Arrays, you can similarly only retrieve the data the user can see, further reducing the perceived time to render.&lt;/p&gt;
&lt;p&gt;A Virtual Array is an object that looks like an array from an API perspective, but the implementation uses the database as the storage location. You can either retrieve the data from the database whenever it is requested from the array or memoize it so that it is only retrieved once.&lt;/p&gt;
&lt;h2 id=&#34;Memory-Management&#34;&gt;&lt;a href=&#34;#Memory-Management&#34; class=&#34;headerlink&#34; title=&#34;Memory Management&#34;&gt;&lt;/a&gt;Memory Management&lt;/h2&gt;&lt;p&gt;When most people think of performance, they immediately think of “how to impact the performance of good code.” But the most overlooked performance issue in JavaScript generally is memory. Specifically memory leaks.&lt;/p&gt;
&lt;p&gt;There are now several tools available for detecting and tracking down memory leaks. Find one and use it.&lt;/p&gt;
&lt;h2 id=&#34;Flow-Control&#34;&gt;&lt;a href=&#34;#Flow-Control&#34; class=&#34;headerlink&#34; title=&#34;Flow Control&#34;&gt;&lt;/a&gt;Flow Control&lt;/h2&gt;&lt;p&gt;Now that we have flow control syntax available, you should be using that instead of directives that perform the same function. Flow control skips one of the steps that directives use.&lt;/p&gt;
&lt;p&gt;What is flow control? Using &lt;code&gt;@if(...)&lt;/code&gt; instead of *ngIf is one example.&lt;/p&gt;
&lt;h2 id=&#34;Signals&#34;&gt;&lt;a href=&#34;#Signals&#34; class=&#34;headerlink&#34; title=&#34;Signals&#34;&gt;&lt;/a&gt;Signals&lt;/h2&gt;&lt;p&gt;Specifically, use input&amp;#x2F;output signals on your form and use effect()s and computed() instead of ngOnChanges().&lt;/p&gt;
&lt;p&gt;The more signals you use, the better off your performance will be. But input&amp;#x2F;output signals is the place to start.&lt;/p&gt;
&lt;h2 id=&#34;Micro-Tweaks&#34;&gt;&lt;a href=&#34;#Micro-Tweaks&#34; class=&#34;headerlink&#34; title=&#34;Micro Tweaks&#34;&gt;&lt;/a&gt;Micro Tweaks&lt;/h2&gt;&lt;h2 id=&#34;Avoid-Iterators&#34;&gt;&lt;a href=&#34;#Avoid-Iterators&#34; class=&#34;headerlink&#34; title=&#34;Avoid Iterators&#34;&gt;&lt;/a&gt;Avoid Iterators&lt;/h2&gt;&lt;p&gt;As a general rule, using forEach, for&amp;#x2F;of, Array.map, Array.forEach, etc is slower than using for&amp;#x2F;next because all but the for&amp;#x2F;next loop uses the iterator under the hood which has a significant cost. If you know your loop is going to be small, it probably doesn’t matter but if you are iterating over a large array, you should consider using for&amp;#x2F;next instead.&lt;/p&gt;
&lt;p&gt;I’ve created a forNext() function that takes an array and a callback function so that I still enjoy the benefits of forEach without the cost of using the iterator.&lt;/p&gt;
&lt;p&gt;For an extra (micro) performance boost, you should make the callback function a standard, named, function instead of an anonymous or fat arrow function.&lt;/p&gt;
&lt;h2 id=&#34;Leverage-Iterators&#34;&gt;&lt;a href=&#34;#Leverage-Iterators&#34; class=&#34;headerlink&#34; title=&#34;Leverage Iterators&#34;&gt;&lt;/a&gt;Leverage Iterators&lt;/h2&gt;&lt;p&gt;On the other hand, if there is a lot of setup code in your loop to get you to a point where you can start processing the loop, and you do that pre-processing multiple times per instance, you might consider creating your own iterator and doing your setup in the constructor so you can iterate through the data without having to do the setup each time.&lt;/p&gt;
&lt;p&gt;Use the right tool for the job 😁.&lt;/p&gt;
&lt;h2 id=&#34;Avoid-Duplicate-Work&#34;&gt;&lt;a href=&#34;#Avoid-Duplicate-Work&#34; class=&#34;headerlink&#34; title=&#34;Avoid Duplicate Work&#34;&gt;&lt;/a&gt;Avoid Duplicate Work&lt;/h2&gt;&lt;h3 id=&#34;Arrays&#34;&gt;&lt;a href=&#34;#Arrays&#34; class=&#34;headerlink&#34; title=&#34;Arrays&#34;&gt;&lt;/a&gt;Arrays&lt;/h3&gt;&lt;p&gt;One obvious place to avoid duplicate work is with the Array map, filter, reduce, etc. functions. When you use these functions chained to each other, you are creating a new array for each function in the chain.&lt;/p&gt;
&lt;p&gt;Again, this may not make a significant difference with a sort array, but it can be a significant performance hit with a large array.&lt;/p&gt;
&lt;h3 id=&#34;RxJS&#34;&gt;&lt;a href=&#34;#RxJS&#34; class=&#34;headerlink&#34; title=&#34;RxJS&#34;&gt;&lt;/a&gt;RxJS&lt;/h3&gt;&lt;p&gt;You’ll also find that you are performing more work than you need to because you are using RxJS operators such as combineLatest() incorrectly.&lt;/p&gt;
&lt;p&gt;Here’s a tip. If you are using combineLatest() to combine selectors, consider creating a selector instead. In this way, you’ll take advantage of the memoization that NgRX provides.&lt;/p&gt;
&lt;p&gt;Speaking of Selectors, avoid using factory selectors aka parameterized selectors. They can’t take advantage of memoization. Instead, make the parameter part of the state and use a normal selector. While this isn’t always possible, when you can do this, you’ll naturally take advantage of memoization and improve your performance.&lt;/p&gt;
&lt;h3 id=&#34;DevTools&#34;&gt;&lt;a href=&#34;#DevTools&#34; class=&#34;headerlink&#34; title=&#34;DevTools&#34;&gt;&lt;/a&gt;DevTools&lt;/h3&gt;&lt;p&gt;Unless you use the profiling tools that are part of the browser’s developer tools, you won’t know where your performance issues are. You can’t fix what you can’t measure.&lt;/p&gt;
&lt;p&gt;Get comfortable with the performance tools in your browser’s developer tools. They are your best friend when it comes to optimizing your application.&lt;/p&gt;
&lt;h3 id=&#34;Control-your-object’s-shape&#34;&gt;&lt;a href=&#34;#Control-your-object’s-shape&#34; class=&#34;headerlink&#34; title=&#34;Control your object’s shape&#34;&gt;&lt;/a&gt;Control your object’s shape&lt;/h3&gt;&lt;p&gt;Under the hood, every object you create generates a Class in the browser’s memory. Even object literals end up creating a Class. This is a way the browser tries to optimize your code. Great.&lt;/p&gt;
&lt;p&gt;Now the bad news. If you add a field to an object, or reorder the fields in an object, the browser has to create a new Class for that object or decide it isn’t worth it and forget about using that optimization for the object. Something as simple as using the spread operator and then putting the changed field at the end of the object can cause the browser to deoptimize the object.&lt;/p&gt;
&lt;p&gt;If you can, create your objects as classes and, when you change the object, use the class to do it so you can keep the shape of the object the same as it is being used.&lt;/p&gt;
&lt;h3 id=&#34;Service-Workers&#34;&gt;&lt;a href=&#34;#Service-Workers&#34; class=&#34;headerlink&#34; title=&#34;Service Workers&#34;&gt;&lt;/a&gt;Service Workers&lt;/h3&gt;&lt;p&gt;Similar in concept to the virtual arrays above but a standard API that you can implement globally. You can use service workers to cache data from the server and only ask the server for it again after you consider it stale.&lt;/p&gt;
&lt;p&gt;You can also use this to cache the index.html file locally, so you don’t have to retrieve it until there is a new version.&lt;/p&gt;
&lt;h3 id=&#34;WebAssembly&#34;&gt;&lt;a href=&#34;#WebAssembly&#34; class=&#34;headerlink&#34; title=&#34;WebAssembly&#34;&gt;&lt;/a&gt;WebAssembly&lt;/h3&gt;&lt;p&gt;I’ve yet to find my code is so slow that this actually makes sense, but it is theoretically possible that you’d find even more performance by creating services using WebAssembly. This would mean you’d need to write the code in something other than TypeScript and Angularize it by wrapping it in TypeScript&amp;#x2F;Angular code. But I’ve seen at least one article on the web where they did just that.&lt;/p&gt;
&lt;h3 id=&#34;WebWorkers-and-Shared-Workers&#34;&gt;&lt;a href=&#34;#WebWorkers-and-Shared-Workers&#34; class=&#34;headerlink&#34; title=&#34;WebWorkers and Shared Workers&#34;&gt;&lt;/a&gt;WebWorkers and Shared Workers&lt;/h3&gt;&lt;p&gt;This is another place where there is at least a theoretical possibility that it would provide additional performance. At the very least, it can provide the appearance of performance.&lt;/p&gt;
&lt;p&gt;Some places to consider using Shared Workers specifically are with Web Sockets and Data Retrieval. By placing Web Socket listeners in a Shared Worker, you create one connection to the server. The Shared Worker can then relay those messages to the client code on as many windows as are currently open.&lt;/p&gt;
&lt;p&gt;Similarly, by using a Shared Worker as the main place that retrieves your data, you can cache the data and rebroadcast the new data to all the open browser windows listening to the Shared Worker.&lt;/p&gt;
&lt;h2 id=&#34;Server-Side-Considerations&#34;&gt;&lt;a href=&#34;#Server-Side-Considerations&#34; class=&#34;headerlink&#34; title=&#34;Server Side Considerations&#34;&gt;&lt;/a&gt;Server Side Considerations&lt;/h2&gt;&lt;h3 id=&#34;Normalization-is-a-Curse-Here-Too&#34;&gt;&lt;a href=&#34;#Normalization-is-a-Curse-Here-Too&#34; class=&#34;headerlink&#34; title=&#34;Normalization is a Curse Here Too&#34;&gt;&lt;/a&gt;Normalization is a Curse Here Too&lt;/h3&gt;&lt;p&gt;I once worked on an application where the data was being retrieved from 20 tables joined together. When we looked at what was going on, we realized that most of that data was static when the client was using it and that we could dump most of the join results into a flat table and use it instead. This was another case where we went from an 8-second load time to 1 second.&lt;/p&gt;
&lt;p&gt;The performance considerations around JOINs vary depending on what database you are using. But it is something to keep in mind all the same.&lt;/p&gt;
&lt;h3 id=&#34;Server-Side-Caching&#34;&gt;&lt;a href=&#34;#Server-Side-Caching&#34; class=&#34;headerlink&#34; title=&#34;Server Side Caching&#34;&gt;&lt;/a&gt;Server Side Caching&lt;/h3&gt;&lt;p&gt;In many systems similar to the one I mentioned above, most of our calls to the server could be considered Functionally pure enough that we could cache the data.&lt;/p&gt;
&lt;p&gt;I &lt;a href=&#34;/what%E2%80%99s-the-truth-about-running-asp-net-webapi-asynchronously/&#34;&gt;did some timings on this several years ago&lt;/a&gt; and the results, even caching for a second, gave some pretty impressive results.&lt;/p&gt;
&lt;p&gt;For example, those lookup tables I discussed earlier don’t need to be retrieved from the database every time we make a call for them. We should be able to make a call for the data once and then return that data every time it is requested until the data is refreshed.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;There are probably other ways to optimize your application that I’ve forgotten or, more likely, do out of habit now.&lt;/p&gt;
&lt;p&gt;What I’ve written about above are the ones that stand out as the often overlooked issues.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/ngrx-performance-improvement/</guid>
            <title>NgRX Performance Improvement</title>
            <link>http://davembush.github.com/ngrx-performance-improvement/</link>
            <category>angular</category>
            <category>ngrx</category>
            <category>ngrx-store</category>
            <category>ngrx-entity</category>
            <category>ngrx-effects</category>
            <pubDate>Sun, 15 Dec 2024 11:29:45 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the course of working on &lt;a href=&#34;https://github.com/DaveMBush/SmartNgRX&#34;&gt;SmartNgRX&lt;/a&gt;, I’ve discovered a secret to making NgRX faster. A way that is so obvious now that I know about it, I’m surprised this isn’t the recommended way to use NgRX.&lt;/p&gt;
&lt;p&gt;As most discoveries occur, I’m building on the backs of giants. In this case, I’m specifically building on the back of the increasingly popular NgRX facade pattern (done well) and a statement with regard to Angular Signals that says “Don’t use Signal Effects.”&lt;/p&gt;
&lt;p&gt;There are, of course, other minor improvements but these are the top two catalysts for what I want to share with you today.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Facade-Pattern&#34;&gt;&lt;a href=&#34;#Facade-Pattern&#34; class=&#34;headerlink&#34; title=&#34;Facade Pattern&#34;&gt;&lt;/a&gt;Facade Pattern&lt;/h2&gt;&lt;p&gt;Several guys at the place I work now, have been using the NgRX facade pattern for a while. Even when I interview, people mention it. What most have never been able to convince me of is why I’d want to use it. Where I’ve gotten stuck is that most people use it as nothing more than a pass-through to plain old vanilla NgRX.&lt;/p&gt;
&lt;p&gt;That is, they’ll create a facade class that basically looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; [&lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt;]&lt;span class=&#34;title class_&#34;&gt;Facade&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;store&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Store&lt;/span&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [actionName]() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; [&lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt;]&lt;span class=&#34;title class_&#34;&gt;Actions&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;SomeAction&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And create methods for each action.&lt;/p&gt;
&lt;p&gt;If that’s you, I’m sorry. You’re doing it wrong.&lt;/p&gt;
&lt;p&gt;But going back to my article about what I learned building (SmartNgRX)[&lt;a href=&#34;https://davembush.github.io/what-i-learned-writing-smartngrx/]&#34;&gt;https://davembush.github.io/what-i-learned-writing-smartngrx/]&lt;/a&gt;, what you want to do in the facade pattern is to do everything that isn’t related to NgRX in the facade and then dispatch the action from the facade to update the resulting state.&lt;/p&gt;
&lt;p&gt;By doing this, you’re able to keep your NgRX code clean and simple.&lt;/p&gt;
&lt;h2 id=&#34;Dispatch-Time&#34;&gt;&lt;a href=&#34;#Dispatch-Time&#34; class=&#34;headerlink&#34; title=&#34;Dispatch Time&#34;&gt;&lt;/a&gt;Dispatch Time&lt;/h2&gt;&lt;p&gt;In SmartNgRX, one of the things I do is buffer the dispatch actions that retrieve the IDs so I can dispatch them all at once. Originally, I put the buffering code in an effect. But one day I thought, “What if I buffer the IDs and THEN dispatch the actions?”  It turns out that is faster.&lt;/p&gt;
&lt;p&gt;That’s when I realized (and found out I was wrong - see below) that when you dispatch an action, NgRX has to run it through every typeOf() in your effects regardless of if the effect needs to process it or not.  It’s a lot like the chick going around the farm yard asking “Are you my mother?” instead of mama chicken coming to the chick and saying “I’m your mother, come here and I’ll take care of you.”&lt;/p&gt;
&lt;p&gt;Reducers are a bit different. If you are using the newest on() syntax for reducers, this translates to a map statement so you end up with the benefits of O(1) time. If you are using older syntax, you have an increasingly complex switch statement that is O(n) time until switch statements are optimized.&lt;/p&gt;
&lt;p&gt;The take away from this, I thought, is that you want as few effects as possible in your code.&lt;/p&gt;
&lt;p&gt;I almost titled this article “Ban NgRX Effects” but that wouldn’t give you the full picture.&lt;/p&gt;
&lt;h2 id=&#34;Signals&#34;&gt;&lt;a href=&#34;#Signals&#34; class=&#34;headerlink&#34; title=&#34;Signals&#34;&gt;&lt;/a&gt;Signals&lt;/h2&gt;&lt;p&gt;And then I stumbled across a video about Signals where Alex Rickabaugh from the Angular Core team said “(Don’t use Effects)[&lt;a href=&#34;https://www.youtube.com/watch?v=aKxcIQMWSNU&amp;ab_channel=TechStackNation%5D&#34;&gt;https://www.youtube.com/watch?v=aKxcIQMWSNU&amp;amp;ab_channel=TechStackNation]&lt;/a&gt;.”&lt;/p&gt;
&lt;p&gt;And then it struck me. If I’m using a facade, I don’t need to use effects.&lt;/p&gt;
&lt;p&gt;Think about why we typically use effects. Isn’t it so that we can ultimately call a service that will grab data from the server? And then, what do we do with that data? We fire an action to update the state.&lt;/p&gt;
&lt;h2 id=&#34;Ban-Effects&#34;&gt;&lt;a href=&#34;#Ban-Effects&#34; class=&#34;headerlink&#34; title=&#34;Ban Effects&#34;&gt;&lt;/a&gt;Ban Effects&lt;/h2&gt;&lt;p&gt;Instead, why not just call the service directly from our facade?&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; [&lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt;]&lt;span class=&#34;title class_&#34;&gt;Facade&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;service&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt;]&lt;span class=&#34;title class_&#34;&gt;Service&lt;/span&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [methodName]() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// For optimistic updates, dispatch an action to update the state here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;service&lt;/span&gt;.[methodName]().&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// process data from the backend and then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// dispatch an action to update the state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Even better would be to use promises:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; [&lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt;]&lt;span class=&#34;title class_&#34;&gt;Facade&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;service&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt;]&lt;span class=&#34;title class_&#34;&gt;Service&lt;/span&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [methodName]() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// For optimistic updates, dispatch an action to update the state here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; resultawait &lt;span class=&#34;title function_&#34;&gt;lastValueFrom&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;service&lt;/span&gt;.[methodName]());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// process data from the backend and then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// dispatch an action to update the state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, you don’t need effects.&lt;/p&gt;
&lt;p&gt;The additional beauty of this is that you should be able to use NgRX Signals instead of NgRX from your facade with very little effort.  The methods you put in withMethods() will be correspond to your Actions. computed() signals will be your selectors. Done. With some nice dependency injection added in, you can switch between the two with ease.&lt;/p&gt;
&lt;p&gt;There are, of course, other improvements you can make to your code. For example, your code will generally run faster if you are using NgRX Entities for your state management and retrieve the data from the server as you need it. You could roll your own, but I’ve already done that work for you.  Check out the &lt;a href=&#34;https://github.com/DaveMBush/SmartNgRX&#34;&gt;SmartNgRX&lt;/a&gt; library.&lt;/p&gt;
&lt;h2 id=&#34;Timings&#34;&gt;&lt;a href=&#34;#Timings&#34; class=&#34;headerlink&#34; title=&#34;Timings&#34;&gt;&lt;/a&gt;Timings&lt;/h2&gt;&lt;p&gt;And then I went to actually prove everything I’ve said above.&lt;/p&gt;
&lt;p&gt;I created a simple Angular application that dispatches an action to an effect and then had that effect call a service that would return an action asynchronously that would then be dispatched to a reducer.&lt;/p&gt;
&lt;p&gt;I also added 50 other effects that just had ofType() to emulate the need to check for every action.&lt;/p&gt;
&lt;p&gt;No matter how I ran this code, I could not see any timing difference between using one effect or 50 effects. So, my statement above that started me on this journey was wrong. We, evidently, do not suffer a performance hit based on the number of effects we have.&lt;/p&gt;
&lt;p&gt;However, I did find some interesting performance marks that still indicate that you might want to call your effects services directly.&lt;/p&gt;
&lt;p&gt;Along with the code I mentioned above, I modified the code to call the service directly and then dispatch the resulting action.&lt;/p&gt;
&lt;p&gt;Here are the results from running the code on my computer:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;TL w&amp;#x2F; Effects&lt;/th&gt;
&lt;th&gt;TL Direct&lt;/th&gt;
&lt;th&gt;SL w&amp;#x2F; Effects&lt;/th&gt;
&lt;th&gt;SL Direct&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Average&lt;/td&gt;
&lt;td&gt;176.2232ms&lt;/td&gt;
&lt;td&gt;0.0158ms&lt;/td&gt;
&lt;td&gt;0.3688ms&lt;/td&gt;
&lt;td&gt;0.1875ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max Time&lt;/td&gt;
&lt;td&gt;202ms&lt;/td&gt;
&lt;td&gt;0.7000ms&lt;/td&gt;
&lt;td&gt;1.1000ms&lt;/td&gt;
&lt;td&gt;0.4000ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;TL &amp;#x3D; Tight Loop (for&amp;#x2F;next loop)&lt;br&gt;SL &amp;#x3D; Spaced Loop ( using rxjs of().pipe(repeat({count: 1000, delay: 100 })))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In both the tight loop and the spaced loop, the direct call outperforms dispatching to the effect. But, the difference is not significant for most applications and should be considered a micro-optimization.&lt;/p&gt;
&lt;p&gt;On the other hand, if you are doing a lot of dispatching to effects at any one time, these difference could add up and you might want to consider using the direct call.&lt;/p&gt;
&lt;h2 id=&#34;Other-Considerations&#34;&gt;&lt;a href=&#34;#Other-Considerations&#34; class=&#34;headerlink&#34; title=&#34;Other Considerations&#34;&gt;&lt;/a&gt;Other Considerations&lt;/h2&gt;&lt;p&gt;While banning effects for performance reasons may not be useful for most existing applications, there are other reasons you might want to consider banning them.&lt;/p&gt;
&lt;p&gt;As I’ve moved from organization to organization, I’ve seen some pretty ugly NgRX code. Much of it is due to the complexity of effects. If the people using NgRX were not forced to use RxJS because of the effects, the code would be easier to read and we’d avoid a lot of the effect chaining that I’ve seen. While effects themselves aren’t particularly slow, chaining the effects and using RxJS operators can be.&lt;/p&gt;
&lt;p&gt;Since I’ve already removed the effects from SmartNgRX, and there is a slight performance benefit from doing so, I’m not going to revert that change. Especially since it should allow me to use 99% of the same code to implement the Signals version.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/smart-ngrx/</guid>
            <title>smart-ngrx</title>
            <link>http://davembush.github.com/smart-ngrx/</link>
            <category>angular</category>
            <category>ngrx</category>
            <pubDate>Tue, 29 Oct 2024 13:36:27 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Imagine an NgRX world where you almost never knew you were using NgRX. A world where you never had to write a &lt;code&gt;reducer&lt;/code&gt;, &lt;code&gt;action&lt;/code&gt;, or &lt;code&gt;effect&lt;/code&gt;. A world where you never had to call &lt;code&gt;store.dispatch()&lt;/code&gt;. A world where the data you worked automatically persist to the server. A world where the data is retrieved from the server as it is needed and removed from memory when it is not, or never removed if that’s what you want. A world where the data automatically refreshes from the server, or you can use websocket messages to refresh the data and, in either case, the only data that refreshes is the data the code is actively using. A world where optimistic UI is built into the framework.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Introducing &lt;a href=&#34;https://www.npmjs.com/package/@smarttools/smart-ngrx&#34;&gt;SmartNgRX&lt;/a&gt;. A framework I’ve been working on for over a year that does everything I just mentioned and more. It’s a framework that is built on top of NgRX and works with your existing NgRX code.&lt;/p&gt;
&lt;p&gt;The full documentation is available at &lt;a href=&#34;https://davembush.github.io/SmartNgRX/home&#34;&gt;SmartNgRX Documentation&lt;/a&gt; but let me give you a brief overview of how it works.&lt;/p&gt;
&lt;h2 id=&#34;Brief-Overview&#34;&gt;&lt;a href=&#34;#Brief-Overview&#34; class=&#34;headerlink&#34; title=&#34;Brief Overview&#34;&gt;&lt;/a&gt;Brief Overview&lt;/h2&gt;&lt;p&gt;First, there are two providers you will need to add to your application. The first is &lt;code&gt;provideSmartNgRX()&lt;/code&gt; which is added to the &lt;code&gt;providers&lt;/code&gt; array in you &lt;code&gt;AppModule&lt;/code&gt;. The second is &lt;code&gt;provideSmartFeatureEntities()&lt;/code&gt; which is added to the module, or route, nearest where you’ll use it.&lt;/p&gt;
&lt;p&gt;These two providers setup the configuration information that SmartNgRX will need to work. They control things such as how often to refresh the data, when to remove unused data from memory, what service to call to retrieve the data for an NgRX slice looks like and what a placeholder row looks like for a particular slice of data.&lt;/p&gt;
&lt;p&gt;For you to define the service an the SmartNgRX effect will call, you’ll need to create an EffectService. This service is where you control how the CRUD operations interact with the server. This and the selectors are the only code you’ll need to write.&lt;/p&gt;
&lt;p&gt;Which brings us to the selectors. Instead of using the &lt;code&gt;createSelector&lt;/code&gt; function from NgRX, you’ll use the &lt;code&gt;createSmartNgRXSelector&lt;/code&gt; function from SmartNgRX. This function defines the relationship between a parent selector and any children it may have. You can use selectors created with createSmartNgRXSelector with selectors created with createSelector and mix and match them as needed.&lt;/p&gt;
&lt;p&gt;That’s it. All the other code you normally write is handled by SmartNgRX.&lt;/p&gt;
&lt;p&gt;Give it a try and let me know what you think.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/what-i-learned-writing-smartngrx/</guid>
            <title>What I Learned Writing SmartNgRX</title>
            <link>http://davembush.github.com/what-i-learned-writing-smartngrx/</link>
            <category>angular</category>
            <category>ngrx</category>
            <category>smart-ngrx</category>
            <pubDate>Mon, 14 Oct 2024 07:12:03 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Last week, I announced a project I had been working on for over 10 months. I call it &lt;a href=&#34;/smart-ngrx/&#34;&gt;SmartNgRX&lt;/a&gt; and it solves many common issues most of us have using SmartNgRX, including the boilerplate issue, over-fetching, and memory pressure caused by stale data.&lt;/p&gt;
&lt;p&gt;Today I want to talk about a few things I learned while creating SmartNgRX that can be applied globally to any project.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;No-Boilerplate-Needed&#34;&gt;&lt;a href=&#34;#No-Boilerplate-Needed&#34; class=&#34;headerlink&#34; title=&#34;No Boilerplate Needed&#34;&gt;&lt;/a&gt;No Boilerplate Needed&lt;/h2&gt;&lt;p&gt;While SmartNgRX solves the boilerplate issue, you can apply this to your code simply by making all your NgRX slices behave the same. Once you’ve done that, you can create a single factory function for each of your Actions, Reducers, and Effects and use that to generate the Actions, Reducers, and Effects you need.&lt;/p&gt;
&lt;p&gt;You can see how I’ve done this by looking at the source code for SmartNgRX.&lt;/p&gt;
&lt;h3 id=&#34;Generic-Actions&#34;&gt;&lt;a href=&#34;#Generic-Actions&#34; class=&#34;headerlink&#34; title=&#34;Generic Actions&#34;&gt;&lt;/a&gt;Generic Actions&lt;/h3&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; actionGroupCache = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;unknown&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; actionFactory&amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SmartNgRXRowBase&lt;/span&gt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;feature&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;): &lt;span class=&#34;title class_&#34;&gt;ActionGroup&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; source = &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;feature&amp;#125;&lt;/span&gt;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;psi&amp;#125;&lt;/span&gt;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;entity&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; cached = actionGroupCache.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(source) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ActionGroup&lt;/span&gt;&amp;lt;T&amp;gt; | &lt;span class=&#34;literal&#34;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cached) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; cached;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; actionGroup = &lt;span class=&#34;title function_&#34;&gt;createActionGroup&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;source&lt;/span&gt;: source &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;events&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;#x27;Update Many&amp;#x27;&lt;/span&gt;: props&amp;lt;&lt;span class=&#34;title class_&#34;&gt;UpdateChanges&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Remove&lt;/span&gt;: props&amp;lt;&lt;span class=&#34;title class_&#34;&gt;IdsProp&lt;/span&gt;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;#x27;Load By Ids&amp;#x27;&lt;/span&gt;: props&amp;lt;&lt;span class=&#34;title class_&#34;&gt;IdsProp&lt;/span&gt;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;#x27;Load By Ids Preload&amp;#x27;&lt;/span&gt;: props&amp;lt;&lt;span class=&#34;title class_&#34;&gt;IdsProp&lt;/span&gt;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;#x27;Store Rows&amp;#x27;&lt;/span&gt;: props&amp;lt;&lt;span class=&#34;title class_&#34;&gt;RowsProp&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Update&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;old&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;RowProp&lt;/span&gt;&amp;lt;T&amp;gt;; &lt;span class=&#34;attr&#34;&gt;new&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;RowProp&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;#x27;Add To Store&amp;#x27;&lt;/span&gt;: props&amp;lt;&lt;span class=&#34;title class_&#34;&gt;RowProp&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt;: props&amp;lt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;row&lt;/span&gt;: T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;parentId&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;parentFeature&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;parentEntityName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;#x27;Add Success&amp;#x27;&lt;/span&gt;: props&amp;lt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;newRow&lt;/span&gt;: T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;oldRow&lt;/span&gt;: T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;parentId&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;parentFeature&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;parentEntityName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Delete&lt;/span&gt;: props&amp;lt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;parentInfo&lt;/span&gt;: &amp;#123; &lt;span class=&#34;attr&#34;&gt;feature&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;; &lt;span class=&#34;attr&#34;&gt;ids&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;[] &amp;#125;[];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  actionGroupCache.&lt;span class=&#34;title function_&#34;&gt;set&lt;/span&gt;(source, actionGroup);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; actionGroup;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;A casual glance will show you that all I’ve done is wrap the &lt;code&gt;createActionGroup&lt;/code&gt; function from NgRX with a function that takes a feature and entity name and returns an ActionGroup. This is a simple example of reducing boilerplate in your code. We use the feature name and the entity name to generate the source name for the ActionGroup which makes it unique.&lt;/p&gt;
&lt;p&gt;You’ll notice that I’ve also cached the &lt;code&gt;ActionGroup&lt;/code&gt; so that if you call it again, you’ll get the same &lt;code&gt;ActionGroup&lt;/code&gt; back. This simple optimization allows you to use the factory function to retrieve the action wherever you need it instead of passing it around. In my case, I needed this because the library doesn’t expose the actions used by NgRX and I wanted to let the developers using SmartNgRX use the actions in their code if they desired.&lt;/p&gt;
&lt;h3 id=&#34;Reducers&#34;&gt;&lt;a href=&#34;#Reducers&#34; class=&#34;headerlink&#34; title=&#34;Reducers&#34;&gt;&lt;/a&gt;Reducers&lt;/h3&gt;&lt;p&gt;Similarly, I’ve wrapped &lt;code&gt;createReducer&lt;/code&gt; with a factory function that takes the feature and entity name and returns a reducer. Again, this is all you need to ensure the reducer is unique.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; reducerFactory&amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SmartNgRXRowBase&lt;/span&gt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;feature&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;): &lt;span class=&#34;title class_&#34;&gt;ActionReducer&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;EntityState&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; adapter = entityDefinitionCache&amp;lt;T&amp;gt;(feature, entity).&lt;span class=&#34;property&#34;&gt;entityAdapter&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; initialState = adapter.&lt;span class=&#34;title function_&#34;&gt;getInitialState&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; actions = actionFactory&amp;lt;T&amp;gt;(feature, entity);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;createReducer&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    initialState,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;add&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; row &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; adapter.&lt;span class=&#34;title function_&#34;&gt;upsertOne&lt;/span&gt;(row, state)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;addSuccess&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; newRow &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      adapter.&lt;span class=&#34;title function_&#34;&gt;upsertOne&lt;/span&gt;(newRow, state),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;updateMany&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; changes &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; adapter.&lt;span class=&#34;title function_&#34;&gt;updateMany&lt;/span&gt;(changes, state);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;remove&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; ids &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; adapter.&lt;span class=&#34;title function_&#34;&gt;removeMany&lt;/span&gt;(ids, state)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;update&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt;: &amp;#123; row &amp;#125; &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      adapter.&lt;span class=&#34;title function_&#34;&gt;upsertOne&lt;/span&gt;(row, state),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;storeRows&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; rows &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; adapter.&lt;span class=&#34;title function_&#34;&gt;upsertMany&lt;/span&gt;(rows, state)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Effects&#34;&gt;&lt;a href=&#34;#Effects&#34; class=&#34;headerlink&#34; title=&#34;Effects&#34;&gt;&lt;/a&gt;Effects&lt;/h3&gt;&lt;p&gt;Finally, I’ve wrapped &lt;code&gt;createEffect&lt;/code&gt; with a factory function that takes the feature and entity name and returns an effect. This is the same as the other two examples.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; effectsFactory&amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SmartNgRXRowBase&lt;/span&gt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;feature&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;entityName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;effectsServiceToken&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;InjectionToken&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;EffectService&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;): &lt;span class=&#34;title class_&#34;&gt;Record&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;EffectsFactoryKeys&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;FunctionalEffect&lt;/span&gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; actions = actionFactory&amp;lt;T&amp;gt;(feature, entityName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityDefinition = entityDefinitionCache&amp;lt;T&amp;gt;(feature, entityName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; adapter = entityDefinition.&lt;span class=&#34;property&#34;&gt;entityAdapter&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * Ends up calling the `EffectService` to delete the row specified&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * by the ID in the action.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;delete&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;createEffect&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title function_&#34;&gt;deleteEffect&lt;/span&gt;(effectsServiceToken, actions),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      dispatchFalse,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * Ends up calling the `EffectService` to determine what rows&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * need to be loaded yet and returns dummy rows for those rows.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;loadByIdsPreload&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;createEffect&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title function_&#34;&gt;loadByIdsPreloadEffect&lt;/span&gt;(feature, entityName, actions),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      dispatchFalse,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * Ends up calling the `EffectService` to load the rows specified&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * from the server.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;loadByIds&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;createEffect&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title function_&#34;&gt;loadByIdsEffect&lt;/span&gt;(effectsServiceToken, actions, feature, entityName),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      dispatchFalse,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * Ends up calling the `EffectService` to update the row specified&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * by the row in the action.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;update&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;createEffect&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      updateEffect&amp;lt;T&amp;gt;(effectsServiceToken, actions, feature, entityName),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      dispatchFalse,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * Ends up calling the `EffectService` to add the row specified&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * by the row in the action.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;add&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;createEffect&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;addEffect&lt;/span&gt;(effectsServiceToken, actions), dispatchTrue),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * Handles adding the new row to the store and removing the dummy row&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * that was added so we could edit it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;addSuccess&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;createEffect&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      addSuccessEffect&amp;lt;T&amp;gt;(effectsServiceToken, actions, adapter),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      dispatchFalse,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;By now, you get the general idea. A couple of things to note about the &lt;code&gt;effectsFactory&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First we pass in an &lt;code&gt;InjectionToken&lt;/code&gt; that is used to get the &lt;code&gt;EffectService&lt;/code&gt; that is used by the effects. By doing this, all we need to do is make sure your effects services conform to the &lt;code&gt;EffectService&lt;/code&gt; abstract class and we can use them in the effects.&lt;/p&gt;
&lt;p&gt;This is how SmartNgRX can hide NgRX from the developer and just let them implement the specifics for each entity.&lt;/p&gt;
&lt;p&gt;You’ll also notice that to keep the code clean, I’ve implemented the details in other functions that I call. If you want to see the details, you can &lt;a href=&#34;https://github.com/DaveMBush/SmartNgRX/tree/cbec5143855b1916e0c67776b22a6134a18d5ee4/libs/smart-ngrx/src/effects&#34;&gt;look at the source code for the effects in SmartNgRX&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Second, we use the cached &lt;code&gt;ActionGroup&lt;/code&gt; by calling the &lt;code&gt;actionFactory&lt;/code&gt; function to get the actions we need for the effects instance. Now we don’t need to know about a specific instance and find some way to pass it into the effect.&lt;/p&gt;
&lt;p&gt;Finally, we need access to the EntityAdapter for the entity we are working with. We create the entity adapter when we configure SmartNgRX. The two lines of code, above, that retrieve the adapter are retrieving it from a map where we set it during SmartNgRX setup&lt;/p&gt;
&lt;p&gt;And that’s how you avoid NgRX boilerplate in your code.&lt;/p&gt;
&lt;h2 id=&#34;Too-Many-Actions-and-Reducers&#34;&gt;&lt;a href=&#34;#Too-Many-Actions-and-Reducers&#34; class=&#34;headerlink&#34; title=&#34;Too Many Actions and Reducers&#34;&gt;&lt;/a&gt;Too Many Actions and Reducers&lt;/h2&gt;&lt;p&gt;I’ve been saying this for several years and still managed to get this “wrong” while writing my code.&lt;/p&gt;
&lt;p&gt;Here’s the basic issue. Reducers and Effects have specific purposes. Where I went wrong is with my reducers. But I’ll address both Reducers and Effects here.&lt;/p&gt;
&lt;p&gt;But first, let’s take a detour and talk about an ideal NgRX setup.&lt;/p&gt;
&lt;h3 id=&#34;Ideal-NgRX-Setup&#34;&gt;&lt;a href=&#34;#Ideal-NgRX-Setup&#34; class=&#34;headerlink&#34; title=&#34;Ideal NgRX Setup&#34;&gt;&lt;/a&gt;Ideal NgRX Setup&lt;/h3&gt;&lt;p&gt;The Redux pattern, generally, and NgRX, specifically, were created to store states predictably. “State only” is my motto. This means that logic should be kept out of our NgRX code. This keeps our NgRX code simple and reduces bugs. You wouldn’t believe some of the code I’ve seen that violates this principle. Then again, maybe you could. You’ve probably written it.&lt;/p&gt;
&lt;p&gt;So, if we want to keep logic out of NgRX, where should it go?&lt;/p&gt;
&lt;h3 id=&#34;Action-Services&#34;&gt;&lt;a href=&#34;#Action-Services&#34; class=&#34;headerlink&#34; title=&#34;Action Services&#34;&gt;&lt;/a&gt;Action Services&lt;/h3&gt;&lt;p&gt;It goes in a service. When you call an action, it should already have the data in the form that NgRX ultimately needs. The reducer can then take this data and store it in the store without doing anything to it.&lt;/p&gt;
&lt;p&gt;Notice how small my reducer code is.&lt;/p&gt;
&lt;h3 id=&#34;Effects-Service&#34;&gt;&lt;a href=&#34;#Effects-Service&#34; class=&#34;headerlink&#34; title=&#34;Effects Service&#34;&gt;&lt;/a&gt;Effects Service&lt;/h3&gt;&lt;p&gt;Similarly, when you call an effect, it should already have the data to do whatever it needs. Again, in an ideal world, all the effect does is call what I’ve come to term the effect service. The effect service can do whatever work needs to be done.&lt;/p&gt;
&lt;p&gt;For example, say you are calling the server, but the shape of the data you get back isn’t what your application will need. The place to do the transformation is in the effect service. Not in the effect.&lt;/p&gt;
&lt;p&gt;By doing this, you’ll only need actions that perform basic CRUD operations. You shouldn’t see actions for every possible way you could change the state of your application. Most of that can, and should, be handled in an Action Service.&lt;/p&gt;
&lt;p&gt;There has been a lot of noise in the community about using the “facade” pattern with NgRX but most implementations I’ve seen just put a class in front of the same actions we’ve always had. This is not a facade pattern. This is just a bulky, excessive layer in front of what we’ve always been doing.&lt;/p&gt;
&lt;p&gt;What I’m doing is closer to a facade pattern because now all those action calls become calls to a service. The service does the transformations and dispatches whatever action is appropriate to update the store.&lt;/p&gt;
&lt;h3 id=&#34;Command-or-Event-Pattern&#34;&gt;&lt;a href=&#34;#Command-or-Event-Pattern&#34; class=&#34;headerlink&#34; title=&#34;Command or Event Pattern&#34;&gt;&lt;/a&gt;Command or Event Pattern&lt;/h3&gt;&lt;p&gt;By following these tip, the question of using the command or event patterns with NgRX becomes moot. The argument for using the event pattern is that your actions now give you some idea of what triggered them by using the action name as the where. In the pattern I’ve described, 100% of your actions (should) get triggered by the same code every time if you’ve structured things correctly.  That code gets triggered by multiple other places just like any other function in your code does. Now, you can evaluate the call stack. You can still use the event pattern. But, there isn’t a strong argument for it anymore.&lt;/p&gt;
&lt;p&gt;The best part about using this pattern is that I’m in a great position to convert SmartNgRX to use Signals instead of Observables and most of my code won’t change.&lt;/p&gt;
&lt;p&gt;As far as NgRX code is concerned, the only NgRX place you should have any logic at all is in Selectors, but that’s a topic for another day.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/using-workers-from-an-angular-library/</guid>
            <title>Using Workers from an Angular Library</title>
            <link>http://davembush.github.com/using-workers-from-an-angular-library/</link>
            <category>angular</category>
            <category>web-workers</category>
            <category>libraries</category>
            <pubDate>Sat, 03 Dec 2022 15:21:48 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;This past week several of us have been working hard to implement a SharedWorker from a library. We found a number of articles on the web that demonstrated how to get Web Workers setup for Angular that all assumed the Web Worker was being generated in the main Angular app. We wanted to use a library and include that file in the main app.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;If that’s what you are trying to do, I hope this post saves you the time we spent this week figuring it out.&lt;/p&gt;
&lt;h2 id=&#34;The-Problem&#34;&gt;&lt;a href=&#34;#The-Problem&#34; class=&#34;headerlink&#34; title=&#34;The Problem&#34;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;&lt;p&gt;As all the article state, you need to use a generator to create the Web Worker files and modify your configs. The Angular documentation gives you the steps here: &lt;a href=&#34;https://angular.io/guide/web-worker&#34;&gt;https://angular.io/guide/web-worker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What isn’t clear from this documentation is that this ONLY works for apps. If you specify a library, the compiler doesn’t know what to do with it.&lt;/p&gt;
&lt;h2 id=&#34;The-Solution&#34;&gt;&lt;a href=&#34;#The-Solution&#34; class=&#34;headerlink&#34; title=&#34;The Solution&#34;&gt;&lt;/a&gt;The Solution&lt;/h2&gt;&lt;p&gt;The solution is relatively simple. Create the worker files in the library. In the library put a file that implements the worker. In the worker file that the schematic generated in your app, import the worker file from the library.&lt;/p&gt;
&lt;p&gt;Everything else stays the same as is documented elsewhere.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/avoiding-ngrx-boilerplate/</guid>
            <title>Avoiding NgRx Boilerplate</title>
            <link>http://davembush.github.com/avoiding-ngrx-boilerplate/</link>
            <category>angular</category>
            <category>ngrx</category>
            <category>state-management</category>
            <pubDate>Sat, 19 Nov 2022 12:17:54 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;One of the recurring complaints I hear about NgRX is that it requires too much boiler plate code. But, it doesn’t have to be this way. In fact, I’ve been working on a project that has a lot of NgRX code and I’ve been able to reduce the amount of boilerplate code to a minimum and gain features in the process.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;If you look at your NgRX code you should find that your actions, reducers, and effects are all very similar. If you don’t find this to be true in your own code, you should consider this a code smell. While how we each use NgRX may vary from project to project, within a project there should be enough consistency that you can reduce the boiler plate code you write and just supply the differences rather than repeating yourself over and over again.&lt;/p&gt;
&lt;h2 id=&#34;NgRX-Entities&#34;&gt;&lt;a href=&#34;#NgRX-Entities&#34; class=&#34;headerlink&#34; title=&#34;NgRX Entities&#34;&gt;&lt;/a&gt;NgRX Entities&lt;/h2&gt;&lt;p&gt;One reason you may find your code does not lend itself to common actions, reducers, and effects is because you have not yet discovered NgRX Entities. NgRX Entities are an “Optional” NgRX add-on that allow you to reduce quite a bit of redundant code, especially in the Reducers where you can just make a call to an Adapter function to do all the work for you. The end result is that your store is an array of IDs and an object of type &lt;code&gt;Record&amp;lt;string, T&amp;gt;&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; describes the shape of your record and &lt;code&gt;string&lt;/code&gt; is the ID of the record. Using this pattern it is very easy to find a record by the ID so we can easily join to slices of our store together using a selector.&lt;/p&gt;
&lt;p&gt;The remainder of this article assumes you are familiar with NgRX Entities and how to use them. If you are not, I recommend you read the &lt;a href=&#34;https://ngrx.io/guide/entity&#34;&gt;NgRX Entity Documentation&lt;/a&gt; and then come back to this article.&lt;/p&gt;
&lt;h2 id=&#34;Actions&#34;&gt;&lt;a href=&#34;#Actions&#34; class=&#34;headerlink&#34; title=&#34;Actions&#34;&gt;&lt;/a&gt;Actions&lt;/h2&gt;&lt;p&gt;The first, very obvious place we find boiler plate code in NgRX is with actions. The more recent release of NgRX already makes creating actions relatively easy by providing the &lt;code&gt;createActionGroup&lt;/code&gt; function. This function allows you to create a group of actions with a single function call. However, it still requires you to provide the action type and the action payload. This is where we can start to reduce the boiler plate code.&lt;/p&gt;
&lt;p&gt;Let’s say, for a start, that all your actions look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityActions = &lt;span class=&#34;title function_&#34;&gt;createActionGroup&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;source&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;events&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Load&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAll&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;ids&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAllSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entities&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt;[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAllFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Create&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CreateSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CreateFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Update&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;UpdateSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;UpdateFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Delete&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;DeleteSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;DeleteFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Even if you create some generator to create this code for you, it is still quite a bit of code that needs to be compiled and shipped to the browser.&lt;/p&gt;
&lt;p&gt;What if, instead, all we had to do was write this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityActions = &lt;span class=&#34;title function_&#34;&gt;createActionGroup&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;All you need to do, for this to work, is create a new &lt;code&gt;createActionGroup&lt;/code&gt; function that returns the NgRX version of the same method with everything filled out.&lt;/p&gt;
&lt;p&gt;Well, “all you have to do” is a bit of an exaggeration as there are some typing issues you’ll need to address.&lt;/p&gt;
&lt;p&gt;Here is the code:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; createActionGroup &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; ngrxCreateActionGroup, props &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./types/ngrx-action-group.type&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * StringLiteralCheck was copied from NgRX because it is hidden.  It forces&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * the source parameter to be a string literal.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;StringLiteralCheck&lt;/span&gt;&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Str&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt; = &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Str&lt;/span&gt; ? &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Name&amp;#125;&lt;/span&gt; must be a string literal type`&lt;/span&gt; : &lt;span class=&#34;built_in&#34;&gt;unknown&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;StringLiteralSource&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&amp;gt; = &lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt; &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;StringLiteralCheck&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;source&amp;#x27;&lt;/span&gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * createActionGroup creates all the actions an entity will need reducing quite a bit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * of boilerplate code.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * The `source` parameter is the same as the `source` parameter in NgRX&amp;#x27;s createActionGroup.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; createActionGroup = &amp;lt;&lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;, T&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;source&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;StringLiteralSource&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;): &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt;&amp;lt;T&amp;gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;ngrxCreateActionGroup&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// because ngrxCreateActionGroup expects a string literal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// we have to cast as any to get around the type check&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this is why we made sure our source parameter does the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// string literal check.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;source&lt;/span&gt;: source &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;events&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Load&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadAll&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;ids&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadAllSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entities&lt;/span&gt;: T[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadAllFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Create&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;CreateSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;CreateFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Update&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;UpdateSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;UpdateFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Delete&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;DeleteSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;DeleteFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that I’ve added a new type &lt;code&gt;NgrxActionGroup&lt;/code&gt; as the return value. This ensures that the return value is strongly typed to the information provided.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt;&amp;lt;T&amp;gt; = &lt;span class=&#34;title class_&#34;&gt;ActionGroup&lt;/span&gt;&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// using any here is the only way I could get this to work&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// without worse hacks or rewriting createActionGroup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Load&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAll&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;ids&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAllSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entities&lt;/span&gt;: T[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAllFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Create&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CreateSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CreateFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Update&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;UpdateSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;UpdateFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Delete&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;DeleteSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;DeleteFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Most of the work in getting that all working correctly was with the strong typing. You may need to tweak for your purposes, but this is the basic idea.&lt;/p&gt;
&lt;p&gt;If you need to add actions that are unique to a particular entity, you can use the &lt;code&gt;createActionGroup&lt;/code&gt; function from NgRX and then return the combined actions using the spread operator.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityActions = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;span class=&#34;title function_&#34;&gt;createActionGroup&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;span class=&#34;title function_&#34;&gt;ngrxCreateActionGroup&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;source&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;events&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;UniqueAction&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Reducers&#34;&gt;&lt;a href=&#34;#Reducers&#34; class=&#34;headerlink&#34; title=&#34;Reducers&#34;&gt;&lt;/a&gt;Reducers&lt;/h2&gt;&lt;p&gt;Reducers are very similar. Once again, NgRX already gives us a way of creating a Reducer function with one call.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityReducer = &lt;span class=&#34;title function_&#34;&gt;createReducer&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  initialState,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(entityActions.&lt;span class=&#34;property&#34;&gt;Load&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; id &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ...state,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;loading&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// etc...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But if the on() code is the same, why repeat it over and over?  Just create a new factory function that specifies what is unique and let it do the rest of the work.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; createReducer = &amp;lt;T, N &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;adapter&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;EntityAdapter&lt;/span&gt;&amp;lt;T&amp;gt;, &lt;span class=&#34;comment&#34;&gt;// EntityAdapter is an NgRX Entities type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;entityName&lt;/span&gt;: N,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;actions&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;): &lt;span class=&#34;title class_&#34;&gt;ActionReducer&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;EntityState&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt; =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;ngrxCreateReducer&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    adapter.&lt;span class=&#34;title function_&#34;&gt;getInitialState&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;load&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; id &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      adapter.&lt;span class=&#34;title function_&#34;&gt;upsertOne&lt;/span&gt;(id, state)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// etc...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now, you can create all your reducers using your new createReducer function.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityReducer = &lt;span class=&#34;title function_&#34;&gt;createReducer&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  entityAdapter,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  entityActions&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Effects&#34;&gt;&lt;a href=&#34;#Effects&#34; class=&#34;headerlink&#34; title=&#34;Effects&#34;&gt;&lt;/a&gt;Effects&lt;/h2&gt;&lt;p&gt;Effects are a little more complicated. The basic idea is that you want to create an generic class with abstract methods it can use to pull in what is different from the class that implements it. To be honest, there is still quite a bit of code you have to write but there are two advantages. Since you are only providing the differences, there is much less code to write and because it is the same code being used everywhere, once you get it working, it works everywhere, reducing the chance of errors.&lt;/p&gt;
&lt;p&gt;Because your code is probably going to look much different than the code I’m using, I’m going to provide samples of the code rather than the full blown implementation.&lt;/p&gt;
&lt;p&gt;This also takes advantage of the new createEffect() function in NgRX 8.0.0.&lt;/p&gt;
&lt;p&gt;Our generic class is going to look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SmartEffects&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * actions is the action group for this entity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;actions&lt;/span&gt;(): &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt;&amp;lt;T&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * adapter is the entity adapter for this entity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;adapter&lt;/span&gt;(): &lt;span class=&#34;title class_&#34;&gt;EntityAdapter&lt;/span&gt;&amp;lt;T&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * updateOperator is the method that will run when the update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   *   action is dispatched.  You would create a similar operator&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   *   method for any other calls you&amp;#x27;d make to the server or other&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   *   insertion points you would need for an effect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;action&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;updateOperator&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// have to use any here because that is how NgRX defines it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;: &amp;#123;&lt;span class=&#34;attr&#34;&gt;row&lt;/span&gt;: T&amp;#125; &amp;amp; &lt;span class=&#34;title class_&#34;&gt;TypedAction&lt;/span&gt;&amp;lt;&lt;span class=&#34;string&#34;&gt;`[&lt;span class=&#34;subst&#34;&gt;$&amp;#123;&lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&amp;#125;&lt;/span&gt;] Update`&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ): &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;T&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You might thing you could use an abstract field instead of  an abstract getter. But, javascript initializes the parent class prior to the child class and the field you need won’t be available when the effects are created.&lt;/p&gt;
&lt;p&gt;You’ll need to make the calls to the createEffect() methods inside the constructor. Again, the order that code gets executed between parent classes and child classes forces this to be done in the constructor.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Once you’ve created a consistent way of using NgRX throughout your code, you not only reduce the amount of boiler plate code you have to write, but you also reduce errors, make your code more maintainable, and create consistency throughout your code which will make it significantly more understandable.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/clean-state-management-with-ngrx/</guid>
            <title>Clean State Management with NgRx</title>
            <link>http://davembush.github.com/clean-state-management-with-ngrx/</link>
            <category>angular</category>
            <category>ngrx</category>
            <category>state-management</category>
            <pubDate>Mon, 04 Jul 2022 12:46:07 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Once again I’ve run into a situation where the code I’m looking at doesn’t resemble how the code was meant to be written.&lt;/p&gt;
&lt;p&gt;I’ve spent the last month fixing bugs that can all be summarized by the following problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducers updating nested data.&lt;/li&gt;
&lt;li&gt;Storing data manipulations that Selectors could perform&lt;/li&gt;
&lt;li&gt;Using Effects as Selectors&lt;/li&gt;
&lt;li&gt;Components doing too much data manipulation&lt;/li&gt;
&lt;li&gt;Too many actions and indirection&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Unfortunately, the people who need to hear this the most are the ones who will never read this article. Some of what I’m about to say, I may have discovered over the last several years of programming but I’m sure I didn’t discover this in isolation.&lt;/p&gt;
&lt;p&gt;So, lets review how NgRX should be used effectively.&lt;/p&gt;
&lt;h2 id=&#34;The-Problem-with-Nested-Data&#34;&gt;&lt;a href=&#34;#The-Problem-with-Nested-Data&#34; class=&#34;headerlink&#34; title=&#34;The Problem with Nested Data&#34;&gt;&lt;/a&gt;The Problem with Nested Data&lt;/h2&gt;&lt;p&gt;If you’ve ever worked on a system with nested state data as part of one slice, you know that updating that nested data is a pain. For those of you who haven’t, having to update that data makes your reducer 10 times longer and 3 times more complicated than it needs to be.&lt;/p&gt;
&lt;p&gt;This means, first, you’ve written more code than you need. This means there is a higher possibility of errors.  But beyond that, the code your customer has to download is also larger than it needs to be.  Worse, because it runs every time the nested data is updated, the code performs slower than it needs to.&lt;/p&gt;
&lt;p&gt;That last point might surprise you. Why does it run slower? Simply because you may end up running that code when it was not necessary.&lt;/p&gt;
&lt;h2 id=&#34;The-Problem-with-Storing-State-the-Way-You-Want-to-Use-It&#34;&gt;&lt;a href=&#34;#The-Problem-with-Storing-State-the-Way-You-Want-to-Use-It&#34; class=&#34;headerlink&#34; title=&#34;The Problem with Storing State the Way You Want to Use It&#34;&gt;&lt;/a&gt;The Problem with Storing State the Way You Want to Use It&lt;/h2&gt;&lt;p&gt;Related to nested data is the urge to store state the way you want to use it later on in the application.&lt;/p&gt;
&lt;p&gt;The main problem with doing this is that you need to make sure that state gets updated correctly from every place you update the raw data. In the process, you will invariably run the the derived state code multiple times when you could have only run it once or in many cases, not at all.&lt;/p&gt;
&lt;p&gt;Instead, you should modify the data into something your presentation needs using Selectors. Since everyone should be using the Selectors to get the information they need, and that selector is looking at the raw data, you can be sure that everyone is getting the correct data. Also, if nothing is listening to the observable that the selector returns, you will not be running the selector code more times than is necessary.&lt;/p&gt;
&lt;p&gt;You also have the advantage of taking advantage of memoization so that this data manipulation only happens when the data is needed and when it changes.&lt;/p&gt;
&lt;h2 id=&#34;Storing-State&#34;&gt;&lt;a href=&#34;#Storing-State&#34; class=&#34;headerlink&#34; title=&#34;Storing State&#34;&gt;&lt;/a&gt;Storing State&lt;/h2&gt;&lt;p&gt;Rule number one of state management is to store state at the most granular level you can. This means, in part, that each slice of your state, the table in your store, should be flat.&lt;/p&gt;
&lt;p&gt;What does it mean that the data is flat? It means that the object only contains primitive values. Strings, number, booleans, dates, or collections of objects that only contain primitive values. Just like you would in a relational database table.&lt;/p&gt;
&lt;p&gt;But, this may not be the most granular level.&lt;/p&gt;
&lt;p&gt;Say you have a row in your database that contains 3 fields that you always want but 50 or so that you only want if a particular presentation is running.  I would recommend creating a slice for the 3 main fields and then another slice or more, for the remaining fields and allow for the fact that you may not have all of them all the time.&lt;/p&gt;
&lt;p&gt;While most systems don’t need this. The system I’m working on does.&lt;/p&gt;
&lt;p&gt;This solves the storing nested data issue.&lt;/p&gt;
&lt;h2 id=&#34;The-Job-of-Effects&#34;&gt;&lt;a href=&#34;#The-Job-of-Effects&#34; class=&#34;headerlink&#34; title=&#34;The Job of Effects&#34;&gt;&lt;/a&gt;The Job of Effects&lt;/h2&gt;&lt;p&gt;Apparently, some people think that the job of an effect is to manipulate data.  But as we’ve already established, manipulating data is the job of selectors. No, the job of Effects is to retrieve data from wherever we are persisting it and to update the persistent store with any changes we’ve made. If we need to manipulate data to do either of those, again, Selectors is where we would do this work.&lt;/p&gt;
&lt;p&gt;Once you’ve narrowed the job of your effects down to this, you no longer need to return multiple actions from an effect.  Ideally an effect should fire one action.  But, no more than two.&lt;/p&gt;
&lt;h2 id=&#34;The-Job-of-Reducers&#34;&gt;&lt;a href=&#34;#The-Job-of-Reducers&#34; class=&#34;headerlink&#34; title=&#34;The Job of Reducers&#34;&gt;&lt;/a&gt;The Job of Reducers&lt;/h2&gt;&lt;p&gt;Reducers only have three jobs: add new data to the slice, remove data from the slice, and update data in the slice. That’s it. If your reducers are doing more than that, you’re doing it wrong.&lt;/p&gt;
&lt;h2 id=&#34;Extra-Credit&#34;&gt;&lt;a href=&#34;#Extra-Credit&#34; class=&#34;headerlink&#34; title=&#34;Extra Credit&#34;&gt;&lt;/a&gt;Extra Credit&lt;/h2&gt;&lt;p&gt;The above, is the bare minimum and may server you well for small projects. However, for larger projects you will want to consider using NgRX Entities.  This will reduce the amount of boiler plate code you need to write as well as making it easy to join your slices however you need to.&lt;/p&gt;
&lt;p&gt;One place in the code I’m working on this would be particularly useful is to see what slice owns another slice.  As the data is stored and returned we only know who the children are most of the time.  To find the parent, we have to iterate through the data to find the child and then look at what parent we are in.&lt;/p&gt;
&lt;p&gt;It gets even more complicated when a row of data could have more than one parent.&lt;/p&gt;
&lt;h2 id=&#34;Thinking-About-Code&#34;&gt;&lt;a href=&#34;#Thinking-About-Code&#34; class=&#34;headerlink&#34; title=&#34;Thinking About Code&#34;&gt;&lt;/a&gt;Thinking About Code&lt;/h2&gt;&lt;p&gt;The last point I want to make regarding state management is that how we think about our code impacts how we write our code.&lt;/p&gt;
&lt;p&gt;I’ve discovered over the years that most of us think about code from a GUI perspective. But, by doing this, we also tend to put a lot of logic in our components and keep doing so, until that doesn’t work any more. At that point, we start to consider state management.&lt;/p&gt;
&lt;p&gt;But what if we thought about code strictly from a data perspective? If every time you thought about the code you were writing and though, “what if I didn’t have a presentation layer? What problem am I trying to solve really? How can I do this without a presentation layer?” Then, your code would be more flexible, easier to maintain, and more scalable.&lt;/p&gt;
&lt;p&gt;How would it be more flexible?&lt;/p&gt;
&lt;p&gt;Back as the dotCom days were starting I had a manager come to me with a VB6 😝 application he had had build and said, “I’d like to take this code and run it on the web, or from a phone, or from the desktop.”  And my response to him was, “You can’t get their from here.” because the code was so tightly coupled to the presentation layer.&lt;/p&gt;
&lt;p&gt;But to bring it today, we often have the same kind of requirements. We originally solve a problem only to have our managers come to us with a new requirement that suggest using the same data to look at the code in a different way.  If all your data logic is in the presentation layer, you might achieve the goal but you’ll also have a lot of duplicate code if you are very careful. But, lets say you manage to pull that off. Six months later you are working on a bug in one of those two views. You fix it, but you forget about that other view and never think to fix it there too. And this is where your troubles begin.&lt;/p&gt;
&lt;p&gt;By pushing code as far down the stack as is practical, you reduce the amount of code you write, reduce the size of the code that your customer has to download, reduce the code you have to maintain, and in the case of NgRX end up writing code that performs faster.&lt;/p&gt;
&lt;p&gt;So, how might you force yourself to think in this way? By following this simple rule: Presentational components should only 1) display the data they’ve been give or 2) fire events indicating that some action has taken place.&lt;/p&gt;
&lt;p&gt;There is another type of component generally referred to as “Smart” components. They too have a rule. They should only 1) retrieve data from the store via Selectors and 2) fire actions to update the Store or trigger an Effect.&lt;/p&gt;
&lt;h2 id=&#34;Storing-Ancillary-State&#34;&gt;&lt;a href=&#34;#Storing-Ancillary-State&#34; class=&#34;headerlink&#34; title=&#34;Storing Ancillary State&#34;&gt;&lt;/a&gt;Storing Ancillary State&lt;/h2&gt;&lt;p&gt;Thinking about your code this way leads to the last point I want to make. If your data is always your single source of truth, you’ll want to store information in the Store that will help you determine things like sort order and filtering as well as other information that may be in your form.&lt;/p&gt;
&lt;p&gt;Personally, I tend to store all my form data in my store beyond, and including, the data I need to send back to the server. This helps me derive the data for my presentation layer and allows my actions to have smaller payloads.&lt;/p&gt;
&lt;p&gt;Many of you send all your form data with your action to update the database because you still think of the update as something the presentation layer is doing. The way I work with data is I just send an action that notifies the store that I want to update the data with the data from my form. The Effect grabs that data from the store and sends it to the server.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;While I’ve centered the discussion above to NgRX. The main ideas port to other methods of state management including things like Redux, MobX, and even Apollo GraphQL.&lt;/p&gt;
&lt;p&gt;By following the above architecture and design patterns your code will be easier to maintain, have fewer bugs and scale better.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/ngzones-performance-impact/</guid>
            <title>NgZones Performance Impact</title>
            <link>http://davembush.github.com/ngzones-performance-impact/</link>
            <category>angular</category>
            <category>performance</category>
            <category>change-detection</category>
            <pubDate>Sat, 28 May 2022 19:03:40 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve been working on this article for a month, off and on. When I started, I set out to demonstrate the performance impact of change detection in Angular. In particular, I wanted to demonstrate that turning zones off would have a significant impact on performance even if you followed all my other advice regarding performance optimization.&lt;/p&gt;
&lt;p&gt;That is, if you had:&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;Implement OnPush notification&lt;/li&gt;
&lt;li&gt;Keep your components small&lt;/li&gt;
&lt;li&gt;Use pure pipes&lt;/li&gt;
&lt;li&gt;Use NgRX Selectors&lt;/li&gt;
&lt;li&gt;Use distinctUntilChanged on your Observables&lt;/li&gt;
&lt;li&gt;Don’t bind to computed values.&lt;/li&gt;
&lt;li&gt;User RxJS distinct()&lt;/li&gt;
&lt;li&gt;Use RxJS replay()&lt;/li&gt;
&lt;li&gt;Style the :host&lt;/li&gt;
&lt;li&gt;Use TrackBy x in ngFor&lt;/li&gt;
&lt;li&gt;Lazy-load routes&lt;/li&gt;
&lt;li&gt;Preload lazy-loaded routes&lt;/li&gt;
&lt;li&gt;Lazy-load resources&lt;/li&gt;
&lt;li&gt;Use virtual scrolling&lt;/li&gt;
&lt;li&gt;Don’t use nested data in your store&lt;/li&gt;
&lt;li&gt;Pre-load lookup tables.&lt;/li&gt;
&lt;li&gt;Use virtual arrays&lt;/li&gt;
&lt;li&gt;Tune your server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you’ve done all those things, the only question left is “exactly how much time does the change detection cycle take if nothing has changed?”&lt;/p&gt;
&lt;h2 id=&#34;First-Attempts&#34;&gt;&lt;a href=&#34;#First-Attempts&#34; class=&#34;headerlink&#34; title=&#34;First Attempts&#34;&gt;&lt;/a&gt;First Attempts&lt;/h2&gt;&lt;p&gt;Assuming that change detection would be an issue, I set out to determine how much of a performance impact I would see with some pretty simple code.  So I created a component that updated a value when a button was clicked.&lt;/p&gt;
&lt;p&gt;I then used the performance tools in developer tools to see just how long the update cycle would take.&lt;/p&gt;
&lt;p&gt;At first I thought I was on to something, but it was actually the compiler kicking in on the first run. When I clicked the button a second time, the performance was not any different regardless of where I put the changes.&lt;/p&gt;
&lt;p&gt;I thought maybe the difference was the number of @Inputs that were being watched, but even updating all those did not make any significant difference.  Even using prop drilling, if the component didn’t actually use the value from the @Input() there was no difference in performance.&lt;/p&gt;
&lt;h2 id=&#34;How-Much-Time-Does-ChangeDetection-Take&#34;&gt;&lt;a href=&#34;#How-Much-Time-Does-ChangeDetection-Take&#34; class=&#34;headerlink&#34; title=&#34;How Much Time Does ChangeDetection Take?&#34;&gt;&lt;/a&gt;How Much Time Does ChangeDetection Take?&lt;/h2&gt;&lt;p&gt;So, today I set out to see just how much time change detection takes if nothing updates in the app.  Just trigger a change detection cycle.&lt;/p&gt;
&lt;p&gt;That’s easy, create a button that you can click nested in the inner most component.&lt;/p&gt;
&lt;p&gt;To get a better sense of timing I also created a tree of components 1000 levels deep.&lt;/p&gt;
&lt;p&gt;The entire click event where the change detection cycle occurs take about 20ms with the developer tools CPU performance set to 4x.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;If you are turning off zones as THE way of optimizing your performance you are masking architectural issues that should have been addressed first. Don’t let anyone tell you otherwise. It just isn’t true. Take it from someone who tried to prove it was.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/rethinking-action-names-redux-ngrx/</guid>
            <title>Rethinking Action Names (Redux/NgRX)</title>
            <link>http://davembush.github.com/rethinking-action-names-redux-ngrx/</link>
            <category>angular</category>
            <category>react</category>
            <category>ngrx</category>
            <category>redux</category>
            <pubDate>Sat, 29 May 2021 06:52:47 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;If you’ve been using some form of Redux, you are familiar with the basic flow of data through the Redux loop. Central to this flow are Actions, the messages that trigger code in our Reducer or Effect&amp;#x2F;Epic&amp;#x2F;Saga (depending on what flavor of Redux you are using).&lt;/p&gt;
&lt;p&gt;The model allows us to disconnect our code so that it only cares that an action was triggered in some way.  That is, “when this action occurs, I will run this code.”&lt;/p&gt;
&lt;p&gt;Because of this, we can create an action that triggers multiple code blocks to run. Our only concern is that the code that gets triggered can’t depend on each other.&lt;/p&gt;
&lt;p&gt;In fact, much of the official literature encourages this practice.&lt;/p&gt;
&lt;p&gt;And, this is where all our troubles begin.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Current-Recommendation&#34;&gt;&lt;a href=&#34;#Current-Recommendation&#34; class=&#34;headerlink&#34; title=&#34;Current Recommendation&#34;&gt;&lt;/a&gt;Current Recommendation&lt;/h2&gt;&lt;p&gt;You see, the official literature around actions also suggest a naming convention that is tied to what we want to happen, rather than what just happened or something otherwise more generic.&lt;/p&gt;
&lt;p&gt;For example, take the simple act of loading a list of employees from the server. To do this, we would typically create two actions.  The first would be &lt;code&gt;LoadEmployees&lt;/code&gt; and the second would be &lt;code&gt;LoadEmployeeResults&lt;/code&gt;. Both of these actions represent what we want to do, not what just happened.&lt;/p&gt;
&lt;p&gt;Now, let’s say we also want to display some sort of wait state and that we want to control it using Redux.  For that we would create a Reducer in our store.  Let’s call it &lt;code&gt;Wait&lt;/code&gt;. And for the purposes of this post, we will assume that &lt;code&gt;Wait&lt;/code&gt; tracks wait state by incrementing and decrementing a counter.&lt;/p&gt;
&lt;p&gt;But, we don’t need to create new Actions for our Wait state because we can re-use the actions we’ve already created. When we fire &lt;code&gt;LoadEmployees&lt;/code&gt; we can increment &lt;code&gt;Wait&lt;/code&gt; and when we fire &lt;code&gt;LoadEmployeesResult&lt;/code&gt; we can decrement the load.&lt;/p&gt;
&lt;h2 id=&#34;What’s-Wrong-With-That&#34;&gt;&lt;a href=&#34;#What’s-Wrong-With-That&#34; class=&#34;headerlink&#34; title=&#34;What’s Wrong With That?&#34;&gt;&lt;/a&gt;What’s Wrong With That?&lt;/h2&gt;&lt;p&gt;Do you see the problem here? We now have a reducer responding to an event that is not obviously tied to an action that has anything to do with the code that is getting executed. &lt;code&gt;Wait&lt;/code&gt; is not a &lt;code&gt;LoadEmployees&lt;/code&gt; thing although, you might reasonably say it is a &lt;code&gt;Load&lt;/code&gt; thing.&lt;/p&gt;
&lt;p&gt;And so how might we think about restructuring our code so that this makes more sense.&lt;/p&gt;
&lt;h2 id=&#34;A-Change-In-Perspective&#34;&gt;&lt;a href=&#34;#A-Change-In-Perspective&#34; class=&#34;headerlink&#34; title=&#34;A Change In Perspective&#34;&gt;&lt;/a&gt;A Change In Perspective&lt;/h2&gt;&lt;p&gt;What if instead of naming actions what we wanted to do, we named them something more along the lines of what just happened.  That would make our &lt;code&gt;LoadEmployees&lt;/code&gt; action &lt;code&gt;NeedEmployees&lt;/code&gt; and our &lt;code&gt;LoadEmployeesResult&lt;/code&gt; action, &lt;code&gt;EmployeesLoaded&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even these names don’t get at the fact that Needing Employees doesn’t mean we need to increment the wait state.&lt;/p&gt;
&lt;h2 id=&#34;Rethinking-The-Problem&#34;&gt;&lt;a href=&#34;#Rethinking-The-Problem&#34; class=&#34;headerlink&#34; title=&#34;Rethinking The Problem&#34;&gt;&lt;/a&gt;Rethinking The Problem&lt;/h2&gt;&lt;p&gt;One way we can think about this problem is to look at other messaging systems, like the windows messaging system. It’s been a while since I’ve used the raw messages in Windows but I seem to recall a &lt;code&gt;WM_BUTTON&lt;/code&gt; or &lt;code&gt;WM_BUTTON_CLICK&lt;/code&gt; message that would get passed to my application when a button was clicked.  One message for every button in my system that had, as part of the payload, what button was clicked so my code could listen for that message for that button and do something because of it.&lt;/p&gt;
&lt;p&gt;We could do something similar with the code above. Instead of tying the actions to particular code we want to run, our actions could be more generic.&lt;br&gt;What if we had two generic messages, &lt;code&gt;Load&lt;/code&gt; and &lt;code&gt;LoadResult&lt;/code&gt;. The payload for these messages could then have a &lt;code&gt;LoadType&lt;/code&gt; property that defined WHAT we were loading so that we could Load Employees, Addresses, and Phone Numbers all using the same two actions and we could also use &lt;code&gt;Load&lt;/code&gt; and &lt;code&gt;LoadResult&lt;/code&gt; to increment and decrement our wait state.&lt;/p&gt;
&lt;p&gt;This would work except we still have a problem.&lt;/p&gt;
&lt;h2 id=&#34;That’s-Not-How-It-Was-Designed&#34;&gt;&lt;a href=&#34;#That’s-Not-How-It-Was-Designed&#34; class=&#34;headerlink&#34; title=&#34;That’s Not How It Was Designed&#34;&gt;&lt;/a&gt;That’s Not How It Was Designed&lt;/h2&gt;&lt;p&gt;Most of the tools we currently have in place to reduce the boiler plate code we need to write are based on a one-to-one relationship between actions and the code that gets run. This isn’t to say that we couldn’t adapt them but doing so would be more trouble than it is worth because we would be working against the intended design.&lt;/p&gt;
&lt;p&gt;And so, I would suggest to you that the advice the current literature gives us about using Actions to trigger multiple blocks of code is wrong. Since Actions are primarily used as loosely coupled method calls, using them in unrelated places violates the Single Responsibility Principle and makes the code hard to follow.&lt;/p&gt;
&lt;p&gt;I’ve seen one code base where the code that gets triggered has absolutely nothing to do with the Action that triggers it. Not something in the simple case of LoadEmployee triggering Wait, but in more obscure relationship like &lt;code&gt;LoadCandyBars&lt;/code&gt; triggering &lt;code&gt;LoadSteakDinner&lt;/code&gt;.  The result is that the code becomes extremely difficult to follow. This is one of the biggest causes of bugs in this system.&lt;/p&gt;
&lt;h2 id=&#34;Maybe-This-Will-Work&#34;&gt;&lt;a href=&#34;#Maybe-This-Will-Work&#34; class=&#34;headerlink&#34; title=&#34;Maybe This Will Work&#34;&gt;&lt;/a&gt;Maybe This Will Work&lt;/h2&gt;&lt;p&gt;For our discussion about the Wait state, I would suggest that we create a separate set of Actions for our Wait state, possibly WaitStart() and WaitEnd() that get fired when we fire EmployeeLoad() and EmployeeLoadResult(). You could wrap these calls in a function or method to ensure they always get called together, but the actions themselves need to be unique to make the code easier to follow.&lt;/p&gt;
&lt;p&gt;Currently, this is my recommended implementation. While not ideal, it gets the job done and makes maintaining the code simple and straight forward even if I do have to duplicate more Actions that I would like to.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/how-to-avoid-binding-to-computed-values-in-angular/</guid>
            <title>How to Avoid Binding to Computed Values in Angular</title>
            <link>http://davembush.github.com/how-to-avoid-binding-to-computed-values-in-angular/</link>
            <category>angular</category>
            <category>ngrx</category>
            <category>functional</category>
            <category>reactive</category>
            <category>mvp</category>
            <pubDate>Sat, 08 May 2021 11:55:53 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;In my previous article about &lt;a href=&#34;../optimizing-angular-for-speed/&#34;&gt;Angular Performance&lt;/a&gt;, I indicated that one of the many ways you can produce an Angular application that performs well is by ensuring that you bind to a computed value.&lt;/p&gt;
&lt;p&gt;First, what did I mean by that?&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;There two ways you might bind to a computed value.&lt;/p&gt;
&lt;p&gt;The most obvious way is by calling a method in the template’s corresponding class. But, properties count to. To be clear, a property is some code that uses a &lt;code&gt;get&lt;/code&gt; prefix.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;somePropertyNameHere&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;something here&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, you might think you need to avoid this when you use the square brackets to assign a variable to a component property, but this also goes for ngIf and ngFor code as well.&lt;/p&gt;
&lt;p&gt;What we are striving for is to not have the template recompute anything unless the data has actually changed.&lt;/p&gt;
&lt;p&gt;The only exception to this is the ngFor trackBy attribute which is used to ensure the whole list doesn’t re-render just because the array changed. I’m assuming you are using this.&lt;/p&gt;
&lt;p&gt;But, you say, I NEED to compute those values in order to display them correctly.&lt;/p&gt;
&lt;p&gt;OK, let’s assume for a second that this is true. The way you do this is with pipes.&lt;/p&gt;
&lt;h2 id=&#34;Pipes&#34;&gt;&lt;a href=&#34;#Pipes&#34; class=&#34;headerlink&#34; title=&#34;Pipes&#34;&gt;&lt;/a&gt;Pipes&lt;/h2&gt;&lt;p&gt;You should already be familiar with pipes because this is how we format dates, format numbers and subscribe to observables in the template.  But you aren’t limited to using the built-in pipes. You can create your own, and it is quite easy to do.&lt;/p&gt;
&lt;p&gt;All you need is a class with the &lt;code&gt;@pipe&lt;/code&gt; attribute that implements the &lt;code&gt;PipeTransform&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;The code you would normally place in the method of property of your component class can go in here instead.&lt;/p&gt;
&lt;p&gt;By doing this, Angular can see that the variable that is passed to it has changed, or not, and can determine when the code needs to be recomputed.&lt;/p&gt;
&lt;h2 id=&#34;ngOnChanges&#34;&gt;&lt;a href=&#34;#ngOnChanges&#34; class=&#34;headerlink&#34; title=&#34;ngOnChanges()&#34;&gt;&lt;/a&gt;ngOnChanges()&lt;/h2&gt;&lt;p&gt;Another way you might achieve the same goal is by trapping the &lt;code&gt;ngOnChanges()&lt;/code&gt; event for the component.&lt;/p&gt;
&lt;p&gt;Many times, any value that we would compute in a method or property to be pulled from the template is only going to change if an &lt;code&gt;@input&lt;/code&gt; value changed.&lt;/p&gt;
&lt;p&gt;Instead of pulling the value and computing it on every change detection cycle, you can listen for the dependency during the &lt;code&gt;ngOnChanges&lt;/code&gt; event and assign the new value to a class field and have your template look at the field instead.&lt;/p&gt;
&lt;p&gt;Be careful though. If you are lazy and recompute the field every time &lt;code&gt;ngOnChanges()&lt;/code&gt; is called, you really haven’t gained anything by it.  &lt;code&gt;ngOnChanges()&lt;/code&gt; will pass into you exactly what changed and you can use that to determine if the value should be recomputed.&lt;/p&gt;
&lt;h2 id=&#34;NgRX-Store-Selector&#34;&gt;&lt;a href=&#34;#NgRX-Store-Selector&#34; class=&#34;headerlink&#34; title=&#34;NgRX Store Selector&#34;&gt;&lt;/a&gt;NgRX Store Selector&lt;/h2&gt;&lt;p&gt;My favorite means of achieving the goal of not calling computed values is by using NgRX Store Selectors.&lt;/p&gt;
&lt;p&gt;When you are new to NgRX you may only be using the simple selector.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; observerThing = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;storeSlice&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And of course you can drill down from storeSlice into children if you need to.&lt;/p&gt;
&lt;p&gt;If you’ve graduated to Feature Selectors, your code may have graduated to:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; observerThing = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(featureSelector));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;where &lt;code&gt;featureSelector&lt;/code&gt; looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;createFeatureSelector&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;feature&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;featureSlice&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;but there are other uses for &lt;code&gt;createSelector&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can use it to combine slices:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  slice1Selector,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  slice2Selector,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;s1, s2&lt;/span&gt;) =&amp;gt;&lt;/span&gt; combineLogicGoesHere&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Or, you can use it to create a selector for a specific bit of information.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  sliceSelector,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;s1&lt;/span&gt; =&amp;gt;&lt;/span&gt; s1.&lt;span class=&#34;property&#34;&gt;s1Part&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And by combining this, we can create a selector that does our formatting for us only when the underlying data has changed.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; partSelector = &lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  sliceSelector,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;s1&lt;/span&gt; =&amp;gt;&lt;/span&gt; s1.&lt;span class=&#34;property&#34;&gt;s1Part&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; formatedPart = &lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  partSelector,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;ps&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;formatPsHere&lt;/span&gt;(ps)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now, our template can listen to this the same as it would listen to any other selector.&lt;/p&gt;
&lt;p&gt;This is the method I most prefer. By pushing this code down into a selector, I don’t have to be concerned with explicitly detecting what has changed. I let the selector do that for me. I just respond to the change when it happens.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/an-angular-application-architecture-that-works/</guid>
            <title>An Angular Application Architecture That Works</title>
            <link>http://davembush.github.com/an-angular-application-architecture-that-works/</link>
            <category>angular</category>
            <category>ngrx</category>
            <category>functional</category>
            <category>reactive</category>
            <category>mvp</category>
            <pubDate>Wed, 01 Jan 2020 11:55:53 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;The purpose of this article is to specify a working architecture that everyone can use for any Angular applications.  This architecture aims to achieve the following goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure that all parts of an application have a home so that anyone can pick up any application that uses this architecture and modify the application without having to learn where everything lives.&lt;/li&gt;
&lt;li&gt;Reduce the overall complexity of any one application by using well-established design patterns that work within the Angular ecosystem.&lt;/li&gt;
&lt;li&gt;Reduce the number of bugs introduced into an application by reducing the need for duplicate code.&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Guiding-Principles&#34;&gt;&lt;a href=&#34;#Guiding-Principles&#34; class=&#34;headerlink&#34; title=&#34;Guiding Principles&#34;&gt;&lt;/a&gt;Guiding Principles&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Largely adhere to the &lt;a href=&#34;https://angular.io/guide/styleguide&#34;&gt;Angular Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prefer Functional&amp;#x2F;Reactive programming over Imperative&amp;#x2F;Object Oriented programming.&lt;/li&gt;
&lt;li&gt;Prefer Composition over Inheritance when using Object Oriented programming&lt;/li&gt;
&lt;li&gt;For Object Oriented code, and where it applies, Functional&amp;#x2F;Reactive code, make your code S..D&lt;ul&gt;
&lt;li&gt;Adhere to the Single Responsibility Principle:&lt;ul&gt;
&lt;li&gt;Keep the size of the individual files (html, css, ts) small&lt;/li&gt;
&lt;li&gt;Separate file for each class, function, interface, enum, etc.&lt;/li&gt;
&lt;li&gt;Keep the cyclomatic complexity of functions and methods small.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keep your code DRY&lt;/li&gt;
&lt;li&gt;Because we prefer Composition over Inheritance, the OLI part of SOLID don’t apply.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prefer composition over child routes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Directory-Structure&#34;&gt;&lt;a href=&#34;#Directory-Structure&#34; class=&#34;headerlink&#34; title=&#34;Directory Structure&#34;&gt;&lt;/a&gt;Directory Structure&lt;/h2&gt;&lt;p&gt;Let’s start with the directory structure our applications will use.  To start with, the directory structure outlined in the &lt;a href=&#34;https://angular.io/guide/styleguide&#34;&gt;Angular Style Guide&lt;/a&gt; should be used with some minor modifications that still obey the general principles outlined in the style guide.&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;projectFolder&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+- src&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  +- core&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  +- dialogs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- dialog1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      +- helper-component-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      +- helper-component-2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      main dialog files go here directly&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      under the dialog directory&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        - html, css, ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        - dialog specific NgRX code&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- dialog2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      +- helperComponent3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      main dialog files go here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- etc...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  +- routes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- route-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      +- supporting-component-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      +- store&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        supporting route specific NgRX files go here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        these include actions, effects, services, reducers,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        and selectors.  Each set of files get their own&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        directory. The extensions for each are:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        - *.actions.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        - *.effects.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        - *.service.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        - *.reducer.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        - *.selector.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        route store slice module goes here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      route1 components go here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      route1 module goes here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- route-1-subroute-a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      similar to above.  This is only IF you have sub-routes.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      I strongly advise against them.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  +- shared&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- components&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      only components that are shared between routes go here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- store&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      only store files that are shared between routes go here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- services&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      only services, if any, that aren&amp;#x27;t used by your store go here&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What is slightly different from the style guide is that a separate directory is created for dialogs and routes as these will be where my top-level components will live.  Within a route or a dialog, everything that route or dialog needs should live under it.  In the case where a class is needed by multiple routes or dialogs, these files live under shared.&lt;/p&gt;
&lt;p&gt;As a guiding principle, you should think of each route as a stand-alone application with its own module.  It should be able to run on its own using the classes, functions, etc from either its directory and sub-directories or the classes, functions, etc in the shared directory.&lt;/p&gt;
&lt;p&gt;This leads us to Lazy Loading&lt;/p&gt;
&lt;h2 id=&#34;Lazy-Loading&#34;&gt;&lt;a href=&#34;#Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;Lazy Loading&#34;&gt;&lt;/a&gt;Lazy Loading&lt;/h2&gt;&lt;p&gt;While it is possible to create an application where the routes are all specified in one file, this file will quickly get out of hand if you are working with a large application.  You can save yourself a lot of trouble and reduce the cognitive load necessary to digest one file with all the routes if you commit to lazy loading up front.&lt;/p&gt;
&lt;h3 id=&#34;Routes&#34;&gt;&lt;a href=&#34;#Routes&#34; class=&#34;headerlink&#34; title=&#34;Routes&#34;&gt;&lt;/a&gt;Routes&lt;/h3&gt;&lt;p&gt;What this means from a practical perspective is that each route will be loaded in as it is needed. One of the side benefits of this is that the files necessary to run each route will only be loaded as they are needed. This will decrease the time it takes to load the application.&lt;/p&gt;
&lt;p&gt;You will, however, need to ensure that each route can be loaded directly because sometimes taking the expected path will load modules that you forgot to load as part of the route.&lt;/p&gt;
&lt;h3 id=&#34;NgRX&#34;&gt;&lt;a href=&#34;#NgRX&#34; class=&#34;headerlink&#34; title=&#34;NgRX&#34;&gt;&lt;/a&gt;NgRX&lt;/h3&gt;&lt;p&gt;Similarly, you should make use of feature stores in NgRX so that you can dynamically add in store slices with each module rather than loading them all in when the application loads.  Done correctly, this will also reduce the cognitive load around your store structure as you will only need to be concerned about the store structure for each route.&lt;/p&gt;
&lt;p&gt;For consistency’s sake, I create feature slices in my shared folder for NgRX slices that are shared rather than load them all at the application level. Again, this reduces the cognitive load necessary to understand any one part of the application. It has the added benefit of making it easier to move slices of the store from a route feature to a shared feature because the structure remains essentially the same.&lt;/p&gt;
&lt;h2 id=&#34;Components&#34;&gt;&lt;a href=&#34;#Components&#34; class=&#34;headerlink&#34; title=&#34;Components&#34;&gt;&lt;/a&gt;Components&lt;/h2&gt;&lt;p&gt;A large part of the front-end code is written using components which include the route, controls, and components that encompass blocks of components.&lt;/p&gt;
&lt;p&gt;The following addresses how to create components in a way that can be maintained.&lt;/p&gt;
&lt;h3 id=&#34;Keep-em-Small&#34;&gt;&lt;a href=&#34;#Keep-em-Small&#34; class=&#34;headerlink&#34; title=&#34;Keep em Small&#34;&gt;&lt;/a&gt;Keep em Small&lt;/h3&gt;&lt;p&gt;One of the main problems I’ve seen in my career with all code, but especially components, is that we try to put all the code for a page all in one place. We don’t even think of the third category of components.  My advice for your template code is that once it has gotten past the point of code that can’t fit in a file that is 150 lines long and 80 characters wide, or has nested to a point beyond 6 elements, you should consider breaking them out. There may be a few exceptions, but this metric will keep your code easy to understand.&lt;/p&gt;
&lt;p&gt;One way you can reduce the nesting without a lot of effort is to style the @host element of the template rather that using a containing DIV tag around the other elements that are the functional components of your component.  Other than because it reduces nesting, it also eliminates a layer of HTML that needs to be rendered. Since we are going to favor lots of small components over a few large components, this will, ultimately, impact the performance of your application.&lt;/p&gt;
&lt;p&gt;Another way you can reduce nesting is by recognizing patterns in your code and extracting them into their own component.&lt;/p&gt;
&lt;p&gt;Finally, consider measuring the cyclomatic complexity of your templates.  Codelyzer has a rule you can add to your linting.  I’d set this to no more than 10.  Cyclomatic complexity measures how many paths there are through your code.  Once you’ve added if, switch or for loops in your template, you’ve introduced some cyclomatic complexity. If you keep to the metrics I’ve already mentioned, you should never hit the cyclomatic complexity metric.&lt;/p&gt;
&lt;h3 id=&#34;Component-Services&#34;&gt;&lt;a href=&#34;#Component-Services&#34; class=&#34;headerlink&#34; title=&#34;Component Services&#34;&gt;&lt;/a&gt;Component Services&lt;/h3&gt;&lt;p&gt;Let’s talk about the purpose of components for a bit. The point of components is to allow the end user to interact with the program. In practical terms this means it has two jobs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Display data that is meaningful to the user&lt;/li&gt;
&lt;li&gt;Allow the user to issue commands that either manipulate the data or take them to another screen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is true for whatever programming environment you are using.&lt;/p&gt;
&lt;p&gt;I’ve been programming now for 32 years and I still see programmers who try to make the component, or the view as they are sometimes called, do something else.&lt;/p&gt;
&lt;p&gt;This also means that business rules have no place in a component.&lt;/p&gt;
&lt;p&gt;Having said that, it is often true that to get the data to display we often need to introduce logic into our component somewhere. Once we’ve introduced logic, it would be great if we could also write unit tests for that logic without a lot of pain.&lt;/p&gt;
&lt;p&gt;If we put this code in the TS file that is our component, this means that in order to test the logic we need to scaffold the component.  Wouldn’t it be better or at least easier, if we didn’t need the component at all?&lt;/p&gt;
&lt;p&gt;This is where component services come in.  If you are familiar with the Model View Presenter design pattern, this is an adaptation of that.&lt;/p&gt;
&lt;p&gt;You can read details of how this is implemented on the following two sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://davembush.github.io/model-view-presenter-angular-and-testing/&#34;&gt;Model View Presenter, Angular, and Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/this-is-angular/model-view-presenter-with-angular-533h&#34;&gt;Model View Presenter with Angular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The basic idea is that you leave the component as the thing that only presents the data and receives notifications from the user. Any logic that is needed goes into an Angular service that is registered with the component using the viewProviders property of the @Component decorator.&lt;/p&gt;
&lt;p&gt;One thing to be careful of here is that you may be tempted, as I have been for a while, to pull the information from the service up into the view. The problem with this is that it is not an optimal implementation for change detections.&lt;/p&gt;
&lt;p&gt;The preferred method would be to use the model as it was originally intended and have the service set fields in the presentation layer so that change detection only happens when the data actually changes rather than every time the component is checked simply because your data has to be computed in a property or method every time.&lt;/p&gt;
&lt;p&gt;And while we are discussing change detection, you should also avoid changing the state of your component internally. By using OnPush notification, all changes have to come in on an &lt;code&gt;@Input()&lt;/code&gt; field for the component to know it has to do change detection. You can, of course, get around this by using &lt;code&gt;markForCheck()&lt;/code&gt; but the disadvantage there is that you may force change detection more often than it is actually needed.&lt;/p&gt;
&lt;p&gt;This is why we prefer the smart component&amp;#x2F;dumb component model. It forces many of these issues. To do this properly, you’ll probably need to create child components so you can take advantage of the &lt;code&gt;@Input()&lt;/code&gt; fields.&lt;/p&gt;
&lt;h3 id=&#34;Smart-x2F-Dumb&#34;&gt;&lt;a href=&#34;#Smart-x2F-Dumb&#34; class=&#34;headerlink&#34; title=&#34;Smart&amp;#x2F;Dumb&#34;&gt;&lt;/a&gt;Smart&amp;#x2F;Dumb&lt;/h3&gt;&lt;p&gt;Broadly speaking, Angular components can be classified as “Smart Components” or “Dumb Components”.  Smart Components get their data form the outside world and pass data out to the outside world.  In the architecture defined here, that will be from the NgRX store via selectors and into the NgRX store using Actions.&lt;/p&gt;
&lt;p&gt;Dumb Components render data they are passed via the @Input() decorators and fire events back up to the containing component via @Output() decorators.&lt;/p&gt;
&lt;p&gt;A lot of people understand these concepts but misunderstand how they apply to an Angular application. You can’t follow these rules simply by wrapping your Dumb Components in Smart Components. While this technically obeys the definition, the result is code that is hard to understand. What we want is a central location in our code that is always responsible for getting data to and from the store.&lt;/p&gt;
&lt;p&gt;We do this by specifying that our Routes are the Smart Components.  This includes child routes, if you have them.&lt;/p&gt;
&lt;p&gt;I’ve found that it is often easier to make a dialog a smart component as well, so if you find this is easier than passing the data that the dialog needs to the dialog, you can make dialogs smart as well. This is why we have a &lt;code&gt;dialogs&lt;/code&gt; directory and a &lt;code&gt;routes&lt;/code&gt; directory as immediate children of the &lt;code&gt;app&lt;/code&gt; directory.&lt;/p&gt;
&lt;h3 id=&#34;Forms&#34;&gt;&lt;a href=&#34;#Forms&#34; class=&#34;headerlink&#34; title=&#34;Forms&#34;&gt;&lt;/a&gt;Forms&lt;/h3&gt;&lt;p&gt;Technically, there are two ways of programming forms using Angular. The first way uses the old 2-way data-binding model and is called “Templated Forms.” These were popular in AngularJS (aka Angular 1).  The second is new to Angular (aka Angular 2+) and is called “Reactive Forms”. Our architecture will use the newer model because it conforms to the guiding principle of keeping things as Functional as possible and removing as much logic from the component as possible.&lt;/p&gt;
&lt;p&gt;There are several implications of how we program our forms related to this.&lt;/p&gt;
&lt;p&gt;First, you will define your FormGroup(s) in the Route’s component service.&lt;/p&gt;
&lt;p&gt;Second, in order to keep your templates small, you may be a need to put bits of your form in child components. You will find that each child component needs its own &lt;code&gt;formGroup&lt;/code&gt; attribute around the &lt;code&gt;formControls&lt;/code&gt; that it is responsible for.  The best way to do this is to pass the &lt;code&gt;formGroup&lt;/code&gt; down from the router into the child components and then assign that variable to the &lt;code&gt;formGroup&lt;/code&gt; attribute in the child component’s template.&lt;/p&gt;
&lt;p&gt;For particularly complex forms, I recommend creating a formGroup object as a separate file in each component’s directory and then use &lt;code&gt;Object.assign()&lt;/code&gt; to concatenate the parts into one whole.  This keeps the related code together while allowing you to assemble them into a form that Angular can use.&lt;/p&gt;
&lt;h3 id=&#34;onPush-Notification&#34;&gt;&lt;a href=&#34;#onPush-Notification&#34; class=&#34;headerlink&#34; title=&#34;onPush Notification&#34;&gt;&lt;/a&gt;onPush Notification&lt;/h3&gt;&lt;p&gt;One of the optimizations available to Angular is a method of change detection called “Push Notification”.  Simply stated, with Push Notification enabled, change detection for the component is only initiated if new data has been pushed into it via one of it’s @Input() variables. Otherwise it is skipped.&lt;/p&gt;
&lt;p&gt;In a large application, the performance gains using this mechanism are enormous. This is particularly true of an application that has an extremely nested or repetitive set of components. Each instance will be checked with each event that would cause the change detection cycle to kick off.&lt;/p&gt;
&lt;p&gt;Since we will be striving to keep our components small, our apps are even more susceptible to the problems associated with change detection.&lt;/p&gt;
&lt;p&gt;While it is true that Push Notification handles most of the situations, you will find that occasionally data in your component changes for some other reason. For this, you should use the ChangeDetectorRef methods.&lt;/p&gt;
&lt;h3 id=&#34;Styling&#34;&gt;&lt;a href=&#34;#Styling&#34; class=&#34;headerlink&#34; title=&#34;Styling&#34;&gt;&lt;/a&gt;Styling&lt;/h3&gt;&lt;p&gt;In an ideal world, you would have a theme that is external to all of your projects and that can be &lt;code&gt;npm install&lt;/code&gt;ed into all the projects you work on.  This should control the basic look and feel of your application including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;font color, size, family etc&lt;/li&gt;
&lt;li&gt;background color&lt;/li&gt;
&lt;li&gt;default style for common components&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lacking a separate project for your theming information, place this information in a global styles.css file.&lt;/p&gt;
&lt;p&gt;Under no circumstance would you ever place the above information directly in a component file within your application.&lt;/p&gt;
&lt;p&gt;Also, because all the main information is going to be in your theme, there is no benefit to using SCSS within your project. And, in fact, every project I’ve ever been a part of that tried to use SCSS as part of the project has become more of a mess and harder to maintain because of it.&lt;/p&gt;
&lt;p&gt;Use SCSS for your theme project and CSS for your application projects.&lt;/p&gt;
&lt;h2 id=&#34;NgRX-1&#34;&gt;&lt;a href=&#34;#NgRX-1&#34; class=&#34;headerlink&#34; title=&#34;NgRX&#34;&gt;&lt;/a&gt;NgRX&lt;/h2&gt;&lt;p&gt;We’ve already addressed some of how NgRX should be used when we talked about using Features instead of one great big Store blob.&lt;/p&gt;
&lt;p&gt;But, there are some other major places where NgRX gets misused that need to be addressed.&lt;/p&gt;
&lt;h3 id=&#34;One-to-One-vs-One-to-Many&#34;&gt;&lt;a href=&#34;#One-to-One-vs-One-to-Many&#34; class=&#34;headerlink&#34; title=&#34;One to One vs One to Many&#34;&gt;&lt;/a&gt;One to One vs One to Many&lt;/h3&gt;&lt;p&gt;If you are new to NgRX, one of the first things that will seem like a really good idea is that you should be able to create an action and have multiple Reducers or Effects respond to it. If you were to act on this impulse, you would (eventually) find that this ultimately makes your code hard to maintain because you are now calling multiple functions “at the same time.”&lt;/p&gt;
&lt;p&gt;From a maintenance perspective, this is a problem.  Imagine trying to track down the flow of execution in your application only to find that when you get to point X you now have to trace the action down multiple paths, not really knowing which ultimately is executing the code you are really interested in.&lt;/p&gt;
&lt;p&gt;But, you have a further hidden problem. The order those functions get called is, for all practical purposes, undefined. At least, from a programming perspective, they should be considered undefined. The order is probably deterministic for any particular version of NgRX that you are running, but when you upgrade there is no reason to believe the code will still execute in the same order.&lt;/p&gt;
&lt;p&gt;Similarly, your actions, reducers, and effects should only relate to each other. You shouldn’t have an action that is part of slice A being handled by slice B even if it is a one-to-one relationship.&lt;/p&gt;
&lt;p&gt;Some code I’ve seen has also aliased actions so that, technically action A is actually action B. Don’t do that! All the above make your code incredibly hard to track flow of control.&lt;/p&gt;
&lt;p&gt;If you were to do this, which I still don’t recommend, you should create actions that are clearly multi-use actions.&lt;/p&gt;
&lt;p&gt;So what if indeed a particular event needs to kick-off or update seperate slices of a store? The can be answered in a few ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It may be worthwhile re-examining the architecture of your overall store. Is there a good rational for why a single Action will impact separate slices of a store in the first place? This is especially important if the resulting actions end up doing the same thing or are using the same data. If so, consider normalizing the store slices and removing redundancies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If that passes the sniff test, consider dispatching different actions in sequence for that event. For example, you may be updating different parts of the application each with different information and structure or different service calls. Under this scenario, separate store slices will be updated via different store action sets and different information structures, regardless of whether they were initiated by the same event.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To reiterate, do not mix the various store slice actions just to intercept the same event.&lt;/p&gt;
&lt;h3 id=&#34;Flat-Store&#34;&gt;&lt;a href=&#34;#Flat-Store&#34; class=&#34;headerlink&#34; title=&#34;Flat Store&#34;&gt;&lt;/a&gt;Flat Store&lt;/h3&gt;&lt;p&gt;Another temptation you may encounter when you start working with NgRX is that you’ll return data from the server in a nested format and then try to deal with it in your reducer in that form.&lt;/p&gt;
&lt;p&gt;Don’t do that!&lt;/p&gt;
&lt;p&gt;Instead, flatten the data into multiple slices and use the Selectors to reassemble the data when you need it.&lt;/p&gt;
&lt;p&gt;If you are going to flatten the data on the client side, you should use &lt;a href=&#34;https://www.npmjs.com/package/normalizr&#34;&gt;Normalizr&lt;/a&gt;. Or, you could use &lt;a href=&#34;https://www.npmjs.com/package/normalizr&#34;&gt;NgRX-Normalizr&lt;/a&gt; and let it do some of the work for you.&lt;/p&gt;
&lt;p&gt;If you have the option, you should flatten your data on the server before you return it. The main advantage to doing this is that you will return less data.&lt;/p&gt;
&lt;p&gt;The reason you want to work with a flat store is because of immutability. Because the store is immutable, or at least, it SHOULD be, you will need to ensure that when you change an element of the data the object pointers above it all change as well. If you don’t, your change detection mechanisms won’t work correctly.&lt;/p&gt;
&lt;p&gt;If you use Normalizr and reassemble the nesting in your selectors, you won’t have to deal with this mess.&lt;/p&gt;
&lt;h3 id=&#34;Store-Everything&#34;&gt;&lt;a href=&#34;#Store-Everything&#34; class=&#34;headerlink&#34; title=&#34;Store Everything&#34;&gt;&lt;/a&gt;Store Everything&lt;/h3&gt;&lt;p&gt;You also may be tempted to only store some of your application state in the NgRX store.  Maybe you think storing search form data is overkill. That you’ll pass the data over as it is needed. That might work, for a while.&lt;/p&gt;
&lt;p&gt;But think about this. Once you’ve placed the data in the store, when you come back to a particular route, the data is still there. If you don’t, the data is gone and you have to fill in the form again.&lt;/p&gt;
&lt;p&gt;You might say, “But that’s what I want them to do.” Yes, but, what if the customer changes their mind? Now you have options.&lt;/p&gt;
&lt;p&gt;Another advantage to the “Store Everything” approach is that you’ve pushed the logic for handling the data changes further down the stack. One place this becomes noticeable is that when you decide to process the data, you no longer have to pass the data with the Action to process the data. The Effect that processes the Action can now retrieve the data from the store.&lt;/p&gt;
&lt;p&gt;If nothing else, this makes the code easier to test.  Code that is easier to test is code that is easier to maintain, even if you never write any test for the code.&lt;/p&gt;
&lt;h3 id=&#34;Data-Transformation&#34;&gt;&lt;a href=&#34;#Data-Transformation&#34; class=&#34;headerlink&#34; title=&#34;Data Transformation&#34;&gt;&lt;/a&gt;Data Transformation&lt;/h3&gt;&lt;p&gt;There are two places where data transformations might need to occur.  The first is after we retrieve the data or right before we send the data back. In an ideal world the server would always send back exactly what we need in the form we need it and we would send it back in a similar form. There are at least two advantages to this.  The first is that it will reduce the amount of processing that the client side code has to perform. Second, the data that that comes back will be generally smaller.&lt;/p&gt;
&lt;p&gt;The second place is as we are working with the data on the client side.&lt;/p&gt;
&lt;p&gt;One scenario where this would occur is when you update a field and the side effect is that data someplace else on the screen should change as well. Not because you retrieved data from somewhere but simply because you changed data in an input field.&lt;/p&gt;
&lt;p&gt;As I’ve already mentioned, we want to keep processing of data out of our components or even our component services unless the processing is specific to what the component does. The next logical place to put the processing of our store data is in our reducers.  But this has problems too. Maybe the data you want to display has no resemblance to the data that is in your store. Beyond that, this gets difficult to manage.&lt;/p&gt;
&lt;p&gt;Instead, the best place to handle data transformation is in your selector. Selectors have a function call as their last parameter that takes all the data slices from the previous parameters. This function can manipulate the data and return it in any way that makes sense for the application. It has the added advantage of being able to leverage memoization and changing the object pointer as I’ve already mentioned.&lt;/p&gt;
&lt;h3 id=&#34;Services&#34;&gt;&lt;a href=&#34;#Services&#34; class=&#34;headerlink&#34; title=&#34;Services&#34;&gt;&lt;/a&gt;Services&lt;/h3&gt;&lt;p&gt;A final temptation may be to ditch the Services that the Effects use and go after the REST end points directly. This seems to make sense since the Effects and the Services are both &lt;code&gt;@Injectable()&lt;/code&gt;s but the problem with this is primarily that it violates the Single Responsibility Principle.&lt;/p&gt;
&lt;p&gt;For retrieval of data, the Service is responsible for retrieving the data and possibly morphing it into the shape that we want it in. The Effect is primarily responsible for moving the resulting data into the store.&lt;/p&gt;
&lt;p&gt;The reverse is also true. Effects are responsible for collecting the data from wherever it is in the store and passing it to the Service.  The Service is responsible for sending that data to the server in the form that it needs it.&lt;/p&gt;
&lt;p&gt;One error I’ve seen is to inject the Store into the Service. The only &lt;code&gt;@Injectable()&lt;/code&gt; that should be injected into your HTTP Service is HttpClient.&lt;/p&gt;
&lt;h2 id=&#34;Angular-as-Functional-x2F-Reactive&#34;&gt;&lt;a href=&#34;#Angular-as-Functional-x2F-Reactive&#34; class=&#34;headerlink&#34; title=&#34;Angular as Functional&amp;#x2F;Reactive&#34;&gt;&lt;/a&gt;Angular as Functional&amp;#x2F;Reactive&lt;/h2&gt;&lt;p&gt;At the beginning of this article, I said one of the guiding principles of how we code is that we prefer Functional&amp;#x2F;Reactive programming over Imperative&amp;#x2F;Object Oriented programming.&lt;/p&gt;
&lt;p&gt;What does that mean?&lt;/p&gt;
&lt;p&gt;Imperative programming is code most of us are familiar with. It is code that says, do this, then do that, then do something else. Everything happens in sequence and it is very clear what happens when because the code says so.&lt;/p&gt;
&lt;p&gt;The problem with imperative programming is that it often contributes to tightly coupled code. In fact, this is the main reason Object Oriented code uses dependency injection and inversion of control.&lt;/p&gt;
&lt;p&gt;Object Oriented programming adds a layer on to imperative programming and tries to model everything in the world as a thing.  For example, a database Table, and User Interfaces are things. They lend themselves well to Object Oriented programming. By layering in dependency injection they decouple a lot of the code.&lt;/p&gt;
&lt;p&gt;But Object Oriented code still suffers from a problem. Not everything we are trying to write code for is a thing. Most of what we code is a process. Until recently, we’ve tried to shoehorn in a programming model that works for things and tried to make processes things somehow. It hasn’t worked well.&lt;/p&gt;
&lt;p&gt;Another problem with Imperative&amp;#x2F;Object Oriented programming is that it mutates memory and each function can return different values even though I’ve passed in the same values. This can make this model difficult to test.&lt;/p&gt;
&lt;p&gt;Think about it, which would you rather write a test for?  Code that given the same parameters always returns the same value, or code that is indeterminate.&lt;/p&gt;
&lt;p&gt;But wait, you say, all code is deterministic. Or is it?&lt;/p&gt;
&lt;p&gt;Take for example a method in a class that has two member variables.  The method itself takes a parameter and makes a call out to a database. How many possible return values are there for any given value we pass in?&lt;/p&gt;
&lt;p&gt;Well, here’s the problem, you actually have 4 parameters and one of these is difficult to control. Oh, sure, you could mock the call to the database and get some control. But if you could write code that didn’t require taming, wouldn’t that be helpful?&lt;/p&gt;
&lt;p&gt;Which leads us to Functional Programming. In Functional Programming we have a number of key advantages. First any given function passed the same parameters always returns the same value. Testing issues solved! Second, strictly functional code has no variables. As one article I read states, “You can’t screw up what you can’t change.” Third, everything is a function.&lt;/p&gt;
&lt;p&gt;This is an oversimplification, you can read more on functional programming elsewhere. One final advantage that most of the literature doesn’t mention is that Functional Programming models processes better than Object Oriented programming. And because of the features I mentioned above, it is also much easier to test and much more deterministic.&lt;/p&gt;
&lt;p&gt;Which leads to Reactive. Aside from the fact that we are using RxJS in Angular which is a Reactive library, this also means that we react to “events” that get fired.  This is essentially what is happening when you dispatch an action in NgRX, what you are effectively saying is, “someone do this thing for me.”&lt;/p&gt;
&lt;p&gt;In the past, you would have just coded for that process to start. Here, that action could just as easily happen on some other computer, or at least some other thread. And so, instead of coding “do this, then that, then this other thing.”  You are coding, “when I get notified, I’m going to do this and then, optionally, notify the system that I’m done.”&lt;/p&gt;
&lt;p&gt;And so, we favor Functional&amp;#x2F;Reactive programming because it makes our programs more stable but we admit that not everything can be done using a Functional&amp;#x2F;Reactive model.&lt;/p&gt;
&lt;h2 id=&#34;Data-over-Presentation&#34;&gt;&lt;a href=&#34;#Data-over-Presentation&#34; class=&#34;headerlink&#34; title=&#34;Data over Presentation&#34;&gt;&lt;/a&gt;Data over Presentation&lt;/h2&gt;&lt;p&gt;This is a specific instance of the previous point, but I want to call it out directly because I recognize that it is not quite as obvious to most people as it is to me.&lt;/p&gt;
&lt;p&gt;Most programmers, because they are still thinking in an imperative model, think of their code in terms of the presentation layer. What this means in terms of how they code is that when an event occurs in the view, they tend to fire an action. Sometimes this is the right thing to do. But, if the action that just occurred in the view also changed the state of your data in someway, it would make more sense to observe the data change in your store and react to it there than to fire off an event from the view to do the same thing.&lt;/p&gt;
&lt;p&gt;By following the rule of Data over Presentation, you benefit in two ways. The first is that more of your code will transfer to whatever JavaScript framework or library becomes popular in the future because RxJS is agnostic to which one you use.&lt;/p&gt;
&lt;p&gt;Second, by observing the data using &lt;code&gt;distinctUntilChanged()&lt;/code&gt; you can ensure that you only respond when the data actually changed instead of every time it looks like there may have been a change.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/typescript-basics-for-angular-developers/</guid>
            <title>TypeScript Basics for Angular Developers</title>
            <link>http://davembush.github.com/typescript-basics-for-angular-developers/</link>
            <category>angular</category>
            <category>typescript</category>
            <pubDate>Sat, 08 Sep 2018 06:30:30 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;For the most part, TypeScript feels a lot like JavaScript.  Most people pick it up without having any formal training.&lt;/p&gt;
&lt;p&gt;But, here’s the deal.  “Just because you can, doesn’t mean you should.” &lt;/p&gt;
&lt;p&gt;The thing that makes me most nervous about Angular is that it is structured so that you can write some really clean code.  But, you don’t have to.  Which mean most won’t. &lt;/p&gt;
&lt;p&gt;In fact, recruiters continue to contact me about Angular jobs with rates that make it obvious that hiring an Angular programmer is the same as hiring an HTML “programmer” 10 years ago.  Sorry gang, JavaScript has grown up and so has Angular. &lt;/p&gt;
&lt;p&gt;So, here are a few things you need to know about TypeScript that will make you a better Angular developer. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/07/TypescriptBasicsForAngular.jpg&#34; title=&#34;TypeScript Basics for Angular Developers&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/mujitra/8059355303/&#34;&gt;MIKI Yoshihito. (#mikiyoshihito)&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/b6d829&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Variable-Declaration&#34;&gt;&lt;a href=&#34;#Variable-Declaration&#34; class=&#34;headerlink&#34; title=&#34;Variable Declaration&#34;&gt;&lt;/a&gt;Variable Declaration&lt;/h2&gt;&lt;p&gt;There are three ways of declaring a variable in TypeScript.  You can either use the JavaScript &lt;code&gt;var&lt;/code&gt; keyword like you’ve always done or you can use the &lt;code&gt;let&lt;/code&gt; keyword or the &lt;code&gt;const&lt;/code&gt; keyword. &lt;/p&gt;
&lt;p&gt;But first, what problem are we trying to solve? &lt;/p&gt;
&lt;p&gt;In the old JavaScript world, we would declare variables in a block of code, but where-ever we declared that variable, the actual declaration was “hoisted” to the top of the function.  In fact, there never was anything like block scope.  Just function scope. &lt;/p&gt;
&lt;p&gt;This caused one particular problem that was rather common.  If I created a for&amp;#x2F;next loop that called an asynchronous function, the asynchronous function would use the last value of the for&amp;#x2F;next incrementer. &lt;/p&gt;
&lt;p&gt;The primary benefit of using &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; is that they effectively provide for block level scope so that we can write code like I described above and it will behave in the way we would expect from other languages. &lt;/p&gt;
&lt;p&gt;Unless you explicitly want to avoid block level scope, you should never use the &lt;code&gt;var&lt;/code&gt; keyword to declare a variable in TypeScript.  This falls under the “just because you can, doesn’t mean you should” rule. &lt;/p&gt;
&lt;p&gt;In my experience, you will use &lt;code&gt;const&lt;/code&gt; more often than &lt;code&gt;let&lt;/code&gt;.  Here’s the difference. &lt;/p&gt;
&lt;p&gt;If you are declaring a variable that will only ever be assigned one value, you declare it using &lt;code&gt;const&lt;/code&gt;.  What isn’t obvious is that changing the contents of an object does not change the value of an object.  So, doing something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; myArray = [];  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myArray.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Would be more valid as:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; myArray = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myArray.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Because pushing something into the array doesn’t change the value, or the pointer, of myArray.  It only changes the content of the array.&lt;/p&gt;
&lt;p&gt;You DID know that, right?&lt;/p&gt;
&lt;h2 id=&#34;Types&#34;&gt;&lt;a href=&#34;#Types&#34; class=&#34;headerlink&#34; title=&#34;Types&#34;&gt;&lt;/a&gt;Types&lt;/h2&gt;&lt;p&gt;The main thing that makes TypeScript what it is, is that it allows us to type-check our code.  You don’t have to.  In fact, there are times when this might get in your way.  But, you have a choice. &lt;/p&gt;
&lt;p&gt;By default, TypeScript uses inference when it can to figure out the type of a variable.  This is important because I can bet one of the first errors you are going to see is a type mismatch error. You might try to do something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; v = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// some other code, and then ...  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v = &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;That’s not going to compile. But you could do something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;v&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// some other code, and then …  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v = &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;That is telling the TypeScript compiler that we are OK with the variable v being any type. &lt;/p&gt;
&lt;p&gt;Other than the Classes and Interfaces that are either part of JavaScript or that we, or a third party, create, there are boolean, number, string, array, enum, any, void, tuple, never, null, and undefined. &lt;/p&gt;
&lt;p&gt;I’m going to assume that until I mentioned “tuple” you were ok with the types I mentioned.  So, let’s dig a little deeper on those last few. &lt;/p&gt;
&lt;p&gt;A tuple is a type that wars have been fought over.  Well, it isn’t that bad, but it is controversial. What we care about here is why you might want to use it.  It allows you to return a highly defined array or object directly into local variables.  That is, I can specify that a function returns an array or object that has a specific number of elements and each element is a specific type.  It has its uses, but it is probably one of the types that you want to reserve for special cases.  It saves you from having to access array elements or object fields or properties.  That’s the long and short of it. &lt;/p&gt;
&lt;p&gt;The never type allows you to specify that a function never returns.  There are two reasons why this would be true.  First, you’ve entered an infinite loop or second, you’ve thrown an exception.  Again, not something you are likely to use. &lt;/p&gt;
&lt;p&gt;You can also explicitly specify that a type can only handle null or undefined.  But what is much more likely is that you specify that you don’t want to use these.&lt;/p&gt;
&lt;h2 id=&#34;Combined-Types&#34;&gt;&lt;a href=&#34;#Combined-Types&#34; class=&#34;headerlink&#34; title=&#34;Combined Types&#34;&gt;&lt;/a&gt;Combined Types&lt;/h2&gt;&lt;p&gt;So, let’s say you have a parameter or a variable that accepts multiple types.  You could just use any and go on your merry way.  But, wouldn’t it be nice if you could say, “I want this type to be either a string or a number.”?  Well, you can.  Simply by using the pipe operator between types.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;v&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; | &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Remember our example above where we said we needed a variable to be either a number or a string, the above syntax is a much better way of typing the variable to do this because it limits the variable to exactly the types that we want to allow rather than letting anything be assigned to it.&lt;/p&gt;
&lt;p&gt;Amd we can take this even further.  Let’s say we want to make sure that the variable is a particular class type that we also want to be sure implements a specific interface.  For that, we use the ampersand.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;v&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Person&lt;/span&gt; &amp;amp; &lt;span class=&#34;title class_&#34;&gt;Manager&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And while we are at it, what if we want to make sure that a variable only accepts string types that are not null or undefined?  By default, the compiler allows null and undefined to be assigned to anything, but there is a compiler switch that turns that feature off.  If you use the compiler switch and you want to allow null or undefined, you’ll need to use the pipe operator to include them.&lt;/p&gt;
&lt;h2 id=&#34;Interface&#34;&gt;&lt;a href=&#34;#Interface&#34; class=&#34;headerlink&#34; title=&#34;Interface&#34;&gt;&lt;/a&gt;Interface&lt;/h2&gt;&lt;p&gt;For the most part, a TypeScript Interface looks a lot like an Interface in other languages. However, there are some differences that you need to know about. &lt;/p&gt;
&lt;p&gt;First, you don’t need to create a class that implements an Interface and then instantiate an object from that class in order to have an object of a particular interface type.  Actually, if you stop to think about it, this makes sense.  The problem is, there are a lot of people teaching TypeScript who are still using interfaces this way. &lt;/p&gt;
&lt;p&gt;But, in JavaScript, you can create an Object Literal.  TypeScript adds to JavaScript.  So, it only makes sense that TypeScript also allows you to create an Object Literal.  So, let’s say you have a parameter that takes an interface of type Name.  As long as the object we pass in conforms to the interface definition, the code will compile.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// interface Name with firstName and lastName as properties  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// function that takes a Name as a parameter  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;name: Name&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// call the function with an object literal  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Dave&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Bush&amp;#x27;&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optional&#34;&gt;&lt;a href=&#34;#Optional&#34; class=&#34;headerlink&#34; title=&#34;Optional&#34;&gt;&lt;/a&gt;Optional&lt;/h2&gt;&lt;p&gt;We’ve been talking a lot about Parameters and Interfaces.  In both cases, we often want to define a parameter or a property as optional. &lt;/p&gt;
&lt;p&gt;For example, most people have a middle name, but our Name interface doesn’t account for that.  If we added it, we’d want to make it optional since it is possible for that to not be included.  On the other hand, we don’t want people added whatever they want. &lt;/p&gt;
&lt;p&gt;The way we make sure a parameter is optional is by placing a question mark after the property, but before the colon.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// middleName is optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  middleName?: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// foo() now takes an optional name parameter  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;name?: Name&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I would highly recommend that you tweak your tslint rules to require type annotations on all of your code.  Out of the box, the tslint rules that come with the Angular-CLI are a bit too lax in this area.&lt;/p&gt;
&lt;h2 id=&#34;this&#34;&gt;&lt;a href=&#34;#this&#34; class=&#34;headerlink&#34; title=&#34;this&#34;&gt;&lt;/a&gt;this&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword in JavaScript is probably the hardest concept to fully understand.  And while recent advances in the language have helped tame it, it still doesn’t fully conform to the model most people have in their mind of how an Object-Oriented language should behave.  This is because, of course, JavaScript isn’t an Object-Oriented language.  It is a Prototypal language.  There are similarities, but they aren’t they same. &lt;/p&gt;
&lt;p&gt;TypeScript, on the other hand, is more object oriented.  I say “more” because it is really only object-oriented in the places where you are taking advantage of TypeScript specific features, such as a Class.  If you create an object literal that has an inline function, you are back in JavaScript land. &lt;/p&gt;
&lt;p&gt;In a class, if you have a method that calls another method in the same class, you must use the &lt;code&gt;this&lt;/code&gt; keyword to go after it.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SomeClass&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;someFunction&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;title function_&#34;&gt;someOtherFunction&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;someFunction&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This may take some getting used to if you are coming from JavaScript where you can call any function that is in scope without using the this keyword.  But, I can assure you that having this rule imposed on the language solves a lot of bugs caused the “this” side effects, that it is well worth the adjustment.&lt;/p&gt;
&lt;h2 id=&#34;Arrow-Functions&#34;&gt;&lt;a href=&#34;#Arrow-Functions&#34; class=&#34;headerlink&#34; title=&#34;Arrow Functions&#34;&gt;&lt;/a&gt;Arrow Functions&lt;/h2&gt;&lt;p&gt;Fat Arrow functions, Arrow Functions, or Lambda Expressions all refer to the same concept.  They are probably one of my favorite features of the latest version of TypeScript and JavaScript both because they allow me to write code with fewer characters and because they solve a very real problem that has confused JavaScript developers for years. &lt;/p&gt;
&lt;p&gt;First the problem. &lt;/p&gt;
&lt;p&gt;If you’ve written any serious application using JavaScript, one of the following scenarios will be familiar to you. &lt;/p&gt;
&lt;p&gt;Any time you create an event handler, when the function gets called, the ‘this’ keyword isn’t pointing to the object you are in, it is pointing to the context of the event that fired it.  This could be null, a windows object, or something else.  We often get around this problem by using the bind() function to wrap the context of the function. &lt;/p&gt;
&lt;p&gt;What the arrow functions in TypeScript do is that they form a closure around the current ‘this’ context by taking advantage of how TypeScript is compiled into JavaScript. &lt;/p&gt;
&lt;p&gt;You see, when your TypeScript code is compiled, every place you referred to &lt;code&gt;this&lt;/code&gt; it refers to a variable named &lt;code&gt;_this&lt;/code&gt;.  Inside the arrow function, they refer to this same &lt;code&gt;_this&lt;/code&gt; instead of creating a new one or looking at the context the function was called from. &lt;/p&gt;
&lt;p&gt;The main difference between a regular anonymous function and an arrow function is that we leave out a lot of junk. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; newFunc = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// do something with x  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Compared to:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;newFunc&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt;) =&amp;gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// do something with x  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But wait! There’s more.  &lt;/p&gt;
&lt;p&gt;If you only have one line, you can remove the curly braces. &lt;/p&gt;
&lt;p&gt;Let’s say you want to create an arrow function that returns the square of some number.  You could write this as:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;newFunct&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt;) =&amp;gt; x * x;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Fat arrow functions return the value from the function automatically.&lt;/p&gt;
&lt;h2 id=&#34;Decorators&#34;&gt;&lt;a href=&#34;#Decorators&#34; class=&#34;headerlink&#34; title=&#34;Decorators&#34;&gt;&lt;/a&gt;Decorators&lt;/h2&gt;&lt;p&gt;I don’t want to spend a lot of time on decorators.  If you’ve been using .NET, you’ll recognized decorators as “Attributes”. Java programmers are probably used to calling them annotations. &lt;/p&gt;
&lt;p&gt;Effectively, what a decorator does is that it adds additional information to a function, field, or class that marks it for special use.  While you can create your own decorators, we will only concentrate on implementing decorators that have already been defined for us. &lt;/p&gt;
&lt;p&gt;You’ll know that something is a decorator because it is a symbol prefixed with the at symbol.&lt;/p&gt;
&lt;h2 id=&#34;Import-and-Export&#34;&gt;&lt;a href=&#34;#Import-and-Export&#34; class=&#34;headerlink&#34; title=&#34;Import and Export&#34;&gt;&lt;/a&gt;Import and Export&lt;/h2&gt;&lt;p&gt;Last in our discussion of TypeScript are the keywords import and export. &lt;/p&gt;
&lt;p&gt;Now, why do we need these keywords? &lt;/p&gt;
&lt;p&gt;If you are familiar with other languages such as C#, VB.NET or Java, you will recognize the concept of Import as the keyword that says, “Tell this file I’m going to reference code from that other file over there in here.”  And then when we compile our code, the compiler makes sure that we are using that other code correctly. &lt;/p&gt;
&lt;p&gt;A similar thing happens in TypeScript, but in Angular we get the added benefit of also being able to use this information so that we only include the code we are actually using. &lt;/p&gt;
&lt;p&gt;You see, in the old days, we would suck in entire JavaScript libraries just because we were using a few functions.  But now with concepts like “Tree Shaking” that we will cover later, we can look at the actual code we are referencing and only include that code.  This reduces the size and number of files that our customer has to download to use our applications. &lt;/p&gt;
&lt;p&gt;The export keyword, on the other hand, tells the compiler what functions, classes, and interfaces external code is able to reference.  If it isn’t exported, it is only available to code in the file it was declared in.&lt;/p&gt;
&lt;h2 id=&#34;More&#34;&gt;&lt;a href=&#34;#More&#34; class=&#34;headerlink&#34; title=&#34;More&#34;&gt;&lt;/a&gt;More&lt;/h2&gt;&lt;p&gt;I have barely scratched the surface of TypeScript here.  There is a lot more available in the language than what I’ve introduced to you here and knowing the parts I’ve left out will ultimately make you a better programmer and make your code more stable.  But the parts I have introduced will get you going and will make you familiar with the parts you will see most often.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/where-to-store-angular-configurations/</guid>
            <title>Where To Store Angular Configurations</title>
            <link>http://davembush.github.com/where-to-store-angular-configurations/</link>
            <category>angular</category>
            <category>configuration</category>
            <category>devops</category>
            <pubDate>Sat, 11 Aug 2018 06:59:34 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Because this is a frequent problem, because it is so often done incorrectly and because there is a great alternative, today I want to discuss where to store Angular configurations. You know, all that information that changes as you move from your local development environment to the Development, QA and Production servers?&lt;/p&gt;
&lt;p&gt;There’s a place for that!&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Wrong-Place&#34;&gt;&lt;a href=&#34;#Wrong-Place&#34; class=&#34;headerlink&#34; title=&#34;Wrong Place&#34;&gt;&lt;/a&gt;Wrong Place&lt;/h2&gt;&lt;p&gt;I know it is tempting, but the environment.ts and environment.prod.ts files were never meant for configuration information other than to tell the run-time you are running a production version of the code instead of developing the code locally. Yes, I know it is possible to create a file for your different environments and you can effectively use the file for your configuration information. But, just because you can, doesn’t mean you should.&lt;/p&gt;
&lt;p&gt;In an ideal world, you would build a release candidate and place it on your Development server and then move it from there to QA and then to Production. You would never rebuild the application. You want to be absolutely sure that the code you tested in the Development environment is the code you ran in the QA environment and that the code you ran in the QA environment is the code that is running in the Production environment. You want to know for sure that the only possible reason why something isn’t working is because the configuration information is incorrect.&lt;/p&gt;
&lt;p&gt;There are other ways to mitigate the risk, but they all involve recompiling the code and tagging your repository so you can get the same code back. This works when there isn’t a better way. But, there is a better way!&lt;/p&gt;
&lt;h2 id=&#34;Where-Instead&#34;&gt;&lt;a href=&#34;#Where-Instead&#34; class=&#34;headerlink&#34; title=&#34;Where Instead?&#34;&gt;&lt;/a&gt;Where Instead?&lt;/h2&gt;&lt;p&gt;If we can’t put our configuration information in our code, where do we put it? Obviously external to your code. This leaves us several solutions. One is to create a static json file that gets copied into your dist directory when the code is deployed to each environment. Another place that I’ve see work is to place the code in a database. The advantage to the database method is that you can have one database that handles the configuration information for all of your applications and even all of your environments. Put a good administration GUI on top of it and you can change the configuration easily without having to deploy even a file.&lt;/p&gt;
&lt;h2 id=&#34;Jumping-The-Hurdle&#34;&gt;&lt;a href=&#34;#Jumping-The-Hurdle&#34; class=&#34;headerlink&#34; title=&#34;Jumping The Hurdle&#34;&gt;&lt;/a&gt;Jumping The Hurdle&lt;/h2&gt;&lt;p&gt;Now that you’ve put your configuration information in an external location, you realize that you’ll need to make a GET request to retrieve that information. You may also quickly realize that you need that configuration information as soon as your application starts up. Maybe putting that information in an external file wasn’t such a great idea after all?&lt;/p&gt;
&lt;p&gt;Well, not so fast!&lt;/p&gt;
&lt;p&gt;There is a little known API feature in Angular that lets us load stuff up front and will actually wait until the loading has completed before continuing on with our code.&lt;/p&gt;
&lt;h2 id=&#34;APP-INITIALIZER&#34;&gt;&lt;a href=&#34;#APP-INITIALIZER&#34; class=&#34;headerlink&#34; title=&#34;APP_INITIALIZER&#34;&gt;&lt;/a&gt;APP_INITIALIZER&lt;/h2&gt;&lt;p&gt;APP_INITIALIZER is a multi provider type that lets you specify a factory that returns a promise. When the promise completes, the application will continue on. So when you get to the place in your code where you need the configuration information, you can be sure it has been loaded. It’s pretty slick.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;variable constant_&#34;&gt;APP_INITIALIZER&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ....&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;provide&lt;/span&gt;: &lt;span class=&#34;variable constant_&#34;&gt;APP_INITIALIZER&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;useFactory&lt;/span&gt;: load,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;multi&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;where &lt;code&gt;load&lt;/code&gt; is a &lt;code&gt;function&lt;/code&gt; that returns a &lt;code&gt;function&lt;/code&gt; that returns a &lt;code&gt;Promise&amp;lt;boolean&amp;gt;&lt;/code&gt;. The promise function loads your configuration information and stores it in your application.  Once your configuration has been loaded, you resolve the promise using &lt;code&gt;resolve(true)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This last point is really important.  If you get this wrong, the code won’t wait for this to finish loading before moving on.  &lt;code&gt;useFactory&lt;/code&gt; points to a &lt;code&gt;function&lt;/code&gt; that returns a &lt;code&gt;function&lt;/code&gt; that returns a &lt;code&gt;Promise&amp;lt;boolean&amp;gt;&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;multi: true&lt;/code&gt; thing is because APP_INITIALIZER allows multiple instances of this provider. They all run simultaneously, but the code will not continue beyond APP_INTITIALIZER until all of the Promises have resolved.&lt;/p&gt;
&lt;h2 id=&#34;An-example&#34;&gt;&lt;a href=&#34;#An-example&#34; class=&#34;headerlink&#34; title=&#34;An example.&#34;&gt;&lt;/a&gt;An example.&lt;/h2&gt;&lt;p&gt;Now, as a discussion point, let’s assume that you have a regular Angular CLI based project and you need to load in the base location of your REST endpoints.  You might have a config.json file that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;baseUrl&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;https://davembush.github.io/api&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You would create a different one of these for each of the environments you wanted to deploy to, and, as part of your deployment process, you would copy the appropriate file to &lt;code&gt;config.json&lt;/code&gt; in the same location that you deploy all of your Angular CLI generated static files.&lt;/p&gt;
&lt;h3 id=&#34;Basic-App-Initializer&#34;&gt;&lt;a href=&#34;#Basic-App-Initializer&#34; class=&#34;headerlink&#34; title=&#34;Basic App Initializer&#34;&gt;&lt;/a&gt;Basic App Initializer&lt;/h3&gt;&lt;p&gt;Now, the thing we want to do is to load this config file at runtime using APP_INITIALIZER.  To do that, let’s add an APP_INITIALIZER provider to our app.module.ts file.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;variable constant_&#34;&gt;APP_INITIALIZER&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;BrowserModule&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/platform-browser&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;NgModule&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./app.component&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;load&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;declarations&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;BrowserModule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;provide&lt;/span&gt;: &lt;span class=&#34;variable constant_&#34;&gt;APP_INITIALIZER&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;useFactory&lt;/span&gt;: load,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;multi&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;bootstrap&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppModule&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;For now, you’ll notice, we are ignoring the implementation of the &lt;code&gt;load()&lt;/code&gt; function.  Typically, I add load to another file and import it, but for the purposes of explaining how this works, we will leave it as part of this code.&lt;/p&gt;
&lt;h3 id=&#34;Type-the-load-function&#34;&gt;&lt;a href=&#34;#Type-the-load-function&#34; class=&#34;headerlink&#34; title=&#34;Type the load() function&#34;&gt;&lt;/a&gt;Type the load() function&lt;/h3&gt;&lt;p&gt;Since I made such a big deal about the typing of the load function, we should type the load function to make sure it actually returns what we have in mind. The following is skeleton code that we will embellish.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;load&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;): (&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (): &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt; =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt;((&lt;span class=&#34;attr&#34;&gt;resolve&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;a: &lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;): &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;At this point, the code doesn’t do anthing useful, but you should be able to compile and run the code at this point without seeing any errors in the console.&lt;/p&gt;
&lt;h3 id=&#34;Proof-that-it-waits&#34;&gt;&lt;a href=&#34;#Proof-that-it-waits&#34; class=&#34;headerlink&#34; title=&#34;Proof that it waits&#34;&gt;&lt;/a&gt;Proof that it waits&lt;/h3&gt;&lt;p&gt;Next, we want to prove that this really is stopping the rest of our code from running.  To do this, we are going to use a simple &lt;code&gt;setTimeout()&lt;/code&gt; to simulate a long running process that we need to wait on to complete.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;load&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;): (&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (): &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt; =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt;((&lt;span class=&#34;attr&#34;&gt;resolve&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;a: &lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;): &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This code waits for 10 seconds before resolving.  You can play with the timeout value to prove to yourself that this code really is waiting.&lt;/p&gt;
&lt;h3 id=&#34;The-fun-begins&#34;&gt;&lt;a href=&#34;#The-fun-begins&#34; class=&#34;headerlink&#34; title=&#34;The fun begins&#34;&gt;&lt;/a&gt;The fun begins&lt;/h3&gt;&lt;p&gt;Now, the purpose of this code is to load the config.json file.  For that we are going to need to get access to the HttpClient service. Normally, we use dependency injection to access this, and this code is no different.&lt;/p&gt;
&lt;p&gt;Back in the provider, add a &lt;code&gt;deps: []&lt;/code&gt; section.  To inject HttpClient, use:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;deps&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;HttpClient&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And change the load function to take HttpClient as a parameter.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;load&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;http: HttpClient&lt;/span&gt;): (&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (): &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt; =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt;((&lt;span class=&#34;attr&#34;&gt;resolve&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;a: &lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;): &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Don’t forget to import &lt;code&gt;HttpClientModule&lt;/code&gt; into your module.&lt;/p&gt;
&lt;p&gt;And, once we load the configuration file, we will want to save the information some place.  There are a couple of ways that you might do this, but the most Angular like would be to create a service.  In our case our service will have one field named &lt;code&gt;baseUrl&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;Injectable&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Injectable&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providedIn&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;root&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ConfigService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;baseUrl&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Since our service is using the new &lt;code&gt;provideIn&lt;/code&gt; flag, we don’t need to worry about adding it to a module.&lt;/p&gt;
&lt;p&gt;In order to set this, we will need to add ConfigService to the &lt;code&gt;deps:&lt;/code&gt; array.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;deps&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;HttpClient&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;ConfigService&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;],&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And make it a parameter of our &lt;code&gt;load()&lt;/code&gt; function.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;load&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;http: HttpClient, config: ConfigService&lt;/span&gt;): (&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (): &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt; =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt;((&lt;span class=&#34;attr&#34;&gt;resolve&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;a: &lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;): &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Loading-config-json&#34;&gt;&lt;a href=&#34;#Loading-config-json&#34; class=&#34;headerlink&#34; title=&#34;Loading config.json&#34;&gt;&lt;/a&gt;Loading config.json&lt;/h3&gt;&lt;p&gt;The rest is pretty straight forward Angular code.  We will&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http.get(‘.config.json’)&lt;/li&gt;
&lt;li&gt;if it gives us a 404 error, we set default values&lt;/li&gt;
&lt;li&gt;if it succeeds we set the values from the data that got loaded.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, why would we get a 404 error?&lt;/p&gt;
&lt;p&gt;Well, the one place where this file won’t be available is when we are using &lt;code&gt;ng serve&lt;/code&gt; during development.  But when we load this with a regular server like Apache, IIS, or Nginx, the file will be available.&lt;/p&gt;
&lt;p&gt;Now, where we have the &lt;code&gt;setTimeout()&lt;/code&gt; code, replace it with &lt;code&gt;http.get()&lt;/code&gt; code.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;http.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./config.json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; .&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: ConfigService&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     config.&lt;span class=&#34;property&#34;&gt;baseUrl&lt;/span&gt; = x.&lt;span class=&#34;property&#34;&gt;baseUrl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;title function_&#34;&gt;catchError&lt;/span&gt;((&lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &amp;#123; &lt;span class=&#34;attr&#34;&gt;status&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#125;, &lt;span class=&#34;attr&#34;&gt;caught&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;&amp;gt;): &lt;span class=&#34;title class_&#34;&gt;ObservableInput&lt;/span&gt;&amp;lt;&amp;#123;&amp;#125;&amp;gt; =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (x.&lt;span class=&#34;property&#34;&gt;status&lt;/span&gt; !== &lt;span class=&#34;number&#34;&gt;404&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     config.&lt;span class=&#34;property&#34;&gt;baseUrl&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;http://localhost:8080/api&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;of&lt;/span&gt;(&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I’m not going to bother explaining all of the details of RxJS 6, you can look that all up if you are interested.&lt;/p&gt;
&lt;h2 id=&#34;Caveats&#34;&gt;&lt;a href=&#34;#Caveats&#34; class=&#34;headerlink&#34; title=&#34;Caveats&#34;&gt;&lt;/a&gt;Caveats&lt;/h2&gt;&lt;p&gt;Regardless of which of the two methods you use, you’ll need to make sure that your code will not need to change to access the database or the config file. If you are going to use a database, even then, I would not hard-code anything other than a relative URL. If the database is on some external server, make sure that you can proxy the code to is from your application’s server so that if and when the database location changes, you won’t need to recompile your code.&lt;/p&gt;
&lt;h2 id=&#34;Full-resulting-code&#34;&gt;&lt;a href=&#34;#Full-resulting-code&#34; class=&#34;headerlink&#34; title=&#34;Full resulting code&#34;&gt;&lt;/a&gt;Full resulting code&lt;/h2&gt;&lt;p&gt;Just in case I left out a step or you are otherwise lost or maybe all you really care about is the code so you can copy and paste it.&lt;/p&gt;
&lt;p&gt;Here it is:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;variable constant_&#34;&gt;APP_INITIALIZER&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;BrowserModule&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/platform-browser&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;NgModule&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;HttpClientModule&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;HttpClient&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/common/http&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./app.component&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;ConfigService&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./config.service&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;ObservableInput&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;../../node_modules/rxjs&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; map, catchError &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/operators&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;load&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;http: HttpClient, config: ConfigService&lt;/span&gt;): (&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (): &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt; =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&amp;gt;((&lt;span class=&#34;attr&#34;&gt;resolve&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;a: &lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;): &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       http.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./config.json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         .&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: ConfigService&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             config.&lt;span class=&#34;property&#34;&gt;baseUrl&lt;/span&gt; = x.&lt;span class=&#34;property&#34;&gt;baseUrl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;title function_&#34;&gt;catchError&lt;/span&gt;((&lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &amp;#123; &lt;span class=&#34;attr&#34;&gt;status&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#125;, &lt;span class=&#34;attr&#34;&gt;caught&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;&amp;gt;): &lt;span class=&#34;title class_&#34;&gt;ObservableInput&lt;/span&gt;&amp;lt;&amp;#123;&amp;#125;&amp;gt; =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (x.&lt;span class=&#34;property&#34;&gt;status&lt;/span&gt; !== &lt;span class=&#34;number&#34;&gt;404&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             config.&lt;span class=&#34;property&#34;&gt;baseUrl&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;http://localhost:8080/api&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;of&lt;/span&gt;(&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         ).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;declarations&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;BrowserModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;HttpClientModule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;provide&lt;/span&gt;: &lt;span class=&#34;variable constant_&#34;&gt;APP_INITIALIZER&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;useFactory&lt;/span&gt;: load,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;deps&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;HttpClient&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;ConfigService&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;multi&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;bootstrap&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppModule&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/ngrx-actions-class-vs-object-literal/</guid>
            <title>NgRX Actions - Class vs Object Literal</title>
            <link>http://davembush.github.com/ngrx-actions-class-vs-object-literal/</link>
            <category>angular</category>
            <category>NgRX</category>
            <pubDate>Tue, 03 Jul 2018 06:30:58 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;When NgRX 4 came out and I discovered that the “right” way of creating Actions is to use TypeScript classes and not Object Literals, I was a bit surprised.  Why would you use a Class that requires you to use the “new” keyword?  Why would you put multiple classes in one file?  This is insane! &lt;figure&gt;&lt;img src=&#34;/uploads/2018/07/2018-07-04.png&#34; title=&#34;NgRX Actions - Class vs Object Literal&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/dkobras/8342620023/&#34;&gt;dkobras&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by-sa/2.0/&#34;&gt; CC BY-SA&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Options&#34;&gt;&lt;a href=&#34;#Options&#34; class=&#34;headerlink&#34; title=&#34;Options&#34;&gt;&lt;/a&gt;Options&lt;/h2&gt;&lt;p&gt;An Action is an object that contains a type variable and optionally, a payload. Depending on how you code your action, the payload may or may not have “payload” as the variable name. In NgRX version 2, payload was an optional variable. To improve type checking, payload was removed from the Action interface. &lt;/p&gt;
&lt;p&gt;The official documentation for NgRX version 4 encourages us to create a class for each action we want to dispatch. &lt;/p&gt;
&lt;p&gt;Suppose you have a Wait reducer that needs a Start action and an End action.  The code might look something like:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.End&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;To use this code in our reducer or effects you would import like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then we would dispatch the action using the store we’ve injected into our code. We’ll cover that later. But for now, the dispatch basically looks like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you need to pass other information to an Action, your constructor can accept them: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ACTION_WITH_MESSAGE&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.ActionWithMessage&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ActionWithMessage&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;ACTION_WITH_MESSAGE&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; message: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This allows us to access the action payload as &lt;code&gt;Wait.message&lt;/code&gt; instead of &lt;code&gt;Wait.payload&lt;/code&gt;. Contrast this to putting the same code in a class with static methods as I’ve explained in previous articles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/how-to-upgrade-ngrx-to-4-x/&#34;&gt;How to Upgrade to NgRX 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ACTION_WITH_MESSAGE&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.ActionWithMessage&amp;#x27;&lt;/span&gt;;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;start&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;end&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;actionWithMessage&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;message: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ACTION_WITH_MESSAGE&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;payload&lt;/span&gt;: message&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In summary, we can have multiple classes and new them up.  Or we can have one class with multiple static methods that return object literals.&lt;/p&gt;
&lt;h2 id=&#34;Advantage-Object-Literal&#34;&gt;&lt;a href=&#34;#Advantage-Object-Literal&#34; class=&#34;headerlink&#34; title=&#34;Advantage Object Literal&#34;&gt;&lt;/a&gt;Advantage Object Literal&lt;/h2&gt;&lt;p&gt;The main advantage to using the object literal way is that you don’t need to create an object.  You also stay with the “One class, one file” model that is so common in Angular. On the surface, this seems to be a clear winner.&lt;/p&gt;
&lt;h2 id=&#34;Advantage-Classes&#34;&gt;&lt;a href=&#34;#Advantage-Classes&#34; class=&#34;headerlink&#34; title=&#34;Advantage Classes&#34;&gt;&lt;/a&gt;Advantage Classes&lt;/h2&gt;&lt;p&gt;But, because of the way we import the class bundles, the way we end up using the code looks nearly the same.  The main difference is that we must instantiate the class.  But we also get the option of having a different variable type for each action, we aren’t forced to use a variable named “payload” to hold all the associated data.  Further, if you need multiple payloads, you can do that.  You aren’t limited by how many parameters&amp;#x2F;member variables each of your Action classes use.  When using Effects, we can type the return value of the Effect to the Action we want it to return. &lt;/p&gt;
&lt;p&gt;In fact, it is this type safety that is the main reason we should be creating Actions using the Class method instead of the object literal method.&lt;/p&gt;
&lt;h2 id=&#34;Tweaking-Classes-For-Bigger-Advantage&#34;&gt;&lt;a href=&#34;#Tweaking-Classes-For-Bigger-Advantage&#34; class=&#34;headerlink&#34; title=&#34;Tweaking Classes For Bigger Advantage&#34;&gt;&lt;/a&gt;Tweaking Classes For Bigger Advantage&lt;/h2&gt;&lt;p&gt;There is a further tweak we can make to using classes that will give us an additional advantage when we use the code in our Reducers. Instead of marking the action types as strings, we can make them enums.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.End&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You’ll see below that this will give us extra type safety in our Reducers.&lt;/p&gt;
&lt;h2 id=&#34;Type-Safety-in-Reducers&#34;&gt;&lt;a href=&#34;#Type-Safety-in-Reducers&#34; class=&#34;headerlink&#34; title=&#34;Type Safety in Reducers&#34;&gt;&lt;/a&gt;Type Safety in Reducers&lt;/h2&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;ActionReducer&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// This could go in wait.actions.ts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;End&lt;/span&gt; | &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Start&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;WaitReducer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;  state = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, action: Action&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(action.&lt;span class=&#34;property&#34;&gt;type&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;..&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We’ve ensured that the only Actions we will get are from Wait.&lt;/p&gt;
&lt;p&gt;Now, what you can’t see here is that if the payload we were send were of different types, each case statement would automatically typecast the action to the proper type.  This only works with Enums.  If you try this with strings, it won’t work the same way.&lt;/p&gt;
&lt;h2 id=&#34;Type-Safety-in-Effects&#34;&gt;&lt;a href=&#34;#Type-Safety-in-Effects&#34; class=&#34;headerlink&#34; title=&#34;Type Safety in Effects&#34;&gt;&lt;/a&gt;Type Safety in Effects&lt;/h2&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Injectable&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;WaitEffects&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;start$&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt;&amp;gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;actions$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;action: Wait.Add&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;((): &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&amp;#123;&lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ADD&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;payload&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;end$&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt;&amp;gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;actions$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;action: Wait.End&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;((): &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      (&amp;#123;&lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ADD&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;payload&lt;/span&gt;: -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; actions$: Actions&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We’ve ensured that the only Action that get returned from either Effect is the Add action.&lt;/p&gt;
&lt;h2 id=&#34;Tweak-Object-Literal-Implementation&#34;&gt;&lt;a href=&#34;#Tweak-Object-Literal-Implementation&#34; class=&#34;headerlink&#34; title=&#34;Tweak Object Literal Implementation&#34;&gt;&lt;/a&gt;Tweak Object Literal Implementation&lt;/h2&gt;&lt;p&gt;Now, you might think, “I can get all that type safety by creating a separate interface for each action type.  And this would be true.  But this would be even more files and the only thing to be gained is that your Action object gets created faster because you are using Object Literals.  I’m not sure the advantage is worth the pain.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;If you are converting an NgRX 2 site to NgRX 4, you’ll probably want to follow the advice I originally gave for upgrading.  But, once you’ve upgraded, you’ll want to move to using Classes so that you can take advantage of the stronger typings this will afford you.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/vmware-s-clarity-design-system-for-angular/</guid>
            <title>VMWare&#39;s Clarity Design System for Angular</title>
            <link>http://davembush.github.com/vmware-s-clarity-design-system-for-angular/</link>
            <category>angular</category>
            <category>css</category>
            <category>clarity</category>
            <category>ui</category>
            <category>ux</category>
            <pubDate>Tue, 20 Mar 2018 06:30:51 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Unless you are a CSS wizard, you are probably using one of two CSS frameworks for your Angular projects or some sort of adaptation of them.  Bootstrap or Angular Material.  These have served us well, but they have one major flaw.  They target the “Mobile First” method of design.  This is great if your application must work on a mobile device.  But most corporate web applications target web applications.&lt;/p&gt;
&lt;p&gt;Have you ever heard any of these objections from your end users?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why is everything so big?&lt;/li&gt;
&lt;li&gt;Why can’t I have the label NEXT to the input field?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then you explain, it is so the screen can run on a mobile device and you hear, “But, this application will never run on a mobile device!”  Which is a valid point. &lt;/p&gt;
&lt;p&gt;Therefore, I was so excited to hear that VMWare has finally taken up the challenge of creating a Desktop First CSS Framework called &lt;a href=&#34;//vmware.github.io/clarity/&#34;&gt;Clarity&lt;/a&gt;. &lt;/p&gt;
&lt;figure style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;/vmware-s-clarity-design-system-for-angular/2018-03-20.jpg&#34; class=&#34;&#34; title=&#34;VMWare&amp;#39;s Clarity Design System for Angular&#34;&gt;&lt;figcaption&gt;Photo credit: [Sean Hering Photography](//visualhunt.com/author/2edd3b) on [Visual Hunt](//visualhunt.com/re/764a8a) / [ CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;
 &lt;/figure&gt; 

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-Is-Clarity&#34;&gt;&lt;a href=&#34;#What-Is-Clarity&#34; class=&#34;headerlink&#34; title=&#34;What Is Clarity?&#34;&gt;&lt;/a&gt;What Is Clarity?&lt;/h2&gt;&lt;p&gt;To call it a CSS Framework though doesn’t really do it justice.  It is a UI&amp;#x2F;UX System.  Much like Angular Material.  In fact, an application written using Clarity is going to end up looking a lot like a Material Design application.  The main differences are going to be, it will be built for the desktop rather than a mobile device.  This means the components won’t be so fat and the components will look more like what you would expect from a desktop application.&lt;/p&gt;
&lt;h2 id=&#34;Why-Clarity&#34;&gt;&lt;a href=&#34;#Why-Clarity&#34; class=&#34;headerlink&#34; title=&#34;Why Clarity?&#34;&gt;&lt;/a&gt;Why Clarity?&lt;/h2&gt;&lt;p&gt;Aside from the Desktop vs Mobile issue, there are other reasons you might want to consider using Clarity.&lt;/p&gt;
&lt;h3 id=&#34;Material-Meets-Bootstrap&#34;&gt;&lt;a href=&#34;#Material-Meets-Bootstrap&#34; class=&#34;headerlink&#34; title=&#34;Material Meets Bootstrap&#34;&gt;&lt;/a&gt;Material Meets Bootstrap&lt;/h3&gt;&lt;p&gt;Now, while the end result looks a lot like Angular Material, the way you style your application feels a lot more like Bootstrap.  This is something that has always bothered me about Angular Material.  In fact, one of the main reasons we didn’t use Angular Material at one of the places I’ve worked is specifically because it was too hard to make the site follow the design guides that were handed down to us.  Bootstrap, on the other hand, gave us an easy way to adapt the CSS to fit the requirements.  Give me components that provide functionality and provide a way that I can style them.  But don’t make common components their own special component just so you can add CSS to the standard element.  Make that a common CSS thing that you can change with CSS!&lt;/p&gt;
&lt;h3 id=&#34;508-Compliance&#34;&gt;&lt;a href=&#34;#508-Compliance&#34; class=&#34;headerlink&#34; title=&#34;508 Compliance&#34;&gt;&lt;/a&gt;508 Compliance&lt;/h3&gt;&lt;p&gt;Another big motivation for me to look at Clarity is that they have stricter 508 compliance if you use the default theme.  The one that is particularly important to me is the issue of contrast to support people who are color blind like me.  That’s 10% of the population that is impacted by color blindness in general which is a pretty large sample size to be pissing off with your color choices when there are tools that will let you see what it will look like to the various type of color blind people.  There compliance doesn’t end there, but that is the one that impacts me, so I care more about it.&lt;/p&gt;
&lt;h3 id=&#34;More-x2F-Better-Components&#34;&gt;&lt;a href=&#34;#More-x2F-Better-Components&#34; class=&#34;headerlink&#34; title=&#34;More&amp;#x2F;Better Components&#34;&gt;&lt;/a&gt;More&amp;#x2F;Better Components&lt;/h3&gt;&lt;p&gt;Third, several components exist that meet some requirements that the team I’m currently working on could have benefited from. While Angular Material is moving to fill in some of the gaps, the Clarity system has those components already.&lt;/p&gt;
&lt;h3 id=&#34;Great-Documentation&#34;&gt;&lt;a href=&#34;#Great-Documentation&#34; class=&#34;headerlink&#34; title=&#34;Great Documentation&#34;&gt;&lt;/a&gt;Great Documentation&lt;/h3&gt;&lt;p&gt;While it isn’t necessarily unique to Clarity, I found the documentation complete and easy to locate.  However, just like any of the other systems, you should take the time to read through most of the documentation, so you understand how it should work prior to actually trying to code anything.&lt;/p&gt;
&lt;h3 id=&#34;Easy-to-Use&#34;&gt;&lt;a href=&#34;#Easy-to-Use&#34; class=&#34;headerlink&#34; title=&#34;Easy to Use&#34;&gt;&lt;/a&gt;Easy to Use&lt;/h3&gt;&lt;p&gt;Finally, I took Clarity for a spin and found it MUCH easier to use than either Bootstrap or Angular Material.  Everything worked the way I expected it to and I don’t believe there was one time I had to add CSS to one of my components to make it do what I really wanted it to do.  This says a lot for a product that hasn’t even been officially released yet.&lt;/p&gt;
&lt;h3 id=&#34;VMWare&#34;&gt;&lt;a href=&#34;#VMWare&#34; class=&#34;headerlink&#34; title=&#34;VMWare&#34;&gt;&lt;/a&gt;VMWare&lt;/h3&gt;&lt;p&gt;Oh, and did I mention that it is backed by VMWare?  I always like it when an open source project is backed by a major company that doesn’t appear to be going away anytime soon.  This is why I tend to stay away from some of the smaller projects, like Vue, regardless of how great they are.  Yes, I know it has a big community.  But, people need to eat.  A project with corporate sponsorship is much more likely to be run well, progress at a steady pace, and be responsive to issues that crop up.&lt;/p&gt;
&lt;h2 id=&#34;Why-You-Might-Want-to-Pass&#34;&gt;&lt;a href=&#34;#Why-You-Might-Want-to-Pass&#34; class=&#34;headerlink&#34; title=&#34;Why You Might Want to Pass&#34;&gt;&lt;/a&gt;Why You Might Want to Pass&lt;/h2&gt;&lt;p&gt;For all these benefits, there are a couple of reasons why you might want to at least wait if not ignore Clarity. &lt;/p&gt;
&lt;p&gt;As I mentioned above, the product hasn’t been released yet and therefore there will be breaking changes as the project makes its way to version 1.0.  This is easily mitigated by freezing your development efforts to the current release and only upgrading when you have time to address the breaking changes. &lt;/p&gt;
&lt;p&gt;You also might want to avoid using Clarity if you really need Mobile First.  I’m sure you could adapt the CSS to work with Mobile as well as Desktop.  Personally, I’d just make sure all of my business logic was outside my components so that I could develop a Mobile front-end and a Desktop front-end without losing any functionality.  This would mean one site would use Bootstrap, Angular Material, or IONIC and the other would use Clarity.&lt;/p&gt;
&lt;h2 id=&#34;Installation-The-Right-Way&#34;&gt;&lt;a href=&#34;#Installation-The-Right-Way&#34; class=&#34;headerlink&#34; title=&#34;Installation - The Right Way&#34;&gt;&lt;/a&gt;Installation - The Right Way&lt;/h2&gt;&lt;p&gt;The clarity site has instructions for installing Clarity that are general enough that you could use the styles on multiple frameworks.  What follows is an adaptation of those instructions that are specific to an Angular site that uses the Angular CLI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save @webcomponents/custom-elements@^1.0.0&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is a polyfill that we will add to our polyfills.ts file&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;import &amp;#39;@webcomponents/custom-elements/custom-elements.min&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save @clr/icons&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save @clr/ui&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save bootstrap@4.0.0-alpha.5&lt;/code&gt;(note I didn’t try using the current release version.  It may, or may not, work.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save @clr/angular&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the icon css and js files to the .angular-cli.json file in the “styles” and “scripts” section:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;styles&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;styles.css&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;../node_modules/@clr/icons/clr-icons.css&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;../node_modules/@clr/ui/clr-ui.min.css&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;../node_modules/@clr/icons/clr-icons.min.js&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Import the clarity module into your AppModule to make the components available&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;ClarityModule&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@clr/angular&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;BrowserModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;ClarityModule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm start&lt;/code&gt; to make sure everything builds correctly.  If everything builds and you run the app, you will see that the page has bigger fonts than you may be used to.  If it looks like it has always looked, you probably don’t have it configured correctly yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If Clarity looks like it might meet your requirements better than the alternatives, I encourage you to take &lt;a href=&#34;//vmware.github.io/clarity/&#34;&gt;Clarity&lt;/a&gt; for a spin.&lt;/p&gt;
&lt;h2 id=&#34;Other-Places-Talking-About-VMWare-Clarity&#34;&gt;&lt;a href=&#34;#Other-Places-Talking-About-VMWare-Clarity&#34; class=&#34;headerlink&#34; title=&#34;Other Places Talking About VMWare Clarity&#34;&gt;&lt;/a&gt;Other Places Talking About VMWare Clarity&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//www.starwindsoftware.com/blog/vmware-clarity-why-should-you-care&#34;&gt;VMware Clarity – Why should you care&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//devchat.tv/adv-in-angular/aia-172-clarity-project-vmware-eudes-petonnet-vincent-matt-hippely&#34;&gt;The Clarity Project at VMware&lt;/a&gt; (podcast episode)&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/property-based-testing-in-angular-with-jsverify/</guid>
            <title>Property Based Testing in Angular with jsVerify</title>
            <link>http://davembush.github.com/property-based-testing-in-angular-with-jsverify/</link>
            <category>angular</category>
            <category>jasmine</category>
            <category>property based testing</category>
            <pubDate>Tue, 06 Feb 2018 06:30:58 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Several weeks ago, I mentioned that I’ve been playing around with &lt;a href=&#34;/property-based-testing-revealed-a-better-way-to-test/&#34;&gt;Property Based Testing&lt;/a&gt;.  In particular, I’ve been using it with my Angular code.  The framework I’ve chosen is &lt;a href=&#34;//github.com/jsverify/jsverify&#34;&gt;jsVerify&lt;/a&gt; because it seemed like the most straight forward of the available tools and it has a documented way of integrating with Jasmine, which Angular test use by default.  Angular with jsVerify.  How does that work?&lt;/p&gt;
&lt;p&gt;The documentation for how to use jsVerify seems to be written for people who already understand Property Based Testing from some other environment.  This makes picking it up and using it awkward at best.&lt;/p&gt;
&lt;p&gt;Here’s what I’ve learned along the way. &lt;figure&gt;&lt;img src=&#34;/uploads/2018/02/2018-02-06.jpg&#34; title=&#34;Property Based Testing in Angular with jsVerify&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//visualhunt.com/author/a3b62c&#34;&gt;Official U.S. Navy Imagery&lt;/a&gt; on &lt;a href=&#34;//visualhunt.com/re/d44953&#34;&gt;Visual Hunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;The-Basics&#34;&gt;&lt;a href=&#34;#The-Basics&#34; class=&#34;headerlink&#34; title=&#34;The Basics&#34;&gt;&lt;/a&gt;The Basics&lt;/h2&gt;&lt;p&gt;To install jsVerify into your dev environment, use:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save-dev jsverify&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To use the code in your spec file, import jsverify using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import * as jsc from &amp;#39;jsverify&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We us ‘jsc’ because jsVerify originated from &lt;a href=&#34;//github.com/douglascrockford/JSCheck&#34;&gt;jsCheck&lt;/a&gt;.  Why not just use jsCheck?  Well, because it looks even less well documented.  That doesn’t mean that it is, but that is how I felt when I went to the sites and I couldn’t be bothered to wade through the wall of text the documentation site presented me with.&lt;/p&gt;
&lt;h2 id=&#34;A-Simple-Test&#34;&gt;&lt;a href=&#34;#A-Simple-Test&#34; class=&#34;headerlink&#34; title=&#34;A Simple Test&#34;&gt;&lt;/a&gt;A Simple Test&lt;/h2&gt;&lt;p&gt;Now to setup a simple test.  We won’t really test anything.  I just want to show the structure of the test.&lt;/p&gt;
&lt;p&gt;There are two methods you might use that seem very similar.  &lt;code&gt;assertForall()&lt;/code&gt; and &lt;code&gt;checkForall()&lt;/code&gt;.  What I didn’t realize at first is that &lt;code&gt;assertForall()&lt;/code&gt; is the one you want to use because it will throw the exception that Jasmine is listening for so that I knows the test failed.  If you use &lt;code&gt;checkForall()&lt;/code&gt; the test will fail, but Jasmine will think it succeeded.  And if you’re thinking, yeah but you should use expect() with checkForAll(), that doesn’t always work quite the way you would expect.  No pun intended.&lt;/p&gt;
&lt;p&gt;The basic structure of a test will go inside of your &lt;code&gt;it()&lt;/code&gt; block.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Any two numeric values&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should equal 20&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jsc.&lt;span class=&#34;title function_&#34;&gt;assertForall&lt;/span&gt;(jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;, jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;a: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;, b: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; a_and_b_equal_20 = a + b === &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a_and_b_equal_20;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This test will, obviously, fail.  A test we would expect to pass would look like this.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Any two numeric values&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should be able to be added in any order&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jsc.&lt;span class=&#34;title function_&#34;&gt;assertForall&lt;/span&gt;(jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;, jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;a: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;, b: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; a_and_b_equal_20 = a + b === b + a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a_and_b_equal_20;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You may have guessed by now that &lt;code&gt;assertForall()&lt;/code&gt;takes a variable number of parameters.  The last parameter is a callback that runs our test.  The parameters before the callback describe the kinds of parameters that will be passed to the callback.  The description of the parameter is of type Arbitrary.  So, what we’ve said above is something to the effect of, “generate two random integers and pass them to the callback.”  You can check the jsVerify site for “Primitive Arbitraries” to see what is built in.&lt;/p&gt;
&lt;h2 id=&#34;Adding-Complexity&#34;&gt;&lt;a href=&#34;#Adding-Complexity&#34; class=&#34;headerlink&#34; title=&#34;Adding Complexity&#34;&gt;&lt;/a&gt;Adding Complexity&lt;/h2&gt;&lt;p&gt;It won’t be long before you run into a situation where the primitive arbitraries won’t do the job for you and you’ll need to resort to the combinators.  This allows you to create a brand new arbitrary by combining primitives together.  The one I found myself using the most was &lt;code&gt;oneof()&lt;/code&gt; where you pass a list of arbitraries as an array and the system will pick from the list and generate a new random value from the list.  Don’t confuse this with &lt;code&gt;either()&lt;/code&gt;.  I’ve used &lt;code&gt;oneof()&lt;/code&gt; in combination with &lt;code&gt;constant()&lt;/code&gt;for cases where I’ve needed to create a random value from a list of possible values.&lt;/p&gt;
&lt;p&gt;Where things really got interesting though was when I needed to create an object with random values for the properties.  For this, you’ll need to use a record.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; recordArb = jsc.&lt;span class=&#34;title function_&#34;&gt;record&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: jsc.&lt;span class=&#34;property&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: jsc.&lt;span class=&#34;property&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;arrayThing&lt;/span&gt;: jsc.&lt;span class=&#34;title function_&#34;&gt;array&lt;/span&gt;(jsc.&lt;span class=&#34;title function_&#34;&gt;record&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;fieldOne&lt;/span&gt;: jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;dateField&lt;/span&gt;: jsc.&lt;span class=&#34;property&#34;&gt;datetime&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This will let us pass random objects to our tests.  This is great for testing Reducers.  You’ll notice we even were able to create a nested array.  This will create a random length array with random records inside of it.&lt;/p&gt;
&lt;h2 id=&#34;Arbitraries-from-Generators&#34;&gt;&lt;a href=&#34;#Arbitraries-from-Generators&#34; class=&#34;headerlink&#34; title=&#34;Arbitraries from Generators&#34;&gt;&lt;/a&gt;Arbitraries from Generators&lt;/h2&gt;&lt;p&gt;Now that I’ve been working with it for a while, I can’t remember why it was so difficult.  But the one place I did have some trouble was the concept of Generators vs Arbitraries.  Arbitraries are what we need to pass into &lt;code&gt;assertForall().&lt;/code&gt; Generators are what we use when we need to come up with some way of creating our own special random data.  You rarely need to use this, but when you do, being able to convert the Generator to an Arbitrary will become critical.&lt;/p&gt;
&lt;p&gt;To convert a generator to an arbitrary, use bless.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;jsc.&lt;span class=&#34;property&#34;&gt;generator&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;bless&lt;/span&gt;(generatorThing);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Typing&#34;&gt;&lt;a href=&#34;#Typing&#34; class=&#34;headerlink&#34; title=&#34;Typing&#34;&gt;&lt;/a&gt;Typing&lt;/h2&gt;&lt;p&gt;As of this writing, the typing for &lt;code&gt;checkForall()&lt;/code&gt; is incorrect.  It is typed as returning &lt;code&gt;Result&amp;lt;any&amp;gt;&lt;/code&gt;when it in fact returns &lt;code&gt;Result&amp;lt;any&amp;gt; | boolean&lt;/code&gt;I just discovered this so I haven’t entered a pull request that will fix the issue.  If you decide to use &lt;code&gt;checkForall()&lt;/code&gt; instead of &lt;code&gt;assertForall()&lt;/code&gt;, you’ll need to fix up the typings yourself.&lt;/p&gt;
&lt;h2 id=&#34;Puzzles&#34;&gt;&lt;a href=&#34;#Puzzles&#34; class=&#34;headerlink&#34; title=&#34;Puzzles&#34;&gt;&lt;/a&gt;Puzzles&lt;/h2&gt;&lt;p&gt;The one thing I’m still trying to figure out is the best way of running the test.  The fact of the matter is that jsVerify tests do not lend themselves to the structure of a Jasmine test.  And since I have to generate 100 instances of random data for each test, it may not be efficient to separate each test out into separate it statements.&lt;/p&gt;
&lt;p&gt;For now, I’m running all related evaluations within one it statement and using the back-tick string delimiter to allow me to have a multi-line it() string that describes all that I’m testing.  But, by combining all of my test like this, I can no longer determine which of my test actually failed.&lt;/p&gt;
&lt;p&gt;I’m not exactly sure what the best solution to that is (yet) and right now, there don’t seem to be a lot of people using jsVerify or any other property based framework with Jasmine to get a lot of hints on how we might write tests that are easy to use.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;I encourage you to give jsVerify a try.  It really isn’t that hard to pick up and hopefully, this short article will smooth over some of the problems you may have as you get started.  Despite the puzzles I mentioned above the advantages of using it over example based testing encourage me to see just how far I can push this framework.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/why-more-angular-modules-are-better-than-one/</guid>
            <title>Why more Angular Modules are Better than One</title>
            <link>http://davembush.github.com/why-more-angular-modules-are-better-than-one/</link>
            <category>angular</category>
            <category>modules</category>
            <category>ngmodule</category>
            <pubDate>Tue, 16 Jan 2018 06:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I recently reviewed some Angular code that uses one module.  The AppModule. To manage the entire code base.  And, this isn’t tiny code base.  The main excuse I’ve heard for this is that the code originated during the beta cycle, prior to NgModule being added to the framework.  I call it out as an excuse because once it was added, it was clear that we needed to have more than one module.  The fact that this code base doesn’t have more than one module shows a disregard for doing things right over doing things fast.  In the best case, it shows ignorance.&lt;/p&gt;
&lt;p&gt;But, the larger question this code base raises for me is this: “Why are more modules better than fewer modules?”  After all, using one module obviously works.  Isn’t the fact that it works sufficient enough?&lt;/p&gt;
&lt;p&gt;And here are three really good reasons to use more modules. &lt;figure&gt;&lt;img src=&#34;/uploads/2018/01/2018-01-16-1.jpg&#34; title=&#34;Why more Angular Modules are Better than One&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//visualhunt.com/author/1d5a2d&#34;&gt;goodrob13&lt;/a&gt; on &lt;a href=&#34;//visualhunt.com/re/0a04dc&#34;&gt;Visualhunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Avoid-Component-Collision&#34;&gt;&lt;a href=&#34;#Avoid-Component-Collision&#34; class=&#34;headerlink&#34; title=&#34;Avoid Component Collision&#34;&gt;&lt;/a&gt;Avoid Component Collision&lt;/h2&gt;&lt;p&gt;For discussion purposes, let’s say you have an application with two routes.  Each route allows you to edit different kinds of content.  You may be inclined to create some child components in each route to assist with your functionality.  In the process of doing this, you may end up with two components that have the same name.  Both as a class and as a selector.  If you are including everything in one mega module, you will need to artificially give the components different names.  However, if each route has its own module, you can declare the components in the declaration section of each module with the same name and each route will be able to call the appropriate component.  Components aren’t shared across modules until you export the component.  In that case, you would also want the component to live in a shared module where we would give it a more meaningful, generic, name that made sense as a shared module.&lt;/p&gt;
&lt;h2 id=&#34;Lazy-Loading&#34;&gt;&lt;a href=&#34;#Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;Lazy Loading&#34;&gt;&lt;/a&gt;Lazy Loading&lt;/h2&gt;&lt;p&gt;Once you’ve created modules for each of your routes, the next logical step in your development effort will be lazy loading the module.  Lazy loading provides more advantages than just the ability to load only what you need when you need it.  That’s just the most obvious gain.  Lazy loading also provides a separate context for @Injectables.  Once again, just like having the ability to isolate the components, by using modules in conjunction with lazy loading, we have the ability to have route specific @Injectables with the same name and each route&amp;#x2F;module will behave appropriately.&lt;/p&gt;
&lt;p&gt;There is one caveat.  You can’t provide an @Injectable in a lazy loaded module and an application level module and expect things to work correctly.  And, if you are still using a framework like NgRX 2 that needs to have access to services, you’ll need to make your services globally available.  This is one of many reasons why I believe you should upgrade to NgRX 4 as soon as is possible.  This allows you to take full advantage of the Angular Lazy Loading capabilities and all their benefits.&lt;/p&gt;
&lt;h2 id=&#34;Cleaner-Code&#34;&gt;&lt;a href=&#34;#Cleaner-Code&#34; class=&#34;headerlink&#34; title=&#34;Cleaner Code&#34;&gt;&lt;/a&gt;Cleaner Code&lt;/h2&gt;&lt;p&gt;Even if you’ve never seen a major application with one module, I’m sure you can imagine what a mess that module is.  I don’t think I really need to say much more about this.&lt;/p&gt;
&lt;p&gt;For more on Angular Modules, I recommend &lt;a href=&#34;//angular.io/guide/ngmodule-faq&#34;&gt;this FAQ that the Angular team put together&lt;/a&gt;. &lt;a href=&#34;//medium.com/@cyrilletuzi/understanding-angular-modules-ngmodule-and-their-scopes-81e4ed6f7407&#34;&gt;This Medium article&lt;/a&gt; is also pretty good.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/attaching-an-angular-child-component-s-form-to-a-parent/</guid>
            <title>Attaching an Angular Child Component&#39;s Form to a Parent</title>
            <link>http://davembush.github.com/attaching-an-angular-child-component-s-form-to-a-parent/</link>
            <category>angular</category>
            <category>reactive forms</category>
            <category>child component</category>
            <pubDate>Tue, 02 Jan 2018 06:30:57 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;This past week I implemented a pattern I’ve been pondering for almost a year now.  I like to create rather modular and granular code such that if my data structures are nested, the components that represent them on the screen should be nested as well. The question becomes, how does one create a reactive form in a child component and attach that form to the parent form in a way that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Leaves the definition of the child form entirely in the child&lt;/li&gt;
&lt;li&gt;Leaves the processing of the data in the parent where the parent form is the “Smart Component” and the child is a “Dumb Component”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most solutions I was able to find attack this problem assuming the child component will be part of an array of controls.  And I suppose, if you wanted to, you could implement that pattern using an array with one element.  But, that just felt like a hack.  If you are interested in that solution, this is the wrong article. &lt;figure&gt;&lt;img src=&#34;/uploads/2018/01/2018-01-02.jpg&#34; title=&#34;Attaching an Angular Child Component&amp;#39;s Form to a Parent&#34;&gt; Photo by &lt;a href=&#34;//visualhunt.com/author/e29ed9&#34;&gt;loomingy1&lt;/a&gt; on &lt;a href=&#34;//visualhunt.com/re/b9f011&#34;&gt;Visual hunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Avoiding-the-Problem&#34;&gt;&lt;a href=&#34;#Avoiding-the-Problem&#34; class=&#34;headerlink&#34; title=&#34;Avoiding the Problem&#34;&gt;&lt;/a&gt;Avoiding the Problem&lt;/h2&gt;&lt;p&gt;Up until recently, I’ve been able to avoid this problem entirely by creating separate forms and listening to each individually.  I could have done the same thing here.  But, every time I use this solution, I feel like there must be a better way.  Besides, when you do this correctly, you only need to have one place where you are listening for changes to the form and one place where you send changes into the form.  The work around requires multiples of each.&lt;/p&gt;
&lt;h2 id=&#34;Basics-of-Nested-Forms&#34;&gt;&lt;a href=&#34;#Basics-of-Nested-Forms&#34; class=&#34;headerlink&#34; title=&#34;Basics of Nested Forms&#34;&gt;&lt;/a&gt;Basics of Nested Forms&lt;/h2&gt;&lt;p&gt;Another way of avoiding the problem is to create the form as one monolithic component.  A very simple implementation would be to have a form that looked something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;formGroup&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;formControlName&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;mainInput&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;formGroupName&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;childGroup&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;formControlName&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;childInput&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;  &amp;lt;/&lt;span class=&#34;attr&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And the reactive definition in the typescript that looked like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;form&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;FormGroup&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;formBuilder: FormBuilder&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt; = formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;mainInput&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;childGroup&lt;/span&gt;: formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;childInput&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then we would grab the data from the valueChanges observable or patch the data into the form using &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;childGroup.&lt;span class=&#34;property&#34;&gt;childInput&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Creating-the-Child-Component&#34;&gt;&lt;a href=&#34;#Creating-the-Child-Component&#34; class=&#34;headerlink&#34; title=&#34;Creating the Child Component&#34;&gt;&lt;/a&gt;Creating the Child Component&lt;/h2&gt;&lt;p&gt;But what if you we want everything in the childGroup to be a control?  That control would look something like this: &lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;formGroup&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;formControlName&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;childInput&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;and then our TypeScript code looks like a normal formGroup:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt; = formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;childInput&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Embedding-the-Child-in-the-Parent&#34;&gt;&lt;a href=&#34;#Embedding-the-Child-in-the-Parent&#34; class=&#34;headerlink&#34; title=&#34;Embedding the Child in the Parent&#34;&gt;&lt;/a&gt;Embedding the Child in the Parent&lt;/h2&gt;&lt;p&gt;Now that we have a separate component for our child form, we can use normal directives to add it into our main form.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;formGroup&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;formControlName&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;mainInput&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;app-child&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;app-child&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And our TypeScript code now only needs a reference to mainInput.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;formBuilder: FormBuilder&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt; = formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;mainInput&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Connecting-the-Child-to-the-Parent&#34;&gt;&lt;a href=&#34;#Connecting-the-Child-to-the-Parent&#34; class=&#34;headerlink&#34; title=&#34;Connecting the Child to the Parent&#34;&gt;&lt;/a&gt;Connecting the Child to the Parent&lt;/h2&gt;&lt;p&gt;The problem is, whenever the childInput element changes, the parent form’s valueChanges observer won’t get notified because the parent form no longer knows about the child form.  And this is where things interesting.&lt;/p&gt;
&lt;p&gt;Hooking the child form to the parent form is actually pretty straight forward.  The trick is knowing when in the component life-cycle to run the code.&lt;/p&gt;
&lt;p&gt;The first thing to know is that we aren’t going to be able to hookup the child in the parent until after the child component has been created.  This happens after ngOnInit() so we need to find another lifecycle hook to wire everything up in.  It just so happens that ngAfterViewInit() is the perfect place for this. &lt;/p&gt;
&lt;p&gt;Second, it might be tempting to hookup everything in the child component during it’s ngOnInit() method.  But this would too tightly couple the child component to the parent.  Something we would like to avoid. &lt;/p&gt;
&lt;p&gt;So, the next thing we need to do is that we need to use @ViewChild() to allow the parent to get a hold of the child component, and ultimately the formGroup member variable it will initialize for us.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ViewChild&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;ChildComponent&lt;/span&gt;) &lt;span class=&#34;attr&#34;&gt;childComponent&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ChildComponent&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now in &lt;code&gt;ngAfterViewInit()&lt;/code&gt; we can add the child’s &lt;code&gt;FormGroup&lt;/code&gt; as an additional “control” and set the parent &lt;code&gt;FormGroup&lt;/code&gt; to the parent control’s &lt;code&gt;FormGroup&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;ngAfterViewInit&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;addControl&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;childForm&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;childComponent&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;childComponent&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;setParent&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And finally, you’ll want to subscribe to &lt;code&gt;valueChanges&lt;/code&gt; and your NgRX &lt;code&gt;Store&lt;/code&gt; in &lt;code&gt;ngAfterViewInit()&lt;/code&gt; after this wire-up code.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-cross-field-validation/</guid>
            <title>Angular Cross Field Validation</title>
            <link>http://davembush.github.com/angular-cross-field-validation/</link>
            <category>angular</category>
            <category>formgroup</category>
            <category>validation</category>
            <pubDate>Tue, 19 Dec 2017 06:30:36 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;This past week I had my first need to do use cross field validation in Angular.  While the general mechanics are pretty trivial, my particular implementation ran into some issues that you might be interested in. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/12/2017-12-19.jpg&#34; title=&#34;Angular Cross Field Validation&#34;&gt; Photo by &lt;a href=&#34;//visualhunt.com/author/525a6d&#34;&gt;MSVG&lt;/a&gt; on &lt;a href=&#34;//visualhunt.com/re/2a53de&#34;&gt;VisualHunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;The-Basics&#34;&gt;&lt;a href=&#34;#The-Basics&#34; class=&#34;headerlink&#34; title=&#34;The Basics&#34;&gt;&lt;/a&gt;The Basics&lt;/h2&gt;&lt;p&gt;As I said, the mechanics of implementing cross field validation in Angular is rather trivial.  It all hinges on the concept of a FieldGroup which is a key concept of &lt;a href=&#34;/tags/reactive-forms/&#34;&gt;Reactive Forms&lt;/a&gt;. What we need to do to implement cross field validation is to attach a validation function to the form instead of the field. &lt;/p&gt;
&lt;p&gt;I’m going to use the AppComponent to host the FormBuilder for simplicity:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;form&lt;/span&gt;:&lt;span class=&#34;title class_&#34;&gt;FormGroup&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;formBuilder: FormBuilder&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;=formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// form field definitions here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;validator&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;formGroupValidationFunction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that &lt;code&gt;formBuilder.group()&lt;/code&gt; takes a second parameter which takes a &lt;code&gt;validator&lt;/code&gt; function or function array.  This parameter can also the &lt;code&gt;asyncValidator&lt;/code&gt; key or the &lt;code&gt;state&lt;/code&gt; key. &lt;/p&gt;
&lt;p&gt;The function we are pointing to takes the &lt;code&gt;FormGroup&lt;/code&gt; as a parameter.  So, within the function, we can access the controls that are part of the &lt;code&gt;FormGroup&lt;/code&gt;.  Once we have the fields, we can access the values of the fields and perform whatever comparisons we need, which is pretty trivial.  Then, if there is an error, we call setError() on the control(s) that are impacted.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;formGroupValidationFunction&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;formGroup&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;FormGroup&lt;/span&gt;):&lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  constfield1=formGroup.&lt;span class=&#34;property&#34;&gt;controls&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;field1&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  constfield2=formGroup.&lt;span class=&#34;property&#34;&gt;controls&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;field2&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// compare field1 to field2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    field1.&lt;span class=&#34;title function_&#34;&gt;setError&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;formGroupValidationFunction&lt;/span&gt;:&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    field2.&lt;span class=&#34;title function_&#34;&gt;setError&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;formGroupValidationFunction&lt;/span&gt;:&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Dealing-with-Field-Validations&#34;&gt;&lt;a href=&#34;#Dealing-with-Field-Validations&#34; class=&#34;headerlink&#34; title=&#34;Dealing with Field Validations&#34;&gt;&lt;/a&gt;Dealing with Field Validations&lt;/h2&gt;&lt;p&gt;One of the problems I ran into was that my fields also had individual validations on them.  Specifically, the two fields were numbers that I was validating to make sure they were positive and only displayed two decimal places.  By the time I entered the validation for the FormGroup, that validation had already run.  I also wanted to clear any pre-existing errors from my form validation.&lt;/p&gt;
&lt;p&gt;It turns out that the way Angular determines if there is an error is if the forms errors object exist.  If it is null, it is assumed there aren’t any errors. &lt;/p&gt;
&lt;p&gt;Now, to clear the pre-existing errors, the safest thing to do is to first delete the error I was adding from each field, and then check to see if there are any other errors in the errors object.  If there aren’t any errors, we then call &lt;code&gt;setError(null)&lt;/code&gt; to clear out the error object.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(field1.&lt;span class=&#34;property&#34;&gt;errors&lt;/span&gt;&amp;amp;&amp;amp;field1.&lt;span class=&#34;property&#34;&gt;errors&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;formGroupValidationFunction&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  deletefield1.&lt;span class=&#34;property&#34;&gt;errors&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;formGroupValidationFunction&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;keys&lt;/span&gt;(field1.&lt;span class=&#34;property&#34;&gt;errors&lt;/span&gt;).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;===&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    field1.&lt;span class=&#34;title function_&#34;&gt;setErrors&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;When adding the &lt;code&gt;FormGroup&lt;/code&gt; error, we only call &lt;code&gt;setError()&lt;/code&gt; if the errors object is null.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!field1.&lt;span class=&#34;property&#34;&gt;errors&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  field1.&lt;span class=&#34;title function_&#34;&gt;setError&lt;/span&gt;(&amp;#123; &lt;span class=&#34;attr&#34;&gt;formGroupValidationFunction&lt;/span&gt;:&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;By doing this, we ensure that the field validation errors aren’t overwritten by the &lt;code&gt;FormGroup&lt;/code&gt; validations.&lt;/p&gt;
&lt;h2 id=&#34;Alternatives&#34;&gt;&lt;a href=&#34;#Alternatives&#34; class=&#34;headerlink&#34; title=&#34;Alternatives&#34;&gt;&lt;/a&gt;Alternatives&lt;/h2&gt;&lt;p&gt;The code I’ve shown works well enough if you only have a one-off validation.  But in my case, I needed to use the validation between multiple sets of fields.  To do this, I created a function that returns another function. &lt;/p&gt;
&lt;p&gt;The outer function takes two parameters.  Strings that are keys into the controls of the form group.  So, now instead of:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;formBuilder:FormBuilder&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;=formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// form stuff here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;validator&lt;/span&gt;:formGroupValidationFunctionHere&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I have:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;formBuilder:FormBuilder&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;=formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// form stuff here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;validator&lt;/span&gt;:&lt;span class=&#34;title function_&#34;&gt;formGroupValidationFunction&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;field1&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;field2&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And my validation function looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;formGroupValidationFunction&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;f1&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;f2&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;): &lt;span class=&#34;title class_&#34;&gt;Function&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;attr&#34;&gt;formGroup&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;FormGroup&lt;/span&gt;): &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constfield1=formGroup.&lt;span class=&#34;property&#34;&gt;controls&lt;/span&gt;[f1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constfield2=formGroup.&lt;span class=&#34;property&#34;&gt;controls&lt;/span&gt;[f2];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// compare field1 to field2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      field1.&lt;span class=&#34;title function_&#34;&gt;setError&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;formGroupValidationFunction&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      field2.&lt;span class=&#34;title function_&#34;&gt;setError&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;formGroupValidationFunction&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that my &lt;code&gt;setError()&lt;/code&gt; uses the name of the function as the error key.  I just do this for clarity.  You CAN name it whatever you want.  I name it the same to be consistent with how the Angular validations work. &lt;/p&gt;
&lt;p&gt;Finally, I like to put my custom validations in a separate Static Class rather than including them in the component code.  I’ve only placed them in the component code here for illustrative purposes.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/how-to-really-screw-up-an-angular-project/</guid>
            <title>How to Really Screw Up an Angular Project</title>
            <link>http://davembush.github.com/how-to-really-screw-up-an-angular-project/</link>
            <category>angular</category>
            <category>best practices</category>
            <category>cli</category>
            <pubDate>Tue, 12 Dec 2017 06:30:38 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;We all know about best practices.  But what does it take to really mess up a project?  Well, for starters, you do EVERYTHING wrong.  You don’t just ignore one or two best practices, you ignore them all.  By evaluating the mess you can get yourself into by ignoring best practices, I think we can all learn better why these recommendations exist. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/12/2017-12-12.png&#34; title=&#34;How to Really Screw Up an Angular Project&#34;&gt; Photo on &lt;a href=&#34;//visualhunt.com/re/f81060&#34;&gt;VisualHunt&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Don’t-Use-the-CLI&#34;&gt;&lt;a href=&#34;#Don’t-Use-the-CLI&#34; class=&#34;headerlink&#34; title=&#34;Don’t Use the CLI&#34;&gt;&lt;/a&gt;Don’t Use the CLI&lt;/h2&gt;&lt;p&gt;I can grant a pass if you aren’t using the Angular CLI because you started your project before the CLI became viable.  But, by this point you should have already converted your project over to use the CLI or be making plans to move to the CLI.&lt;/p&gt;
&lt;p&gt;Why is this a problem? &lt;/p&gt;
&lt;p&gt;Because 99% of the developers you are going to find will expect that when you ask for an Angular developer, what you mean is that you are looking for someone who can write Angular code using the Angular CLI.  This brings with is a certain number of expectations about how your code is laid out.  Some of these are outlined below.  But just as a way of generalizing, if your code doesn’t look like it started as an Angular CLI project, you are going to slow down any future developers you hire.&lt;/p&gt;
&lt;h2 id=&#34;Ignore-Naming-Conventions&#34;&gt;&lt;a href=&#34;#Ignore-Naming-Conventions&#34; class=&#34;headerlink&#34; title=&#34;Ignore Naming Conventions&#34;&gt;&lt;/a&gt;Ignore Naming Conventions&lt;/h2&gt;&lt;p&gt;Ignoring naming conventions may seem trivial, but naming conventions add clarity.  The reason we name component files as components is so we know they are all part of a component.  Reducer file names should be named &lt;code&gt;foo-bar.reducer.ts&lt;/code&gt;.  Not naming the files in a way that is clear reduces the ability to maintain the code in a clear and efficient way. &lt;/p&gt;
&lt;p&gt;Maybe you’ve come up with your own naming conventions for your organization.  This is better.  But still this is not best.  This means that you probably won’t be able to use the CLI to scaffold out your code and any future developer is going to have to learn your way of writing Angular instead of the industry standard way of writing Angular. &lt;/p&gt;
&lt;p&gt;But the absolute worst thing you can do is to not have any standard or to mix standards.  This is confusing and just looks ugly.&lt;/p&gt;
&lt;h2 id=&#34;Cluster-Code-by-Function-Instead-of-Feature&#34;&gt;&lt;a href=&#34;#Cluster-Code-by-Function-Instead-of-Feature&#34; class=&#34;headerlink&#34; title=&#34;Cluster Code by Function Instead of Feature&#34;&gt;&lt;/a&gt;Cluster Code by Function Instead of Feature&lt;/h2&gt;&lt;p&gt;The other thing you might be tempted to do is to cluster your code by function.  That is, you might want to group all of your components together.  And then all your services under another folder.  Maybe put your reducers under one folder and your effects under another. &lt;/p&gt;
&lt;p&gt;Trust me, this just adds fuel to the argument that “NgRX is confusing”.  Group all your similar NgRX code together and put all of your code together grouped by feature.  If you’ve named the files correctly, you won’t need the directories to keep things sorted out and you won’t be forced to use one module for your entire project.&lt;/p&gt;
&lt;h2 id=&#34;Use-one-Module&#34;&gt;&lt;a href=&#34;#Use-one-Module&#34; class=&#34;headerlink&#34; title=&#34;Use one Module&#34;&gt;&lt;/a&gt;Use one Module&lt;/h2&gt;&lt;p&gt;Maybe you don’t know any better.  Or maybe it is because you’ve violated the rules above.  But no matter the reason, if you end up putting all your imports, providers, and declarations in your app module, you’ll soon see just how ugly this looks.  One for the whole application violates the single responsibility principle.  You want a module per feature at the very least.  I often create modules just to provide an additional level of granularity that further implements the single responsibility principle.&lt;/p&gt;
&lt;h2 id=&#34;No-Lazy-Loading&#34;&gt;&lt;a href=&#34;#No-Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;No Lazy Loading&#34;&gt;&lt;/a&gt;No Lazy Loading&lt;/h2&gt;&lt;p&gt;Yes, even if your application has only one route.  You want to lazy load your code so that a different bundle gets created for each route.  Done well, you can make changes to one route without impacting any of the others.  When you deploy the new code, your end user should only have to reload the route(s) that changed.  Without lazy loading, when you redeploy, they’ll have to reload an entirely new set of files.&lt;/p&gt;
&lt;h2 id=&#34;Embed-Colors-and-Fonts-in-Component-CSS&#34;&gt;&lt;a href=&#34;#Embed-Colors-and-Fonts-in-Component-CSS&#34; class=&#34;headerlink&#34; title=&#34;Embed Colors and Fonts in Component CSS&#34;&gt;&lt;/a&gt;Embed Colors and Fonts in Component CSS&lt;/h2&gt;&lt;p&gt;You should have a theme file, or an application level CSS file that defines the fonts, and colors that should be used throughout your application.  The only CSS that should be included at the component level is CSS that is necessary to layout the html within the component.  That is, position information.  If you are putting color information in, or specifying a font size or font, you are probably doing it wrong. &lt;/p&gt;
&lt;p&gt;Why is this an issue?  &lt;/p&gt;
&lt;p&gt;Well, let’s suppose that someone decides that all of your warnings should be a different color.  If you can make that change in one CSS file, that is going to be a lot easier than looking through all the CSS in all of your components to make sure you found every place the color needs to be changed. &lt;/p&gt;
&lt;p&gt;Don’t repeat yourself makes just as much sense in CSS as anywhere else in your code.&lt;/p&gt;
&lt;h2 id=&#34;Mix-Template-Files-and-Strings&#34;&gt;&lt;a href=&#34;#Mix-Template-Files-and-Strings&#34; class=&#34;headerlink&#34; title=&#34;Mix Template Files and Strings&#34;&gt;&lt;/a&gt;Mix Template Files and Strings&lt;/h2&gt;&lt;p&gt;As you should know by now, you can create the HTML templates and the CSS templates either by using strings in the TS file or by using separate HTML and CSS files.  You should use one style and use it consistently.  I’ve seen one project where they were using a mix of both and they had at least one file that was using a string for the HTML but still had the HTML file next to the TS and CSS file.  That’s just confusing.  Don’t do that!&lt;/p&gt;
&lt;h2 id=&#34;Don’t-Remove-Dead-Code&#34;&gt;&lt;a href=&#34;#Don’t-Remove-Dead-Code&#34; class=&#34;headerlink&#34; title=&#34;Don’t Remove Dead Code&#34;&gt;&lt;/a&gt;Don’t Remove Dead Code&lt;/h2&gt;&lt;p&gt;As we work on code, we might create a variable, or use an import that no longer is needed.  The linter is really good about telling us what code is no longer needed.  Use it and keep you code cleaned up.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-Stay-Up-to-Date&#34;&gt;&lt;a href=&#34;#Don’t-Stay-Up-to-Date&#34; class=&#34;headerlink&#34; title=&#34;Don’t Stay Up to Date&#34;&gt;&lt;/a&gt;Don’t Stay Up to Date&lt;/h2&gt;&lt;p&gt;Angular is progressing at a pretty fast rate and the Angular CLI is as well.  I realize that it isn’t always possible to keep the version you are working on up to date with the latest tools.  But not keeping your tools up to date for several months at a time is also something you want to avoid.  The sooner you update, the easier the update will be. &lt;/p&gt;
&lt;p&gt;Will the update break something?  &lt;/p&gt;
&lt;p&gt;Yes, that is likely.  You should plan that into your work flow.  Otherwise, you’ll get to the point where it will take so long to update, you’ll never get approval to do it because it will take too long.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-ionic-and-angular-cli/</guid>
            <title>Angular Ionic and Angular CLI</title>
            <link>http://davembush.github.com/angular-ionic-and-angular-cli/</link>
            <category>angular</category>
            <category>ionic</category>
            <category>angular-cli</category>
            <pubDate>Tue, 14 Nov 2017 06:30:12 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;As you might have noticed from last week’s post, I’ve shifted my focus from pure Angular to learning Angular Ionic.  And while last week’s post focused more on just &lt;a href=&#34;/angular-ionic-putty-ssh-authorized_keys-format&#34;&gt;getting Ionic setup on a Windows environment&lt;/a&gt;, this post will focus more on integrating Ionic and Angular CLI to work together. &lt;/p&gt;
&lt;p&gt;If you are familiar with Ionic, you should already know that it provides its own CLI that allows you to scaffold out a new application using a basic template.  This CLI is also used to help register the project with the Ionic Dashboard and scaffold out a limited number of file types if you use Ionic 3.  However, there are several problems I have with using the Ionic CLI.  First, and probably most important to me, is there is no test scaffolding!  Second, it neither follows the standard naming convention for files nor does it comply with the Angular Style Guide when it comes to directory structure. &lt;/p&gt;
&lt;p&gt;My first attempt at correcting the problem was to try to add Ionic to an existing Angular CLI project.  I almost had that working, but I got stuck trying to get the SCSS implementation working.  I finally gave up once I realized that Ionic seems to load files on demand, including SCSS files and templates.  I might come back to this once I’ve gained more experience with Ionic and have a better idea of how it works under the hood. &lt;/p&gt;
&lt;p&gt;Then, my second thought was to just add the Angular CLI to an existing Ionic CLI project.  It turns out this was much easier to get working.  This allows me to use the standard &lt;code&gt;ng&lt;/code&gt; commands to scaffold out my components, services, interfaces, etc… and because I’m using the Angular CLI scaffolding, the tests also get scaffold out for me. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/11/2017-11-14.jpg&#34; title=&#34;Angular Ionic and Angular CLI&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/internetarchivebookimages/14762635481/&#34;&gt;Internet Archive Book Images&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/09daa4&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//flickr.com/commons/usage/&#34;&gt; No known copyright restrictions&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;  

&lt;p&gt;For the purposes of this post, I’m going to assume you’ve already created a project using the Ionic CLI.  What follows are the steps you need to take to add in the Angular CLI.&lt;/p&gt;
&lt;h2 id=&#34;Add-Angular-CLI&#34;&gt;&lt;a href=&#34;#Add-Angular-CLI&#34; class=&#34;headerlink&#34; title=&#34;Add Angular CLI&#34;&gt;&lt;/a&gt;Add Angular CLI&lt;/h2&gt;&lt;p&gt;All of the additions to the package.json file are in devDependencies.  The version numbers I’ve included are for the version at the time of this writing. You’ll want to modify for newer versions as they are released. First, of course, add the angular cli&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;@angular/cli&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;1.4.9&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This will give you the ability to use the &lt;code&gt;ng&lt;/code&gt; commands to scaffold out files.  To allow the tests to run, you’ll also want to add the following:&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;@types/jasmine&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~2.5.53&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;@types/jasminewd2&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~2.0.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;@types/node&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~6.0.60&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;jasmine-core&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~2.6.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;jasmine-spec-reporter&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~4.1.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;karma&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~1.7.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;karma-chrome-launcher&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~2.1.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;karma-cli&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~1.0.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;karma-coverage-istanbul-reporter&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;^1.2.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;karma-jasmine&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~1.1.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;karma-jasmine-html-reporter&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;^0.2.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;protractor&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~5.1.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;ts-node&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~3.2.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I also use tslint quite extensively in my projects, so I also add in the following:&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;codelyzer&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~3.2.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;tslint&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;~5.7.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;tslint-immutable&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;^4.4.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;angular-cli-json&#34;&gt;&lt;a href=&#34;#angular-cli-json&#34; class=&#34;headerlink&#34; title=&#34;.angular-cli.json&#34;&gt;&lt;/a&gt;.angular-cli.json&lt;/h2&gt;&lt;p&gt;The main file that makes the Angular CLI recognize the project as an Angular CLI project is the &lt;code&gt;.angular-cli.json&lt;/code&gt; file.  The easiest thing to do is to take an existing file from another project and copy it into your Ionic project.  This file belongs in the root of your project. &lt;/p&gt;
&lt;p&gt;Once you’ve done that, there is one small change you need to make.  The &lt;code&gt;main.ts&lt;/code&gt; file that is the entry point of the application lives under the &lt;code&gt;app&lt;/code&gt; directory in an Ionic project rather than directly under &lt;code&gt;src&lt;/code&gt; like it does with an Angular CLI project.  It would be tempting to change the location of the file, but the Ionic build process is looking for it under the &lt;code&gt;app&lt;/code&gt; directory.  An easier fix is to change the location in our &lt;code&gt;.angular-cli.json&lt;/code&gt; file so that our tests can find it.  It is the only place that needs to know of the new location. Change .angular-cli.json so main points to the right location:&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./node_modules/@angular/cli/lib/config/schema.json&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;project&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ionic-with-angular-cli&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;apps&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;outDir&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;dist&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;assets&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;&amp;quot;assets&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;&amp;quot;favicon.ico&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      **&lt;span class=&#34;attr&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;app/main.ts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;polyfills&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;polyfills.ts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;test.ts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;karma-conf-js&#34;&gt;&lt;a href=&#34;#karma-conf-js&#34; class=&#34;headerlink&#34; title=&#34;karma.conf.js&#34;&gt;&lt;/a&gt;karma.conf.js&lt;/h2&gt;&lt;p&gt;To run your tests, you’ll need a &lt;code&gt;karma.conf.js&lt;/code&gt; file in your root directory.  Again, the easiest thing to do is to copy this file over from a project you created with the Angular CLI.&lt;/p&gt;
&lt;h2 id=&#34;tsconfig-json&#34;&gt;&lt;a href=&#34;#tsconfig-json&#34; class=&#34;headerlink&#34; title=&#34;tsconfig.json&#34;&gt;&lt;/a&gt;tsconfig.json&lt;/h2&gt;&lt;p&gt;You should already have a &lt;code&gt;tsconfig.json&lt;/code&gt; file in your project root directory.  If you open it, you’ll see it has an exclude section that is excluding &lt;code&gt;node_modules&lt;/code&gt;.  You’ll need to tell it to exclude &lt;code&gt;test.ts&lt;/code&gt; and &lt;code&gt;*.spec.ts&lt;/code&gt; files so it doesn’t pick up the test files during a normal compile cycle.&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;exclude&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;node_modules&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;test.ts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;**/*.spec.ts&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;polyfills-ts&#34;&gt;&lt;a href=&#34;#polyfills-ts&#34; class=&#34;headerlink&#34; title=&#34;polyfills.ts&#34;&gt;&lt;/a&gt;polyfills.ts&lt;/h2&gt;&lt;p&gt;The tests use the &lt;code&gt;polyfills.ts&lt;/code&gt; file, so you’ll need to add one that was originally created using the Angular CLI.  This belongs in your &lt;code&gt;src&lt;/code&gt; directory.&lt;/p&gt;
&lt;h2 id=&#34;test-ts&#34;&gt;&lt;a href=&#34;#test-ts&#34; class=&#34;headerlink&#34; title=&#34;test.ts&#34;&gt;&lt;/a&gt;test.ts&lt;/h2&gt;&lt;p&gt;Copy a &lt;code&gt;test.ts&lt;/code&gt; file into your &lt;code&gt;src&lt;/code&gt; directory from a project that you created with the &lt;code&gt;Angular CLI&lt;/code&gt;.  If you don’t put this file in, you won’t be able to run any tests.&lt;/p&gt;
&lt;h2 id=&#34;tsconfig-spec-json&#34;&gt;&lt;a href=&#34;#tsconfig-spec-json&#34; class=&#34;headerlink&#34; title=&#34;tsconfig.spec.json&#34;&gt;&lt;/a&gt;tsconfig.spec.json&lt;/h2&gt;&lt;p&gt;The tests use &lt;code&gt;tsconfig.spec.json&lt;/code&gt; located in the &lt;code&gt;src&lt;/code&gt; directory.  The problem is, a standard &lt;code&gt;tsconfig.spec.json&lt;/code&gt; file inherits from the &lt;code&gt;tsconfig.json&lt;/code&gt; file we just modified above which doesn’t look at all like the &lt;code&gt;tsconfig.json&lt;/code&gt; file in an Angular CLI project.  I found the easiest thing to do was to create a new copy of &lt;code&gt;tsconfig.spec.json&lt;/code&gt; that is a merge of the two files in an Angular CLI project.  This worked at the time of this writing, if you run into trouble, you may need to merge the two files you started with on your own.  My result looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;compileOnSave&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;outDir&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;../out-tsc/spec&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;sourceMap&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;declaration&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;moduleResolution&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;emitDecoratorMetadata&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;experimentalDecorators&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;es5&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;typeRoots&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;node_modules/@types&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;es2017&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;dom&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;baseUrl&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;commonjs&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;types&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;jasmine&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;files&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;test.ts&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;include&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;**/*.spec.ts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;**/*.d.ts&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;typings-d-ts&#34;&gt;&lt;a href=&#34;#typings-d-ts&#34; class=&#34;headerlink&#34; title=&#34;typings.d.ts&#34;&gt;&lt;/a&gt;typings.d.ts&lt;/h2&gt;&lt;p&gt;I’m not sure this file was needed, but it was another file I found in an Angular CLI project that wasn’t in my Ionic CLI project, so I added it.  It goes in your &lt;code&gt;src&lt;/code&gt; directory and is just a copy of the file that is in your Angular CLI project.&lt;/p&gt;
&lt;h2 id=&#34;pages&#34;&gt;&lt;a href=&#34;#pages&#34; class=&#34;headerlink&#34; title=&#34;pages&#34;&gt;&lt;/a&gt;pages&lt;/h2&gt;&lt;p&gt;You’ll notice that your &lt;code&gt;pages&lt;/code&gt; directory is at the same level as your &lt;code&gt;src&lt;/code&gt; directory which doesn’t comply with the Angular CLI.  I moved mine so that it is under the &lt;code&gt;src&lt;/code&gt; directory just to keep things consistent.  You’ll need to fix up imports once you move it of course.&lt;/p&gt;
&lt;h2 id=&#34;Regenerate-Pages&#34;&gt;&lt;a href=&#34;#Regenerate-Pages&#34; class=&#34;headerlink&#34; title=&#34;Regenerate Pages&#34;&gt;&lt;/a&gt;Regenerate Pages&lt;/h2&gt;&lt;p&gt;Because the pages that got generated don’t conform to the style guide and don’t have any tests, I just regenerated mine and copied the relevant code into the newly generated files.&lt;/p&gt;
&lt;h2 id=&#34;Tests&#34;&gt;&lt;a href=&#34;#Tests&#34; class=&#34;headerlink&#34; title=&#34;Tests&#34;&gt;&lt;/a&gt;Tests&lt;/h2&gt;&lt;p&gt;At this point, you should have a project that looks a lot more like an Angular CLI project.  You’ll still use the Ionic command to do your regular build and development cycle and the ng commands for testing and generating new files.  Running tests works the same as you should already be used to from using Angular.  The one thing you will notice is that you’ll see a warning in your test: &lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Critical dependency: the request of a dependency is an expression&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This is a known “error” that neither the  Angular CLI group or the Ionic group seem interested in addressing. &lt;/p&gt;
&lt;p&gt;At this point, I haven’t tried any E2E tests using this setup so I don’t know if there are any additional tweaks that need to be made. &lt;/p&gt;
&lt;p&gt;You can find the code for this at this branch of a project I’m working on. &lt;a href=&#34;//github.com/DaveMBush/ionic-crud/tree/Add-Angular-CLI&#34;&gt;https://github.com/DaveMBush/ionic-crud/tree/Add-Angular-CLI&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-ionic-putty-ssh-and-authorized-keys-format/</guid>
            <title>Angular IONIC, Putty SSH, and authorized_keys Format</title>
            <link>http://davembush.github.com/angular-ionic-putty-ssh-and-authorized-keys-format/</link>
            <category>angular</category>
            <category>ionic</category>
            <category>putty</category>
            <category>ssh</category>
            <pubDate>Tue, 07 Nov 2017 11:29:21 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I started playing with IONIC last week.  Since I do all my development on a Windows computer, this has already lead to a particular Windows based challenge that I was able to track down and deduce the solution for.  But I was unable to find a solution that specifically addressed using IONIC, putty SSH, and authorized_keys Format, which is what someone is likely to search for when they see this issue. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/10/2017-11-07.jpg&#34; title=&#34;Angular IONIC, Putty SSH, and authorized_keys&#34;&gt; Photo via &lt;a href=&#34;//visualhunt.com/re/64a968&#34;&gt;VisualHunt&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Connect-to-the-dashboard&#34;&gt;&lt;a href=&#34;#Connect-to-the-dashboard&#34; class=&#34;headerlink&#34; title=&#34;Connect to the dashboard?&#34;&gt;&lt;/a&gt;Connect to the dashboard?&lt;/h2&gt;&lt;p&gt;When you setup an IONIC project, everything goes pretty much as planned until you get to the question “Do you want to connect to the dashboard?”  I’m going to assume you’ve answered that question in the affirmative and that you’ve already created an IONIC account and successfully logged in or you wouldn’t be here. &lt;/p&gt;
&lt;p&gt;The next thing that is likely to happen is that you’ll try to have it generate an SSH key for you.  But, since you don’t have OpenSSL installed, it failed.  The next thing you probably did was to search for the Windows install of OpenSSL only to find that it hasn’t been maintained in quite a while and that the recommended way of creating a public&amp;#x2F;private key pair is to use Putty.  Which you did. &lt;/p&gt;
&lt;p&gt;Now, what brought you here is that you have a public key in a file that you are trying to upload to IONIC.  The error you are continuing to see is “&lt;em&gt;filename&lt;/em&gt; does not appear to be a valid SSH public key. (Not in authorized_keys file format.)&lt;/p&gt;
&lt;h2 id=&#34;No-Public-Key&#34;&gt;&lt;a href=&#34;#No-Public-Key&#34; class=&#34;headerlink&#34; title=&#34;No Public Key?&#34;&gt;&lt;/a&gt;No Public Key?&lt;/h2&gt;&lt;p&gt;OK.  Maybe you got to this site and you don’t have a public&amp;#x2F;private key pair yet.  You don’t even know what putty is.  You can find some good instructions about installing and &lt;a href=&#34;//www.chiark.greenend.org.uk/~sgtatham/putty/docs.html&#34;&gt;using putty here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You will be most interested in the section on using PuttyGen to create a public&amp;#x2F;private key pair (you want to use RSA, the default).&lt;/p&gt;
&lt;h2 id=&#34;Putty-to-authorized-keys&#34;&gt;&lt;a href=&#34;#Putty-to-authorized-keys&#34; class=&#34;headerlink&#34; title=&#34;Putty to authorized_keys&#34;&gt;&lt;/a&gt;Putty to authorized_keys&lt;/h2&gt;&lt;p&gt;And the question you have now is, “How do I convert my putty SSH public key into “authorized_keys format?”  Whatever that is. &lt;/p&gt;
&lt;p&gt;Well you are in luck because, I can tell you exactly what you need to do. &lt;/p&gt;
&lt;p&gt;First, open that public key text file you have in a text editor.  You’ll see it is in the format of: &lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;---- BEGIN SSH2 PUBLIC KEY ----&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Comment: &amp;quot;rsa-key-20171026&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AAAAB3NzaC1yc2EAAAABJQAAAQEAicxYxlgFjQDMtkuuCY3GsnkdWEy38NSgi7N8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/SBj1ohas2GU/0bY2H6Inpg6lQ6oYmvaIy5rQZ8+pcOPQNLNo0EyWbWhmBfWI+b5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;XHg5F6eIhaTjKVViJG3tDe3V4boMvgE18Rzof8ZJSa7cH0kqL32SPqnQdgtpDNc5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;qjBHN+mQ5fMcxMM4YaViGtq8j6M7obt7oJrnVQWdPWQQYuo6TSm4LCjQ4/q77vqF&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;L59IFFd6nUnEltpkrh8RXKu6By1+G4eN66AdpZ/h9Z41qwN/oJ2kOf0qqT1t6Wa6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8RcgWxSIgMzE16imwB84o8p9DQtnEb7BVK0UXzt+Wp2ToC3arw==&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;---- END SSH2 PUBLIC KEY ----&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The first thing you want to do is to delete the first two lines and the last line.  Once that is done, remove the line feeds so that the remaining RSA key is all on one line. &lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;AAAAB3NzaC1yc2EA...t+Wp2ToC3arw==&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, prefix the line with “ssh-rsa “.  Make sure there is a space after “ssh-rsa” and before the body of the key. &lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh-rsa AAAAB3NzaC1yc2EA...t+Wp2ToC3arw==&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Officially, this puts the key in “authorized_keys file format” but to get IONIC to accept it, you also need to put the email you used when you signed up for IONIC dashboard at the end of the key.  This mean you’ll need to add a space after the double equals that indicates the end of the key, and then your email address goes immediately after that. &lt;/p&gt;
&lt;p&gt;Save the file.  &lt;/p&gt;
&lt;p&gt;Unless you like living dangerously, you should save it to another file.  &lt;/p&gt;
&lt;p&gt;Now upload the file to ionic using: &lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ionic ssh add&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This command will prompt you for the file name, as before, but this time you’ll give it the file you just saved, and it should work.  The only reason I can think of why it might not is if you deleted too many characters when you were removing the line feeds.&lt;/p&gt;
&lt;h2 id=&#34;IONIC-Private-Key&#34;&gt;&lt;a href=&#34;#IONIC-Private-Key&#34; class=&#34;headerlink&#34; title=&#34;IONIC Private Key&#34;&gt;&lt;/a&gt;IONIC Private Key&lt;/h2&gt;&lt;p&gt;For some reason, IONIC only understands OpenSSL for both sides.  I wasted nearly a day trying to get PAgent working.  Don’t waste your time. &lt;/p&gt;
&lt;p&gt;Back in PuttyGen, there is a Conversions menu option.  Under that, what you want to select is the option “Export OpenSSH Key…”  Give it a filename etc. &lt;/p&gt;
&lt;p&gt;Now, back in the terminal window for your IONIC project, finish the setup as they’ve directed on their site, but just before you run “git push ionic master” run &lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ionic ssh use path_to_the_filename_you_just_exported.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Once you’ve done this, go to &lt;code&gt;c:\users\[username]\.ssh&lt;/code&gt; and look for a file named “&lt;code&gt;config&lt;/code&gt;“.  Open the file in an editor that understands files with no carriage returns and make sure the line that starts with “IdentityFile” has quotes around the path to the file if the path has a space in it.  On my computer it doesn’t, but I’ve seen reports from others that this has caused them hours of trouble. &lt;/p&gt;
&lt;p&gt;With all of that configured, now you can run &lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git push ionic master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If your private key has a password, it will prompt for the password and you are off to the races. &lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/what-i-learned-using-angular-material/</guid>
            <title>What I Learned Using Angular Material</title>
            <link>http://davembush.github.com/what-i-learned-using-angular-material/</link>
            <category>angular</category>
            <category>angular material</category>
            <pubDate>Tue, 31 Oct 2017 06:30:06 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;This past week I took Angular Material for a spin.  In the process, I learned a few things you might find helpful.  Some may be helpful even if you aren’t interested in using Angular Material for your projects. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/10/2017-10-31.png&#34; title=&#34;What I Learned Using Angular Material&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/30478819@N08/36098571263/&#34;&gt;wuestenigel&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/3c147a&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Choose-Wisely&#34;&gt;&lt;a href=&#34;#Choose-Wisely&#34; class=&#34;headerlink&#34; title=&#34;Choose Wisely&#34;&gt;&lt;/a&gt;Choose Wisely&lt;/h2&gt;&lt;p&gt;Up until recently, I’ve been reluctant to try Angular Material for two basic reasons.  First, it didn’t seem quite ready for prime time.  I found out that it now has all of the components I would need for most of the applications I would want to develop.  Second, using Angular Material is a commitment.  Instead of writing primarily HTML, you write primarily angular material tags.  I thought this was a problem.  That I wouldn’t have the flexibility to switch between Angular Material and some other CSS framework.  But, as it turns out.  Angular Material doesn’t really lock me in any more than any other CSS framework or component library.  Which leads to the first lesson learned.  Choose your CSS frameworks and component library wisely.  If you decide to make a change mid-course, it is likely to suck up a lot of time from your project.  I would recommend doing some proof of concepts prior to committing to any component library or CSS framework.&lt;/p&gt;
&lt;h2 id=&#34;Less-Filling&#34;&gt;&lt;a href=&#34;#Less-Filling&#34; class=&#34;headerlink&#34; title=&#34;Less Filling&#34;&gt;&lt;/a&gt;Less Filling&lt;/h2&gt;&lt;p&gt;Because Angular Material is both a CSS framework and a component library, it turns out that writing templates using Angular Material is significantly terser than say, Bootstrap.  I don’t mean to imply that it produces less HTML.  Just that writing the templates tends to be a bit cleaner overall.&lt;/p&gt;
&lt;h2 id=&#34;import&#34;&gt;&lt;a href=&#34;#import&#34; class=&#34;headerlink&#34; title=&#34;@import&#34;&gt;&lt;/a&gt;@import&lt;/h2&gt;&lt;p&gt;I’ve written before about &lt;a href=&#34;https://medium.com/@davembush/adding-css-and-javascript-to-an-angular-cli-project-2b843a8283f3&#34;&gt;how to include CSS in your Angular project&lt;/a&gt;, but I’ve learned a new trick while implementing Angular Material. &lt;/p&gt;
&lt;p&gt;This might be a relative new thing with the Angular CLI, but apparently, you can &lt;code&gt;@import&lt;/code&gt; local and external CSS in your styles.css file.  When I evaluated the code that gets built, I found that the build process knows to keep the external code external yet bundles the internal code with the project.  This is something you could use regardless of what CSS framework or component library you are using.&lt;/p&gt;
&lt;h2 id=&#34;Layout&#34;&gt;&lt;a href=&#34;#Layout&#34; class=&#34;headerlink&#34; title=&#34;Layout&#34;&gt;&lt;/a&gt;Layout&lt;/h2&gt;&lt;p&gt;As I suspected, a lot of layout expects you to use Flex CSS.  Since I already had decided to use Flex-Layout to manage my layout with Bootstrap, this was not a big surprise.  The Flex-Layout project started its life as part of the Angular JS Material project and split out as a separate project when both moved to support Angular.  At times, figuring out where to use what directive may require you to use Developer Tools.  But I didn’t find this to be any more of a deterrent than using CSS in any other platform.  Just keep in mind that some of the Flex CSS is already defined in the Material components.&lt;/p&gt;
&lt;h2 id=&#34;Creating-Components-from-Injectables&#34;&gt;&lt;a href=&#34;#Creating-Components-from-Injectables&#34; class=&#34;headerlink&#34; title=&#34;Creating Components from @Injectables&#34;&gt;&lt;/a&gt;Creating Components from @Injectables&lt;/h2&gt;&lt;p&gt;While creating my demo project, there were two places where I needed to create “snack bars” or dialogs.  In Angular Material, the way you accomplish this is by calling a method on an @Injectable.  aka, a Service.  This is interesting to me and I’m going to have to dig deeper to find out exactly how this works.&lt;/p&gt;
&lt;h2 id=&#34;Testing&#34;&gt;&lt;a href=&#34;#Testing&#34; class=&#34;headerlink&#34; title=&#34;Testing&#34;&gt;&lt;/a&gt;Testing&lt;/h2&gt;&lt;p&gt;The first time you write unit tests, you’ll get a warning that says, “Could not find Angular Material core theme…”.  To remove this error, you’ll need to open karma.conf.js and add a “files:” section right under the “plugins:” section.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;files&lt;/span&gt;: [&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;pattern&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./node_modules/@angular/material/prebuilt-themes/indigo-pink.css&amp;#x27;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;included&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;watched&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;],&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can add whatever pre-built theme you’d like.  I’ve added indigo-pink here.&lt;/p&gt;
&lt;h2 id=&#34;Common-declare-x2F-import-x2F-export&#34;&gt;&lt;a href=&#34;#Common-declare-x2F-import-x2F-export&#34; class=&#34;headerlink&#34; title=&#34;Common declare&amp;#x2F;import&amp;#x2F;export&#34;&gt;&lt;/a&gt;Common declare&amp;#x2F;import&amp;#x2F;export&lt;/h2&gt;&lt;p&gt;Strictly speaking, this isn’t Angular Material specific.  But it was because of Angular Material that I discovered this trick.  Again, because it isn’t Angular Material specific, you can use this in any of your Angular code that it makes sense. &lt;/p&gt;
&lt;p&gt;Angular Material requires you to import each of the component modules individually.  This allows tree shaking to be more effective.  Rather than put this code in &lt;code&gt;app.module.ts&lt;/code&gt;, I created a &lt;code&gt;material-design.module.ts&lt;/code&gt; file and imported it into my &lt;code&gt;app.module.ts&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Now, if you are familiar with how imports work, you’ll already know that the components that are part of a module you import are only available to the parent module’s components or below.  But we want the component to be available to any module that imports &lt;code&gt;material-design.module.ts&lt;/code&gt;.  To do that, we need to export the same list of modules we imported. &lt;/p&gt;
&lt;p&gt;That sounded like too much repeating myself.  In an effort to make my code DRYer, I created a read only array with all my Material modules in it and then used the spread operator to include those in my imports and exports statement.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;materialDesignComponents&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ReadonlyArray&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Type&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&amp;gt;&amp;gt; = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;MatSidenavModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;MatToolbarModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;MatListModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CommonModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...materialDesignComponents&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;exports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...materialDesignComponents&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;declarations&lt;/span&gt;: []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MaterialDesignModule&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This saved me a lot of time, not just in typing, but in tracking down bugs because I simply forgot to include the modules in both places.&lt;/p&gt;
&lt;h2 id=&#34;Sample-Project&#34;&gt;&lt;a href=&#34;#Sample-Project&#34; class=&#34;headerlink&#34; title=&#34;Sample Project&#34;&gt;&lt;/a&gt;Sample Project&lt;/h2&gt;&lt;p&gt;If you are interested, you can find &lt;a href=&#34;//github.com/DaveMBush/angular-material-demo&#34;&gt;my sample project on GitHub&lt;/a&gt;.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/implementing-ngrx-4/</guid>
            <title>Implementing NgRX 4+</title>
            <link>http://davembush.github.com/implementing-ngrx-4/</link>
            <category>angular</category>
            <category>NgRX</category>
            <pubDate>Tue, 24 Oct 2017 06:30:46 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;There seems to be a lot of confusion about Implement NgRX 4 and above in an Angular application.  Some of it I’ve contributed to because NgRX 2 isn’t quite the same as NgRX 4 and as I’ve transitioned, I’ve learned better ways.  In other words, I was wrong and I’m correcting my mistake!  Below is the correct, NgRX approved way, of implementing NgRX 4. &lt;/p&gt;
&lt;p&gt;If you are looking for information about how to convert to NgRX 4 from NgRX 2, you can visit my previous article, &lt;a href=&#34;/how-to-upgrade-ngrx-to-4-x/&#34;&gt;How to Upgrade to NgRX 4&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Before we get started, make sure you have TypeScript 2.4.x or above installed in your local project.  The CLI may complain, depending on what version of it you are using.  But, NgRX 4 requires us to use TypeScript 2.4.x. You should also have RxJS 5.4.x or above installed. &lt;/p&gt;
&lt;p&gt;You will also need to install @ngrx.  You can do this using the following NPM command: &lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install --save @ngrx/store @ngrx/effects&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And finally, I’ve found that I need to use the –aot switch both when I’m using production and development builds, so you’ll want to add that to your scripts in your &lt;code&gt;package.json&lt;/code&gt; file. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/10/2017-10-24.jpg&#34; title=&#34;Implementing NgRX 4&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/cfaobam/12119410373/&#34;&gt;cfaobam&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/300eff&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h3 id=&#34;Actions&#34;&gt;&lt;a href=&#34;#Actions&#34; class=&#34;headerlink&#34; title=&#34;Actions&#34;&gt;&lt;/a&gt;Actions&lt;/h3&gt;&lt;p&gt;An Action is an object that contains a type variable and optionally, a payload.  Depending on how you code your action, the payload may or may not have “payload” as the variable name.  In NgRX version 2, payload was an optional variable.  To improve type checking, payload was removed from the Action interface. &lt;/p&gt;
&lt;p&gt;The official documentation for NgRX version 4 encourages us to create a class for each action we want to dispatch. &lt;/p&gt;
&lt;p&gt;Assuming we have a Wait component we want to display when a counter is incremented and that should be removed when the counter returns to zero, you might want a Start wait action and an End wait action.  So, you would create a wait.action.ts file that has two classes in it.  A Start action and an End action. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.End&amp;#x27;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;While this violates the “one class per file” rule, it actually provides us the ability to group our Actions together in one file, as you will see soon. &lt;/p&gt;
&lt;p&gt;To use these actions in our code, we would import them as a bundle: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This particular way of importing a packages groups all of the exported items under the variable named Wait.  Which allows us to dispatch the action using the store we’ve injected into our code using:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Start is an exported class from &lt;code&gt;wait.actions&lt;/code&gt; that we’ve grouped under &lt;code&gt;Wait&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;What makes this method of creating actions useful is that when we need to pass additional data along with our action, we can do that simply by adding parameters to our constructor.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Add&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; payload: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We don’t even have to call the payload, “payload.”  How about calling it “value.” &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Add&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; value: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And if you need more than one payload item, you can pass in multiple parameters.&lt;/p&gt;
&lt;h3 id=&#34;Improved-Actions&#34;&gt;&lt;a href=&#34;#Improved-Actions&#34; class=&#34;headerlink&#34; title=&#34;Improved Actions&#34;&gt;&lt;/a&gt;Improved Actions&lt;/h3&gt;&lt;p&gt;We can improve our actions even further by using &lt;code&gt;enums&lt;/code&gt; instead of &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.End&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Add&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then we can use the types in our Action classes like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Add&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ADD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; value: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What this does for us that &lt;code&gt;const&lt;/code&gt; doesn’t is that it when we use our case statements in the reducer, it will save us having to cast everything because TypeScript will know what type it should be because of the &lt;code&gt;enum&lt;/code&gt; that was assigned to the type field.&lt;/p&gt;
&lt;h3 id=&#34;Reducers&#34;&gt;&lt;a href=&#34;#Reducers&#34; class=&#34;headerlink&#34; title=&#34;Reducers&#34;&gt;&lt;/a&gt;Reducers&lt;/h3&gt;&lt;p&gt;Reducers are functions that allow us to change the state of our entity within our application Store.  Reducers respond to the actions that have been dispatched and return a new object based on the changes requested. &lt;/p&gt;
&lt;p&gt;To continue on with our Wait example, &lt;code&gt;wait.reducer.ts&lt;/code&gt; might look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;ActionReducer&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// This could (and probably should) go in wait.actions.ts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; | &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;End&lt;/span&gt; | &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Start&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;WaitReducer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;  state = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, action: Action&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(action.&lt;span class=&#34;property&#34;&gt;type&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ADD&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// TypeScript knows that our action have a value field here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state + action.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that we have a &lt;code&gt;default&lt;/code&gt; in our switch statement.  Don’t forget to add this.  It isn’t an accident.  You see, when we register our Reducers and Effects with the store and then subsequently dispatch actions to them, all the reducers and effects get called.  In the case of reducers, if you don’t return something for each one of them, you’ll end up with a store that doesn’t know what kind of state it is in.  So, always return the current state as your default. &lt;/p&gt;
&lt;p&gt;The one thing that may not be obvious here is that the Reducer is a function.  Not a class.  This means you can’t inject other classes into it.  This is one of the reasons that the file is named &lt;code&gt;wait.reducer.ts&lt;/code&gt; and not &lt;code&gt;wait.reducer**s**.ts&lt;/code&gt;. But, Effects are different.&lt;/p&gt;
&lt;h3 id=&#34;Effects&#34;&gt;&lt;a href=&#34;#Effects&#34; class=&#34;headerlink&#34; title=&#34;Effects&#34;&gt;&lt;/a&gt;Effects&lt;/h3&gt;&lt;p&gt;Effects are classes.  Each Effect within the Effects class is a member variable.  This means, we name our Effects file for Wait, &lt;code&gt;wait.effects.ts&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Now, remember I said that Effects were for things that caused side effects?  You may wonder, why kind of side effect does our Wait stuff need? &lt;/p&gt;
&lt;p&gt;Under normal circumstances, not any.  However, you can get into a situation in development mode where one of the safe guards Angular provides for you detects that you’ve changed the state of wait multiple times in a change detection loop.  Angular expects changes to be static. &lt;/p&gt;
&lt;p&gt;One way we can deal with this is to delay incrementing and decrementing to another change detection loop using setTimeout() indirectly. &lt;/p&gt;
&lt;p&gt;To do this, we are going to rip out the START and END case statements from our Reducer and add them into our Effects class. And then in &lt;code&gt;wait.effects.ts&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/Rx&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;Injectable&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;Actions&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Effect&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;``&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/effects&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Injectable&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;WaitEffects&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;start$&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt;&amp;gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;actions$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ).&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;((): &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;end$&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt;&amp;gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;actions$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;action: Wait.End&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ).&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;((): &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          (&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt;(-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; actions$: Actions&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can name the member variables whatever you want.  They never get used.  &lt;code&gt;ofType()&lt;/code&gt; is a filter that makes the observable stuff only fire for that particular type. &lt;/p&gt;
&lt;p&gt;The magic happens in the &lt;code&gt;Observable.timer(1).take(1)&lt;/code&gt;.  Here we wait for one millisecond, take the first item out of the stream and immediately close the observable.  Once that completes, the &lt;code&gt;map()&lt;/code&gt; returns a new action. &lt;/p&gt;
&lt;p&gt;Every Effect must return an action or you must tell the Effect that it won’t return an action.  Notice that we don’t dispatch the action.  That is done by NgRX for us.  We just return the action. &lt;/p&gt;
&lt;p&gt;To tell an Effect that no action will be returned, pass &lt;code&gt;&amp;#123;dispatch: false&amp;#125;&lt;/code&gt; into &lt;code&gt;@Effect()&lt;/code&gt;. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;dispatch&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&amp;#125;) …&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Returning-Multiple-Actions-from-Effects&#34;&gt;&lt;a href=&#34;#Returning-Multiple-Actions-from-Effects&#34; class=&#34;headerlink&#34; title=&#34;Returning Multiple Actions from Effects&#34;&gt;&lt;/a&gt;Returning Multiple Actions from Effects&lt;/h3&gt;&lt;p&gt;At the other end of possibilities, you may need to return multiple Actions from an Effect.  One way to do this is by using mergeMap().&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;.&lt;span class=&#34;title function_&#34;&gt;mergeMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* previous value here */&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ActionGroup&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Action1&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ActionGroup&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Action2&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Registration&#34;&gt;&lt;a href=&#34;#Registration&#34; class=&#34;headerlink&#34; title=&#34;Registration&#34;&gt;&lt;/a&gt;Registration&lt;/h3&gt;&lt;p&gt;Now, none of this is going to work if we don’t register our Reducers and Effects with the NgRX Store. &lt;/p&gt;
&lt;p&gt;If you look at a lot of the literature on how to write NgRX code, you’ll often see that they recommend that you put the code in AppModule.  That will work, but how much more effective to put the code for your Store in its own module.  I create a Module class called AppStores and put it in a file named &lt;code&gt;app.stores.ts&lt;/code&gt;.  I know, technically it is a module and it should be &lt;code&gt;app-stores.module.ts&lt;/code&gt;.  Using &lt;code&gt;app.stores.ts&lt;/code&gt; isolates it from a normal module.  All I want to put in here is Store stuff. &lt;/p&gt;
&lt;p&gt;Then, in my &lt;code&gt;app.stores.ts&lt;/code&gt; file, I put code that looks like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;WaitEffects&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.effects&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;AppState&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./app.state&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;WaitReducer&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.reducer&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;NgModule&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;StoreModule&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;ActionReducerMap&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;EffectsModule&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/effects&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;reducers&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionReducerMap&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;AppState&lt;/span&gt;&amp;gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;wait&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;WaitReducer&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;StoreModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;(reducers),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;EffectsModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;([&lt;span class=&#34;title class_&#34;&gt;WaitEffects&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppStore&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And the AppState interface that I used for my reducer map looks like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppState&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;wait&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;A couple of things you should notice about this code.  First, the reducers object we create at the top of the file describes what our store looks like.  So far, we have an entity named “wait” that is controlled by our WaitReducer. &lt;/p&gt;
&lt;p&gt;Then to register the reducers with our application, we pass them on to &lt;code&gt;StoreModule.forRoot()&lt;/code&gt; in the imports section of our module definition. &lt;/p&gt;
&lt;p&gt;Similarly, we must register our Effects with the application.  We do this by passing an array of Effects to &lt;code&gt;EffectsModule.forRoot()&lt;/code&gt; in the imports section of our module definition. &lt;/p&gt;
&lt;p&gt;Of course, none of this code will even get included in your project unless you import this module into your AppModule class. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;declarations&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;BrowserModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    **&lt;span class=&#34;title class_&#34;&gt;AppStore&lt;/span&gt;**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;bootstrap&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppModule&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Retrieving-Data&#34;&gt;&lt;a href=&#34;#Retrieving-Data&#34; class=&#34;headerlink&#34; title=&#34;Retrieving Data&#34;&gt;&lt;/a&gt;Retrieving Data&lt;/h2&gt;&lt;p&gt;Retrieving an entity from a store is quite simple.  Leaving out the imports that a good editor should help you with, here is the relevant code: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;wait&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;store: Store&amp;lt;AppState&amp;gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;wait&lt;/span&gt; = store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;s: AppState&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;      =&amp;gt;&lt;/span&gt; s.&lt;span class=&#34;property&#34;&gt;wait&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And now you can subscribe to wait and whenever the value changes, you’ll get a notification and can do something with it.&lt;/p&gt;
&lt;h2 id=&#34;Lazy-Loading-NgRX&#34;&gt;&lt;a href=&#34;#Lazy-Loading-NgRX&#34; class=&#34;headerlink&#34; title=&#34;Lazy-Loading NgRX&#34;&gt;&lt;/a&gt;Lazy-Loading NgRX&lt;/h2&gt;&lt;p&gt;Prior to NgRX version 4, all our state stuff had to live in the root of the application.  This was problematic because it also meant we were unable to easily locate our Actions, Reducers and Effects with the Routes they belonged to.  So, we had feature level components but everything else was more function based.  That is, all our State stuff lived together in one directory separate from the feature they supported.  Ugly! &lt;/p&gt;
&lt;p&gt;But now, we can create Reducers and Effects that live with the feature we support.&lt;/p&gt;
&lt;h3 id=&#34;Always-Import-forRoot&#34;&gt;&lt;a href=&#34;#Always-Import-forRoot&#34; class=&#34;headerlink&#34; title=&#34;Always Import forRoot()&#34;&gt;&lt;/a&gt;Always Import forRoot()&lt;/h3&gt;&lt;p&gt;The first thing you’ll need to be aware of is that even if you aren’t storing any state at the application level, you will need to call &lt;code&gt;StoreModule.forRoot()&lt;/code&gt; and &lt;code&gt;EffectsModule.forRoot()&lt;/code&gt; with an empty object and array. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;StoreModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;(&amp;#123;&amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;EffectsModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;AppState-vs-FeatureState&#34;&gt;&lt;a href=&#34;#AppState-vs-FeatureState&#34; class=&#34;headerlink&#34; title=&#34;AppState vs FeatureState&#34;&gt;&lt;/a&gt;AppState vs FeatureState&lt;/h3&gt;&lt;p&gt;You’ll remember that you’ll typically use an interface called AppState to define the structure of the Store for your application.  You are going to want to create a separate interface for each set of feature reducers you are loading.&lt;/p&gt;
&lt;h3 id=&#34;Feature-Name-as-AppState-Property&#34;&gt;&lt;a href=&#34;#Feature-Name-as-AppState-Property&#34; class=&#34;headerlink&#34; title=&#34;Feature Name as AppState Property&#34;&gt;&lt;/a&gt;Feature Name as AppState Property&lt;/h3&gt;&lt;p&gt;When you add a feature reducer, you’ll need to supply a name as the first parameter. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;StoreModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forFeature&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;featureName&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    featureReducers),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Where &lt;code&gt;featureReducers&lt;/code&gt; is the map of reducers for the feature.  Like what we did for the root level reducers. &lt;/p&gt;
&lt;p&gt;This “featureName” becomes the name of the store entity you’ll need to select to get at the store entities in your feature reducers. &lt;/p&gt;
&lt;p&gt;Imagine you have a feature named “featureName” as we’ve coded above and your &lt;code&gt;featureReducer&lt;/code&gt; object has a feature property named “sub”.  Not super original, but it will do for an example. To select “sub” from your store, you would use code that would look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;s&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  s.&lt;span class=&#34;property&#34;&gt;featureName&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;sub&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This means that if you want to strongly type your selections using AppState, you will need to define a field in your AppState interface as “featureName” that is typed as the State interface for that feature.  Let’s call that FeatureState. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FeatureState&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;sub&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;SubModel&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then our AppState would look like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppState&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;featureName&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;FeatureState&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now we can write our select code like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: AppState&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;featureName&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;sub&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you have Effects that go with your reducers, you’ll also need to import them with &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;EffectsModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forFeature&lt;/span&gt;([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    …list &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt; effects here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Features-Without-AppState&#34;&gt;&lt;a href=&#34;#Features-Without-AppState&#34; class=&#34;headerlink&#34; title=&#34;Features Without AppState&#34;&gt;&lt;/a&gt;Features Without AppState&lt;/h3&gt;&lt;p&gt;It is possible to access the feature state without putting it in your AppState.  This alternate method may be the only way you can access the code, but you might want to implement this method generally so that your features don’t necessarily have to know about the application. &lt;/p&gt;
&lt;p&gt;To implement this access method, you use the &lt;code&gt;createFeatureSelector()&lt;/code&gt;and &lt;code&gt;createSelector()&lt;/code&gt; methods which you can import from &lt;code&gt;@ngrx/store&lt;/code&gt;. The above code using these methods would look something like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; featureSelector = createFeatureSelector&amp;lt;&lt;span class=&#34;title class_&#34;&gt;FeatureState&lt;/span&gt;&amp;gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;featureName&amp;#x27;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; subSelector = &lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(featureSelector, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: FeatureState&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;sub&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(subSelector);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Where store is injected using &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;store: Store&amp;lt;FeatureState&amp;gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Note: I’m not suggesting that you write your code like this.  If you are repeating the &lt;code&gt;createFeatureSelector()&lt;/code&gt; &lt;code&gt;createSelector()&lt;/code&gt; code in multiple places, you should look for a way of not repeating yourself.  I’ve put it all in one place here, so you can see how the methods tie together in the bigger picture.  In my production code, I tend to write this as a separate function in a separate file that can be called from anywhere.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/using-ngrx-to-cleanly-aggregate-data/</guid>
            <title>Using NgRX to Cleanly Aggregate Data</title>
            <link>http://davembush.github.com/using-ngrx-to-cleanly-aggregate-data/</link>
            <category>angular</category>
            <category>design patterns</category>
            <category>NgRX</category>
            <pubDate>Tue, 03 Oct 2017 06:30:50 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;For the last 18 months, I’ve been working for an organization that has what some might consider a unique requirement.  Because of where our application’s data is sourced, we need to aggregate data on the client side rather than on the server.  What this means is that for any one screen, we may make multiple calls to the server to grab all the data we need.  Fortunately, because we adopted NgRX early in our adoption of Angular, we could avoid a lot of the headaches associated with client-side aggregation. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/09/2017-10-03.png&#34; title=&#34;Using NgRX to Cleanly Aggregate Data&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/gsfc/14486243743/&#34;&gt;NASA Goddard Photo and Video&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/296da9&#34;&gt;Visualhunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;The-Problem&#34;&gt;&lt;a href=&#34;#The-Problem&#34; class=&#34;headerlink&#34; title=&#34;The Problem&#34;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;&lt;p&gt;There are multiple ways this problem might manifest itself in an application.  But one of the most common is a basic search screen that displays a list of results.  Everything is simple when your data comes back with all the data you need.  But in our case, the data that is returned might contain all but one or two fields that we need.  Those fields exist in other end points.  To keep the basic problem small, let’s just assume that you search for a list of records.  That search returns 10 items.  For each of those records, you now need to make two more calls to retrieve the content of the two missing fields.  This means that to get a complete result set back, you need to make a total of 21 calls.  The problem becomes even worse if you have a total of 100 records, or you now have 3 fields that you need to retrieve for each row.&lt;/p&gt;
&lt;h2 id=&#34;The-Old-Way&#34;&gt;&lt;a href=&#34;#The-Old-Way&#34; class=&#34;headerlink&#34; title=&#34;The Old Way&#34;&gt;&lt;/a&gt;The Old Way&lt;/h2&gt;&lt;p&gt;Prior to using NgRX, the main way we might solve this problem would be to introduce callback hell, or promise hell if you are that lucky.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make a call for the original list&lt;/li&gt;
&lt;li&gt;When the list gets returned&lt;ul&gt;
&lt;li&gt;Iterate through the records and&lt;ul&gt;
&lt;li&gt;Make a call for Child Record One&lt;ul&gt;
&lt;li&gt;When callback returns, add the new value to the parent record&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make a call for Child Record Two&lt;ul&gt;
&lt;li&gt;When the callback returns, add the new value to the parent record&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Once all the calls have returned, return the list so it can be displayed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, this not only becomes difficult to manage, but it also introduces a system that is going to be perceived as slow. &lt;/p&gt;
&lt;p&gt;But, now, we can do better.&lt;/p&gt;
&lt;h2 id=&#34;Using-NgRX&#34;&gt;&lt;a href=&#34;#Using-NgRX&#34; class=&#34;headerlink&#34; title=&#34;Using NgRX&#34;&gt;&lt;/a&gt;Using NgRX&lt;/h2&gt;&lt;p&gt;By using NgRX, we use a series of Effects to retrieve our data, typically via a Service.  When the effect is done, it returns the results to a reducer which puts them in our store entity for us. &lt;/p&gt;
&lt;p&gt;The basic work flow looks like something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dispatch an action to get the main results&lt;/li&gt;
&lt;li&gt;Effect hears the action and makes a call for the top-level list&lt;/li&gt;
&lt;li&gt;When the list returns,&lt;ul&gt;
&lt;li&gt;Iterate through the records and&lt;ul&gt;
&lt;li&gt;we dispatch an action to get Child Record One&lt;/li&gt;
&lt;li&gt;we dispatch an action to get Child Record Two&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Return an Action that will use a reducer to fill our list&lt;/li&gt;
&lt;li&gt;Child Record One Effect hears the actions for each of the rows&lt;/li&gt;
&lt;li&gt;When each of the values are retrieved the Effect returns an Action that uses a Reducer to put the value in the store&lt;/li&gt;
&lt;li&gt;Child Record Two Effect hears the actions for each of the rows&lt;/li&gt;
&lt;li&gt;When each of the values are retrieved, the Effect returns an Action that uses a Reducer to put the value in the store&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You’ll notice, we no longer have the nesting mess that we had using the old way and we can list our results as soon as the first set of data is returned.&lt;/p&gt;
&lt;h2 id=&#34;Meanwhile-back-on-our-View&#34;&gt;&lt;a href=&#34;#Meanwhile-back-on-our-View&#34; class=&#34;headerlink&#34; title=&#34;Meanwhile, back on our View&#34;&gt;&lt;/a&gt;Meanwhile, back on our View&lt;/h2&gt;&lt;p&gt;Now, there are two ways you can deal with displaying this information in your view and it all depends on what you are doing. &lt;/p&gt;
&lt;p&gt;The easy way is to just let the View display the information as it comes back.  Most of the time this will work.  If you need to filter your data in the display once it comes back, you will need to decide if data that doesn’t have the child fields yet should, or should not be displayed. &lt;/p&gt;
&lt;p&gt;Another quirk I had to deal with was that we were displaying child rows with child rows.  Letting the data display as we got it back gave the screen a kind of exploding effect.  For this, I added a debounceTime(500) to the store observer so that the screen only updated once all the data had been retrieved.  Using the pattern above was still easier to reason about than the old way, we just didn’t get the added benefit of being able to see the data as it was being retrieved.&lt;/p&gt;
&lt;h2 id=&#34;Watch-Out&#34;&gt;&lt;a href=&#34;#Watch-Out&#34; class=&#34;headerlink&#34; title=&#34;Watch Out!&#34;&gt;&lt;/a&gt;Watch Out!&lt;/h2&gt;&lt;p&gt;One of the wrong ways you might be tempted to use this pattern would be to chain all the child stuff in one effect and dispatch actions to your reducers from within the one Effect.  This would be a mistake.  Sure, it would work.  But now because your effect is doing more than one thing, your code becomes MUCH harder to reason about.  While each of your Effects may ultimately call the same reducer function, or not, you definitely want to have a separate set of Actions and Effects that retrieve the data from the server.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/upgrade-to-angular-from/</guid>
            <title>Upgrade to Angular from...</title>
            <link>http://davembush.github.com/upgrade-to-angular-from/</link>
            <category>angular</category>
            <category>react.js</category>
            <category>portal</category>
            <category>web 1.0</category>
            <category>web 2.0</category>
            <pubDate>Tue, 26 Sep 2017 06:30:23 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;As I’ve been interviewing for a new contract, the question, “How do we Upgrade to Angular from …?” has come up several times.  And as I’ve thought about the question, several patterns have emerged. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/09/2017-09-26.jpg&#34; title=&#34;Upgrade Angular from ...&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/archer10/12414442945/&#34;&gt;archer10 (Dennis) 102M Views&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/426124&#34;&gt;Visualhunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by-sa/2.0/&#34;&gt; CC BY-SA&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;From-a-Portal&#34;&gt;&lt;a href=&#34;#From-a-Portal&#34; class=&#34;headerlink&#34; title=&#34;From a Portal&#34;&gt;&lt;/a&gt;From a Portal&lt;/h2&gt;&lt;p&gt;The first time I was asked this question, the team I was talking with had an existing Web 1.0 site setup using WebSphere Portal.  Not something that you can easily plug any Single Page Application (SPA) into. But all is not lost. &lt;/p&gt;
&lt;p&gt;One of the easiest ways to solve the problem is to create a reverse proxy.  One popular tool for this is mod_proxy for the Apache server.  If you are using IIS, you could use URL Rewrite rules to setup a reverse proxy. &lt;/p&gt;
&lt;p&gt;In either case, you will need to setup rules that ensure that anyone trying to access a URL that is still on the old portal site would still be able to access that directly.  Once that is in place, you would create one page, or maybe a set of related pages, at a time and stand them up on another server.  Then you would change your rules so that anyone trying to access the old URLs that are no longer being served by the old site get redirected to the new SPA application. &lt;/p&gt;
&lt;p&gt;Now, this sounds pretty simple.  But, I imagine keeping everything in sync as you go might be more of a pain that you might imagine.  If you have pages that link to each other, you’ll need to convert links to routes as you go.  Say you convert page one.  It still has links to the old site.  Not a big problem.  But as the pages it is linking to now become part of the SPA, you’ll want to convert those links to route directives.  One way you might mitigate this issue is to convert pages with the fewest links out first.  It might help to create a graph, or at least a spreadsheet, to help you manage the interdependent relationships. &lt;/p&gt;
&lt;p&gt;An added advantage of this setup is that any pages in the portal that have relatively static content, and any resources, can be cached, or even moved, to the proxy server where they will probably be served up faster than the original portal.&lt;/p&gt;
&lt;h2 id=&#34;From-a-Web-1-0-Site&#34;&gt;&lt;a href=&#34;#From-a-Web-1-0-Site&#34; class=&#34;headerlink&#34; title=&#34;From a Web 1.0 Site&#34;&gt;&lt;/a&gt;From a Web 1.0 Site&lt;/h2&gt;&lt;p&gt;Switching from an existing Web 1.0 site might be a bit easier.  Although, using the proxy method there still might be the best choice.  Many of the same issues exist.  But in the case of an existing Web 1.0 site that doesn’t depend on a portal, you’ll probably have greater control over the server.  Again, you are probably running the site on Apache, nginx, or IIS.  In all of those cases, you can setup a rule that says, “if you can’t find the URL, load up this page over here instead.”  Where “this page over here” is your Angular site you are converting to.  You’ll need to implement something like this anyhow for your Angular SPA to work correctly, so this is probably the least amount of extra work to get you where you need to be. &lt;/p&gt;
&lt;p&gt;Then, you convert a page or a set of related pages at a time like I described in the Portal implementation.&lt;/p&gt;
&lt;h2 id=&#34;From-Another-Framework&#34;&gt;&lt;a href=&#34;#From-Another-Framework&#34; class=&#34;headerlink&#34; title=&#34;From Another Framework&#34;&gt;&lt;/a&gt;From Another Framework&lt;/h2&gt;&lt;p&gt;Let’s say that you are moving from React, or some other framework to Angular.  I know of a company that is doing just this.  The wrinkle is, they have no plans on converting their existing pages to Angular.  This makes the transition relatively simple.  You setup rules on your server, similar to how you would setup a conversion from a Web 1.0 site.  “URLs that look like this, go to the old index.html page and URLs that look like that go to the new index.html page.” &lt;/p&gt;
&lt;p&gt;Once again, you’ll need to keep track of routes as you change from one to the other.  But it is manageable.&lt;/p&gt;
&lt;h2 id=&#34;Converting-AngularJS-to-Angular&#34;&gt;&lt;a href=&#34;#Converting-AngularJS-to-Angular&#34; class=&#34;headerlink&#34; title=&#34;Converting AngularJS to Angular&#34;&gt;&lt;/a&gt;Converting AngularJS to Angular&lt;/h2&gt;&lt;p&gt;Yes, I know ngUpgrade exist.  But, if you don’t need to use it, why would you.  ngUpgrade exist so you can embed Angular in AngularJS or AngularJS in Angular.  But, it might make more sense to create a new SPA for Angular and have the two sites reference each other similar to how you would do this for a Web 1.0 site or if you were converting from an entirely different framework. &lt;/p&gt;
&lt;p&gt;The reason I recommend using the two-site method first is because Angular really is a different framework.  There are similarities between AngularJS and Angular.  But that is all they are.  What if you just pretended they weren’t at all related.  That the ngUpdate bridge didn’t exist.  Wouldn’t that make life just a bit easier in the long run?  I think it would.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/this-one-tweak-improved-my-angular-code/</guid>
            <title>This One Tweak Improved my Angular Code</title>
            <link>http://davembush.github.com/this-one-tweak-improved-my-angular-code/</link>
            <category>angular</category>
            <category>typescript</category>
            <pubDate>Tue, 12 Sep 2017 06:30:10 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I made a tweak to my Angular code process over the last month or so that has resulted in greater productivity in my development environment and fewer bugs. &lt;/p&gt;
&lt;p&gt;Now, I didn’t make this change because I thought it would improve my productivity.  At least that wasn’t the primary reason.  I made the change because I thought it would reduce the chance of introducing bugs into my code.  And while it does reduce the number of bugs in my code, the result has been generally improved productivity. &lt;/p&gt;
&lt;p&gt;What is this great secret? &lt;figure&gt;&lt;img src=&#34;/uploads/2017/09/2017-09-12.jpg&#34; title=&#34;This One Tweak Improved my Angular Code&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/sheila_sund/36859429262/&#34;&gt;docoverachiever&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/d75fb5&#34;&gt;Visual Hunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;History&#34;&gt;&lt;a href=&#34;#History&#34; class=&#34;headerlink&#34; title=&#34;History&#34;&gt;&lt;/a&gt;History&lt;/h2&gt;&lt;p&gt;Before I tell you the secret, I want to tell you how I got here.  Yesterday, I was listening to a podcast that was reviewing another framework with the creators of that framework.  All during the podcast they were comparing their framework to Angular and React.  Fine, compare and contrast is good.  Except, they were comparing and contrasting something they knew really well, their framework, to something they had a lesser understanding of.  So, in the process, one of their complaints about Angular was that Angular doesn’t take full advantage of TypeScript.  Or, it doesn’t take as full advantage of TypeScript as their framework does. &lt;/p&gt;
&lt;p&gt;As I listened to this I realized that most Angular developers probably aren’t taking as full advantage of TypeScript as they could.  I think this is by design.  But, it is too our hurt.  Fortunately, we can turn things on that Angular leaves turned off.&lt;/p&gt;
&lt;h2 id=&#34;Type-Safety&#34;&gt;&lt;a href=&#34;#Type-Safety&#34; class=&#34;headerlink&#34; title=&#34;Type Safety&#34;&gt;&lt;/a&gt;Type Safety&lt;/h2&gt;&lt;p&gt;Now, if you are like most developers I know, you just want to get your code working.  And so, you don’t pay attention to things like Linters.  And you have learned enough TypeScript to get your code working.  This is especially true of those who are coming from “old school” JavaScript. &lt;/p&gt;
&lt;p&gt;Now, I’m going to challenge you to do two things.  First, use TSLint.  Next, make the rules as rigid as possible.&lt;/p&gt;
&lt;h3 id=&#34;TSLint&#34;&gt;&lt;a href=&#34;#TSLint&#34; class=&#34;headerlink&#34; title=&#34;TSLint&#34;&gt;&lt;/a&gt;TSLint&lt;/h3&gt;&lt;p&gt;If you are using the Angular CLI, TSLint is built in.  To run TSLint, all you need to do is to run &lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm run lint&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;On the command line. &lt;/p&gt;
&lt;p&gt;This will verify that you haven’t made any really stupid syntax mistakes by default. &lt;/p&gt;
&lt;p&gt;Next, the editor you are using should have a way of hooking TSLint up to the editor so that you can tell you have a problem in your code as you write your code.  If your editor doesn’t have a way of doing this, find a new editor.  The two editors I recommend are VS Code and WebStorm.  Each have their own strengths and weaknesses.&lt;/p&gt;
&lt;h3 id=&#34;Rules&#34;&gt;&lt;a href=&#34;#Rules&#34; class=&#34;headerlink&#34; title=&#34;Rules&#34;&gt;&lt;/a&gt;Rules&lt;/h3&gt;&lt;p&gt;The rules that come with the Angular CLI are, in my opinion, too relaxed.  They are strong enough to not annoy JavaScript programmers.  They protect you from making really stupid TypeScript programming errors.  But, they don’t help you write code that you have a high assurance will work correctly the first time without running it. &lt;/p&gt;
&lt;p&gt;We are going to fix this. &lt;/p&gt;
&lt;p&gt;The main thing we want to do is that we want to tighten up type checking.  So, instead of using the defaults that either let variables be anything or default them to the type they are assigned to when they are declared if that can be determined, we are going to force variables to be declared.&lt;/p&gt;
&lt;h2 id=&#34;Why-This-Helps&#34;&gt;&lt;a href=&#34;#Why-This-Helps&#34; class=&#34;headerlink&#34; title=&#34;Why This Helps&#34;&gt;&lt;/a&gt;Why This Helps&lt;/h2&gt;&lt;p&gt;When I first made this kind of change, I was doing it to &lt;a href=&#34;/typescript-functional-programming/&#34;&gt;improve my NgRX code&lt;/a&gt;.  Once I did that, I immediately saw that by enforcing type safety, I could easily tell if the functions I was using in my Observable chains was going to end up returning what I thought it was going to.  This means, I can write my code and if I don’t get any tslint warnings in my editor, I can have a high degree of certainty that the code will run correctly once I compile it and run it. &lt;/p&gt;
&lt;p&gt;Maybe you think type safety is for sissies.  OK then, you can continue to run your code multiple times to find the same error that I can find before I ever run the code.  I think we all know who will be more productive. &lt;/p&gt;
&lt;p&gt;Once I saw this productivity gain, I determined to add type safety to my entire project.  This took much less time than you would expect and I was able to apply the rules incrementally so that I was not disrupting the progress of the project I was working on.&lt;/p&gt;
&lt;h2 id=&#34;Implementation&#34;&gt;&lt;a href=&#34;#Implementation&#34; class=&#34;headerlink&#34; title=&#34;Implementation&#34;&gt;&lt;/a&gt;Implementation&lt;/h2&gt;&lt;p&gt;The implementation is actually pretty simple.  The first thing you are going to want to do is that you’ll want to change the npm lint script from: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;lint&amp;quot;: &amp;quot;ng lint&amp;quot;&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;to &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;lint&amp;quot;: &amp;quot;ng lint --type-check --fix&amp;quot;&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;This does two things.  First it allows us to change to tslint rules to use rules that require type checking.  And second it will cause the tslint to fix any problems it finds that it can fix automatically. &lt;/p&gt;
&lt;p&gt;Next, you’ll want to install tslint-immutable, which will allow us to add in rules for immutability that I mentioned in my previous post that I linked to above.  As of this writing, I’m using version 4.1.0 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save-dev tslint-immutable&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Next, open up tslint.json which should be at the root of your application. &lt;/p&gt;
&lt;p&gt;Inside this file, right before the rulesDirectory section, add this code: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;extends&amp;quot;: [&amp;quot;tslint-immutable&amp;quot;],&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;This will allow us to access the immutable rules we just added with &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;typedef&#34;&gt;&lt;a href=&#34;#typedef&#34; class=&#34;headerlink&#34; title=&#34;typedef&#34;&gt;&lt;/a&gt;typedef&lt;/h3&gt;&lt;p&gt;The first thing we want to do is that we want to force everything to have a type definition. &lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;typedef&amp;quot;&lt;/span&gt;: [ &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;call-signature&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;arrow-call-signature&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;parameter&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;arrow-parameter&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;property-declaration&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;variable-declaration&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;member-variable-declaration&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;object-destructuring&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;array-destructuring&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;],&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The one place where you might have a problem is that by default, the no-inferable-types rule is turned on, which is what we want.  Currently, tslint is not smart enough to know that no-inferable-types should take precedence over typedef.  So, you’ll need to occasionally exclude the rule using the &lt;a href=&#34;//palantir.github.io/tslint/usage/rule-flags/&#34;&gt;tslint comment exclusion&lt;/a&gt;.  I exclude the typedef when I run into this problem. &lt;/p&gt;
&lt;p&gt;If you are interested, you can google each of the typedef declarations (rather than linking to them and have the links go stale).&lt;/p&gt;
&lt;h3 id=&#34;no-any&#34;&gt;&lt;a href=&#34;#no-any&#34; class=&#34;headerlink&#34; title=&#34;no-any&#34;&gt;&lt;/a&gt;no-any&lt;/h3&gt;&lt;p&gt;Now that we are forcing everything to have a type definition, the next thing you want to do is that you’ll want to disallow using “any” as a type definition.  Otherwise, why force the type definition at all?  I’d love to be able to disallow “object” as well, but there is currently no definition for that so until someone creates that rule, you’ll just have to use discipline.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;no-any&amp;quot;: true,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You may complain that sometimes you want to have the variable really be anything.  Anything?  Really?  I bet most of the time what you really want to be able to do is that you’ll want to define the variable as one of two, maybe three types.  You can achieve this definition as of TypeScript 2.4, by using the pipe operator.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var stringOrNumber: string | number;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;no-unused-variable&#34;&gt;&lt;a href=&#34;#no-unused-variable&#34; class=&#34;headerlink&#34; title=&#34;no-unused-variable&#34;&gt;&lt;/a&gt;no-unused-variable&lt;/h3&gt;&lt;p&gt;To keep your code clean, the next rule you want to enable is to disallow creating variables that you aren’t using.  This will have the side effect of cleaning up your import statements as well. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;no-unused-variable&amp;quot;: true,&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Those are all the rules I use that impact type safety.  Here are a few more you might want to consider adding.&lt;/p&gt;
&lt;h3 id=&#34;Cyclomatic-Complexity&#34;&gt;&lt;a href=&#34;#Cyclomatic-Complexity&#34; class=&#34;headerlink&#34; title=&#34;Cyclomatic Complexity&#34;&gt;&lt;/a&gt;Cyclomatic Complexity&lt;/h3&gt;&lt;p&gt;Cyclomatic Complexity is a measure of how complicated your functions and methods are.  While the default implementation for this is 20, I find that if I’ve written a function that is that complex, even I have trouble understanding it any more.  While keeping my complexity lower than 10 contributes to extremely readable code.  Yes, there are times when there really isn’t any good way of breaking the code into smaller chunks.  But that is rare and code comment exclusions will let you handle those exceptions. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;cyclomatic-complexity&amp;quot;: [true, 10],&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;Optional-Rules&#34;&gt;&lt;a href=&#34;#Optional-Rules&#34; class=&#34;headerlink&#34; title=&#34;Optional Rules&#34;&gt;&lt;/a&gt;Optional Rules&lt;/h2&gt;&lt;p&gt;Some other rules you might want to consider adding in that could improve your code include:&lt;/p&gt;
&lt;h3 id=&#34;array-type-generic&#34;&gt;&lt;a href=&#34;#array-type-generic&#34; class=&#34;headerlink&#34; title=&#34;array-type generic&#34;&gt;&lt;/a&gt;array-type generic&lt;/h3&gt;&lt;p&gt;Coming from a C# background, I prefer to define my arrays as Array&lt;T&gt; instead of T[].  By default nothing is defined.  If it is just you working on the code, it probably doesn’t matter than much.  But on a team, I find consistency useful. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;array-type&amp;quot;: [true, &amp;quot;generic&amp;quot;],&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;readonly-array&#34;&gt;&lt;a href=&#34;#readonly-array&#34; class=&#34;headerlink&#34; title=&#34;readonly-array&#34;&gt;&lt;/a&gt;readonly-array&lt;/h3&gt;&lt;p&gt;For my NgRX code, I like to have readonly-array turned on to ensure immutability.  I’ve found that I rarely need to turn this off in the rest of my code since NgRX is where I would be mutating anything that isn’t local to a function.  So, I just turn this rule on globally. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;readonly-array&amp;quot;: [true, &amp;quot;ignore-local&amp;quot;],&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;Final-Notes&#34;&gt;&lt;a href=&#34;#Final-Notes&#34; class=&#34;headerlink&#34; title=&#34;Final Notes&#34;&gt;&lt;/a&gt;Final Notes&lt;/h2&gt;&lt;p&gt;I mentioned above that if you are using TypeScript 2.4.n, you can use the pipe operator to combine types.  You also get stronger type checking if you use that version.  However, if you are using codelyzer, as of this writing, you’ll have trouble if you use TypeScript 2.4.n with a version of Codelyzer greater than 3.0.1.  I keep trying the newer versions to see if this issue has been corrected.  Anyhow, your mileage may vary moving your code to TypeScript 2.4.n.&lt;/p&gt;
&lt;h2 id=&#34;My-TSLint-file&#34;&gt;&lt;a href=&#34;#My-TSLint-file&#34; class=&#34;headerlink&#34; title=&#34;My TSLint file&#34;&gt;&lt;/a&gt;My TSLint file&lt;/h2&gt;&lt;p&gt;For those who are curious, my full tslint.json file is below. &lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;extends&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;quot;tslint-immutable&amp;quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;rulesDirectory&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;node_modules/codelyzer&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;rules&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;typedef&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;call-signature&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;arrow-call-signature&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;parameter&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;arrow-parameter&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;property-declaration&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;variable-declaration&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;member-variable-declaration&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;object-destructuring&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;array-destructuring&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;array-type&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;generic&amp;quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;readonly-keyword&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;readonly-array&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;ignore-local&amp;quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-let&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-any&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;cyclomatic-complexity&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-unused-variable&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;arrow-return-shorthand&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;callable-types&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;class-name&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;comment-format&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-space&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;curly&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;eofline&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;forin&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;import-blacklist&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rxjs&amp;quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;import-spacing&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;indent&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;spaces&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;interface-over-type-literal&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;label-position&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;max-line-length&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;140&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;member-access&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;member-ordering&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;static-before-instance&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;variables-before-functions&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-arg&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-bitwise&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-console&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;info&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;timeEnd&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;trace&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-construct&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-debugger&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-duplicate-super&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-duplicate-variable&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-empty&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-empty-interface&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-eval&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-inferrable-types&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-misused-new&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-non-null-assertion&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-shadowed-variable&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-string-literal&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-string-throw&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-switch-case-fall-through&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-unnecessary-initializer&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-trailing-whitespace&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-unused-expression&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-use-before-declare&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-var-keyword&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;object-literal-sort-keys&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;one-line&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-open-brace&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-catch&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-else&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-whitespace&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;prefer-const&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;quotemark&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;single&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;radix&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;semicolon&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;always&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;triple-equals&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;allow-null-check&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;typedef-whitespace&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;call-signature&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;nospace&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;index-signature&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;nospace&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;parameter&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;nospace&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;property-declaration&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;nospace&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;variable-declaration&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;nospace&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;typeof-compare&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;unified-signatures&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;variable-name&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;whitespace&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-decl&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-operator&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-separator&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;check-type&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;directive-selector&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;attribute&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;camelCase&amp;quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;component-selector&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;element&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;kebab-case&amp;quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;use-input-property-decorator&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;use-output-property-decorator&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;use-host-property-decorator&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-input-rename&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-output-rename&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;use-life-cycle-interface&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;use-pipe-transform-interface&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;component-class-suffix&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;directive-class-suffix&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;no-access-missing-member&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;templates-use-public&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;invoke-injectable&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/model-view-presenter-angular-and-testing/</guid>
            <title>Model View Presenter, Angular, and Testing</title>
            <link>http://davembush.github.com/model-view-presenter-angular-and-testing/</link>
            <category>unit test</category>
            <category>angular</category>
            <category>mvp</category>
            <pubDate>Tue, 29 Aug 2017 06:30:33 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;While testing Components is possible, it is not easy and is often pointless.  Using the Model View Presenter pattern, or a variation of it, solves the problem. &lt;/p&gt;
&lt;p&gt;Here’s the deal. Long time readers of my blog know I’ve been a proponent of Unit Testing for a very long time. While I was learning React, I went through the exercise of trying to write test as I was learning.  Now, the great thing about Angular and React is that it is possible to test your components.  The problem with testing components is that you are either testing that your HTML ended up in the right spot, that Angular directives did what they should, or you are evaluating the DOM to verify that component logic worked.  In most cases, putting tests that do any of these at the component level is the wrong way to test. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/08/2017-08-27.jpg&#34; title=&#34;Model View Presenter, Angular, and Testing&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/tamworthboroughcouncil/15657023428/&#34;&gt;Tamworth Borough Council&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/e21893&#34;&gt;Visualhunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Evaluating-HTML&#34;&gt;&lt;a href=&#34;#Evaluating-HTML&#34; class=&#34;headerlink&#34; title=&#34;Evaluating HTML&#34;&gt;&lt;/a&gt;Evaluating HTML&lt;/h2&gt;&lt;p&gt;Ignoring for a second that setting up a component test is awkward, the question I want to address here is, “is that really an appropriate test?” &lt;/p&gt;
&lt;p&gt;If all your smart component does is pass data down to dumb component, all you really need to verify is that given a dumb component with an html fragment, and another one with another fragment, they will all end up sequentially after each other.  It is a pretty easy test to setup. &lt;/p&gt;
&lt;p&gt;But all you’ve ended up testing is that Angular does what it says it will. It won’t tell you what you can’t already see by running the code. &lt;/p&gt;
&lt;p&gt;Dumb components are even more obvious.  Let’s go for something obvious.  You have a ngFor that allows you to display a list of HTML.  You setup your component so that it has an array of three known items, you pass that into the component, do a change detection cycle, and verify that your HTML displays as expected. &lt;/p&gt;
&lt;p&gt;Great, you’ve verified that Angular works again.  You will have a hard time convincing me that you’ve really tested anything.&lt;/p&gt;
&lt;h2 id=&#34;Angular-Directives&#34;&gt;&lt;a href=&#34;#Angular-Directives&#34; class=&#34;headerlink&#34; title=&#34;Angular Directives&#34;&gt;&lt;/a&gt;Angular Directives&lt;/h2&gt;&lt;p&gt;In this case, you are going to try to verify that when you click on a component, or pass it some data, or… whatever, that Angular does what it should.  Maybe you do need to verify that when you click an element, something else happens.  But this is not the place. &lt;/p&gt;
&lt;p&gt;You might create an integration test, which would, by definition, take longer to run.  It would be better if you tested this using an end to end test.  But testing this as a unit test, doesn’t tell you much more than that Angular has said that it would. &lt;/p&gt;
&lt;p&gt;“But, I need to verify that the code in my event handler does what it should!”  You might complain.  Yes, you do, but you don’t need to fire a click event to do that, just call the event handler.&lt;/p&gt;
&lt;h2 id=&#34;Big-Fat-Hairy-Logic&#34;&gt;&lt;a href=&#34;#Big-Fat-Hairy-Logic&#34; class=&#34;headerlink&#34; title=&#34;Big Fat Hairy Logic&#34;&gt;&lt;/a&gt;Big Fat Hairy Logic&lt;/h2&gt;&lt;p&gt;And then there is that “big fat hairy logic” issue.  You’ve created some sort of component that has some rather complex logic.  OK, that happens.  A grid control is a perfect example.  But, maybe your logic is in the wrong place?&lt;/p&gt;
&lt;h2 id=&#34;A-Better-Solution&#34;&gt;&lt;a href=&#34;#A-Better-Solution&#34; class=&#34;headerlink&#34; title=&#34;A Better Solution&#34;&gt;&lt;/a&gt;A Better Solution&lt;/h2&gt;&lt;p&gt;There is a design pattern called “Model View Presenter” Like all of the MV* patterns it aims to separate out logic from the view so that we can test things easier.  It was popular with WebForms in ASP.NET when that was how you wrote ASP.NET web sites.  The way this worked was that you would create an Interface for your WebForm that represented all of the things you wanted to have access to from your logic code.  Your presenter.  All your component or page code did was respond to events on the page and expose data to the data driven forms.  In a lot of ways, Angular isn’t much different from WebForms.  Your TypeScript file is essentially a “code-behind” file and your template is similar to an ASPX page. &lt;/p&gt;
&lt;p&gt;The beauty of the MVP pattern is that when you do it right, your component has no logic at all.  It renders data and responds to events by calling down to the presenter.  In an Angular world, I doubt the Presenter would ever need to call up to the view.  This is prefect.  Now I can create a test for my component logic in a way very similar to how I would test any other Injectable.  Because Injectables are what we are going to use here.&lt;/p&gt;
&lt;h3 id=&#34;Injectable-Presenters&#34;&gt;&lt;a href=&#34;#Injectable-Presenters&#34; class=&#34;headerlink&#34; title=&#34;Injectable Presenters&#34;&gt;&lt;/a&gt;Injectable Presenters&lt;/h3&gt;&lt;p&gt;For the point of illustration, let’s assume that all components would follow this pattern.  Now a simple component would have four files instead of the normal three.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;*.component.ts&lt;/li&gt;
&lt;li&gt;*.component.html&lt;/li&gt;
&lt;li&gt;*.component.css&lt;/li&gt;
&lt;li&gt;*.component.presenter.ts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;*.component.presenter.ts&lt;/code&gt; file is our new Injectable.  Any properties in our component would pass on down to the presenter.  Any methods, which should be few to none, would pass on down to the presenter.  The presenter is where we do all the work.&lt;/p&gt;
&lt;h3 id=&#34;Make-the-Presenter-Available-to-the-Component&#34;&gt;&lt;a href=&#34;#Make-the-Presenter-Available-to-the-Component&#34; class=&#34;headerlink&#34; title=&#34;Make the Presenter Available to the Component&#34;&gt;&lt;/a&gt;Make the Presenter Available to the Component&lt;/h3&gt;&lt;p&gt;Now, if you’ve studied the Angular tutorials, you probably already know this, but my bet is most people programming the new Angular don’t.  You can make an Injectable available by providing it in a module, or by providing it in a component.  If you provide it in the module, it is globally available.  If you provide it in the component, it is only available to that component or its child components.  This is perfect for our use case here.  So, we provide it in our component and then inject it into our component’s constructor. &lt;/p&gt;
&lt;p&gt;Everything else we might have injected into our component can now be injected into our presenter.&lt;/p&gt;
&lt;h2 id=&#34;Look-Ma-No-DOM&#34;&gt;&lt;a href=&#34;#Look-Ma-No-DOM&#34; class=&#34;headerlink&#34; title=&#34;Look Ma, No DOM&#34;&gt;&lt;/a&gt;Look Ma, No DOM&lt;/h2&gt;&lt;p&gt;The side effect of this pattern is now, the complexity of the methods in our component should be 1.  This means they don’t really need to be tested.  And because they don’t need to be tested, we don’t really need a DOM available to run our tests.  This makes it MUCH easier to use jsDOM to run our unit test without having to wire in a bunch of polyfills just to make it all “work.”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-observable-secrets-revealed/</guid>
            <title>Angular Observable Secrets Revealed</title>
            <link>http://davembush.github.com/angular-observable-secrets-revealed/</link>
            <category>angular</category>
            <category>observables</category>
            <category>RxJS</category>
            <pubDate>Tue, 08 Aug 2017 06:30:11 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;If you’ve been programming JavaScript based applications for any length of time, you’ve probably already made the progression from callback hell to promises, but just to recap.  Whenever we make any kind of asynchronous call in JavaScript, we need to provide a callback function to the call so that, when the call completes, the function can be called with any resulting data.  Function calls you may typically make that need this kind of feature are &lt;code&gt;setTimeout()&lt;/code&gt;, &lt;code&gt;setInterval(),&lt;/code&gt; and AJAX calls using the various libraries that support this. &lt;/p&gt;
&lt;p&gt;The problem with using callbacks is that you can end up with “Callback Hell” where you have callbacks inside of other callbacks.  Our code becomes messy and difficult to reason about. &lt;/p&gt;
&lt;p&gt;To try to flatten this situation out, promises were created.  Instead of creating a callback function and passing it into the asynchronous function, the asynchronous function returns a promise that has a function we can pass our function into.  This function can return yet another promise.  The result is that instead of having nested callbacks, all of our callbacks live at the same level. &lt;/p&gt;
&lt;p&gt;However, in the process, we lost the ability to cancel an asynchronous function using callbacks.  Most of the time, this was not a huge concern, but in the case of AJAX calls, we did end up making more request than we really needed to.  Most people never even recognized this as an issue.  But if you go and take a look at some of your older code, you will see that you have several places where the code would work more efficiently if you were able to cancel a call that was being superseded by a new call. &lt;/p&gt;
&lt;p&gt;Meanwhile, some additional functions were added to JavaScript Arrays.  Maybe you’ve seen some of them?  map(), reduce(), and filter() are three of the more common functions. &lt;/p&gt;
&lt;p&gt;What?  You haven’t seen these?  If you have and you know how they work, you can skip this next section.  But, if you haven’t, pay careful attention because this next section is critical to understanding how Observables work. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/08/2017-08-08.jpg&#34; title=&#34;Angular Observable Secrets Revealed&#34;&gt; Photo via &lt;a href=&#34;//visualhunt.com/re/4ba464&#34;&gt;VisualHunt.com&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Array-Functions&#34;&gt;&lt;a href=&#34;#Array-Functions&#34; class=&#34;headerlink&#34; title=&#34;Array Functions&#34;&gt;&lt;/a&gt;Array Functions&lt;/h2&gt;&lt;h3 id=&#34;map&#34;&gt;&lt;a href=&#34;#map&#34; class=&#34;headerlink&#34; title=&#34;map()&#34;&gt;&lt;/a&gt;map()&lt;/h3&gt;&lt;p&gt;Let’s say you have a list of objects that you need to transform into another form.  In the example below, we want to transform our list of objects into a list that can be used in a dropdown list using fullName for the display and id for the value. &lt;/p&gt;
&lt;p&gt;Without using &lt;code&gt;map()&lt;/code&gt;, your code might look something like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newArray = []; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; someList.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; item = someList[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   newArray.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;fullName&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;firstName&lt;/span&gt; + ‘ ‘ +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The thing is, we do most of the code from &lt;code&gt;newArray = []&lt;/code&gt; on down over and over again.  It is only the code in the &lt;code&gt;push()&lt;/code&gt; that changes. &lt;/p&gt;
&lt;p&gt;What if we were to make the code into a function?  That’s what &lt;code&gt;map()&lt;/code&gt; does.  It takes a function as a parameter that takes an item as a parameter.  Inside the function, we use that item to specify how we want to transform the item and the whole map() function returns the new array. &lt;/p&gt;
&lt;p&gt;The code above, turns into this.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newArray = someList.&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;attr&#34;&gt;fullName&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;firstName&lt;/span&gt; + ‘ ‘ +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;filter&#34;&gt;&lt;a href=&#34;#filter&#34; class=&#34;headerlink&#34; title=&#34;filter()&#34;&gt;&lt;/a&gt;filter()&lt;/h3&gt;&lt;p&gt;Now, let’s say that for some reason, you only want to include items in the new array that include a last name that starts with ‘B’. Our old style code would look something like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newArray = []; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; someList.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; item = someList[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;startsWith&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;‘B’&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       newArray.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And once again, this is code we tend to write quite a bit.  So, what if we had a function that did this for us? &lt;/p&gt;
&lt;p&gt;This is exactly what the &lt;code&gt;filter()&lt;/code&gt; function is for.  So, rewriting the code above using &lt;code&gt;filter()&lt;/code&gt; would look like this.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;newArray = someList.&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;startsWith&lt;/span&gt;(‘B’);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Chaining&#34;&gt;&lt;a href=&#34;#Chaining&#34; class=&#34;headerlink&#34; title=&#34;Chaining&#34;&gt;&lt;/a&gt;Chaining&lt;/h3&gt;&lt;p&gt;Once again, you can see that we passed in a function that takes the current item as a parameter.  The function returns true or false.  If it returns true, the item gets included in the new array. &lt;/p&gt;
&lt;p&gt;What if we want to filter AND transform the data? &lt;/p&gt;
&lt;p&gt;The temptation for programmers new to this model is to use the map and push the item into an array that was declared outside of the map. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newArray = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;someList.&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;startsWith&lt;/span&gt;(‘B’)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       newArray.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;fullName&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;firstName&lt;/span&gt; + ‘ ‘ +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But that really isn’t all that much better than if we were just using a for&amp;#x2F;next loop like we’ve been doing.  Old habits die hard. &lt;/p&gt;
&lt;p&gt;Instead, we can take advantage of function chaining. What this allows us to do is to filter and then map. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;newArray = someList.&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;startsWith&lt;/span&gt;(‘B’);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;.&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;attr&#34;&gt;fullName&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;firstName&lt;/span&gt; + ‘ ‘ +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;So much cleaner.&lt;/p&gt;
&lt;h3 id=&#34;reduce&#34;&gt;&lt;a href=&#34;#reduce&#34; class=&#34;headerlink&#34; title=&#34;reduce()&#34;&gt;&lt;/a&gt;reduce()&lt;/h3&gt;&lt;p&gt;The final useful function we have available to us for dealing with common array loops is reduce().  reduce() allows to loop through an array and accumulate the items in an array into another array, an object, or a value. &lt;/p&gt;
&lt;p&gt;The reduce() function take two parameters.  The first parameter is a function.  The second parameter is the starting value for the accumulator. &lt;/p&gt;
&lt;p&gt;The function that we pass in takes three parameters.  The current value of the accumulator, the current item, and the current item index.  Most people only use the first two parameters in their function.  The function returns the new accumulator value that then gets passed into the next call to the function. &lt;/p&gt;
&lt;p&gt;So, a really simple example would be, given an array of numbers, add them all up. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; numbers = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; total = numbers.&lt;span class=&#34;title function_&#34;&gt;reduce&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;sum, item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; sum + item;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I’ve also used this to turn an array of name&amp;#x2F;value pairs into an object where the properties are the name and the values are the values that were paired with the names.&lt;/p&gt;
&lt;h2 id=&#34;Events-as-Arrays&#34;&gt;&lt;a href=&#34;#Events-as-Arrays&#34; class=&#34;headerlink&#34; title=&#34;Events as Arrays&#34;&gt;&lt;/a&gt;Events as Arrays&lt;/h2&gt;&lt;p&gt;Now, imagine that events that fire are part of one long continuous array.  An array that never ends. If this were true listening to events would be as familiar as processing an array. &lt;/p&gt;
&lt;p&gt;This is all an observable is.  It treats everything as though it were an array, adds several other functions that give us even greater functionality, and several functions that allow us to deal with the fact that events are not only sequential, but also time based. &lt;/p&gt;
&lt;p&gt;And because events aren’t really arrays, we call this series of items a “stream.”  So, when you read about “streams” while working with Observables think, “list of items.”&lt;/p&gt;
&lt;h3 id=&#34;Button-Click&#34;&gt;&lt;a href=&#34;#Button-Click&#34; class=&#34;headerlink&#34; title=&#34;Button Click&#34;&gt;&lt;/a&gt;Button Click&lt;/h3&gt;&lt;p&gt;For example, let’s say you have a button on your screen and you want to know when it is pressed.  Let’s say your button is represented by a member variable name “myButton”.  In your code, you would listen to a button click by writing code that looks something like: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fromEvent&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;myButton&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;/* do something in response to the click here */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You will notice that we used the &lt;code&gt;subscribe()&lt;/code&gt; function instead of &lt;code&gt;map()&lt;/code&gt;.  We still have a &lt;code&gt;map()&lt;/code&gt; function.  But, &lt;code&gt;subscribe()&lt;/code&gt; is how we tell the application, “we want to start listening to the stream now.”  Otherwise, &lt;code&gt;subscribe()&lt;/code&gt; works just like map() does. &lt;/p&gt;
&lt;p&gt;Yes, I know what you’re thinking.  “How is that better than just having the template call an event handler?” &lt;/p&gt;
&lt;p&gt;Well, the fact of the matter is, it really isn’t all that much better.  But, here is where it does make more sense.&lt;/p&gt;
&lt;h3 id=&#34;Debouncing-Keystrokes&#34;&gt;&lt;a href=&#34;#Debouncing-Keystrokes&#34; class=&#34;headerlink&#34; title=&#34;Debouncing Keystrokes&#34;&gt;&lt;/a&gt;Debouncing Keystrokes&lt;/h3&gt;&lt;p&gt;If you’ve been writing application in JavaScript for a while, I’m sure you’ve written classic debounce handlers.  You know.  Don’t actually fire this event until you are no longer receiving change events from the input field. &lt;/p&gt;
&lt;p&gt;I won’t write out the old code here.  It is relatively long, hard to follow, and therefore somewhat complicated. &lt;/p&gt;
&lt;p&gt;But here is how we handle it using Observables. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fromEvent&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;myInput&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;change&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;debounceTime&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;250&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;/* do something in response to the input field change here */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;debounceTime(250)&lt;/code&gt; tells the Observable to wait for 250 milliseconds to see if there is some other event that comes in and use that event instead.  That is much easier than the old way.&lt;/p&gt;
&lt;h3 id=&#34;AJAX&#34;&gt;&lt;a href=&#34;#AJAX&#34; class=&#34;headerlink&#34; title=&#34;AJAX&#34;&gt;&lt;/a&gt;AJAX&lt;/h3&gt;&lt;p&gt;While you could handle button clicks and debounce logic using old school JavaScript tricks, in Angular, it is practically impossible to make an AJAX call without using Observables.  This is because the &lt;code&gt;Http&lt;/code&gt; service and the &lt;code&gt;HttpClient&lt;/code&gt; that was introduced in Angular 4.3 use Observables instead of callbacks or promises to manage dealing with the data that eventually is returned from the AJAX call. &lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;Http&lt;/code&gt; and &lt;code&gt;HttpClient&lt;/code&gt; are similar, we will continue our discussion of handling AJAX calls using &lt;code&gt;HttpClient&lt;/code&gt;.  The main advantage to using &lt;code&gt;HttpClient&lt;/code&gt; is that it handles parsing the response into a JavaScript object we can use.  &lt;code&gt;Http&lt;/code&gt; just returns the raw Response object and parsing it out is up to us. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;HttpClient&lt;/code&gt;, on the other hand, returns the object we would have parsed out with &lt;code&gt;Http&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;NOw, assuming you’ve injected HttpClient into the class that is going to use it, a typical get might looks something like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;httpClient&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;TypeInfo&lt;/span&gt;&amp;gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/api/get-data&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: TypeInfo&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the data */&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;So, walking through this, you may notice that some things look very similar to Promises and then, there are some other things that aren’t so much.  But trust me this gets much better.  We are just starting out small. &lt;/p&gt;
&lt;p&gt;First, what is that &lt;code&gt;TypeInfo&lt;/code&gt; thing? &lt;/p&gt;
&lt;p&gt;You see, our get call is what is normally referred to as a “templated method.”  In simple terms, get doesn’t know what type it returns until you tell it.  So, we are telling it that it returns a &lt;code&gt;TypeInfo&lt;/code&gt; type.  &lt;code&gt;TypeInfo&lt;/code&gt; is just a name I made up.  You would create an interface that is relevant to the type of information that your AJAX code is returning. &lt;/p&gt;
&lt;p&gt;Other than that, we subscribe to the observable that get() returns and process the data. &lt;/p&gt;
&lt;p&gt;Noq, what if our get call fails? &lt;/p&gt;
&lt;p&gt;Oh! We have methods for that. &lt;/p&gt;
&lt;p&gt;First, we can trap failures with a &lt;code&gt;catch()&lt;/code&gt; call. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;httpClient&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;TypeInfo&lt;/span&gt;&amp;gt;(‘/api/get-data’)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;err&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;Error&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the error */&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: TypeInfo&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the data */&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next, maybe you want to &lt;code&gt;retry&lt;/code&gt; the failed call before you give up. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;httpClient&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;TypeInfo&lt;/span&gt;&amp;gt;(‘/api/get-data’)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;retry&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;err&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;Error&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the error */&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: TypeInfo&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the data */&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And because we have a &lt;code&gt;catch()&lt;/code&gt;, with must have a &lt;code&gt;finally&lt;/code&gt; too, right? &lt;/p&gt;
&lt;p&gt;Try doing all of that with a Promise or a Callback. &lt;/p&gt;
&lt;p&gt;Oh, and did I mention you can cancel AJAX calls using Observables?  Yep.  It’s true.  In fact, my experience has been that if you make the same call from the same service two times in a row, it will cancel the first call before it makes the second.  Pretty cool. &lt;/p&gt;
&lt;p&gt;The final thing that tends to trip people up who are learning about Observables is that nothing in the observable chain executes until you subscribe to the observable and an event happens. &lt;/p&gt;
&lt;p&gt;Once you start getting comfortable with all of the methods you have available to you, you’ll begin to see the power of using Observables over using Promises or Callbacks, even if there are similarities.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/how-to-implement-angular-routing/</guid>
            <title>How to Implement Angular Routing</title>
            <link>http://davembush.github.com/how-to-implement-angular-routing/</link>
            <category>angular</category>
            <category>routing</category>
            <pubDate>Tue, 18 Jul 2017 06:30:23 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;In the old world where all of our pages were on the server and every change on the client side required a full round trip to the server, each page was a unique URL on the server.  In the SPA world, we only load one “Page” from the server and the client takes care of making it look like we have moved from one page to another. &lt;/p&gt;
&lt;p&gt;When done well, we can create pages that reuse existing content on the screen causing a minimal screen refresh while still allowing the user to link to a specific “Page” in our application. &lt;/p&gt;
&lt;p&gt;These “Pages” are called “Routes”  As in, here is the route to some code I want to execute. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/07/2017-07-18.png&#34; title=&#34;How to Implement Angular 2+ Routing&#34;&gt; Photo via &lt;a href=&#34;//visualhunt.com/re/9589c4&#34;&gt;Visual Hunt&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;  Sounds pretty cool.  But there is a down side that shows up every time someone tries to do this for the first time.  You won’t see this problem until the first time you try to deploy your code because the development server handles this issue for you. 

&lt;p&gt;The problem is this.  When a server receives a request from the browser, it tries to find that file on the server.  If it doesn’t exist, the server returns a 404 error.  File not found. &lt;/p&gt;
&lt;p&gt;Most servers provide ways of circumventing this issue by providing rules.  Essentially, you write a server rule that says, “If the browser ask for a file that doesn’t exist, send them back index.html instead.”  You may need to provide exceptions or otherwise refine the rule if your server is also rerouting other traffic. If you are running on an IIS server, &lt;a href=&#34;/asp-net-angular-js-html5mode/&#34;&gt;I wrote instructions for how to take care of this issue&lt;/a&gt; for AngularJS (1.x).  The instructions work for any client side framework that implements routing. &lt;/p&gt;
&lt;p&gt;Assuming you have that end of things working correctly, here are the steps to get basic routing working in your Angular application.&lt;/p&gt;
&lt;h2 id=&#34;Define-Your-Routes&#34;&gt;&lt;a href=&#34;#Define-Your-Routes&#34; class=&#34;headerlink&#34; title=&#34;Define Your Routes&#34;&gt;&lt;/a&gt;Define Your Routes&lt;/h2&gt;&lt;p&gt;While we could easily define our routes in app.module.ts, the code we write will be much easier to maintain if we create a separate module file named app-routes.module.ts.  So to start, create an app-routes.module.ts file right next to your app.module.ts file.  You can do this with the Angular CLI by typing the following in the command line from within the src&amp;#x2F;app directory: &lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ng g module app-routes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;When you create a module with the Angular CLI, it will put it in a sub-directory.  In this case, it created an app-routes sub-directory.  We want it next to our app.module.ts file.  So, now we need to move the module up a directory and remove the app-routes directory. &lt;/p&gt;
&lt;p&gt;Open up the file, it has some stuff in it that we don’t need.  Remove the CommonModule references and the declarations section of the @NgModule decorator. &lt;/p&gt;
&lt;p&gt;In this new file, you will create an empty Routes array, called routes and decorate the class with @NgModule &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You need to also import Routes and while you are doing that, you might as well import RouterModule because you are going to need that soon too. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; ‘&lt;span class=&#34;meta&#34;&gt;@anguler&lt;/span&gt;/router’; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next, in your app.modules.ts file, import AppRoutesModule using both the TypeScript import and as part of the imports section of the @NgModule decorator.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; ‘./app-routes.&lt;span class=&#34;property&#34;&gt;module&lt;/span&gt;’;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  …,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  …,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We really haven’t done anything useful yet, we’ve just setup some boilerplate code that will compile so we won’t have to think about it any more. &lt;/p&gt;
&lt;p&gt;Now, back to the app-routes.module.ts file. &lt;/p&gt;
&lt;p&gt;Each element in our Routes array defines a specific route in our system relative to the parent route it is a part of.  At the top level the parent route would be the root of the application. &lt;/p&gt;
&lt;p&gt;Here are the properties that are available to us:&lt;/p&gt;
&lt;h3 id=&#34;path&#34;&gt;&lt;a href=&#34;#path&#34; class=&#34;headerlink&#34; title=&#34;path&#34;&gt;&lt;/a&gt;path&lt;/h3&gt;&lt;p&gt;The path property allows us to specify what path, or URL, will load this route.  If you want the component to load for any path, use ‘&lt;strong&gt;’ as the value.  If you want the component to load for the root element, use ‘’ for the path and specify pathMatch: ‘full’ as another property.  You can also use the value ‘&lt;/strong&gt;’ to mean, “match anything.”  We typically use ** to match what would typically be thought of as 404 errors.  For this to work correctly, it should be the last element in your top most route definition.&lt;/p&gt;
&lt;h3 id=&#34;pathMatch&#34;&gt;&lt;a href=&#34;#pathMatch&#34; class=&#34;headerlink&#34; title=&#34;pathMatch&#34;&gt;&lt;/a&gt;pathMatch&lt;/h3&gt;&lt;p&gt;As we’ve already mentioned, pathMatch should be ‘full’ to match ‘’ as the exact path.  But you can also give this value ‘prefix’ to tell it to match any path that starts with the value.  You only need to specify this value if you want to use ‘full’. &lt;/p&gt;
&lt;p&gt;It should also be noted that this value only evaluates the part of the path you are in.  If you use this in a child path, it won’t match the whole path, but only the part that is in the child.&lt;/p&gt;
&lt;h3 id=&#34;component&#34;&gt;&lt;a href=&#34;#component&#34; class=&#34;headerlink&#34; title=&#34;component&#34;&gt;&lt;/a&gt;component&lt;/h3&gt;&lt;p&gt;Component specifies what component should get loaded when the path is matched.&lt;/p&gt;
&lt;h3 id=&#34;children&#34;&gt;&lt;a href=&#34;#children&#34; class=&#34;headerlink&#34; title=&#34;children&#34;&gt;&lt;/a&gt;children&lt;/h3&gt;&lt;p&gt;The children property allows us to specify an array of child paths.&lt;/p&gt;
&lt;h2 id=&#34;Route-Components&#34;&gt;&lt;a href=&#34;#Route-Components&#34; class=&#34;headerlink&#34; title=&#34;Route Components&#34;&gt;&lt;/a&gt;Route Components&lt;/h2&gt;&lt;p&gt;Since our routes will need components, let’s start by creating several components so that we can illustrate routing. &lt;/p&gt;
&lt;p&gt;But first, a short word about how we organize our code. &lt;/p&gt;
&lt;p&gt;In many demos online, the tendency is to put all of our components right under the app directory.  But, in larger applications, I’ve found that it makes a lot more sense to create a route directory under the app directory that we place each of our routes in. &lt;/p&gt;
&lt;p&gt;Now, you might think that we would want to place our child routes as child directories under the routes they are a part of, but the problem with this is that we often have child components in our routes.  How do we know which directory represents a child route and which represents a child component? &lt;/p&gt;
&lt;p&gt;No.  &lt;/p&gt;
&lt;p&gt;What we really want to do is place even the components that represent child routes right under our routes directory.  So, say we have a Page1 route and there is a SubPage route that is a child of Page1.  To make it clear, we put SubPage in a directory named page1.sub-page. &lt;/p&gt;
&lt;p&gt;As for components that are common to multiple pages, we place those in a components directory which is right under the app directory.  This keeps our directories well organized and the code neatly organized as well. &lt;/p&gt;
&lt;p&gt;The next obvious thing that we need to do is that we need to create a routes directory.  Do that now. &lt;/p&gt;
&lt;p&gt;Now, at the command line, inside the new routes directory, execute the following Angular CLI commands &lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ng g component page1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page1-subpage&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;As you executed each command, it should have created a directory for each component with the corresponding css, html, ts and spec files.  Then it updated the app.module.ts file for you so that the components are available for use in the system. &lt;/p&gt;
&lt;p&gt;You may also notice that we created the component as page1-subpage instead of page1.subpage.  The reason for this is that the CLI doesn’t like period separation of file names.  Now, the next thing we are going to do is change the directory name to page1.subpage.  You will also need to change the TypeScript import line that references this directory in your app.module.ts file. &lt;/p&gt;
&lt;p&gt;Now that we have components to page to, let’s create our route definitions.  Back to the Routes array in our app-routes.module.ts file. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: ‘page1’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;children&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: ‘’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: ‘full’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Page1Component&lt;/span&gt;’ &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: ‘subpage’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page1SubpageComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;]&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: ‘page2’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page2Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The first definition may look a bit odd.  We are setting up a route to page1, but the route is the children.  Then in the children we define a route to ‘’.  This is where the Page1Component is specified as the component we want to load. &lt;/p&gt;
&lt;p&gt;You will also note that we specified &lt;code&gt;pathMatch: &amp;#39;full&amp;#39;&lt;/code&gt; for the Page1Component.  This is because we only want this component to be loaded when the child path is empty. &lt;/p&gt;
&lt;p&gt;Using this definition, everything loads into the top level router-outlet.  If we placed Page1Component at the same level as we defined the page1 path, then Angular would expect to have a router-outlet in Page1Component where Pag1SubpageComponent would be loaded. &lt;/p&gt;
&lt;p&gt;Needless to say, you need to be careful how you define your routes. &lt;/p&gt;
&lt;p&gt;Next, you will need to import the three components using the TypeScript import statement. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Page1Component&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1/page1.component&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Page2Component&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page2/page2.component&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Page1SubpageComponent&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1.subpage/page1-subpage.component&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now that everything is defined, we just need to tell Angular where we want these components to show up.  For right now, open the app.component.html file and remove everything that is there and add the router-outlet component. &lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;router-outlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;router-outlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, &lt;code&gt;router-outlet&lt;/code&gt; is a component that is defined in the RouterModule, so we need to import that in the imports section of our AppRoutesModule.  But we don’t just import the RouterModule, we use RouterModule.forRoot() and pass in the route array we just defined into forRoot(). &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;(routes)],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;exports&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There is one final tweak that we need to make to our route definition.  Right now, if you go to the root of the application, there isn’t a component defined for it.  To fix this, we are going to add the following definition at the top of  our routes: &lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  path&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &amp;#x27;&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  redirectTo&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &amp;#x27;page1&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  pathMatch&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &amp;#x27;full&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You need &lt;code&gt;pathMatch: &amp;#39;full&amp;#39;&lt;/code&gt; to tell the router to only match this rule when the path is ‘’ exactly, just like we did with the Page1Component in the children list.  Otherwise, it will match everything. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;redirectTo: &amp;#39;page1&amp;#39;&lt;/code&gt; part tells it to redirect to the page1 path when this rule is true.&lt;/p&gt;
&lt;h2 id=&#34;Lazy-Loading&#34;&gt;&lt;a href=&#34;#Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;Lazy Loading&#34;&gt;&lt;/a&gt;Lazy Loading&lt;/h2&gt;&lt;p&gt;I realize that I still need to show you how to navigate to routes in your application, but first let’s look at lazy loading the routes. &lt;/p&gt;
&lt;p&gt;In the past, when building a Single Page Application, the custom was to load all of the JavaScript code we needed for the page up front.  But, if you have multiple pages in your application, some of those may never be needed by your user.  So, what are we doing loading stuff that will never get used? &lt;/p&gt;
&lt;p&gt;No, it is better to load only what we need when we need it.  While it might take longer if you totaled up each load, the user perceives the experience as faster.  Therefore what we want to do is to make each of our pages load as we need them. &lt;/p&gt;
&lt;p&gt;To do this, we need to create a module for each of the components that represent our top level routes.  We want to import modules and services into the module that is closest to where we need them.  This is why.  By only importing things where we need them, Angular can create the smallest package necessary all up and down the dependency tree. &lt;/p&gt;
&lt;p&gt;To make things easy and to do them the way you would have done them if you had done it this way to begin with, let’s delete all of the sub-directories under routes.  It’s OK.  We aren’t losing any work that we can’t quickly get back.  We haven’t added any code to these routes yet. &lt;/p&gt;
&lt;p&gt;At the command line, navigate to the routes directory and then type in the following Angular-CLI commands:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ng g module page1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g module page1-subpage&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page1-subpage&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g module page2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then, just like we did the first time, rename the page1-subpage directory to page1.subpage. &lt;/p&gt;
&lt;p&gt;Now, go to the app.modules.ts file and remove the references to the Page1, Page2, and Page1Subpage components anywhere you see them. &lt;/p&gt;
&lt;p&gt;Do the same thing in the app-routes.module.ts file. &lt;/p&gt;
&lt;p&gt;Now, the way we define our routes changes slightly.  We will still need the redirect route, but everything else changes. &lt;/p&gt;
&lt;p&gt;The key to making this work is the property &lt;code&gt;loadChildren&lt;/code&gt;, which is a string in the format of: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;pathToModule#ModuleClassName&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We’ll work from the top down.  Change the routes array in app-routes.module.ts to look like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;redirectTo&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;full&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1/page1.module#Page1Module&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page2&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page2/page2.module#Page2Module&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;When we try to access something from page1, it will load the Page1Module and try to resolve it from there.  When we try to access something from page2, it will load the Page2Module.  Both of these happen during run time. &lt;/p&gt;
&lt;p&gt;Next, go to page1.module.ts and, import RouterModule and add the following to the imports section of @NgModule.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forChild&lt;/span&gt;([&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;full&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page1Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;subpage&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: ‘../page1.&lt;span class=&#34;property&#34;&gt;subpage&lt;/span&gt;/page1-subpage.&lt;span class=&#34;property&#34;&gt;module&lt;/span&gt;#&lt;span class=&#34;title class_&#34;&gt;Page1SubpageModule&lt;/span&gt;’&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next move over to page2 and do something similar.  Since page2 doesn’t have a sub-route, you only need, one route. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forChild&lt;/span&gt;([&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;full&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page2Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And again, similarly for page1-subpage. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forChild&lt;/span&gt;([&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;full&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page1SubpageComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you haven’t already, move your command-line prompt back to the root of the project and type&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;To start the server and compile your code.  If everything compiles, you should see 3 chunk files along with the other files we saw when we compiled the code without lazy loading. One each for each of the routes. &lt;/p&gt;
&lt;p&gt;Run the app in your browser now to make sure it works correctly. &lt;/p&gt;
&lt;p&gt;See how easy that was?  It isn’t really that much harder than specifying the routes like we did the first time, but we get huge benefits in performance.&lt;/p&gt;
&lt;h2 id=&#34;Passing-Parameters&#34;&gt;&lt;a href=&#34;#Passing-Parameters&#34; class=&#34;headerlink&#34; title=&#34;Passing Parameters&#34;&gt;&lt;/a&gt;Passing Parameters&lt;/h2&gt;&lt;p&gt;The last thing you need to know about is how to pass parameters.  You would normally do this when you are coming from an existing list of items.  Each item has some sort of unique identifier.  We click some link and that takes us to another page to show details or to edit the content.  For our purposes here, it doesn’t matter. &lt;/p&gt;
&lt;p&gt;To specify that a route takes a parameter, use colon notation: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;detail/:id&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Angular knows it is a parameter when you use a URL to get to it because of the location.&lt;/p&gt;
&lt;h2 id=&#34;Retrieving-Parameters&#34;&gt;&lt;a href=&#34;#Retrieving-Parameters&#34; class=&#34;headerlink&#34; title=&#34;Retrieving Parameters&#34;&gt;&lt;/a&gt;Retrieving Parameters&lt;/h2&gt;&lt;p&gt;Let’s say you have a component that represents a route with a parameter.  For that to be useful, you’ll need to pull the parameter out of the route information. &lt;/p&gt;
&lt;p&gt;To do this, you’ll need to inject &lt;code&gt;ActivatedRoute&lt;/code&gt; into the component.  Then when you need the parameter(s) you can use: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;route.&lt;span class=&#34;property&#34;&gt;params&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;params&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Use params[&amp;#x27;id&amp;#x27;], where ‘id’ is the name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// we gave the parameter in the path.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Route-Navigation&#34;&gt;&lt;a href=&#34;#Route-Navigation&#34; class=&#34;headerlink&#34; title=&#34;Route Navigation&#34;&gt;&lt;/a&gt;Route Navigation&lt;/h2&gt;&lt;p&gt;Now that we have routes in place, we need to discuss how to navigate from one route to another.  The temptation, having just used URLs to go from one to the other, would be to use hyperlinks and put the information in the href attribute. &lt;/p&gt;
&lt;p&gt;No doubt, you could probably get that to work, but the main problem with using that method is that there is no safeguards to make sure that the URL you use to navigate when you are developing will work when you move the site to another environment. &lt;/p&gt;
&lt;p&gt;The reason for this is that we have to set the base href for the site.  During development this is normally ‘&amp;#x2F;’.  But when you go to production, it could be some sub directory. &lt;/p&gt;
&lt;p&gt;Also, because of this base href, every page&amp;#x2F;route we land on is still relative to that base.  This means that every route we want to navigate to would have to be hard wired to the base of the site, and again, that’s assuming that the site will always be in the same relative location when it is deployed. &lt;/p&gt;
&lt;p&gt;Now, if we can’t using a regular URL to navigate, what do we use instead?&lt;/p&gt;
&lt;h3 id=&#34;routerLink&#34;&gt;&lt;a href=&#34;#routerLink&#34; class=&#34;headerlink&#34; title=&#34;routerLink&#34;&gt;&lt;/a&gt;routerLink&lt;/h3&gt;&lt;p&gt;You use the routeLink directive added to your anchor tag.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;routerLink&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;[&amp;#x27;/page1&amp;#x27;]&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;go here&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This may look a little different from what you expected, so let’s break this down. &lt;/p&gt;
&lt;p&gt;The routerLink directive takes an array.  Since we can’t pass an array as a string, the only way we can pass it is by evaluating it at run time.  Remember, the square bracket syntax is an indication to the Angular compiler that what we are assigning is something that should be evaluated.  Typically this would be pointing to a function or variable in our TypeScript code.  In this case, we are pointing to a literal array.  Everything between the opening and closing quotes is JavaScript. &lt;/p&gt;
&lt;p&gt;As for the actual parameter, the string in the single element array works much like you would use a URL.  The forward slash says to start at the root of the web application (instead of the root of the domain like a URL would.)  And the page1 is the route we’ve already defined.  If you leave the forward slash off, it is relative to the current route. &lt;/p&gt;
&lt;p&gt;But what about passing parameters? &lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;routerLink&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;[&amp;#x27;/page1&amp;#x27;, someVariable]&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;go here&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Each comma delimited value represents a segment of your route.&lt;/p&gt;
&lt;h3 id=&#34;Router-navigate&#34;&gt;&lt;a href=&#34;#Router-navigate&#34; class=&#34;headerlink&#34; title=&#34;Router.navigate()&#34;&gt;&lt;/a&gt;Router.navigate()&lt;/h3&gt;&lt;p&gt;The other way you might want to cause navigation to a page to occur is by using the navigate() method hanging off the Router class.  Using dependency injection, you inject the Router into the class that needs to use it and then use that instance to call navigate().  The parameter you pass in looks very similar to what you used for routerLink. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;router.&lt;span class=&#34;title function_&#34;&gt;navigate&lt;/span&gt;(‘/page1’,someVariable);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Yes, both routerLink and Router.navigate() both support URL like references using ‘.&amp;#x2F;path’ or ‘..&amp;#x2F;path’.&lt;/p&gt;
&lt;h2 id=&#34;Where-Am-I-Now&#34;&gt;&lt;a href=&#34;#Where-Am-I-Now&#34; class=&#34;headerlink&#34; title=&#34;Where Am I Now?&#34;&gt;&lt;/a&gt;Where Am I Now?&lt;/h2&gt;&lt;p&gt;The last part of routing you will commonly need to know about is detecting what the current route is.  Once again this will require you to inject the Router object into the component that needs the information.  Once you have the router object, you can use code like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;router.&lt;span class=&#34;property&#34;&gt;routerState&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;snapshot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This will get the current route url.  I normally grap this as part of listening for the router’s NavigationEnd. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;router&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;events&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;arg&lt;/span&gt; =&amp;gt;&lt;/span&gt; arg &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NavigationEnd&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;arg&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;selectedTab&lt;/span&gt; = router.&lt;span class=&#34;property&#34;&gt;routerState&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;snapshot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;selectedTab&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Guards&#34;&gt;&lt;a href=&#34;#Guards&#34; class=&#34;headerlink&#34; title=&#34;Guards&#34;&gt;&lt;/a&gt;Guards&lt;/h2&gt;&lt;p&gt;Guards control access to our routes.  What happens if you have a route that only certain people should have access to.  Like an admin page.  Sure, you could leave the link off so no one can click the link to get to the page, but that doesn’t prevent someone from pasting the link to the forbidden page into the address bar of the browser and getting there anyhow. &lt;/p&gt;
&lt;p&gt;In Angular, we have four kinds of guards and two ways of creating them. &lt;/p&gt;
&lt;p&gt;The four types of guards are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CanActivate&lt;/li&gt;
&lt;li&gt;CanActivateChild&lt;/li&gt;
&lt;li&gt;CanDeactivate&lt;/li&gt;
&lt;li&gt;CanLoad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you follow my advice and always lazy load your routes, than the two you will most often use are CanLoad and CanDeactivate.  CanLoad provides rules for lazy loading a module.  CanDeactive provides rules for leaving a route. &lt;/p&gt;
&lt;p&gt;If you decide to bundle routes together, then you may also need CanActivate and CanActivateChild.  CanActivate is exactly what it sounds like.  Can I activate this route?  CanActivateChild would go on a route definition that has a children’s collection.  This rule determines if I can activate the children. &lt;/p&gt;
&lt;p&gt;To use Guards in our application, the first thing we need to do is to define them.  The easiest way to define them is as a function that returns a boolean value, a boolean Observable, or a boolean Promise.  For our purposes here, we will just return a boolean value.  But when you have some asynchronous call you need to make to determine if we should return true or false, you’ll want to return an Observable or a Promise.  I favor Observables. &lt;/p&gt;
&lt;p&gt;The definition for a Guard rule looks like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;provide&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;ruleNameHere&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;useValue&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Then, to use the rule, you assign the appropriate rule the name of the rule. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;canLoad&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;ruleNameHere&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1/page1.module#Page1Module&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that canLoad, as well as the other guard properties, takes an array.  This allows you to apply multiple rules to a route. &lt;/p&gt;
&lt;p&gt;The other way of defining a route is as a class that implements an interface, or multiple interfaces that include CanActivate, CanActivateChild, CanDeactivate, and CanLoad.  You them implement the corresponding functions in your class. &lt;/p&gt;
&lt;p&gt;Now, to include the rule you use the Class rather than a string: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;canLoad&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;RuleClassHere&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1/page1.module#Page1Module&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;But-wait-there’s-more-…&#34;&gt;&lt;a href=&#34;#But-wait-there’s-more-…&#34; class=&#34;headerlink&#34; title=&#34;But wait, there’s more …&#34;&gt;&lt;/a&gt;But wait, there’s more …&lt;/h2&gt;&lt;p&gt;Believe it or not, there is even more to routing than we’ve discussed here.  But we’ll leave that for another day or this post will turn into a &lt;a href=&#34;https://davembush.github.io/get-started-with-angular/&#34;&gt;book&lt;/a&gt;. &lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/upload-an-image-as-a-file-in-angular/</guid>
            <title>Upload an Image as a File in Angular</title>
            <link>http://davembush.github.com/upload-an-image-as-a-file-in-angular/</link>
            <category>angular</category>
            <category>images</category>
            <category>file upload</category>
            <pubDate>Tue, 04 Jul 2017 06:30:08 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;This past week, I needed to be able to upload an image in my application to the server as a file so that I could crop it and upload it. &lt;/p&gt;
&lt;p&gt;Now, uploading an image that you pulled up using the file upload control is relatively straight forward.  But, in our case, the image we want to be able to upload didn’t always come from the user’s file system.  This causes two problems. &lt;/p&gt;
&lt;p&gt;First, you can’t crop an image you retrieved from a different URL using the HTML Canvas because of Cross Origin restrictions and second, you can’t upload the file using the standard file upload mechanism because you didn’t get it from the file system. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/07/2017-07-04.jpg&#34; title=&#34;Upload an Image as a File in Angular&#34;&gt; Photo via &lt;a href=&#34;//visualhunt.com/re/3bc74d&#34;&gt;Visual Hunt&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Image-to-Data-without-Canvas&#34;&gt;&lt;a href=&#34;#Image-to-Data-without-Canvas&#34; class=&#34;headerlink&#34; title=&#34;Image to Data without Canvas&#34;&gt;&lt;/a&gt;Image to Data without Canvas&lt;/h2&gt;&lt;p&gt;Now, the standard way of converting an Image to a data URL is to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a new Image,&lt;/li&gt;
&lt;li&gt;set the onload event handler to a function&lt;/li&gt;
&lt;li&gt;set the Image src attribute to the file&lt;/li&gt;
&lt;li&gt;in the onload function,&lt;ul&gt;
&lt;li&gt;draw the image onto the canvas&lt;/li&gt;
&lt;li&gt;call canvas.toDataUrl(mimeType) to get the data url.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is pretty trivial code: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; canvas = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createElement&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;canvas&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;context = canvas.&lt;span class=&#34;title function_&#34;&gt;getContext&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;2d&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; base_image = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Image&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;base_image.&lt;span class=&#34;property&#34;&gt;src&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;img/base.png&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;base_image.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  context.&lt;span class=&#34;title function_&#34;&gt;drawImage&lt;/span&gt;(base_image, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; dataUrl = canvas.&lt;span class=&#34;title function_&#34;&gt;toDataURL&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;image/jpeg&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But, the trouble starts when you use a URL that doesn’t originate from the file system, or the same domain as the application your are running. &lt;/p&gt;
&lt;p&gt;The trick is to read the image using an XMLHttpRequest for foriegn URLs and then use a FileReader object and call readAsDataURL passing the result of the XMLHttpRequest.read. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; image = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Image&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; self = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; reader = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FileReader&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;reader.&lt;span class=&#34;property&#34;&gt;onloadend&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    reader.&lt;span class=&#34;property&#34;&gt;onloadend&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// make sure the image is loaded before we go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// after width and height;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image.&lt;span class=&#34;property&#34;&gt;src&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        image.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// do something with the new image here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image.&lt;span class=&#34;property&#34;&gt;src&lt;/span&gt; = reader.&lt;span class=&#34;property&#34;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;image.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; xhr = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;XMLHttpRequest&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xhr.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        reader.&lt;span class=&#34;title function_&#34;&gt;readAsDataURL&lt;/span&gt;(xhr.&lt;span class=&#34;property&#34;&gt;response&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xhr.&lt;span class=&#34;title function_&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;GET&amp;#x27;&lt;/span&gt;, image.&lt;span class=&#34;property&#34;&gt;src&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xhr.&lt;span class=&#34;property&#34;&gt;responseType&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;blob&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xhr.&lt;span class=&#34;title function_&#34;&gt;send&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(action.&lt;span class=&#34;property&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;File&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// won&amp;#x27;t be using image.onload so we need to turn it off&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    reader.&lt;span class=&#34;title function_&#34;&gt;readAsDataURL&lt;/span&gt;(action.&lt;span class=&#34;property&#34;&gt;payload&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this triggers image.onload which triggers reader.readAsDataURL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image.&lt;span class=&#34;property&#34;&gt;src&lt;/span&gt; = action.&lt;span class=&#34;property&#34;&gt;payload&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now we can put the image using the data URL on the canvas and the canvas doesn’t know we got it from a foreign URL any more so we no longer get a cross origin URL. &lt;/p&gt;
&lt;p&gt;The entry point for this code is on line 27.  You see  that if we are working with a File, we just use the FileReader directly.  But if we are using http, we go through the XMLHttpRequest.&lt;/p&gt;
&lt;h2 id=&#34;Fake-File-Upload&#34;&gt;&lt;a href=&#34;#Fake-File-Upload&#34; class=&#34;headerlink&#34; title=&#34;Fake File Upload&#34;&gt;&lt;/a&gt;Fake File Upload&lt;/h2&gt;&lt;p&gt;The only problem with this is that now we no longer have the file point, so if we want to upload the file, as a file, to the server we have come up with some way of creating a fake file object.  And believe it or not, that is a lot easier than you might think. &lt;/p&gt;
&lt;p&gt;You see, a File object is just a kind of Blob object.  So, all we really need to do is to create a Blob.  But, we have one additional issue.  Our image is in base 64 and we need to convert it to a binary byte array. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;b64toFile&lt;/span&gt;(dataURI): &lt;span class=&#34;title class_&#34;&gt;File&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// convert the data URL to a byte string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; byteString = &lt;span class=&#34;title function_&#34;&gt;atob&lt;/span&gt;(dataURI.&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// pull out the mime type from the data URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; mimeString = dataURI.&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;:&amp;#x27;&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;;&amp;#x27;&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Convert to byte array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; ab = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayBuffer&lt;/span&gt;(byteString.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; ia = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Uint8Array&lt;/span&gt;(ab);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; byteString.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ia[i] = byteString.&lt;span class=&#34;title function_&#34;&gt;charCodeAt&lt;/span&gt;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Create a blob that looks like a file.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; blob = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Blob&lt;/span&gt;([ab], &amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;#x27;type&amp;#x27;&lt;/span&gt;: mimeString &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    blob[&lt;span class=&#34;string&#34;&gt;&amp;#x27;lastModifiedDate&amp;#x27;&lt;/span&gt;] = (&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Date&lt;/span&gt;()).&lt;span class=&#34;title function_&#34;&gt;toISOString&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    blob[&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;file&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Figure out what extension the file should have&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(blob.&lt;span class=&#34;property&#34;&gt;type&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;image/jpeg&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            blob[&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;] += &lt;span class=&#34;string&#34;&gt;&amp;#x27;.jpg&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;image/png&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            blob[&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;] += &lt;span class=&#34;string&#34;&gt;&amp;#x27;.png&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// cast to a File&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;lt;&lt;span class=&#34;title class_&#34;&gt;File&lt;/span&gt;&amp;gt;blob;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can use the resulting “File” anywhere you would use a File you had retrieved from the file system.&lt;/p&gt;
&lt;h2 id=&#34;Upload-via-Http&#34;&gt;&lt;a href=&#34;#Upload-via-Http&#34; class=&#34;headerlink&#34; title=&#34;Upload via Http&#34;&gt;&lt;/a&gt;Upload via Http&lt;/h2&gt;&lt;p&gt;The last bit of this is that we need to upload this via the Http service.  This is going to be harder to show with code because it depends on what you need to do. &lt;/p&gt;
&lt;p&gt;In my case, I needed to just upload the file, so the post was pretty straight forward.  I used an Http.post() and passed the returned “file” as the data parameter. &lt;/p&gt;
&lt;p&gt;But, you may need to upload it by wrapping the file in a Form object and specifying varying headers.&lt;/p&gt;
&lt;h2 id=&#34;The-End&#34;&gt;&lt;a href=&#34;#The-End&#34; class=&#34;headerlink&#34; title=&#34;The End&#34;&gt;&lt;/a&gt;The End&lt;/h2&gt;&lt;p&gt;I know it is a relatively short post, but I hope it is helpful to someone.  There are a lot of examples out there of how to do this in JavaScript and jQuery, but I was unable to find anything that was specific to TypeScript and Angular.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/real-world-rxjs-marble-testing-revealed/</guid>
            <title>Real World RxJS Marble Testing Revealed</title>
            <link>http://davembush.github.com/real-world-rxjs-marble-testing-revealed/</link>
            <category>angular</category>
            <category>RxJS</category>
            <category>Marble Testing</category>
            <pubDate>Tue, 13 Jun 2017 06:30:25 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;There must be some evil plot to keep this information a secret because whenever I search for how to use RxJS Marble Testing all I see is how to use it to write tests for RxJS.  Well I’ve finally “cracked the code.” &lt;/p&gt;
&lt;p&gt;In this article you’ll learn the basics of RxJS Marble Testing and how to apply Marble Testing to your own code.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/06/2017-06-13.jpg &#34;Real World RxJS Marble Testing Revealed&#34;) Photo via [Visualhunt](//visualhunt.com/re/9662e0)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;It-All-Started-When-…&#34;&gt;&lt;a href=&#34;#It-All-Started-When-…&#34; class=&#34;headerlink&#34; title=&#34;It All Started When …&#34;&gt;&lt;/a&gt;It All Started When …&lt;/h2&gt;&lt;p&gt;It all started about a month ago when I needed to write a unit test for code that updated the screen once every 15 seconds. Writing a test that would simulate the clock moving forward 15 seconds in old school JavaScript would have been pretty easy.  But I had written my code using RxJS instead of the old school &lt;code&gt;setTimeout()&lt;/code&gt; method we’ve been using for this kind of feature in the past. &lt;/p&gt;
&lt;p&gt;Specifically, I had used &lt;code&gt;Observable.timer(0, 15000);&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;My first attempt to write tests for this were based on the assumption that, under the hood, &lt;code&gt;setTimeout()&lt;/code&gt; was still being used. Just a simple matter of mocking the clock and advancing the timer. Right?&lt;/p&gt;
&lt;p&gt;Wrong!&lt;/p&gt;
&lt;p&gt;Then my initial search brought me to the NgRX 4 way of writing tests for Observables. Only, I didn’t find that out until I had written some code that didn’t work. &lt;/p&gt;
&lt;p&gt;Eventually, I found this thing called Marble Testing. But, as I’ve already mentioned, all the examples I’ve found for how to write test are for written test for the various methods available in the RxJS library. &lt;/p&gt;
&lt;p&gt;I’m guess, if you are still reading, I’ve described your journey as well.&lt;/p&gt;
&lt;h2 id=&#34;Assumptions&#34;&gt;&lt;a href=&#34;#Assumptions&#34; class=&#34;headerlink&#34; title=&#34;Assumptions&#34;&gt;&lt;/a&gt;Assumptions&lt;/h2&gt;&lt;p&gt;For the remainder of this article, I’m going to assume you know how to use RxJS. If you don’t there is already a lot of good information available on that topic that you should easily be able to find by using one of the search engines.&lt;/p&gt;
&lt;p&gt;I’m also going to describe how to use marbles in your tests using Jasmine. I use Jasmine because that is the engine all the frameworks that I use end up using. There are other tools that may or may not be better. But I have no reason to leave what everyone else has already picked as a defacto standard.&lt;/p&gt;
&lt;h2 id=&#34;Marble-Basics&#34;&gt;&lt;a href=&#34;#Marble-Basics&#34; class=&#34;headerlink&#34; title=&#34;Marble Basics&#34;&gt;&lt;/a&gt;Marble Basics&lt;/h2&gt;&lt;p&gt;Since there is a lot of detail on the basics of using Marbles, I only plan on summarizing what you need to know here.  For more details, check out &lt;a href=&#34;//github.com/ReactiveX/rxjs/blob/master/doc/writing-marble-tests.md&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;Create-Observables&#34;&gt;&lt;a href=&#34;#Create-Observables&#34; class=&#34;headerlink&#34; title=&#34;Create Observables&#34;&gt;&lt;/a&gt;Create Observables&lt;/h3&gt;&lt;p&gt;First, you can create either hot observables or cold observables. To do this, you’ll need to create an instance of &lt;code&gt;TestScheduler&lt;/code&gt; and then you call either &lt;code&gt;createHotObservable()&lt;/code&gt; or &lt;code&gt;createColdObservable()&lt;/code&gt; passing a string that defines what you want your observables to do. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; testScheduler = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestScheduler&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; hotObservable = testScheduler.&lt;span class=&#34;title function_&#34;&gt;createHotObservable&lt;/span&gt;(hotMarbleString);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; coldObservable = testScheduler.&lt;span class=&#34;title function_&#34;&gt;createColdObservable&lt;/span&gt;(coldMarbleString);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Marble-Syntax&#34;&gt;&lt;a href=&#34;#Marble-Syntax&#34; class=&#34;headerlink&#34; title=&#34;Marble Syntax&#34;&gt;&lt;/a&gt;Marble Syntax&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;-&amp;quot;&lt;/code&gt; time: 10 “frames” of time passage.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;|&amp;quot;&lt;/code&gt; complete: The successful completion of an observable. This is the observable producer signaling &lt;code&gt;complete()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;#&amp;quot;&lt;/code&gt; error: An error terminating the observable. This is the observable producer signaling &lt;code&gt;error()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt; any character: All other characters represent a value being emitted by the producer signaling &lt;code&gt;next()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;()&amp;quot;&lt;/code&gt; sync groupings: When multiple events need to single in the same frame synchronously, parenthesis are used to group those events. You can group next values, a completion or an error in this manner. The position of the initial &lt;code&gt;(&lt;/code&gt;determines the time at which its values are emitted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;^&amp;quot;&lt;/code&gt; subscription point: (hot observables only) shows the point at which the tested observables will be subscribed to the hot observable. This is the “zero frame” for that observable, every frame before the &lt;code&gt;^&lt;/code&gt; will be negative.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most simple of observables using marbles would look like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;a|&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This would cause an observable event to fire right away and it would pass “a” as the data for the observable.  The observable would then end because the | comes next. &lt;/p&gt;
&lt;p&gt;In the case of the timer I was testing, I don’t need the data, I just need the “event” to fire so my code runs.&lt;/p&gt;
&lt;h2 id=&#34;Marbles-as-Mocks&#34;&gt;&lt;a href=&#34;#Marbles-as-Mocks&#34; class=&#34;headerlink&#34; title=&#34;Marbles as Mocks&#34;&gt;&lt;/a&gt;Marbles as Mocks&lt;/h2&gt;&lt;p&gt;So far, I probably haven’t told you anything that you couldn’t already figure out by doing a basic search.  But, the question remains, how do we use this marble stuff in our own test? &lt;/p&gt;
&lt;p&gt;And the answer that no one seems to be talking about is that you use marbles to mock out the real observable just like you might create a mock object to replace a real object in any other test. &lt;/p&gt;
&lt;p&gt;In the case of the timer problem above, what I needed to do was to make sure that &lt;code&gt;Observable.timer(0, 15000);&lt;/code&gt; returns an observable that was created with a marble instead of an observable created with the timer.  In Jasmine, we do that with &lt;code&gt;spyOn()&lt;/code&gt; &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;testScheduler = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestScheduler&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;spyOn&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;timer&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;property&#34;&gt;and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;returnValue&lt;/span&gt;(testScheduler.&lt;span class=&#34;title function_&#34;&gt;createHotObservable&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;---a|&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The rest of your code really doesn’t care what kind of observable it is, it will do whatever it is it has been coded to do. &lt;/p&gt;
&lt;p&gt;The only thing you need to do to make sure the observable and subscribes do their thing is to make sure you call &lt;code&gt;flush()&lt;/code&gt; on the &lt;code&gt;TestScheduler&lt;/code&gt; instance prior to running an &lt;code&gt;expect()&lt;/code&gt; in your Jasmine test.&lt;/p&gt;
&lt;h2 id=&#34;Other-Uses&#34;&gt;&lt;a href=&#34;#Other-Uses&#34; class=&#34;headerlink&#34; title=&#34;Other Uses&#34;&gt;&lt;/a&gt;Other Uses&lt;/h2&gt;&lt;p&gt;What I’ve shown so far takes care of my 15 second refresh issue. But now, what if I have an observable that expects data? For example, how would I write a test that uses an observable based on an AJAX request as a dependency? In Angular, this would be Http. &lt;/p&gt;
&lt;p&gt;This is actually very simple. The second parameter to either &lt;code&gt;createHotObservable()&lt;/code&gt; or &lt;code&gt;createColdObservable()&lt;/code&gt; is the data you want to send on to the subscribe when it hits the associated marble. You pass this in as an object literal. So, just to keep things simple. Say that when you hit the “a” marble, you want to pass the subscribe an object that has a first name and a last name. Your code might look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;testScheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;createHotObservable&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;-a|&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;: &amp;#123;&lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Dave&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Bush&amp;#x27;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;By using this type of marble mocking, you could not just create unit tests, but you could also create End to End tests that use marbles to return consistent data rather than hitting the back end. Obviously, you would still need to write tests that ensure your back end is going to return the same type of data, but I see that as a separate issue from ensuring that the front end does everything it should do as a system. Anyhow, it is an option.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/ngrx-store-coding-sanity-epiphany/</guid>
            <title>NgRX/Store Coding Sanity Epiphany</title>
            <link>http://davembush.github.com/ngrx-store-coding-sanity-epiphany/</link>
            <category>angular</category>
            <category>design patterns</category>
            <category>NgRX</category>
            <pubDate>Tue, 06 Jun 2017 06:30:44 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Maybe this is all obvious to you, but since I don’t see anyone talking about this when I search for “how to do NgRX” or the various variants, I thought I’d call it out in this weeks post.&lt;/p&gt;
&lt;p&gt;If you haven’t been following along, you’ll want to review &lt;a href=&#34;/tags/ngrx/&#34;&gt;my previous posts on NgRX&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/06/2017-06-06.jpg &#34;NgRX/Store Coding Sanity Epiphany&#34;)&lt;figcaption&gt;Photo credit: [spcbrass](//www.flickr.com/photos/spcbrass/394867154/) via [Visual Hunt](//visualhunt.com/re/cff786) / [ CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;If it isn’t clear yet, I’m still sorting out a lot of this Angular&amp;#x2F;Redux&amp;#x2F;NgRX stuff. But as I was working on my current project this week, I realized I have WAY too much code in my presentation layer.&lt;/p&gt;
&lt;h2 id=&#34;The-Epiphany&#34;&gt;&lt;a href=&#34;#The-Epiphany&#34; class=&#34;headerlink&#34; title=&#34;The Epiphany&#34;&gt;&lt;/a&gt;The Epiphany&lt;/h2&gt;&lt;p&gt;I have two main screens I’m working on. As you read the articles on the Internet that explain how to use this pattern or the Redux pattern it was derived from, you’ll quickly learn that you want to work with a “Smart Component.” This component is kind of a traffic cop. It uses observables to listen to state change in your Store and it sends actions to, primarily, update the database and change the store’s state. From what I’ve been able to gather, the expectation is that a lot of the logic that would be needed to actually process the data is going to go in this smart component. The first screen I worked on, followed this basic pattern. This put a whole crap load of code in my smart component.&lt;/p&gt;
&lt;p&gt;On the second page, I kind of stumbled onto what I believe is a cleaner model. I realized that I was hanging onto data in my smart component that was also in my store. That seems kind of dumb. If all I need is in my store, why not just fire off an action to do whatever it is I want to do and have the @Effect grab the data from the store?&lt;/p&gt;
&lt;p&gt;This is why I ended up making my smart component listen to the observables and dispatch events to the store based on changes in my components. This includes things like button clicks. Any other processing that needs to take place takes place in either an @Effect or is called from an @Effect.&lt;/p&gt;
&lt;p&gt;I can’t describe for you how much cleaner my codebase is as a result! WOW!&lt;/p&gt;
&lt;p&gt;But, will it work on the first page the same as it works on the second page?&lt;/p&gt;
&lt;h2 id=&#34;The-Test&#34;&gt;&lt;a href=&#34;#The-Test&#34; class=&#34;headerlink&#34; title=&#34;The Test&#34;&gt;&lt;/a&gt;The Test&lt;/h2&gt;&lt;p&gt;You see, there is a big difference between the first page and the second page. The first page is basically a search and list page. The second page is an edit page for an item. On the first page, I had multiple store entities for the various parts. I had an entity for the search fields. An entity for the search results. And others. Let’s just say my model isn’t very flat.&lt;/p&gt;
&lt;p&gt;The fact of the matter is, the second page that I created wasn’t really all that flat either. But because I started with the concept of not putting any logic in my smart component, it felt easier to manage.&lt;/p&gt;
&lt;p&gt;So, the first thing I wanted to do was to create a reducer for the page. All this reducer will do is distribute the action down into sub-reducers. This allowed me to keep all of my action code the same. The only thing that changes is that the directories for my sub-reducers and the @Effects, Actions and Interfaces that are associated with them go under my directory for my main Reducer and Model.&lt;/p&gt;
&lt;p&gt;I still have a bit of code that I’d like to clean up, but on the whole, I like this pattern much better than what I was doing before.&lt;/p&gt;
&lt;h2 id=&#34;Advantages&#34;&gt;&lt;a href=&#34;#Advantages&#34; class=&#34;headerlink&#34; title=&#34;Advantages&#34;&gt;&lt;/a&gt;Advantages&lt;/h2&gt;&lt;p&gt;The main advantage to using this new architecture is that it simplifies and reduces testing considerations.&lt;/p&gt;
&lt;p&gt;For example, because all my presentation layer is now doing is either reflecting the state that is in my store or telling my store to do something, there really isn’t much, if anything, left to test in my presentation layer. If you’ve written your code correctly, none of the methods in your view should have a cyclomatic complexity of greater than two. You may still want to write some end-to-end tests to make sure that the NgRX&amp;#x2F;Store loop is working correctly. But that is an entirely different subject.&lt;/p&gt;
&lt;p&gt;This does not mean that we don’t have to test anything. All of that code had to go some place, right?&lt;/p&gt;
&lt;p&gt;But, here’s the deal. Because the code is in an @Effect or a Service (generally) your tests become much more simple. You might have to dummy up a store or a service. But for the most part, your tests won’t really look much different that tests you would write for regular JavaScript code without a framework.&lt;/p&gt;
&lt;p&gt;The other HUGE advantage to using this architecture is that it allows you to distribute your code so that no file is too large and hard to reason about. It allows you to follow the “Single Responsibility Principle” in greater granularity than you might otherwise be able to do.&lt;/p&gt;
&lt;p&gt;And finally, this architecture allows you to treat all the component code: the html template, the CSS, and the TypeScript file, as all View code. And I think this is where many people are confused about Angular.&lt;/p&gt;
&lt;h2 id=&#34;View-Confusion&#34;&gt;&lt;a href=&#34;#View-Confusion&#34; class=&#34;headerlink&#34; title=&#34;View Confusion&#34;&gt;&lt;/a&gt;View Confusion&lt;/h2&gt;&lt;p&gt;In a MVC or even an MVVM pattern, we’ve also considered the HTML template the “View” and the JavaScript (or in our case, TypeScript) code the controller. This is a common misconception that I believe the ASP.NET crowd still gets wrong. Code-behind code isn’t your controller. It is helper code for your View. And so, we end up putting processing code in our view, when it really belongs in an entirely different file. This is what the Model View Presenter pattern solves. If you aren’t going to use NgRX and Reactive Forms, you should check out MVP as a way of architecting your code using the older Template Driven Forms approach that was common in AngularJS.&lt;/p&gt;
&lt;h2 id=&#34;Code&#34;&gt;&lt;a href=&#34;#Code&#34; class=&#34;headerlink&#34; title=&#34;Code&#34;&gt;&lt;/a&gt;Code&lt;/h2&gt;&lt;p&gt;For the purposes of this article, I’m going to assume you’ve read my other articles which I’ve linked to at the beginning of this post.&lt;/p&gt;
&lt;p&gt;So first, the basic directory and file structure of this new method might look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;app/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; +-store/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   +-route1/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     +-sub-reducer1/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       --sub-reducer1.actions.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       --sub-reducer1.effects.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       --sub-reducer1.model.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       --sub-reducer1.reducer.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     +-sub-reducer2/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     --route1.actions.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     --route1.effects.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     --route1.model.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     --route1.reducer.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   +-route2/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Some things to note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Your Actions are defined in the target. You would seldom, if ever, define an action at the route level.&lt;/li&gt;
&lt;li&gt;Effects are optional, just like any other time you would use them.&lt;/li&gt;
&lt;li&gt;Effects are seldom, if ever, defined at the route level.&lt;/li&gt;
&lt;li&gt;I’m using “route1” etc and “sub-reducer1” etc as sample names. Use names that represent your route names and the data you are storing.&lt;/li&gt;
&lt;li&gt;The only reducers that gets defined in our app.store.ts file are the reducers in the route directories.&lt;/li&gt;
&lt;li&gt;You still need to register each of your effects in app.store.ts as you have been doing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The next thing that is probably not clear is that your top-level model, ie “route1.model.ts” should only hold the sub-reducers. I’ve also found it useful to make all of my top-level properties optional.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Route1Model&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  subItem1?: &lt;span class=&#34;title class_&#34;&gt;SubModel1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   subItem2?: &lt;span class=&#34;title class_&#34;&gt;SubModel2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And this is used in your route reducer as:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;route1Reducer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;state: Route1Model =&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    subReducer1: &amp;#123;/* subReducer definition here */&amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    subReducer2: &amp;#123;/* subReducer definition here */&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;  &amp;#125;, action: Action&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;// process action here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Route1Reducer&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionReducer&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Route1Model&lt;/span&gt;&amp;gt; = route1Reducer;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, the trick we need to implement is that we need to delegate the actions down to the appropriate reducers and we only want to change the state object to a new object if a child state has changed.&lt;/p&gt;
&lt;p&gt;In the top level reducer, you need to put code that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; reducerList = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;subReducer1&lt;/span&gt;: subReducer1,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;subReducer2&lt;/span&gt;: subReducer2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; returnState = state;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;keys&lt;/span&gt;(reducerList).&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; newState = reducerList[item](state[item], action);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(newState !== state[item]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; newItem = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      newItem[item] = newState;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      returnState = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;assign&lt;/span&gt;(&amp;#123;&amp;#125;, returnState, newItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; returnState;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The key here is that you want the property names in the reducerList to be the same name as what is in the Route1Model and you want the values assigned to them to be the function pointer (notice, no parenthesis) that should be called.&lt;/p&gt;
&lt;p&gt;The actual sub-reducers look like a regular reducer.  The only real difference is that you will be calling the function that returns the state, the second export statement we normally put in our reducers that returns the ActionReducer&amp;lt;&amp;gt; is not needed.&lt;/p&gt;
&lt;p&gt;So, our Object.keys().map() processes each reducer and updates the parent object if the child has changed.&lt;/p&gt;
&lt;p&gt;Now, by way of reminder. You can observe all the store, or part of the store. So, your smart component might observe just a sub entity or the whole entity depending on the need at the moment.&lt;/p&gt;
&lt;p&gt;Finally, lets say you want to have a “Save” button that causes the information in your store to be persisted to a database. You would place a method in your smart component that gets triggered by the button and fires a “Save” action to an @Effect.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;save&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  event.&lt;span class=&#34;title function_&#34;&gt;stopPropagation&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Route1Actions&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;save&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Your @effect will respond, and since @Effects typically already have a store injected into them, you can use the store to retrieve the data.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;dispatch&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&amp;#125;) _save$ = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;update$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;StagedEditActions&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;SAVE&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;route1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;first&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;route1Data&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;service&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;save&lt;/span&gt;(route1Data))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(requestId$ =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    requestId$.&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;id&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(route1Actions.&lt;span class=&#34;title function_&#34;&gt;load&lt;/span&gt;(id))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/functional-reactive-angular-revealed/</guid>
            <title>Functional Reactive Angular Revealed</title>
            <link>http://davembush.github.com/functional-reactive-angular-revealed/</link>
            <category>angular</category>
            <category>RxJS</category>
            <category>NgRX</category>
            <pubDate>Tue, 30 May 2017 06:30:46 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last month or so, I’ve been presenting the basics of &lt;a href=&#34;/tags/ngrx/&#34;&gt;how to use NgRX&amp;#x2F;Store with Angular&lt;/a&gt;. In the past, I’ve praised the virtues of &lt;a href=&#34;/tags/reactive-forms/&#34;&gt;Reactive Forms&lt;/a&gt;, also known as &lt;a href=&#34;/tags/model-driven/&#34;&gt;Model Driven Forms&lt;/a&gt;. These along with RxJS make up the pillars of Functional Reactive Angular Programming.&lt;/p&gt;
&lt;p&gt;What is sad is that this reality is lost on so much of the Angular community. When I listen to podcast where they talk about any of these concepts individually, Function Reactive Programming (FRP) is barely, if ever, mentioned.&lt;/p&gt;
&lt;p&gt;But the scary thing is this, there are many people who are going to use the new Angular the way they used the old Angular and they will completely miss the main advantages. They may even jump from Angular to React or (even) Aurelia. And that’s just picking on the most recent frameworks. Some will want to go back to Egypt and decide jQuery is a good choice!&lt;/p&gt;
&lt;p&gt;Functional Reactive Programming is not just a hot new model. It solves a lot of problems.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/05/2017-05-30.png &#34;Functional Reactive Angular Revealed&#34;) Photo via [VisualHunt.com](//visualhunt.com/re/b10788)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Object-Oriented-Failure&#34;&gt;&lt;a href=&#34;#Object-Oriented-Failure&#34; class=&#34;headerlink&#34; title=&#34;Object-Oriented Failure&#34;&gt;&lt;/a&gt;Object-Oriented Failure&lt;/h2&gt;&lt;p&gt;Several years ago, I wrote an article called, “&lt;a href=&#34;/object-oriented-programming-has-failed-us/&#34;&gt;Object-Oriented Programming Has Failed Us&lt;/a&gt;”. In the article, I put forth the reality that most people are unable to think in object-oriented terms. Humans think sequentially and chunk down. Object-Oriented Programming requires us to think holistically, frequently in parallel, and chunk up.&lt;/p&gt;
&lt;p&gt;So, lets define some terms. Chunking down is the act of finding differences between things. This is why we discriminate. At times, it is useful to find differences. If you are a microbiologist, you want to do this so you know you are working with one strain of virus vs some other strain.&lt;/p&gt;
&lt;p&gt;As you might have guessed, Chunking Up, is the exact opposite. We look for commonalities. Given two different things, what is the same between them?&lt;/p&gt;
&lt;p&gt;The problem is, that’s not how most of us naturally process the world. There are other problems with Object-Oriented Programming.&lt;/p&gt;
&lt;h3 id=&#34;Hard-to-Reason-About&#34;&gt;&lt;a href=&#34;#Hard-to-Reason-About&#34; class=&#34;headerlink&#34; title=&#34;Hard to Reason About&#34;&gt;&lt;/a&gt;Hard to Reason About&lt;/h3&gt;&lt;p&gt;Back when I was teaching for a training company, I was explaining some concept of Object-Oriented Programming, probably Virtual Functions, to a student that came from a procedural programming world. His comment was, “this is going to make the code really hard to debug!” to which I responded, “not if you step through with the debugger.” But, the truth is, he was right. Debugging Object-Oriented code is difficult because the code is hard to read and reason about. Looking at any one class, am I ever sure that I’m seeing the whole picture?&lt;/p&gt;
&lt;p&gt;Think about this. When you write a class, and have a member variable, how long is it before you’ve forgotten the fact that the variable exists and is implicitly a parameter that is being passed to your function. Not long! And this means that you can never really be sure that when you go to use that function, the state of the object will always be the same.&lt;/p&gt;
&lt;p&gt;This makes the code incredibly hard to test. I’m not even talking about using Test Driven Development. Just any kind of test that have way ensures that the code you’ve written does what you think it does and doesn’t do what you don’t think it does.&lt;/p&gt;
&lt;h3 id=&#34;Single-Responsibility&#34;&gt;&lt;a href=&#34;#Single-Responsibility&#34; class=&#34;headerlink&#34; title=&#34;Single Responsibility&#34;&gt;&lt;/a&gt;Single Responsibility&lt;/h3&gt;&lt;p&gt;One of the rules for Object-Oriented Programming is that we should follow the “Single Responsibility Principle” I ask you, how far do we chunk down to ensure we are only doing one thing in our class?  In fact, many of the principles we have developed are trying to put fences around the inherent problems with programming in an Object-Oriented mindset.&lt;/p&gt;
&lt;h2 id=&#34;Procedural-Programming&#34;&gt;&lt;a href=&#34;#Procedural-Programming&#34; class=&#34;headerlink&#34; title=&#34;Procedural Programming&#34;&gt;&lt;/a&gt;Procedural Programming&lt;/h2&gt;&lt;p&gt;The benefit of Procedural Programming is that I at least knew what parameters I was always going to get.  The disadvantage is that it was still incredibly hard to test because my function could call other function that could call yet other functions.  This meant that I could only really test the functions that were at the end of the hierarchy and really had no good way of mocking out child functions.  While testing is hard in an Object-Oriented world, it is nearly impossible in a procedural world.&lt;/p&gt;
&lt;h2 id=&#34;What-If&#34;&gt;&lt;a href=&#34;#What-If&#34; class=&#34;headerlink&#34; title=&#34;What If&#34;&gt;&lt;/a&gt;What If&lt;/h2&gt;&lt;p&gt;But, what if there were a way to write code that solved most of these problems. A way that better mirrored how we thought, that is easier to reason about, that allows you to chunk down – that forced you to chunk down. A way of coding that was so easy to test, that you frequently didn’t even need to write the test. This is the advantage of Functional Programming generally, and the reason you want to use the combination of NgRX&amp;#x2F;Store, Reactive Forms, and RxJS in the bulk of your Angular code.&lt;/p&gt;
&lt;h2 id=&#34;How-To&#34;&gt;&lt;a href=&#34;#How-To&#34; class=&#34;headerlink&#34; title=&#34;How To&#34;&gt;&lt;/a&gt;How To&lt;/h2&gt;&lt;h3 id=&#34;Basics&#34;&gt;&lt;a href=&#34;#Basics&#34; class=&#34;headerlink&#34; title=&#34;Basics&#34;&gt;&lt;/a&gt;Basics&lt;/h3&gt;&lt;p&gt;You’ll remember from our discussion of NgRX that we setup a reducer to return a new state object for a particular entity in our store. You’ll also remember that we are able to create an entity that has child entities and that we can subscribe to any entity using code that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;entityName&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;or&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;entityName&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;subEntity&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you need to, you can read my previous articles that I’ve already referred to.&lt;/p&gt;
&lt;p&gt;I normally setup an entity in my store for each screen, then for data I am just displaying I subscribe in the template using&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&amp;#123;(observerThing | async)?.variableThing&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;(observerThing | async)&lt;/code&gt; is the same as the code we would normally write in TypeScript:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;observerThing.&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;async&lt;/code&gt; does the &lt;code&gt;subscribe&lt;/code&gt; and returns &lt;code&gt;x&lt;/code&gt;. The &lt;code&gt;?&lt;/code&gt; ensures that we don’t attempt to go after &lt;code&gt;.variableThing&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is all pretty basic stuff.&lt;/p&gt;
&lt;p&gt;But what about working with forms.&lt;/p&gt;
&lt;h3 id=&#34;Forms&#34;&gt;&lt;a href=&#34;#Forms&#34; class=&#34;headerlink&#34; title=&#34;Forms&#34;&gt;&lt;/a&gt;Forms&lt;/h3&gt;&lt;p&gt;I’ve found that the best way to work with forms is to create a structure in my entity that maps directly to my form. So, if I have a form with firstName, lastName, and birthDate, I’ll define my form in my template with a form group using firstName, lastName, and birthDate as formControlName values.&lt;/p&gt;
&lt;p&gt;Next, in my TypeScript code, I’ll subscribe to the form group’s valueChanges property. Any time my form changes, the subscribe dispatches the changes to the reducer for my entity and updates the store.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;property&#34;&gt;myFormGroup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;property&#34;&gt;valueChanges&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; store.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;comment&#34;&gt;/* action thing goes here */&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, I can setup a &lt;code&gt;subscribe&lt;/code&gt; on my entity and any time the data in the entity changes, I can update the form group.&lt;/p&gt;
&lt;p&gt;There is a small little trick you need to know about here. I already showed you how to update the form group using &lt;code&gt;patchValue()&lt;/code&gt; &lt;a href=&#34;/angular2-model-driven-forms-are-superior/&#34;&gt;here&lt;/a&gt;. But because we were not dealing with a fully Functional Reactive programming model, I left out a part you’ll need here.&lt;/p&gt;
&lt;p&gt;When you update your code using &lt;code&gt;patchValue()&lt;/code&gt;, the first parameter will still be the data you want to change. That is, the values from the store’s entity. But for the second parameter, you’ll need to pass in &lt;code&gt;&amp;#123;emitEvent: false&amp;#125;&lt;/code&gt;, otherwise, you’ll end up with an infinite loop. Your form will cause your reducer to change and your store will cause your form to change. What that second parameter is saying is that we don’t want any of the change events to fire because we’ve updated the form.&lt;/p&gt;
&lt;p&gt;You may also want to consider writing code in your reducer that only returns a new state object if no data has changed.&lt;/p&gt;
&lt;h3 id=&#34;RxJS&#34;&gt;&lt;a href=&#34;#RxJS&#34; class=&#34;headerlink&#34; title=&#34;RxJS&#34;&gt;&lt;/a&gt;RxJS&lt;/h3&gt;&lt;p&gt;Now, nothing about anything I’ve written in the “how to” is particularly Functional, but it is Reactive. By virtue of the subscribes, it is reacting to state change and reacting to changes in the form. What makes our code Functional, is that we make use of RxJS, a Reactive library, to process the data. If you’ve already been using the Http object in Angular, you’ve already been using RxJS.&lt;/p&gt;
&lt;p&gt;There is a great &lt;a href=&#34;//reactivex.io/learnrx/&#34;&gt;tutorial for learning RxJS&lt;/a&gt; that the guys at NetFlix have put together. I’m not even going to attempt to teach RxJS here. They’ve got the best material and it is what helped me wrap my head around the basic concepts.&lt;/p&gt;
&lt;p&gt;What I do want to point out here is what makes Functional programming Functional so that you end up using RxJS correctly.  While these are not hard and fast rules, I would encourage you to break these rules only after you can’t find any other way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The output of one function becomes the input for the next function.&lt;/li&gt;
&lt;li&gt;A function never causes a side effect (this is why NgRX has Effects)&lt;/li&gt;
&lt;li&gt;The same parameters in will always produce the same data out.&lt;/li&gt;
&lt;li&gt;Avoid conditionals and use .filter(), .case() etc instead.&lt;/li&gt;
&lt;li&gt;Ideally the cyclomatic complexity of a function should be 1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By following these rules, you will find that most of the code you write doesn’t need to have any test.  Why would you ever test a function with a cyclomatic complexity of 1, or code that has no conditions?&lt;/p&gt;
&lt;h2 id=&#34;The-Right-Tool-for-the-Job&#34;&gt;&lt;a href=&#34;#The-Right-Tool-for-the-Job&#34; class=&#34;headerlink&#34; title=&#34;The Right Tool for the Job&#34;&gt;&lt;/a&gt;The Right Tool for the Job&lt;/h2&gt;&lt;p&gt;While I would love to be able to use Functional programming everywhere, I recognize that it isn’t always the best tool for the job. For example, at least with Angular, there isn’t a good way of writing our components and pages in a strictly Functional way. However, if you use what I’ve illustrated here, you’ll find that even though the structure of your components are Object-Oriented, much of the code within the component is quite functional.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/using-real-world-ngrx/</guid>
            <title>Using Real World NgRX</title>
            <link>http://davembush.github.com/using-real-world-ngrx/</link>
            <category>angular</category>
            <category>design patterns</category>
            <category>NgRX</category>
            <pubDate>Tue, 09 May 2017 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;This week, I want to demonstrate some ways you might use NgRX in your own code.&lt;/p&gt;
&lt;h2 id=&#34;Review&#34;&gt;&lt;a href=&#34;#Review&#34; class=&#34;headerlink&#34; title=&#34;Review&#34;&gt;&lt;/a&gt;Review&lt;/h2&gt;&lt;p&gt;Last week we went into a lot of detail about how the NgRX system should be wired together. Here is all of that in picture form.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2017/05/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;A component fires an event to either an effect or a reducer using an action. If an effect was called, it fires another action which is normally picked up by a reducer. The Reducer mutates the state which then gets placed in the store. “Magic happens here.” You don’t write any code to get it to the store other than that you create a reducer. Anything that is observing the table in the store that got changed will get notified via RxJS observables and the cycle is complete.&lt;/p&gt;
&lt;p&gt;Note that the action you dispatch can be handled by either an Effect, a Reducer or both.&lt;/p&gt;
&lt;h2 id=&#34;Basic-CRUD&#34;&gt;&lt;a href=&#34;#Basic-CRUD&#34; class=&#34;headerlink&#34; title=&#34;Basic CRUD&#34;&gt;&lt;/a&gt;Basic CRUD&lt;/h2&gt;&lt;p&gt;Most of the time, we think of NgRX as a way of handling CRUD operations. We need to see the current record so we fire off a LOAD action that uses an effect to retrieve the data from the database. Once the data comes back, we return an action that tells the reducer to put that new data into the store. Since our component is observing the store, it updates the screen with the new values.&lt;/p&gt;
&lt;p&gt;If we need to add a record, we fire an ADD action. If we need to delete we fire a DELETE action. If we need to update, we fire an UPDATE action. Each of these are picked up by the Effect, which then fires an action that places new state information in the store via the Reducer.&lt;/p&gt;
&lt;h2 id=&#34;Wait-State&#34;&gt;&lt;a href=&#34;#Wait-State&#34; class=&#34;headerlink&#34; title=&#34;Wait State&#34;&gt;&lt;/a&gt;Wait State&lt;/h2&gt;&lt;p&gt;When most people think of how to use NgRX or any similar pattern, they immediately think of the CRUD pattern I mentioned above. But, we don’t have to start the Action chain from a component. For that matter, we don’t have to listen to our Store data from a component either.&lt;/p&gt;
&lt;p&gt;One way I’ve implemented NgRX that solves a lot of common issues is that I’ve created a wait state component that shows when a count variable has been incremented and doesn’t show when the count is zero. Since Store is &lt;code&gt;Injectable&lt;/code&gt;, I can increment and decrement the count from just about anywhere. Most often I increment it from an effect just before I make an AJAX call and decrement it in a finally() block of the Http observable. I have a start() action that increments the count and an end() action that decrements the count and ensures that I never go below zero. I can start off multiple asynchronous processes which will all increment the counter and decrement the counter appropriately. The wait state GUI displays until everything has finished.&lt;/p&gt;
&lt;p&gt;This is OH! So much easier than how we’ve had to handle this problem with other design patterns. I’m not saying it couldn’t be done, or that it was even particularly hard. But this way is easier.&lt;/p&gt;
&lt;h2 id=&#34;Error-Handling&#34;&gt;&lt;a href=&#34;#Error-Handling&#34; class=&#34;headerlink&#34; title=&#34;Error Handling&#34;&gt;&lt;/a&gt;Error Handling&lt;/h2&gt;&lt;p&gt;Another place where you might want to present information but trigger the display from just about anywhere is with error handling. In the code I work on, I have a modal popup component that displays whenever my error collection has something in it. Anytime I need to display an error, I add the error to the collection via an Action and it magically displays. The great thing about this mechanism is that regardless of how many errors I send to the collection, they all display until I close the window, which clears out the collection.&lt;/p&gt;
&lt;h2 id=&#34;Page-State&#34;&gt;&lt;a href=&#34;#Page-State&#34; class=&#34;headerlink&#34; title=&#34;Page State&#34;&gt;&lt;/a&gt;Page State&lt;/h2&gt;&lt;p&gt;Most page state is handled by the fact that we’ve stored the data into a database. But there are times when we want to come back to a page we had been working on previously and we want it to display with the data that was on it at the time we left.&lt;/p&gt;
&lt;p&gt;Or maybe you want to work on a series of pages prior to saving so that everything gets saved as a set.&lt;/p&gt;
&lt;p&gt;No matter. You can use NgRX to store everything into the store and a separate action can trigger an effect that pushes that data to the database.&lt;/p&gt;
&lt;p&gt;Or, as is the case in an application I’m working on, I’m using a form to search a database. When I come back, I want the same search fields and I want the search to reinitialized. In my particular case, I don’t have a search field. You change a field, a new search is automatically initiated. This case is just a little bit more complicated than what we’ve looked at so far.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2017/05/image-1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;In order to keep the state information available so that it is there when I come back to it, I need to store that information in the search table via the Search Reducer. So, every time something changes in the Search Form, I send off an action to the Search Reducer so that the change can be recorded.&lt;/p&gt;
&lt;p&gt;Meanwhile, the Search Form also is listening to the Search Table so that when it comes back it can put the changes in the form, and it can send an action to the Search Results Reducer telling it to search for the information. When it gets the results, the Search Results Table picks them up and since the Search Results Component is listening to the Search Results Table, they display.&lt;/p&gt;
&lt;p&gt;If I leave the page, the Search Form grabs the current search parameters from the Search Table and Fills the Form and sends the action to the Search Results Reducer and the page is back where we left it.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;The point is, NgRX isn’t just about basic CRUD forms and because there are multiple ways you can mix and match the parts, even your basic CRUD implementation has a lot more flexibility than you might be used to.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-2-model-driven-forms-are-superior/</guid>
            <title>Angular(2+) Model Driven Forms Are Superior</title>
            <link>http://davembush.github.com/angular-2-model-driven-forms-are-superior/</link>
            <category>angular</category>
            <category>model driven</category>
            <category>reactive forms</category>
            <pubDate>Tue, 18 Apr 2017 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;If you are programming in Angular and haven’t tried Model Driven Forms yet, I’m assuming that is because you’ve not taken the time to try to learn it. In this article, I am going to try to convince you that the Model Driven Form based approach is superior to Template Driven Forms and that the only people that are still using Template Driven Forms are people who either have not been enlightened or lazy.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/04/image-4.png &#34;Angular(2+) Model Driven Forms Are Superior&#34;)&lt;figcaption&gt;Photo credit: [DarlingJack](//www.flickr.com/photos/aceofknaves/33346081006/) via [Visualhunt.com](//visualhunt.com/re/f8175d) / [ CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-are-Template-Driven-Forms&#34;&gt;&lt;a href=&#34;#What-are-Template-Driven-Forms&#34; class=&#34;headerlink&#34; title=&#34;What are Template Driven Forms&#34;&gt;&lt;/a&gt;What are Template Driven Forms&lt;/h2&gt;&lt;p&gt;For those who aren’t already familiar with the terms, let’s define them first.  A template driven form is an Angular form that has most of the form logic in the template code.  The elements that give away the fact that we are working with a template driven form are that we are using ngModel in our form fields, all of our form fields have a name attribute, and our form has ngForm declared as assigned to the form variable.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt; #&lt;span class=&#34;attr&#34;&gt;form&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;ngForm&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; [(&lt;span class=&#34;attr&#34;&gt;ngModel&lt;/span&gt;)]=&lt;span class=&#34;string&#34;&gt;&amp;quot;nameField&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In our code, each form field is handled individually.  While we might bind them all to a structure of some sort in our TypeScript code, the result is we continue to think of the data as parts rather than wholes.&lt;/p&gt;
&lt;h2 id=&#34;What-are-Model-Driven-Forms&#34;&gt;&lt;a href=&#34;#What-are-Model-Driven-Forms&#34; class=&#34;headerlink&#34; title=&#34;What are Model Driven Forms&#34;&gt;&lt;/a&gt;What are Model Driven Forms&lt;/h2&gt;&lt;p&gt;Model Driven Forms, on the other hand, put a minimal amount of information in the template. It isn’t that we eliminate the template completely, we just put more of the responsibility into the TypeScript code.&lt;/p&gt;
&lt;p&gt;Typical template code for Model Driven Forms looks like this&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;formGroup&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;form&amp;quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;formControlName&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice how much less code is needed.&lt;/p&gt;
&lt;p&gt;But, you may ask, how do I get the code in and out of the field? How do I validate the field?&lt;/p&gt;
&lt;p&gt;Oh, but you see, that is exactly why I love Model Driven forms. That’s all in the TypeScript code.&lt;/p&gt;
&lt;p&gt;But other than the fact that there is less code in the template and we can handle everything about the form in our TypeScript, the main difference between Template Driven Forms and Model Driven Forms is that Model Driven Forms let us treat the form as a whole rather than individual parts. This solves problems that used to be rather tricky using Template Driven Forms.&lt;/p&gt;
&lt;h2 id=&#34;Flexible-Validation&#34;&gt;&lt;a href=&#34;#Flexible-Validation&#34; class=&#34;headerlink&#34; title=&#34;Flexible Validation&#34;&gt;&lt;/a&gt;Flexible Validation&lt;/h2&gt;&lt;p&gt;Just so we have a reference, this is what our TypeScript code would look like to wire up our TypeScript code to our template.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt; = formBuilder.&lt;span class=&#34;title function_&#34;&gt;group&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;title class_&#34;&gt;Validators&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;required&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;sex&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;title class_&#34;&gt;Validators&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;required&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;dob&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Validators&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;compose&lt;/span&gt;([ &lt;span class=&#34;title class_&#34;&gt;Validators&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;required&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;View&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;isDate&lt;/span&gt;])]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;this.form&lt;/code&gt; references a public member in the form class. It is the same name that we named our form group in the template file.&lt;/p&gt;
&lt;p&gt;Within the form group, we have a property for each field in our form group. In the sample above, we only created one input field named ‘name’. This form group references two other fields, ‘sex’ and ‘dob’. I added these in so I could show you some other features.&lt;/p&gt;
&lt;p&gt;You’ll see that we’ve defined some validations. Simple required validations until we get to ‘dob’ where we want to make sure we give them a real date. For this, we use two new features. We use the &lt;code&gt;compose&lt;/code&gt; feature to combine several validations into one. We also created a custom validation called &lt;code&gt;isDate.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Custom validations are static methods that take the control they are associated with as a parameter. Each control has a value property that you can use to retrieve the current value of the control.&lt;/p&gt;
&lt;p&gt;The problem that this solves is that now we can write any validation we need without having to make it a directive. We could also cross validate between this control and another control on the form by climbing up to the parent Form Group and back down to a sibling Form Control. It really is quite flexible.&lt;/p&gt;
&lt;h2 id=&#34;Easy-Change-Detection&#34;&gt;&lt;a href=&#34;#Easy-Change-Detection&#34; class=&#34;headerlink&#34; title=&#34;Easy Change Detection&#34;&gt;&lt;/a&gt;Easy Change Detection&lt;/h2&gt;&lt;p&gt;If you are working with Template Driven Forms, you know that the way you know a value in a control has changed is because the property it is associated with gets a new value. Setting up a simple setter lets you know the field has changed. Or if you prefer you can use the split syntax of&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[ngModel]=&amp;#39;field&amp;#39; (ngModelChange)=&amp;#39;changeHander($event)&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In Model Driven forms we can tell when any field has changed by subscribing to the valueChanges property.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;valueChanges&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;value&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;contact&lt;/span&gt; = &lt;span class=&#34;title function_&#34;&gt;deepAssign&lt;/span&gt;(&amp;#123;&amp;#125;, &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;contact&lt;/span&gt;, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The value that gets passed in has information about the field or fields that changed. So, rather than getting every field every time, you are only getting the information that actually changed. So, in your subscription, you can detect what changed and deal with that field individually if you need to. In the code above, I’m just dispatching the new state to my reducer. By doing this, my store has the current state so that when I’m ready to put it in a database, I don’t have to go around my form and gather up all the information. I already have it all.&lt;/p&gt;
&lt;h2 id=&#34;Centralized-Form-Handling&#34;&gt;&lt;a href=&#34;#Centralized-Form-Handling&#34; class=&#34;headerlink&#34; title=&#34;Centralized Form Handling&#34;&gt;&lt;/a&gt;Centralized Form Handling&lt;/h2&gt;&lt;p&gt;And that’s what I mean by “Centralized Form Handling.” All my form validation stuff is centralized. All the code I need to get the data out of my form is centralized. And, as you’ll see soon, all the code I need to get the data into my form is centralized.&lt;/p&gt;
&lt;h2 id=&#34;Completing-the-Picture&#34;&gt;&lt;a href=&#34;#Completing-the-Picture&#34; class=&#34;headerlink&#34; title=&#34;Completing the Picture&#34;&gt;&lt;/a&gt;Completing the Picture&lt;/h2&gt;&lt;p&gt;The only bit we have left out is, how do we get the data into the form?&lt;/p&gt;
&lt;p&gt;That’s pretty easy.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;form&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;patchValue&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: contact.&lt;span class=&#34;property&#34;&gt;name&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;sex&lt;/span&gt;:contact.&lt;span class=&#34;property&#34;&gt;sex&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;dob&lt;/span&gt;:contact.&lt;span class=&#34;property&#34;&gt;dob&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;toLocaleDateString&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Where contract is an object that has the new data I want to put into the corresponding fields.&lt;/p&gt;
&lt;h2 id=&#34;Testing&#34;&gt;&lt;a href=&#34;#Testing&#34; class=&#34;headerlink&#34; title=&#34;Testing&#34;&gt;&lt;/a&gt;Testing&lt;/h2&gt;&lt;p&gt;One thing we haven’t talked about is my favorite subject of testing. Because all of our logic resides in our TypeScript file, testing our screen logic becomes almost trivial. In fact, if you’ve done this correctly, you shouldn’t need to write anything more than a set of Unit Tests to make sure your screen works as expected. If you marry this with NgRX&amp;#x2F;Store, you will be even better off because you’ll never have to deal with a real database while testing your screen. And you won’t have to do a lot of mocking to achieve this.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, maybe this hasn’t convinced you. So, here is a challenge. Try it! While I have had people reject this model when I explain it to them, those who have actually tried it have seen that it really is a superior model. Which just goes to show that my dad was right, “It is amazing how much I don’t understand, when it doesn’t fit my plan.”  &lt;/p&gt;
&lt;h2 id=&#34;Further-Your-Education&#34;&gt;&lt;a href=&#34;#Further-Your-Education&#34; class=&#34;headerlink&#34; title=&#34;Further Your Education:&#34;&gt;&lt;/a&gt;Further Your Education:&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;//blog.thoughtram.io/angular/2016/06/22/model-driven-forms-in-angular-2.html&#34;&gt;Reactive Forms in Angular&lt;/a&gt; &lt;a href=&#34;//scotch.io/tutorials/using-angular-2s-model-driven-forms-with-formgroup-and-formcontrol&#34;&gt;Using Angular’s Model Driven Forms&lt;/a&gt; &lt;a href=&#34;//toddmotto.com/angular-2-forms-reactive&#34;&gt;Angular Reactive Form Fundamentals&lt;/a&gt; &lt;a href=&#34;//angular.io/docs/ts/latest/guide/reactive-forms.html&#34;&gt;Reactive Forms&lt;/a&gt; (From the Angular Site)&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/more-control-with-angular-flex-layout/</guid>
            <title>More Control with Angular Flex Layout</title>
            <link>http://davembush.github.com/more-control-with-angular-flex-layout/</link>
            <category>angular</category>
            <category>css</category>
            <category>flex</category>
            <pubDate>Tue, 11 Apr 2017 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;If you are using Angular(2+) and you are looking for an easy way to layout your components that gives you lots of flexibility and very few restrictions, you owe it to yourself to checkout &lt;a href=&#34;//github.com/angular/flex-layout&#34;&gt;Angular Flex Layout&lt;/a&gt;.  While it is still in Beta, the framework is quite usable.  I’ve been using it in one of my projects and I’ve been quite happy with the results.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/04/image-2.png &#34;More Control with Angular Flex Layout&#34;) Photo via [VisualHunt.com](//visualhunt.com/re/7d8037)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;The-Old-Days&#34;&gt;&lt;a href=&#34;#The-Old-Days&#34; class=&#34;headerlink&#34; title=&#34;The Old Days&#34;&gt;&lt;/a&gt;The Old Days&lt;/h2&gt;&lt;h3 id=&#34;Straight-CSS&#34;&gt;&lt;a href=&#34;#Straight-CSS&#34; class=&#34;headerlink&#34; title=&#34;Straight CSS&#34;&gt;&lt;/a&gt;Straight CSS&lt;/h3&gt;&lt;p&gt;I tell people, “I’ve been programming websites since ‘Al Gore invented the Internet’” Which is to say, some time prior to 1998. So, I’ve had to deal with layout issues for a very long time. At least in terms of “Internet Time.” And during that time, being able to lay things out on the page in some sort of intelligent way has matured quite a bit. But still, coding it all by hand, unless you are a fulltime CSS person, is not the best use of my time.&lt;/p&gt;
&lt;p&gt;This is, in part, why Bootstrap was created.&lt;/p&gt;
&lt;h3 id=&#34;Bootstrap&#34;&gt;&lt;a href=&#34;#Bootstrap&#34; class=&#34;headerlink&#34; title=&#34;Bootstrap&#34;&gt;&lt;/a&gt;Bootstrap&lt;/h3&gt;&lt;p&gt;I generally love Bootstrap. A great CSS framework that allows me to style my application easily, is easy to modify, and has a pretty respectable grid systems for placing my controls on the page. The problem with Bootstrap though is that the grid system is really all you have available for layout, and it is rather limited. At least that has been my experience. By default, you get a grid with 12 columns. And while you can next grids in other grids, you still end up with alignment issues. There must be an easier way.&lt;/p&gt;
&lt;h3 id=&#34;AngularJS-Material-Design&#34;&gt;&lt;a href=&#34;#AngularJS-Material-Design&#34; class=&#34;headerlink&#34; title=&#34;AngularJS Material Design&#34;&gt;&lt;/a&gt;AngularJS Material Design&lt;/h3&gt;&lt;p&gt;The Angular Flex Layout used to be part of the AngularJS Material Design project. But instead of making it part of the Angular Material Design project, it has been broken out so that we can use it in combination with other systems. Grids where they make sense and Flex Layout where that will work better.&lt;/p&gt;
&lt;h2 id=&#34;Flex-Layout-Benefits&#34;&gt;&lt;a href=&#34;#Flex-Layout-Benefits&#34; class=&#34;headerlink&#34; title=&#34;Flex Layout Benefits&#34;&gt;&lt;/a&gt;Flex Layout Benefits&lt;/h2&gt;&lt;h3 id=&#34;No-Grids&#34;&gt;&lt;a href=&#34;#No-Grids&#34; class=&#34;headerlink&#34; title=&#34;No Grids&#34;&gt;&lt;/a&gt;No Grids&lt;/h3&gt;&lt;p&gt;Now, what makes Flex Layout so great? The first thing that I think of is that I can do everything I was able to do with the Bootstrap grid system, but I have a lot more control. In fact, this past week, I converted an existing layout that was using nested grids to achieve the layout I was looking for and flattened it significantly by switching it to use Flex. You see, in Flex, you can say you want a row and then for each cell in that row, you can specify the width of the cell in any unit you want, or you can tell it to take up the remaining space. And just like Bootstrap grids, the DIVs wrap if needed.&lt;/p&gt;
&lt;h3 id=&#34;Directive-Based&#34;&gt;&lt;a href=&#34;#Directive-Based&#34; class=&#34;headerlink&#34; title=&#34;Directive Based&#34;&gt;&lt;/a&gt;Directive Based&lt;/h3&gt;&lt;p&gt;The other thing that is true of flex is that all of this control is specified at the template level. I’m not specifying layout in a file that is separate from the template I want to apply it to.&lt;/p&gt;
&lt;p&gt;Now, the CSS purist might object to this. “Style information should all go in a global CSS file so you aren’t repeating yourself.” They’ll say. &lt;/p&gt;
&lt;p&gt;Well, yes, that’s true, if you are creating multiple pages that you want to all look the same. But we are talking about Angular here. A Single Page Application. If you have multiple templates that all need the same layout information, you are probably not thinking about your components correctly. That is, your problem isn’t a CSS&amp;#x2F;Style issue, it is a component issue.&lt;/p&gt;
&lt;p&gt;In a SPA, each page looks the same because each page uses the same parent component. Rarely, do you really have a need to share layout styles. Mostly we share component look and feel. That’s different.&lt;/p&gt;
&lt;h3 id=&#34;Responsive&#34;&gt;&lt;a href=&#34;#Responsive&#34; class=&#34;headerlink&#34; title=&#34;Responsive&#34;&gt;&lt;/a&gt;Responsive&lt;/h3&gt;&lt;p&gt;And if I want a cell to be one size for desktop and another size for tablets or phones, I can easily specify what size each should be. Similar to how we would do it with Bootstrap, but in much finer detail.&lt;/p&gt;
&lt;h2 id=&#34;It’s-Just-CSS&#34;&gt;&lt;a href=&#34;#It’s-Just-CSS&#34; class=&#34;headerlink&#34; title=&#34;It’s Just CSS&#34;&gt;&lt;/a&gt;It’s Just CSS&lt;/h2&gt;&lt;p&gt;Before we move on, I want to point out that Flex Layout doesn’t do anything that the current CSS spec doesn’t already allow us to do. However, the current Flexbox CSS implementations are so new that each browser implements the spec enough different that we can’t be sure the styles will work the same way as we move from browser to browser.&lt;/p&gt;
&lt;p&gt;What Flex Layout attempts to do is to normalize the differences in a way similar to how jQuery normalized the DOM for us. Someday, we may not need Flex Layout. But until then, this is going to save you a lot of time trying to figure things out.&lt;/p&gt;
&lt;h2 id=&#34;What-You-Can-Do&#34;&gt;&lt;a href=&#34;#What-You-Can-Do&#34; class=&#34;headerlink&#34; title=&#34;What You Can Do&#34;&gt;&lt;/a&gt;What You Can Do&lt;/h2&gt;&lt;h3 id=&#34;Maintain-Aspect-Ratios&#34;&gt;&lt;a href=&#34;#Maintain-Aspect-Ratios&#34; class=&#34;headerlink&#34; title=&#34;Maintain Aspect Ratios&#34;&gt;&lt;/a&gt;Maintain Aspect Ratios&lt;/h3&gt;&lt;p&gt;I first started playing with the Flexbox CSS spec when I needed to implement a layout that included a video player that was bounded by a splitter control. As the splitter resizes the panel, the video needs to shrink and grow maintaining the aspect ratio while at the same time allowing the cell under it to grow and shrink. This is something that Flex can handle easily.&lt;/p&gt;
&lt;h3 id=&#34;Rows-with-Cells&#34;&gt;&lt;a href=&#34;#Rows-with-Cells&#34; class=&#34;headerlink&#34; title=&#34;Rows with Cells&#34;&gt;&lt;/a&gt;Rows with Cells&lt;/h3&gt;&lt;p&gt;As I’ve already mentioned, it is as easy to set up a new row and place wrapping DIVs in it as it is with Bootstrap.&lt;/p&gt;
&lt;h3 id=&#34;Columns-with-Cells&#34;&gt;&lt;a href=&#34;#Columns-with-Cells&#34; class=&#34;headerlink&#34; title=&#34;Columns with Cells&#34;&gt;&lt;/a&gt;Columns with Cells&lt;/h3&gt;&lt;p&gt;But unlike Bootstrap, you can also create groups of Columns with Cells.&lt;/p&gt;
&lt;h3 id=&#34;Responsive-Card-Layouts&#34;&gt;&lt;a href=&#34;#Responsive-Card-Layouts&#34; class=&#34;headerlink&#34; title=&#34;Responsive Card Layouts&#34;&gt;&lt;/a&gt;Responsive Card Layouts&lt;/h3&gt;&lt;p&gt;The last couple of weeks, I needed to implement a card layout that changed the number of columns displayed based on the width of the container. By using Flex Layout along with min-width and max-width on the cards, I was able to get this to layout correctly regardless of the container width.&lt;/p&gt;
&lt;h2 id=&#34;Getting-Started&#34;&gt;&lt;a href=&#34;#Getting-Started&#34; class=&#34;headerlink&#34; title=&#34;Getting Started&#34;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;&lt;p&gt;I’m not going to spend a lot of time going over the ins and outs of using Flex Layout. They do a pretty respectable job on the website. But, the one thing I did have trouble getting started with was exactly what syntax to use. Some stuff I found used &lt;code&gt;fx-flex&lt;/code&gt; syntax and other sites used &lt;code&gt;fxFlex&lt;/code&gt;. The one you want is &lt;code&gt;fxFlex&lt;/code&gt;. That and a bit of experimentation should get you well on your way.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/3-javascript-fallacies-you-might-believe/</guid>
            <title>3 JavaScript Fallacies You Might Believe</title>
            <link>http://davembush.github.com/3-javascript-fallacies-you-might-believe/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>performance</category>
            <category>react.js</category>
            <pubDate>Tue, 14 Mar 2017 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;You know, you think the whole world knows something is true until you hear someone people respect say something really dumb.  The three JavaScript fallacies I have here are actual statements I’ve heard over the last week during a discussion about Angular2 and Rect.  What makes these fallacies particularly interesting is that they sound plausible.  In fact, there are time when they are even true.  But in the larger context of a JavaScript application they are nearly always false.&lt;/p&gt;
&lt;p&gt;So, here are 3 JavaScript Fallacies you may still believe that you may want to reevaluate.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/03/image-2.png &#34;3 JavaScript Fallacies You Might Believe&#34;)&lt;figcaption&gt;Photo credit: [bark](//www.flickr.com/photos/barkbud/4341791754/) via [VisualHunt](//visualhunt.com/re/8dc251) / [ CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Direct-Access-to-the-DOM-is-Faster-than-using-a-Virtual-DOM&#34;&gt;&lt;a href=&#34;#Direct-Access-to-the-DOM-is-Faster-than-using-a-Virtual-DOM&#34; class=&#34;headerlink&#34; title=&#34;Direct Access to the DOM is Faster than using a Virtual DOM&#34;&gt;&lt;/a&gt;Direct Access to the DOM is Faster than using a Virtual DOM&lt;/h2&gt;&lt;p&gt;OK. I will grant that if you only ever want to change one thing on the screen at a time, yes accessing the DOM directly from JavaScript is probably going to be faster than going through some kind of Virtual DOM layer as is common in React, Angular2 and several other libraries and frameworks that are available today.&lt;/p&gt;
&lt;p&gt;But, the fact is, that’s not how most code works. If you are writing this kind of application and you are using a library or framework that uses a virtual DOM layer, something is wrong. I would argue you’ve probably chosen the wrong library for what you are trying to do.&lt;/p&gt;
&lt;p&gt;But, let’s assume that you are writing a typical SPA application that doesn’t just update one area of the screen. In this case, the fastest way to make this update is all at once. One call to the DOM from JavaScript. I’ve written before about how &lt;a href=&#34;/javascript-performance-tweaks/&#34;&gt;slow accessing the DOM is&lt;/a&gt;. And for all the performance enhancements since I wrote that article, accessing the DOM is still one of the slowest things you can do. So, a framework that lets you write your code in a way similar to how you would write to the DOM directly, but lets you do this in a way that doesn’t actually write to the DOM until the last minute is FASTER than writing to the DOM directly.&lt;/p&gt;
&lt;h2 id=&#34;Immutable-Objects-are-Necessarily-Slower-than-Mutable-Objects&#34;&gt;&lt;a href=&#34;#Immutable-Objects-are-Necessarily-Slower-than-Mutable-Objects&#34; class=&#34;headerlink&#34; title=&#34;Immutable Objects are Necessarily Slower than Mutable Objects&#34;&gt;&lt;/a&gt;Immutable Objects are Necessarily Slower than Mutable Objects&lt;/h2&gt;&lt;p&gt;Functional JavaScript programming has become the latest cool new buzzword in the JavaScript community, for a lot of good reasons, but one main concept that comes along for the ride is the idea of making all of our object immutable. This means, for example, that if I want to modify an array, instead of changing the current array, I would create a new array and copy the elements and the new element into it. No more push.&lt;/p&gt;
&lt;p&gt;Similarly, for a regular object that isn’t a list, we would create a new object and copy the existing elements into it and then overwrite the items that have changed.&lt;/p&gt;
&lt;h3 id=&#34;Why&#34;&gt;&lt;a href=&#34;#Why&#34; class=&#34;headerlink&#34; title=&#34;Why?&#34;&gt;&lt;/a&gt;Why?&lt;/h3&gt;&lt;p&gt;Now, why would we want to go to all of this work? It does seem like it would be faster to just modify the existing object. Right?&lt;/p&gt;
&lt;p&gt;But you see, there is this little thing called “change detection” that more than makes up for all of this overhead I just described.&lt;/p&gt;
&lt;p&gt;In most of our applications, at some point we want to know if an object has changed, right? If we can’t rely on the fact that we have a new object, we have to do a deep comparison of the two objects until we’ve determined that there is a difference, or we’ve been through the whole list and verified that the nothing has changed.&lt;/p&gt;
&lt;p&gt;Once we can rely on objects being immutable, we can use the equals operator (&amp;#x3D;&amp;#x3D;, or &amp;#x3D;&amp;#x3D;&amp;#x3D;) to see if the object has changed. I’m sure you can see that this takes much less time than evaluating an entire object tree, even if you object only has two properties in it that need to be compared.&lt;/p&gt;
&lt;h3 id=&#34;Real-Problem&#34;&gt;&lt;a href=&#34;#Real-Problem&#34; class=&#34;headerlink&#34; title=&#34;Real Problem?&#34;&gt;&lt;/a&gt;Real Problem?&lt;/h3&gt;&lt;p&gt;But let’s step back and look at the bigger picture. In most of the code that I write, what we are really talking about is immutable arrays. Yes there are other non-array places where we would use immutable objects, but my guess is that immutable objects impacts 80% of my code. Get a list of records from the database for example.&lt;/p&gt;
&lt;p&gt;The fact of the matter is, every time I access the database, I get a new array back anyhow. Even in the case of retrieving a single record, I still get a new object back.&lt;/p&gt;
&lt;p&gt;If I need to delete an element from an array, here again, I’ll end up creating a new object.&lt;/p&gt;
&lt;p&gt;In fact, except modifying a row, or adding a record to the end of a list, just about everything I tend to do with an array ends up being an immutable operation anyhow. By making everything immutable, we are forcing the areas that we aren’t already implementing immutability to be immutable. The point is, in terms of performance the net is an obvious gain both in terms of performance and in terms of consistency.&lt;/p&gt;
&lt;p&gt;And, going back to the issue of rendering our data into the DOM, because the change detection is faster, we can determine that a particular component doesn’t need to have the DOM updated quicker rather than re-rendering the entire DOM.&lt;/p&gt;
&lt;h2 id=&#34;Backwards-Compatibility-means-I-can’t-upgrade-my-Development-Environment&#34;&gt;&lt;a href=&#34;#Backwards-Compatibility-means-I-can’t-upgrade-my-Development-Environment&#34; class=&#34;headerlink&#34; title=&#34;Backwards Compatibility means I can’t upgrade my Development Environment&#34;&gt;&lt;/a&gt;Backwards Compatibility means I can’t upgrade my Development Environment&lt;/h2&gt;&lt;p&gt;Continuing on, remember the conversation I’m referencing was about React and Angular2. And the guy who was making these statements about performance was asserting that he couldn’t upgrade his React environment to use the latest and greatest tool chain because he had to support older browsers. He specifically stated IE6. Now, knowing the site he’s talking about, I doubt we make any money at all from people who run IE6. But, let’s just assume for a second that we do.&lt;/p&gt;
&lt;h3 id=&#34;So-what-you’re-telling-me-is…&#34;&gt;&lt;a href=&#34;#So-what-you’re-telling-me-is…&#34; class=&#34;headerlink&#34; title=&#34;So, what you’re telling me is…&#34;&gt;&lt;/a&gt;So, what you’re telling me is…&lt;/h3&gt;&lt;p&gt;… that you are willing to let performance suffer for 99% of your very large customer based because you need to support the 1% (I’m being generous here) of the people who have refused to upgrade and probably aren’t producing any revenue for the company? Maybe I’m missing something, but this seems rather short-sighted. That, or maybe you just don’t know that the new features in the newer browsers allow you to not just write better JavaScript but also allow you to do things without JavaScript that perform better. If you are really interested in writing fast web sites, you should be moving to the latest and greatest tool chain as often as is humanly possible.&lt;/p&gt;
&lt;h3 id=&#34;Bugs-and-Security-Risk&#34;&gt;&lt;a href=&#34;#Bugs-and-Security-Risk&#34; class=&#34;headerlink&#34; title=&#34;Bugs and Security Risk&#34;&gt;&lt;/a&gt;Bugs and Security Risk&lt;/h3&gt;&lt;p&gt;Just this last week I saw a study that said that over a third of the web sites on the Internet were running code that left them venerable to security risk. That is, the code they were running had known security risk. By not upgrading your tools for public facing sites, you are leaving your company at risk. When your site is compromised, do you want to be the one who has to explain to your boss that it is because you refused to upgrade your tools? I sure don’t.&lt;/p&gt;
&lt;h3 id=&#34;But-what-about-the-old-browsers&#34;&gt;&lt;a href=&#34;#But-what-about-the-old-browsers&#34; class=&#34;headerlink&#34; title=&#34;But what about the old browsers?&#34;&gt;&lt;/a&gt;But what about the old browsers?&lt;/h3&gt;&lt;p&gt;Well, if you really need to support the old stuff, there are polyfills that you can apply that will let you run the newer stuff in the older browsers. Seems to me you get the best of both worlds. Your customers who are up to date benefit with a better performing, and less buggy website, and the customers using older browser still get to see something. Are there places where you might still have to make some compromises. Sure. There are a few places. But not enough that you shouldn’t upgrade.&lt;/p&gt;
&lt;h2 id=&#34;What-is-the-Bigger-Problem&#34;&gt;&lt;a href=&#34;#What-is-the-Bigger-Problem&#34; class=&#34;headerlink&#34; title=&#34;What is the Bigger Problem?&#34;&gt;&lt;/a&gt;What is the Bigger Problem?&lt;/h2&gt;&lt;p&gt;So, how can this happen? How can really smart people make really bad choices like this?&lt;/p&gt;
&lt;p&gt;I don’t really know, but I have a few theories.&lt;/p&gt;
&lt;p&gt;One is just plain arrogance. Being so sure you are right that you never stop to think you might be wrong.&lt;/p&gt;
&lt;p&gt;I have to admit, when I first learned about immutability, I thought it sounded slow too. But, my thinking went along the lines of, “well, much smarter people than me are working on this, they must think it makes sense. I wonder why?” And then I started digging for answers.&lt;/p&gt;
&lt;p&gt;So, I would encourage those who are responsible for making decisions to make sure that the people they are listening to can actually back up what they are saying and not just assume they are right because they seem so confident.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/secrets-to-styling-angular2/</guid>
            <title>Secrets to Styling Angular2</title>
            <link>http://davembush.github.com/secrets-to-styling-angular2/</link>
            <category>angular</category>
            <category>animation</category>
            <category>css</category>
            <pubDate>Tue, 31 Jan 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;This past week, while working on a new project, I discovered some secrets to styling Angular2 that I don’t think are very well-known.&lt;/p&gt;
&lt;p&gt;There are two specific issues I needed to solve this week that took a bit of digging. The first was that I wanted my routes to fade in and out as I move between routes. The second was that I was using a grid control from a third party and I needed to style an inner component. We will cover both as well as some more basic operations.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/01/image-2.png &#34;Secrets to Styling Angular2&#34;) Photo via [Visual hunt](//visualhunt.com/)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Angular2-Version&#34;&gt;&lt;a href=&#34;#Angular2-Version&#34; class=&#34;headerlink&#34; title=&#34;Angular2 Version&#34;&gt;&lt;/a&gt;Angular2 Version&lt;/h2&gt;&lt;p&gt;Just so there isn’t any confusion, this article is accurate for Angular 2.x as of 2.5&lt;/p&gt;
&lt;h2 id=&#34;The-Basics&#34;&gt;&lt;a href=&#34;#The-Basics&#34; class=&#34;headerlink&#34; title=&#34;The Basics&#34;&gt;&lt;/a&gt;The Basics&lt;/h2&gt;&lt;p&gt;Just to make sure we have the basics covered, we want to start with generic styling. The temptation might be to style each of your components independently. This would be a mistake. Angular2 doesn’t throw out all the existing CSS rules. Instead, it adds to them. Therefore, anything you can do with a generic style should be handled at that level.&lt;/p&gt;
&lt;p&gt;Since I generally use Bootstrap to theme my applications, this is what I’ll reference here. Using the angular-cli, the way you would add the CSS theme information is to include it in the angular-cli.json file of your application in the “styles” section.&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;styles&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;../node_modules/bootstrap/dist/css/bootstrap.css&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;styles.css&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;],&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you have a component that you need to style in a way that is outside the bounds of the general CSS you’ve included, you can add CSS to the components CSS file. This all works as expected with one small exception. The CSS you add to this file only applies to the component and will override any other CSS that might already be applied by the general CSS.&lt;/p&gt;
&lt;p&gt;This is Angular2 CSS 101 stuff. I’ve written pretty extensively about this in the article “&lt;a href=&#34;https://medium.com/@davembush/adding-css-and-javascript-to-an-angular-cli-project-2b843a8283f3&#34;&gt;Adding CSS and JavaScript to an Angular-CLI Project&lt;/a&gt;”&lt;/p&gt;
&lt;h2 id=&#34;Host-access&#34;&gt;&lt;a href=&#34;#Host-access&#34; class=&#34;headerlink&#34; title=&#34;Host access&#34;&gt;&lt;/a&gt;Host access&lt;/h2&gt;&lt;p&gt;But there are times when the thing you want to style is the host container of the component. Not just the HTML inside it. There are two ways that you might do this.&lt;/p&gt;
&lt;h3 id=&#34;host&#34;&gt;&lt;a href=&#34;#host&#34; class=&#34;headerlink&#34; title=&#34;:host&#34;&gt;&lt;/a&gt;:host&lt;/h3&gt;&lt;p&gt;The first way is to use the &lt;code&gt;:host&lt;/code&gt; directive in your CSS. But you’ll need to be careful with this, as I found out recently.&lt;/p&gt;
&lt;p&gt;You see, you might expect that&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-pseudo&#34;&gt;:host&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;background-color&lt;/span&gt;: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;would cause the background color of the element to turn blue. But if you try that with a simple component you’ll find out that nothing shows up with a background color of blue because by default an element that isn’t part of the HTML spec has no size and basically disappears from the display. We want it to display an essentially be a container for all our other HTML so what you really want to do is something like:&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-pseudo&#34;&gt;:host&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;background-color&lt;/span&gt;: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;height&lt;/span&gt;: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;width&lt;/span&gt;: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;position&lt;/span&gt;: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The only way it will show up, in my experience, is to make the position ‘absolute.’ Remember, we are doing this only because we want the :host to have some impact as a container for all the other elements that might be in it. Normally, you can get by styling the html inside it.&lt;/p&gt;
&lt;h3 id=&#34;HostBinding&#34;&gt;&lt;a href=&#34;#HostBinding&#34; class=&#34;headerlink&#34; title=&#34;@HostBinding()&#34;&gt;&lt;/a&gt;@HostBinding()&lt;/h3&gt;&lt;p&gt;An alternate way of setting style on the component container is by using the @HostBinding() decorator. What this does is that it binds a variable to the containers attribute so that you can change the value from your TypeScript code.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Component(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  selector: &lt;span class=&#34;string&#34;&gt;&amp;#x27;app-view&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  templateUrl: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./view.component.html&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  styleUrls: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;./view.component.css&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ViewComponent&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnInit&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  @HostBinding(&lt;span class=&#34;string&#34;&gt;&amp;#x27;style.backgroundColor&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    backgroundColr = &lt;span class=&#34;string&#34;&gt;&amp;#x27;blue&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  constructor() &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ngOnInit() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Child-Elements&#34;&gt;&lt;a href=&#34;#Child-Elements&#34; class=&#34;headerlink&#34; title=&#34;Child Elements&#34;&gt;&lt;/a&gt;Child Elements&lt;/h2&gt;&lt;p&gt;Now, the other problem you might run into is that you’ll be using some third-party control and you’ll want to style some container element inside of it to fit your needs. Again, this isn’t a particularly common problem, but it might just take you a while to find the answer.&lt;/p&gt;
&lt;p&gt;The first thing you may try is to just style the markup.&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;component-parent component-child &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* style stuff here */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But, try as you might, you’ll never get those styles to show up. You can style the &lt;code&gt;component-parent&lt;/code&gt; all you want, but not the &lt;code&gt;component-child&lt;/code&gt; no matter what you do.&lt;/p&gt;
&lt;p&gt;Here is the trick that allows you to style the &lt;code&gt;component-child&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;component-parent &amp;gt;&amp;gt;&amp;gt; component-child &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /\* style stuff here */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;That &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; thing is call the “piercing” operator. All you need to know is that it is how you get the child elements styled.&lt;/p&gt;
&lt;h2 id=&#34;Animations&#34;&gt;&lt;a href=&#34;#Animations&#34; class=&#34;headerlink&#34; title=&#34;Animations&#34;&gt;&lt;/a&gt;Animations&lt;/h2&gt;&lt;p&gt;You might wonder, at first, why we would need an Animation API in Angular2. Aren’t CSS animations good enough? Well, actually… It isn’t that CSS animations aren’t good enough, but because Angular2 “hide” and “shows” elements by putting them into and out of the DOM and does other DOM manipulations that conflict with CSS animations, you will find there are time you are going to need to use the Angular2 Animation API.&lt;/p&gt;
&lt;p&gt;The Animation API works in a similar way to how the CSS Animations work so this isn’t going to be a big stretch for you if you are already familiar with CSS Animations.&lt;/p&gt;
&lt;p&gt;To animate a component, you are going to need to add an animations section to the @Component decorator of your component:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Component(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  selector: &lt;span class=&#34;string&#34;&gt;&amp;#x27;app-view&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  templateUrl: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./view.component.html&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  styleUrls: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;./view.component.css&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  animations: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/* animation definitions here */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The question then, is “how do we define an animation” Since animations is obviously an array, we want to know, what is it an array of? It is an array of triggers. A trigger has two parts. A name, an an array that specifies how the animation should work. This name gets used in our template using the [@name] syntax to bind to a component property.&lt;/p&gt;
&lt;p&gt;Next, we define each of the states we want to respond to and style we want to end up with when that state is triggered.&lt;/p&gt;
&lt;p&gt;Finally, we define each of the transitions.&lt;/p&gt;
&lt;p&gt;The combination gives us a lot of flexibility. While we can create the same kind of transitions that we might have using CSS, we can also create transitions the we never could have using CSS. All we need to do is have our component change the value of some member variable in some predictable way and the transitions will kick into work.&lt;/p&gt;
&lt;p&gt;You can read more about transitions on the &lt;a href=&#34;//angular.io/docs/ts/latest/guide/animations.html&#34;&gt;Angular2 documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Route-Animations&#34;&gt;&lt;a href=&#34;#Route-Animations&#34; class=&#34;headerlink&#34; title=&#34;Route Animations&#34;&gt;&lt;/a&gt;Route Animations&lt;/h2&gt;&lt;p&gt;Route animations are similar. However, this is where everything I’ve said above comes together.&lt;/p&gt;
&lt;p&gt;The first problem you are going to run into trying to animate a route is that the state you want to base your animations on is the route, which is the parent component of your component you are probably trying to animate. But the reality is, what you are really doing is animating something when it is first displayed and animating it again when it is going away. That is, when it is placed into the DOM and when it is being removed from the DOM. Angular2 has to predefined states for this, ‘:enter’ and ‘:leave’.&lt;/p&gt;
&lt;p&gt;So, we create a trigger named ‘routeAnimation’ and in our route components we bind to it using the @HostBinding() decorator.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@HostBinding(&lt;span class=&#34;string&#34;&gt;&amp;#x27;@routeAnimation&amp;#x27;&lt;/span&gt;) routeAnimation = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Everything else you need to know I’ve already discussed above.&lt;/p&gt;
&lt;p&gt;For more information about routing animations, you can check the &lt;a href=&#34;//angular.io/docs/ts/latest/guide/router.html&#34;&gt;router documentation on the Angular2 documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Finally&#34;&gt;&lt;a href=&#34;#Finally&#34; class=&#34;headerlink&#34; title=&#34;Finally&#34;&gt;&lt;/a&gt;Finally&lt;/h2&gt;&lt;p&gt;It took me way too long to figure this out because a lot of the information has changed since RC0. Hopefully, it will point you in the right direction.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/amazing-angular2-dom-tips-tricks-and-warnings/</guid>
            <title>Amazing Angular2 DOM Tips, Tricks, and Warnings</title>
            <link>http://davembush.github.com/amazing-angular2-dom-tips-tricks-and-warnings/</link>
            <category>angular</category>
            <category>typescript</category>
            <category>DOM</category>
            <pubDate>Tue, 17 Jan 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve been working with Angular2 now since RC0 and I’ve learned quite a few things about Angular2 DOM tips, tricks, and warnings that you’ll want to pay attention to as you get started.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/01/image.png &#34;Amazing Angular2 DOM Tips, Tricks and Warnings&#34;)&lt;figcaption&gt;Photo credit: [Sister72](//www.flickr.com/photos/sis/196867770/) via [VisualHunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Avoid-DOM-Manipulation&#34;&gt;&lt;a href=&#34;#Avoid-DOM-Manipulation&#34; class=&#34;headerlink&#34; title=&#34;Avoid DOM Manipulation&#34;&gt;&lt;/a&gt;Avoid DOM Manipulation&lt;/h2&gt;&lt;p&gt;One of the first things you need to understand about how Angular2 works compared to AngularJS is that any DOM manipulation you do using Angular2 isn’t really manipulating the DOM. At least not directly. Everything that happens at the DOM level is a result of a state change in the component. When Angular2 realizes that the state has changed, it changes the DOM to reflect the change.&lt;/p&gt;
&lt;p&gt;What this means, generally, is that if you need to know about some state change that happened at the DOM level, you’ll want to track that change in your component class. Can you access the DOM directly from your code? Yes. And sometimes you might just have to. But you’ll produce code that is much easier to test if you avoid having your code reach up into the DOM to get current state information.&lt;/p&gt;
&lt;p&gt;You may have already heard about the experimental Web Workers support in Angular2. To make sure you can use this, it would be best to avoid direct DOM manipulation until we are sure the Web Workers implementation will be able to deal with this properly. What this all means in practical terms is that you’ll want to avoid using libraries such as jQuery to manipulate your code and instead replicate that behavior using native Angular2 calls.&lt;/p&gt;
&lt;h2 id=&#34;Only-Generate-the-HTML-You-Need&#34;&gt;&lt;a href=&#34;#Only-Generate-the-HTML-You-Need&#34; class=&#34;headerlink&#34; title=&#34;Only Generate the HTML You Need&#34;&gt;&lt;/a&gt;Only Generate the HTML You Need&lt;/h2&gt;&lt;p&gt;On a similar note, you only want to render the HTML you’re going to need at any one time. Not everything all at once. This will allow your code to render much more efficiently.&lt;/p&gt;
&lt;p&gt;For example, if you have a menu that has dropdown menus, the temptation is going to be to render all the HTML the menu may need all at once and use JavaScript to show or hide the dropdowns as you mouse over them or click them. But with Angular2, you could use the *ngIf directive to include and exclude the menu option as you need them to show. This reduces the initial page size and simplifies your code. Been there, done that.&lt;/p&gt;
&lt;p&gt;By the way, there are other directives you’ll want to get familiar with, but *ngIf is probably the most often ignored because you are likely to try to use display:none to hide an element instead of just eliminating it from the DOM completely.&lt;/p&gt;
&lt;h2 id=&#34;Minimize-Change-Detection&#34;&gt;&lt;a href=&#34;#Minimize-Change-Detection&#34; class=&#34;headerlink&#34; title=&#34;Minimize Change Detection&#34;&gt;&lt;/a&gt;Minimize Change Detection&lt;/h2&gt;&lt;p&gt;I was recently working on a component that displayed a nested array as a set of tabs and dropdown menus. Everything was working great but I wanted to check the CSS on the dropdown so I could make some adjustments. This is when I discovered that the HTML was being rewritten about once a second even though nothing had changed. I couldn’t see this on the main screen, but it became super evident when I opened the developer tools.&lt;/p&gt;
&lt;p&gt;Fortunately, I had already learned about OnPush change detection. So I was able to set my component to use Push notification:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Component(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    templateUrl: &lt;span class=&#34;string&#34;&gt;&amp;#x27;template.html&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    changeDetection: ChangeDetectionStrategy.OnPush &lt;span class=&#34;comment&#34;&gt;// &amp;lt;===&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;View&lt;/span&gt; ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now the component only re-renders when the data it is looking at changes.&lt;/p&gt;
&lt;p&gt;For Push notification to work correctly, all the data that the component is looking at has to be &lt;a href=&#34;/what-if-everything-was-immutable/&#34;&gt;immutable&lt;/a&gt; or an &lt;a href=&#34;/reasons-to-use-rxjs-today/&#34;&gt;Observable&lt;/a&gt;. These are both patterns you should become familiar with because any well architected Angular2 application will make significant use of both of these.&lt;/p&gt;
&lt;h2 id=&#34;Accessing-the-Component-Container&#34;&gt;&lt;a href=&#34;#Accessing-the-Component-Container&#34; class=&#34;headerlink&#34; title=&#34;Accessing the Component Container&#34;&gt;&lt;/a&gt;Accessing the Component Container&lt;/h2&gt;&lt;p&gt;Another problem I recently had was that I wanted to use the class attributes from the container on a child component. The question I had trouble getting the answer to was, “just how to I access the container element?” This was very easy. It is always easy once you know the secret handshake.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.elementRef&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There are various properties and methods hanging off that which might be useful to you. In my case, I wanted to go after the classes that had been attached and reattach them to the INPUT element that was a child of the component. So, I needed to use:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.elementRef.nativeElement.classList&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Accessing-Child-Elements&#34;&gt;&lt;a href=&#34;#Accessing-Child-Elements&#34; class=&#34;headerlink&#34; title=&#34;Accessing Child Elements&#34;&gt;&lt;/a&gt;Accessing Child Elements&lt;/h2&gt;&lt;p&gt;Similarly, you might want to access child elements from your code. This is much easier to find when you search the Internet.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@ViewChild(&lt;span class=&#34;string&#34;&gt;&amp;#x27;input&amp;#x27;&lt;/span&gt;) input: ElementRef;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;@ViewChild is an attribute that tells the Angular2 compiler to look for an element in the template with the variable named input. I’ll explain template variables in a bit. In the code above, I’m going after the INPUT element with a template variable named “input” so I typed it as ElementRef since I don’t have a specific class name for it.&lt;/p&gt;
&lt;p&gt;If you only have one unique element, you can just use code that looks more like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@ViewChild(ElementClassName) variableName: ElementClassName;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Of course, you’ll want to make sure you imported &lt;code&gt;ElementClassName&lt;/code&gt; for this to work. In this case, I’m going after a specific type of element so I type the variable as that type. Now my typescript code knows what properties, fields, and methods I have available.&lt;/p&gt;
&lt;h2 id=&#34;Template-Variables&#34;&gt;&lt;a href=&#34;#Template-Variables&#34; class=&#34;headerlink&#34; title=&#34;Template Variables&#34;&gt;&lt;/a&gt;Template Variables&lt;/h2&gt;&lt;p&gt;As I mentioned above, you can create template variables to allow you to access your child elements from your typescript code. But you can use them for other purposes as well. To create a template variable, just put a hash in front of the variable name you want to use.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; #&lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;...&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now you can use this in your typescript using ViewChild() as explained above, or you can use it in your template as a regular variable.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123; &amp;#123;firstName.value&amp;#125;&amp;#125;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Use-a-Model-Driven-Approach&#34;&gt;&lt;a href=&#34;#Use-a-Model-Driven-Approach&#34; class=&#34;headerlink&#34; title=&#34;Use a Model Driven Approach&#34;&gt;&lt;/a&gt;Use a Model Driven Approach&lt;/h2&gt;&lt;p&gt;If you are coming from AngularJS, you may be tempted to use what is commonly referred to as a Template Driven approach. This is approach that relies no “Two-Way” data-binding to update the data in the typescript code to the fields in your template. While this works for a lot of simple apps, you never know when a simple app will turn into a complex app and your Template based approach will quickly become insufficient.&lt;/p&gt;
&lt;p&gt;No, what you want to use is the Model Driven approach. This approach gives you A LOT more control over what we typically are attempting to do in our forms and scales well as the complexity of our forms increases.&lt;/p&gt;
&lt;p&gt;I’ve written a lot more about this in my post on &lt;a href=&#34;/awesome-angular2-architecture-options-and-opinions/&#34;&gt;Angular2 Architecture&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Obviously, there is a lot to learn. If you keep using Angular2 like you’ve been using AngularJS, you are going to run into a lot of difficulties. It pays to learn how a system works prior to using it for a real application.&lt;/p&gt;
&lt;p&gt;What have you learned along the way? Leave a comment.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/what-if-everything-was-immutable/</guid>
            <title>What if Everything Was Immutable?</title>
            <link>http://davembush.github.com/what-if-everything-was-immutable/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>immutable</category>
            <pubDate>Tue, 10 Jan 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;The first time a programmer who was trained in the classical procedural&amp;#x2F;object oriented history is confronted with the concept of making everything immutable, the first question that comes to mind is, “won’t that make my application slow?”  This is because of how most programmers have been trained.  Making everything immutable generally means that we must copy a lot of memory from one place to another.  Moving memory around is generally considered slow.&lt;/p&gt;
&lt;p&gt;And so, most programmers dismiss the whole idea as crazy talk.  But is it really all that crazy?&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/12/image-4.png &#34;What if Everything Was Immutable?&#34;)&lt;figcaption&gt;Photo credit: [Paul Stevenson](//www.flickr.com/photos/pss/354177349/) via [Visualhunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Two-Paths&#34;&gt;&lt;a href=&#34;#Two-Paths&#34; class=&#34;headerlink&#34; title=&#34;Two Paths&#34;&gt;&lt;/a&gt;Two Paths&lt;/h2&gt;&lt;p&gt;So, let’s look at some computer history.  If you’ve been in this industry any length of time, you’ve probably heard the name Turing and you know the Turing machine has something to do with programming.  But you may not know how it impacts your day to day programming life.&lt;/p&gt;
&lt;p&gt;In short, Turing is the guy we can point to as the father of modern computing, complete with the fact that we generally process everything sequentially.  It is this sequential processing that causes us to have instructions working on memory and it has served us well.&lt;/p&gt;
&lt;p&gt;But there is another branch of computer science that was made popular by Alonzo Church that is based on Lambda Calculus.  This branch of computer science is where the bulk of Functional Programming can be traced back to.  In this branch, everything is a function.  Any parameters you pass in cannot have their state changed and the value that is returned is a new value.&lt;/p&gt;
&lt;p&gt;The main benefits to this newer functional style are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If I pass in the same parameters, I’ll always get back the same value.&lt;/li&gt;
&lt;li&gt;State is never mutated accidentally because state is never mutated.&lt;/li&gt;
&lt;li&gt;Functions never have an unpredictable side effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just think of how many bugs you wouldn’t have introduced into your code had this been true when you wrote it.&lt;/p&gt;
&lt;h2 id=&#34;Convergence&#34;&gt;&lt;a href=&#34;#Convergence&#34; class=&#34;headerlink&#34; title=&#34;Convergence&#34;&gt;&lt;/a&gt;Convergence&lt;/h2&gt;&lt;p&gt;Recently, functional programming has become more popular and the two branches of computer science have started to merge.  Taking the best of both worlds and using what makes sense from each.  But, we’ve already had at least one immutable object in most of our object-oriented languages.  The String object.  So, what does String give us that we use nearly every day?&lt;/p&gt;
&lt;h2 id=&#34;Immutable-Strings&#34;&gt;&lt;a href=&#34;#Immutable-Strings&#34; class=&#34;headerlink&#34; title=&#34;Immutable Strings&#34;&gt;&lt;/a&gt;Immutable Strings&lt;/h2&gt;&lt;h3 id=&#34;No-Side-Effects&#34;&gt;&lt;a href=&#34;#No-Side-Effects&#34; class=&#34;headerlink&#34; title=&#34;No Side Effects&#34;&gt;&lt;/a&gt;No Side Effects&lt;/h3&gt;&lt;p&gt;As we’ve already mentioned, that fact that something is immutable means it can’t be changed.  So, when you pass a string as a parameter, even though it is an object, the string won’t change if the function changes the string.  This is good news because the calling function doesn’t have to protect itself against unintended consequences.&lt;/p&gt;
&lt;h3 id=&#34;Memory-Efficiency&#34;&gt;&lt;a href=&#34;#Memory-Efficiency&#34; class=&#34;headerlink&#34; title=&#34;Memory Efficiency&#34;&gt;&lt;/a&gt;Memory Efficiency&lt;/h3&gt;&lt;p&gt;The other thing that happens with immutable object is that every string representation only exist once.  So, we never duplicate memory.&lt;/p&gt;
&lt;p&gt;What do I mean by this? Well, take this example from C#&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; string1 = &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; string2 = &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (string1 == string2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;writeLn&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;is equal&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Testing-Equality&#34;&gt;&lt;a href=&#34;#Testing-Equality&#34; class=&#34;headerlink&#34; title=&#34;Testing Equality&#34;&gt;&lt;/a&gt;Testing Equality&lt;/h3&gt;&lt;p&gt;&lt;code&gt;string1&lt;/code&gt; and &lt;code&gt;string2&lt;/code&gt; point to the same object “abc” not two different instances of “abc”.  This is why we can write &lt;code&gt;string1 == string2&lt;/code&gt;.  Unfortunately, the &amp;#x3D;&amp;#x3D; operator is overloaded so we are still doing string comparison.  &lt;/p&gt;
&lt;p&gt;But if you want efficiency, you can use the &lt;a href=&#34;/net-string-pool-not-just-for-the-compiler/&#34;&gt;Intern()&lt;/a&gt; method and ReferenceEquals() to bypass this overload and use pointer comparison.  This is a good thing because we test for string equality and inequality so often the performance penalty we incur from making strings immutable is more than offset by the performance gains we get testing for equality.&lt;/p&gt;
&lt;h2 id=&#34;Make-Everything-Immutable&#34;&gt;&lt;a href=&#34;#Make-Everything-Immutable&#34; class=&#34;headerlink&#34; title=&#34;Make Everything Immutable&#34;&gt;&lt;/a&gt;Make Everything Immutable&lt;/h2&gt;&lt;p&gt;If you think about the code you typically write, how much of the time would you benefit from every object in your code working in a similar way to strings? Wouldn’t it be a great thing if you knew that when you passed an object into a function, that function was not going to change the object at all?  Can you think of times that might have prevented a bug? Think of the memory optimizations you would benefit from.&lt;/p&gt;
&lt;p&gt;And how much easier would it be to test for equality if all you had to test was a memory pointer?  Not only would it be fast, but it would be reliable and a lot less work to code.&lt;/p&gt;
&lt;h2 id=&#34;Immutability-is-Hard-–-or-is-it&#34;&gt;&lt;a href=&#34;#Immutability-is-Hard-–-or-is-it&#34; class=&#34;headerlink&#34; title=&#34;Immutability is Hard – or is it?&#34;&gt;&lt;/a&gt;Immutability is Hard – or is it?&lt;/h2&gt;&lt;p&gt;So now that you know what the benefits are, you are probably thinking, “Yes, but coding immutability into a language that doesn’t support it natively is a lot of work.  It is so much easier to write code the way I always have, even if it isn’t quite a safe.” Yes, I feel your pain.  But there are libraries for that.  Say you could get all the benefits of immutability with very little programming or performance cost?  Would you be interested? I know I was.  Just having the benefits of immutable data with the performance was benefit enough for me.  But then I was introduced to &lt;a href=&#34;//facebook.github.io/immutable-js/&#34;&gt;immutable.j&lt;/a&gt;s and I realized that I could have all of the benefits with a lot less performance cost than I was expecting because the library uses data structures that allow us to manipulate pointers rather than raw data.  The result is that only pointers to data that have actually changed change.  Nearly everything else stays as it was and adding items to List instead of arrays and Maps ends up being a lot more efficient.&lt;/p&gt;
&lt;h2 id=&#34;Impact-on-Angular2&#34;&gt;&lt;a href=&#34;#Impact-on-Angular2&#34; class=&#34;headerlink&#34; title=&#34;Impact on Angular2&#34;&gt;&lt;/a&gt;Impact on Angular2&lt;/h2&gt;&lt;p&gt;By using immutable object in Angular2 along with libraries like &lt;a href=&#34;//github.com/ngrx/store&#34;&gt;NgRX&amp;#x2F;Store&lt;/a&gt; you can see some major performance increases because the view will be able to determine when it needs to change based on simple object pointer comparison rather than checking entire objects.  For compute-intensive tasks, this is going to be a huge benefit.&lt;/p&gt;
&lt;p&gt;But it is also well worth learning how to use this before you ever need it simply because it will be a new way of thinking about your project that may take some time to get accustomed to.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/awesome-angular2-architecture-options-and-opinions/</guid>
            <title>Awesome Angular2 Architecture Options and Opinions</title>
            <link>http://davembush.github.com/awesome-angular2-architecture-options-and-opinions/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>archietcture</category>
            <pubDate>Tue, 27 Dec 2016 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;On the subject of Angular2 Architecture, the perception is that Angular 2 is a highly-opinionated architecture. But even though there is a &lt;a href=&#34;/angular.io/styleguide&#34;&gt;style guide for Angular 2&lt;/a&gt;, there are a lot of decisions that still need to be made when working on any but the most trivial of applications. And even then, since most applications take on a life of their own, one could make the case that you need to make these decisions for any application you are building regardless of the initial size. Applications grow up. But, that’s another blog post&lt;/p&gt;
&lt;p&gt;I’ve identified, and have formed opinions about 5 areas that Angular 2 leaves open for decisions. Areas that if you don’t spend time considering the choices and making decisions could cost you in the future&lt;/p&gt;
&lt;p&gt;The five areas I’ve identified are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Handling Forms&lt;/li&gt;
&lt;li&gt;Page State Management&lt;/li&gt;
&lt;li&gt;Component State Management&lt;/li&gt;
&lt;li&gt;Data Flow&lt;/li&gt;
&lt;li&gt;Client Side Data&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;![](/uploads/2016/12/image-2.png &#34;Awesome Angular2 Architecture Options and Opinions&#34;) Photo via [africaniscool](//pixabay.com/en/users/africaniscool-216435/) via [Visualhunt.com](//visualhunt.com/photos/business/)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Handling-Forms&#34;&gt;&lt;a href=&#34;#Handling-Forms&#34; class=&#34;headerlink&#34; title=&#34;Handling Forms&#34;&gt;&lt;/a&gt;Handling Forms&lt;/h2&gt;&lt;p&gt;There are, at this point, two ways of dealing with forms in Angular 2. The first looks a lot like Angular 1 in that it is “Template Driven.” That is, everything you would describe about the form goes in the template. Using declarative syntax, the bulk of your form logic is declared in “HTML” like syntax and bound to your TypeScript code in a “code behind” kind of way. In a lot of ways, this will be very familiar to people who have coded ASP.NET or Angular 1&lt;/p&gt;
&lt;p&gt;But, the problem with using this method is that at some point, you won’t be able to do something you need to do using just a declarative syntax. The option is to use a “Model Driven” approach. These leaves the HTML parts in the template with a few tags to wire the template to the TypeScript code it is associated with, but the bulk of the processing is all in the TypeScript file. On the surface, you might think, “but Template Driven is much easier to think about.” But I assure you, using a predominately model driven approach has several advantages that the serious programmer will enjoy.&lt;/p&gt;
&lt;h3 id=&#34;More-control-over-your-forms&#34;&gt;&lt;a href=&#34;#More-control-over-your-forms&#34; class=&#34;headerlink&#34; title=&#34;More control over your forms.&#34;&gt;&lt;/a&gt;More control over your forms.&lt;/h3&gt;&lt;p&gt;The first advantage you will notice is that you’ll have more control over your form. One place you will notice this is with form validation. But, you’ll also notice greater control because you will have direct control on how the data moves in and out of your form instead of the “magic happens here” of data binding that can, with complex forms, become entirely too complex to reason about.&lt;/p&gt;
&lt;h3 id=&#34;Easier-to-test-the-forms&#34;&gt;&lt;a href=&#34;#Easier-to-test-the-forms&#34; class=&#34;headerlink&#34; title=&#34;Easier to test the forms.&#34;&gt;&lt;/a&gt;Easier to test the forms.&lt;/h3&gt;&lt;p&gt;Another huge advantage to using Model Driven forms is that you end up with forms that are MUCH easier to test. You can assume that the HTML is doing what it should and just test the TypeScript code. With a more template driven approach you’ll need to work out how to actually test your HTML. It can be done, and it isn’t really all that hard. But using a model driven approach is easier.&lt;/p&gt;
&lt;h3 id=&#34;Easier-to-reason-about-how-the-code-is-being-processed&#34;&gt;&lt;a href=&#34;#Easier-to-reason-about-how-the-code-is-being-processed&#34; class=&#34;headerlink&#34; title=&#34;Easier to reason about how the code is being processed.&#34;&gt;&lt;/a&gt;Easier to reason about how the code is being processed.&lt;/h3&gt;&lt;p&gt;Related to the two previous points, using Model Driven forms makes your cod much easier to reason about. Once again, that whole “magic happens here” approach of data-binding can get in the way, while using the model driven approach will allow you to be very direct about what gets updated when more directly.&lt;/p&gt;
&lt;h2 id=&#34;Page-and-Component-State-Management&#34;&gt;&lt;a href=&#34;#Page-and-Component-State-Management&#34; class=&#34;headerlink&#34; title=&#34;Page and Component State Management&#34;&gt;&lt;/a&gt;Page and Component State Management&lt;/h2&gt;&lt;p&gt;The temptation is to try to architect an Angular 2 project so that it looks something like how we used to write Angular 1 applications. That is, using an MV* architecture. Where this gets messed up is that the HTML template, the TypeScript and the CSS are really all part of the same class. Once you start thinking of them as one, MV* stops making as much sense&lt;/p&gt;
&lt;p&gt;The pattern I prefer here is one that uses the top-level View as a Controller View. That is, it is the one component that is responsible for being the traffic data cop. All the components under it are responsible for either rendering the state information they have been passed by the Controller View, updating that state information or firing event out when they’ve done something the outside world should know about&lt;/p&gt;
&lt;p&gt;The View Controller, on the other hand, is responsible for getting the data to and from where ever it needs to go&lt;/p&gt;
&lt;p&gt;By doing this, you end up with very testable, modular code and it becomes very clear that all your logic for a page, or sub-page, exist in one very well-defined section of your code. In fact, you can eliminate the need for most dependency injection by following this pattern. Any dependency injection you do need will probably end up in your Controller View.&lt;/p&gt;
&lt;h2 id=&#34;Data-Flow&#34;&gt;&lt;a href=&#34;#Data-Flow&#34; class=&#34;headerlink&#34; title=&#34;Data Flow&#34;&gt;&lt;/a&gt;Data Flow&lt;/h2&gt;&lt;p&gt;So far, the three main methods of data management that have emerged for Angular 2 seem to be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Direct Access&lt;/li&gt;
&lt;li&gt;Flux&amp;#x2F;Redux&lt;/li&gt;
&lt;li&gt;NgRX&amp;#x2F;Store&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Background&#34;&gt;&lt;a href=&#34;#Background&#34; class=&#34;headerlink&#34; title=&#34;Background&#34;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;h4 id=&#34;MVVM&#34;&gt;&lt;a href=&#34;#MVVM&#34; class=&#34;headerlink&#34; title=&#34;MVVM&#34;&gt;&lt;/a&gt;MVVM&lt;/h4&gt;&lt;p&gt;While MVVM was possible in Angular 1, and it works at the View level in Angular 2, the preferred model is what has come to be known as “One way data binding” which sounds odd, and really doesn’t describe what it does&lt;/p&gt;
&lt;p&gt;In short, while all the code you write may act like it is using two-way data-binding, the reality is that the code is only ever flowing in one direction&lt;/p&gt;
&lt;p&gt;The problem with true MVVM data binding is that when it is done correctly, data changes because other data changed&lt;/p&gt;
&lt;p&gt;This makes it very difficult to reason about the data in your application in all but the smallest of applications&lt;/p&gt;
&lt;p&gt;Further, to get this to work correctly, the resulting system is almost always slower than it needs to be. I’ve written before about &lt;a href=&#34;/4-reasons-to-drop-mvvm/&#34;&gt;why I think MVVM is a poor choice for design patterns&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;Direct&#34;&gt;&lt;a href=&#34;#Direct&#34; class=&#34;headerlink&#34; title=&#34;Direct&#34;&gt;&lt;/a&gt;Direct&lt;/h4&gt;&lt;p&gt;It is possible to write an application that kind of looks like old style three layer architectures that some might try to call MVC, but it is a poor man’s implementation at best, and only because Angular 2 implements its own Dependency Injection Container mechanism does the result end up being anything close to loosely coupled&lt;/p&gt;
&lt;p&gt;This implementation generally has the top-level component managing the state of the application, or at least the state of that particular page, and calling out directly to services that retrieve data from the server and manipulate data&lt;/p&gt;
&lt;p&gt;While it works, in larger applications it can be difficult to manage and respond to state changes throughout your application. Imagine if that could happen for “free”.&lt;/p&gt;
&lt;h4 id=&#34;Flux&#34;&gt;&lt;a href=&#34;#Flux&#34; class=&#34;headerlink&#34; title=&#34;Flux&#34;&gt;&lt;/a&gt;Flux&lt;/h4&gt;&lt;p&gt;The React community introduced a new pattern called Flux. There are multiple implementations of Flux, but the one that has become the defacto standard is called Redux. In general, Flux is made up of a series of publish subscribe mechanisms and ends up looking a lot like what the Gang of Four originally defined MVC to be while not actually being MVC.&lt;/p&gt;
&lt;p&gt;In very simple terms, the View fires an event to a “Dispatcher” which is a singleton. Each repository, or data store, or model (just depends on what you want to call it) registers a listener with the “Dispatcher” that lets the dispatcher know that it wants to know whenever something significant happens. These repositories are also singletons.&lt;/p&gt;
&lt;p&gt;When the Dispatcher receives a notification from a View, it notifies all the listeners in turn. The listeners look at the message they receive from the dispatcher to see if it is something they care about. If it is, they process the message accordingly.&lt;/p&gt;
&lt;p&gt;Once they are done, they fire an event to each Controller View that has registered a listener with them. The Controller View then updates the view based on the information it was passed in the event. I don’t want this to get too far down the road of “How” but to make the above paragraph just a bit clearer…&lt;/p&gt;
&lt;p&gt;There is a top-level View item that does no rendering. It is only responsible for responding to event notifications and passing the data down into the child views. You may hear this referred to as a View Controller, but it is more accurately a Controller View.&lt;/p&gt;
&lt;p&gt;Hopefully, you can see how this solves the problem up needing to force an update on a View because some other View changed the state of something. Because everyone who cares about the state is listening for a notification that something changes, the screen update “just works” and is much more reliable than a more MVVM style of updating the view and data.&lt;/p&gt;
&lt;h4 id=&#34;NgRX-x2F-Store&#34;&gt;&lt;a href=&#34;#NgRX-x2F-Store&#34; class=&#34;headerlink&#34; title=&#34;NgRX&amp;#x2F;Store&#34;&gt;&lt;/a&gt;NgRX&amp;#x2F;Store&lt;/h4&gt;&lt;p&gt;Reactive Extensions are available for multiple platforms, including JavaScript. You can read more about them at &lt;a href=&#34;//reactivex.io/&#34;&gt;http://reactivex.io/&lt;/a&gt; and I’ve written about &lt;a href=&#34;/reasons-to-use-rxjs-today/&#34;&gt;the reasons you want to use them&lt;/a&gt; before. But for purposes of this article, one of the problems that Reactive programming solves is cleanly dealing with the asynchronous nature of JavaScript&lt;/p&gt;
&lt;p&gt;Nowhere is this more obvious than with Ajax request.&lt;/p&gt;
&lt;p&gt;If you’ve ever needed to deal with having to wait for multiple Ajax request to complete before you do something meaningful with the data, you are going to love Reactive programming.&lt;/p&gt;
&lt;p&gt;Another thing that Reactive programming gives you is it makes everything a “stream”.&lt;/p&gt;
&lt;p&gt;In simple terms imagine working with an array that never ends and being able to respond appropriately to each element that come through that stream of arrays and you’ll have a good conceptual idea of what it means that everything is a stream. This is how Reactive programming deals with asynchronous calls and events. Add to this the concept that streams can be combined and you’ll start to understand why this cleans up the asynchronous nature of JavaScript.&lt;/p&gt;
&lt;p&gt;The result is that we can write code that fills the stream and other code that says, “when a particular item comes in on the stream, let me know about it.” Basically, an embellished publish&amp;#x2F;subscribe design pattern.&lt;/p&gt;
&lt;p&gt;From the description above, you should be able to see that Reactive programming can be used to implement Flux.&lt;/p&gt;
&lt;p&gt;This is exactly what NgRx&amp;#x2F;Store does. It allows us to concentrate on writing Reducers while it focuses on managing the dispatcher, event handling, and the various repositories, or stores, our application might need.&lt;/p&gt;
&lt;p&gt;As I’ve used NgRX&amp;#x2F;Store in my own applications, I’ve found that it further reduces the need for dependency injection and increases the testability of my code. The tradeoff is that there is a learning curve. But the time learning this new design pattern is well worth the effort.&lt;/p&gt;
&lt;h2 id=&#34;Client-Side-Data&#34;&gt;&lt;a href=&#34;#Client-Side-Data&#34; class=&#34;headerlink&#34; title=&#34;Client Side Data&#34;&gt;&lt;/a&gt;Client Side Data&lt;/h2&gt;&lt;p&gt;At some point, you are going to need to manage the data on the client side. There are several issue you might want to consider. But at the most fundamental layer, you will end up with data on the client side that looks like a relational data in a database. The only difference is that your data will be primarily JSON data. Eventually, you’ll want to join that data or filter it. How will you do that? One product you might consider is &lt;a href=&#34;//www.getbreezenow.com/&#34;&gt;Breeze&lt;/a&gt;. It does a lot of stuff that makes your client side data look more like a database. It is worth a look&lt;/p&gt;
&lt;p&gt;If you end up using NgRX&amp;#x2F;Store and RxJS, you may find that does everything you need. So that is another option. The advantage to using this method is you are no longer constrained by trying to make everything look like a relational database table even when it isn’t&lt;/p&gt;
&lt;p&gt;The other option, of course, is to use both for what they are good at.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Angular 2 brings a lot of new concepts. While it might be tempting to use coding patterns that seem more comfortable, I believe that the path that Angular 2 has chosen is the future of JavaScript specifically and the programming world in general.&lt;/p&gt;
&lt;p&gt;Just about everything that is new falls into the general category of “Functional Programming” and much like the switch from procedural programming to object oriented programming, there are going to be people who are not able to wrap their heads around the concepts. How many guys ended up using C++ syntax to write C code? However, the productivity gains once we make the jump to this new way of thinking about our code will be well worth both the learning curve and the possible loss of some older programmers who can’t or won’t be retrained.&lt;/p&gt;
&lt;p&gt;There is also a danger of not being able to retain good programmers because we are still stuck using design patterns that were popular in the past but have been superseded by ways the developer community at large considers “better.”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/dissecting-angular-2-modules/</guid>
            <title>Dissecting Angular 2 Modules</title>
            <link>http://davembush.github.com/dissecting-angular-2-modules/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>modules</category>
            <pubDate>Tue, 20 Dec 2016 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;In the new world of Angular 2, and even in the world of Angular.js, you might feel like the concept of a module is the most difficult to wrap your head around.&lt;/p&gt;
&lt;p&gt;This is especially if you’ve only ever written client side JavaScript code. Once you’ve learned why you need a module, the temptation is to use one module for all your code. I am guilty of doing that myself when I first started. But, many times using one module for your entire application is the wrong thing to do because it reduces the ability to reuse your code in other modules. Once you understand why modules exist, you’ll begin to reason about how to use modules appropriately.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/12/image-1.png &#34;Dissecting Angular 2 Modules&#34;)&lt;figcaption&gt;Photo credit: [Sappymoosetree](//www.flickr.com/photos/bahkubean/416801559/) via [Visual hunt](//visualhunt.com) / [CC BY-ND](//creativecommons.org/licenses/by-nd/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Why-Do-Modules-Exist&#34;&gt;&lt;a href=&#34;#Why-Do-Modules-Exist&#34; class=&#34;headerlink&#34; title=&#34;Why Do Modules Exist?&#34;&gt;&lt;/a&gt;Why Do Modules Exist?&lt;/h2&gt;&lt;p&gt;When the Angular 2 project started, modules did not exist, even though they had existed in Angular.js. But as the RC process continued, it became obvious that modules were going to be necessary. We could have written our code without modules, but the amount of code we would need to repeat to get the same functionality would be dramatically greater.&lt;/p&gt;
&lt;p&gt;It also often becomes more complex and harder to reason about.&lt;/p&gt;
&lt;p&gt;So, what exactly do modules get us? If you’ve worked in languages in the past that have the concept of a namespace, it might help you to think of a module as a substitute for namespaces. They allow us to group similar functionality together, and specify what functionality that belongs to the module can be accessed by the outside world. For example, I recently wrote a component that all the applications in our organization will be starting out with. It is composed of multiple components, but I only want the top most component exposed to the developers who will be using it.&lt;/p&gt;
&lt;p&gt;So, modules allow us to both group code together and encapsulate code so that code that might otherwise be publicly available becomes private to the outside world.&lt;/p&gt;
&lt;h2 id=&#34;Dissecting-Modules&#34;&gt;&lt;a href=&#34;#Dissecting-Modules&#34; class=&#34;headerlink&#34; title=&#34;Dissecting Modules&#34;&gt;&lt;/a&gt;Dissecting Modules&lt;/h2&gt;&lt;p&gt;You may remember that in the &lt;a href=&#34;//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-4&#34;&gt;application we’ve been working on&lt;/a&gt; we’ve already created a module. In fact, when you create any application using the CLI, there will always be this top-level module.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@NgModule(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  declarations: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AppComponent&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  imports: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BrowserModule,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FormsModule,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HttpModule,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    GettingStartedWithAngular2RoutingModule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  providers: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  bootstrap: [AppComponent]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AppModule&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The declarations section simply specifies the components that this module owns. In the case of our app so far, the only component it owns is the top-level AppComponent.&lt;/p&gt;
&lt;p&gt;The imports section loads modules this module is going to need available in the components it owns. Many times, the components we need access to are only needed in our templates. Prior to using modules, we would need to include our components in our TS files just so the templates could access them. By loading them in the module, we can load modules once even though we may have multiple components that are part of the module that may need them.&lt;/p&gt;
&lt;p&gt;Since our module is not using any injectables, the providers section is empty. But that is what the providers section is for. Any class that we will need to inject in the constructor of other code would be listed in this providers section.&lt;/p&gt;
&lt;p&gt;Finally, the bootstrap section has the one component this module should load. This only shows up in the top-level module. While it is needed, I’ve yet to figure out why. We’ve already loaded the module, and therefore the component and the tag for the top-level component is in our index.html file, so I can’t see the point of specifying it here yet again.&lt;/p&gt;
&lt;p&gt;You may wonder, “How does this AppModules get loaded?” Go back to the root of your app directory and look for the main.ts file. You’ll see that we loaded it in there.&lt;/p&gt;
&lt;p&gt;platformBrowserDynamic().bootstrapModule(AppModule);&lt;/p&gt;
&lt;p&gt;You might wonder why this code is not included in the application module. This is because you might not always want to use platformBrowserDynamic(). If you are using Web Workers to run your code or using Ahead of Time compile, you would use two other methods of bootstrapping the module. I’ve only mentioned three here, but there are others.&lt;/p&gt;
&lt;p&gt;The next property you are likely to see in a module declaration is the exports section:&lt;/p&gt;
&lt;p&gt;exports:  [Edit]&lt;/p&gt;
&lt;p&gt;This tells the module that has imported this module that it can use the Edit component. We didn’t need this in the app module because the app module isn’t being used by another module. It is the top most module and really can’t be used by any other module by definition.&lt;/p&gt;
&lt;h2 id=&#34;Routing-and-Modules&#34;&gt;&lt;a href=&#34;#Routing-and-Modules&#34; class=&#34;headerlink&#34; title=&#34;Routing and Modules&#34;&gt;&lt;/a&gt;Routing and Modules&lt;/h2&gt;&lt;p&gt;Several weeks ago we took a look at &lt;a href=&#34;/angular-2-lazy-loading/&#34;&gt;implementing Lazy Loading by modifying our routing module&lt;/a&gt;. What is unique about this situation is that every time you lazy load a module, it becomes the top most module, so once again, there is no real need to export it.&lt;/p&gt;
&lt;h2 id=&#34;When-Should-Modules-Be-Used&#34;&gt;&lt;a href=&#34;#When-Should-Modules-Be-Used&#34; class=&#34;headerlink&#34; title=&#34;When Should Modules Be Used?&#34;&gt;&lt;/a&gt;When Should Modules Be Used?&lt;/h2&gt;&lt;p&gt;As I said when I started, the temptation is to just put all our import statements that our application is going to need in our app module. But that seems like an extremely lazy way of writing code. And when you go to write lazy loaded modules, that’s not going to work so well for you. So, there are two ways you can approach this.&lt;/p&gt;
&lt;p&gt;First, you can just create a module for every component you write. It is probably over kill, but it would be hard to go too far wrong here. Given the choice between too many modules and not enough, I’d error on the side of too many. At least it gives you the flexibility do make necessary changes in the future.&lt;/p&gt;
&lt;p&gt;But the more reasonable approach would be one module per feature and a module for common stuff. For example, if you are writing a component library, you would probably be safe writing a module for all the components in your library so you only have to import the library module and all your component would automatically become available to you. You’ll want to at least want to have one module per route so that you can lazy load the routes if you decide that is necessary.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-2-lazy-loading/</guid>
            <title>Angular 2 Lazy Loading</title>
            <link>http://davembush.github.com/angular-2-lazy-loading/</link>
            <category>angular</category>
            <category>lazy loading</category>
            <pubDate>Tue, 06 Dec 2016 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Last week when we took a look at &lt;a href=&#34;/adding-client-side-routing-to-angular-2/&#34;&gt;Client side Routing&lt;/a&gt;, I mentioned that one of the reasons you’d want to implement a component in its own module is so that we could lazy load the component and its dependencies&lt;/p&gt;
&lt;p&gt;This week, we want to dig into how to implement lazy loading in your Angular 2 application&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/11/image-5.png &#34;Angular 2 Lazy Loading&#34;) Photo via [jordan](//pixabay.com/en/users/jordan3600-400129/) via [Visualhunt](//visualhunt.com/)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-Is-Lazy-Loading&#34;&gt;&lt;a href=&#34;#What-Is-Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;What Is Lazy Loading?&#34;&gt;&lt;/a&gt;What Is Lazy Loading?&lt;/h2&gt;&lt;p&gt;Imagine that you’ve written an application that is divided into four main sections. The people using the site may only use one or two sections of the site at a time, or at all. Is it fair to make them download the entire site? Or maybe you’ve written a monster site. Wouldn’t it make more sense to download only what you need as you need it? The perceived performance of a site written like this far exceeds the performance of a site that requires you to download everything at once&lt;/p&gt;
&lt;p&gt;And so, Lazy Loading was developed as a way of solving these issues and others. The idea is, rather than downloading everything, download only what is needed when it is needed.&lt;/p&gt;
&lt;h2 id=&#34;The-Code&#34;&gt;&lt;a href=&#34;#The-Code&#34; class=&#34;headerlink&#34; title=&#34;The Code&#34;&gt;&lt;/a&gt;The Code&lt;/h2&gt;&lt;p&gt;Remember that last week we implemented a View module and an Edit module. We called them from our router by importing the modules and telling the router to load the components when a route was specified&lt;/p&gt;
&lt;p&gt;Because we are no longer loading the modules as part of our main application, we are going to go into the &lt;code&gt;app-routing.module.ts&lt;/code&gt; file and remove all of the references to the components and the module. Instead, we are going to load the module using the &lt;code&gt;loadChildren&lt;/code&gt; property in our route array.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import &amp;#123; NgModule &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;#123; Routes, RouterModule &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/router&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// import &amp;#123; ViewComponent &amp;#125; from &amp;#x27;./view/view.component&amp;#x27;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// import &amp;#123;ViewModule&amp;#125; from &amp;quot;./view/view.module&amp;quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// import &amp;#123;EditModule&amp;#125; from &amp;quot;./edit/edit.module&amp;quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// import &amp;#123;EditComponent&amp;#125; from &amp;quot;./edit/edit.component&amp;quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; routes: Routes = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; path: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    loadChildren: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./view/view.module#ViewModule&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//component: ViewComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; path: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Add&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    loadChildren: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./edit/edit.module#EditModule&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//component: EditComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; path: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Edit/:id&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    loadChildren: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./edit/edit.module#EditModule&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//component: EditComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@NgModule(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  imports: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    RouterModule.forRoot(routes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//ViewModule,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//EditModule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  exports: [RouterModule],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  providers: []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GettingStartedWithAngular2RoutingModule&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice the format of the loadChildren string is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The path to the module (without the file extension)&lt;/li&gt;
&lt;li&gt;hash&lt;/li&gt;
&lt;li&gt;The class in the component that is exported&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But, there is nothing in the code that tells us what component is supposed to load. This is because the job of deciding what component to load has now been delegated to the module&lt;/p&gt;
&lt;p&gt;This is the part that remained a mystery to me for quite a while. I would look at the code demos but never saw the next part. Maybe this will save you some of that trouble&lt;/p&gt;
&lt;p&gt;In the view module, add this line to the imports array:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; RouterModule.forChild([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;path: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;, component: ViewComponent&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that we are using forChild here instead of forRoot but otherwise this looks the same as what we originally had for the View component prior to implementing lazy loading&lt;/p&gt;
&lt;p&gt;We can implement a similar line in the EditModule, except the component will be EditComponent.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;RouterModule.forChild([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;path: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;, component: EditComponent&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Under-the-Hood&#34;&gt;&lt;a href=&#34;#Under-the-Hood&#34; class=&#34;headerlink&#34; title=&#34;Under the Hood&#34;&gt;&lt;/a&gt;Under the Hood&lt;/h2&gt;&lt;p&gt;Build the system using &lt;code&gt;ng build&lt;/code&gt; because I want to show you what is happening under the hood&lt;/p&gt;
&lt;p&gt;Once you’ve built the system, look in the &lt;code&gt;dist&lt;/code&gt; directory. You’ll see a &lt;code&gt;0.chunk.js&lt;/code&gt; and a &lt;code&gt;1.chunk.js&lt;/code&gt; file. These files hold the module and dependencies that we’ve lazy loaded&lt;/p&gt;
&lt;p&gt;If you load the application with the developer tools loaded and look at the network tab, you’ll see that one chunk is loaded immediately, for the view. The other is loaded when you navigate to the add or edit path&lt;/p&gt;
&lt;p&gt;The code so far can be found at &lt;a href=&#34;//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-4&#34; title=&#34;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-4&#34;&gt;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-4&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/adding-client-side-routing-to-angular-2/</guid>
            <title>Adding Client Side Routing to Angular 2</title>
            <link>http://davembush.github.com/adding-client-side-routing-to-angular-2/</link>
            <category>angular</category>
            <category>routing</category>
            <pubDate>Tue, 29 Nov 2016 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last several Angular 2 posts, we’ve been building up our application bit by bit and examining the various features of Angular 2 along the way using the Angular CLI where that makes sense and modifying it along the way. So far, routing is an area that the Angular CLI does not yet support and so, when you want to use routing in your Angular 2 application, you’ll need to wire most of it in by hand. Now, the routing engine has changed several times during the development of Angular 2. And I know you’re wondering which version of the router this article is going to be talking about. So, to be clear, this article was written using the Angular CLI version 1.0.0-beta.21 and Router version 3.2.1.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/11/image-4.png &#34;Adding Client Side Routing to Angular 2&#34;)&lt;figcaption&gt;Photo credit: [xomiele](//www.flickr.com/photos/xomiele/6759264721/) via [Visualhunt](//visualhunt.com/photos/snow/) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-is-Routing&#34;&gt;&lt;a href=&#34;#What-is-Routing&#34; class=&#34;headerlink&#34; title=&#34;What is Routing?&#34;&gt;&lt;/a&gt;What is Routing?&lt;/h2&gt;&lt;p&gt;If you are new to developing Single Page Application (SPAs) you might wonder what Routing is. You might be surprised to find out that you already know what routing is, but you’ve never actually called it by this name.&lt;/p&gt;
&lt;p&gt;For example, using MVC in the ASP.NET world, you used routing whenever you specified what controller you expected your code to hit when you specified a particular URL. You’ll remember that we set our code up so that when we specified that URL, code in a controller would get hit. We also had the option of specifying parameters that we wanted to have passed into our controller methods.&lt;/p&gt;
&lt;p&gt;In a SPA, routing does essentially the same thing. The only difference is that we never have to call the server. This makes all our “Pages” virtual. Instead of requiring that our visitors always start at our home page and navigate into the rest of our site; instead of creating a separate page on the server for each page in our site; we can load all the site up front and the user can navigate to exactly the page they want to be at. They can even link directly to that page and the client side will handle displaying the page appropriately.&lt;/p&gt;
&lt;h2 id=&#34;There’s-a-Catch&#34;&gt;&lt;a href=&#34;#There’s-a-Catch&#34; class=&#34;headerlink&#34; title=&#34;There’s a Catch&#34;&gt;&lt;/a&gt;There’s a Catch&lt;/h2&gt;&lt;p&gt;One of the problems you’ll quickly discover is that for this to work, you’ll need to set your server up so that it doesn’t try to handle the routing as well.&lt;/p&gt;
&lt;p&gt;You see, if you navigate to the home page of your web site and then click around into the sub-pages, everything is going to appear to work correctly. But once you try to navigate directly to an inner page, you are going to become extremely frustrated. The problem lies in order your code gets executed.&lt;/p&gt;
&lt;p&gt;When you request a page directly, what happens is that the server will look for that page on the server. If it can’t find it, it will return, appropriately, a 404 error. The problem is that when we ask for a page that only exist because the client side has said it does, when the server goes to look for it, it will return the 404 error. It isn’t there.&lt;/p&gt;
&lt;p&gt;For the moment, I’m ignoring the fact that Angular 2 supplies a feature called Server Side Rendering, which can also take care of this problem. Given regular, out of the box, Angular 2 code, you’ll want to make sure you server knows what to do when the files don’t exist. What I normally do is that I create a rule on my server that says, “if I’m looking for a path that doesn’t have an extension, just return the index.html page you would have returned if I had asked for the home page.” In Express on Node.JS, the code for this looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// This comes last.  right before we start listening&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.&lt;span class=&#34;title function_&#34;&gt;use&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;req,res&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this sends back the index.html file when&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// it looks like they are looking for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// a client side route&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// assuming a real file will have an extension&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// and a route will not.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(req.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;indexOf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt;) &amp;gt; -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        res.&lt;span class=&#34;title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;404&lt;/span&gt;)        &lt;span class=&#34;comment&#34;&gt;// HTTP status 404: Not Found&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .&lt;span class=&#34;title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Not found&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        res.&lt;span class=&#34;title function_&#34;&gt;sendFile&lt;/span&gt;(__dirname + &lt;span class=&#34;string&#34;&gt;&amp;#x27;/www/index.html&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you are using IIS and ASP.NET, you might find this article I wrote about using &lt;a href=&#34;/asp-net-angular-js-html5mode/&#34;&gt;Angular, Routing, and ASP.NET&lt;/a&gt; useful.&lt;/p&gt;
&lt;h2 id=&#34;Enabling-Routing&#34;&gt;&lt;a href=&#34;#Enabling-Routing&#34; class=&#34;headerlink&#34; title=&#34;Enabling Routing&#34;&gt;&lt;/a&gt;Enabling Routing&lt;/h2&gt;&lt;p&gt;Since the Angular CLI has included the packages you’ll need to enable routing, there is nothing to install. We just need to write some code.&lt;/p&gt;
&lt;p&gt;Typically routes get enabled at the top of your application after all the common code has been implemented. So, in the location where you want the routing to take effect, add the following tag:&lt;/p&gt;
&lt;p&gt;&lt;router-outlet&gt;&lt;/router-outlet&gt;&lt;/p&gt;
&lt;p&gt;I’ve added this to my &lt;code&gt;app.component.html&lt;/code&gt; file in the sample app I’ve been working on. Replacing the &lt;code&gt;&amp;lt;h1&amp;gt;&amp;#123; &amp;#123;title&amp;#125;&amp;#125;&amp;lt;/h1&amp;gt;&lt;/code&gt; code that we had from the previous weeks.&lt;/p&gt;
&lt;p&gt;If you were to run the code now all that you would see is that the title no longer shows up. We need to add the route code next. You will notice that an &lt;code&gt;app-routing.module.ts&lt;/code&gt; file already exist. Open this file. You will see that the bulk of the code we are going to need is already there.&lt;/p&gt;
&lt;p&gt;You should see a line that looks like:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We are going to add a route to this array:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ViewComponent&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What this is saying is that whenever we ask for the home page, load the “ViewComponent” component.&lt;/p&gt;
&lt;p&gt;But wait, we haven’t added any components yet.&lt;/p&gt;
&lt;p&gt;While we COULD just add a component, what I prefer to do is to add a new module. This is because I dislike the idea of making all the components in my code part of one huge modules. It makes it extremely difficult to refactor my code. I also want the ability to implement lazy loading in the future and I will need the component I am routing to, to be part of its own component in order for that to work.&lt;/p&gt;
&lt;p&gt;To add a View component to our code run the following line from the terminal&amp;#x2F;command line &lt;code&gt;ng g module view&lt;/code&gt; This will create a new ViewModule module with a new ViewComponent component located in the view directory.&lt;/p&gt;
&lt;p&gt;The rest of what we need to do is to just wire this all into the existing application.&lt;/p&gt;
&lt;p&gt;Go back to &lt;code&gt;app-routing.module.ts&lt;/code&gt; and add an import statement to load in &lt;code&gt;ViewComponent&lt;/code&gt; and the &lt;code&gt;ViewModule&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;ViewComponent&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./view/view.component&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;ViewModule&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./view/view.module&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We also need to add &lt;code&gt;ViewModule&lt;/code&gt; to the imports array.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;(routes),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;ViewModule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;exports&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next, we need to register the routing module with the application. So, load up the app.module.ts file and add an import statement to import the app-routing module:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; _applicationName_RoutingModule&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./app-routing.module&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And add &lt;code&gt;_applicationName_RoutingModule&lt;/code&gt; to the imports array:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;declarations&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;BrowserModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;FormsModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;HttpModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _applicationName_RoutingModule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;bootstrap&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Adding additional routes is more of the same. Let’s add another module for editing.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ng g module edit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add two new paths. One so we can add a new item and one so we can edit an existing item.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ViewComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Add&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;EditComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Edit/:id&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;EditComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that for the Edit command I added :id at the end. The :id specifies that this location is where the parameter will be. In this case, the ID of the record that we want to edit.&lt;/p&gt;
&lt;p&gt;We will flesh these out later and I’ll leave adding import statements and adding modules to the import arrays to you. It is essentially copy&amp;#x2F;paste&amp;#x2F;modify from the previous code. When you have the code working, you should be able to navigate to &amp;#x2F;Add or &amp;#x2F;Edit&amp;#x2F;id and see the new page.&lt;/p&gt;
&lt;p&gt;If you get stuck, the code so far can be found here: &lt;a href=&#34;//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step3&#34; title=&#34;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step3&#34;&gt;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step3&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/unit-testing-an-angular-2-cli-project/</guid>
            <title>Unit Testing an Angular 2 CLI Project</title>
            <link>http://davembush.github.com/unit-testing-an-angular-2-cli-project/</link>
            <category>unit test</category>
            <category>angular</category>
            <category>javascript</category>
            <category>typescript</category>
            <pubDate>Tue, 22 Nov 2016 19:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;This week we want to continue our series about Angular 2 by looking at the Unit Testing capabilities that Angular 2 provides for us. What we want to cover today is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tweaking Karma to avoid using the Browser Window&lt;/li&gt;
&lt;li&gt;Code Coverage&lt;/li&gt;
&lt;li&gt;Tips to testing components&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article was written using Angular CLI version 1.0.0-beta.20-4 (Tip, if you are upgrading on windows, &lt;code&gt;rm –rf node_modules dist temp&lt;/code&gt; just means to delete the three directories. You can do that part manually, or install bash for Windows and run the command in bash.)&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/11/image-3.png &#34;Unit Testing an Angular 2 CLI Project&#34;)&lt;figcaption&gt;Photo credit: [jimmiehomeschoolmom](//www.flickr.com/photos/jimmiehomeschoolmom/4427775569/) via [VisualHunt.com](//visualhunt.com) / [CC BY-NC-SA](//creativecommons.org/licenses/by-nc-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Tweaking-Karma&#34;&gt;&lt;a href=&#34;#Tweaking-Karma&#34; class=&#34;headerlink&#34; title=&#34;Tweaking Karma&#34;&gt;&lt;/a&gt;Tweaking Karma&lt;/h2&gt;&lt;p&gt;Open up the project we’ve been working on.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/getting-started-angular-2/&#34;&gt;Getting Started With Angular 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@davembush/adding-css-and-javascript-to-an-angular-cli-project-2b843a8283f3&#34;&gt;Adding CSS and JavaScript to an Angular CLI Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Drop into command line mode and run &lt;code&gt;ng test&lt;/code&gt; The first thing you will notice is that this brings up the Chrome browser to run your test. I don’t know about you, but I really dislike having a browser window up. I have enough windows running on my screen as it is. This is the first thing we need to fix. To do this we are going to install PhantomJS.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save-dev phantomjs-prebuilt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then, we need to tell karma to use PhantomJS. This is a two step process. First, we install the karma phantomjs runner &lt;code&gt;npm install --save-dev karma-phantomjs-launcher&lt;/code&gt; Next, we modify the karma.conf.js file Change &lt;code&gt;require(&amp;#39;karma-chrome-launcher&amp;#39;),&lt;/code&gt; and &lt;code&gt;browsers: [&amp;#39;Chrome&amp;#39;],&lt;/code&gt; To &lt;code&gt;require(&amp;#39;karma-phantomjs-launcher&amp;#39;),&lt;/code&gt; and &lt;code&gt;browsers: [&amp;#39;PhantomJS&amp;#39;],&lt;/code&gt; Last, since we are not using the browser, we will need a better reporting mechanism.&lt;/p&gt;
&lt;p&gt;To do this we will install spec reporter.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save-dev karma-spec-reporter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and we replace this line in karma.conf.js&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;reporters&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; config.angularCli &amp;amp;&amp;amp; config.angularCli.codeCoverage&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          ? &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&amp;#x27;progress&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &amp;#x27;karma-remap-istanbul&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&amp;#x27;progress&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;reporters&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; config.angularCli &amp;amp;&amp;amp; config.angularCli.codeCoverage&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          ? &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&amp;#x27;spec&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &amp;#x27;karma-remap-istanbul&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&amp;#x27;spec&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And we add a require line at the top of the file with the other requires&lt;/p&gt;
&lt;p&gt;&lt;code&gt;require(&amp;#39;karma-spec-reporter&amp;#39;),&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, when we run &lt;code&gt;ng test&lt;/code&gt; We get a nice text report in our terminal windows instead of the browser popping up.&lt;/p&gt;
&lt;h2 id=&#34;Code-Coverage&#34;&gt;&lt;a href=&#34;#Code-Coverage&#34; class=&#34;headerlink&#34; title=&#34;Code Coverage&#34;&gt;&lt;/a&gt;Code Coverage&lt;/h2&gt;&lt;p&gt;To get a code coverage report for our test use the command ng test –cc The code coverage files will end up in a directory named ‘coverage’ hanging off the root of your project. You can view the coverage&amp;#x2F;index.html file to see how well your files are covered.&lt;/p&gt;
&lt;h2 id=&#34;Testing-Components&#34;&gt;&lt;a href=&#34;#Testing-Components&#34; class=&#34;headerlink&#34; title=&#34;Testing Components&#34;&gt;&lt;/a&gt;Testing Components&lt;/h2&gt;&lt;p&gt;For the purposes of this article, I’m going to assume you have some familiarity with creating Jasmine tests. If you don’t the documentation for Jasmine is pretty easy to understand.&lt;/p&gt;
&lt;p&gt;But what I do want to cover here is how we test components.&lt;/p&gt;
&lt;p&gt;If you open up the &lt;code&gt;app.component.spec.ts&lt;/code&gt; file, you’ll notice a &lt;code&gt;TestBed&lt;/code&gt; class that gets used quite a bit. Since your test isn’t going to test modules because they only package our other code together, you need some way of faking that out so you can test the components. To do that, you use&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;TestBed&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;configureTestingModule&lt;/span&gt;( &amp;#123; &lt;span class=&#34;attr&#34;&gt;declarations&lt;/span&gt;: [ &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt; ] &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Which just sets up the declarations you need to reference the component you need to test. You can put anything in this block that you would normally put in your module definition.&lt;/p&gt;
&lt;p&gt;Another &lt;code&gt;TestBed&lt;/code&gt; method you’ll see is&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;TestBed&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createComponent&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;which you probably have guessed, creates an instance of the module so you can test it. The object it creates has a &lt;code&gt;debugElement&lt;/code&gt; property hanging off of it. There are two properties that hang off this object that you’ll make use of a lot. &lt;code&gt;componentInstance&lt;/code&gt; is the actual instance of the component that you created. Any properties and methods that your component has will be available off of &lt;code&gt;componentInstance&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The other object that will be available is &lt;code&gt;nativeElement&lt;/code&gt;. This is the DOM element that the component renders to and you can use &lt;code&gt;querySelector(cssSelectorGoesHere)&lt;/code&gt; to select the first element matches the selector or &lt;code&gt;querySelectorAll(cssSelectorGoesHere)&lt;/code&gt; to retrieve an array of elements that match.&lt;/p&gt;
&lt;p&gt;Of course, a test isn’t any good if you don’t make changes to the component and test for them. And for that we have &lt;code&gt;detectChanges()&lt;/code&gt;. You’ll see that being used in the third test. You’ll want to use that before you &lt;code&gt;expect()&lt;/code&gt; anything.&lt;/p&gt;
&lt;h2 id=&#34;Ready-Set-…&#34;&gt;&lt;a href=&#34;#Ready-Set-…&#34; class=&#34;headerlink&#34; title=&#34;Ready, Set, …&#34;&gt;&lt;/a&gt;Ready, Set, …&lt;/h2&gt;&lt;p&gt;Now that we have some way of testing our code, we can actually begin to write so. Don’t forget to subscribe to the email I sent out so you don’t miss the next article in this series.&lt;/p&gt;
&lt;p&gt;Code so far is located at &lt;a href=&#34;//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step2&#34;&gt;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step2&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/getting-started-with-angular-2/</guid>
            <title>Getting Started with Angular 2</title>
            <link>http://davembush.github.com/getting-started-with-angular-2/</link>
            <category>angular</category>
            <category>javascript</category>
            <pubDate>Tue, 25 Oct 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Angular 2 is finally released. But the biggest problem with learning Angular 2 is that it is a “Choose your own adventure” kind of framework. And while React has a similar problem, I think Angular has out done them. This means that you can learn bits and pieces of Angular 2, but it will be a while before you get a cohesive understanding of what choices you need to make, which choices are the right choices, and why all of this matters.&lt;/p&gt;
&lt;p&gt;And all of this is even more difficult if you are a relatively new programmer. I’m talking those of you who have less than 5 years of experience and even some of you who have less than 10 years of experience.&lt;/p&gt;
&lt;p&gt;So, what I thought I’d do to address this very real problem is to assemble a very opinionated Angular 2 tutorial. Over the next several weeks I plan to show you how to create a simple CRUD application using Angular 2 in a way that will scale up to larger projects. While I may mention some of the other options along the way, what you’ll end up with is the “right way.” OK. To be fair, most of what I consider “right” is opinion. Some very smart people disagree with me. But, some other very smart people agree with me too.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/10/image-2.png &#34;Getting Started with Angular 2&#34;)&lt;figcaption&gt;Photo credit: [mikecogh](//www.flickr.com/photos/mikecogh/11300349426/) via [VisualHunt](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;  Here’s where I think we are going with this.

&lt;ul&gt;
&lt;li&gt;Getting the project set up.&lt;/li&gt;
&lt;li&gt;Building, Running, Testing&lt;/li&gt;
&lt;li&gt;Adding in external packages&lt;/li&gt;
&lt;li&gt;Client Side Routing&lt;/li&gt;
&lt;li&gt;Building Components&lt;/li&gt;
&lt;li&gt;Using Reactive Programming&lt;/li&gt;
&lt;li&gt;Managing Application State&lt;/li&gt;
&lt;li&gt;Accessing the Server&lt;/li&gt;
&lt;li&gt;Using Web Workers for more Responsive Applications&lt;/li&gt;
&lt;li&gt;Ahead of Time (AoT) Compiling&lt;/li&gt;
&lt;li&gt;Server Side Rendering&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article, let’s focus on just getting a basic application up and running.&lt;/p&gt;
&lt;h2 id=&#34;Prerequisites&#34;&gt;&lt;a href=&#34;#Prerequisites&#34; class=&#34;headerlink&#34; title=&#34;Prerequisites&#34;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;If you haven’t installed Node yet, I suggest you do that now. &lt;a href=&#34;/you-can-start-using-node-today/&#34;&gt;Here’s an article on how to install Node if you are new to Node&lt;/a&gt;. Even if you think you know how to install node (“How hard can that be?”) read the article. You might learn something. I would recommend installing Node 6.x as of this writing or whatever the latest version is when you are reading this.&lt;/p&gt;
&lt;p&gt;You’ll also want to get an editor that has good support for TypeScript, HTML, and CSS. I’ve heard a lot of good things about VS Code, but the editor I use is WebStorm. If you are a .NET programmer, Visual Studio will get you kind of close. If you can’t or won’t switch to WebStorm for your JavaScript development, at least get the ReSharper plugin for Visual Studio. You’ll also need plugins to enable Node and TypeScript development from within Visual Studio if you haven’t installed them already.&lt;/p&gt;
&lt;p&gt;For those of you in the Java world using Eclipse. Eclipse has the worse JavaScript support I’ve ever seen. I understand that it is familiar, but just about any other JavaScript editor will be better.&lt;/p&gt;
&lt;p&gt;Anyhow, I’m using WebStorm. If you are using another editor, you are on your own.&lt;/p&gt;
&lt;h2 id=&#34;Angular-CLI&#34;&gt;&lt;a href=&#34;#Angular-CLI&#34; class=&#34;headerlink&#34; title=&#34;Angular CLI&#34;&gt;&lt;/a&gt;Angular CLI&lt;/h2&gt;&lt;p&gt;Now that you have Node installed and you have a reasonably good JavaScript&amp;#x2F;TypeScript editor, the next thing you will want to install is the &lt;a href=&#34;//github.com/angular/angular-cli&#34;&gt;Angular CLI&lt;/a&gt;. As of this writing, the Angular CLI is at Beta .17 so I can understand that you might be hesitant to use it. But it is done enough that we can use it to get our project going with MUCH less effort than if we did it by hand. And hopefully, the parts we need will get completed by the time we need them.&lt;/p&gt;
&lt;p&gt;There are a few other practical reasons for using the CLI rather than coding it yourself. First, the CLI conforms to the Angular 2 style guide. This was developed by the team that wrote Angular 2. Who better to tell us what the code should look like? And while I may not always agree with some of the recommendations, I understand why they are there and I’m willing to live with them. Hopefully, organizations coding Angular 2 applications will conform to these conventions so that anyone who writes Angular 2 code will already know them as they move from one organization to another.&lt;/p&gt;
&lt;p&gt;The instructions are on the web site for installing. But here is what you need to do in a little more detail.&lt;/p&gt;
&lt;p&gt;First, install the angular cli globally.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install -g angular-cli&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;By the way, when you run &lt;code&gt;npm&lt;/code&gt; commands, or &lt;code&gt;ng&lt;/code&gt; commands later on, you’ll do that from the command line.&lt;/p&gt;
&lt;p&gt;The next thing you’ll want to do is create a new project using the Angular CLI. This is where things are not as clear as I would have liked. Probably because their development environment looks different than mine. The official documents say to run these commands&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ng new PROJECT_NAME cd PROJECT_NAME ng serve&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where PROJECT_NAME is the name you want to give your project. This project name will become a sub directory under the directory you executed the command from. But what if you want to create a new project first, using your editor, and then you want to run &lt;code&gt;ng new&lt;/code&gt;? My first attempt was to run ng new using the directory where my project existed. But that just gave me an error message that said the directory already existed. Yeah, I know.&lt;/p&gt;
&lt;p&gt;Then I tried running &lt;code&gt;ng new&lt;/code&gt; without the directory name inside the project directory. The result of that was being told that I forgot a parameter.&lt;/p&gt;
&lt;p&gt;Well, what about using &lt;code&gt;ng new&lt;/code&gt; with “.” as a parameter, meaning “current directory”. Nope, “.” is not a valid name. It took me a while to figure this out.&lt;/p&gt;
&lt;p&gt;But you can execute &lt;code&gt;ng init&lt;/code&gt; from within the directory your existing project is in and it will scaffold out your application in your current directory.&lt;/p&gt;
&lt;h2 id=&#34;NG-SERVE&#34;&gt;&lt;a href=&#34;#NG-SERVE&#34; class=&#34;headerlink&#34; title=&#34;NG SERVE&#34;&gt;&lt;/a&gt;NG SERVE&lt;/h2&gt;&lt;p&gt;One of the commands you’ll see above is &lt;code&gt;ng serve&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You may wonder what this is and why you would want to run it. Don’t I just deploy my application on my own server? Well, yes, eventually you will. But while you are developing the application you will want or need to test it locally.&lt;/p&gt;
&lt;p&gt;Since Angular 2 requires a build and packaging step, you’ll want to automate this as much as possible. So, before you toss the idea of using &lt;code&gt;ng serve&lt;/code&gt; out, let’s take a look at what this gives you.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;ng serve&lt;/code&gt; gives you a web server to run your application. By default, this runs on &lt;a href=&#34;//localhost:4200&#34;&gt;http://localhost:4200&lt;/a&gt;. You can try this now.&lt;/p&gt;
&lt;p&gt;Oh wait! What’s it doing? It looks like it is doing way more than starting a web server.&lt;/p&gt;
&lt;p&gt;Well, yes, it is. You see &lt;code&gt;ng serve&lt;/code&gt; automatically compiles all of your typescript files and bundles all of your resulting files together every time a file changes. The first time you run &lt;code&gt;ng serve&lt;/code&gt;, it will do this because everything has changed. But it gets better, it will also refresh whatever browser is looking at the application so that your browser will always reflect whatever changes you’ve made in your source code.&lt;/p&gt;
&lt;p&gt;There are a few specific cases where this won’t work, but generally this works out pretty well.&lt;/p&gt;
&lt;p&gt;If you make a change and it doesn’t get reflected as you would expect, try restarting the server. That will probably fix the issue.&lt;/p&gt;
&lt;p&gt;The other thing you can do is that you can configure the server to proxy request to another server. This would be useful if you want to pull data from your Java, ASP.NET, or other platform while still running ng serve for the client side development work.&lt;/p&gt;
&lt;p&gt;If everything is working so far, you should be able to pull up your browser and run the application on &lt;a href=&#34;//localhost:4200&#34;&gt;http://localhost:4200&lt;/a&gt; and see a message “app works!” It really is just the barest of all possible applications.&lt;/p&gt;
&lt;h2 id=&#34;What-Else&#34;&gt;&lt;a href=&#34;#What-Else&#34; class=&#34;headerlink&#34; title=&#34;What Else?&#34;&gt;&lt;/a&gt;What Else?&lt;/h2&gt;&lt;p&gt;If you are curious like I am, you may have taken a look around the file structure to see what was installed. One directory you may have noticed is the “e2e” directory. This is where your end to end tests go. You can run these using the command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ng e2e&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Just make sure you have already run ng serve in another window. You can also run the unit tests that are in *.spec.ts files by running the command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ng test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will run the tests using Jasmine in a Chrome browser.&lt;/p&gt;
&lt;p&gt;The final thing to note about the CLI is that it uses Webpack instead of System.JS to manage bundling and minification. As of this writing, the tour of heroes demo still uses System.JS so this might be a point of confusion for you. The good news is that Webpack is a bit more straight forward than System.JS and I believe you’ll find it a lot easier to use.&lt;/p&gt;
&lt;h2 id=&#34;Follow-Along&#34;&gt;&lt;a href=&#34;#Follow-Along&#34; class=&#34;headerlink&#34; title=&#34;Follow Along&#34;&gt;&lt;/a&gt;Follow Along&lt;/h2&gt;&lt;p&gt;The result of step one can be found on my GitHub account: &lt;a href=&#34;//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-1&#34; title=&#34;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-1&#34;&gt;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-1&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-2-thoughts/</guid>
            <title>Angular 2 Thoughts</title>
            <link>http://davembush.github.com/angular-2-thoughts/</link>
            <category>angular</category>
            <category>javascript</category>
            <pubDate>Tue, 04 Oct 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I was asked this past week what my thoughts were on Angular 2. I wrote early on about my impressions of Angular 2 when it was barely done enough to review. But now that I’ve been working with it for a while and know a bit more, what I want to discuss is more along the line of what it means to the average developer and, more importantly, organizations that are planning to use it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/09/image-3.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Options&#34;&gt;&lt;a href=&#34;#Options&#34; class=&#34;headerlink&#34; title=&#34;Options&#34;&gt;&lt;/a&gt;Options&lt;/h2&gt;&lt;p&gt;While like Angular 1, Angular 2 provides us with most of what we need to build an application. Angular 2 also provides us, out of the box, with very Angular 1 ish ways of putting together an application, complete with modules. What Angular 2 provides that isn’t quite so obvious going into your development is options.&lt;/p&gt;
&lt;p&gt;In angular 1, we had options at the GUI level. And while this is still true for Angular 2, this is not the only place where you will see options.&lt;/p&gt;
&lt;p&gt;In general, you can split your options into, 1) do you want to do things the Angular 1 way, or 2) would you like to use an approach that looks more like React.JS? No place is this more obvious than with how you deal with forms. You can create forms with a declarative syntax, like you’ve done with Angular 1, using &lt;a href=&#34;//angular.io/docs/ts/latest/guide/template-syntax.html&#34;&gt;Template Syntax&lt;/a&gt;. But, in my opinion, a much better way to create forms is with a more reactive approach using the FormControls and FormGroups classes. If all you are doing is just displaying data, you’ll probably find that using the template syntax is all you need. But once you start working with complex forms that accepts data input and implements validation, you’ll probably want to move toward a more reactive approach. The added benefit is that more of you code will be testable.&lt;/p&gt;
&lt;p&gt;The next option you are going to have is figuring out how to move data around your system. Most of the literature is going to suggest you use a data flow that looks a lot like what you were doing in Angular 1. But there is nothing stopping you from using Flux, Redux, or even RxJS instead. And here again, my recommendation would be that you learn these because I think you’ll find that your system will end up being much easier to reason about than the old MVVM stuff you may be used to.&lt;/p&gt;
&lt;h2 id=&#34;Lazy-Loading&#34;&gt;&lt;a href=&#34;#Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;Lazy Loading&#34;&gt;&lt;/a&gt;Lazy Loading&lt;/h2&gt;&lt;p&gt;There are several places where we had to make choices in Angular 2 where the feature has been built into the framework. One of these places is lazy loading. Why load all of your JavaScript up front? Load what you need when you need it. Angular 2 makes this easy with Lazy Loading and the choice between using WebPack (the default) or System.JS.&lt;/p&gt;
&lt;p&gt;I’ll warn you though, as of this writing, Lazy Loading only really works when using System.JS unless you want to spend a lot of time tweaking your webpack config file.&lt;/p&gt;
&lt;h2 id=&#34;Angular-2-CLI&#34;&gt;&lt;a href=&#34;#Angular-2-CLI&#34; class=&#34;headerlink&#34; title=&#34;Angular 2 CLI&#34;&gt;&lt;/a&gt;Angular 2 CLI&lt;/h2&gt;&lt;p&gt;Command Line Interfaces seem to be the cool new kid on the block. You aren’t a real framework unless you have one. While the Angular CLI is not quite baked yet, I can see how this is going to make writing Angular 2 apps much easier. There are a lot of moving parts involved in getting even the most basic of applications up and running. The Angular CLI makes starting your first application REALLY easy. It even hides all of the WebPack internals while allowing you to add your own config file if you need to. Once they have the routing bit re-implemented, it should make using Lazy Loading with WebPack much easier.&lt;/p&gt;
&lt;p&gt;The other thing using the CLI will do for you is that you will automatically start following the &lt;a href=&#34;//angular.io/styleguide&#34;&gt;coding standards&lt;/a&gt; that the Angular team have developed.&lt;/p&gt;
&lt;h2 id=&#34;Angular-2-Components&#34;&gt;&lt;a href=&#34;#Angular-2-Components&#34; class=&#34;headerlink&#34; title=&#34;Angular 2 Components&#34;&gt;&lt;/a&gt;Angular 2 Components&lt;/h2&gt;&lt;p&gt;Right now, there aren’t a lot of options available for Angular 2 for custom components. While Kendo UI has been the defacto standard for Angular components in the past, Telerik is in the middle of rewriting &lt;a href=&#34;//www.telerik.com/blogs/kendo-ui-for-angular-2-r3-roadmap&#34;&gt;Kendo UI for Angular 2&lt;/a&gt; (and React.JS). I haven’t seen any movement in the Angular UI camp to support Angular 2. Angular 2 Material has a few components that seem ready, but they are all relatively simple. The only vendors that seems to have a complete Angular 2 package is &lt;a href=&#34;//wijmo.com/angular2/&#34;&gt;Wijmo&lt;/a&gt; and &lt;a href=&#34;//www.primefaces.org/primeng/&#34;&gt;Prime Faces&lt;/a&gt;. I haven’t tried them and I’m not endorsing them. I’m just reporting what I’ve found. There are a few standalone components here and there, but if you are looking for a set of components you can just use from one source, I’m afraid you’ll have to wait. This isn’t necessarily a bad thing. It gives you time to properly learn Angular 2.&lt;/p&gt;
&lt;p&gt;But what about the Angular 1 to Angular 2 bridge? In my mind this is way more trouble than it is worth. We’ve waited two years for Angular 2, I think we can wait just a bit longer for a set of components that we can use with it.&lt;/p&gt;
&lt;h2 id=&#34;What-Angular-2-Means-for-You&#34;&gt;&lt;a href=&#34;#What-Angular-2-Means-for-You&#34; class=&#34;headerlink&#34; title=&#34;What Angular 2 Means for You&#34;&gt;&lt;/a&gt;What Angular 2 Means for You&lt;/h2&gt;&lt;p&gt;The main difference between Angular 1 and Angular 2 is that just about any Script Kiddie could pick up Angular 1 and get something done. Angular 1 was developed during a period of JavaScript history when JavaScript had not quite reach the level of “serious programming language.” But now, JavaScript has not just reached that level, but several very serious frameworks have been developed.&lt;/p&gt;
&lt;p&gt;What I notice as I review the JavaScript landscape is that we’ve moved from just getting stuff done with little to no planning, to treating JavaScript as a first class programming language that requires, and even demands that we adhere to a set of programming best practices that we would use for any other language. These include things like naming conventions and design patterns. For you to write code well in this new universe, you will need to understand what these design patterns are, why they exist and how to implement them well. If you continue on your merry script kiddie way, you will soon find yourself out of work.&lt;/p&gt;
&lt;p&gt;Further, if you think you know Angular 2 just because you know Angular 1, or you think Angular 2 will be easy to pick up because you know Angular 1, you are in for a very big surprise. Many of the concepts are the same. But since Angular 2 has so many options, you should learn the options well so that you can make an educated decision about which option to use.&lt;/p&gt;
&lt;h2 id=&#34;What-Angular-2-Means-for-Organizations&#34;&gt;&lt;a href=&#34;#What-Angular-2-Means-for-Organizations&#34; class=&#34;headerlink&#34; title=&#34;What Angular 2 Means for Organizations&#34;&gt;&lt;/a&gt;What Angular 2 Means for Organizations&lt;/h2&gt;&lt;p&gt;Similarly, if you are an organization that is planning to move to Angular 2, don’t expect your programmers to just pick up and move to Angular 2 overnight. Give them time to learn it. My recommendation is that you make learning it part of their job while they continue to use Angular 1 for the product you are trying to complete. We all have time pressure, so you need to factor learning into the schedule.&lt;/p&gt;
&lt;p&gt;But Angular 2 may also mean you need to find additional programmers who already have the skills and can transfer the knowledge to your team.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-2-%E2%80%93-first-impressions-compared-to-angular-1/</guid>
            <title>Angular 2 – First Impressions [Compared to Angular 1]</title>
            <link>http://davembush.github.com/angular-2-%E2%80%93-first-impressions-compared-to-angular-1/</link>
            <category>angular</category>
            <category>javascript</category>
            <pubDate>Thu, 25 Feb 2016 08:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve spent the last week putting together &lt;a href=&#34;//github.com/DaveMBush/MEA2N_CRUD_Reference_App&#34;&gt;a reference app for Angular 2&lt;/a&gt;.  It is a great exercise to try to nail down the basics of how a new framework works.  Next week I plan on doing a similar exercise for &lt;a href=&#34;//facebook.github.io/react/&#34;&gt;React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyhow, I thought for this week’s post, I would try to relay some of my impressions, and some of the issues I see with this new framework.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/02/image-3.png&#34; alt=&#34;Angular 2 - First Impressions&#34; title=&#34;Angular 2 - First Impressions&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Why-call-it-Angular-2&#34;&gt;&lt;a href=&#34;#Why-call-it-Angular-2&#34; class=&#34;headerlink&#34; title=&#34;Why call it Angular 2?&#34;&gt;&lt;/a&gt;Why call it Angular 2?&lt;/h2&gt;&lt;p&gt;I realize naming things is always hard, but I think naming something similar to something that already exist is dangerous.&lt;/p&gt;
&lt;p&gt;When .NET first came out, many ASP programmers tried to use ASP.NET as though it were ASP.  That didn’t turn out so well for them and, I think, confused them.&lt;/p&gt;
&lt;p&gt;VB.NET had a similar problem.  During those early days of .NET I was working for a training company.  I had several ex VB6 developers show up to my C# class.  Do you know why?  Because they realized that VB.NET was such an entirely different language, they were better off just starting over with a new language than possibly treating VB.NET as though it were VB6.  Good call if you ask me.&lt;/p&gt;
&lt;p&gt;Most recently, Microsoft has learned from history and decided to rename the product they’ve been referring to as .NET 5 as .NET Core 1.0.  In this case it is enough like .NET that keeping .NET in the name is a good thing.  But starting the versioning at 1.0 again also shows that this is a brand new product with some differences from what we are all used to.&lt;/p&gt;
&lt;p&gt;Rob Eisenburg decided to call his new project Aurelia instead of Durandal 2 because they are enough different from each other.  While I’m not an expert on either product, I’m pretty sure that there are elements of Durandal in Aurelia simply because Rob was significantly involved in both projects.&lt;/p&gt;
&lt;p&gt;Which brings me to Angular 2.&lt;/p&gt;
&lt;p&gt;Why call it Angular anything?!  Angular 2 has very little in common with Angular 1.x other than basic concepts.  But, so much has changed it is like calling “ASP.NET 1.0” “ASP 5”.  It just doesn’t work, and it hides the fact that there is going to be a HUGE learning curve for those who are familiar with Angular 1.&lt;/p&gt;
&lt;h2 id=&#34;So-What-Has-Changed&#34;&gt;&lt;a href=&#34;#So-What-Has-Changed&#34; class=&#34;headerlink&#34; title=&#34;So What Has Changed?&#34;&gt;&lt;/a&gt;So What Has Changed?&lt;/h2&gt;&lt;h3 id=&#34;Case-sensitive-vs-Snake-Case&#34;&gt;&lt;a href=&#34;#Case-sensitive-vs-Snake-Case&#34; class=&#34;headerlink&#34; title=&#34;Case sensitive vs Snake Case&#34;&gt;&lt;/a&gt;Case sensitive vs Snake Case&lt;/h3&gt;&lt;p&gt;In Angular 1, all of the directives that we create are case sensitive in our code and snake-case-in-our-html.  In Angular2, the HTML markup is case sensitive.  Rob went on a rant about this &lt;a href=&#34;//eisenbergeffect.bluespire.com/on-angular-2-and-html/&#34;&gt;here&lt;/a&gt;.  His issue is that Angular 2 isn’t HTML spec compliant because it is case sensitive.  I’m really not sure how much this matters as long as the final result is compliant.  My issue is more along the lines of, “did this really need to change at all?”&lt;/p&gt;
&lt;h3 id=&#34;Basic-Syntax-Changes&#34;&gt;&lt;a href=&#34;#Basic-Syntax-Changes&#34; class=&#34;headerlink&#34; title=&#34;Basic Syntax Changes&#34;&gt;&lt;/a&gt;Basic Syntax Changes&lt;/h3&gt;&lt;p&gt;Then there are the basic syntax changes.  If you want to bind to an html element property you use square brackets.  If you want to fire an event, you use parenthesis.  If you want two way databinding, you use both.&lt;/p&gt;
&lt;p&gt;What? We didn’t need this distinction with Angular 1.  Why the distinction in Angular 2?  I suppose it has something to do with making it easier for Angular 2 to parse the HTML.  But, from the outside looking in, the thing you are binding to should make it clear enough what it is you are trying to do.  It reminds me of Pascal (the language).  More syntax for the sake of making sure the programmer can’t shoot himself in the foot.&lt;/p&gt;
&lt;h3 id=&#34;TypeScript&#34;&gt;&lt;a href=&#34;#TypeScript&#34; class=&#34;headerlink&#34; title=&#34;TypeScript&#34;&gt;&lt;/a&gt;TypeScript&lt;/h3&gt;&lt;p&gt;I fell in love with TypeScript back at version 0.9.  The advantage to an object oriented programmer is that you don’t have to think differently about your client side code using TypeScript than you would about your server side code if you are using a real object oriented language like C#, or Java on the server side.&lt;/p&gt;
&lt;p&gt;But TypeScript isn’t JavaScript.  And while you can write Angular 2 using JavaScript, the preferred language, and the language that the bulk of Angular 2 is written in, is TypeScript.&lt;/p&gt;
&lt;p&gt;To confuse matters, rather than tell the world, “Hey, just use TypeScript” they decided to give us options.  You can use Dart (what’s that?) JavaScript, or TypeScript.  We’ve already been through this with VB.NET and C#.  Doesn’t anyone learn from history?  Eventually C# won.  Oh, there are a few hold outs.  But even most of the VB lovers have given up and moved to C#.  It will be interesting to see how this TypeScript move plays out.&lt;/p&gt;
&lt;p&gt;On the one hand, I think TypeScript is a better version of JavaScript.  On the other hand, if all you know is TypeScript, it will make it harder to find a job as a JavaScript programmer.&lt;/p&gt;
&lt;p&gt;While TypeScript is definitely a better choice than having a new proprietary language just for Angular, which was the original plan, I still think we might have better off using pure JavaScript as the language of choice.&lt;/p&gt;
&lt;p&gt;Like I said, I’m a fan of TypeScript, I’m just not sure making this the default language is a good choice.&lt;/p&gt;
&lt;h3 id=&#34;Everything-Visual-Is-a-Component&#34;&gt;&lt;a href=&#34;#Everything-Visual-Is-a-Component&#34; class=&#34;headerlink&#34; title=&#34;Everything Visual Is a Component&#34;&gt;&lt;/a&gt;Everything Visual Is a Component&lt;/h3&gt;&lt;p&gt;Unlike Angular 1 where you have pages and directives, everything in Angular 2 from a visual perspective maps to an element.  This is a good change.&lt;/p&gt;
&lt;p&gt;At first when I heard this, I had trouble having it make sense in my mind.  But having implemented it once, I see that it really does make a lot of sense.&lt;/p&gt;
&lt;p&gt;You can also create new attributes that you can attach to an element.  But attributes add behavior to an element rather that making an element do or be something entirely different like you could do with Angular 1.&lt;/p&gt;
&lt;h3 id=&#34;Component-CSS&#34;&gt;&lt;a href=&#34;#Component-CSS&#34; class=&#34;headerlink&#34; title=&#34;Component CSS&#34;&gt;&lt;/a&gt;Component CSS&lt;/h3&gt;&lt;p&gt;I’m really not sure if I like this feature or not.  Done right, I think it is a very good thing.  Done poorly, this could be a disaster.&lt;/p&gt;
&lt;p&gt;Here’s the deal. In Angular 1, when you wrote a directive, any CSS you wrote to go with it needed to be included separately by the person using your component.  In Angular 2, you bind that CSS to your component and it gets included in the HEAD of your html.  It also gets mangled, similar to how ASP.NET would mangle IDs in WebForms, so that the CSS from the component won’t conflict with the other CSS that the page is using.&lt;/p&gt;
&lt;p&gt;This is all in preparation for the forthcoming HTML standard that will support Web Components. What is good about this is that the component is stand alone.  What is bad about this is that if I need to override the CSS, that might be a bit more difficult to do than what we are used to.&lt;/p&gt;
&lt;h3 id=&#34;Routing&#34;&gt;&lt;a href=&#34;#Routing&#34; class=&#34;headerlink&#34; title=&#34;Routing&#34;&gt;&lt;/a&gt;Routing&lt;/h3&gt;&lt;p&gt;My biggest disappointment with Angular 2 is with the new router.  Is it better than the router that comes with Angular 1?  Yes.  Absolutely.&lt;/p&gt;
&lt;p&gt;Is it better than &lt;a href=&#34;//angular-ui.github.io/ui-router/&#34;&gt;UI-Router&lt;/a&gt;?  I’m not so sure.&lt;/p&gt;
&lt;p&gt;The new router will let you have nested routes.  While it doesn’t do it in exactly the same way as you can with UI-Router, it can be done.  And like UI-Router’s ng-sref, you can link to routes by name.&lt;/p&gt;
&lt;p&gt;But the part I never could find clear documentation on is how I would create two insertion points in my HTML for route specific content like I could do with UI-Router.  From what little I could find it looks like they had something working that looked a lot like UI-Router and then they ripped it out in favor of some other method that either is not there yet, or is not clearly documented.&lt;/p&gt;
&lt;h3 id=&#34;Singletons&#34;&gt;&lt;a href=&#34;#Singletons&#34; class=&#34;headerlink&#34; title=&#34;Singletons&#34;&gt;&lt;/a&gt;Singletons&lt;/h3&gt;&lt;p&gt;If you’ve done any work with Angular 1, you’ll be familiar with the confusion between the different types of singletons.  The good news with Angular 2 is that everything is just considered a service.  If you decorate your class with “Injectable” the class can be injected into other classes. But, and I consider this a really big stumbling block moving to Angular 2, services are really singletons.  This is both good and bad.&lt;/p&gt;
&lt;p&gt;Typically we create a hierarch of components in our site with components housing other components.  To get singleton behavior, you would declare the need for your service as far up that hierarchy as is practical.  Just not at the app level.  You would hardly ever want to do that.  You only declare the dependency once in your app.  At the point you declare the dependency a new object is created that is injected anywhere else down the component hierarchy you specify that you need it in your constructor.&lt;/p&gt;
&lt;p&gt;But you need to pay attention to how I phrased that last paragraph because what creates the object is the fact that you declared the dependency.  If you declare it again, you get a new object.&lt;/p&gt;
&lt;p&gt;At first glance, this may appear to be a bad thing.  But I can think of situations where I may actually want to either have one object for an entire application or one object per instance of a component.  This new way of implementing injectable objects gives us that flexibility.&lt;/p&gt;
&lt;h3 id=&#34;Promises-vs-Observables&#34;&gt;&lt;a href=&#34;#Promises-vs-Observables&#34; class=&#34;headerlink&#34; title=&#34;Promises vs Observables&#34;&gt;&lt;/a&gt;Promises vs Observables&lt;/h3&gt;&lt;p&gt;While it doesn’t make sense to get into the details here, it is worth mentioning that instead of using Promises to avoid callback hell, Angular 2 is using RXjs’ observables.  It might take a while to get your head around this new paradigm.  But as it turns out, it would appear that observables can be used in more places than promises can because they are stream based.&lt;/p&gt;
&lt;h2 id=&#34;Better-x2F-New-x2F-Enhanced&#34;&gt;&lt;a href=&#34;#Better-x2F-New-x2F-Enhanced&#34; class=&#34;headerlink&#34; title=&#34;Better&amp;#x2F;New&amp;#x2F;Enhanced&#34;&gt;&lt;/a&gt;Better&amp;#x2F;New&amp;#x2F;Enhanced&lt;/h2&gt;&lt;h3 id=&#34;Declarative-or-Explicitly-Coded-Forms&#34;&gt;&lt;a href=&#34;#Declarative-or-Explicitly-Coded-Forms&#34; class=&#34;headerlink&#34; title=&#34;Declarative or Explicitly Coded Forms&#34;&gt;&lt;/a&gt;Declarative or Explicitly Coded Forms&lt;/h3&gt;&lt;p&gt;In Angular 1, just about everything view related is declarative.  This works, but at times I found it awkward to use.  For example, I needed to add validation to an element and it just seemed there must be an easier more direct way to do this than what I was given in Angular 1.&lt;/p&gt;
&lt;p&gt;In Angular 2, you can just put enough code in the HTML to render the element and then attach the JavaScript to it using function calls.  This gives you A LOT more control over you view, even if it does take a bit more work to get it setup.&lt;/p&gt;
&lt;p&gt;I think there are times when it will still make sense to do everything declaratively.  But for anything more than a trivial form, I think you are going to love this new option.&lt;/p&gt;
&lt;h3 id=&#34;Binding-Optimization&#34;&gt;&lt;a href=&#34;#Binding-Optimization&#34; class=&#34;headerlink&#34; title=&#34;Binding Optimization&#34;&gt;&lt;/a&gt;Binding Optimization&lt;/h3&gt;&lt;p&gt;The Angular 2 databinding seems to be optimized.  I don’t fully understand exactly what is different, but I’ll take their word for it that it is, or will be once we are no longer in beta.&lt;/p&gt;
&lt;h2 id=&#34;Still-Needs-Work&#34;&gt;&lt;a href=&#34;#Still-Needs-Work&#34; class=&#34;headerlink&#34; title=&#34;Still Needs Work&#34;&gt;&lt;/a&gt;Still Needs Work&lt;/h2&gt;&lt;h3 id=&#34;Rendering-Optimization&#34;&gt;&lt;a href=&#34;#Rendering-Optimization&#34; class=&#34;headerlink&#34; title=&#34;Rendering Optimization&#34;&gt;&lt;/a&gt;Rendering Optimization&lt;/h3&gt;&lt;p&gt;As I’ve started to look at React, and other systems that create “Virtual DOMs” I keep thinking, “Why can’t Angular do something like this?”  Being able to manipulate all of the DOM and then show the result when you are done is one of the easiest places to improve performance, and yet I don’t see any hooks in Angular that would make this possible.  This isn’t to say that I think React is better than Angular.  So far, I see some really big issues with React as well.  But I’d love to have some kind of Virtual DOM implementation in Angular without losing what is already built in.&lt;/p&gt;
&lt;h3 id=&#34;Testability&#34;&gt;&lt;a href=&#34;#Testability&#34; class=&#34;headerlink&#34; title=&#34;Testability&#34;&gt;&lt;/a&gt;Testability&lt;/h3&gt;&lt;p&gt;I can’t comment fully on the ability to test Angular 2 simply because the documentation for this is not fully baked.  So, I’ll refrain from making any comments at all.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;There are a lot of wins with Angular 2 and I think, in general, you are going to like this new framework.  It will be interesting to see how the UI component space will mature around this new framework.&lt;/p&gt;
&lt;p&gt;If you are interested in learning Angular 2, I would suggest that you work through the &lt;a href=&#34;//angular.io/docs/ts/latest/tutorial/&#34;&gt;tutorial&lt;/a&gt; and read through the &lt;a href=&#34;//angular.io/docs/ts/latest/guide/&#34;&gt;development guide&lt;/a&gt;.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/adventures-working-with-angular%E2%80%99s-scope/</guid>
            <title>Adventures Working With Angular’s $scope</title>
            <link>http://davembush.github.com/adventures-working-with-angular%E2%80%99s-scope/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>scope</category>
            <pubDate>Thu, 26 Nov 2015 08:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Every week when I write, I try to think back on the past week and think, “What have I learned that might be useful to others.”  Most weeks that is a pretty easy question to answer because I get most of my pleasure from learning new stuff.  But this week was different.&lt;/p&gt;
&lt;p&gt;When I sat down to write today, I couldn’t come up with a subject that couldn’t be covered with a sentence.  More of a tweet than a blog post.  It was so bad that I decided to go run the errands that are on my list and come back to it once I got home.&lt;/p&gt;
&lt;p&gt;Evidently, that was a good move because I think I have something that will be genuinely useful.  Although I will admit that if you’ve been working with AngularJS for very long at all, you may have already learned what I’m about to explain.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/11/image2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;The-Basics&#34;&gt;&lt;a href=&#34;#The-Basics&#34; class=&#34;headerlink&#34; title=&#34;The Basics&#34;&gt;&lt;/a&gt;The Basics&lt;/h2&gt;&lt;p&gt;To make sure we are all on the same page, I want to cover the basics first.  Every controller has a $scope variable associated with it.  $scopes can be nested within each other, which allows us to either have child scopes add information to parent scopes using prototypical inheritance, or the child $scope can be isolated so that it can’t see the parent $scope up the nesting chain.  In either case, you can gain access to the parent $scope by using the $parent variable.&lt;/p&gt;
&lt;p&gt;What is important to realize about $scope is that it is attached to the element’s this pointer.  Every controller you create is its own object and $scope is just one of many properties that is part of that object.&lt;/p&gt;
&lt;p&gt;Now, in normal Angular programming, you may only ever create one controller per element.  But if you’ve ever created a directive that gets used on multiple places, or you’ve done anything with repeaters, you know that controllers can be created “under the hood.”  So that the $scope for the repeater item isn’t the same as the $scope for the element that holds the main collection.&lt;/p&gt;
&lt;h2 id=&#34;scope-and-ControllerAs&#34;&gt;&lt;a href=&#34;#scope-and-ControllerAs&#34; class=&#34;headerlink&#34; title=&#34;$scope and ControllerAs&#34;&gt;&lt;/a&gt;$scope and ControllerAs&lt;/h2&gt;&lt;p&gt;In version 1.2 of Angular, the ControllerAs syntax was added, this can be added in a number of different ways that I won’t describe here.  That’s old news and there are plenty of places to find that information, including the Angular documentation.  But what isn’t clear at first, is what this feature does for us under the hood. Many people, who haven’t dug in deep under the hood assume that somehow this replaces $scope.  But in fact what it does is that it adds a variable onto $scope.  If you were to use ControllerAs redMonkey, what actually happens under the hood is that you end up with a variable named “redMonkey” that is hanging off of the controller’s $scope variable.&lt;/p&gt;
&lt;p&gt;In fact, what you end up with is this holding a property “$scope” and $scope holding a property “redMonkey” which is actually pointing to the controller’s this pointer.  Further, it is possible to have elements in your view bind to other variables hanging off of $scope while in the same view, other things are bound to variables hanging off of redMonkeys.&lt;/p&gt;
&lt;h2 id=&#34;scope-and-Singletons&#34;&gt;&lt;a href=&#34;#scope-and-Singletons&#34; class=&#34;headerlink&#34; title=&#34;$scope and Singletons&#34;&gt;&lt;/a&gt;$scope and Singletons&lt;/h2&gt;&lt;p&gt;I hope at this point you have a relatively clear picture of how $scope works because this is where things start to get interesting.  You see, just about everything else that you create in Angular is a singleton.  That is, only one instance of it exist in the entire application.  So, what happens if you pass $scope into one of these singletons and you use that singleton multiple times on the same page? Well, there’s no telling for sure.  You might get lucky and everything will seem to work, until one day it doesn’t.  In fact, you may never notice that there is a problem if you only ever call it from one controller or directive at a time.&lt;/p&gt;
&lt;p&gt;But to use singletons effectively, what you need to do is that you will need to pass the scope to each of the functions you need to have use it, unless you can be sure it will only be able to use one scope at a time.  As a general rule, you should never store state in anything that is a singleton.&lt;/p&gt;
&lt;p&gt;How do I know? Well, this week, I was working on some code that I thought was overriding the control’s controller.  But, when I finally got it all working I found that it only worked some of the time because what I had really overridden was a method in a directive.  Another time this week, I was doing something similar thinking I was overriding a function in the main control’s $scope only to find out that the function I was overloading was in a nested repeater item.&lt;/p&gt;
&lt;h2 id=&#34;Finding-scope-for-an-element&#34;&gt;&lt;a href=&#34;#Finding-scope-for-an-element&#34; class=&#34;headerlink&#34; title=&#34;Finding $scope for an element&#34;&gt;&lt;/a&gt;Finding $scope for an element&lt;/h2&gt;&lt;p&gt;If you need help figuring out what $scope is bound to what element in your code, you can use the &lt;a href=&#34;//chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en&#34;&gt;Batarang plugin&lt;/a&gt;.  You can also use the following JavaScript code using any developer tool you might want to use.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;angular.&lt;span class=&#34;title function_&#34;&gt;element&lt;/span&gt;(elementSelector).&lt;span class=&#34;title function_&#34;&gt;scope&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;scope-and-Repeaters&#34;&gt;&lt;a href=&#34;#scope-and-Repeaters&#34; class=&#34;headerlink&#34; title=&#34;$scope and Repeaters&#34;&gt;&lt;/a&gt;$scope and Repeaters&lt;/h2&gt;&lt;p&gt;So, back to one of my issues this week.  What I was working with was a tree control.  The tree was a set of repeaters within repeaters.  The original function that was bound to the click event was bound to the item scope so that each item was bound to its own instance of the onClick method.&lt;/p&gt;
&lt;p&gt;What I was trying to do was to override the function with a function in a directive I had created that wrapped the tree control and added a search box.  Fortunately, the item template could be changed, but how to get it to call MY click handler instead of the one it called by default? To further complicate matters, the $scope in the directives were isolated so I couldn’t add a new function on the scope I had control over and have the child scope see it.&lt;/p&gt;
&lt;p&gt;Or could I? The directive I was creating does have access to the scope of the tree control.  So, all I really needed to do was to create a new variable hanging off the tree control’s scope that pointed to the scope I wanted it to see and then in my template I could point to that variable and the function hanging off of it as the thing that should get called on click.&lt;/p&gt;
&lt;p&gt;Sure enough, that worked.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/create-a-desktop-application-using-angular-bootstrap-and-c/</guid>
            <title>Create A Desktop Application using Angular, Bootstrap and C#</title>
            <link>http://davembush.github.com/create-a-desktop-application-using-angular-bootstrap-and-c/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>angular.js</category>
            <category>bootstrap</category>
            <pubDate>Thu, 15 Oct 2015 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Last week I mentioned that it is possible to &lt;a href=&#34;/7-reasons-every-programmer-needs-to-learn-javascript/&#34;&gt;create a desktop application using JavaScript&lt;/a&gt; and that I had actually started working on an application that used Angular and Bootstrap for the presentation layer.  I actually have enough of that working that I can share the “how-to” with you.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/10/image1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Why-Would-You-Do-This&#34;&gt;&lt;a href=&#34;#Why-Would-You-Do-This&#34; class=&#34;headerlink&#34; title=&#34;Why Would You Do This?&#34;&gt;&lt;/a&gt;Why Would You Do This?&lt;/h2&gt;&lt;p&gt;Well, I don’t know why YOU would do this, but the reason I’m doing this is because the more I do on the web, the less able I am to work with Windows Form, and I haven’t even bothered learning WPF.  I decided several years ago that I would niche down over web technologies.  And yet, I want to write this desktop application.  I tried to use Windows Form, which I am most familiar with, and just got frustrated.  I want to use a grid control.  But what I want to do with the control is something more like what I would do with Angular’s ui-grid than what I can do with the grid control built into Windows Form. I’m sure someone who really knew the desktop side of the fence would be able to do what I want to do.  But I want to leverage what I know.  And eventually, I may move the whole thing to Node.js even though to get the thing up and running, I am going to use C# for the main processing.&lt;/p&gt;
&lt;h2 id=&#34;Rendering-HTML&#34;&gt;&lt;a href=&#34;#Rendering-HTML&#34; class=&#34;headerlink&#34; title=&#34;Rendering HTML&#34;&gt;&lt;/a&gt;Rendering HTML&lt;/h2&gt;&lt;p&gt;The first step toward getting all of this working is to just get HTML to render inside of a Windows Form (or WPF) executable.  I decided to use Windows Forms because I don’t need any of the WPF goodness that WPF would give me.  But you could tweak most of the setup I’m going to give you so that it would work with WPF if that’s your preferred platform.&lt;/p&gt;
&lt;p&gt;So, let’s start out by creating a Windows Form based application.  Once you have the project loaded, you’ll want to grab the &lt;a href=&#34;//www.nuget.org/packages/CefSharp.WinForms/&#34;&gt;CefSharp Windows Forms DLL’s and related files&lt;/a&gt;.  You can use NuGet to get these installed.  Just search for, “CefSharp.WinForms”.&lt;/p&gt;
&lt;p&gt;Because chromium uses Win32 or Win64 based C++ DLLs, you’ll need to configure your project to run as one or the other project.  This part was a little tricky.  What I found was that just changing the project settings for the default configuration named “Any CPU” was not enough.  What you need to do is to create a new project named “x64” or “x32” and change the settings there.&lt;/p&gt;
&lt;p&gt;Try compiling now, before you add any code.  If you’ve configured the project correctly with the CefSharp DLLs it should compile.&lt;/p&gt;
&lt;p&gt;The next thing you want to do is to insert the Chromium Browser control into the form.  Yes, it is a control like any other control.  No, you won’t find it on your toolbar.  No, it isn’t worth adding to the toolbar.  It is the only control that is going to be on the form so all you need to do is add it to the form using a few lines of code.&lt;/p&gt;
&lt;p&gt;First, add a private variable to hold the browser control.  It doesn’t need to be a member variable to get the HTML to render, but you’ll want it to be private later on.  So, just make it private to start with.&lt;/p&gt;
&lt;p&gt;Then, in your Load() method, add the following code:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Form1_Load&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Initialize CefSharp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     Cef.Initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Create a new browser window&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _browser =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ChromiumWebBrowser(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://www.google.com/&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Add the new browser window to the form&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Controls.Add(_browser);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You will also need code in your &lt;code&gt;FormClosing()&lt;/code&gt; method.  You can create this in Visual Studio by selecting it from the dropdowns in the upper right corner of the code window.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Form1_FormClosing&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Cef.Shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;OK.  Compile and run.  You should be able to load the Google web site and see it in your Windows Form.&lt;/p&gt;
&lt;h2 id=&#34;Using-Our-Own-Files&#34;&gt;&lt;a href=&#34;#Using-Our-Own-Files&#34; class=&#34;headerlink&#34; title=&#34;Using Our Own Files&#34;&gt;&lt;/a&gt;Using Our Own Files&lt;/h2&gt;&lt;p&gt;OK, so we’ve proven that we can render HTML inside of a Windows Form application.  But that won’t do us much good if we want to run code on our own.  Most of the places on the web that talk about loading HTML inside of a desktop application using Chromium suggest that you copy the HTML files over as content and use the file:&amp;#x2F;&amp;#x2F; protocol to load them.  But there are two problems with doing that.  First, I don’t want the files generally accessible to whoever has this installed.  What if someone decides to change those files? The second problem I have is even worse.  Assuming I could live with the files being available on the file system, Angular doesn’t work from the file system.  It wants to run from &lt;a href=&#34;http://somedomain/&#34;&gt;http://somedomain/&lt;/a&gt;.  So at the very least, we need for our files to LOOK like they’ve been served from a web server.&lt;/p&gt;
&lt;p&gt;Fortunately, we can solve both of these problems.&lt;/p&gt;
&lt;h3 id=&#34;Make-Our-Files-Resources&#34;&gt;&lt;a href=&#34;#Make-Our-Files-Resources&#34; class=&#34;headerlink&#34; title=&#34;Make Our Files Resources&#34;&gt;&lt;/a&gt;Make Our Files Resources&lt;/h3&gt;&lt;p&gt;To start with, we’ll just add one file.  Since it will be the beginning of our main application, name the file index.html and place it in a directory called “web” off the root of your project.  Put enough HTML in there that you’ll know the file actually got loaded.&lt;/p&gt;
&lt;p&gt;Then in the file properties, mark the file as an “Embedded Resource” instead of “Content” To load this file as a resource, you’ll use code that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; assembly = Assembly.GetExecutingAssembly();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; textStream = assembly.GetManifestResourceStream&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 (&lt;span class=&#34;string&#34;&gt;&amp;quot;TopLevelNamespace.web.index.html&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Make-it-LOOK-Like-it-Came-From-a-Server&#34;&gt;&lt;a href=&#34;#Make-it-LOOK-Like-it-Came-From-a-Server&#34; class=&#34;headerlink&#34; title=&#34;Make it LOOK Like it Came From a Server&#34;&gt;&lt;/a&gt;Make it LOOK Like it Came From a Server&lt;/h3&gt;&lt;p&gt;This is where some of the magic starts to happen.  The Chromium APIs have code that will let you register a pre-canned response object with a URL using a dictionary.  So, all we need to do is change the text string that we returned in the code above into a response object and register it with Chromium.&lt;/p&gt;
&lt;p&gt;The code to do that looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; factory = (DefaultResourceHandlerFactory)(browser.ResourceHandlerFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (factory == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; response = ResourceHandler.FromStream(textStream);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;factory.RegisterHandler(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://local/&amp;quot;&lt;/span&gt;, response);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now, when we tell Chromium to load “&lt;a href=&#34;http://local/%E2%80%9D&#34;&gt;http://local/”&lt;/a&gt; it  will render the index.html file from our EXE.&lt;/p&gt;
&lt;p&gt;Cool! Now, loading each file like this is going to get rather tedious pretty fast.  So what we need is a mechanism for loading all of the files in our web directory automatically.  For this we need to be able to iterate over all of our resources in the web namespace and register them with an associated “http:&amp;#x2F;&amp;#x2F;” tag.&lt;/p&gt;
&lt;p&gt;Since the best that we can do is get a list of all of the resources in our assembly, we will have to do some filtering to only register stuff in the “web” namespace.  But, there is another issue.  All of the resources are going to be listed as “TopLevelNamespace.web.subnamespace.filename.extension” and we want to register them as “&lt;a href=&#34;http://local/subnamespace/filename.extension%E2%80%9D&#34;&gt;http://local/subnamespace/filename.extension”&lt;/a&gt;.  So there is a bit of string manipulation that we need to go through to register everything correctly.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Get the list of resources&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; resourceNames = Assembly.GetExecutingAssembly()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .GetManifestResourceNames();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// For each resource&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; resource &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; resourceNames)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// If it isn&amp;#x27;t in the &amp;quot;web&amp;quot; namespace, skip it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!resource.StartsWith(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopLevelNamespace.web&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Strip out the namespace that we don&amp;#x27;t need.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; url = resource.Replace&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;TopLevelNamespace.web.&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Function I made that turns the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// resource into a textStream&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; r = LoadResource(url);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Make the namespace look like a path&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    url = url.Replace(&lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; lastSlash = url.LastIndexOf(&lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        StringComparison.Ordinal);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    url = url.Substring(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, lastSlash) + &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        url.Substring(lastSlash + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Register the response with the URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    factory.RegisterHandler(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://local/&amp;quot;&lt;/span&gt; + url,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ResourceHandler.FromStream(r));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now that I’ve explained all of the code.  The full class for loading the resources looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RegisterWebsite&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Load&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ChromiumWebBrowser browser&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; factory = (DefaultResourceHandlerFactory)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (browser.ResourceHandlerFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (factory == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; response = ResourceHandler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .FromStream(LoadResource(&lt;span class=&#34;string&#34;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        factory.RegisterHandler(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://local/&amp;quot;&lt;/span&gt;, response);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; resourceNames = Assembly.GetExecutingAssembly()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .GetManifestResourceNames();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; resource &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; resourceNames)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!resource.StartsWith(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopLevelNamespace.web&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; url = resource.Replace(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopLevelNamespace.web.&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; r = LoadResource(url);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            url = url.Replace(&lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; lastSlash = url.LastIndexOf(&lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                StringComparison.Ordinal);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            url = url.Substring(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, lastSlash) + &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                url.Substring(lastSlash + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            factory.RegisterHandler(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://local/&amp;quot;&lt;/span&gt; + url,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 ResourceHandler.FromStream(r));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; Stream &lt;span class=&#34;title&#34;&gt;LoadResource&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; filename&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; assembly = Assembly.GetExecutingAssembly();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; textStream = assembly&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .GetManifestResourceStream(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopLevelNamespace.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                + filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; textStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There is some obvious room for improvement here.  But the basics are there, you can tweak as needed.&lt;/p&gt;
&lt;p&gt;The main entry point is the Load method where we pass in a pointer to the browser control we created when we started this project.&lt;/p&gt;
&lt;h2 id=&#34;Getting-JavaScript-to-talk-to-C&#34;&gt;&lt;a href=&#34;#Getting-JavaScript-to-talk-to-C&#34; class=&#34;headerlink&#34; title=&#34;Getting JavaScript to talk to C#&#34;&gt;&lt;/a&gt;Getting JavaScript to talk to C#&lt;/h2&gt;&lt;p&gt;Now that we have the basics out of the way, we need to get the two halves of our project talking to each other.  The first half is that we need a way for our JavaScript client side code to retrieve data and send notifications to our server side code.  Fortunately, the mechanisms for doing this are already built into Chromium.&lt;/p&gt;
&lt;p&gt;Any C# object can be registered with Chromium as a JavaScript object so that any property will become a JavaScript field and any method will become a JavaScript method.&lt;/p&gt;
&lt;p&gt;The API to make this happen looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;_browser&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .RegisterJsObject(&lt;span class=&#34;string&#34;&gt;&amp;quot;NameYouWantJavaScriptToSeeThisObjectAs&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cSharpObjectHere);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In our JavaScript code, we would find that the window object now has a field named “NameYouWantJavaScriptToSeeThisObjectAs”&lt;/p&gt;
&lt;h2 id=&#34;Getting-C-to-talk-to-C&#34;&gt;&lt;a href=&#34;#Getting-C-to-talk-to-C&#34; class=&#34;headerlink&#34; title=&#34;Getting C# to talk to C#&#34;&gt;&lt;/a&gt;Getting C# to talk to C#&lt;/h2&gt;&lt;p&gt;The reverse is just as easy.&lt;/p&gt;
&lt;p&gt;_browser.ExecuteScriptAsync(string) takes a string that is the JavaScript that you want to execute.&lt;/p&gt;
&lt;h2 id=&#34;Getting-the-Communication-To-Play-Nice-with-Angular&#34;&gt;&lt;a href=&#34;#Getting-the-Communication-To-Play-Nice-with-Angular&#34; class=&#34;headerlink&#34; title=&#34;Getting the Communication To Play Nice with Angular&#34;&gt;&lt;/a&gt;Getting the Communication To Play Nice with Angular&lt;/h2&gt;&lt;p&gt;But getting this all to play well with &lt;a href=&#34;//angularjs.org/&#34;&gt;Angular&lt;/a&gt; requires just a little bit more.&lt;/p&gt;
&lt;p&gt;You may find that code on your screen that depends on a field or method that was registered with RegisterJsObject does not update when it should.  In fact, I would guess that this would happen most of the time because our C# object knows nothing of Angular and Angular knows nothing of our C# object.  So to fix this, we will need to make sure we $watch our C# object in our angular code.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$scope.$watch(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;RegisteredObject&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;property&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $scope.&lt;span class=&#34;property&#34;&gt;someField&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;RegisteredObject&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;property&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What this code does is that it tells Angular to check this field when it goes through its $digest cycle.  If it has changed since the last time it looked, it should run the second function that was passed in to $watch().&lt;/p&gt;
&lt;p&gt;But this isn’t the only code you will need to add.  Whenever you make a change to something on the C# side that the Angular code needs to reflect, you’ll need to tell Angular to run the $digest() cycle manually.  To do that, you’ll use that ExecuteScriptAsync() method to run some JavaScript.&lt;/p&gt;
&lt;p&gt;The easiest way to do this is to just run it off the top level $scope object.  The way you find the top level $scope object is to use JavaScript to find the element that you marked as “ng-app” in your HTML.  Once you’ve done that, you will see that it has a scope() method hanging off of it.  So this code will force a $digest cycle on everything from the top level $scope all of the way down.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;_browser&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .ExecuteScriptAsync(&lt;span class=&#34;string&#34;&gt;&amp;quot;angular.element(&amp;#x27;[ng-app]&amp;#x27;).scope().$digest();&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, you could skip setting the watch and have your ExecuteScriptAsync call set the $scope variables directly using something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;_browser.ExecuteScriptAsync(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;angular.element(&amp;#x27;#IdOfViewThatHasAControllerAttached&amp;#x27;).&amp;quot;&lt;/span&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;scope().status = &amp;#x27;this is a new status&amp;#x27;;angular.&amp;quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;element(&amp;#x27;[ng-app]&amp;#x27;).scope().$digest();&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Where #IdOfViewThatHasAControllerAttached is an ID of a element in a view that you’ve associated with a controller.  You’ll still want your controller to pull from the C# JavaScript object for the initial load because the DIV may or may not be there when you do the push.  Personally, I prefer the $watch method.  There is less to think about on the C# side.&lt;/p&gt;
&lt;p&gt;And that’s how you create a desktop application using Angular, Bootstrap and C#.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
