<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;routing&#34; tag</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Tue, 18 Jul 2017 06:30:23 -0400</pubDate>
        <lastBuildDate>Tue, 18 Jul 2017 06:30:23 -0400</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/how-to-implement-angular-routing/</guid>
            <title>How to Implement Angular Routing</title>
            <link>http://davembush.github.com/how-to-implement-angular-routing/</link>
            <category>angular</category>
            <category>routing</category>
            <pubDate>Tue, 18 Jul 2017 06:30:23 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;In the old world where all of our pages were on the server and every change on the client side required a full round trip to the server, each page was a unique URL on the server.  In the SPA world, we only load one “Page” from the server and the client takes care of making it look like we have moved from one page to another. &lt;/p&gt;
&lt;p&gt;When done well, we can create pages that reuse existing content on the screen causing a minimal screen refresh while still allowing the user to link to a specific “Page” in our application. &lt;/p&gt;
&lt;p&gt;These “Pages” are called “Routes”  As in, here is the route to some code I want to execute. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/07/2017-07-18.png&#34; title=&#34;How to Implement Angular 2+ Routing&#34;&gt; Photo via &lt;a href=&#34;//visualhunt.com/re/9589c4&#34;&gt;Visual Hunt&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;  Sounds pretty cool.  But there is a down side that shows up every time someone tries to do this for the first time.  You won’t see this problem until the first time you try to deploy your code because the development server handles this issue for you. 

&lt;p&gt;The problem is this.  When a server receives a request from the browser, it tries to find that file on the server.  If it doesn’t exist, the server returns a 404 error.  File not found. &lt;/p&gt;
&lt;p&gt;Most servers provide ways of circumventing this issue by providing rules.  Essentially, you write a server rule that says, “If the browser ask for a file that doesn’t exist, send them back index.html instead.”  You may need to provide exceptions or otherwise refine the rule if your server is also rerouting other traffic. If you are running on an IIS server, &lt;a href=&#34;/asp-net-angular-js-html5mode/&#34;&gt;I wrote instructions for how to take care of this issue&lt;/a&gt; for AngularJS (1.x).  The instructions work for any client side framework that implements routing. &lt;/p&gt;
&lt;p&gt;Assuming you have that end of things working correctly, here are the steps to get basic routing working in your Angular application.&lt;/p&gt;
&lt;h2 id=&#34;Define-Your-Routes&#34;&gt;&lt;a href=&#34;#Define-Your-Routes&#34; class=&#34;headerlink&#34; title=&#34;Define Your Routes&#34;&gt;&lt;/a&gt;Define Your Routes&lt;/h2&gt;&lt;p&gt;While we could easily define our routes in app.module.ts, the code we write will be much easier to maintain if we create a separate module file named app-routes.module.ts.  So to start, create an app-routes.module.ts file right next to your app.module.ts file.  You can do this with the Angular CLI by typing the following in the command line from within the src&amp;#x2F;app directory: &lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ng g module app-routes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;When you create a module with the Angular CLI, it will put it in a sub-directory.  In this case, it created an app-routes sub-directory.  We want it next to our app.module.ts file.  So, now we need to move the module up a directory and remove the app-routes directory. &lt;/p&gt;
&lt;p&gt;Open up the file, it has some stuff in it that we don’t need.  Remove the CommonModule references and the declarations section of the @NgModule decorator. &lt;/p&gt;
&lt;p&gt;In this new file, you will create an empty Routes array, called routes and decorate the class with @NgModule &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You need to also import Routes and while you are doing that, you might as well import RouterModule because you are going to need that soon too. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; ‘&lt;span class=&#34;meta&#34;&gt;@anguler&lt;/span&gt;/router’; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next, in your app.modules.ts file, import AppRoutesModule using both the TypeScript import and as part of the imports section of the @NgModule decorator.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; ‘./app-routes.&lt;span class=&#34;property&#34;&gt;module&lt;/span&gt;’;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  …,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  …,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We really haven’t done anything useful yet, we’ve just setup some boilerplate code that will compile so we won’t have to think about it any more. &lt;/p&gt;
&lt;p&gt;Now, back to the app-routes.module.ts file. &lt;/p&gt;
&lt;p&gt;Each element in our Routes array defines a specific route in our system relative to the parent route it is a part of.  At the top level the parent route would be the root of the application. &lt;/p&gt;
&lt;p&gt;Here are the properties that are available to us:&lt;/p&gt;
&lt;h3 id=&#34;path&#34;&gt;&lt;a href=&#34;#path&#34; class=&#34;headerlink&#34; title=&#34;path&#34;&gt;&lt;/a&gt;path&lt;/h3&gt;&lt;p&gt;The path property allows us to specify what path, or URL, will load this route.  If you want the component to load for any path, use ‘&lt;strong&gt;’ as the value.  If you want the component to load for the root element, use ‘’ for the path and specify pathMatch: ‘full’ as another property.  You can also use the value ‘&lt;/strong&gt;’ to mean, “match anything.”  We typically use ** to match what would typically be thought of as 404 errors.  For this to work correctly, it should be the last element in your top most route definition.&lt;/p&gt;
&lt;h3 id=&#34;pathMatch&#34;&gt;&lt;a href=&#34;#pathMatch&#34; class=&#34;headerlink&#34; title=&#34;pathMatch&#34;&gt;&lt;/a&gt;pathMatch&lt;/h3&gt;&lt;p&gt;As we’ve already mentioned, pathMatch should be ‘full’ to match ‘’ as the exact path.  But you can also give this value ‘prefix’ to tell it to match any path that starts with the value.  You only need to specify this value if you want to use ‘full’. &lt;/p&gt;
&lt;p&gt;It should also be noted that this value only evaluates the part of the path you are in.  If you use this in a child path, it won’t match the whole path, but only the part that is in the child.&lt;/p&gt;
&lt;h3 id=&#34;component&#34;&gt;&lt;a href=&#34;#component&#34; class=&#34;headerlink&#34; title=&#34;component&#34;&gt;&lt;/a&gt;component&lt;/h3&gt;&lt;p&gt;Component specifies what component should get loaded when the path is matched.&lt;/p&gt;
&lt;h3 id=&#34;children&#34;&gt;&lt;a href=&#34;#children&#34; class=&#34;headerlink&#34; title=&#34;children&#34;&gt;&lt;/a&gt;children&lt;/h3&gt;&lt;p&gt;The children property allows us to specify an array of child paths.&lt;/p&gt;
&lt;h2 id=&#34;Route-Components&#34;&gt;&lt;a href=&#34;#Route-Components&#34; class=&#34;headerlink&#34; title=&#34;Route Components&#34;&gt;&lt;/a&gt;Route Components&lt;/h2&gt;&lt;p&gt;Since our routes will need components, let’s start by creating several components so that we can illustrate routing. &lt;/p&gt;
&lt;p&gt;But first, a short word about how we organize our code. &lt;/p&gt;
&lt;p&gt;In many demos online, the tendency is to put all of our components right under the app directory.  But, in larger applications, I’ve found that it makes a lot more sense to create a route directory under the app directory that we place each of our routes in. &lt;/p&gt;
&lt;p&gt;Now, you might think that we would want to place our child routes as child directories under the routes they are a part of, but the problem with this is that we often have child components in our routes.  How do we know which directory represents a child route and which represents a child component? &lt;/p&gt;
&lt;p&gt;No.  &lt;/p&gt;
&lt;p&gt;What we really want to do is place even the components that represent child routes right under our routes directory.  So, say we have a Page1 route and there is a SubPage route that is a child of Page1.  To make it clear, we put SubPage in a directory named page1.sub-page. &lt;/p&gt;
&lt;p&gt;As for components that are common to multiple pages, we place those in a components directory which is right under the app directory.  This keeps our directories well organized and the code neatly organized as well. &lt;/p&gt;
&lt;p&gt;The next obvious thing that we need to do is that we need to create a routes directory.  Do that now. &lt;/p&gt;
&lt;p&gt;Now, at the command line, inside the new routes directory, execute the following Angular CLI commands &lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ng g component page1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page1-subpage&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;As you executed each command, it should have created a directory for each component with the corresponding css, html, ts and spec files.  Then it updated the app.module.ts file for you so that the components are available for use in the system. &lt;/p&gt;
&lt;p&gt;You may also notice that we created the component as page1-subpage instead of page1.subpage.  The reason for this is that the CLI doesn’t like period separation of file names.  Now, the next thing we are going to do is change the directory name to page1.subpage.  You will also need to change the TypeScript import line that references this directory in your app.module.ts file. &lt;/p&gt;
&lt;p&gt;Now that we have components to page to, let’s create our route definitions.  Back to the Routes array in our app-routes.module.ts file. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: ‘page1’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;children&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: ‘’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: ‘full’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Page1Component&lt;/span&gt;’ &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: ‘subpage’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page1SubpageComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;]&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: ‘page2’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page2Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The first definition may look a bit odd.  We are setting up a route to page1, but the route is the children.  Then in the children we define a route to ‘’.  This is where the Page1Component is specified as the component we want to load. &lt;/p&gt;
&lt;p&gt;You will also note that we specified &lt;code&gt;pathMatch: &amp;#39;full&amp;#39;&lt;/code&gt; for the Page1Component.  This is because we only want this component to be loaded when the child path is empty. &lt;/p&gt;
&lt;p&gt;Using this definition, everything loads into the top level router-outlet.  If we placed Page1Component at the same level as we defined the page1 path, then Angular would expect to have a router-outlet in Page1Component where Pag1SubpageComponent would be loaded. &lt;/p&gt;
&lt;p&gt;Needless to say, you need to be careful how you define your routes. &lt;/p&gt;
&lt;p&gt;Next, you will need to import the three components using the TypeScript import statement. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Page1Component&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1/page1.component&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Page2Component&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page2/page2.component&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Page1SubpageComponent&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1.subpage/page1-subpage.component&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now that everything is defined, we just need to tell Angular where we want these components to show up.  For right now, open the app.component.html file and remove everything that is there and add the router-outlet component. &lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;router-outlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;router-outlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, &lt;code&gt;router-outlet&lt;/code&gt; is a component that is defined in the RouterModule, so we need to import that in the imports section of our AppRoutesModule.  But we don’t just import the RouterModule, we use RouterModule.forRoot() and pass in the route array we just defined into forRoot(). &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;(routes)],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;exports&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppRoutesModule&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There is one final tweak that we need to make to our route definition.  Right now, if you go to the root of the application, there isn’t a component defined for it.  To fix this, we are going to add the following definition at the top of  our routes: &lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  path&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &amp;#x27;&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  redirectTo&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &amp;#x27;page1&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  pathMatch&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &amp;#x27;full&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You need &lt;code&gt;pathMatch: &amp;#39;full&amp;#39;&lt;/code&gt; to tell the router to only match this rule when the path is ‘’ exactly, just like we did with the Page1Component in the children list.  Otherwise, it will match everything. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;redirectTo: &amp;#39;page1&amp;#39;&lt;/code&gt; part tells it to redirect to the page1 path when this rule is true.&lt;/p&gt;
&lt;h2 id=&#34;Lazy-Loading&#34;&gt;&lt;a href=&#34;#Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;Lazy Loading&#34;&gt;&lt;/a&gt;Lazy Loading&lt;/h2&gt;&lt;p&gt;I realize that I still need to show you how to navigate to routes in your application, but first let’s look at lazy loading the routes. &lt;/p&gt;
&lt;p&gt;In the past, when building a Single Page Application, the custom was to load all of the JavaScript code we needed for the page up front.  But, if you have multiple pages in your application, some of those may never be needed by your user.  So, what are we doing loading stuff that will never get used? &lt;/p&gt;
&lt;p&gt;No, it is better to load only what we need when we need it.  While it might take longer if you totaled up each load, the user perceives the experience as faster.  Therefore what we want to do is to make each of our pages load as we need them. &lt;/p&gt;
&lt;p&gt;To do this, we need to create a module for each of the components that represent our top level routes.  We want to import modules and services into the module that is closest to where we need them.  This is why.  By only importing things where we need them, Angular can create the smallest package necessary all up and down the dependency tree. &lt;/p&gt;
&lt;p&gt;To make things easy and to do them the way you would have done them if you had done it this way to begin with, let’s delete all of the sub-directories under routes.  It’s OK.  We aren’t losing any work that we can’t quickly get back.  We haven’t added any code to these routes yet. &lt;/p&gt;
&lt;p&gt;At the command line, navigate to the routes directory and then type in the following Angular-CLI commands:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ng g module page1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g module page1-subpage&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page1-subpage&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g module page2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ng g component page2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then, just like we did the first time, rename the page1-subpage directory to page1.subpage. &lt;/p&gt;
&lt;p&gt;Now, go to the app.modules.ts file and remove the references to the Page1, Page2, and Page1Subpage components anywhere you see them. &lt;/p&gt;
&lt;p&gt;Do the same thing in the app-routes.module.ts file. &lt;/p&gt;
&lt;p&gt;Now, the way we define our routes changes slightly.  We will still need the redirect route, but everything else changes. &lt;/p&gt;
&lt;p&gt;The key to making this work is the property &lt;code&gt;loadChildren&lt;/code&gt;, which is a string in the format of: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;pathToModule#ModuleClassName&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We’ll work from the top down.  Change the routes array in app-routes.module.ts to look like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;redirectTo&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;full&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1/page1.module#Page1Module&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page2&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page2/page2.module#Page2Module&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;When we try to access something from page1, it will load the Page1Module and try to resolve it from there.  When we try to access something from page2, it will load the Page2Module.  Both of these happen during run time. &lt;/p&gt;
&lt;p&gt;Next, go to page1.module.ts and, import RouterModule and add the following to the imports section of @NgModule.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forChild&lt;/span&gt;([&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;full&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page1Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;subpage&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: ‘../page1.&lt;span class=&#34;property&#34;&gt;subpage&lt;/span&gt;/page1-subpage.&lt;span class=&#34;property&#34;&gt;module&lt;/span&gt;#&lt;span class=&#34;title class_&#34;&gt;Page1SubpageModule&lt;/span&gt;’&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next move over to page2 and do something similar.  Since page2 doesn’t have a sub-route, you only need, one route. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forChild&lt;/span&gt;([&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;full&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page2Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And again, similarly for page1-subpage. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forChild&lt;/span&gt;([&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;pathMatch&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;full&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Page1SubpageComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;]),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you haven’t already, move your command-line prompt back to the root of the project and type&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;To start the server and compile your code.  If everything compiles, you should see 3 chunk files along with the other files we saw when we compiled the code without lazy loading. One each for each of the routes. &lt;/p&gt;
&lt;p&gt;Run the app in your browser now to make sure it works correctly. &lt;/p&gt;
&lt;p&gt;See how easy that was?  It isn’t really that much harder than specifying the routes like we did the first time, but we get huge benefits in performance.&lt;/p&gt;
&lt;h2 id=&#34;Passing-Parameters&#34;&gt;&lt;a href=&#34;#Passing-Parameters&#34; class=&#34;headerlink&#34; title=&#34;Passing Parameters&#34;&gt;&lt;/a&gt;Passing Parameters&lt;/h2&gt;&lt;p&gt;The last thing you need to know about is how to pass parameters.  You would normally do this when you are coming from an existing list of items.  Each item has some sort of unique identifier.  We click some link and that takes us to another page to show details or to edit the content.  For our purposes here, it doesn’t matter. &lt;/p&gt;
&lt;p&gt;To specify that a route takes a parameter, use colon notation: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;detail/:id&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Angular knows it is a parameter when you use a URL to get to it because of the location.&lt;/p&gt;
&lt;h2 id=&#34;Retrieving-Parameters&#34;&gt;&lt;a href=&#34;#Retrieving-Parameters&#34; class=&#34;headerlink&#34; title=&#34;Retrieving Parameters&#34;&gt;&lt;/a&gt;Retrieving Parameters&lt;/h2&gt;&lt;p&gt;Let’s say you have a component that represents a route with a parameter.  For that to be useful, you’ll need to pull the parameter out of the route information. &lt;/p&gt;
&lt;p&gt;To do this, you’ll need to inject &lt;code&gt;ActivatedRoute&lt;/code&gt; into the component.  Then when you need the parameter(s) you can use: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;route.&lt;span class=&#34;property&#34;&gt;params&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;params&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Use params[&amp;#x27;id&amp;#x27;], where ‘id’ is the name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// we gave the parameter in the path.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Route-Navigation&#34;&gt;&lt;a href=&#34;#Route-Navigation&#34; class=&#34;headerlink&#34; title=&#34;Route Navigation&#34;&gt;&lt;/a&gt;Route Navigation&lt;/h2&gt;&lt;p&gt;Now that we have routes in place, we need to discuss how to navigate from one route to another.  The temptation, having just used URLs to go from one to the other, would be to use hyperlinks and put the information in the href attribute. &lt;/p&gt;
&lt;p&gt;No doubt, you could probably get that to work, but the main problem with using that method is that there is no safeguards to make sure that the URL you use to navigate when you are developing will work when you move the site to another environment. &lt;/p&gt;
&lt;p&gt;The reason for this is that we have to set the base href for the site.  During development this is normally ‘&amp;#x2F;’.  But when you go to production, it could be some sub directory. &lt;/p&gt;
&lt;p&gt;Also, because of this base href, every page&amp;#x2F;route we land on is still relative to that base.  This means that every route we want to navigate to would have to be hard wired to the base of the site, and again, that’s assuming that the site will always be in the same relative location when it is deployed. &lt;/p&gt;
&lt;p&gt;Now, if we can’t using a regular URL to navigate, what do we use instead?&lt;/p&gt;
&lt;h3 id=&#34;routerLink&#34;&gt;&lt;a href=&#34;#routerLink&#34; class=&#34;headerlink&#34; title=&#34;routerLink&#34;&gt;&lt;/a&gt;routerLink&lt;/h3&gt;&lt;p&gt;You use the routeLink directive added to your anchor tag.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;routerLink&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;[&amp;#x27;/page1&amp;#x27;]&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;go here&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This may look a little different from what you expected, so let’s break this down. &lt;/p&gt;
&lt;p&gt;The routerLink directive takes an array.  Since we can’t pass an array as a string, the only way we can pass it is by evaluating it at run time.  Remember, the square bracket syntax is an indication to the Angular compiler that what we are assigning is something that should be evaluated.  Typically this would be pointing to a function or variable in our TypeScript code.  In this case, we are pointing to a literal array.  Everything between the opening and closing quotes is JavaScript. &lt;/p&gt;
&lt;p&gt;As for the actual parameter, the string in the single element array works much like you would use a URL.  The forward slash says to start at the root of the web application (instead of the root of the domain like a URL would.)  And the page1 is the route we’ve already defined.  If you leave the forward slash off, it is relative to the current route. &lt;/p&gt;
&lt;p&gt;But what about passing parameters? &lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;routerLink&lt;/span&gt;]=&lt;span class=&#34;string&#34;&gt;&amp;quot;[&amp;#x27;/page1&amp;#x27;, someVariable]&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;go here&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Each comma delimited value represents a segment of your route.&lt;/p&gt;
&lt;h3 id=&#34;Router-navigate&#34;&gt;&lt;a href=&#34;#Router-navigate&#34; class=&#34;headerlink&#34; title=&#34;Router.navigate()&#34;&gt;&lt;/a&gt;Router.navigate()&lt;/h3&gt;&lt;p&gt;The other way you might want to cause navigation to a page to occur is by using the navigate() method hanging off the Router class.  Using dependency injection, you inject the Router into the class that needs to use it and then use that instance to call navigate().  The parameter you pass in looks very similar to what you used for routerLink. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;router.&lt;span class=&#34;title function_&#34;&gt;navigate&lt;/span&gt;(‘/page1’,someVariable);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Yes, both routerLink and Router.navigate() both support URL like references using ‘.&amp;#x2F;path’ or ‘..&amp;#x2F;path’.&lt;/p&gt;
&lt;h2 id=&#34;Where-Am-I-Now&#34;&gt;&lt;a href=&#34;#Where-Am-I-Now&#34; class=&#34;headerlink&#34; title=&#34;Where Am I Now?&#34;&gt;&lt;/a&gt;Where Am I Now?&lt;/h2&gt;&lt;p&gt;The last part of routing you will commonly need to know about is detecting what the current route is.  Once again this will require you to inject the Router object into the component that needs the information.  Once you have the router object, you can use code like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;router.&lt;span class=&#34;property&#34;&gt;routerState&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;snapshot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This will get the current route url.  I normally grap this as part of listening for the router’s NavigationEnd. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;router&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;events&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;arg&lt;/span&gt; =&amp;gt;&lt;/span&gt; arg &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NavigationEnd&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;arg&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;selectedTab&lt;/span&gt; = router.&lt;span class=&#34;property&#34;&gt;routerState&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;snapshot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;selectedTab&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Guards&#34;&gt;&lt;a href=&#34;#Guards&#34; class=&#34;headerlink&#34; title=&#34;Guards&#34;&gt;&lt;/a&gt;Guards&lt;/h2&gt;&lt;p&gt;Guards control access to our routes.  What happens if you have a route that only certain people should have access to.  Like an admin page.  Sure, you could leave the link off so no one can click the link to get to the page, but that doesn’t prevent someone from pasting the link to the forbidden page into the address bar of the browser and getting there anyhow. &lt;/p&gt;
&lt;p&gt;In Angular, we have four kinds of guards and two ways of creating them. &lt;/p&gt;
&lt;p&gt;The four types of guards are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CanActivate&lt;/li&gt;
&lt;li&gt;CanActivateChild&lt;/li&gt;
&lt;li&gt;CanDeactivate&lt;/li&gt;
&lt;li&gt;CanLoad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you follow my advice and always lazy load your routes, than the two you will most often use are CanLoad and CanDeactivate.  CanLoad provides rules for lazy loading a module.  CanDeactive provides rules for leaving a route. &lt;/p&gt;
&lt;p&gt;If you decide to bundle routes together, then you may also need CanActivate and CanActivateChild.  CanActivate is exactly what it sounds like.  Can I activate this route?  CanActivateChild would go on a route definition that has a children’s collection.  This rule determines if I can activate the children. &lt;/p&gt;
&lt;p&gt;To use Guards in our application, the first thing we need to do is to define them.  The easiest way to define them is as a function that returns a boolean value, a boolean Observable, or a boolean Promise.  For our purposes here, we will just return a boolean value.  But when you have some asynchronous call you need to make to determine if we should return true or false, you’ll want to return an Observable or a Promise.  I favor Observables. &lt;/p&gt;
&lt;p&gt;The definition for a Guard rule looks like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;provide&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;ruleNameHere&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;useValue&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Then, to use the rule, you assign the appropriate rule the name of the rule. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;canLoad&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;ruleNameHere&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1/page1.module#Page1Module&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that canLoad, as well as the other guard properties, takes an array.  This allows you to apply multiple rules to a route. &lt;/p&gt;
&lt;p&gt;The other way of defining a route is as a class that implements an interface, or multiple interfaces that include CanActivate, CanActivateChild, CanDeactivate, and CanLoad.  You them implement the corresponding functions in your class. &lt;/p&gt;
&lt;p&gt;Now, to include the rule you use the Class rather than a string: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;page1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;canLoad&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;RuleClassHere&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;loadChildren&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./routes/page1/page1.module#Page1Module&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;But-wait-there’s-more-…&#34;&gt;&lt;a href=&#34;#But-wait-there’s-more-…&#34; class=&#34;headerlink&#34; title=&#34;But wait, there’s more …&#34;&gt;&lt;/a&gt;But wait, there’s more …&lt;/h2&gt;&lt;p&gt;Believe it or not, there is even more to routing than we’ve discussed here.  But we’ll leave that for another day or this post will turn into a &lt;a href=&#34;https://davembush.github.io/get-started-with-angular/&#34;&gt;book&lt;/a&gt;. &lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/adding-client-side-routing-to-angular-2/</guid>
            <title>Adding Client Side Routing to Angular 2</title>
            <link>http://davembush.github.com/adding-client-side-routing-to-angular-2/</link>
            <category>angular</category>
            <category>routing</category>
            <pubDate>Tue, 29 Nov 2016 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last several Angular 2 posts, we’ve been building up our application bit by bit and examining the various features of Angular 2 along the way using the Angular CLI where that makes sense and modifying it along the way. So far, routing is an area that the Angular CLI does not yet support and so, when you want to use routing in your Angular 2 application, you’ll need to wire most of it in by hand. Now, the routing engine has changed several times during the development of Angular 2. And I know you’re wondering which version of the router this article is going to be talking about. So, to be clear, this article was written using the Angular CLI version 1.0.0-beta.21 and Router version 3.2.1.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/11/image-4.png &#34;Adding Client Side Routing to Angular 2&#34;)&lt;figcaption&gt;Photo credit: [xomiele](//www.flickr.com/photos/xomiele/6759264721/) via [Visualhunt](//visualhunt.com/photos/snow/) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-is-Routing&#34;&gt;&lt;a href=&#34;#What-is-Routing&#34; class=&#34;headerlink&#34; title=&#34;What is Routing?&#34;&gt;&lt;/a&gt;What is Routing?&lt;/h2&gt;&lt;p&gt;If you are new to developing Single Page Application (SPAs) you might wonder what Routing is. You might be surprised to find out that you already know what routing is, but you’ve never actually called it by this name.&lt;/p&gt;
&lt;p&gt;For example, using MVC in the ASP.NET world, you used routing whenever you specified what controller you expected your code to hit when you specified a particular URL. You’ll remember that we set our code up so that when we specified that URL, code in a controller would get hit. We also had the option of specifying parameters that we wanted to have passed into our controller methods.&lt;/p&gt;
&lt;p&gt;In a SPA, routing does essentially the same thing. The only difference is that we never have to call the server. This makes all our “Pages” virtual. Instead of requiring that our visitors always start at our home page and navigate into the rest of our site; instead of creating a separate page on the server for each page in our site; we can load all the site up front and the user can navigate to exactly the page they want to be at. They can even link directly to that page and the client side will handle displaying the page appropriately.&lt;/p&gt;
&lt;h2 id=&#34;There’s-a-Catch&#34;&gt;&lt;a href=&#34;#There’s-a-Catch&#34; class=&#34;headerlink&#34; title=&#34;There’s a Catch&#34;&gt;&lt;/a&gt;There’s a Catch&lt;/h2&gt;&lt;p&gt;One of the problems you’ll quickly discover is that for this to work, you’ll need to set your server up so that it doesn’t try to handle the routing as well.&lt;/p&gt;
&lt;p&gt;You see, if you navigate to the home page of your web site and then click around into the sub-pages, everything is going to appear to work correctly. But once you try to navigate directly to an inner page, you are going to become extremely frustrated. The problem lies in order your code gets executed.&lt;/p&gt;
&lt;p&gt;When you request a page directly, what happens is that the server will look for that page on the server. If it can’t find it, it will return, appropriately, a 404 error. The problem is that when we ask for a page that only exist because the client side has said it does, when the server goes to look for it, it will return the 404 error. It isn’t there.&lt;/p&gt;
&lt;p&gt;For the moment, I’m ignoring the fact that Angular 2 supplies a feature called Server Side Rendering, which can also take care of this problem. Given regular, out of the box, Angular 2 code, you’ll want to make sure you server knows what to do when the files don’t exist. What I normally do is that I create a rule on my server that says, “if I’m looking for a path that doesn’t have an extension, just return the index.html page you would have returned if I had asked for the home page.” In Express on Node.JS, the code for this looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// This comes last.  right before we start listening&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.&lt;span class=&#34;title function_&#34;&gt;use&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;req,res&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this sends back the index.html file when&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// it looks like they are looking for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// a client side route&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// assuming a real file will have an extension&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// and a route will not.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(req.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;indexOf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt;) &amp;gt; -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        res.&lt;span class=&#34;title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;404&lt;/span&gt;)        &lt;span class=&#34;comment&#34;&gt;// HTTP status 404: Not Found&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .&lt;span class=&#34;title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Not found&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        res.&lt;span class=&#34;title function_&#34;&gt;sendFile&lt;/span&gt;(__dirname + &lt;span class=&#34;string&#34;&gt;&amp;#x27;/www/index.html&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you are using IIS and ASP.NET, you might find this article I wrote about using &lt;a href=&#34;/asp-net-angular-js-html5mode/&#34;&gt;Angular, Routing, and ASP.NET&lt;/a&gt; useful.&lt;/p&gt;
&lt;h2 id=&#34;Enabling-Routing&#34;&gt;&lt;a href=&#34;#Enabling-Routing&#34; class=&#34;headerlink&#34; title=&#34;Enabling Routing&#34;&gt;&lt;/a&gt;Enabling Routing&lt;/h2&gt;&lt;p&gt;Since the Angular CLI has included the packages you’ll need to enable routing, there is nothing to install. We just need to write some code.&lt;/p&gt;
&lt;p&gt;Typically routes get enabled at the top of your application after all the common code has been implemented. So, in the location where you want the routing to take effect, add the following tag:&lt;/p&gt;
&lt;p&gt;&lt;router-outlet&gt;&lt;/router-outlet&gt;&lt;/p&gt;
&lt;p&gt;I’ve added this to my &lt;code&gt;app.component.html&lt;/code&gt; file in the sample app I’ve been working on. Replacing the &lt;code&gt;&amp;lt;h1&amp;gt;&amp;#123; &amp;#123;title&amp;#125;&amp;#125;&amp;lt;/h1&amp;gt;&lt;/code&gt; code that we had from the previous weeks.&lt;/p&gt;
&lt;p&gt;If you were to run the code now all that you would see is that the title no longer shows up. We need to add the route code next. You will notice that an &lt;code&gt;app-routing.module.ts&lt;/code&gt; file already exist. Open this file. You will see that the bulk of the code we are going to need is already there.&lt;/p&gt;
&lt;p&gt;You should see a line that looks like:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We are going to add a route to this array:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ViewComponent&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What this is saying is that whenever we ask for the home page, load the “ViewComponent” component.&lt;/p&gt;
&lt;p&gt;But wait, we haven’t added any components yet.&lt;/p&gt;
&lt;p&gt;While we COULD just add a component, what I prefer to do is to add a new module. This is because I dislike the idea of making all the components in my code part of one huge modules. It makes it extremely difficult to refactor my code. I also want the ability to implement lazy loading in the future and I will need the component I am routing to, to be part of its own component in order for that to work.&lt;/p&gt;
&lt;p&gt;To add a View component to our code run the following line from the terminal&amp;#x2F;command line &lt;code&gt;ng g module view&lt;/code&gt; This will create a new ViewModule module with a new ViewComponent component located in the view directory.&lt;/p&gt;
&lt;p&gt;The rest of what we need to do is to just wire this all into the existing application.&lt;/p&gt;
&lt;p&gt;Go back to &lt;code&gt;app-routing.module.ts&lt;/code&gt; and add an import statement to load in &lt;code&gt;ViewComponent&lt;/code&gt; and the &lt;code&gt;ViewModule&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;ViewComponent&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./view/view.component&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;ViewModule&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./view/view.module&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We also need to add &lt;code&gt;ViewModule&lt;/code&gt; to the imports array.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;(routes),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;ViewModule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;exports&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;RouterModule&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next, we need to register the routing module with the application. So, load up the app.module.ts file and add an import statement to import the app-routing module:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; _applicationName_RoutingModule&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./app-routing.module&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And add &lt;code&gt;_applicationName_RoutingModule&lt;/code&gt; to the imports array:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;declarations&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;BrowserModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;FormsModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;HttpModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _applicationName_RoutingModule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;bootstrap&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Adding additional routes is more of the same. Let’s add another module for editing.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ng g module edit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add two new paths. One so we can add a new item and one so we can edit an existing item.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;routes&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Routes&lt;/span&gt; = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ViewComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Add&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;EditComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Edit/:id&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;EditComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that for the Edit command I added :id at the end. The :id specifies that this location is where the parameter will be. In this case, the ID of the record that we want to edit.&lt;/p&gt;
&lt;p&gt;We will flesh these out later and I’ll leave adding import statements and adding modules to the import arrays to you. It is essentially copy&amp;#x2F;paste&amp;#x2F;modify from the previous code. When you have the code working, you should be able to navigate to &amp;#x2F;Add or &amp;#x2F;Edit&amp;#x2F;id and see the new page.&lt;/p&gt;
&lt;p&gt;If you get stuck, the code so far can be found here: &lt;a href=&#34;//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step3&#34; title=&#34;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step3&#34;&gt;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step3&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/asp-net-angular-js-html5mode/</guid>
            <title>ASP.NET, Angular.js &amp; html5mode</title>
            <link>http://davembush.github.com/asp-net-angular-js-html5mode/</link>
            <category>routing</category>
            <category>asp.net</category>
            <category>angular.js</category>
            <category>iis</category>
            <pubDate>Thu, 24 Sep 2015 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve been looking at Angular.js recently.  I’ve already got enough of a project done in &lt;a href=&#34;//www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; (with &lt;a href=&#34;//mongoosejs.com/&#34;&gt;Mongoose&lt;/a&gt;), &lt;a href=&#34;//expressjs.com/&#34;&gt;Express&lt;/a&gt;, &lt;a href=&#34;//angularjs.org/&#34;&gt;Angular&lt;/a&gt; and &lt;a href=&#34;//nodejs.org/&#34;&gt;Node.js&lt;/a&gt; (MEAN) to be comfortable with how Angular works.  But I wanted to give it a try using ASP.NET as the back end.  I’m always learning.  Always improving.&lt;/p&gt;
&lt;p&gt;To start out, I just setup an index.html page to hold my basic form as I got the basic look and feel going.  But as I progressed, I wanted to make sure I progressed, I wanted to add in the capability of using Angular’s html5mode for the client side routing.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;For those of you who are new to Angular, Angular is a client side JavaScript framework that will allow you to create web applications where much of the processing happens on the client side instead of the server side.  That’s cool enough.  But it also adds the ability to handle client side routing, just like ASP.NET’s MVC handles server side routing.  This allows you to have a client side “master page” that can suck in the differences from the server as it needs them based on the url that is in the address bar.  In fact, there is an extension that will let you have sub routes as far down as you need.&lt;/p&gt;
&lt;p&gt;Out of the box, Angular, and most other frameworks that implement client side routing, using the hash symbol to specify the route.  For example&lt;/p&gt;
&lt;p&gt;http:&amp;#x2F;index.html#&amp;#x2F;pathToRoute&lt;/p&gt;
&lt;p&gt;This allows the routing to work on older browsers.&lt;/p&gt;
&lt;p&gt;ASP.NET, Angular.js &amp;amp; html5mode &lt;img src=&#34;/uploads/2015/09/image3.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt; ASP.NET, Angular.js &amp;amp; html5modeBut if you are working with newer browsers that support HTML5, you can avoid the hash tag and just create a route that looks like this:&lt;/p&gt;
&lt;p&gt;http:&amp;#x2F;pathToRoute&lt;/p&gt;
&lt;p&gt;Which you have to admit, looks a whole lot nicer.&lt;/p&gt;
&lt;p&gt;But here is where the problems start.&lt;/p&gt;
&lt;p&gt;As soon as you implement html5mode on a site that is hosted in IIS or IIS express, you will get a 404 error because your initial request to the server is going to ask the server for a path that doesn’t exist.&lt;/p&gt;
&lt;p&gt;There are a few ways that you can take care of this.&lt;/p&gt;
&lt;h2 id=&#34;Return-a-default-view-for-every-undefined-server-route&#34;&gt;&lt;a href=&#34;#Return-a-default-view-for-every-undefined-server-route&#34; class=&#34;headerlink&#34; title=&#34;Return a default view for every undefined server route.&#34;&gt;&lt;/a&gt;Return a default view for every undefined server route.&lt;/h2&gt;&lt;p&gt;One of the first suggestions you are likely to find suggest creating a default view for all routes that start with “&amp;#x2F;angular&amp;#x2F;”.&lt;/p&gt;
&lt;p&gt;This is a great start.  But here are my issues with it.  If I really want to use Angular the way it was intended to be used, I would prefer to not have to use MVC on the server side at all.  While not a huge hit, writing a razor page just to get my initial angular page up seems to be a bit of overkill.  There must be a way to do this without creating a *.chshtml file.  I also don’t want to have a sub directory for my page.  Why can’t I just go to &lt;a href=&#34;//blog.dmbcllc.com&#34;&gt;http://blog.dmbcllc.com&lt;/a&gt; as my default route?  And why can’t I just return a plain old html file?! Well, it turns out you can.  A slight modification of the “Return a default view” method is to have your controller return your html page.&lt;/p&gt;
&lt;h2 id=&#34;Return-an-HTML-page-direct-from-the-controller&#34;&gt;&lt;a href=&#34;#Return-an-HTML-page-direct-from-the-controller&#34; class=&#34;headerlink&#34; title=&#34;Return an HTML page direct from the controller.&#34;&gt;&lt;/a&gt;Return an HTML page direct from the controller.&lt;/h2&gt;&lt;p&gt;If you dig a bit further, you’ll find that someone else has realized that you can just return your HTML directly from the controller.  The magic to this trick is all similar to what the guy in the original article did except for in the controller, instead of returning the view, he returns the html file that contains the main html.&lt;/p&gt;
&lt;p&gt;public ActionResult Index()&lt;br&gt;{&lt;br&gt;    return File(“~&amp;#x2F;yourstartpage.html”, “text&amp;#x2F;html”);&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;And his main MVC route looks like this:&lt;/p&gt;
&lt;p&gt;routes.MapRoute(&lt;br&gt;      name: “Default”,&lt;br&gt;      url: “{*.}”,&lt;br&gt;      defaults: new&lt;br&gt;      {&lt;br&gt;        controller &amp;#x3D; “Home”,&lt;br&gt;        action &amp;#x3D; “Index”,&lt;br&gt;      }&lt;br&gt;  );&lt;/p&gt;
&lt;p&gt;This implementation has the added benefit that I’m not tied to a specific sub directory because it just says, “Any URL that doesn’t have a real file behind it should resolve to this default route.” Of course, you may be thinking, but what about the WEB API route, or any other routes I want in my system.  Well, just make sure this route comes first and you have other routes to cover the real routes you want to be able to support.&lt;/p&gt;
&lt;p&gt;Now, this gets past the objection I had with the first solution.  I no longer have to have a route.  But, why should I need to call the controller?  This is just a static HTML file we are talking about.  I should be able to by pass ASP.NET handling this file and just have IIS serve it up directly to me.&lt;/p&gt;
&lt;h2 id=&#34;Use-the-URL-Rewrite-Module&#34;&gt;&lt;a href=&#34;#Use-the-URL-Rewrite-Module&#34; class=&#34;headerlink&#34; title=&#34;Use the URL Rewrite Module&#34;&gt;&lt;/a&gt;Use the URL Rewrite Module&lt;/h2&gt;&lt;p&gt;A little deeper digging on the search engines reminded me that  I could just setup the &lt;a href=&#34;//www.iis.net/downloads/microsoft/url-rewrite&#34;&gt;URL Rewrite module&lt;/a&gt; to return my main HTML page when no real page is available.  BTW, URL Rewrite is built into IIS Express, so it should work in your development environment if you are using IIS Express as well as under IIS with the module installed. The main step to getting this working is to add the following XML to your Web.config file:&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;system.webServer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;rewrite&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;rules&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;angularjs routes&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;stopProcessing&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;url&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;.*&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;conditions&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;logicalGrouping&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;MatchAll&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;input&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;REQUEST_FILENAME&amp;#125;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;                        &lt;span class=&#34;attr&#34;&gt;matchType&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;IsFile&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;negate&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;input&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;REQUEST_FILENAME&amp;#125;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;                        &lt;span class=&#34;attr&#34;&gt;matchType&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;IsDirectory&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;negate&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;input&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;REQUEST_URI&amp;#125;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;                        &lt;span class=&#34;attr&#34;&gt;pattern&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;^/(api)&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;negate&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;conditions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;action&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Rewrite&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;url&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;rules&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;rewrite&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;system.webServer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You should already have a system.webServer section in your web.config file, so you just need the rewrite rule inside of it.&lt;/p&gt;
&lt;p&gt;Basically what this rule does is that it says, “If you can’t find the file, and the path you are looking for is not a subdirectory of the “api” directory, return the default file at the root.”  The part about the API directory allows your WEB API stuff to continue working.&lt;/p&gt;
&lt;p&gt;The only other thing you will need to do, which isn’t unique to ASP.NET or MVC, is that you will need to remember to add the base tag to the HEAD section of your HTML file.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;base&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;href&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And all of your client side routing with HTML5 issues should be solved. Notice that no ASP.NET code has to run to get this working.  In fact, the only time you’ll need to run ASP.NET is to call the server for data.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
