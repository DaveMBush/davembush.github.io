<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;state-management&#34; tag</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Sat, 19 Nov 2022 12:17:54 -0500</pubDate>
        <lastBuildDate>Sat, 19 Nov 2022 12:17:54 -0500</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/avoiding-ngrx-boilerplate/</guid>
            <title>Avoiding NgRx Boilerplate</title>
            <link>http://davembush.github.com/avoiding-ngrx-boilerplate/</link>
            <category>angular</category>
            <category>ngrx</category>
            <category>state-management</category>
            <pubDate>Sat, 19 Nov 2022 12:17:54 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;One of the recurring complaints I hear about NgRX is that it requires too much boiler plate code. But, it doesn’t have to be this way. In fact, I’ve been working on a project that has a lot of NgRX code and I’ve been able to reduce the amount of boilerplate code to a minimum and gain features in the process.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;If you look at your NgRX code you should find that your actions, reducers, and effects are all very similar. If you don’t find this to be true in your own code, you should consider this a code smell. While how we each use NgRX may vary from project to project, within a project there should be enough consistency that you can reduce the boiler plate code you write and just supply the differences rather than repeating yourself over and over again.&lt;/p&gt;
&lt;h2 id=&#34;NgRX-Entities&#34;&gt;&lt;a href=&#34;#NgRX-Entities&#34; class=&#34;headerlink&#34; title=&#34;NgRX Entities&#34;&gt;&lt;/a&gt;NgRX Entities&lt;/h2&gt;&lt;p&gt;One reason you may find your code does not lend itself to common actions, reducers, and effects is because you have not yet discovered NgRX Entities. NgRX Entities are an “Optional” NgRX add-on that allow you to reduce quite a bit of redundant code, especially in the Reducers where you can just make a call to an Adapter function to do all the work for you. The end result is that your store is an array of IDs and an object of type &lt;code&gt;Record&amp;lt;string, T&amp;gt;&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; describes the shape of your record and &lt;code&gt;string&lt;/code&gt; is the ID of the record. Using this pattern it is very easy to find a record by the ID so we can easily join to slices of our store together using a selector.&lt;/p&gt;
&lt;p&gt;The remainder of this article assumes you are familiar with NgRX Entities and how to use them. If you are not, I recommend you read the &lt;a href=&#34;https://ngrx.io/guide/entity&#34;&gt;NgRX Entity Documentation&lt;/a&gt; and then come back to this article.&lt;/p&gt;
&lt;h2 id=&#34;Actions&#34;&gt;&lt;a href=&#34;#Actions&#34; class=&#34;headerlink&#34; title=&#34;Actions&#34;&gt;&lt;/a&gt;Actions&lt;/h2&gt;&lt;p&gt;The first, very obvious place we find boiler plate code in NgRX is with actions. The more recent release of NgRX already makes creating actions relatively easy by providing the &lt;code&gt;createActionGroup&lt;/code&gt; function. This function allows you to create a group of actions with a single function call. However, it still requires you to provide the action type and the action payload. This is where we can start to reduce the boiler plate code.&lt;/p&gt;
&lt;p&gt;Let’s say, for a start, that all your actions look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityActions = &lt;span class=&#34;title function_&#34;&gt;createActionGroup&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;source&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;events&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Load&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAll&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;ids&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAllSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entities&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt;[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAllFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Create&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CreateSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CreateFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Update&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;UpdateSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;UpdateFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Delete&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;DeleteSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;DeleteFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Even if you create some generator to create this code for you, it is still quite a bit of code that needs to be compiled and shipped to the browser.&lt;/p&gt;
&lt;p&gt;What if, instead, all we had to do was write this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityActions = &lt;span class=&#34;title function_&#34;&gt;createActionGroup&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;All you need to do, for this to work, is create a new &lt;code&gt;createActionGroup&lt;/code&gt; function that returns the NgRX version of the same method with everything filled out.&lt;/p&gt;
&lt;p&gt;Well, “all you have to do” is a bit of an exaggeration as there are some typing issues you’ll need to address.&lt;/p&gt;
&lt;p&gt;Here is the code:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; createActionGroup &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; ngrxCreateActionGroup, props &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./types/ngrx-action-group.type&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * StringLiteralCheck was copied from NgRX because it is hidden.  It forces&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * the source parameter to be a string literal.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;StringLiteralCheck&lt;/span&gt;&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Str&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt; = &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Str&lt;/span&gt; ? &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Name&amp;#125;&lt;/span&gt; must be a string literal type`&lt;/span&gt; : &lt;span class=&#34;built_in&#34;&gt;unknown&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;StringLiteralSource&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&amp;gt; = &lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt; &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;StringLiteralCheck&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;source&amp;#x27;&lt;/span&gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * createActionGroup creates all the actions an entity will need reducing quite a bit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * of boilerplate code.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * The `source` parameter is the same as the `source` parameter in NgRX&amp;#x27;s createActionGroup.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; createActionGroup = &amp;lt;&lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;, T&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;source&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;StringLiteralSource&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;): &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt;&amp;lt;T&amp;gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;ngrxCreateActionGroup&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// because ngrxCreateActionGroup expects a string literal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// we have to cast as any to get around the type check&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this is why we made sure our source parameter does the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// string literal check.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;source&lt;/span&gt;: source &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;events&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Load&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadAll&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;ids&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadAllSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entities&lt;/span&gt;: T[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadAllFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Create&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;CreateSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;CreateFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Update&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;UpdateSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;UpdateFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Delete&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;DeleteSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;DeleteFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that I’ve added a new type &lt;code&gt;NgrxActionGroup&lt;/code&gt; as the return value. This ensures that the return value is strongly typed to the information provided.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt;&amp;lt;T&amp;gt; = &lt;span class=&#34;title class_&#34;&gt;ActionGroup&lt;/span&gt;&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// using any here is the only way I could get this to work&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// without worse hacks or rewriting createActionGroup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Load&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAll&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;ids&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAllSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entities&lt;/span&gt;: T[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAllFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Create&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CreateSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CreateFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Update&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;UpdateSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;UpdateFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Delete&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;DeleteSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;DeleteFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Most of the work in getting that all working correctly was with the strong typing. You may need to tweak for your purposes, but this is the basic idea.&lt;/p&gt;
&lt;p&gt;If you need to add actions that are unique to a particular entity, you can use the &lt;code&gt;createActionGroup&lt;/code&gt; function from NgRX and then return the combined actions using the spread operator.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityActions = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;span class=&#34;title function_&#34;&gt;createActionGroup&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;span class=&#34;title function_&#34;&gt;ngrxCreateActionGroup&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;source&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;events&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;UniqueAction&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Reducers&#34;&gt;&lt;a href=&#34;#Reducers&#34; class=&#34;headerlink&#34; title=&#34;Reducers&#34;&gt;&lt;/a&gt;Reducers&lt;/h2&gt;&lt;p&gt;Reducers are very similar. Once again, NgRX already gives us a way of creating a Reducer function with one call.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityReducer = &lt;span class=&#34;title function_&#34;&gt;createReducer&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  initialState,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(entityActions.&lt;span class=&#34;property&#34;&gt;Load&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; id &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ...state,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;loading&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// etc...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But if the on() code is the same, why repeat it over and over?  Just create a new factory function that specifies what is unique and let it do the rest of the work.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; createReducer = &amp;lt;T, N &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;adapter&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;EntityAdapter&lt;/span&gt;&amp;lt;T&amp;gt;, &lt;span class=&#34;comment&#34;&gt;// EntityAdapter is an NgRX Entities type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;entityName&lt;/span&gt;: N,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;actions&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;): &lt;span class=&#34;title class_&#34;&gt;ActionReducer&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;EntityState&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt; =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;ngrxCreateReducer&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    adapter.&lt;span class=&#34;title function_&#34;&gt;getInitialState&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;load&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; id &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      adapter.&lt;span class=&#34;title function_&#34;&gt;upsertOne&lt;/span&gt;(id, state)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// etc...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now, you can create all your reducers using your new createReducer function.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityReducer = &lt;span class=&#34;title function_&#34;&gt;createReducer&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  entityAdapter,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  entityActions&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Effects&#34;&gt;&lt;a href=&#34;#Effects&#34; class=&#34;headerlink&#34; title=&#34;Effects&#34;&gt;&lt;/a&gt;Effects&lt;/h2&gt;&lt;p&gt;Effects are a little more complicated. The basic idea is that you want to create an generic class with abstract methods it can use to pull in what is different from the class that implements it. To be honest, there is still quite a bit of code you have to write but there are two advantages. Since you are only providing the differences, there is much less code to write and because it is the same code being used everywhere, once you get it working, it works everywhere, reducing the chance of errors.&lt;/p&gt;
&lt;p&gt;Because your code is probably going to look much different than the code I’m using, I’m going to provide samples of the code rather than the full blown implementation.&lt;/p&gt;
&lt;p&gt;This also takes advantage of the new createEffect() function in NgRX 8.0.0.&lt;/p&gt;
&lt;p&gt;Our generic class is going to look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SmartEffects&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * actions is the action group for this entity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;actions&lt;/span&gt;(): &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt;&amp;lt;T&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * adapter is the entity adapter for this entity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;adapter&lt;/span&gt;(): &lt;span class=&#34;title class_&#34;&gt;EntityAdapter&lt;/span&gt;&amp;lt;T&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * updateOperator is the method that will run when the update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   *   action is dispatched.  You would create a similar operator&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   *   method for any other calls you&amp;#x27;d make to the server or other&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   *   insertion points you would need for an effect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;action&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;updateOperator&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// have to use any here because that is how NgRX defines it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;: &amp;#123;&lt;span class=&#34;attr&#34;&gt;row&lt;/span&gt;: T&amp;#125; &amp;amp; &lt;span class=&#34;title class_&#34;&gt;TypedAction&lt;/span&gt;&amp;lt;&lt;span class=&#34;string&#34;&gt;`[&lt;span class=&#34;subst&#34;&gt;$&amp;#123;&lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&amp;#125;&lt;/span&gt;] Update`&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ): &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;T&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You might thing you could use an abstract field instead of  an abstract getter. But, javascript initializes the parent class prior to the child class and the field you need won’t be available when the effects are created.&lt;/p&gt;
&lt;p&gt;You’ll need to make the calls to the createEffect() methods inside the constructor. Again, the order that code gets executed between parent classes and child classes forces this to be done in the constructor.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Once you’ve created a consistent way of using NgRX throughout your code, you not only reduce the amount of boiler plate code you have to write, but you also reduce errors, make your code more maintainable, and create consistency throughout your code which will make it significantly more understandable.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/clean-state-management-with-ngrx/</guid>
            <title>Clean State Management with NgRx</title>
            <link>http://davembush.github.com/clean-state-management-with-ngrx/</link>
            <category>angular</category>
            <category>ngrx</category>
            <category>state-management</category>
            <pubDate>Mon, 04 Jul 2022 12:46:07 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Once again I’ve run into a situation where the code I’m looking at doesn’t resemble how the code was meant to be written.&lt;/p&gt;
&lt;p&gt;I’ve spent the last month fixing bugs that can all be summarized by the following problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducers updating nested data.&lt;/li&gt;
&lt;li&gt;Storing data manipulations that Selectors could perform&lt;/li&gt;
&lt;li&gt;Using Effects as Selectors&lt;/li&gt;
&lt;li&gt;Components doing too much data manipulation&lt;/li&gt;
&lt;li&gt;Too many actions and indirection&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Unfortunately, the people who need to hear this the most are the ones who will never read this article. Some of what I’m about to say, I may have discovered over the last several years of programming but I’m sure I didn’t discover this in isolation.&lt;/p&gt;
&lt;p&gt;So, lets review how NgRX should be used effectively.&lt;/p&gt;
&lt;h2 id=&#34;The-Problem-with-Nested-Data&#34;&gt;&lt;a href=&#34;#The-Problem-with-Nested-Data&#34; class=&#34;headerlink&#34; title=&#34;The Problem with Nested Data&#34;&gt;&lt;/a&gt;The Problem with Nested Data&lt;/h2&gt;&lt;p&gt;If you’ve ever worked on a system with nested state data as part of one slice, you know that updating that nested data is a pain. For those of you who haven’t, having to update that data makes your reducer 10 times longer and 3 times more complicated than it needs to be.&lt;/p&gt;
&lt;p&gt;This means, first, you’ve written more code than you need. This means there is a higher possibility of errors.  But beyond that, the code your customer has to download is also larger than it needs to be.  Worse, because it runs every time the nested data is updated, the code performs slower than it needs to.&lt;/p&gt;
&lt;p&gt;That last point might surprise you. Why does it run slower? Simply because you may end up running that code when it was not necessary.&lt;/p&gt;
&lt;h2 id=&#34;The-Problem-with-Storing-State-the-Way-You-Want-to-Use-It&#34;&gt;&lt;a href=&#34;#The-Problem-with-Storing-State-the-Way-You-Want-to-Use-It&#34; class=&#34;headerlink&#34; title=&#34;The Problem with Storing State the Way You Want to Use It&#34;&gt;&lt;/a&gt;The Problem with Storing State the Way You Want to Use It&lt;/h2&gt;&lt;p&gt;Related to nested data is the urge to store state the way you want to use it later on in the application.&lt;/p&gt;
&lt;p&gt;The main problem with doing this is that you need to make sure that state gets updated correctly from every place you update the raw data. In the process, you will invariably run the the derived state code multiple times when you could have only run it once or in many cases, not at all.&lt;/p&gt;
&lt;p&gt;Instead, you should modify the data into something your presentation needs using Selectors. Since everyone should be using the Selectors to get the information they need, and that selector is looking at the raw data, you can be sure that everyone is getting the correct data. Also, if nothing is listening to the observable that the selector returns, you will not be running the selector code more times than is necessary.&lt;/p&gt;
&lt;p&gt;You also have the advantage of taking advantage of memoization so that this data manipulation only happens when the data is needed and when it changes.&lt;/p&gt;
&lt;h2 id=&#34;Storing-State&#34;&gt;&lt;a href=&#34;#Storing-State&#34; class=&#34;headerlink&#34; title=&#34;Storing State&#34;&gt;&lt;/a&gt;Storing State&lt;/h2&gt;&lt;p&gt;Rule number one of state management is to store state at the most granular level you can. This means, in part, that each slice of your state, the table in your store, should be flat.&lt;/p&gt;
&lt;p&gt;What does it mean that the data is flat? It means that the object only contains primitive values. Strings, number, booleans, dates, or collections of objects that only contain primitive values. Just like you would in a relational database table.&lt;/p&gt;
&lt;p&gt;But, this may not be the most granular level.&lt;/p&gt;
&lt;p&gt;Say you have a row in your database that contains 3 fields that you always want but 50 or so that you only want if a particular presentation is running.  I would recommend creating a slice for the 3 main fields and then another slice or more, for the remaining fields and allow for the fact that you may not have all of them all the time.&lt;/p&gt;
&lt;p&gt;While most systems don’t need this. The system I’m working on does.&lt;/p&gt;
&lt;p&gt;This solves the storing nested data issue.&lt;/p&gt;
&lt;h2 id=&#34;The-Job-of-Effects&#34;&gt;&lt;a href=&#34;#The-Job-of-Effects&#34; class=&#34;headerlink&#34; title=&#34;The Job of Effects&#34;&gt;&lt;/a&gt;The Job of Effects&lt;/h2&gt;&lt;p&gt;Apparently, some people think that the job of an effect is to manipulate data.  But as we’ve already established, manipulating data is the job of selectors. No, the job of Effects is to retrieve data from wherever we are persisting it and to update the persistent store with any changes we’ve made. If we need to manipulate data to do either of those, again, Selectors is where we would do this work.&lt;/p&gt;
&lt;p&gt;Once you’ve narrowed the job of your effects down to this, you no longer need to return multiple actions from an effect.  Ideally an effect should fire one action.  But, no more than two.&lt;/p&gt;
&lt;h2 id=&#34;The-Job-of-Reducers&#34;&gt;&lt;a href=&#34;#The-Job-of-Reducers&#34; class=&#34;headerlink&#34; title=&#34;The Job of Reducers&#34;&gt;&lt;/a&gt;The Job of Reducers&lt;/h2&gt;&lt;p&gt;Reducers only have three jobs: add new data to the slice, remove data from the slice, and update data in the slice. That’s it. If your reducers are doing more than that, you’re doing it wrong.&lt;/p&gt;
&lt;h2 id=&#34;Extra-Credit&#34;&gt;&lt;a href=&#34;#Extra-Credit&#34; class=&#34;headerlink&#34; title=&#34;Extra Credit&#34;&gt;&lt;/a&gt;Extra Credit&lt;/h2&gt;&lt;p&gt;The above, is the bare minimum and may server you well for small projects. However, for larger projects you will want to consider using NgRX Entities.  This will reduce the amount of boiler plate code you need to write as well as making it easy to join your slices however you need to.&lt;/p&gt;
&lt;p&gt;One place in the code I’m working on this would be particularly useful is to see what slice owns another slice.  As the data is stored and returned we only know who the children are most of the time.  To find the parent, we have to iterate through the data to find the child and then look at what parent we are in.&lt;/p&gt;
&lt;p&gt;It gets even more complicated when a row of data could have more than one parent.&lt;/p&gt;
&lt;h2 id=&#34;Thinking-About-Code&#34;&gt;&lt;a href=&#34;#Thinking-About-Code&#34; class=&#34;headerlink&#34; title=&#34;Thinking About Code&#34;&gt;&lt;/a&gt;Thinking About Code&lt;/h2&gt;&lt;p&gt;The last point I want to make regarding state management is that how we think about our code impacts how we write our code.&lt;/p&gt;
&lt;p&gt;I’ve discovered over the years that most of us think about code from a GUI perspective. But, by doing this, we also tend to put a lot of logic in our components and keep doing so, until that doesn’t work any more. At that point, we start to consider state management.&lt;/p&gt;
&lt;p&gt;But what if we thought about code strictly from a data perspective? If every time you thought about the code you were writing and though, “what if I didn’t have a presentation layer? What problem am I trying to solve really? How can I do this without a presentation layer?” Then, your code would be more flexible, easier to maintain, and more scalable.&lt;/p&gt;
&lt;p&gt;How would it be more flexible?&lt;/p&gt;
&lt;p&gt;Back as the dotCom days were starting I had a manager come to me with a VB6 😝 application he had had build and said, “I’d like to take this code and run it on the web, or from a phone, or from the desktop.”  And my response to him was, “You can’t get their from here.” because the code was so tightly coupled to the presentation layer.&lt;/p&gt;
&lt;p&gt;But to bring it today, we often have the same kind of requirements. We originally solve a problem only to have our managers come to us with a new requirement that suggest using the same data to look at the code in a different way.  If all your data logic is in the presentation layer, you might achieve the goal but you’ll also have a lot of duplicate code if you are very careful. But, lets say you manage to pull that off. Six months later you are working on a bug in one of those two views. You fix it, but you forget about that other view and never think to fix it there too. And this is where your troubles begin.&lt;/p&gt;
&lt;p&gt;By pushing code as far down the stack as is practical, you reduce the amount of code you write, reduce the size of the code that your customer has to download, reduce the code you have to maintain, and in the case of NgRX end up writing code that performs faster.&lt;/p&gt;
&lt;p&gt;So, how might you force yourself to think in this way? By following this simple rule: Presentational components should only 1) display the data they’ve been give or 2) fire events indicating that some action has taken place.&lt;/p&gt;
&lt;p&gt;There is another type of component generally referred to as “Smart” components. They too have a rule. They should only 1) retrieve data from the store via Selectors and 2) fire actions to update the Store or trigger an Effect.&lt;/p&gt;
&lt;h2 id=&#34;Storing-Ancillary-State&#34;&gt;&lt;a href=&#34;#Storing-Ancillary-State&#34; class=&#34;headerlink&#34; title=&#34;Storing Ancillary State&#34;&gt;&lt;/a&gt;Storing Ancillary State&lt;/h2&gt;&lt;p&gt;Thinking about your code this way leads to the last point I want to make. If your data is always your single source of truth, you’ll want to store information in the Store that will help you determine things like sort order and filtering as well as other information that may be in your form.&lt;/p&gt;
&lt;p&gt;Personally, I tend to store all my form data in my store beyond, and including, the data I need to send back to the server. This helps me derive the data for my presentation layer and allows my actions to have smaller payloads.&lt;/p&gt;
&lt;p&gt;Many of you send all your form data with your action to update the database because you still think of the update as something the presentation layer is doing. The way I work with data is I just send an action that notifies the store that I want to update the data with the data from my form. The Effect grabs that data from the store and sends it to the server.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;While I’ve centered the discussion above to NgRX. The main ideas port to other methods of state management including things like Redux, MobX, and even Apollo GraphQL.&lt;/p&gt;
&lt;p&gt;By following the above architecture and design patterns your code will be easier to maintain, have fewer bugs and scale better.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
