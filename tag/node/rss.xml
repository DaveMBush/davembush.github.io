<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;node&#34; tag</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Tue, 02 Aug 2016 06:30:00 -0400</pubDate>
        <lastBuildDate>Tue, 02 Aug 2016 06:30:00 -0400</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/you-can-start-using-node-today/</guid>
            <title>You Can Start Using Node Today</title>
            <link>http://davembush.github.com/you-can-start-using-node-today/</link>
            <category>javascript</category>
            <category>node</category>
            <category>npm</category>
            <category>nvm</category>
            <pubDate>Tue, 02 Aug 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I was just getting started writing an article about using Node&amp;#x2F;JavaScript to drive my Selenium tests and as I was writing the “Prerequisite” section, I realized I have never written the basics about how to get setup with Node or even why you would want to.&lt;/p&gt;
&lt;p&gt;As popular as Node is, I am still finding that many of the people I work with have no idea what it is or if they do, they only have a partial idea and can’t see how it would apply to the work they do on a daily basis.&lt;/p&gt;
&lt;p&gt;So, let’s start with the fundamentals.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/07/image-4.png &#34;You Can Start Using Node Today&#34;)&lt;figcaption&gt;Photo credit: [stevendepolo](//www.flickr.com/photos/stevendepolo/5749192025/) via [VisualHunt.com](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-is-Node&#34;&gt;&lt;a href=&#34;#What-is-Node&#34; class=&#34;headerlink&#34; title=&#34;What is Node?&#34;&gt;&lt;/a&gt;What is Node?&lt;/h2&gt;&lt;p&gt;I think the best place to start with our introduction is by providing a comprehensive view of what Node is.  A rather simplistic description would be, “Node is the V8 JavaScript engine from the Chrome browser, wrapped in an executable, that lets you run JavaScript without a browser.” Now, with that simplistic definition, you might think, “Why would I want to do that?”  Maybe you are assuming that this implementation only lets you do the same stuff that you can do in the browser.  And this is where you would be wrong.&lt;/p&gt;
&lt;p&gt;So, let’s start over.&lt;/p&gt;
&lt;p&gt;Node allows you to write cross platform applications that will run directly on your computer using JavaScript as the language.&lt;/p&gt;
&lt;p&gt;And now I hear everyone thinking, “Yeah, yeah, that was the promise of Java.” OK.  Maybe that’s true.  Time will tell.&lt;/p&gt;
&lt;h2 id=&#34;What-Can-You-Do-with-Node&#34;&gt;&lt;a href=&#34;#What-Can-You-Do-with-Node&#34; class=&#34;headerlink&#34; title=&#34;What Can You Do with Node?&#34;&gt;&lt;/a&gt;What Can You Do with Node?&lt;/h2&gt;&lt;p&gt;Several well-known applications use Node.  You may be surprised at how much node is already being used.  Here’s a short list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many Web Servers&lt;/li&gt;
&lt;li&gt;Desktop Applications&lt;/li&gt;
&lt;li&gt;Developer Build Processes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Does any of that surprise you? There is a &lt;a href=&#34;//github.com/nodejs/node/wiki/Projects,-Applications,-and-Companies-Using-Node&#34;&gt;long list of companies&lt;/a&gt; who are using Node for some part of their development process or infrastructure.  Some more notable implementations include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VS Code by Microsoft – a code editor built using Node and Electron.&lt;/li&gt;
&lt;li&gt;Slack Desktop App – uses Node and Electron&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, you can do just about anything you can think of.&lt;/p&gt;
&lt;h2 id=&#34;Installing-Node&#34;&gt;&lt;a href=&#34;#Installing-Node&#34; class=&#34;headerlink&#34; title=&#34;Installing Node&#34;&gt;&lt;/a&gt;Installing Node&lt;/h2&gt;&lt;p&gt;This falls under the category of “Things I wish I had known.” You can just go to the &lt;a href=&#34;//nodejs.org/en/&#34;&gt;Node site&lt;/a&gt; and download the version you want to use.  But at some point, you are going to want to use multiple versions of Node.  One version for one project and a different version for some other project.  For that, you are going to need a tool called ‘NVM’.  Life will be a lot easier if you just install NVM first and then install Node from there.&lt;/p&gt;
&lt;p&gt;If you are running Windows, you’ll want to &lt;a href=&#34;//github.com/coreybutler/nvm-windows/releases&#34;&gt;grab NVM from here&lt;/a&gt;.  Everyone else can &lt;a href=&#34;//github.com/creationix/nvm&#34;&gt;get NVM from here&lt;/a&gt;. Once you have NVM installed, you should be able to run &lt;code&gt;nvm install _version.number.here_&lt;/code&gt; or you can run &lt;code&gt;nvm install node&lt;/code&gt; To install the latest version.&lt;/p&gt;
&lt;p&gt;You can run this command for each version you want to have installed.&lt;/p&gt;
&lt;p&gt;To see which versions are installed, you can run &lt;code&gt;nvm ls&lt;/code&gt; And to use a specific version you can run &lt;code&gt;nvm use _version.number.here_&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;Using-the-Node-Package-Manager&#34;&gt;&lt;a href=&#34;#Using-the-Node-Package-Manager&#34; class=&#34;headerlink&#34; title=&#34;Using the Node Package Manager&#34;&gt;&lt;/a&gt;Using the Node Package Manager&lt;/h2&gt;&lt;p&gt;When you installed Node, you also installed the Node Package Manager(NPM).  For those of you who are coming from the Microsoft world, NPM is like NuGet.  It is how we install additional “Modules” (think libraries) into our Node environment.&lt;/p&gt;
&lt;p&gt;The commands for NPM are pretty straight forward and most of the time, the documentation will tell you exactly what command to run to get it into your development environment.  But, it is helpful to know why you are running the various commands.&lt;/p&gt;
&lt;p&gt;But, before you start installing Node packages into your development environment, you are going to want a package.json file.  The easiest way to create this in a form that NPM can use is to use the command &lt;code&gt;npm init&lt;/code&gt; which will walk you through all of the questions you need to answer to create a proper package.json file.&lt;/p&gt;
&lt;p&gt;The next command you are going to encounter is &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;npm install&lt;/code&gt; has several switches that you’ll be using.  Each with a different purpose.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install _packagename_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will install the most recent version of the package into your node_modules directory and record the dependency in your package.json file in the dependencies section.&lt;/p&gt;
&lt;p&gt;If you want to be explicit about where you are saving the file you can use the &lt;code&gt;--save&lt;/code&gt; flag.  It does the same thing as &lt;code&gt;npm install package&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save _packagename_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Your other option for saving is&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--save-dev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This puts the dependency in the devDependencies section.&lt;/p&gt;
&lt;p&gt;You might wonder why you would have two different dependency sections.&lt;/p&gt;
&lt;p&gt;The reason for this is because you might have modules that you need simply to build the project. They aren’t needed when you deploy the project. So having the two different sections allows you to deploy without the extra set of modules.&lt;/p&gt;
&lt;h2 id=&#34;Node-JavaScript&#34;&gt;&lt;a href=&#34;#Node-JavaScript&#34; class=&#34;headerlink&#34; title=&#34;Node JavaScript&#34;&gt;&lt;/a&gt;Node JavaScript&lt;/h2&gt;&lt;p&gt;I once had someone assert that even within the same versions of JavaScript, there are different versions of JavaScript.  His main point was that there are differences between JavaScript on the browser and JavaScript in Node.  I assert, they are the same version of JavaScript, but the API that is available, or required, is different based on the environment.&lt;/p&gt;
&lt;p&gt;So, JavaScript on Node is syntactically no different from the JavaScript you write now.  However, Node does solve an age old problem we’ve had in client side code automatically. This problem is global scope pollution. If we write JavaScript that looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Without wrapping the code in a function, the code will end up in global scope.&lt;/p&gt;
&lt;p&gt;The fix for this is to wrap all of our files in immediately invoked function expressions (IIFEs).  I’ve written about using IIFEs before as a best practice for Angular programming.  In fact, it is a best practice for all client side JavaScript programming.&lt;/p&gt;
&lt;p&gt;But, in Node it is completely unnecessary because Node puts each file in its own scope.  Putting something on the global scope is something you have to do intentionally.  This is good, but it does require us to write some extra code.&lt;/p&gt;
&lt;p&gt;You see, the problem is, if all of the code we write is only local to the file we write it in, how are we going to be able to write code in a modular fashion?  We don’t want all of our code in one monolithic file.&lt;/p&gt;
&lt;h2 id=&#34;Modules&#34;&gt;&lt;a href=&#34;#Modules&#34; class=&#34;headerlink&#34; title=&#34;Modules&#34;&gt;&lt;/a&gt;Modules&lt;/h2&gt;&lt;p&gt;So, to handle this problem, Node implements two keywords&amp;#x2F;functions&amp;#x2F;variables (depends on how you think about it) We’ll just call them keywords for now.&lt;/p&gt;
&lt;p&gt;The first is the requires() keyword.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; foo = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;fooScript&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This says go find the script “fooScript.js” and assign what was exported from it to our “foo” variable.  If the file you need to require has been installed with NPM, then all you need is the name of the module, like I did above.  But if you are requiring in a file from your own code, you’ll need to require using a path reference.  For you Windows people, this always works using forward slashes (&amp;#x2F;) not backslash (\).&lt;/p&gt;
&lt;p&gt;This probably leaves you asking the question, how does fooScript expose its content to the module requiring it? With code that looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;exports&lt;/span&gt; = fooFunc;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This line normally appears at the end of a file.  In the case of the line above, assume that fooFunc is a function that is defined somewhere above the module.exports line. You could also write the exports using:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;exports&lt;/span&gt; = fooFunc;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;They do the same thing.&lt;/p&gt;
&lt;p&gt;If our fooFunc is in a file named “fooScript.js” then our foo variable above can call the fooFunc() function by using foo.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var foo = require(&amp;#x27;fooScript&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;foo(); // this line calls fooFunc() in fooScript.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optimizations&#34;&gt;&lt;a href=&#34;#Optimizations&#34; class=&#34;headerlink&#34; title=&#34;Optimizations&#34;&gt;&lt;/a&gt;Optimizations&lt;/h2&gt;&lt;p&gt;What took me a while to grasp is that you can export anything.  A function, a variable, an object.  It really doesn’t matter.  But you have to be aware of some optimizations that Node makes for you.&lt;/p&gt;
&lt;p&gt;You see, it would be pretty stupid to process the file every time it was required into another file.  So rather than do that, Node caches the export and assigns that the next time it is required.  If you export an object, the next time you require it, you will get the same object.  So an exported object becomes a singleton.  If you want to be able to create new objects, you are better off exporting the function (or class in ES2015) that creates the object and new-ing it up when you need it.&lt;/p&gt;
&lt;h2 id=&#34;Your-Turn&#34;&gt;&lt;a href=&#34;#Your-Turn&#34; class=&#34;headerlink&#34; title=&#34;Your Turn&#34;&gt;&lt;/a&gt;Your Turn&lt;/h2&gt;&lt;p&gt;So, now it is your turn.  If you have not tried using Node.js install it and try a few things.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/node-js-tools-for-visual-studio/</guid>
            <title>Node.js Tools For Visual Studio</title>
            <link>http://davembush.github.com/node-js-tools-for-visual-studio/</link>
            <category>javascript</category>
            <category>express</category>
            <category>node</category>
            <pubDate>Thu, 02 Apr 2015 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/03/NodeJsInVisualStudioProjectList.png&#34; alt=&#34;NodeJsInVisualStudioProjectList&#34; title=&#34;NodeJsInVisualStudioProjectList&#34;&gt;&lt;/p&gt;
&lt;p&gt;Several weeks ago now, I started learning &lt;a href=&#34;//nodejs.org/&#34;&gt;Node.js&lt;/a&gt;.  Why?  Well, for a couple of reasons.  First, all the cool kids are using Node.js.  Second, I wanted to use &lt;a href=&#34;//gotwarlost.github.io/istanbul/&#34;&gt;Istanbul&lt;/a&gt; to get an idea of how well my javascript code is covered by test and that runs under Node.js.  Third, &lt;a href=&#34;//blogs.msdn.com/b/webdev/archive/2015/03/19/customize-external-web-tools-in-visual-studio-2015.aspx&#34;&gt;Node.js is going to show up in the next version of Visual Studio&lt;/a&gt;.  And finally, I just like to learn new stuff.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Node-JS&#34;&gt;&lt;a href=&#34;#Node-JS&#34; class=&#34;headerlink&#34; title=&#34;Node.JS&#34;&gt;&lt;/a&gt;Node.JS&lt;/h2&gt;&lt;p&gt;So, I started by installing node and just working in Visual Studio as though my node project was a web site.  It works, but it isn’t pretty.  But it did get me familiar with some basic concepts like using the node package manager (npm) to install what I needed to get Istanbul running.  For those of you who aren’t familiar with npm, it is basically NuGet for node.js.&lt;/p&gt;
&lt;h2 id=&#34;Istanbul-JavaScript-Code-Coverage&#34;&gt;&lt;a href=&#34;#Istanbul-JavaScript-Code-Coverage&#34; class=&#34;headerlink&#34; title=&#34;Istanbul JavaScript Code Coverage&#34;&gt;&lt;/a&gt;Istanbul JavaScript Code Coverage&lt;/h2&gt;&lt;p&gt;For those of you who are interested, I used the instructions &lt;a href=&#34;//ariya.ofilabs.com/2013/10/code-coverage-of-jasmine-tests-using-istanbul-and-karma.html&#34;&gt;here&lt;/a&gt; for getting Istanbul working locally.  They should probably be updated because the example there doesn’t have a good configuration example.  I filled in the rest of what I needed to know from the &lt;a href=&#34;//karma-runner.github.io/0.12/&#34;&gt;Karma site&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Node-for-Visual-Studio&#34;&gt;&lt;a href=&#34;#Node-for-Visual-Studio&#34; class=&#34;headerlink&#34; title=&#34;Node for Visual Studio&#34;&gt;&lt;/a&gt;Node for Visual Studio&lt;/h2&gt;&lt;p&gt;So then I had heard that work was being done on a plugin for Visual Studio 2013 that would allow me to work on Node projects from within Visual Studio.  I found out about this first from &lt;a href=&#34;//www.hanselman.com/blog/IntroducingNodejsToolsForVisualStudio.aspx&#34;&gt;Scott Hanselman’s blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I went  to the &lt;a href=&#34;//nodejstools.codeplex.com/&#34;&gt;plugin site&lt;/a&gt; and got the download and installed it.  This is all pretty straight forward.  Don’t forget, you’ll ALSO need to install node.  So, don’t forget that step.&lt;/p&gt;
&lt;p&gt;OK.  Now that you have the NTVS installed (that’s what they call the plugin) what do you have? Well, you have several new project templates that you can use.  That’s what.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/03/NodeJsInVisualStudioProjectList1.png&#34; alt=&#34;NodeJsInVisualStudioProjectList&#34; title=&#34;NodeJsInVisualStudioProjectList&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Interactive-JavaScript&#34;&gt;&lt;a href=&#34;#Interactive-JavaScript&#34; class=&#34;headerlink&#34; title=&#34;Interactive JavaScript&#34;&gt;&lt;/a&gt;Interactive JavaScript&lt;/h2&gt;&lt;p&gt;But that’s not all you get, you also get an interactive Node.js window that you can get to from the Tools menu (Tools –&amp;gt; Node.js Tools –&amp;gt; Node.js Interactive window) or by pressing the keyboard shortcut, Ctrl+K, N.  Inside this window you can execute JavaScript on the fly: &lt;img src=&#34;/uploads/2015/03/NodeJsInteractiveWindow.png&#34; alt=&#34;NodeJsInteractiveWindow&#34; title=&#34;NodeJsInteractiveWindow&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Node-Package-Manager-in-Visual-Studio&#34;&gt;&lt;a href=&#34;#Node-Package-Manager-in-Visual-Studio&#34; class=&#34;headerlink&#34; title=&#34;Node Package Manager in Visual Studio&#34;&gt;&lt;/a&gt;Node Package Manager in Visual Studio&lt;/h2&gt;&lt;p&gt;Or install other node packages:&lt;/p&gt;
&lt;p&gt;.npm install yourPackageNameHere&lt;/p&gt;
&lt;p&gt;Don’t forget the leading period.  That’s the indication to the window that it needs to do something different from executing javascript in the window.&lt;/p&gt;
&lt;p&gt;Even as I’m writing this, I’m seeing that there is a lot more here than I’m actually telling you now.&lt;/p&gt;
&lt;h2 id=&#34;Starting-a-New-Project&#34;&gt;&lt;a href=&#34;#Starting-a-New-Project&#34; class=&#34;headerlink&#34; title=&#34;Starting a New Project&#34;&gt;&lt;/a&gt;Starting a New Project&lt;/h2&gt;&lt;p&gt;Now, the best way of learning something is by creating some kind of product.  Even if it is for your own use.  So, the next thing I did was to try to create a project.  I have a specific project in mind that should use MongoDB for the database (I’ve been meaning to learn NoSQL for a while now) and since Express seems to come with NTVS, I guess I’ll use that for my web server.  Oh and Angular for the front end.&lt;/p&gt;
&lt;p&gt;Since I was creating a web site, I thought, I should create a new web project that uses node.  In fact, it shows up  in the list of web sites types that you can create.  However, I got an error when I did that, and I don’t see anything in the documentation that says I should be able to use those templates or that I need anything extra to use them.&lt;/p&gt;
&lt;p&gt;However, if you use the project options, you can create a web application.  I decided going with newer is better than older, so I’ve created a “Basic Node.js Express 4 Application”.&lt;/p&gt;
&lt;h2 id=&#34;The-Fun-Is-Just-Beginning&#34;&gt;&lt;a href=&#34;#The-Fun-Is-Just-Beginning&#34; class=&#34;headerlink&#34; title=&#34;The Fun Is Just Beginning&#34;&gt;&lt;/a&gt;The Fun Is Just Beginning&lt;/h2&gt;&lt;p&gt;And now, this is where the fun begins.  Where’s my HTML?  What’s all this “template” stuff?  And how do I install Angular?  Or do I do that manually since it isn’t a server side thing? So much to learn.  But, that’s for another post.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/selenium-grid-setup/</guid>
            <title>Selenium Grid Setup</title>
            <link>http://davembush.github.com/selenium-grid-setup/</link>
            <category>node</category>
            <category>selenium</category>
            <category>grid</category>
            <category>hub</category>
            <pubDate>Thu, 08 Jan 2015 07:00:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/01/SeleniumGridSetup.png&#34; alt=&#34;SeleniumGridSetup&#34; title=&#34;SeleniumGridSetup&#34;&gt;&lt;/p&gt;
&lt;p&gt;My experience with setting up Selenium Grid was frustrated by the lack of information available about exactly what I needed to do to get this working.&lt;/p&gt;
&lt;p&gt;I’ve actually had this working for a while now and I’ve set it up, or helped others set it up now, several times.  So, I guess it is time to write a post about it so I can just send people here when I need to explain the setup.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Note, the following discussion already assumes you know something about how to use Selenium without the Grid so there won’t be a lot of code here other than what is need to get the Grid up and running so you can run your test on it.  First, we need to discuss the basic configuration of a Selenium Grid setup.  There are two main parts.  A Selenium Hub, and Selenium Nodes.  The Hub is what your test code will talk to.  Think of it as the traffic cop to all the browsers you want to test.&lt;/p&gt;
&lt;p&gt;The Selenium Nodes register themselves with the Hub and tell the Hub what browsers they support.&lt;/p&gt;
&lt;p&gt;You will only have one Hub, but you might have multiple nodes.  In my basic configuration, I have two nodes running on the same computer as my Hub that support the current version of FireFox and the current version of IE, since those are the only browsers that are officially supported by the organization I am working at.  (These are private sites, and yes, everyone knows Chrome is better than either of those, but you know how fast policies change in large organizations.) OK, so much for theory, here is how to setup your system.&lt;/p&gt;
&lt;p&gt;First, on the computers that you will be running the Hub and the Nodes on, create a directory to hold all the files you will need. I generally put all of my files in c:\selenium.  It makes them really easy to find.&lt;/p&gt;
&lt;p&gt;Since the Selenium Grid runs using Java, make sure you have that installed on the computers you need to run the Hub and Nodes on.&lt;/p&gt;
&lt;p&gt;OK.  Enough setup.  Now for the actually Selenium Grid files you are going to need.&lt;/p&gt;
&lt;p&gt;Download the selenium server JAR file.  There is a link to it under the “Selenium Server” section of this page: &lt;a href=&#34;//www.seleniumhq.org/download/&#34; title=&#34;http://www.seleniumhq.org/download/&#34;&gt;http://www.seleniumhq.org/download/&lt;/a&gt;.  The current file name is “selenium-server-standalone-2.44.0.jar”.  Place the file in the selenium directories you created.  This is the jar file you will run for both the Hub and the Nodes so you’ll need this on every computer you plan to run the Grid on.&lt;/p&gt;
&lt;p&gt;For the various browsers you want to run on that need a separate driver, like IE, you’ll also want to download and install the appropriate driver server from that same page and place the EXE on the computer that you plan to run that browser on.&lt;/p&gt;
&lt;p&gt;Now to get this running.&lt;/p&gt;
&lt;p&gt;You’ll want to put the following in a cmd file and place the cmd file in the Selenium directory with all the other stuff on your Hub computer:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;&amp;#123;path to your java directory&amp;#125;\java.exe&amp;quot; -jar&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    selenium-server-standalone-2.44.0.jar -role hub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This will run the Hub on port 4444.  This is all you need to do.  You should end up with a console window that looks like this: &lt;img src=&#34;/uploads/2015/01/Hub1.png&#34; alt=&#34;Hub&#34; title=&#34;Hub&#34;&gt; The next script you will need to create is the script that will run the node.  Since I only need FireFox and IE11, I run this on the same computer.  I’ll first provide you with that script and then explain it so that you can adapt it for your own situation.&lt;/p&gt;
&lt;p&gt;Here’s the script:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;&amp;#123;path to your java directory&amp;#125;\java.exe&amp;quot; -jar&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    selenium-server-standalone-2.44.0.jar -role&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    node -hub http://localhost:4444/grid/register/ -browser&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    browserName=firefox,maxInstances=5,platform=WINDOWS -browser&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    browserName=&amp;quot;internet explorer&amp;quot;,version=11,maxInstances=5,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    platform=WINDOWS,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Dwebdriver.ie.driver=c:\Selenium\IEDriverServer.exe&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The first thing you should note is that we’ve specified the role as “node” with the –role node flag.&lt;/p&gt;
&lt;p&gt;Since we are a Node, we also have to tell the node where the Hub is so that it can register itself with the Hub.  That is what the –hub &lt;a href=&#34;http://localhost:4444/grid/register/&#34;&gt;http://localhost:4444/grid/register/&lt;/a&gt; parameter is for.  If you are placing a node on a computer other than the same computer as the Hub, you will obviously need to change the  URL to point back to the Hub computer instead  of localhost.&lt;/p&gt;
&lt;p&gt;Everything past this point tells the Hub what browsers are supported on this Node.  So, you’ll notice we have two –browser parameters.  One for FireFox and one for IE.  The browser parameter is all one long string.  To specify IE, you’ll want to specify “internet explorer”.  Note the quote marks and the space.  It took me a while to figure this part out.  The next browser parameter is maxInstances and it tells the Hub how many instances of the browser can run on this node.  I hardly ever have more than one running at a time, but specifying 5 allows me to run test even if something goes wrong.  If something does go wrong, the instance will eventually close itself.&lt;/p&gt;
&lt;p&gt;The next parameter, platform, tells the Hub what platform we are running on.  You may not need  this if all of your platforms are the same.  But if you are running FireFox on Mac, Windows, and Linux, you’ll want to specify this.&lt;/p&gt;
&lt;p&gt;Since I only ever test the most recent version of FireFox, I haven’t specified a version for FireFox, but for IE, there was a time when I was testing IE11 and IE8.  So, I have the version, 11, specified here for IE to tell the hub that this node runs IE11.&lt;/p&gt;
&lt;p&gt;The final parameter it took me quite a while to figure out was the –Dwebdriver.ie.driver.  This is how you tell the Node where the IEDriverServer lives.  I imagine there is a similar parameter for the other drivers as well.&lt;/p&gt;
&lt;p&gt;When you run this code, it will look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/01/Node1.png&#34; alt=&#34;Node&#34; title=&#34;Node&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you need the –Dwebdriver config information for another browser, you can google for Dwebdriver, and you should be able to find it.  Since the only officially supported Selenium driver is the IE driver, the config for the others may depend on the vendor who supplied the driver.  Oh, the joys of open source.&lt;/p&gt;
&lt;p&gt;And now, of course, to use all of this, you’ll need to specify in your code that you want to use the Grid drivers and through that, you’ll specify what browser you want the code to run on.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; driver = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; RemoteWebdriver(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Uri(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://&amp;#123;pathToHub&amp;#125;:4444/wd/hub&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DesiredCapabilities.Firefox());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Or&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; driver = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; RemoteWebdriver(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Uri(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://&amp;#123;pathToHub&amp;#125;:4444/wd/hub&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DesiredCapabilities.InternetExplorer())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Finally, someone might say, “so why go to all this trouble when you could just use something like SauceLabs?” Well, even if you have SauceLabs setup for your continuous integration, I think you’ll still need something setup while you are creating your tests.  Yes, you could run without the grid while you are writing your test and use the grid as part of your continuous integration process, but my experience is that the grid works just enough differently that you are really better off creating your test using the grid.&lt;/p&gt;
&lt;p&gt;In my current situation, I have a virtual machine setup to run my test.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
