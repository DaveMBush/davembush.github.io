<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;programming&#34; tag</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Tue, 05 Dec 2017 06:30:32 -0500</pubDate>
        <lastBuildDate>Tue, 05 Dec 2017 06:30:32 -0500</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/humpty-dumpty-and-programming/</guid>
            <title>Humpty Dumpty and Programming</title>
            <link>http://davembush.github.com/humpty-dumpty-and-programming/</link>
            <category>programming</category>
            <category>agile</category>
            <category>design patterns</category>
            <pubDate>Tue, 05 Dec 2017 06:30:32 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve noticed a pattern in the programming world at large both with programmers and with managers.  We define things how we want them to be for our organization and not how they are.  We are like Humpty Dumpty who says, “When I use a word … it means just what I choose it to mean – neither more nor less.” &lt;/p&gt;
&lt;p&gt;There are two places where I see this pattern manifesting.  The Agile movement and Design Patterns. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/12/2017-12-05.png&#34; title=&#34;Humpty Dumpty and Programming&#34;&gt; Photo by &lt;a href=&#34;//visualhunt.com/author/f31767&#34;&gt;aturkus&lt;/a&gt; on &lt;a href=&#34;//visualhunt.com/re/b4881b&#34;&gt;Visualhunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Agile&#34;&gt;&lt;a href=&#34;#Agile&#34; class=&#34;headerlink&#34; title=&#34;Agile&#34;&gt;&lt;/a&gt;Agile&lt;/h2&gt;&lt;p&gt;Longtime readers are familiar with my rants against the failure of Agile.  Ever job interview I go to eventually ends up asking the same question. &lt;/p&gt;
&lt;p&gt;“Have you ever worked in an Agile organization before?” &lt;/p&gt;
&lt;p&gt;I have a lot of issues with this question, but my answer is always the same.  “I’ve worked in several organizations that call themselves Agile, but I’ve yet to work in one that really is.”  And there is the problem.  Even if I say I’ve worked in an Agile organization, there is no possible way you can be sure I’ve worked in an Agile organization that defines Agile the way you describe Agile.  So, why even ask the question? &lt;/p&gt;
&lt;p&gt;It is like Humpty Dumpty trying to explain the meaning of the poem &lt;a href=&#34;//www.jabberwocky.com/carroll/jabber/jabberwocky.html&#34;&gt;Jabberwocky&lt;/a&gt;. We define Agile with the bits we like and ignore the bits we don’t like or don’t understand, like the 4 blind men “looking” at an elephant and then wonder why it doesn’t really work for our organization. &lt;/p&gt;
&lt;p&gt;Next time someone ask me that question, I may just answer the question with another question, “Why do you ask?” or “How do you define ‘Agile’?” &lt;/p&gt;
&lt;p&gt;Seriously! What’s the point of asking the question when it doesn’t tell you anything about the applicant you are interviewing?  Agile has become such a major buzzword that I doubt you’ll find any applicants that haven’t worked in an organization that calls itself “Agile.”&lt;/p&gt;
&lt;h2 id=&#34;Design-Patterns&#34;&gt;&lt;a href=&#34;#Design-Patterns&#34; class=&#34;headerlink&#34; title=&#34;Design Patterns&#34;&gt;&lt;/a&gt;Design Patterns&lt;/h2&gt;&lt;p&gt;The more popular the design pattern, the more likely we are to see the exact same issues in our programming.  Currently, we can most clearly see this in the MV* design pattern.  Here again, people are using the design pattern based on what they imagine it to be. &lt;/p&gt;
&lt;p&gt;In an article I wrote several months ago, someone recently commented about MVVM, “Isn’t that the way MVVM works? views don’t have business login, only pure “view” logic, the ViewModel is the one having business logic.” &lt;/p&gt;
&lt;p&gt;This is a common misconception.  That the ViewModel, or the Controller, or the Presenter (MVP) are where our business logic go.  This completely ignores the fact that MV* is a View layer design pattern.  The View part of the MV* is the part within the larger View layer that is responsible for rendering state.&lt;/p&gt;
&lt;h2 id=&#34;A-Community-of-Hacks&#34;&gt;&lt;a href=&#34;#A-Community-of-Hacks&#34; class=&#34;headerlink&#34; title=&#34;A Community of Hacks?&#34;&gt;&lt;/a&gt;A Community of Hacks?&lt;/h2&gt;&lt;p&gt;Are we just a community of hacks?  I think maybe we are. All we care about is that we’ve shipped some code. We, largely, don’t care about our craft.  If we were artist, we starve.  Not because artist starve (which is a myth by the way) but because the code we produce is so crappy, no one would consider it valuable. &lt;/p&gt;
&lt;p&gt;If we built houses, we’d never get past the building inspectors.  If we were architects, the houses would never get built because the plans are too confusing. &lt;/p&gt;
&lt;p&gt;The blessing and the curse of programming is that we can change things quickly.  Because we can change things quickly, this has us believing there is no need to be careful. &lt;/p&gt;
&lt;p&gt;Each year we need more and more programmers to work on code because the codebase becomes crappier each year.  No one cares.  In the 30 years I’ve been programming, I’ve only had my code reviewed as a practice in two organizations.  That alone should tell you something about the state of our code.  And for all the claims about being Agile, none have used any best practices that grew out of Extreme Programming!&lt;/p&gt;
&lt;h2 id=&#34;What-If&#34;&gt;&lt;a href=&#34;#What-If&#34; class=&#34;headerlink&#34; title=&#34;What If?&#34;&gt;&lt;/a&gt;What If?&lt;/h2&gt;&lt;p&gt;In previous post I’ve explored both sides of the technical interview process.  Up until recently, the technical interviews focused on the language, the framework, the tools.  And we try to develop an interview process that assures us that the applicant can actually use those tools.  Then when we hire them, and they can’t actually code. We wonder why? &lt;/p&gt;
&lt;p&gt;What if we got beyond tools to how people think?&lt;/p&gt;
&lt;h2 id=&#34;Code-Puzzles&#34;&gt;&lt;a href=&#34;#Code-Puzzles&#34; class=&#34;headerlink&#34; title=&#34;Code Puzzles&#34;&gt;&lt;/a&gt;Code Puzzles&lt;/h2&gt;&lt;p&gt;Recently, I’ve been challenging myself with coding puzzles that are typically used at places like Google, Facebook and Amazon.  Problems that get at issues such as BigO notation, Binary Trees,  Memoization and much more.  I’m doing this for several reasons.  First, working on problems like this reminds me that I’m really not all that smart.  Oh, I can get by, but I don’t challenge myself to produce the best code possible.  Maybe the rant above is more about me than the industry, but I don’t think so.  I think I’ve risen (or more accurately, sunk) to the level of the people I’m surrounded by who themselves are only as high as the people they’ve been working with. &lt;/p&gt;
&lt;p&gt;I’m also doing these problems because being able to do them will inform my code.  Maybe I’ll never actually need to know about depth first vs breath first searches of a binary tree, but if I can do those problems, I will have additional tools in my toolbox when I code the mundane things.  &lt;/p&gt;
&lt;p&gt;And finally, these kinds of problems almost always have edge cases I don’t see.  I really need to get better at discovering edge cases before my clients do. &lt;/p&gt;
&lt;p&gt;And now, here’s the big question.  If these are the kind of questions that Google, Facebook, Amazon and others are using, what do they know that other companies don’t?  Could it be that hiring programmers that can answer these kinds of questions not only ensures that the quality of the code is better, but is actually cheaper in the long run?  Why not hire programmers who are a dime a dozen and can get the job done, but produce crappy code in the process?  I mean, if code quality doesn’t matter like most of our industry thinks, why do these successful companies not just go hire warm bodies?&lt;/p&gt;
&lt;h2 id=&#34;The-Advantage&#34;&gt;&lt;a href=&#34;#The-Advantage&#34; class=&#34;headerlink&#34; title=&#34;The Advantage&#34;&gt;&lt;/a&gt;The Advantage&lt;/h2&gt;&lt;p&gt;The advantage to hiring based on how people think rather than on what tools they know is that when the tools change, it won’t matter to the developer who can think through these tougher issues.  On the other hand, those who can’t won’t be able to grasp some of the newer concepts that show up in newer tools.  I’ve seen this first hand as I’ve tried to explain NgRX, RxJS and Functional Programming generally to some of my peers.  Are they difficult concepts.  Sure they are! Are they worth learning? Absolutely!&lt;/p&gt;
&lt;h2 id=&#34;Be-Intentional&#34;&gt;&lt;a href=&#34;#Be-Intentional&#34; class=&#34;headerlink&#34; title=&#34;Be Intentional&#34;&gt;&lt;/a&gt;Be Intentional&lt;/h2&gt;&lt;p&gt;So, what’s the point of all of this?  Mostly, be intentional. Don’t coast. Learn everything you can about your craft. &lt;/p&gt;
&lt;p&gt;Do you really know what MVC, MVVM, MVP, etc are and how they work? Or, are you just working off of what someone else has told you? &lt;/p&gt;
&lt;p&gt;Do you really know what Agile is? &lt;/p&gt;
&lt;p&gt;How many design patterns do you know that aren’t the hot new trend? &lt;/p&gt;
&lt;p&gt;Could you code your way out of an interview with Google, Facebook or Amazon? &lt;/p&gt;
&lt;p&gt;Where do you want to be with your career next year?  In 5 years? &lt;/p&gt;
&lt;p&gt;Are you average or striving to be awesome? &lt;/p&gt;
&lt;p&gt;Join me on the journey!&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/coasting-curiosity-diversification-and-being-awesome/</guid>
            <title>Coasting, Curiosity, Diversification and Being Awesome</title>
            <link>http://davembush.github.com/coasting-curiosity-diversification-and-being-awesome/</link>
            <category>programming</category>
            <category>javascript</category>
            <category>c#</category>
            <category>.net</category>
            <pubDate>Tue, 21 Mar 2017 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;There are two twin evils that I see in the programming community. The first is the programmer who knows what he knows and has no desire to learn more. I call these, “coasters”. And then there are the programmers who are so curious that they try to learn every new thing that comes along, with no focus. The interesting thing is, both of these types of people end up at the same place. Out of work. The cure for both is the same.  Being Awesome.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/03/image-3.png &#34;Coasting, Curiosity, Diversification and Being Awesome&#34;)&lt;figcaption&gt;Photo credit: [aaronHwarren](//www.flickr.com/photos/pedalfreak/3745777389/) via [Visual hunt](//visualhunt.com/re/1b14eb) / [ CC BY-ND](//creativecommons.org/licenses/by-nd/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Coasting-Is-for-Morons&#34;&gt;&lt;a href=&#34;#Coasting-Is-for-Morons&#34; class=&#34;headerlink&#34; title=&#34;Coasting Is for Morons&#34;&gt;&lt;/a&gt;Coasting Is for Morons&lt;/h2&gt;&lt;p&gt;If you are reading this blog, you are probably not in this category. In fact, it probably frustrates you to watch these types of programmers as much as it does me. But for completeness, let’s describe the coasting moron.&lt;/p&gt;
&lt;p&gt;These are the programmers who learned how to program more than 5 years ago and got a job and have never moved since. They are still programming in the same language they learned originally. They are probably still at the same job they started at. And, if they had to get a new job, they probably would not be able to find one because their skills are SO out-of-date.&lt;/p&gt;
&lt;p&gt;They are still using Web Forms or MVC in ASP.NET, have no idea how to use anything beyond .NET 2.0. Or worse, they learned how to program in Visual Basic back in the day and couldn’t write a proper .NET application to save their life.&lt;/p&gt;
&lt;p&gt;They know HTML 3.2 and maybe xHTML, but have no idea what HTML5 is.&lt;/p&gt;
&lt;p&gt;And if they had to use JavaScript, they are probably still stuck using ECMA Script 3. This is to say nothing of knowing the dangers of global variables or what prototypal inheritance is.&lt;/p&gt;
&lt;p&gt;They are doomed because they are so far behind, it would be impossible to catch up.&lt;/p&gt;
&lt;h2 id=&#34;Curiosity-Killed-the-Cat&#34;&gt;&lt;a href=&#34;#Curiosity-Killed-the-Cat&#34; class=&#34;headerlink&#34; title=&#34;Curiosity Killed the Cat&#34;&gt;&lt;/a&gt;Curiosity Killed the Cat&lt;/h2&gt;&lt;p&gt;On the opposite end of the spectrum is the programmer who chases every new programming idea that comes out. These are the programmers who typically complain about things like &lt;a href=&#34;/javascript-fatigue-makes-me-scream/&#34;&gt;JavaScript Fatigue&lt;/a&gt;. While they are slightly better off than the programmer who learns nothing, they problem they face is that because they are trying to learn too much at once, they learn nothing. You have to commend their curiosity though.&lt;/p&gt;
&lt;p&gt;Fortunately, with a bit of structure, we can help the curious programmer. They are already motivated. And while I might be able to help the coaster in a one on one situation, I’m not going to spend a lot of time trying in this post. Why write to people who aren’t even likely to read?&lt;/p&gt;
&lt;p&gt;But I can help you.&lt;/p&gt;
&lt;h2 id=&#34;Diversification-for-Programmers&#34;&gt;&lt;a href=&#34;#Diversification-for-Programmers&#34; class=&#34;headerlink&#34; title=&#34;Diversification for Programmers&#34;&gt;&lt;/a&gt;Diversification for Programmers&lt;/h2&gt;&lt;p&gt;So, first, what should you learn next? Another language? A new operating system?&lt;/p&gt;
&lt;p&gt;Well, the first thing you need to do is list out all the things you are interested in. Once you have that list, the next thing you want to try to figure out is which of those things is going to make you more valuable where you are today without causing you to learn more than one new thing.&lt;/p&gt;
&lt;p&gt;For example, you may currently know how to program in C# or VB.NET but only have a rough idea of how to use SQL other than basic CRUD operations. Maybe a deep dive into &lt;a href=&#34;/SqlForNetProgrammers&#34;&gt;learning SQL&lt;/a&gt; would be the next path.&lt;/p&gt;
&lt;p&gt;Or maybe you are doing some web development and know a bit of JavaScript, but haven’t looked at any of the SPA frameworks that are currently available. Pick one and learn it. I recommend Angular2 at this point, but it doesn’t really matter. Find something on your list and learn it.&lt;/p&gt;
&lt;p&gt;Anything you learn is good. Or maybe you are interested in a brand new language, but you can stay within the same basic framework. For example, I know C#, but I’m intrigued by functional programming. F# is on my short list of things I might learn next.&lt;/p&gt;
&lt;p&gt;The idea is to move incrementally rather than leaping to something where everything is new again. If you can somehow work this all into your day job, even better. You can’t always, but it is the fastest way to learn new stuff.&lt;/p&gt;
&lt;h3 id=&#34;Learn-Outside-of-Programming&#34;&gt;&lt;a href=&#34;#Learn-Outside-of-Programming&#34; class=&#34;headerlink&#34; title=&#34;Learn Outside of Programming&#34;&gt;&lt;/a&gt;Learn Outside of Programming&lt;/h3&gt;&lt;p&gt;But it isn’t all about programming, is it? What can you learn that isn’t directly related to programming? There are all kinds of things. And the broader knowledge can help your programming as well. Maybe you have a side interest in business, finance, or marketing. Maybe you find yourself having trouble with interpersonal relationships. There are all kinds of other things you could be studying that really have nothing to do with programming directly, but have everything to do with making you more valuable both as a person and as an employee.&lt;/p&gt;
&lt;p&gt;Find outside interest!&lt;/p&gt;
&lt;h2 id=&#34;Focus-Makes-Awesome&#34;&gt;&lt;a href=&#34;#Focus-Makes-Awesome&#34; class=&#34;headerlink&#34; title=&#34;Focus Makes Awesome&#34;&gt;&lt;/a&gt;Focus Makes Awesome&lt;/h2&gt;&lt;p&gt;Having said all of this. The real trick is focus. As I pointed out above, it is great to be curious. We can do something with that. But, if you try to learn more than 3 things at a time, you will end up learning nothing well.&lt;/p&gt;
&lt;p&gt;One of the guys I work with has a Trello board with a list of possible things to learn. I have a stack of sample kindle books to read someday, maybe. They are things I was curious about at one point. If I’m still interested when I’m looking for something new to read, I’ll pull them down and read the sample.&lt;/p&gt;
&lt;p&gt;But here’s the thing. I only focus on learning 2 or 3 new things at a time. Generally, one new programming thing and one new not programming thing.&lt;/p&gt;
&lt;p&gt;Currently, I’m learning all things Angular2. My goal is to be THE Angular2&amp;#x2F;JavaScript expert in Connecticut. I’m well on my way.&lt;/p&gt;
&lt;p&gt;I have two other interest that have nothing to do with programming. One is Options Trading. I’m at a point with that where it only takes a few minutes a day. So, I have room for something else.&lt;/p&gt;
&lt;p&gt;That something else is everything brain science. Psychology, Sociology, Hypnosis, Memory, and more. It is a fascinating world.&lt;/p&gt;
&lt;h2 id=&#34;Be-Awesome&#34;&gt;&lt;a href=&#34;#Be-Awesome&#34; class=&#34;headerlink&#34; title=&#34;Be Awesome&#34;&gt;&lt;/a&gt;Be Awesome&lt;/h2&gt;&lt;p&gt;There is a story about two guys who were in the woods when they ran into a bear. Being smart hikers, they agreed to try standing still to see if the bear would just ignore them. This worked well.&lt;/p&gt;
&lt;p&gt;But, after the bear left, one of the guys said to the other, “What would you have done if standing still didn’t work?” To which the second guy said, “I would have run as fast as I can.” The first guy responded, “But, do you really think you can outrun a bear?!” And then the second guy says, “I wouldn’t have to out run the bear. I only need to out run you.”&lt;/p&gt;
&lt;p&gt;And that is the market we live in. The good news is, there are so many people that are coasting right now that “awesome” is a pretty easy level to achieve in life.&lt;/p&gt;
&lt;p&gt;So, go out, do some focused learning and be awesome&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/confident-programmer-secrets-revealed/</guid>
            <title>Confident Programmer Secrets, Revealed</title>
            <link>http://davembush.github.com/confident-programmer-secrets-revealed/</link>
            <category>programming</category>
            <category>authority</category>
            <category>confidence</category>
            <pubDate>Tue, 07 Mar 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;To say there are secrets to being a confident programmer may seem a bit over the top. But, you would be surprised at what makes a programmer seem confident, how you can be more confident, why confidence is no real indicator of truth, and why you need to arm yourself against confidence.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/03/image.png &#34;Confident Programmer Secrets Revealed&#34;) Photo via [VisualHunt.com](//visualhunt.com/re/7edea7)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Why-Be-Confident&#34;&gt;&lt;a href=&#34;#Why-Be-Confident&#34; class=&#34;headerlink&#34; title=&#34;Why Be Confident&#34;&gt;&lt;/a&gt;Why Be Confident&lt;/h2&gt;&lt;h3 id=&#34;Persuade-the-Decision-Makers&#34;&gt;&lt;a href=&#34;#Persuade-the-Decision-Makers&#34; class=&#34;headerlink&#34; title=&#34;Persuade the Decision Makers&#34;&gt;&lt;/a&gt;Persuade the Decision Makers&lt;/h3&gt;&lt;p&gt;Look around the organization you work at.  Have you ever noticed that there are one or two people who have your manager’s ear?  Every time a decision needs to be made, the boss goes to them?  Why is that?  Why don’t they come to you?  You know just as much as they do, right?  Could it be that you simply don’t portray yourself as confident?  I didn’t say you weren’t confident.  Just that you aren’t perceived as confident.  Don’t worry, we’ll fix that shortly.&lt;/p&gt;
&lt;h3 id=&#34;Better-Pay&#34;&gt;&lt;a href=&#34;#Better-Pay&#34; class=&#34;headerlink&#34; title=&#34;Better Pay&#34;&gt;&lt;/a&gt;Better Pay&lt;/h3&gt;&lt;p&gt;You will also notice that people who seem more confident also command a larger salary. This is both because their confidence has moved them up the corporate ladder faster and because they are better able to interview for positions that most people would feel like are out of their reach. Confidence, and the ability to communicate confidence is better for your bottom line.&lt;/p&gt;
&lt;h3 id=&#34;Interview-Skills&#34;&gt;&lt;a href=&#34;#Interview-Skills&#34; class=&#34;headerlink&#34; title=&#34;Interview Skills&#34;&gt;&lt;/a&gt;Interview Skills&lt;/h3&gt;&lt;p&gt;Anyone who knows me knows I’m a big proponent of interviewing for new jobs even if you like where you are. But let’s raise the bar on that. Don’t just interview. Practice interviewing for jobs that are a bit out of your reach projecting confidence that you do, indeed, qualify. I can tell you from firsthand experience. If you know your stuff and you project confidence that you know your stuff, you’ll end up being asked to fill positions you never dreamed of filling.&lt;/p&gt;
&lt;h3 id=&#34;Consistency-with-Who-You-Are&#34;&gt;&lt;a href=&#34;#Consistency-with-Who-You-Are&#34; class=&#34;headerlink&#34; title=&#34;Consistency with Who You Are&#34;&gt;&lt;/a&gt;Consistency with Who You Are&lt;/h3&gt;&lt;p&gt;You are confident, right? Imagine what would happen if you projected that confidence? How would you feel if everyone else thought you were confident as well?&lt;/p&gt;
&lt;h3 id=&#34;Feel-better&#34;&gt;&lt;a href=&#34;#Feel-better&#34; class=&#34;headerlink&#34; title=&#34;Feel better&#34;&gt;&lt;/a&gt;Feel better&lt;/h3&gt;&lt;p&gt;Let’s just assume for a second that nothing else I’ve said comes true. I can tell you that if you follow my suggestions on how to be confident, you will feel better about yourself. The fact of the matter is, you may have to exercise this confidence muscle a bit. But the good news is that by following my confidence tips, you’ll also end up feeling more confident which will make the tips easier to implement, which will make you feel more confidence. Confidence breeds confidence. And, confidence feels really good.&lt;/p&gt;
&lt;h2 id=&#34;How-to-Be-Confident&#34;&gt;&lt;a href=&#34;#How-to-Be-Confident&#34; class=&#34;headerlink&#34; title=&#34;How to Be Confident&#34;&gt;&lt;/a&gt;How to Be Confident&lt;/h2&gt;&lt;h3 id=&#34;Know-your-stuff&#34;&gt;&lt;a href=&#34;#Know-your-stuff&#34; class=&#34;headerlink&#34; title=&#34;Know your stuff&#34;&gt;&lt;/a&gt;Know your stuff&lt;/h3&gt;&lt;p&gt;While it is possible to fake confidence, eventually that is going to catch up with you. Confidence isn’t a con game. Confidence is a projection of something that already exist. So, the foundation of confidence is to know your stuff. If you are projecting confidence about all things JavaScript, you’d better know all things JavaScript. Follow podcast. Read blogs. Read books.  Rinse, lather, repeat.&lt;/p&gt;
&lt;p&gt;But the simple fact is, there are some of you who know all there is to know about a subject and you still aren’t confident.&lt;/p&gt;
&lt;h3 id=&#34;Stand-up-straight&#34;&gt;&lt;a href=&#34;#Stand-up-straight&#34; class=&#34;headerlink&#34; title=&#34;Stand up straight&#34;&gt;&lt;/a&gt;Stand up straight&lt;/h3&gt;&lt;p&gt;I’ve written before about how &lt;a href=&#34;/the-psychology-of-programming/&#34;&gt;your body language impacts your perception of yourself&lt;/a&gt;. I’ll say it again here. If you want to feel more confident, stand up straight. It isn’t just good for your posture. It’s good for your emotional health. And the fastest way I know of feeling more confident and being perceived as more confident is to stand up as straight as I can. As you stand, walk and sit, imagine a string attached to your scalp pulling you up. Be as tall as you possibly can. Tuck in your belly.&lt;/p&gt;
&lt;h3 id=&#34;Spread-out&#34;&gt;&lt;a href=&#34;#Spread-out&#34; class=&#34;headerlink&#34; title=&#34;Spread out&#34;&gt;&lt;/a&gt;Spread out&lt;/h3&gt;&lt;p&gt;Another body position that communicates confidence is spreading out. The open, spread out posture communicates that you are comfortable in your own skin. Avoid the closed off posture. This communicates that you are protecting yourself. The obvious question the brain has to ask is, “what are they protecting themselves from?”&lt;/p&gt;
&lt;h3 id=&#34;Speak-with-authority&#34;&gt;&lt;a href=&#34;#Speak-with-authority&#34; class=&#34;headerlink&#34; title=&#34;Speak with authority&#34;&gt;&lt;/a&gt;Speak with authority&lt;/h3&gt;&lt;p&gt;The more confidently you can state a fact, the more likely it is to be accepted. In fact, I’ve seen people state things that were verifiably false with such confidence even I wanted to believe them. The only thing that kept me from doing so is that I intentionally went into that meeting keeping in mind that I was probably the most authoritative person on the subject in the room even though the person we were meeting with was the one who had been designated the authority for the moment.&lt;/p&gt;
&lt;h3 id=&#34;Start-a-blog&#34;&gt;&lt;a href=&#34;#Start-a-blog&#34; class=&#34;headerlink&#34; title=&#34;Start a blog&#34;&gt;&lt;/a&gt;Start a blog&lt;/h3&gt;&lt;p&gt;Starting a blog is a confidence muscle exercise. The more you write, the more you will end up knowing about what you are writing about. It will also be the place where you are told you are wrong the most often. I’ve written articles in the past where people have told me I was wrong. Many times, they haven’t been very nice in how they tell me. But this has been good because now I have learned to take criticism and correction even of the worst kind without losing confidence in my overall knowledge. I’ve learned stuff in the process which has made me even more confident.&lt;/p&gt;
&lt;h3 id=&#34;Be-willing-to-be-wrong&#34;&gt;&lt;a href=&#34;#Be-willing-to-be-wrong&#34; class=&#34;headerlink&#34; title=&#34;Be willing to be wrong&#34;&gt;&lt;/a&gt;Be willing to be wrong&lt;/h3&gt;&lt;p&gt;Which leads to the last point. Be willing to be wrong. You can be confident. As long as you are right most of the time, you can be wrong a few times and no one will care. What you don’t want to do is to be wrong all the time. Soon, no one will listen to you. This is what happened in the situation I mentioned above.  here were so many things the “authority” said during our meeting that were verifiably wrong that I left not trusting anything he had said.&lt;/p&gt;
&lt;h2 id=&#34;Defending-against-confidence&#34;&gt;&lt;a href=&#34;#Defending-against-confidence&#34; class=&#34;headerlink&#34; title=&#34;Defending against confidence&#34;&gt;&lt;/a&gt;Defending against confidence&lt;/h2&gt;&lt;p&gt;And this leads nicely into my next point. Just because someone is confident, doesn’t mean they are right. And some people will, knowingly or not, project confidence to bullshit their way to where they want to go.&lt;/p&gt;
&lt;h3 id=&#34;When-Two-People-Meet&#34;&gt;&lt;a href=&#34;#When-Two-People-Meet&#34; class=&#34;headerlink&#34; title=&#34;When Two People Meet&#34;&gt;&lt;/a&gt;When Two People Meet&lt;/h3&gt;&lt;p&gt;Basic social interaction theory says that when two people meet, a pecking order will be established such that one will be the leader and the other the follower. In a group, a leader will emerge. If you are a speaker, you can leverage this by identifying the perceived leader and speaking to them. Everyone else will follow.&lt;/p&gt;
&lt;p&gt;In our situation, you want to go into meetings with the knowledge that you know as much as the person leading. That everything that person says is subject to how you understand the world. If they say something that contradicts your understanding, you can do one of two things. You can contradict on the spot. Or, you can verify later. This depends on the situation and how well each strategy will advance your cause. In the meeting I’ve been referencing, I kept my mouth shut. He was already going the direction we wanted him to go, contradicting him would have worked against us and would not have served our purposes even a small amount.&lt;/p&gt;
&lt;p&gt;But, I maintained my status as the authority in the room, even if I said nothing.&lt;/p&gt;
&lt;h3 id=&#34;Fact-Checking&#34;&gt;&lt;a href=&#34;#Fact-Checking&#34; class=&#34;headerlink&#34; title=&#34;Fact Checking&#34;&gt;&lt;/a&gt;Fact Checking&lt;/h3&gt;&lt;p&gt;I already mentioned this, but let’s bring this further into focus. Just because someone says something is true doesn’t mean it is. If someone says something and this is the first you’ve heard of it. You’d better make sure it really is true. This goes double if you’ve already heard him say things you know are wrong.&lt;/p&gt;
&lt;p&gt;Which items you actually point out will depend on the situation. Again, in the case above, while we were told several things that were wrong, I only pointed out one that could have been a potential stumbling block.&lt;/p&gt;
&lt;h3 id=&#34;Emotional-Awareness&#34;&gt;&lt;a href=&#34;#Emotional-Awareness&#34; class=&#34;headerlink&#34; title=&#34;Emotional Awareness&#34;&gt;&lt;/a&gt;Emotional Awareness&lt;/h3&gt;&lt;p&gt;One thing I think programmers tend to have a really hard time doing is listening to their emotions. But, if you get good at this, you will often know that something is not right before you can articulate why. Listen to that inner voice.&lt;/p&gt;
&lt;h2 id=&#34;Authority-and-Confidence&#34;&gt;&lt;a href=&#34;#Authority-and-Confidence&#34; class=&#34;headerlink&#34; title=&#34;Authority and Confidence&#34;&gt;&lt;/a&gt;Authority and Confidence&lt;/h2&gt;&lt;h3 id=&#34;Confidence-Without-Speaking&#34;&gt;&lt;a href=&#34;#Confidence-Without-Speaking&#34; class=&#34;headerlink&#34; title=&#34;Confidence Without Speaking&#34;&gt;&lt;/a&gt;Confidence Without Speaking&lt;/h3&gt;&lt;p&gt;You might think that authority and confidence are the same thing. But they aren’t. I can be the perceived authority on a subject without confidence and I can portray confidence without being the authority. In fact, just how I hold myself shows that I am confident even if I have no authority or don’t perceive myself as an authority.&lt;/p&gt;
&lt;h3 id=&#34;Confidence-vs-Respect&#34;&gt;&lt;a href=&#34;#Confidence-vs-Respect&#34; class=&#34;headerlink&#34; title=&#34;Confidence vs Respect&#34;&gt;&lt;/a&gt;Confidence vs Respect&lt;/h3&gt;&lt;p&gt;In the same way, I can be confident while still respecting those who are in authority. We all have people who are in authority over us. This does not have to reduce our confidence. I’m good at what I am good at. They are good at what they do. We each have jobs that we are best suited for. Confidence doesn’t mean we take over, it just means we have influence.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-Get-Caught&#34;&gt;&lt;a href=&#34;#Don’t-Get-Caught&#34; class=&#34;headerlink&#34; title=&#34;Don’t Get Caught&#34;&gt;&lt;/a&gt;Don’t Get Caught&lt;/h2&gt;&lt;h3 id=&#34;Don’t-Assert-Something-You-Can’t-Defend&#34;&gt;&lt;a href=&#34;#Don’t-Assert-Something-You-Can’t-Defend&#34; class=&#34;headerlink&#34; title=&#34;Don’t Assert Something You Can’t Defend.&#34;&gt;&lt;/a&gt;Don’t Assert Something You Can’t Defend.&lt;/h3&gt;&lt;p&gt;Do yourself a favor. If you aren’t sure, keep your mouth shut. As I’ve already illustrated, if you say something that someone else can verify is inaccurate, everything else you say is subject to evaluations.&lt;/p&gt;
&lt;h3 id=&#34;Know-Your-Topic-Inside-Out&#34;&gt;&lt;a href=&#34;#Know-Your-Topic-Inside-Out&#34; class=&#34;headerlink&#34; title=&#34;Know Your Topic Inside Out&#34;&gt;&lt;/a&gt;Know Your Topic Inside Out&lt;/h3&gt;&lt;p&gt;The danger, of course, is that you may think you know, but you really don’t. Make sure you are a student of what you think you know. Don’t be that guy who thinks he knows, but really knows nothing. Or that guy who is working with old information.&lt;/p&gt;
&lt;h4 id=&#34;4-Levels-of-Learning&#34;&gt;&lt;a href=&#34;#4-Levels-of-Learning&#34; class=&#34;headerlink&#34; title=&#34;4 Levels of Learning&#34;&gt;&lt;/a&gt;4 Levels of Learning&lt;/h4&gt;&lt;p&gt;There are four levels of learning. Or knowledge. The first level is that we don’t even know that there is something to know. Most of us start there. But the second level is probably the most dangerous. Knowing just enough to think you know when you really know relatively little. As you progress, you’ll eventually end up realizing there is a whole lot more to know than what you thought until finally, you know the subject so well you aren’t even thinking about it anymore. Kind of like breathing.&lt;/p&gt;
&lt;p&gt;You want to make sure you are working from the level of knowing the subject so well, it is like breathing. The problem is, many people who are in the second level think they are in the fourth level. If you are not reading the latest on the subject, not reading blog post, not listening to podcast, you are probably still in level 2 and working off of assumptions rather than facts.&lt;/p&gt;
&lt;h4 id=&#34;One-eyed-Man-is-King&#34;&gt;&lt;a href=&#34;#One-eyed-Man-is-King&#34; class=&#34;headerlink&#34; title=&#34;One-eyed Man is King&#34;&gt;&lt;/a&gt;One-eyed Man is King&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;In the kingdom of the blind, the one-eyed man is king.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The point is this, you may currently be that one-eyed man. The only reason you have the authority you do is because you are the best they have. In fact, most of us are where we are because that’s the best they have. But, don’t rest there. Try to gain that second eye. You really don’t want to be in a position where a two-eyed man can come in and point out all that isn’t right. This is why you want to go for the fourth level of learning in all that is important to you.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/the-psychology-of-programming/</guid>
            <title>The Psychology of Programming</title>
            <link>http://davembush.github.com/the-psychology-of-programming/</link>
            <category>programming</category>
            <category>behavior</category>
            <category>psychology</category>
            <pubDate>Tue, 07 Feb 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the past week, I’ve listened to and read several articles that have started me thinking more about the Psychology of Programming.&lt;/p&gt;
&lt;p&gt;Not that I haven’t been thinking about this for a while. I’ve been quite intrigued by human behavior for a while now. But more recently, there was this podcast over on dotNetRocks about “&lt;a href=&#34;//dotnetrocks.com/?show=1406&#34;&gt;Punishment Driven Development&lt;/a&gt;”. And this comment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The happiest people in my experience are those that have options. They have transferable skills, see their employment as a personal choice, have self-confidence that they are providing value to the company and are in a position professionally and personally where they could change job if they needed. The feeling of being trapped in a position from which you can’t escape (either a dissatisfying job, bad manager or whatever) will lead to negativity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which I almost agree with, except I think it is the negativity that leads to feeling trapped. And then there is the book I am reading, “&lt;a href=&#34;//amzn.to/2l4O96Y&#34;&gt;Influence: The Psychology of Persuasion&lt;/a&gt;” which goes into detail on why we make decisions that seem to go against our better judgment.&lt;/p&gt;
&lt;p&gt;Then there is another podcast that discusses &lt;a href=&#34;//devchat.tv/js-jabber/jsj-247-building-a-development-environment-with-cory-house&#34;&gt;the decisions we make as we start a new JavaScript project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And all of this culminates into the following thoughts: &lt;figure&gt;&lt;img src=&#34;/uploads/2017/02/image.png&#34; title=&#34;The Psychology of Programming&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/deltamike/751707089/&#34;&gt;deltaMike&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-Makes-You-Happy&#34;&gt;&lt;a href=&#34;#What-Makes-You-Happy&#34; class=&#34;headerlink&#34; title=&#34;What Makes You Happy?&#34;&gt;&lt;/a&gt;What Makes You Happy?&lt;/h2&gt;&lt;p&gt;It really does amaze me that I work with people who seem so unhappy with their work place and yet, aren’t making any effort to find another place to work. As a consultant with nearly 30 years of experience, I can tell you first-hand that some places are better than others to work. There is probably a place for you if you’d just try to find it.&lt;/p&gt;
&lt;p&gt;Or, maybe the problem is you. Maybe you’ve never liked working. Or maybe you like complaining. Maybe being happy is an attitude and isn’t really dependent on our circumstances. Maybe, the happy people like their jobs?&lt;/p&gt;
&lt;p&gt;Or maybe it is just easier to blame the company than to take responsibility. I find happy people take action. Make opportunities. Learn new stuff. &lt;/p&gt;
&lt;p&gt;The unhappy people I know blame something or someone for who they are.&lt;/p&gt;
&lt;h2 id=&#34;It’s-All-in-your-Head&#34;&gt;&lt;a href=&#34;#It’s-All-in-your-Head&#34; class=&#34;headerlink&#34; title=&#34;It’s All in your Head&#34;&gt;&lt;/a&gt;It’s All in your Head&lt;/h2&gt;&lt;p&gt;Here is a scary thought though. All your ways of reacting to events in your life are learned responses. Most of those responses you learned before you were 5. But, here’s the good news. Since they are learned responses, you can, if you want to, re-learn responses.&lt;/p&gt;
&lt;p&gt;We all have behaviors we don’t like. Some of us get angry for stupid stuff. Some of us over eat. Some drink too much. Some smoke. In almost all cases, the behavior isn’t the real issue. The question we need to ask ourselves is why do we do those things? In what way do we believe doing these things is going to help us? What would you need to believe differently in order to change? What is keeping you from believing something different?&lt;/p&gt;
&lt;h2 id=&#34;It’s-Just-an-Opinion&#34;&gt;&lt;a href=&#34;#It’s-Just-an-Opinion&#34; class=&#34;headerlink&#34; title=&#34;It’s Just an Opinion&#34;&gt;&lt;/a&gt;It’s Just an Opinion&lt;/h2&gt;&lt;p&gt;I have a rule.  “Never argue about opinion.” I’ll present why I believe something is true. State all my reasons. Clarify if I think that is necessary. But as soon as I realize that the discussion has turned into an argument where no one is going to convince the other of anything. I disengage.&lt;/p&gt;
&lt;p&gt;Not everything is opinion. I’ve had people leave comments correcting my understanding and pointing to authoritative documentation that says they are right. Thank you. But, in the grand scheme of life, there is very little that falls into the realm of fact. Most of what we argue about as programmers is opinion.&lt;/p&gt;
&lt;p&gt;What is interesting about opinion is that the more you know about a subject, the more opinionated you are likely to be. That can be a good thing. Show me a programmer who doesn’t have opinions and I’ll show you a programmer who is just doing what they’ve been told to do. Show me a programmer who has an opinion but can actually argue multiple sides of an argument and I’ll show you a programmer who really knows his stuff. If you hold opinions so strongly that you are offended when someone disagrees with you, you have an issue.&lt;/p&gt;
&lt;h2 id=&#34;Herd-Mentality&#34;&gt;&lt;a href=&#34;#Herd-Mentality&#34; class=&#34;headerlink&#34; title=&#34;Herd Mentality&#34;&gt;&lt;/a&gt;Herd Mentality&lt;/h2&gt;&lt;p&gt;For years, it has puzzled me how, as a community, we can know that writing unit test for our code is a worthwhile activity, and yet hardly anyone I know does this. Truth be told, it is a struggle even for me.&lt;/p&gt;
&lt;p&gt;But, here’s an interesting fact. We tend to do what we SEE others doing. If no one on your team is writing test, you think, “we don’t write test here.” This behavior explains why, in test after test, groups will ignore people who need help while individuals by themselves will provide aid. This impacts a lot of our life if you think about it. How many times have I assumed that someone else is going to call the power company when the power goes out during a snow storm? Certainly, if the whole street is impacted, someone will call.&lt;/p&gt;
&lt;p&gt;The very fact that it has impacted the whole street is indication enough that no one else has called. I hope I remember this the next time the power goes out.&lt;/p&gt;
&lt;h2 id=&#34;Appeal-to-Authority&#34;&gt;&lt;a href=&#34;#Appeal-to-Authority&#34; class=&#34;headerlink&#34; title=&#34;Appeal to Authority&#34;&gt;&lt;/a&gt;Appeal to Authority&lt;/h2&gt;&lt;p&gt;Another scary statistic is that people will do whatever they are told to do if an authority figure has told them to do it. If there is any question about what we should do, we will try to figure out what the authority figure wants.&lt;/p&gt;
&lt;p&gt;This is how con men work. In a very scary experiment, a “doctor” calls the nursing desk and tells the person who answers the phone to administer a drug to a patient. The problem is, the prescription is too high and is of a drug that is not approved for the nurses to give. Yet, because a doctor has said so, they are willing to comply In a more humorous example, a patient had an ear ache in their right ear. The doctor left a note with instructions to administer ear drops to the R ear. So, the nurse administered ear drops to the patients rear. Neither the nurse nor the patient questioned the instructions.&lt;/p&gt;
&lt;p&gt;Oh, but that would never happen to programmers now. Or would it?&lt;/p&gt;
&lt;p&gt;Again, I go back to the point of testing. I can’t tell you how many times I’ve heard programmers tell me they “aren’t allowed to write unit test.” For the most part, I’m not sure anyone asked, they are just assuming that the boss won’t let them because of the Herd Mentality I mentioned above. But let’s assume the boss really has made such an edict. Is that a good reason to not tests? I’m not sure it is. At least no more so than administering ear drops to someone’s butt.&lt;/p&gt;
&lt;p&gt;But I’ve also seen this behavior first hand. I was on a project once where the organization claimed to be “Agile.” For the most part they were. They worked iteratively. They had something resembling sprints.&lt;/p&gt;
&lt;p&gt;But a “boss” several layers up the ladder who we never saw had “instructed” the team to do this project using a waterfall approach because “we already know what this product is supposed to do.”&lt;/p&gt;
&lt;p&gt;The problem is, while this project was a rewrite of an older system, the rewrite encompassed many changes to the existing system. So, even using that argument, using waterfall made no sense. But, everyone on the team also knew that what made a project an agile project vs a waterfall project had a lot more to do with being able to adjust. Why no one ever told the manager he was wrong is beyond me. What is further interesting is that even though that project received a new manager, the team STILL tried to obey the old rule because they hadn’t been given an alternate direction.&lt;/p&gt;
&lt;h2 id=&#34;Inertia&#34;&gt;&lt;a href=&#34;#Inertia&#34; class=&#34;headerlink&#34; title=&#34;Inertia&#34;&gt;&lt;/a&gt;Inertia&lt;/h2&gt;&lt;p&gt;The famous last words of every dying group are, “But, we’ve never done it that way before.” Why?&lt;/p&gt;
&lt;p&gt;Did you know that people will work twice as hard to keep the dollar in their pocket than they will to gain an extra dollar? This explains so much of human behavior for me. This is why startups have such an advantage over established companies. The startup has nothing to lose. As soon as they feel like making a change will cause them to lose something important, they’ll stop innovating. They become the established company. If an established company can survive long enough to have nothing to lose, they might innovate. For an example of this, check out the turn around of both Apple and Microsoft. If you look very closely, you’ll see that Apple is moving into the “we have something to lose” cycle.&lt;/p&gt;
&lt;p&gt;Now, how does this apply to you as the lonely programmer?&lt;/p&gt;
&lt;p&gt;Well, back to our sad programmer example. Could it be that our sad programmer doesn’t change jobs because he’s holding on to his dollar instead of trying to get a new one?&lt;/p&gt;
&lt;p&gt;Could it be you aren’t testing your code with formal unit test because you are holding onto your dollar?&lt;/p&gt;
&lt;p&gt;When is the last time you tried anything new?&lt;/p&gt;
&lt;h2 id=&#34;Break-Free&#34;&gt;&lt;a href=&#34;#Break-Free&#34; class=&#34;headerlink&#34; title=&#34;Break Free&#34;&gt;&lt;/a&gt;Break Free&lt;/h2&gt;&lt;p&gt;And so, the question naturally becomes, “How do we break free?”&lt;/p&gt;
&lt;p&gt;So much of this is a part of who we’ve learned to be. Many of our behaviors have helped us get to where we are. But like the company who has moved from startup to established player, we need to become comfortable with being uncomfortable so that we can not just break free, but break into a better version of ourselves.&lt;/p&gt;
&lt;p&gt;Maybe you are comfortable where you are. I don’t know  Personally, I’m always trying to improve. I’d much rather have the new dollar than keeping the dirty old one. You might have a different set of values. Maybe a different opinion.&lt;/p&gt;
&lt;p&gt;I could be wrong. But, what if I’m right?&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/how-to-be-a-lucky-programmer/</guid>
            <title>How to be a Lucky Programmer</title>
            <link>http://davembush.github.com/how-to-be-a-lucky-programmer/</link>
            <category>programming</category>
            <category>luck</category>
            <category>social skills</category>
            <pubDate>Tue, 24 Jan 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve been studying topics related to social science recently and one item that keeps popping up in various places is the idea of luck. It turns out that lucky people aren’t really all that lucky. There life has been arranged either by them directly or indirectly by their environment so they end up having more chances of good things happening to them. &lt;/p&gt;
&lt;p&gt;How can we apply this to programming? How can you be a lucky programmer? &lt;figure&gt;&lt;img src=&#34;/uploads/2017/01/image-1.png&#34; title=&#34;How to be a Lucky Programmer&#34;&gt; Photo &lt;a href=&#34;//visualhunt.com/p/gaertringen/&#34;&gt;Gaertringen&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/&#34;&gt;Visual Hunt&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;What-You-Believe&#34;&gt;&lt;a href=&#34;#What-You-Believe&#34; class=&#34;headerlink&#34; title=&#34;What You Believe&#34;&gt;&lt;/a&gt;What You Believe&lt;/h2&gt;&lt;p&gt;It turns out that what you believe about yourself has a HUGE impact on how lucky you are. In fact, lucky people see themselves as lucky.&lt;/p&gt;
&lt;h3 id=&#34;Lucky-People-are-Lucky&#34;&gt;&lt;a href=&#34;#Lucky-People-are-Lucky&#34; class=&#34;headerlink&#34; title=&#34;Lucky People are Lucky&#34;&gt;&lt;/a&gt;Lucky People are Lucky&lt;/h3&gt;&lt;p&gt;Now, you might think that a lucky person seeing themselves as lucky would be self-evident, right? I mean if good stuff keeps happening to you, you are obviously going to view yourself as lucky. But, the dirty little secret is that bad stuff happens to lucky people too. They just aren’t as likely to see it as unlucky and may even see it as lucky. &lt;/p&gt;
&lt;p&gt;To take an example from my own life, I was in an accident about a month and a half ago. I totalled the car. But,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No one got hurt, and given the shape of the car, I’m still amazed.&lt;/li&gt;
&lt;li&gt;Someone showed up within minutes and stopped long enough to help me figure out what my next steps were.&lt;/li&gt;
&lt;li&gt;The police man showed up immediately after I hung up the phone with the dispatcher.&lt;/li&gt;
&lt;li&gt;We got more for the car than we would have if we had traded it in.&lt;/li&gt;
&lt;li&gt;We ended up with a much nicer car than we were planning on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Was I lucky or unlucky? It is just a matter of what I focus on. &lt;/p&gt;
&lt;p&gt;In short, lucky people focus on what they have instead of what they don’t. According to people who measure these things, if you made more than $34K (usd) in 2012 you made more than 99% of the world’s population. Yes, I know, there are other factors, like cost of living to consider. But really, by just about any standard, I’d say from an income perspective, we as programmers are pretty lucky!&lt;/p&gt;
&lt;h3 id=&#34;Lucky-People-Ask-Good-Questions&#34;&gt;&lt;a href=&#34;#Lucky-People-Ask-Good-Questions&#34; class=&#34;headerlink&#34; title=&#34;Lucky People Ask Good Questions&#34;&gt;&lt;/a&gt;Lucky People Ask Good Questions&lt;/h3&gt;&lt;p&gt;It turns out that our brains answer any question we give it. In fact, you’ve probably been in situations where someone has asked you a question you really didn’t want to answer and you’ve answered it anyhow. This is how compelling question are. &lt;/p&gt;
&lt;p&gt;The problem lies in the questions we ask ourselves. When you are struggling with an issue, are you more likely to ask, “How can I solve this?” or “Why can’t I solve this?” Do you see the three things you’ve tried as proof that the problem can’t be solved or just three ways that it can’t be solved? &lt;/p&gt;
&lt;p&gt;I’m going to guess that if you are any good at programming, you’ll be more likely to ask “How can I…” questions. But what about the rest of your life? Does this carry over into finding your dream job? Making friends? Investing?&lt;/p&gt;
&lt;h3 id=&#34;Entitled-vs-Deserving&#34;&gt;&lt;a href=&#34;#Entitled-vs-Deserving&#34; class=&#34;headerlink&#34; title=&#34;Entitled vs Deserving&#34;&gt;&lt;/a&gt;Entitled vs Deserving&lt;/h3&gt;&lt;p&gt;This last point is a little tricky to explain. Lucky people feel like they deserve to have good things happen because they’ve put in the effort so that good things can happen. This is different from either feeling entitled or wishful thinking. Lucky people have studied hard, made connections, tried stuff, improved their social skills, and more. So, you can believe you are lucky all you want, and that’s a really good start, but there is more to being lucky than just being “The Little Engine That Could” you need to be “The Little Engine That Does”&lt;/p&gt;
&lt;h2 id=&#34;Try-New-Stuff&#34;&gt;&lt;a href=&#34;#Try-New-Stuff&#34; class=&#34;headerlink&#34; title=&#34;Try New Stuff&#34;&gt;&lt;/a&gt;Try New Stuff&lt;/h2&gt;&lt;p&gt;You could also call this “be curious.” &lt;/p&gt;
&lt;p&gt;I think my love of learning has helped make me lucky. But again, the people who study this stuff agree with me. The more stuff you try, the more likely you are to be lucky. When you try lots of stuff, you can keep what works, toss what doesn’t. Do more of what is working. Do less of what is not. &lt;/p&gt;
&lt;p&gt;That sounds pretty simple. But where most people goof this up is that they see themselves as failures when something doesn’t work. It may not have worked for a lot of different reasons. One may just be you don’t have enough other experience yet. Some might be that it isn’t who you are deep down. &lt;/p&gt;
&lt;p&gt;Check this out. Do an inventory of yourself and try to figure out what has always been true of you. For me, it is learning. I remember all through Jr High and High School, I would come home, finish whatever homework I had, and then I’d go learn something that was interesting to me. I studied flying, weather, electronics. And that hasn’t changed. If you’ve been following this blog, you’ve benefited from a lot of what I’ve learned over the last several years. &lt;/p&gt;
&lt;p&gt;I also like to teach and help people get ahead. Something I’ve been doing in some fashion since I was twelve. &lt;/p&gt;
&lt;p&gt;I got very involved in the Internet Marketing thing for a while. I made about as much money as I spent learning, so it wasn’t an entire waste of time. But, the year I gave up on that, I made significantly more money by using my resources in a more productive way. Learn when you’ve done enough. But don’t give up when something doesn’t work out right away either. Doing several things at a time will help you figure out what you should be spending more time on.&lt;/p&gt;
&lt;h2 id=&#34;Hone-Your-Skills&#34;&gt;&lt;a href=&#34;#Hone-Your-Skills&#34; class=&#34;headerlink&#34; title=&#34;Hone Your Skills&#34;&gt;&lt;/a&gt;Hone Your Skills&lt;/h2&gt;&lt;p&gt;One of the biggest frustrations I have is when I find someone “over 50” who has posted a comment saying he (most always it is a male) can’t find a job because of age discrimination. I always wonder what skills he has, because where I live, we’ll hire anyone who has an up to date skill set who can prove to us they really do know what they are doing. &lt;/p&gt;
&lt;p&gt;So, you have a job. Great. Don’t coast, or you’ll be that guy. I almost was. I got comfortable at a company and didn’t keep my programming skills up to date. It took me three years to recover. &lt;/p&gt;
&lt;p&gt;Not only should you not coast. If you are serious about programming, you should become an expert in something. Full stack is crap! Niche down. This doesn’t mean you can’t do some other part of the stack. But be awesome at something. Trust me, it WILL pay off. &lt;/p&gt;
&lt;p&gt;But also, learn around the fringes. It does no good for you to proclaim “Windows is the best operating system.” if you’ve never tried Linux or OSX. (Just as an example). In the same way, you can’t say a particular framework is the best if you don’t have several that you’ve tried. Bonus points if you can explain what the differences are and why someone might choose one over the other, even if it isn’t what you would select. &lt;/p&gt;
&lt;p&gt;Since you are reading this, I have to assume you read several tech related blogs. But how about podcasts? How are you spending that time on your commute to work? I have so many podcasts that I listen to that I have to listen to them on evenings and weekends to keep up. And don’t just read blogs and listen to podcasts about tech. Branch out. Get a life. &lt;/p&gt;
&lt;p&gt;Finally, interview for a job at least once a year even if you aren’t looking for a new job. Why? Well, remember I told you I got comfortable working for one company? It turns out the whole interview process changed while I was sleeping. Like Rip Van Winkle, nothing was the same to me. The more you interview, the better you get at it. This is why I recommend interviewing four times a year. Once a year is the absolute minimum. Better to try new interview strategies on an interview you don’t care about than when you really need a job. And who knows, you might find a job you really like in the process.&lt;/p&gt;
&lt;h2 id=&#34;Social-Skills&#34;&gt;&lt;a href=&#34;#Social-Skills&#34; class=&#34;headerlink&#34; title=&#34;Social Skills&#34;&gt;&lt;/a&gt;Social Skills&lt;/h2&gt;&lt;p&gt;But it doesn’t matter how great you are technically if you can’t convince someone else that you are. And this means you are going to need to work on your social skills. Yes, lucky people, and that means lucky programmers, need social skills. And I’m not just talking “Please” and “Thank you” But, that would be a great place to start.&lt;/p&gt;
&lt;h3 id=&#34;Body-Language&#34;&gt;&lt;a href=&#34;#Body-Language&#34; class=&#34;headerlink&#34; title=&#34;Body Language&#34;&gt;&lt;/a&gt;Body Language&lt;/h3&gt;&lt;p&gt;Body language is a great place to start. You’ve probably seen the Amy Cudy video where she talks about power poses. But body language goes much further than power poses. But let’s start there. &lt;/p&gt;
&lt;p&gt;As I walk around the office, I notice that between typing on our keyboards and keeping our eyes glued to our phones, our default “pose” is one of submission and meekness. Have you ever noticed that even people who aren’t looking at their phone when they walk are looking at the ground? Doesn’t anyone make eye contact anymore? &lt;/p&gt;
&lt;p&gt;Over the last several months, I’ve focused on looking up and out as I walk. What a difference in how I feel about myself, not to mention how people perceive me. Look out. Not up. You don’t want to look like a snob. &lt;/p&gt;
&lt;p&gt;On the off chance that someone makes eye contact with you, smile at them. An interesting thing will happen, they’ll smile back which will make you want to smile more. &lt;/p&gt;
&lt;p&gt;An interesting story. There is a guy in our office who seems to have caught the giggles. He’s got this contagious smile and is almost always laughing. It is a genuine laugh and I am going to try to incorporate laughing more into who I am. The thing is, the more he smiles and laughs, the more people want to be around him. Hmmmmm. &lt;/p&gt;
&lt;p&gt;The other thing you can do related to power posing is to just take up space. Again, don’t overdo this. Stand up straight. Spread your arms. Show you are comfortable more than that you are the boss. Too much in the wrong place and you’ll just look like you are posing. Think of the posing as something that changes how you feel about you, not how you want them to feel about you.&lt;/p&gt;
&lt;h3 id=&#34;Make-Them-Like-You&#34;&gt;&lt;a href=&#34;#Make-Them-Like-You&#34; class=&#34;headerlink&#34; title=&#34;Make Them Like You&#34;&gt;&lt;/a&gt;Make Them Like You&lt;/h3&gt;&lt;p&gt;We’ve already discussed laughing. That’s a great way to make people like you. And smiling also makes people think you are smart. But there are some other “tricks” you can learn that will help people like you. &lt;/p&gt;
&lt;p&gt;One simple one to implement is eye contact. People feel like you are listening if you make eye contact. How you pull this off is to look at one of their eyes. Obviously, you can’t look at both of them. But where people get this eye contact thing wrong is that they tend to stare instead of look. Don’t be a robot about it. And it is OK to look away for a second or two. &lt;/p&gt;
&lt;p&gt;The other way you can make people like you is by mirroring their words and body language. Especially gestures. &lt;/p&gt;
&lt;p&gt;I find this fascinating. &lt;/p&gt;
&lt;p&gt;You may have heard that you should use “active listening” to make sure you understand what the other person is saying. For those of you who don’t know, active listening is the process of paraphrasing what the person said and saying it back to them in your own words to make sure you got the idea of what they said. &lt;/p&gt;
&lt;p&gt;The problem is, using active listening won’t make the person FEEL like you understand them. Mirroring does this. And you mirror by using the same words and phrases they used. In particular, you want to use the words that seem to have the most emotion attached to them. What’s even crazier about this than the fact that it establishes rapport quickly is that the person you are mirroring won’t notice. &lt;/p&gt;
&lt;p&gt;Now, all these tricks are just tools to grease the process. But if you just take the attitude of genuinely being interested in other people, you’ll probably end up doing a lot of this stuff anyhow. But if you are genuinely interested in people AND you add on the above skills, other people around you will feel the love and be attracted to you. You’ll be that guy or gal everyone wants to hang with.&lt;/p&gt;
&lt;h3 id=&#34;Networking&#34;&gt;&lt;a href=&#34;#Networking&#34; class=&#34;headerlink&#34; title=&#34;Networking&#34;&gt;&lt;/a&gt;Networking&lt;/h3&gt;&lt;p&gt;Yeah, networking. It is amazing to me that I can go to a programming user group meeting where we are all there for the same reason. That is, we all KNOW we have something in common. And no one is talking. 30 people in the room and barely a noise. This is not good. Your next job could be in that room. &lt;/p&gt;
&lt;p&gt;But, what should we do? &lt;/p&gt;
&lt;p&gt;One thing I’ve started doing is this. You walk up to someone who isn’t already talking to someone and you shake their hand while saying, “Hi, I’m (your name here)” And then you ask them a question to get things rolling. Here are a few of my favorites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ask them something about the event.&lt;/li&gt;
&lt;li&gt;Are you using X yet?&lt;/li&gt;
&lt;li&gt;What brought you here tonight?&lt;/li&gt;
&lt;li&gt;How did you get started in programming?&lt;/li&gt;
&lt;li&gt;What does a typical day look like for you?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once they’ve given you an answer, just ask them a question about something they just told you. &lt;/p&gt;
&lt;p&gt;It really isn’t that hard unless it becomes obvious that the person isn’t in the mood to talk. But that hardly ever happens when you’ve asked them about something they care about. &lt;/p&gt;
&lt;p&gt;Some of these questions are appropriate even if you are talking with someone who doesn’t program and you can quickly use them to get people talking about things they care about. &lt;/p&gt;
&lt;p&gt;Once they start talking, just listen, mirror, and ask more questions.&lt;/p&gt;
&lt;h2 id=&#34;Connections&#34;&gt;&lt;a href=&#34;#Connections&#34; class=&#34;headerlink&#34; title=&#34;Connections&#34;&gt;&lt;/a&gt;Connections&lt;/h2&gt;&lt;p&gt;Another interesting thing I’ve learned is that lucky people have lots of connections. This doesn’t mean they have a lot of close friends. But they are connected, even if all that means is that you are connected on the social networks. So, when someone wants to connect to you on LinkedIn, FaceBook, Google+ or some other social network, connect. If they end up being jerks, you can delete them. &lt;/p&gt;
&lt;p&gt;One of the most common objections I hear when I suggest that people connect to anyone and everyone on LinkedIn is that they will get all kinds of messages and emails from recruiters. So, I want to address that now. &lt;/p&gt;
&lt;p&gt;You’re looking at something that has the biggest chance of making you lucky as an annoyance. Yes, I have nearly 10,000 connections on LinkedIn. Yes, every day I get a ton of email. But, I’ve also been able to narrow down which recruiters I am willing to talk with and which ones I may want to talk with and the ones I never want to hear from again. My white list, grey list, and black list. &lt;/p&gt;
&lt;p&gt;When I need a new contract, guess how long it will take me to find something I want to do?&lt;/p&gt;
&lt;h2 id=&#34;Take-Action&#34;&gt;&lt;a href=&#34;#Take-Action&#34; class=&#34;headerlink&#34; title=&#34;Take Action&#34;&gt;&lt;/a&gt;Take Action&lt;/h2&gt;&lt;p&gt;Finally, lucky people do something. The whole self-help industry is banking on the fact that you’ll never do anything they tell you to do. A lot of what they tell you to do in those books would work if you did what they said. But for various reasons, we think buying the book, or even reading the book, is going to change our life. &lt;/p&gt;
&lt;p&gt;So, pick something I’ve mentioned above that you aren’t already doing and do it. &lt;/p&gt;
&lt;p&gt;For a start, connect with me on social media using one of the buttons in the upper right corner. I highly recommend LinkedIn because I am connected with so many people, you’ll automatically get all of my first-degree connections as your second-degree connections and all of my second-degree connections as your third-degree connections. What this means is that by connecting to me, more people will be able to find you on LinkedIn when they search for you on LinkedIn. &lt;/p&gt;
&lt;p&gt;For more about how to use LinkedIn, check out my article, “&lt;a href=&#34;/linkedin-tips-for-programmers/&#34;&gt;LinkedIn Tips for Programmers&lt;/a&gt;”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/how-to-sabotage-estimates/</guid>
            <title>How to Sabotage Estimates</title>
            <link>http://davembush.github.com/how-to-sabotage-estimates/</link>
            <category>programming</category>
            <category>estimating</category>
            <category>software</category>
            <pubDate>Tue, 23 Aug 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last week, I’ve been helping other programmers estimate the task they’ve been assigned and this has caused me to reflect on how I estimate software.  What works.  What doesn’t.  What mistakes I see people make.&lt;/p&gt;
&lt;p&gt;There has also been a move to avoid estimates entirely.  The argument goes something along the lines of, “we know the least about a project at the beginning of the project, so we can’t really give an accurate estimate.”  Which is mostly true.  And yet, there are people who need to know “how much is this going to cost?”  What do we do for them?  How do we balance the two realities? And then all of this lead me to think of all the ways we sabotage our estimates, or our estimates are sabotaged for us.&lt;/p&gt;
&lt;p&gt;You might think that estimating projects only applies to project managers.  But the truth is, most places I have worked rely on programmers to give them estimates, and frankly, most of us screw this up.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/08/image-1.png &#34;How to Sabotage Estimates&#34;)&lt;figcaption&gt;Photo credit: [Musée McCord Museum](//www.flickr.com/photos/museemccordmuseum/2918567169/) via [Visual hunt](//visualhunt.com/photos/people/) / [No known copyright restrictions](//flickr.com/commons/usage/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Working-Backwards-from-a-Date&#34;&gt;&lt;a href=&#34;#Working-Backwards-from-a-Date&#34; class=&#34;headerlink&#34; title=&#34;Working Backwards from a Date&#34;&gt;&lt;/a&gt;Working Backwards from a Date&lt;/h2&gt;&lt;p&gt;This is the most obvious, I think, so we’ll get it out of the way first.  But it has some permutations that aren’t quite so obvious that we need to examine as well.&lt;/p&gt;
&lt;p&gt;Now, I get it.  There are some cases where there is a specific end date.  Something that is out of your control is happening on a specific date.  If you don’t deliver the software by that time, then you might as well not create it.  But, in that case, you have to take the golden triangle into consideration.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can have it on a specific date.&lt;/li&gt;
&lt;li&gt;You can do it all.&lt;/li&gt;
&lt;li&gt;You can do it within budget.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, even each of these have limitations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You might be able to release something on a specific date, but it may not be all that was intended.&lt;/li&gt;
&lt;li&gt;Even if you could buy all of the resources you needed, which is hardly ever possible, there will be limitations to using all of the resources.&lt;/li&gt;
&lt;li&gt;If you have a limited budget, doing it all will probably suffer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is where using Scrum has a huge advantage.  Because at least using Scrum, you are constantly picking the next most valuable feature to implement and each feature is released in a potentially deliverable state.  This is quite unlike the project I’m working on where components are being worked on that we can’t even really test because they get called by something that has yet to be built.  Grant it, they’ll eventually be needed to have a viable product, but it is really hard to argue they are the NEXT most valuable feature when they can’t even be tested.&lt;/p&gt;
&lt;p&gt;Now, if you are working backward from a date, this could work if you add more resources, or you cut features.  I’ve worked in some organizations that were really good about figuring out what could be done and making sure the client was on board with the fact that we would only deliver that much.  But there have been other organizations where every time I suggested we not deliver a feature, I’ve been given a hundred reasons why that couldn’t be done.  Needless to say, those projects are doomed.&lt;/p&gt;
&lt;p&gt;Working backwards from a date is largely a management issue or a client issue.  But as they ask programmers for dates in light of the date, I find programmers are inclined to try to give numbers they think their managers want to hear rather than what they expect can really be done.&lt;/p&gt;
&lt;h2 id=&#34;Going-with-Your-Gut&#34;&gt;&lt;a href=&#34;#Going-with-Your-Gut&#34; class=&#34;headerlink&#34; title=&#34;Going with Your Gut&#34;&gt;&lt;/a&gt;Going with Your Gut&lt;/h2&gt;&lt;p&gt;The next most dangerous way of providing an estimate is to just go with your gut feel.  Here’s the thing about your gut.  It’s pretty optimistic.&lt;/p&gt;
&lt;p&gt;I find that everything takes about twice as long as I think it will.  I’ve worked for some people who I quickly learned were only describing half of the project.  In those cases, I’d be off by a factor of four.&lt;/p&gt;
&lt;p&gt;So, I’ve learned to compensate.  Whenever I’m asked for a “rough estimate” I always double whatever my gut thinks.  In some cases, I’ll pad even more.&lt;/p&gt;
&lt;p&gt;But the right thing to do would be to spend a few hours and break the project down into task that take less than a day.  Ideally you want to break those tasks down into half day sized tasks.  Once you have all of the tasks spelled out, you can add up the hours and you’ll have a pretty good idea of just how long the project will take you.&lt;/p&gt;
&lt;p&gt;If you are working in an office, don’t forget to account for meetings, helping others, and other tasks that tend to happen over the course of a week when you provide the date you plan to be done.  Otherwise, you’ll find you’ll end up having gotten the hours right but still end up being late.&lt;/p&gt;
&lt;p&gt;How do you break the plan down?  What I do is I ask a very obvious questions.  What’s the next thing I would need to do? Let’s assume we are starting a new feature.  If you were to sit down and code that feature right now, what is the next thing you’d have to do to code that feature?  It might be, “setup the programming environment” or “setup version control” or “get a test harness in place” or “create a branch from version control” it doesn’t matter that it might take a half an hour to do.   That’s actually good.  Just don’t let it be so big of a task that it is going to take you several days to complete.&lt;/p&gt;
&lt;p&gt;Next, assuming you’ve done the tasks so far, what is the next thing you’ll need to do.&lt;/p&gt;
&lt;p&gt;You just keep doing this until you have a set of task that fit within the half day sized and all fully describe the steps you will take to get the project done.  While breaking task down this way will get you a much more accurate number, I’ve found that I still need to double the time I think it will take.  Especially if I know little or nothing about the project I’m getting in to.  The more you learn about the project, the less padding you should need to do.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-Plan-for-the-Unknown&#34;&gt;&lt;a href=&#34;#Don’t-Plan-for-the-Unknown&#34; class=&#34;headerlink&#34; title=&#34;Don’t Plan for the Unknown&#34;&gt;&lt;/a&gt;Don’t Plan for the Unknown&lt;/h2&gt;&lt;p&gt;But in every project, there will still be some unknowns.  In fact, this past week, I hit one of those.  When I put it on my task list, I put it in as 8 hours figuring there would probably be some refactoring I’d need to do.  But when I got to it, what I found was that the refactoring project was a lot bigger than I had expected.&lt;/p&gt;
&lt;p&gt;In this case, the best thing to do is to raise this new information to the team and adjust your estimate based on the new information.&lt;/p&gt;
&lt;p&gt;At the end of the day, I don’t expect this will actually impact my delivery date because some of my other task are going faster than I was expecting, but I’m still adjusting my estimates to document the fact that it had to be done.&lt;/p&gt;
&lt;h2 id=&#34;Forget-Who-Is-Asking&#34;&gt;&lt;a href=&#34;#Forget-Who-Is-Asking&#34; class=&#34;headerlink&#34; title=&#34;Forget Who Is Asking&#34;&gt;&lt;/a&gt;Forget Who Is Asking&lt;/h2&gt;&lt;p&gt;Most people I work for give me pretty accurate descriptions of the problem I’m going to work on.  I can safely double the amount of time I think it will take and I generally hit my dates.&lt;/p&gt;
&lt;p&gt;But occasionally, there is that client who only tells you half of what he’s actually thinking.  You’ll learn who that is in your life soon enough.  You can either complain that you didn’t get complete enough requirements.  Or you can plan on the requirements being incomplete and pad your estimates accordingly.&lt;/p&gt;
&lt;p&gt;Telling your client or manager (who is your client in most cases) that they did it wrong, may not be the most prudent way of dealing with this issue.  I opt for padding the estimates.&lt;/p&gt;
&lt;h2 id=&#34;Working-from-a-Summary&#34;&gt;&lt;a href=&#34;#Working-from-a-Summary&#34; class=&#34;headerlink&#34; title=&#34;Working from a Summary&#34;&gt;&lt;/a&gt;Working from a Summary&lt;/h2&gt;&lt;p&gt;This kind of gets back to the last two points, but it needs to be called out separately.&lt;/p&gt;
&lt;p&gt;You see, most of the time you’ll be asked for an estimate with enough information to make the call.  But there are other times all you’ll have is a working summary.  I find it best in this case to give the person asking for the estimate such a wide estimate (1 – 8 hours) that it is worthless for anything other than a rough ballpark idea of how much effort the project will take and explain that I would need more information to give a better estimate.&lt;/p&gt;
&lt;p&gt;Most people are pretty understanding when you explain this correctly.  Whatever you do, don’t give a fixed number that you can’t adjust up and down as you discover more information.  In fact, even when you have more information, you should always give your estimates in terms of ranges of time.&lt;/p&gt;
&lt;h2 id=&#34;Assume-it-Will-Work&#34;&gt;&lt;a href=&#34;#Assume-it-Will-Work&#34; class=&#34;headerlink&#34; title=&#34;Assume it Will Work&#34;&gt;&lt;/a&gt;Assume it Will Work&lt;/h2&gt;&lt;p&gt;Even the seasoned programmers make this mistake.  I know one guy who brags about how quickly he can write the code.  But he completely ignores the fact that while he spent a month writing the code, he’s spent three months getting it past the QA department.  So, did he really get the project done it a month?  Oh and those bugs?  God help you if you suggest those bugs are HIS fault! But, I find we all tend to do this in some way or another.&lt;/p&gt;
&lt;p&gt;All I want to say about this here is this.  You can either plan to test your code using some sort of test framework or you need to plan to fix bugs.  Which you plan for is up to you, but those of you who have followed my blog know I’m going to tell you that you’ll save a lot of time if you plan to write and execute tests.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;I’m sure many of you could have written a post like this.  So, I invite you to add to it in the comments below.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/increase-your-excellence-capacity/</guid>
            <title>Increase Your Excellence Capacity</title>
            <link>http://davembush.github.com/increase-your-excellence-capacity/</link>
            <category>programming</category>
            <category>self improvement</category>
            <pubDate>Thu, 07 Jan 2016 03:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Today I saw a GREEN traffic light for the first time.&lt;/p&gt;
&lt;p&gt;OK, that’s not entirely true.  What I mean to say is that I saw that it was green.&lt;/p&gt;
&lt;p&gt;You see, I was born color blind.  This never really bothered me because, like most people who are handicapped from birth, I didn’t know what I was missing.&lt;/p&gt;
&lt;p&gt;But then, I found out that there is this company that sells glasses that help color blind people see color.  They are pretty expensive, at least they seem pretty expensive when you believe you don’t really have a big problem.  But then I took the standard color blind test on their site and found out&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I’m color blind (duh!)&lt;/li&gt;
&lt;li&gt;there is an 80% chance that the glasses would help and&lt;/li&gt;
&lt;li&gt;I only see 2% of the available color spectrum.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Wow! Only 2%?  I knew I had issues.  But I’ve been able to function.  But only 2%.  What am I missing?&lt;/p&gt;
&lt;p&gt;Well, my wife got me a pair of glasses for Christmas.  Unfortunately, I ordered indoor&amp;#x2F;computer glasses and what they sent are sunglasses.  I’m still trying to get that resolved. &lt;img src=&#34;/uploads/2016/01/wlEmoticon-sadsmile.png&#34; alt=&#34;Sad smile&#34;&gt;  But just for kicks, I wore the sunglasses out while I was running errands today.  This is the first sunny day that I haven’t been stuck inside since Christmas.  The reds are redder, the yellows are yellower and, hey! Guess what?!  The green light is actually green!&lt;/p&gt;
&lt;p&gt;So, what’s this got to do with programming?  You did know this was going to eventually relate to programming right?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/01/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Most of us program with only 2% of what’s available.  And like those of us who are color blind, we don’t think it is an issue because, somehow, we manage to get the job done.&lt;/p&gt;
&lt;p&gt;Just off the top of my head, here are some ways this applies.&lt;/p&gt;
&lt;h2 id=&#34;Know-What-You-Know&#34;&gt;&lt;a href=&#34;#Know-What-You-Know&#34; class=&#34;headerlink&#34; title=&#34;Know What You Know!&#34;&gt;&lt;/a&gt;Know What You Know!&lt;/h2&gt;&lt;p&gt;This is most evident with JavaScript, but I think most of us program this way with every language we use.  Since this is primarily a .NET blog, let’s just focus on JavaScript and C#.&lt;/p&gt;
&lt;p&gt;JavaScript has some pretty amazing features once you get your head around them.  For example, how does “inheritance” really work in JavaScript?  Do you know, can you explain it?  Or do you just use JavaScript as an “object based” language, much like we used VB6?  Do you understand how JavaScript shims work or why they work?  Do you know what a closure is and how they can cause trouble if you aren’t careful?  Do you know when variables get declared?  All difficult questions to answer, because in some cases, you probably think you do but really don’t.  Just like I thought I was seeing fine.&lt;/p&gt;
&lt;p&gt;Or if you’ve been using C#.  Do you know what the yield keyword does?  How about var?  Ever seen nameof()? Did you bother to learn LINQ? The problem I see with so many of my peers is that once they’ve learned enough to get the job done, they stop learning.  New version of the language comes out?  Do they learn it?  Nope.&lt;/p&gt;
&lt;p&gt;Instead, the programmers who excel are the ones who are always learning.  It isn’t enough that they can get the job done.  They have to understand the tools they are using to the fullest extent possible.&lt;/p&gt;
&lt;h2 id=&#34;Ask-Why&#34;&gt;&lt;a href=&#34;#Ask-Why&#34; class=&#34;headerlink&#34; title=&#34;Ask Why&#34;&gt;&lt;/a&gt;Ask Why&lt;/h2&gt;&lt;p&gt;Here’s another place this shows up.&lt;/p&gt;
&lt;p&gt;I’ve had this similar discussion twice now, now that single page applications are the hot new thing on the web.  Where do our business rules go?  I had one manager assert, “Let’s all agree on one thing.  Business rules belong on the server!” Well, maybe.&lt;/p&gt;
&lt;p&gt;What do you mean by “business rule”? Why do you think this is true? In a closed corporate system, does it really make sense to make multiple calls back to the server when it can be done faster on the client? I’m not saying they belong on the client side.  I’m just saying they don’t necessarily belong on the server either. But here’s the real problem.  If you’ve stopped asking “why?” and just assert that something is true because someone convinced you this was true 5 years ago (or longer), you’re making decisions like I’ve been seeing color.  If you ask me what color the grass is, I’ll tell you “green” with our without my fancy new glasses because, just like the traffic like, I’ve been told “green” is the correct answer.&lt;/p&gt;
&lt;h2 id=&#34;Ask-How&#34;&gt;&lt;a href=&#34;#Ask-How&#34; class=&#34;headerlink&#34; title=&#34;Ask How&#34;&gt;&lt;/a&gt;Ask How&lt;/h2&gt;&lt;p&gt;I’ve run into this, hard core, twice in my career and I’m always shocked when I do.&lt;/p&gt;
&lt;p&gt;I once knew a guy who, whenever I told him HOW to do something, he would do it HIS way until he finally stumbled on MY way.  What gave me the right to tell him how to do it?  I’d used the product before.  I knew what it could and couldn’t do.  He hadn’t.&lt;/p&gt;
&lt;p&gt;More recently, I was talking to a programmer who actually told me, “I just want to be left alone.  I’ll figure it out.  I don’t need any help.” What?  Really? I can understand getting into a situation where you don’t know who you could ask for help.  Or being so focused on the problem that you don’t know you need help.  But flat out stating that you don’t need help?  The only time I’ve ever run into people who won’t ask for help are kids that just graduated from college.  And even that is changing with colleges focused on teaching students to collaborate instead of “doing their own work.”  But to hear this from a seasoned programmer?  That’s just ridiculous.&lt;/p&gt;
&lt;p&gt;If you aren’t asking for help, you are definitely not working at full capacity.&lt;/p&gt;
&lt;h2 id=&#34;Stay-Young&#34;&gt;&lt;a href=&#34;#Stay-Young&#34; class=&#34;headerlink&#34; title=&#34;Stay Young&#34;&gt;&lt;/a&gt;Stay Young&lt;/h2&gt;&lt;p&gt;I’m not saying this doesn’t exist in other sectors.  But every time I hear someone say they can’t get a programming job because they are over 50, I think to myself, “really?!”  Because I’ve been in multiple situations where I know of hiring managers who would hire martins if they knew they could do more than spell “programming”.&lt;/p&gt;
&lt;p&gt;I would submit to you that most people who can’t get a programming job either 1) never really were “programmers” in the strictest sense of the word.  Oh, yeah, they might have gotten some work done.  But can they solve problems?  Or 2) they were able to program once in a language that no one ever uses but they never kept their skills up to date.  They are still programming VB6 in a VB.NET world.  Or HTML3.2 in an HTML5 world.  Never learned to use external stylesheets.  Using JavaScript as though it is still a toy.&lt;/p&gt;
&lt;p&gt;Maybe this is harsh.  But since I’m over 50 and got a job as recently as three months ago, it isn’t like I don’t have any experience with this. Maybe you aren’t 50 yet.  Here’s my advice to you.  Always be learning.  Listen to podcast.  Subscribe to blogs and read the articles.  Read programming books.  Learn new languages.  Get a PluralSight subscription. Tons of ways for you to learn and make yourself better. Best of all, you won’t need a new pair of glasses to “see” more than 2% of your programming career.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/are-you-thinking-clearly-about-your-architectural-choices/</guid>
            <title>Are You Thinking Clearly About Your Architectural Choices?</title>
            <link>http://davembush.github.com/are-you-thinking-clearly-about-your-architectural-choices/</link>
            <category>programming</category>
            <category>testing</category>
            <category>architecture</category>
            <pubDate>Thu, 17 Sep 2015 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Recently someone asked me where the business rules should go in an MVC framework.  The Model or the Controller? This reminded me of a post I wrote when ASP.NET MVC was first released.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/aspnet-mvc-model-bll-or-dal/&#34;&gt;ASP.NET MVC – Model !&amp;#x3D; BLL or DAL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But today I want to cover a broader topic common to everyone, not just programmers.  Not being able to think outside the box.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/09/image2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Here’s-the-deal&#34;&gt;&lt;a href=&#34;#Here’s-the-deal&#34; class=&#34;headerlink&#34; title=&#34;Here’s the deal.&#34;&gt;&lt;/a&gt;Here’s the deal.&lt;/h2&gt;&lt;p&gt;Good salesmen have known for years that the best way to close the sale is to ask the customer to pick between two buying decisions.  You never ask, “So, did you want to buy that today?”  Because almost invariably the customer will say, “No” because the implication is, “Did you want to buy that today, or some other day?”  And “some other day” is always a better option to the customer.  No, the proper way to frame the question is, “So, how did you want to pay for that?  Cash or Credit?” or “Did you want the blue one or the green one?”  By doing this, the customer is no longer even thinking “later” is an option.  The only options he is thinking about are the options he’s been presented with.  This isn’t to say that there isn’t a customer who can fight past this and respond, “No, I was just looking today.”  But the chance of the customer leaving without buying have just been reduced dramatically because two buying choices have been presented.&lt;/p&gt;
&lt;p&gt;So, what does this have to do with programming?  Well, that’s exactly what happens when we’ve been given an architectural framework to program with.&lt;/p&gt;
&lt;p&gt;Someone shows you the MVC pattern and you immediately think that the only places code can live in our application are in the Model, the View, or the Controller.&lt;/p&gt;
&lt;p&gt;Someone shows you the MVP pattern and you think code can only live in the Model, the View or the Presenter.&lt;/p&gt;
&lt;p&gt;Someone shows you the MVVM pattern and we think code only lives in the Model, the View or the ViewModel.&lt;/p&gt;
&lt;p&gt;And so, I ask you. Given any of those three patterns, where do you put your business logic?  And while we are at it, where does your data access logic go?&lt;/p&gt;
&lt;h2 id=&#34;Do-we-place-it-in-the-model&#34;&gt;&lt;a href=&#34;#Do-we-place-it-in-the-model&#34; class=&#34;headerlink&#34; title=&#34;Do we place it in the model?&#34;&gt;&lt;/a&gt;Do we place it in the model?&lt;/h2&gt;&lt;p&gt;Well, what is the model for?  A model is for storing data.  For most of us the data is a record that is displayed on the screen as a series of fields.  But how it gets displayed and what it actually contains doesn’t matter as much as the fact that the model &lt;strong&gt;stores data&lt;/strong&gt;.  Nothing there even hints at executing code.  In fact, I would argue that for most of our applications, the model should be so simple that it doesn’t need to be tested.&lt;/p&gt;
&lt;h2 id=&#34;How-about-the-Controller-or-the-Presenter&#34;&gt;&lt;a href=&#34;#How-about-the-Controller-or-the-Presenter&#34; class=&#34;headerlink&#34; title=&#34;How about the Controller or the Presenter?&#34;&gt;&lt;/a&gt;How about the Controller or the Presenter?&lt;/h2&gt;&lt;p&gt;A controller or presenter sends commands to the model to change its state and sends commands to the view to update the presentation.  Here things get a little confusing.  It sounds like, because the controller is sending commands the the model and the view that it is where the business rules live.&lt;/p&gt;
&lt;p&gt;In fact, when I was first introduced to MVC, this is what I thought was true.  But notice there is nothing in the statement about what a controller does that would indicate that it is anything more than a traffic cop.&lt;/p&gt;
&lt;h2 id=&#34;View-Model&#34;&gt;&lt;a href=&#34;#View-Model&#34; class=&#34;headerlink&#34; title=&#34;View Model?&#34;&gt;&lt;/a&gt;View Model?&lt;/h2&gt;&lt;p&gt;In the MVVM pattern, it becomes even clearer that there is no clear place for business logic because the ViewModel holds the state of the view.  The presenter or controller part is handled by a binder that is typically part of the framework you are using, as with KnockOut.&lt;/p&gt;
&lt;h2 id=&#34;Thinking-outside-the-box&#34;&gt;&lt;a href=&#34;#Thinking-outside-the-box&#34; class=&#34;headerlink&#34; title=&#34;Thinking outside the box&#34;&gt;&lt;/a&gt;Thinking outside the box&lt;/h2&gt;&lt;p&gt;Now that we’ve demonstrated that none of these frameworks explicitly state where the business logic should go, where should we put it? In my case, what I’ve started doing is that I’ve created a service layer, or a business rules layer.  It handles the processing of the logic to get the rest of the code working.  The classes in this layer can either be passed the model or viewmodel in which they can change the state directly, or they can return data that the controller can distribute as needed.  In my most recent application I selected the pass the model in approach.  The result was code that was much more testable than what I had started with, which is the whole point of placing the business rules outside of the pattern to begin with.  &lt;/p&gt;
&lt;h3 id=&#34;Resources&#34;&gt;&lt;a href=&#34;#Resources&#34; class=&#34;headerlink&#34; title=&#34;Resources&#34;&gt;&lt;/a&gt;Resources&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&#34;&gt;Model View Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&#34;&gt;Model View Presenter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//en.wikipedia.org/wiki/Model_View_ViewModel&#34;&gt;Model View ViewModel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/effective-hacks-to-enhance-it-careers-of-college-students/</guid>
            <title>Effective Hacks to Enhance IT Careers of College Students</title>
            <link>http://davembush.github.com/effective-hacks-to-enhance-it-careers-of-college-students/</link>
            <category>programming</category>
            <category>college</category>
            <category>freshman</category>
            <pubDate>Thu, 03 Sep 2015 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I just got back from sending my last child off to college.  OK.  Now that you all have some vague idea of how old I am…&lt;/p&gt;
&lt;p&gt;The weekend had all kinds of events that would make for good blog post.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quality Matters – and is relatively cheap.&lt;/li&gt;
&lt;li&gt;Advice to Freshman – and young professionals.&lt;/li&gt;
&lt;li&gt;Be consistent with yourself – and learn to say no.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since I think I can hit the other two by focusing on the second, we are going to go after ‘Advice to Freshman’.&lt;/p&gt;
&lt;p&gt;The advice I am going to provide here is going to be both general in nature and specific to the IT crowd.  It is what I would tell a young IT person if I were coaching or giving a speech.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/09/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Get-a-Job-–-Any-Job&#34;&gt;&lt;a href=&#34;#Get-a-Job-–-Any-Job&#34; class=&#34;headerlink&#34; title=&#34;Get a Job – Any Job&#34;&gt;&lt;/a&gt;Get a Job – Any Job&lt;/h2&gt;&lt;p&gt;I don’t care if your family is independently wealthy or not.  Get a job.  Any job.  The research has shown that kids that have jobs do better in college than those who don’t.  The ‘Any Job’ part if aimed at those of you who are WAY too picky about what you will or will not do.  Moral qualms aside, you should be glad to be able to do just about anything.  Wash dishes, take out trash, mow the lawn, or work in sales (yes, even if you aren’t a people person).  The fact of the matter is, you need a job to get a job.  So unless you’ve already had a job, you just need something.  Once you have that job, you can start looking for the next job in about four months.  Bootstrap yourself into the job you want.  Start out with the job you can get.&lt;/p&gt;
&lt;h2 id=&#34;Establish-Relationships&#34;&gt;&lt;a href=&#34;#Establish-Relationships&#34; class=&#34;headerlink&#34; title=&#34;Establish Relationships&#34;&gt;&lt;/a&gt;Establish Relationships&lt;/h2&gt;&lt;p&gt;I know, this is going to be hard for some of you.  It was hard for me.  But relationships are what is going to get you jobs in the future.  Your degree will only help you get your first job.  From there on out it will be who knows you, what you are known for, and what you’ve done.  Take the long view and build relationships that will last past college.&lt;/p&gt;
&lt;h2 id=&#34;Be-Picky&#34;&gt;&lt;a href=&#34;#Be-Picky&#34; class=&#34;headerlink&#34; title=&#34;Be Picky&#34;&gt;&lt;/a&gt;Be Picky&lt;/h2&gt;&lt;p&gt;While you need to build relationships, you need to be careful who you build those relationships with.  Who do you want to be like?  You are the average of the 5 people you hang with the most.  So while you need to establish relationships, you need to be careful who you build those relationships with.&lt;/p&gt;
&lt;h2 id=&#34;Get-On-LinkedIn&#34;&gt;&lt;a href=&#34;#Get-On-LinkedIn&#34; class=&#34;headerlink&#34; title=&#34;Get On LinkedIn&#34;&gt;&lt;/a&gt;Get On LinkedIn&lt;/h2&gt;&lt;p&gt;I’ve written about &lt;a href=&#34;/linkedin-tips-for-programmers/&#34;&gt;how to use LinkedIn&lt;/a&gt; before.  LinkedIn is the key part of my “be everywhere” strategy.  The more people you know in your industry and your location, the easier it will be to find a job.  My experience has been that the more people I am connected to on LinkedIn, the more likely I am to have the work find me.&lt;/p&gt;
&lt;h2 id=&#34;Be-Consistent-with-Yourself&#34;&gt;&lt;a href=&#34;#Be-Consistent-with-Yourself&#34; class=&#34;headerlink&#34; title=&#34;Be Consistent with Yourself&#34;&gt;&lt;/a&gt;Be Consistent with Yourself&lt;/h2&gt;&lt;p&gt;By this I mean, don’t go wild just because you can.  When you graduate and you want to find a job.  Who do you want to be known as?  Don’t be afraid to stand out.  In fact, the more you stand out (in good ways) the better your future will be.  No one should have to ask, ‘Why should I hire you over anyone else your age?’&lt;/p&gt;
&lt;h2 id=&#34;Quality-Matters&#34;&gt;&lt;a href=&#34;#Quality-Matters&#34; class=&#34;headerlink&#34; title=&#34;Quality Matters&#34;&gt;&lt;/a&gt;Quality Matters&lt;/h2&gt;&lt;p&gt;We went into a couple “Nice” restaurants this past weekend.  It was interesting that the one where I paid 20% – 30% more was probably twice as nice.  Quality doesn’t have to cost a whole lot.&lt;/p&gt;
&lt;p&gt;If you have an assignment that is due, make it easy for your instructor to read.  Pretend you are going to publish your work for the world to read and that they are going to pay a lot of money for it.  Trust me, this will be reflected in your grade.&lt;/p&gt;
&lt;h2 id=&#34;Learn-How-to-Use-Version-Control&#34;&gt;&lt;a href=&#34;#Learn-How-to-Use-Version-Control&#34; class=&#34;headerlink&#34; title=&#34;Learn How to Use Version Control&#34;&gt;&lt;/a&gt;Learn How to Use Version Control&lt;/h2&gt;&lt;p&gt;I heard this morning that schools aren’t teaching students how to use version control.  If you are working on a group project, get a version control system and learn how to use it.  You’ll thank me later.&lt;/p&gt;
&lt;p&gt;If you are working on your own project, use version control.  The easiest way to get setup is to sign up for Visual Studio Online (which is a total misnomer).  Visual Studio Online is really TFS online.  Set it up to use GIT for the backing storage instead of TFVS.&lt;/p&gt;
&lt;p&gt;Here is how this is going to help you.  At some point, you will be working on a project and you’ll realize that you’ve made a mistake and you need to get back to where you were two hours ago.  The problem is, to get back to where you were manually, it will take you at least two hours.  More likely it will take you four hours.  With version control, you can revert to where you were (assuming that you’ve been committing all alone the way).&lt;/p&gt;
&lt;h2 id=&#34;Learn-How-to-Learn&#34;&gt;&lt;a href=&#34;#Learn-How-to-Learn&#34; class=&#34;headerlink&#34; title=&#34;Learn How to Learn&#34;&gt;&lt;/a&gt;Learn How to Learn&lt;/h2&gt;&lt;p&gt;I’m sorry, most of what you are going to learn in the next four years will be worthless by the time you graduate if it isn’t already.  But colleges have to teach something.  Many are at least teaching Java or C#, which is a good start.  But assuming those languages are still what companies want four years from now, they will look significantly different from what they do today.&lt;/p&gt;
&lt;p&gt;So, while it may be helpful to understand the syntax, and to be able to explain polymorphism, or to write some cool code.  What is really going to help you in the long term is the ability to pick up new stuff as it comes out.&lt;/p&gt;
&lt;h2 id=&#34;Start-a-Blog&#34;&gt;&lt;a href=&#34;#Start-a-Blog&#34; class=&#34;headerlink&#34; title=&#34;Start a Blog&#34;&gt;&lt;/a&gt;Start a Blog&lt;/h2&gt;&lt;p&gt;Nothing teaches like teaching.  Start a blog and share what you are learning with the world.  It will help you crystalize your thinking as you go.&lt;/p&gt;
&lt;h2 id=&#34;Never-Pull-an-All-Nighter&#34;&gt;&lt;a href=&#34;#Never-Pull-an-All-Nighter&#34; class=&#34;headerlink&#34; title=&#34;Never Pull an All-Nighter&#34;&gt;&lt;/a&gt;Never Pull an All-Nighter&lt;/h2&gt;&lt;p&gt;Yeah, I know it is cool to say you pulled an all-nighter.  But if you don’t know the material by the night before the test, you aren’t going to learn it any better in the time you should be sleeping.  In fact, staying up to learn material you should already know may actually make it less likely that you will remember the material the next day than if you had slept.&lt;/p&gt;
&lt;p&gt;Good luck as you navigate your way through life.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/5-reasons-learning-terminology-increases-your-effectiveness-as-a-programmer/</guid>
            <title>5 Reasons Learning Terminology Increases Your Effectiveness [As A Programmer]</title>
            <link>http://davembush.github.com/5-reasons-learning-terminology-increases-your-effectiveness-as-a-programmer/</link>
            <category>programming</category>
            <category>learning</category>
            <pubDate>Thu, 27 Aug 2015 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/08/image3.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;A couple of weeks ago I wrote a post “&lt;a href=&#34;/7-c-interview-questions-that-weed-out-the-losers/&#34;&gt;7 C# Interview Questions to Weed out Losers&lt;/a&gt;” which was my most popular post yet.  As of this writing, it has received over 13,000 views.  It also got a lot of comments.&lt;/p&gt;
&lt;p&gt;While there are a lot of things I could respond to, the one I want to focus on today is what I would call, “The fallacy of concepts over terminology.” While none of the comments actually come out and say this, several imply that knowing the concept but not knowing the proper term for it is enough.  In conversations with people I’ve worked with, I’ve received similar feedback.  In fact, as recent as three years ago I actually told someone, “If you want someone who can pass some sort of test, I’m probably not your guy.  If you want someone who is an awesome programmer, I’m your guy.” But three more years of experience has changed my mind.&lt;/p&gt;
&lt;h2 id=&#34;Knowing-the-Proper-Terms-Clarifies-Communication&#34;&gt;&lt;a href=&#34;#Knowing-the-Proper-Terms-Clarifies-Communication&#34; class=&#34;headerlink&#34; title=&#34;Knowing the Proper Terms Clarifies Communication&#34;&gt;&lt;/a&gt;Knowing the Proper Terms Clarifies Communication&lt;/h2&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;blockquote&gt;
&lt;p&gt;“’When &lt;strong&gt;I&lt;/strong&gt; use a word,’ Humpty Dumpty said, in rather a scornful tone, ‘it means just what I choose it to mean — neither more nor less.’” – Through the Looking Glass, by Lewis Carroll&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are just a few examples of how knowing what a term actually means helps communication: As I’ve written before, I’ve been using Sencha’s EXTjs at my day job.  When I first started using this environment, the first thing I was told was that it uses the “MVC Architecture.”  Now, to me, MVC has a very specific meaning and more importantly implies certain qualities about how the code should be written.  Primary among them is that the Model, View, and Controller are loosely coupled.  Anyone who has used EXTjs 4 knows this is not necessarily true.  What they call the “Controller” is more accurately called a “ViewController” but even then, it isn’t really.  You can’t have a controller without having a view, which makes the whole thing quite hard to test.  This whole mislabeling thing set me back about two weeks in my attempt to learn the framework.&lt;/p&gt;
&lt;p&gt;Another example from my work place.  We’ve created our own ORM to access the DB2 database we have to work with.  Why?  Because DB2 doesn’t play nice with Entity Framework.  But here again, I was told that this code implemented a design pattern that it doesn’t really implement.  Since the number of times I have to interact with this code is trivial, it was not as costly to my learning.  But it did cause confusion.&lt;/p&gt;
&lt;p&gt;Probably the most notable misuse of a word in our industry is the word “Agile.”  As I’ve been interviewing, I’ve run into a lot of companies who call themselves “Agile” but I’ve found that what they mean by “Agile” is very different from how the Agile Manifesto defines Agile.  In fact, one of the questions I ask during the interview to companies who have promoted themselves as “Agile” is, “How do you define Agile?”  One of the first places I asked this question replied, “Oh that just means we program iteratively.” So, knowing the proper term for a concept, makes your communication clear.  But that doesn’t explain why I expect someone I’m interviewing to know the term I’m using.&lt;/p&gt;
&lt;h2 id=&#34;Knowing-the-Proper-Term-Shortens-Communication&#34;&gt;&lt;a href=&#34;#Knowing-the-Proper-Term-Shortens-Communication&#34; class=&#34;headerlink&#34; title=&#34;Knowing the Proper Term Shortens Communication&#34;&gt;&lt;/a&gt;Knowing the Proper Term Shortens Communication&lt;/h2&gt;&lt;p&gt;Way back when I was first learning object oriented programming with C++, someone asked me what polymorphism was.  I couldn’t answer because I’d never heard of the word or hadn’t taken the time to find out what it means.  I can’t remember exactly.  But I had the same reaction many of you did.  “I know what virtual functions are and I know how to give a function multiple implementations by changing the signature, I just don’t know the word for it.” But you see, it is much easier to ask, “What is polymorphism?”  Than it is to ask, “What do the keywords ‘overridable’, and ‘overrides’ do?”  And then have to follow up with “what does the ‘new’ keyword do when placed in front of a method declaration?” Spoken languages have terms for the various parts of speech.  If you are a programmer, I’m sure you know about this, even if you can’t name them.  But, let’s say you were a professional writer or an editor.  You probably wouldn’t be able to even get a job if you couldn’t talk about the various parts of speech using the proper terms.  And yet, many of us expect that we should be allowed to write code without having the same ability.&lt;/p&gt;
&lt;p&gt;Which leads to my next reason.&lt;/p&gt;
&lt;h2 id=&#34;Knowing-the-Proper-Term-Aids-in-Learning&#34;&gt;&lt;a href=&#34;#Knowing-the-Proper-Term-Aids-in-Learning&#34; class=&#34;headerlink&#34; title=&#34;Knowing the Proper Term Aids in Learning&#34;&gt;&lt;/a&gt;Knowing the Proper Term Aids in Learning&lt;/h2&gt;&lt;p&gt;My family is a languages family.  My wife knows English, French, Latin (from teaching the kids), and Biblical Greek.  My daughter was an English major and learned Latin during High School.  My oldest son, knows English, Latin, Greek, and a bit of German.  My youngest son knows English, Latin, a bit of Greek and German.  I barely know English well enough to get these post written every week.  Which gives me a unique perspective.&lt;/p&gt;
&lt;p&gt;What I’ve learned as I’ve watched my family play with languages is that because they know the parts of speech in the various languages, as they pick up a new language, they can talk about a word being in a particular tense, or case, or whatever and everyone knows exactly what they are saying, making it that much easier to pick up a new language.&lt;/p&gt;
&lt;p&gt;In fact, while my son was learning German in High School, he would come home and talk to his mom and sister in German and they would be able to make out most of what he was saying because they had enough back ground in other languages and when they didn’t know something they could talk about it using the terms for the various parts of speech.&lt;/p&gt;
&lt;p&gt;This was true for me as I moved from C++ to Java and then to C# and VB.NET.  Because I already knew what polymorphism was, all I needed to know was the mechanisms in the other languages that made that feature happen.&lt;/p&gt;
&lt;h2 id=&#34;If-You-Know-the-Terminology-You-Probably-Know-the-Concept&#34;&gt;&lt;a href=&#34;#If-You-Know-the-Terminology-You-Probably-Know-the-Concept&#34; class=&#34;headerlink&#34; title=&#34;If You Know the Terminology, You Probably Know the Concept&#34;&gt;&lt;/a&gt;If You Know the Terminology, You Probably Know the Concept&lt;/h2&gt;&lt;p&gt;One of the complaints I got specifically accused me of asking questions that only proved that the applicant could pass a test.  And this is true.  If all I were to ask were these questions, this would be a bad interview indeed.  But here’s what I’ve found.  Most of the time, if you can answer the questions I’ve asked in that article, you are much more likely to be able to answer the questions I really care about.  “Are you a hack, or do you really know what you are doing?” The market is flooded with programmers with less than 5 years of experience being presented by recruiters who know nothing about programming.&lt;/p&gt;
&lt;p&gt;Using the metric of charity over what I see coming in for interviews, here is what I think is happening.&lt;/p&gt;
&lt;p&gt;Recruiter sees an applicant that has most of the buzzwords on his resume that the company they are recruiting for is looking for.  But they are missing a critical buzzword, so the recruiter adds this prior to passing the resume on.&lt;/p&gt;
&lt;p&gt;Having been on a lot of interviews over the years, I have to assume that this works enough of the time to make it worthwhile because there are some places that I’ve interviewed where I haven’t had to prove I was technically capable at all.  In fact, I’ve been on a few interviews where the resume they have for me doesn’t look anything like what I gave the recruiter.&lt;/p&gt;
&lt;p&gt;And so, those of us on the receiving end of this have to have some quick way of determining, “do you know anything?”&lt;/p&gt;
&lt;h2 id=&#34;Knowing-the-Concept-Isn’t-Enough&#34;&gt;&lt;a href=&#34;#Knowing-the-Concept-Isn’t-Enough&#34; class=&#34;headerlink&#34; title=&#34;Knowing the Concept Isn’t Enough&#34;&gt;&lt;/a&gt;Knowing the Concept Isn’t Enough&lt;/h2&gt;&lt;p&gt;Keep in mind, I used to think that knowing the concept WAS enough.  But what I’ve come to realize is that if I know a concept but I don’t know the proper terms for it, I probably don’t know the concept as well as I could.  Sure, I can write code all day long.  But, it doesn’t mean I will write the best code that I can.  It just means that I’ll get the job done.&lt;/p&gt;
&lt;p&gt;But once I spend the time to learn not just the concept, but the words that describe the concept, I’ve become a student of my craft.  I’ve proven that this is more than a job.  I’ve become a true professional.  Anything less and I’ve proven that I’m a really good hack at best.&lt;/p&gt;
&lt;p&gt;I realize that this may offend some of you.  So, let me soften this.  I’m not saying you are a bad programmer if you don’t know the proper terms for what you are doing.  What I’m saying is you aren’t as good of a programmer as you could be.  And for those of you who might disagree, the question I have to ask is, “how do you know?”  If you are still defending not having to know this, I have to make the assumption that it is because you are happy not knowing the terms.  Meaning you have nothing to compare where you are to where I am proposing that you should be.  Why not try becoming a student of programming and seeing for yourself if what I am saying has any merit or not.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/15-ways-to-write-beautiful-code-that-have-nothing-to-do-with-testing/</guid>
            <title>15 Ways To Write Beautiful Code [That Have Nothing To Do With Testing]</title>
            <link>http://davembush.github.com/15-ways-to-write-beautiful-code-that-have-nothing-to-do-with-testing/</link>
            <category>code</category>
            <category>programming</category>
            <pubDate>Thu, 06 Aug 2015 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/08/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;I got a question this last week that I answered very briefly but I felt that to answer it completely would take a blog post.  So here’s the blog post.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Should the author of a piece of code be responsible for more than just unit testing, or does peer review have a play?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Loaded question, right?  Obviously, the guy asking this question believes that an author should both unit test AND have peer review.  And I agree.  But to limit the role of a programmer to even those two things is a very narrow view of programming. Then I got to thinking about it and realized that most of what we’d be trying to accomplish with a code review encompasses everything we’d want to include in a list of things a developer is responsible for.  Further, a code review is mostly a review that ensures that 1) the code does what it is supposed to do, and 2) the code is easy to maintain in the future.&lt;/p&gt;
&lt;p&gt;In other words, all that the word “Peer review” or “Code review” encompasses is largely about code clarity.&lt;/p&gt;
&lt;p&gt;Code clarity addresses the issue we all have when we pick up a new piece of code.  Can you understand it easily?  I just listened to a &lt;a href=&#34;//dotnetrocks.com/default.aspx?showNum=1172&#34;&gt;DotNetRocks episode&lt;/a&gt; that was all about the fact that we spend most of our time reading code and yet no one is talking about how we might do this better.  One way we can read code better is by writing it more clearly in the first place.&lt;/p&gt;
&lt;p&gt;Here are 15 ways you can make your code easier to read:&lt;/p&gt;
&lt;h2 id=&#34;Make-your-code-pretty&#34;&gt;&lt;a href=&#34;#Make-your-code-pretty&#34; class=&#34;headerlink&#34; title=&#34;Make your code pretty&#34;&gt;&lt;/a&gt;Make your code pretty&lt;/h2&gt;&lt;p&gt;I remember back when I was doing Clipper programming, we had one guy who would always show code that was ready to be printed in a text book.  I mean, regardless of what you had to say about what he had actually coded, the visual presentation of the code was a thing of beauty.  He had us believing that all of his code looked like that.  Then he went to work for some other company and we actually looked at the other code he had written.  It looked just like any other code.&lt;/p&gt;
&lt;p&gt;But it taught me a lesson.  A lesson I, unfortunately still need to be reminded of.  Pretty code is easier to maintain and implies a lot about the quality of the code.  Just like you wouldn’t go to an interview without wearing a suit because how you dress implies something about how you’ll program, your code should imply the quality by what it looks like before you ever start reading it.&lt;/p&gt;
&lt;h2 id=&#34;Establish-and-obey-naming-conventions-for-your-code&#34;&gt;&lt;a href=&#34;#Establish-and-obey-naming-conventions-for-your-code&#34; class=&#34;headerlink&#34; title=&#34;Establish and obey naming conventions for your code.&#34;&gt;&lt;/a&gt;Establish and obey naming conventions for your code.&lt;/h2&gt;&lt;p&gt;I’ve written about this before.  Most notably when .NET first came out in the article about &lt;a href=&#34;/hungarian-notation-use-what-works-spit-out-the-bones/&#34;&gt;Hungarian Notation&lt;/a&gt;.  As I point out in that article, not using Hungarian notation doesn’t mean you don’t have any standards.  Sure, you don’t want to prefix all of your integers with a lower case “I”, because you don’t care what kind of number it is.  But it is valuable to prefix a button with “button” so that it is easier to find in your Intellisense, or if you need to search your code for what you named it, it is much easier to find all of the buttons in your code this way.&lt;/p&gt;
&lt;p&gt;But there is another reason to establish and obey naming conventions.  Once you’ve done this, it makes it easier for everyone who is using those common conventions to read your code.&lt;/p&gt;
&lt;p&gt;For example, where I work, we have what I consider a very odd naming convention.  All of our POCO classes (we generate this ourselves because we are using DB2) are all UPPERCASE_UNDERSCORE_SEPARATED.  And all our properties of POCO collections are named UPPERCASE_UNDERSCORE_SEPARATEDs.  It used to drive me crazy, mostly because I use &lt;a href=&#34;/resharper&#34;&gt;ReSharper&lt;/a&gt; religiously and the default rules aren’t setup to handle this odd convention.  But, it is a standard and, I can tell you now, you open a file that is using a POCO and you know you are dealing with a POCO.  No question about it! While I still don’t recommend the practice, I tell you that example because it illustrates how much a coding standard can instantly tell you something about the code you are working on before you ever start reading the code.&lt;/p&gt;
&lt;h2 id=&#34;Establish-and-obey-a-common-architecture&#34;&gt;&lt;a href=&#34;#Establish-and-obey-a-common-architecture&#34; class=&#34;headerlink&#34; title=&#34;Establish and obey a common architecture.&#34;&gt;&lt;/a&gt;Establish and obey a common architecture.&lt;/h2&gt;&lt;p&gt;One of the biggest problems I have in reading other people’s code is if I can’t understand why they put things where they put them.  But having a common architecture that is easy to explain helps alleviate a lot of this problem.  One of the reasons I like working with frameworks is because much of the time these decisions are already made for you.  For example, just having a simple three tiered architecture that separates the View, Business Rules, and Data Access into different parts of your code can go a long way toward making code easy to read.  Within this basic framework you can layer in Model View Presenter, Model View Controller or any other design patterns.  Follow the mantra, “A place for everything and everything in its place” and your code will be much easier to follow.&lt;/p&gt;
&lt;h2 id=&#34;Name-objects-as-nouns-methods-as-verbs&#34;&gt;&lt;a href=&#34;#Name-objects-as-nouns-methods-as-verbs&#34; class=&#34;headerlink&#34; title=&#34;Name objects as nouns, methods as verbs.&#34;&gt;&lt;/a&gt;Name objects as nouns, methods as verbs.&lt;/h2&gt;&lt;p&gt;This is so basic that I almost feel like I should have to write this here.  But I still see the principle violate all of the time.  So, here it is.  Obviously, if you aren’t following an object oriented methodology.  Say you are doing Functional or Procedural programming, you’ll need to adapt this rule to your environment.  But for OOP guys and gals.  Stop breaking this rule.  It is a sign of immaturity.&lt;/p&gt;
&lt;h2 id=&#34;Name-variable-what-they-are&#34;&gt;&lt;a href=&#34;#Name-variable-what-they-are&#34; class=&#34;headerlink&#34; title=&#34;Name variable what they are.&#34;&gt;&lt;/a&gt;Name variable what they are.&lt;/h2&gt;&lt;p&gt;Similarly, stop with the short variable names unless you are using a language that is still so archaic as to require it.  I’ve written about this before.  Twice actually.  &lt;a href=&#34;/tags/naming-conventions/&#34;&gt;With rants about using i, j and k as variable names&lt;/a&gt;.  The point here is that you want to be able to read your code and to do that your code has to tell you something about what you are doing.  Short variable names almost always never assist in code readability.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-include-a-noun-in-your-method&#34;&gt;&lt;a href=&#34;#Don’t-include-a-noun-in-your-method&#34; class=&#34;headerlink&#34; title=&#34;Don’t include a noun in your method.&#34;&gt;&lt;/a&gt;Don’t include a noun in your method.&lt;/h2&gt;&lt;p&gt;This is different from just saying that method should be verbs.  There are a lot of places where I’ve seen code that has a verb AND a noun as a method name.  If you have a method that has both a noun and a verb in it, your class is probably trying to do too much.&lt;/p&gt;
&lt;p&gt;Wouldn’t it look funny if you had a Person class that had a method in it called FirstNameToLower()?&lt;/p&gt;
&lt;h2 id=&#34;Establish-a-cyclomatic-complexity-threshold-for-your-methods-and-obey-them-religiously&#34;&gt;&lt;a href=&#34;#Establish-a-cyclomatic-complexity-threshold-for-your-methods-and-obey-them-religiously&#34; class=&#34;headerlink&#34; title=&#34;Establish a cyclomatic complexity threshold for your methods and obey them religiously.&#34;&gt;&lt;/a&gt;Establish a &lt;a href=&#34;//en.wikipedia.org/wiki/Cyclomatic_complexity&#34;&gt;cyclomatic complexity&lt;/a&gt; threshold for your methods and obey them religiously.&lt;/h2&gt;&lt;p&gt;Cyclomatic complexity takes into account how many statements have to be executed and, most importantly, how many conditionals have to be executed in your code.  The easiest way to reduce cyclomatic complexity is to reduce the number of conditions.  But aside from that, you can make your code much more readable by eliminating nesting where ever possible.&lt;/p&gt;
&lt;p&gt;One of my favorites is instead of writing code that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SomeMethod&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x != y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// do stuff here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can make your code much more readable by writing it like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SomeMethod&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x == y) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;// do stuff here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, instead of nesting when this doesn’t work, as with while statements that contain other while statements, why not create a method for each while statement?&lt;/p&gt;
&lt;h2 id=&#34;Make-code-“self-documenting”&#34;&gt;&lt;a href=&#34;#Make-code-“self-documenting”&#34; class=&#34;headerlink&#34; title=&#34;Make code “self-documenting”&#34;&gt;&lt;/a&gt;Make code “self-documenting”&lt;/h2&gt;&lt;p&gt;That is, if you feel your code needs a comment, you probably have violated one or more of the other readability suggestions.  This is not to say that you should never add comments, but they should not be a replacement for readable code.  I generally leave comments for WHY I did something and leave the WHAT I did to the code.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-add-comments-for-things-that-you-can-deduce-by-reading-the-code&#34;&gt;&lt;a href=&#34;#Don’t-add-comments-for-things-that-you-can-deduce-by-reading-the-code&#34; class=&#34;headerlink&#34; title=&#34;Don’t add comments for things that you can deduce by reading the code.&#34;&gt;&lt;/a&gt;Don’t add comments for things that you can deduce by reading the code.&lt;/h2&gt;&lt;p&gt;“This next line increments loopVar by 1” does no one any good and could eventually end up being litter in your code that makes the code harder to read.  Why?  Because it is possible for loopVar to get renamed, or removed and the comment could stick around forever.  Until we get compilers that verify our comments as well as our executable code, referencing variables in comments is a generally bad practice that should be avoided.&lt;/p&gt;
&lt;h2 id=&#34;Is-the-code-SOLID&#34;&gt;&lt;a href=&#34;#Is-the-code-SOLID&#34; class=&#34;headerlink&#34; title=&#34;Is the code SOLID?&#34;&gt;&lt;/a&gt;Is the code &lt;a href=&#34;/pluralsightSOLID&#34;&gt;SOLID&lt;/a&gt;?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Single Responsibility of classes&lt;/li&gt;
&lt;li&gt;Open&amp;#x2F;Close Principle&lt;/li&gt;
&lt;li&gt;Liskov Substitution Principle&lt;/li&gt;
&lt;li&gt;Interface Segregation Principle&lt;/li&gt;
&lt;li&gt;Dependency Inversion&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Is-the-code-testable&#34;&gt;&lt;a href=&#34;#Is-the-code-testable&#34; class=&#34;headerlink&#34; title=&#34;Is the code testable?&#34;&gt;&lt;/a&gt;Is the code testable?&lt;/h2&gt;&lt;p&gt;If you follow all the rules above, the code should be easy to test.  But, this is something that you should review your code for explicitly.&lt;/p&gt;
&lt;h2 id=&#34;Will-the-code-fail&#34;&gt;&lt;a href=&#34;#Will-the-code-fail&#34; class=&#34;headerlink&#34; title=&#34;Will the code fail?&#34;&gt;&lt;/a&gt;Will the code fail?&lt;/h2&gt;&lt;p&gt;Can anyone write code that uses any particular method that would make the method crash, throw an exception, or otherwise do something that was never intended?&lt;/p&gt;
&lt;h2 id=&#34;Code-duplications&#34;&gt;&lt;a href=&#34;#Code-duplications&#34; class=&#34;headerlink&#34; title=&#34;Code duplications.&#34;&gt;&lt;/a&gt;Code duplications.&lt;/h2&gt;&lt;p&gt;I don’t know about you, but I’m pretty sure I’ve got code that looks practically the same littered throughout my code base.  One of my current goals is to make myself create a new method any time I’m getting ready to copy and paste more than three lines of code.&lt;/p&gt;
&lt;h2 id=&#34;100-Code-Coverage&#34;&gt;&lt;a href=&#34;#100-Code-Coverage&#34; class=&#34;headerlink&#34; title=&#34;100% Code Coverage&#34;&gt;&lt;/a&gt;100% Code Coverage&lt;/h2&gt;&lt;p&gt;Assuming you have unit test, do you have 100% code coverage on all of the methods that have a cyclomatic complexity score greater than 1?  I’m talking about code you’ve written.  I’ve written before about &lt;a href=&#34;/100-code-coverage/&#34;&gt;what code should be tested&lt;/a&gt; and what code doesn’t need to be tested.&lt;/p&gt;
&lt;h2 id=&#34;Learn-the-vocabulary-of-your-language&#34;&gt;&lt;a href=&#34;#Learn-the-vocabulary-of-your-language&#34; class=&#34;headerlink&#34; title=&#34;Learn the vocabulary of your language&#34;&gt;&lt;/a&gt;Learn the vocabulary of your language&lt;/h2&gt;&lt;p&gt;John Sonmez wrote a very compelling article in 2013 about &lt;a href=&#34;//simpleprogrammer.com/2013/04/14/what-makes-code-readable-not-what-you-think/&#34;&gt;what makes code readable&lt;/a&gt;.  In it he says that just like when we learn to read.  Code that is readable by a senior level developer may not be readable by an entry level developer simply because the entry level developer doesn’t have a firm grasp of the language.  Like John, I’ve been criticized for using the ternary operator because it is too terse.  Not descriptive enough.  Un-readable.  And I’ve always responded that arguing that the syntax isn’t clear is like arguing that a sentence isn’t clear because it uses a word you aren’t familiar with.  The word may actually be the perfect word for what the author is trying to communicate.  Your understanding of that word does not make the writing bad.  It just means the reader has some more learning to do.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/cracking-the-programmer-s-interview-code/</guid>
            <title>Cracking the Programmer&#39;s Interview Code</title>
            <link>http://davembush.github.com/cracking-the-programmer-s-interview-code/</link>
            <category>programming</category>
            <category>interview</category>
            <pubDate>Thu, 07 May 2015 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/04/33Tr.png&#34; alt=&#34;33Tr&#34; title=&#34;33Tr&#34;&gt;&lt;/p&gt;
&lt;p&gt;Several comments this week contribute to this week’s post.&lt;/p&gt;
&lt;p&gt;The first, and the one that pushed me to write this post, is a discussion over at Simple Programmer on a post called “&lt;a href=&#34;//simpleprogrammer.com/2015/01/19/cracking-the-coding-interview/&#34;&gt;Cracking the Coding Interview&lt;/a&gt;” where I made the following statement,&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;blockquote&gt;
&lt;p&gt;Coding interview? Really? I wouldn’t bother. This is right up there with working 60 hour weeks for me. Yes, I know all the big companies do this, but it doesn’t make it right. “Just because you can, doesn’t mean you should.” I’ve been programming now for 27 years. I started with DOS 3.1 for anyone who’s trying to figure out when that was. I’ve NEVER had to do a coding interview and I make really good money so it isn’t that I’m working for minimum wage. Here’s the deal. I can tell in about 10 minutes if another programmer knows their stuff. I expect that any company worth working for (and yes that includes even Amazon, Google, Microsoft, and the other big boys) should have someone on their staff who can do the same. The best interview I’ve ever had is from the guy I currently work under. The question was, “I know nothing about JavaScript, tell me what I need to know.” And then he just shut up and let me talk. Every once in a while, he’s ask me to drill deeper on the topic. But it is the only interview in 27 years where I felt like the guy interviewing me really wanted to know what I knew. Most of the other tech interviews I’ve been on have been more of the interviewer telling me how much he knew (by asking impossible questions). Now, if I ever did run into an interview where they wanted me to write code on a whiteboard, I’d probably pseudo code it out and explain that I’m a huge fan of Intellisense, particularly ReSharper, and Google and that I rely heavily on those two to get the syntax right. If you want a guy who can write code in notepad, I’m probably not the guy you’re looking for. If you want a guy who can solve problems, who understands how to write testable code, write unit test, can mentor younger programmers, understands what it really means to be agile, and can say “no” to power when it is appropriate, then I’m the guy you want.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  OK, I admit, that probably came off a little strong.  But the point is, I don’t see any value in coding tests.  And when I interview others, what a coding test would reveal isn’t what I want to know about the interviewee and isn’t what I want to be known for.&lt;/p&gt;
&lt;h2 id=&#34;Response&#34;&gt;&lt;a href=&#34;#Response&#34; class=&#34;headerlink&#34; title=&#34;Response&#34;&gt;&lt;/a&gt;Response&lt;/h2&gt;&lt;p&gt;That was weeks ago.  The comment was followed up yesterday by this response&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why wouldn’t you want to have all the qualities of the latter and the ability to write code in notepad? Who says you have to be one or the other? It seems to me that most places would want to hire someone who could do both. In all my interviews, as a candidate, I’ve walked out having learned something new from a coding challenge. It’s a “free” opportunity to learn something new from someone who has different experiences and levels of understanding than I do. It’s also a good opportunity for me to recognize my knowledge gaps where I need to be stronger. Also, I think you missed out on one really critical component of white boarding code challenges. As someone who’s been on the asking questions side, I’m okay with the candidate not knowing the intricacies of array manipulation in JavaScript, but being able to have someone talk through a problem and ask questions and have a dialogue is a really important aspect for me. I really want to know how tenacious a candidate is at figuring out a problem. If they get an answer right away, we’ll move onto something else, but I want to know how willing they are to break through the wall when they don’t immediately know how to solve a problem. I also want to work with someone I enjoy solving problems with, who isn’t going to look down at their peers because they don’t have experience in time or if they have knowledge gaps. Coding challenges are an easy way to hash these things out. I’ve never made a life decision based on a 10 minute conversation and I’d hope no one would ever make a decision that could impact the next 3-5 years of my life based on a 10 minute conversation where a little extra time doing something that’s relevant and challenging could be more indicative of how I will do as a potential future team member.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;Recruiter-Says&#34;&gt;&lt;a href=&#34;#Recruiter-Says&#34; class=&#34;headerlink&#34; title=&#34;Recruiter Says&#34;&gt;&lt;/a&gt;Recruiter Says&lt;/h2&gt;&lt;p&gt;And then there was this offhand comment by a recruiter this week who told me, “You know what reason most hiring managers give for refusing candidates we send them is?  ‘They aren’t dynamic enough.’  What does that even mean?” And so rather than write a whole blog post as a blog comment, I respond here.&lt;/p&gt;
&lt;h2 id=&#34;Why-Not-Both&#34;&gt;&lt;a href=&#34;#Why-Not-Both&#34; class=&#34;headerlink&#34; title=&#34;Why Not Both?&#34;&gt;&lt;/a&gt;Why Not Both?&lt;/h2&gt;&lt;p&gt;First, let’s get at the first question the responder asked.  Why wouldn’t I want to have all the qualities of the later and the ability to write code in notepad? Well, it really isn’t a matter of either&amp;#x2F;or.  I think my method actually gets deeper faster.  The place I currently work interviews 10 people for every 1 we hire because most people (9 out of 10) can’t talk knowledgeably about anything they have on their resumes.&lt;/p&gt;
&lt;p&gt;Once we’ve established that they aren’t lying on their resume about their experience, we can be pretty sure they’ve actually written code.  A white board coding interview might be a way of getting at this information.  I just happen to think it is inefficient at best and puts undo stress on a candidate who may otherwise be exactly what you are looking for.  In fact, you’ll notice that the comment says that the whole point of the interview is to have an interaction.  I assure you this can be done by just having a conversation about code.&lt;/p&gt;
&lt;p&gt;Second, unless you state up front that you are only looking for pseudo code and how the candidate thinks, the candidate is going to stress over syntax.  Assuming that he gets it right, it doesn’t necessarily mean that he is an efficient coder.  It only means he’s memorized a lot of syntax and can use it.&lt;/p&gt;
&lt;p&gt;The final statement is where I want to spend most of my time though.  Sorry for so much “ink” to get to the main point, but I wanted to setup the context for you.&lt;/p&gt;
&lt;h2 id=&#34;Decisions-Based-On-10-Minute-Conversation&#34;&gt;&lt;a href=&#34;#Decisions-Based-On-10-Minute-Conversation&#34; class=&#34;headerlink&#34; title=&#34;Decisions Based On 10 Minute Conversation&#34;&gt;&lt;/a&gt;Decisions Based On 10 Minute Conversation&lt;/h2&gt;&lt;p&gt;He states, “I’ve never made a life decision based on a 10 minute conversation …” First, I never said that an interview should only be 10 minutes long.  If the Interview only lasted 10 minutes, that would be a bad sign too.  Although, I don’t think you’d find out anything more useful by taking more than 10 minutes.&lt;/p&gt;
&lt;p&gt;Current research suggest that, no matter which method we use, most of us are hired (or hire) or not within the first 30 seconds.&lt;/p&gt;
&lt;p&gt;The rest of the time we come up with supporting reasons.  The fact of the matter is, by the time you’ve reached the coding interview, the decision has already been made.  This is just a way to justify the decision.&lt;/p&gt;
&lt;p&gt;If you were to study the psychology of sales, you would find that all of us buy based on our emotions and come up with logical reasons why after we’ve already made the decision.  This is why sales literature is aimed at the emotions.  In some way saying, “If you buy this product, you will not have to worry anymore about X”.  Sales pages are constructed the way they are based on this.  I once created a fake sales page using the formula.&lt;/p&gt;
&lt;p&gt;As much as we’d like to think otherwise, we ALL do this.  (And watch the comments come in on that statement!  Bring ‘em on.) And so we come to the final question, what do we mean by “dynamic” and how did this impact the interview.&lt;/p&gt;
&lt;h2 id=&#34;What-Does-“Dynamic”-Mean&#34;&gt;&lt;a href=&#34;#What-Does-“Dynamic”-Mean&#34; class=&#34;headerlink&#34; title=&#34;What Does “Dynamic” Mean?&#34;&gt;&lt;/a&gt;What Does “Dynamic” Mean?&lt;/h2&gt;&lt;p&gt;Well, I’ll tell you.  It’s like this.&lt;/p&gt;
&lt;p&gt;This week I went to a meet-up for ASP.NET and JavaScript developers.  Every person there I talked to was passionate about programming.  It was the easiest group of people I’ve ever mingled with.  Why?  Because they all wanted to talk about code.  They all had opinions.  Some I even disagree with.  But assuming they could agree to the standards at my organization, I would have hired any one of them.  Why?  Because they were “dynamic.” One guy in particular I talked to for several hours.  I knew in the first 10 minutes that he knew what he was doing.  Several hours later, I found some areas we disagreed on.  I never had to look at any code.  The way he talked about coding told me that he could code.  The projects he talked about told me that he could solve problems.  And the fact that he could explain those problems he was solving to me showed me that he could communicate.&lt;/p&gt;
&lt;h2 id=&#34;Cracking-The-Programmer’s-Interview-Code&#34;&gt;&lt;a href=&#34;#Cracking-The-Programmer’s-Interview-Code&#34; class=&#34;headerlink&#34; title=&#34;Cracking The Programmer’s Interview Code&#34;&gt;&lt;/a&gt;Cracking The Programmer’s Interview Code&lt;/h2&gt;&lt;p&gt;And so, to the point of the title.  The way you “Crack the Programmer’s Interview Code” is to be passionate about what you do.  Unfortunately, you can’t fake that if you don’t have a clue about programming in the first place.  Yes, you can grease the skids a bit.  Dress up for the interview.  Don’t smell.  Don’t be a jerk.  Be confident but not arrogant.  Beyond that, winning at the interview may simply be a matter of fit.  You may have to do some sort of code interview.  Or you might decide to skip it because that’s an indication to you that this place won’t be a good fit for you.  And that’s OK.  There are plenty of places to work.  You don’t have to take the first job that pays. You’ll get bonus points if you can walk into the interview already knowing what the pain points are so you can address them.  If you know what they fear, what keeps them up at night, and can show how you are the one who can solve that pain point, you are half way to getting the job. None of these are guarantees.  You may not get the job and it may have nothing to do with you.  One of the things I’m realizing is that the way people react to me has at least as much to do with them as it does with me.  If the guy is having a bad day and&amp;#x2F;or you say or do something that reminds him of something he’s associated with a bad memory, there is no way for you to know that and probably nothing you could do about it if you did.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/how-to-become-a-better-programmer/</guid>
            <title>How to Become a Better Programmer</title>
            <link>http://davembush.github.com/how-to-become-a-better-programmer/</link>
            <category>programming</category>
            <pubDate>Thu, 16 Apr 2015 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/04/ppl-men-058.jpg&#34; alt=&#34;ppl-men-058&#34; title=&#34;Be a better programmer&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you advance in your career, you will inevitably want to improve as a programmer.  And as you search the Internet and read various web post on the subject you will also inevitably end up with a bunch of task you should perform that will make you better. For example, if you’ve been following this blog lately, you’ll notice that I’m a big proponent of &lt;a href=&#34;/?s=tdd&#34;&gt;Test Driven Development&lt;/a&gt;.  You would naturally expect me to state that to be a better programmer, you should practice Test Driven Development. There has also been a lot of emphasis recently on good basic programming principles like &lt;a href=&#34;/dry-programming/&#34;&gt;DRY&lt;/a&gt; and &lt;a href=&#34;//en.wikipedia.org/wiki/SOLID_(object-oriented_design)&#34;&gt;SOLID&lt;/a&gt;. The list could go on.  Here are a few you may be interested in experimenting with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Code Reviews&lt;/li&gt;
&lt;li&gt;Paired Programming&lt;/li&gt;
&lt;li&gt;Learn and Implement Design Patterns&lt;/li&gt;
&lt;li&gt;Reduce Method&amp;#x2F;Class Complexity&lt;/li&gt;
&lt;li&gt;Practice Code Katas&lt;/li&gt;
&lt;li&gt;Participate in the Community&lt;ul&gt;
&lt;li&gt;Start a Blog&lt;/li&gt;
&lt;li&gt;Participate on StackOverflow&lt;/li&gt;
&lt;li&gt;Read and  Comment on other people’s Blogs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And while all of these and more are good ideas, none of these ideas will actually MAKE you a better programmer.  Why?  Because becoming a better programmer is mostly about becoming a better person.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;The-Human-Side-of-Programming&#34;&gt;&lt;a href=&#34;#The-Human-Side-of-Programming&#34; class=&#34;headerlink&#34; title=&#34;The Human Side of Programming&#34;&gt;&lt;/a&gt;The Human Side of Programming&lt;/h2&gt;&lt;p&gt;You see, as much as many of use would like it to be otherwise, programming is a relational occupation.  I think, when I started, I was attracted to programming both because I liked programming and because it seemed like something I could do without too much interaction with people.  I because a consultant because I wanted to be my own boss.  But I quickly found out in both cases that in running away from relationships I was running smack in the middle of them.  We have to talk to clients to get the requirements.  We have to ask good questions.  We have to argue for what we think is right without alienating other people.&lt;/p&gt;
&lt;p&gt;And that being a consultant thing?  I found out pretty quickly that no matter what you do, there is always someone in charge.  If you have multiple clients, you have multiple bosses.  Being your own boss is a myth.  Fortunately, I like consulting for other reasons.&lt;/p&gt;
&lt;h2 id=&#34;Listen&#34;&gt;&lt;a href=&#34;#Listen&#34; class=&#34;headerlink&#34; title=&#34;Listen&#34;&gt;&lt;/a&gt;Listen&lt;/h2&gt;&lt;p&gt;Because programming is so relational, much of programming requires communication.  So the first thing we all need to work on is our listening skills.  Don’t go into a meeting with any preconceived idea of what the answers should be.  If you have a tendency to talk a lot, be quiet.  I’ve found that if I keep my mouth shut long enough, eventually others will say the same thing I was going to say.&lt;/p&gt;
&lt;h2 id=&#34;Killer-Questions&#34;&gt;&lt;a href=&#34;#Killer-Questions&#34; class=&#34;headerlink&#34; title=&#34;Killer Questions&#34;&gt;&lt;/a&gt;Killer Questions&lt;/h2&gt;&lt;p&gt;When you do talk, ask questions.&lt;/p&gt;
&lt;p&gt;I have a friend who says, “You’ll never own the answers if you don’t own the questions.”  So, don’t tell anyone anything that you can’t lead them to with questions.  Yes this takes longer but, it does two things for you.&lt;/p&gt;
&lt;p&gt;First, it makes you sound interested in what the other person thinks.  This only works, of course, if you really are interested.  The questions are just a way of helping you express the interest that you already have.  You can’t make interest a formula.  But, I would say that many people who are interested don’t sound interested because they only know how to state things.&lt;/p&gt;
&lt;p&gt;Several years ago, I learned about “&lt;a href=&#34;//changingminds.org/techniques/questioning/socratic_questions.htm&#34;&gt;Socratic Questioning&lt;/a&gt;”  These questions are designed to get at the person’s thinking process.  Sometimes, just in asking the question, the person will realize they don’t know why they think what they think.&lt;/p&gt;
&lt;p&gt;I remember the gist of this by using these four questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What do you mean by…?&lt;/li&gt;
&lt;li&gt;How do you know…?&lt;/li&gt;
&lt;li&gt;What difference does it make?&lt;/li&gt;
&lt;li&gt;What if you’re wrong?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The danger is in using these questions to win arguments.  I would suggest that instead you use them to understand where the other person is coming from.  Remember, these are questions to help you listen, not to help you win.&lt;/p&gt;
&lt;h2 id=&#34;“What-I-think-I-heard-you-say…”&#34;&gt;&lt;a href=&#34;#“What-I-think-I-heard-you-say…”&#34; class=&#34;headerlink&#34; title=&#34;“What I think I heard you say…”&#34;&gt;&lt;/a&gt;“What I think I heard you say…”&lt;/h2&gt;&lt;p&gt;I just learned this one recently and I’m still learning to incorporate it.  It is the follow up statement to Socratic Questioning.  This is your chance to make sure you’ve understood what the other person said by repeating what they’ve said in your own words.&lt;/p&gt;
&lt;p&gt;It is a funny thing about language, but people can use the same words and mean two entirely different things.  Have you ever had a situation where you’ve said something with absolutely no malice intended and the other person was offended?  That’s because we hear things based on our past, what happened previously in the day, and the stuff we are worrying about.  People are funny that way.&lt;/p&gt;
&lt;h2 id=&#34;The-Golden-Rule&#34;&gt;&lt;a href=&#34;#The-Golden-Rule&#34; class=&#34;headerlink&#34; title=&#34;The Golden Rule&#34;&gt;&lt;/a&gt;The Golden Rule&lt;/h2&gt;&lt;p&gt;OK, so everyone knows the golden rule, right? “Do unto others what you would have done to you.”  But, I’m going to put this in new terms.  “Everyone wants to be God.  Will it kill you to let them continue to think they are?” Yeah yeah, I know.  They aren’t God.  But, we all want to be.  And all conflict starts because my desire to be God is conflicting with your desire to be God.  To eliminate conflict one of us has to admit that we aren’t.  You can’t control the other person, so the only way to solve this is for you to admit that you aren’t God.  But even better if you go ahead and treat the other person like they are.&lt;/p&gt;
&lt;h2 id=&#34;Diet-Exercise-amp-Sleep&#34;&gt;&lt;a href=&#34;#Diet-Exercise-amp-Sleep&#34; class=&#34;headerlink&#34; title=&#34;Diet, Exercise &amp;amp; Sleep&#34;&gt;&lt;/a&gt;Diet, Exercise &amp;amp; Sleep&lt;/h2&gt;&lt;p&gt;You may wonder what your health has to do with being a better programmer.  Especially if you don’t pay any attention to these things now.  But here are a few things I’ve noticed as I’ve started to pay more attention to my own health.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I think better.&lt;/li&gt;
&lt;li&gt;I’m not as tired during the day.&lt;/li&gt;
&lt;li&gt;I’m not as tired at night.&lt;/li&gt;
&lt;li&gt;I can get more done.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ll leave exactly what that looks like to you.  But, for the curious, here is what this looks like for me.&lt;/p&gt;
&lt;h3 id=&#34;High-fat-low-carb-diet-HFLC&#34;&gt;&lt;a href=&#34;#High-fat-low-carb-diet-HFLC&#34; class=&#34;headerlink&#34; title=&#34;High fat, low carb diet (HFLC).&#34;&gt;&lt;/a&gt;High fat, low carb diet (HFLC).&lt;/h3&gt;&lt;p&gt;I started HFLC because I wanted to loose weight.  I was able to loose 30 pounds in a year.  But, what I found is that many of the health issues I had been experiencing were ultimately caused by the carbs I was eating.  I used to get headaches periodically that would last all day.  I guess they were migraines?  They were never diagnosed.  All I know is that I didn’t have one the whole year I was on a strict HFLC diet.  I also found out that my lactose intolerance was cured by this diet.&lt;/p&gt;
&lt;h3 id=&#34;Strength-Training&#34;&gt;&lt;a href=&#34;#Strength-Training&#34; class=&#34;headerlink&#34; title=&#34;Strength Training&#34;&gt;&lt;/a&gt;Strength Training&lt;/h3&gt;&lt;p&gt;One of the things I found out when I was dieting was that strength training helps burn calories even when you aren’t exercising.  So I added modest strength exercises into my routine in the morning.  John Sonmez has convinced me to add a cardio element to my routine in his book, &lt;a href=&#34;/softSkills&#34;&gt;Soft Skills&lt;/a&gt;.  Since I know that my resistance to discomfort will keep me from running when it is raining, hot, or cold, I’m looking for a treadmill or an elliptical machine so I can start &lt;a href=&#34;//www.c25k.com/&#34;&gt;C25K&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;Sleep&#34;&gt;&lt;a href=&#34;#Sleep&#34; class=&#34;headerlink&#34; title=&#34;Sleep&#34;&gt;&lt;/a&gt;Sleep&lt;/h3&gt;&lt;p&gt;Sleep has never really been an issue for me.  I was once asked, “what keeps you up at night?”  My response, “Nothing!”  Seriously, I can sleep in the middle of the living room with all kinds of stuff going on.  And while I do have particular things I “worry” about, I don’t worry about them when I’m supposed to be sleeping. But, I was finding that I was kind of sleepy during the day a lot of times.  That’s odd because I tend to get a good seven and a half hours of sleep and I’m pretty much done sleeping by the end of the time period.&lt;/p&gt;
&lt;p&gt;Then I found this app called “&lt;a href=&#34;//www.sleepcycle.com/&#34;&gt;Sleep Cycle&lt;/a&gt;” that wakes you up before you fall back to sleep.  After a couple of weeks using this, along  with getting up at the same time every morning even on weekends, I’m much less likely to be dragging by the end of the day.  I find that people either love this app or hate it.  It has some other features that I don’t find very useful.  Like it tells me I had a N% good sleep.  I’ve never achieved better than 85%.  Last night it gave me a 50% score.  But in both cases, I don’t get tired until an hour before I plan to go to bed.  I’m not sure it is very accurate.  It also checks your heart rate in the morning.  But, that using the flash on the phone which bothered my wife so I’ve stopped using that.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-Be-So-Critical&#34;&gt;&lt;a href=&#34;#Don’t-Be-So-Critical&#34; class=&#34;headerlink&#34; title=&#34;Don’t Be So Critical&#34;&gt;&lt;/a&gt;Don’t Be So Critical&lt;/h2&gt;&lt;p&gt;I think because we spend most of our day programming and naturally like to solve problems, we tend to come off as critical.  We probably are.&lt;/p&gt;
&lt;p&gt;Ever thought or heard things like, “The boss has no clue what he’s doing.”?  “This place would be better if…”  “If only they’d …” Here’s something to think about.  If you know so much, why don’t you start your own company? Here are a few things I’ve learned over the years.  They’ll seem obvious once I state them, but I think we forget.&lt;/p&gt;
&lt;h3 id=&#34;My-Boss-Has-a-Boss&#34;&gt;&lt;a href=&#34;#My-Boss-Has-a-Boss&#34; class=&#34;headerlink&#34; title=&#34;My Boss Has a  Boss&#34;&gt;&lt;/a&gt;My Boss Has a  Boss&lt;/h3&gt;&lt;p&gt;I can’t tell you how many times when I’ve actually asked my boss to explain something, the answer has been, “that’s what my boss wants”&lt;/p&gt;
&lt;h3 id=&#34;Everyone-Is-Doing-The-Best-They-Can&#34;&gt;&lt;a href=&#34;#Everyone-Is-Doing-The-Best-They-Can&#34; class=&#34;headerlink&#34; title=&#34;Everyone Is Doing The Best They Can&#34;&gt;&lt;/a&gt;Everyone Is Doing The Best They Can&lt;/h3&gt;&lt;p&gt;I know this may come as a shock.  But seriously, most people, while not perfect, aren’t deliberately thinking, “how can I make everyone’s life difficult today?”  Often the thing we look at as a stupid requirement or a stupid rule is because someone in the organization is trying to solve a problem and this is the best solution they could come up with.&lt;/p&gt;
&lt;h3 id=&#34;Everyone-Has-a-Life&#34;&gt;&lt;a href=&#34;#Everyone-Has-a-Life&#34; class=&#34;headerlink&#34; title=&#34;Everyone Has a Life&#34;&gt;&lt;/a&gt;Everyone Has a Life&lt;/h3&gt;&lt;p&gt;I think we forget, while we are at work, that everyone has a life outside of work.  The kids get sick.  Our important relationships are strained or worse.  We were abused as kids and we are trying to deal with the psychological impact that’s had on us AND hold down a job at the same time.  The real sock is that many times the person who we find difficult doesn’t even know they have issues.&lt;/p&gt;
&lt;p&gt;When ever I find someone who is difficult, I always wonder, “What history got them to be like that?” Not that we use our history as an excuse.  But I think that if we knew what was really going on, we’d be a bit more sympathetic.&lt;/p&gt;
&lt;h2 id=&#34;Fail&#34;&gt;&lt;a href=&#34;#Fail&#34; class=&#34;headerlink&#34; title=&#34;Fail&#34;&gt;&lt;/a&gt;Fail&lt;/h2&gt;&lt;p&gt;One of the tenets of Agile is “Fail Fast” and yet the one thing we hate to do as programmers is to fail.&lt;/p&gt;
&lt;p&gt;I used to say, “Programmers are either the most well adjusted or the craziest people in the world.  Think about it!  We spend eight hours a day in front of an inanimate object that mostly tells us that we did something wrong.  We can’t even argue about it.” But really, we tend to do what’s safe.  When is the last time you did something really risky?  As I’ve been pushing TDD on those of you who believe you can’t do TDD where you work, what I’ve really been saying is, “Take a risk, do it anyhow.” Or what about starting a blog, or speaking at a users group meeting?  There are multiple ways you can risk.&lt;/p&gt;
&lt;p&gt;If you aren’t failing, you aren’t learning.&lt;/p&gt;
&lt;h2 id=&#34;Smile&#34;&gt;&lt;a href=&#34;#Smile&#34; class=&#34;headerlink&#34; title=&#34;Smile&#34;&gt;&lt;/a&gt;Smile&lt;/h2&gt;&lt;p&gt;You’ll feel better and people will enjoy being with you more.  Even if you have to fake it, intentionally smile three times a day.&lt;/p&gt;
&lt;h2 id=&#34;Daily-Reminders&#34;&gt;&lt;a href=&#34;#Daily-Reminders&#34; class=&#34;headerlink&#34; title=&#34;Daily Reminders&#34;&gt;&lt;/a&gt;Daily Reminders&lt;/h2&gt;&lt;p&gt;Maybe you’ve heard about daily affirmations.  I’m not a big fan of affirmations.  I’ve tried them, but then my wife pointed out to me, and I’ve had it confirmed by another source, that affirmations essentially make you lie to yourself because you are stating what you want to be true as though they already are true.  This causes tension within you that makes it difficult for this to work.&lt;/p&gt;
&lt;p&gt;In, I believe it was, the 1800’s they did this thing called “Resolutions” which were statement of what you would put your effort into.  This gets a bit more to the point.&lt;/p&gt;
&lt;p&gt;But, I just call them daily reminders.  Things I want to remind myself about.  Much like affirmations and resolutions are designed to do without all of the weight. Here are some of mine so you get an example of what they look like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You feel better when you exercise&lt;/li&gt;
&lt;li&gt;Exercise will make you more confident&lt;/li&gt;
&lt;li&gt;What do you mean? How do you know? What difference does it make? What if you are wrong? What would you accept as evidence?&lt;/li&gt;
&lt;li&gt;What are you thankful for?&lt;/li&gt;
&lt;li&gt;What I think I heard you say is …&lt;/li&gt;
&lt;li&gt;Carbs will eventually give you a headache and will eventually kill you.&lt;/li&gt;
&lt;li&gt;Just because someone says something is true, doesn’t mean that it is.&lt;/li&gt;
&lt;li&gt;How people interpret what you say and do is influenced by their own experience&lt;/li&gt;
&lt;li&gt;Say “thank you” whenever it is even remotely appropriate&lt;/li&gt;
&lt;li&gt;Find out what people want and give it to them (if at all possible)&lt;/li&gt;
&lt;li&gt;Everyone wants to be God, treat them accordingly&lt;/li&gt;
&lt;li&gt;Don’t let the perfect or the ideal be the enemy of getting started or good enough.&lt;/li&gt;
&lt;li&gt;Improve by just 1%&lt;/li&gt;
&lt;li&gt;Who do you want to be?&lt;/li&gt;
&lt;li&gt;What is holding you back?&lt;/li&gt;
&lt;li&gt;Failure is good. It is how we grow.&lt;/li&gt;
&lt;li&gt;If you aren’t failing, you aren’t growing.&lt;/li&gt;
&lt;li&gt;Worry about success&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also have reminders on my computer screen.  Pictures or “motivational posters” that remind me of various things.  For example, I have a screen sized smiley face to remind me to smile.&lt;/p&gt;
&lt;p&gt;So there you go.  This post ended up being a lot longer than I thought it would.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/limiting-beliefs-of-programmers/</guid>
            <title>Limiting Beliefs of Programmers</title>
            <link>http://davembush.github.com/limiting-beliefs-of-programmers/</link>
            <category>tdd</category>
            <category>programming</category>
            <category>agile</category>
            <category>scrum</category>
            <category>limiting beliefs</category>
            <pubDate>Thu, 09 Apr 2015 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/03/ppl-men-026.jpg&#34; alt=&#34;scream&#34; title=&#34;scream&#34;&gt;&lt;/p&gt;
&lt;p&gt;At the risk of making half of my audience think I’ve gone off the deep end, I’m going to address a topic that I’ve only recently REALLY begun to understand, in part thanks to &lt;a href=&#34;/softSkills&#34;&gt;Soft Skills&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I’ve heard the topic of “Limiting Beliefs” come up, it has almost always been in the context of something along the lines of “What the mind can conceive and believe, it can achieve.”  Which is easy to disprove.  At least it is out of context!  I mean really, if I can conceive and believe myself to be a butterfly, it just isn’t going to happen! However, the opposite is pretty easy to both accept and believe.  And that’s what I want to talk about today.  But even then, it probably isn’t what you are expecting.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Typically, when people talk about “Limiting Beliefs”, they are talking about patterns and practices you picked up as a kid that are holding you back now.  And while those may be areas that you need to work on, what I want to talk about today is more micro than that, although they may have roots in our past for various reasons, the Limiting Beliefs I want to talk about today are common across nearly every programmer I talk to.  If you think “Limiting Beliefs” mean something along the lines of, “you are limited because you don’t believe enough,” that is NOT what I have in mind here at all.  In fact, “Limiting Beliefs” are beliefs that we believe TOO strongly and because we hold them too strongly, they limit us.  This is what I mean when I talk about “Limiting Beliefs” even if it is used in another way by someone else.&lt;/p&gt;
&lt;p&gt;Here are some examples specifically related to the craft of programming.&lt;/p&gt;
&lt;h2 id=&#34;You-Can’t-Practice-TDD&#34;&gt;&lt;a href=&#34;#You-Can’t-Practice-TDD&#34; class=&#34;headerlink&#34; title=&#34;You Can’t Practice TDD&#34;&gt;&lt;/a&gt;You Can’t Practice TDD&lt;/h2&gt;&lt;p&gt;As I’ve mentioned in other articles, most programmers I know don’t practice Test Driven Development because they believe they don’t have permission.  And when they ask, they don’t get permission because you’ve transferred the belief that you don’t think it is important.&lt;/p&gt;
&lt;p&gt;If instead, you believed you had permission to do whatever it took to legitimately do your job well, you would learn how to do everything it took to practice TDD well.&lt;/p&gt;
&lt;h2 id=&#34;Can’t-Create-Branches-in-Version-Control&#34;&gt;&lt;a href=&#34;#Can’t-Create-Branches-in-Version-Control&#34; class=&#34;headerlink&#34; title=&#34;Can’t Create Branches in Version Control&#34;&gt;&lt;/a&gt;Can’t Create Branches in Version Control&lt;/h2&gt;&lt;p&gt;I recently ran into a comment on a blog that mention this.  In fact I’ve run into this very issue where I am currently working.  But instead of thinking about what I can’t do, or when I am frustrated by what I can’t do, I first think 1) is this important enough to find a way around? And 2) what CAN I do? In this case, I found it critically important.  My productivity was being hampered because I am adding new features to existing code and, while that code is being tested, I’m converting the code to the last version of the library that we use.  Branching allows me to switch between the two projects easily and it allows me to migrate the current code into the upgrade code so that when the conversion is done, I can merge it down into the main branch and keep going.&lt;/p&gt;
&lt;p&gt;How did I do this?  We use TFS with the old TFVS version control system instead of the Git repository.  But there are at least two projects that exist that allow you to create a bridge between your local code that uses a local GIT repository and the remote TFS repository.  There is at least one project available for subversion that allows you to do the same sort of thing.&lt;/p&gt;
&lt;p&gt;I get my branches and yet I have not caused any disruption to the rest of my team.&lt;/p&gt;
&lt;h2 id=&#34;Can’t-Use-X-Technology&#34;&gt;&lt;a href=&#34;#Can’t-Use-X-Technology&#34; class=&#34;headerlink&#34; title=&#34;Can’t Use X Technology&#34;&gt;&lt;/a&gt;Can’t Use X Technology&lt;/h2&gt;&lt;p&gt;OK.  So, again, ask yourself the same questions.  Is this hampering your productivity?  What CAN you do?&lt;/p&gt;
&lt;h2 id=&#34;You-Have-to-be-Perfect&#34;&gt;&lt;a href=&#34;#You-Have-to-be-Perfect&#34; class=&#34;headerlink&#34; title=&#34;You Have to be Perfect&#34;&gt;&lt;/a&gt;You Have to be Perfect&lt;/h2&gt;&lt;p&gt;I think many of us realize that we can’t be perfect and yet, how do you react when someone finds a bug in your code? I saw a tweet last week that captures the essence of the bug fixing process.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;That can’t happen&lt;/li&gt;
&lt;li&gt;That doesn’t happen on my machine.&lt;/li&gt;
&lt;li&gt;That shouldn’t happen.&lt;/li&gt;
&lt;li&gt;Why does that happen?&lt;/li&gt;
&lt;li&gt;Oh, I see.&lt;/li&gt;
&lt;li&gt;How did that ever work?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The question I need to ask is, why do we start with “That can’t happen” unless we feel that we need to be perfect.&lt;/p&gt;
&lt;p&gt;In the last year, I’ve finally gotten to the point where my first reaction is, “OK, well, put it in the issue tracker.” (Or if you are doing Agile, “put it in the backlog”).&lt;/p&gt;
&lt;h2 id=&#34;Can’t-Practice-Agile-x2F-Scrum&#34;&gt;&lt;a href=&#34;#Can’t-Practice-Agile-x2F-Scrum&#34; class=&#34;headerlink&#34; title=&#34;Can’t Practice Agile&amp;#x2F;Scrum&#34;&gt;&lt;/a&gt;Can’t Practice Agile&amp;#x2F;Scrum&lt;/h2&gt;&lt;p&gt;Speaking of Agile&amp;#x2F;Scrum.  Are you working at a place that doesn’t practice Agile or Scrum, but you think they should?  What parts of Agile&amp;#x2F;Scrum can you implement in the sphere of influence you have?  So, you can’t form a Scrum team.  But, do you personally put people over processes?  Do you put people first at all?  Most of the &lt;a href=&#34;//agilemanifesto.org/&#34;&gt;Agile Manifesto&lt;/a&gt; can be implemented at a personal level once you understand what it is really about.  Don’t expect anyone to adopt agile in your organization if they don’t see it in you first.&lt;/p&gt;
&lt;h2 id=&#34;You-Are-an-Introvert&#34;&gt;&lt;a href=&#34;#You-Are-an-Introvert&#34; class=&#34;headerlink&#34; title=&#34;You Are an Introvert&#34;&gt;&lt;/a&gt;You Are an Introvert&lt;/h2&gt;&lt;p&gt;How many of us hide behind this one?  We don’t want to deal with people.  We really don’t value people over much of anything.  In fact, we think, “programming would be a great job if it weren’t for the clients.”  I’m reading some books that talk about the impact of confusing behavior with who we are.  OK, so sure, your behavior is that you prefer to avoid loud noises.  You’d rather talk to one or two people at a time.  You process stuff in your head instead of with your mouth.  That’s behavior.  To say, “I am an Introvert” can have the effect of saying, “I hate people” and can become a limiting belief because it will isolate you from the very people you should be helping.  Sorry, you can’t get far as a programmer if you avoid the people part of it.&lt;/p&gt;
&lt;h2 id=&#34;Restrictions&#34;&gt;&lt;a href=&#34;#Restrictions&#34; class=&#34;headerlink&#34; title=&#34;Restrictions&#34;&gt;&lt;/a&gt;Restrictions&lt;/h2&gt;&lt;p&gt;And then there is the general set of restrictions that come with being part of any organization.  We have a few where I work that, on the face of it, seem ridiculous.  I HAVE to take a lunch break even though my lunch consist of 5 sausage links that can be consumed in about 5 minutes.  I can’t start before 7am.  I can’t leave until 3:30.&lt;/p&gt;
&lt;p&gt;But what can I do?  Well, no one said WHEN I had to take the lunch break, so I come in and watch a half hour of &lt;a href=&#34;/pluralSight&#34;&gt;PluralSight&lt;/a&gt; courses every morning.&lt;/p&gt;
&lt;p&gt;I can’t start before 7am.  But I CAN enter the office before then.  I prefer to come earlier because the traffic is lighter if I come in at 6:45.  So, I come in and don’t start working until seven.&lt;/p&gt;
&lt;p&gt;To get my eight hours in, I can’t leave until 3:30 anyhow.  So that is not an issue.  And if I need to leave early occasionally, no one said I couldn’t do that.&lt;/p&gt;
&lt;h2 id=&#34;The-Key-To-Eliminating-Limiting-Beliefs&#34;&gt;&lt;a href=&#34;#The-Key-To-Eliminating-Limiting-Beliefs&#34; class=&#34;headerlink&#34; title=&#34;The Key To Eliminating Limiting Beliefs&#34;&gt;&lt;/a&gt;The Key To Eliminating Limiting Beliefs&lt;/h2&gt;&lt;p&gt;Do you see what I’ve done here?  At every point where I’ve been told or believed I could not do something, I’ve change the question from “What can’t I do?” to “What can I do?”  Can’t locks you down.  It locks you out.  Can frees you. So, what limiting beliefs do you have and how can you overcome them?&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/specflow-strategy/</guid>
            <title>SpecFlow Strategy</title>
            <link>http://davembush.github.com/specflow-strategy/</link>
            <category>tdd</category>
            <category>programming</category>
            <category>test driven development</category>
            <category>specflow</category>
            <pubDate>Thu, 01 Jan 2015 07:00:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;A while ago I wrote an article &lt;a href=&#34;/what-is-specflow/&#34;&gt;explaining what SpecFlow is, and why you might want to use it&lt;/a&gt;.  I’ve been using it for several months now and I’ve recognized several patterns that have emerged in my usage that I wish I had known when I started, so I thought I’d share them with you today.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Small-Features&#34;&gt;&lt;a href=&#34;#Small-Features&#34; class=&#34;headerlink&#34; title=&#34;Small Features&#34;&gt;&lt;/a&gt;Small Features&lt;/h2&gt;&lt;p&gt;If you are used to BDD or even unit testing, this will be obvious.  But if you are new to all of this, the temptation is going to be to put all of your test in one feature.  While this works in the strictest sense of the word, and you are at least getting test in place, you will find that finding a specific test later on is going to be rather awkward.&lt;/p&gt;
&lt;p&gt;A feature file should really only have a few scenarios that are testing a particular feature in the system.  This is why, at the top of your feature file, you are stating what exactly the feature is:&lt;/p&gt;
&lt;p&gt;As an administrator&lt;br&gt;I need to be able to delete existing users&lt;br&gt;So they cannot access the system any more&lt;/p&gt;
&lt;p&gt;Which we would probably put in the “DeleteUser.feature” file. Now that we’ve specified the feature, we need one or more scenarios for this. Each scenario is going to test the various ways you might be able to delete a user.  Maybe you can check boxes and delete them all at once or you can click one button per user and delete them one at a time.  Each of those is a scenario.  So your scenarios might look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Scenario: Delete one user at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Given I have 10 users in the system&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I have logged in as an administrator&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I have navigated to the user admin page&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    When I click the first delete user button&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Then I only have 9 users in the system&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I remain on the user admin page&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Scenario: Delete one users at a time with checkbox&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Given I have 10 users in the system&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I have logged in as an administrator&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I have navigated to the user admin page&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    When I check the checkbox of the first user&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I click the delete checked users button&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Then I only have 9 users in the system&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I remain on the user admin page&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Scenario: multiple users at a time using the checkbox&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    etc ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What about sad path test?  You’ll need to determine if those are another feature or if they are somehow part of the feature you are working on.  For this test, I can’t think of a sad path test for deleting users that is generally applicable.  Most of the time, if you have something that should occur as part of deleting a user, you should be doing that as part of the delete process.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-Repeat-Yourself&#34;&gt;&lt;a href=&#34;#Don’t-Repeat-Yourself&#34; class=&#34;headerlink&#34; title=&#34;Don’t Repeat Yourself&#34;&gt;&lt;/a&gt;Don’t Repeat Yourself&lt;/h2&gt;&lt;p&gt;The next place you are likely to make a mistake as you learn how to use SpecFlow is that you’ll start out thinking of the feature file, the steps implementation for the features and any setup or teardown of the scenarios as all one unit.  As a result of this, you’ll tend to implement the steps and the setup and teardown (what SpecFlow implements as Before and After) all in one file.&lt;/p&gt;
&lt;p&gt;The problem with this is that you’ll end up with a lot of duplicate code in your tests.&lt;/p&gt;
&lt;p&gt;Now, let’s say each of your features have similar setup code you need to implement.  In the case of our user administration example that we started out with, you’ll have code you need to implement for adding a user, deleting a user, adding roles to a user, searching for a user, and probably more.&lt;/p&gt;
&lt;p&gt;For each of those, your Before code is all going to look the same.  So, what I would recommend that you do is create a separate file with your Before and After code in it, nothing more.  You will associate this file with your feature files by associating a category with it and using the category in your feature files.  Now for each feature, the same Before and After code will run.&lt;/p&gt;
&lt;p&gt;The other issue you are going to have is that you are going to have a lot of the same steps between the feature files.  However, my experience has been that there will be a lot more common features between the code I write for a particular screen than there will be for the Before and After code I write.  For example, I might right Before code for various roles&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;As a regular user&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;When I visit the user administration screen&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;I should not be able to view any user other than myself.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;That will require different setup code from “As an administrator” but the steps to implement the scenarios will probably be very similar.&lt;/p&gt;
&lt;p&gt;Therefore, you should have a step file that holds all the steps for a screen full of logic in a file separate from your Before and After logic.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/value-type-vs-reference-type/</guid>
            <title>Value Type vs Reference Type</title>
            <link>http://davembush.github.com/value-type-vs-reference-type/</link>
            <category>programming</category>
            <category>c#</category>
            <category>reference types</category>
            <category>value types</category>
            <category>objects</category>
            <pubDate>Thu, 27 Nov 2014 07:00:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;It is amazing to me how few programmers understand the fundamentals of how variables work.  Not just in .NET or C# specifically, but in every language they work in.  It amazes me for two reasons.  First, I don’t think I could program if I didn’t understand what was physically happening as a result of the code I was writing.  Not knowing how the variables relate to the memory that they use would be, to me, a major limitation.  But it also amazes me because I don’t think anyone can program intelligently until they do know what is happening. So, I’ll start from the outside and move in to what’s happening in memory.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-is-A-Value-Type&#34;&gt;&lt;a href=&#34;#What-is-A-Value-Type&#34; class=&#34;headerlink&#34; title=&#34;What is A Value Type&#34;&gt;&lt;/a&gt;What is A Value Type&lt;/h2&gt;&lt;p&gt;The first question we need to qualify is, “What types in .NET are referred to as Value types?  Common value types are int, double, float, decimal, and bool.  What we ypically refer to as “primitives”.  But, there are other types that are also value types.  Enums, structs, and DateTime(because it is a struct) are also value types.&lt;/p&gt;
&lt;h2 id=&#34;What-is-a-Reference-Type&#34;&gt;&lt;a href=&#34;#What-is-a-Reference-Type&#34; class=&#34;headerlink&#34; title=&#34;What is a Reference Type&#34;&gt;&lt;/a&gt;What is a Reference Type&lt;/h2&gt;&lt;p&gt;Reference types are any types in .NET that derive from a Class and require the “new” keyword in order to have an instance of a variable of that type. Why didn’t I just say, “any type that derives from a Class?”  Well, the fact of the matter is that every type in .NET derives from a Class.  The top most class is “Object”.  All of the value types derive from the subclass of Object named, “System.ValueType”.&lt;/p&gt;
&lt;h2 id=&#34;What-Happens-In-Memory&#34;&gt;&lt;a href=&#34;#What-Happens-In-Memory&#34; class=&#34;headerlink&#34; title=&#34;What Happens In Memory&#34;&gt;&lt;/a&gt;What Happens In Memory&lt;/h2&gt;&lt;p&gt;But it is what happens in memory when we use these variable types that is of interest to us. When you declare a variable that is a Value type and then assign a value to it, the memory that variable occupies holds the value you assigned to it.  The variable is just a representation of the actual value. Contrast this to a reference type.  When you new up (instantiate) a variable that is a reference type, the first thing that is happening is that memory is being allocated to hold the variables in the class and then memory is being set aside to hold a pointer to the memory we just allocated. So, with a reference type, we are only pointing to the memory we are actually using.  With a value type the variable IS the value we are using. This has implications to how the memory is used when we do assignments.&lt;/p&gt;
&lt;h2 id=&#34;Value-Example&#34;&gt;&lt;a href=&#34;#Value-Example&#34; class=&#34;headerlink&#34; title=&#34;Value Example&#34;&gt;&lt;/a&gt;Value Example&lt;/h2&gt;&lt;p&gt;For example, look at the code below.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; b = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = b;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;When we assign b to a, we are copying the value occupied by b into the memory location occupied by a.&lt;/p&gt;
&lt;h2 id=&#34;Reference-Example&#34;&gt;&lt;a href=&#34;#Reference-Example&#34; class=&#34;headerlink&#34; title=&#34;Reference Example&#34;&gt;&lt;/a&gt;Reference Example&lt;/h2&gt;&lt;p&gt;But what happens when we do the same thing with a reference type?&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; Name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; joe = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;joe.Name = &lt;span class=&#34;string&#34;&gt;&amp;quot;Joe&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;joe.age = &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; alice = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alice.Name = &lt;span class=&#34;string&#34;&gt;&amp;quot;alice&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alice.age = &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;joe = alice;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;joe.age = &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What will be the value of alice.age? You should say 50 because once we assigned alice to joe, alice and joe point to the same Person object and the Person object that alice pointed to is no longer available.&lt;/p&gt;
&lt;h2 id=&#34;How-About-Structs&#34;&gt;&lt;a href=&#34;#How-About-Structs&#34; class=&#34;headerlink&#34; title=&#34;How About Structs?&#34;&gt;&lt;/a&gt;How About Structs?&lt;/h2&gt;&lt;p&gt;But what happens if we make the Person class a struct instead?&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; Person&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; Name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Person joe;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;joe.Name = &lt;span class=&#34;string&#34;&gt;&amp;quot;Joe&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;joe.age = &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Person alice;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alice.Name = &lt;span class=&#34;string&#34;&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alice.age = &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;joe = alice;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;joe.age = &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, what is the value of alice.age? In this case, you should say that alice is still 33 because when we assigned alice to joe, joe got a copy of everything that alice had. So, joe’s name is “alice” and before we asign 50 to joe.age, joe.age holds the value of 33.  But the assignment has no impact on the value of alice.age.&lt;/p&gt;
&lt;h2 id=&#34;Stacks-And-Heaps&#34;&gt;&lt;a href=&#34;#Stacks-And-Heaps&#34; class=&#34;headerlink&#34; title=&#34;Stacks And Heaps&#34;&gt;&lt;/a&gt;Stacks And Heaps&lt;/h2&gt;&lt;p&gt;Now, no description of value types and reference types would be complete without some discussion of stacks and heaps. The stack is the location in memory that holds value types and reference pointers (remember I said the variable points to the memory being occupied by the value?) in your method. So when you declare a variable inside of a method that memory gets “Pushed” onto the stack. When you pass a variable to another method, that variable gets copied into a temporary variable and placed on the stack. So, doing something like&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Foo&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Foo2(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Foo2&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; f&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;// do something with f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;will copy 23 so that the variable f in Foo2 will not be the variable i in Foo. So if we change the value of f in Foo2 to 32, what will be the value of i when Foo2 returns? Because it is a copy, it will still be 23. The heap, on the other hand, is a location in memory that is outside of the scope of the methods we create.  So the only thing being passed around in our functions that use reference variables is pointers.  But, because they are pointers, any thing we do do a reference object inside of a method will be reflected in the variable located inside of the method that called it.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Foo&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; p = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    p.age = &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Foo2(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Foo2&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Person person&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    person.age = &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;So when Foo2 returns, p.age will be 44. However, if we change what person is pointing to…&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Foo2&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Person person&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    person = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    person.age = &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;p would remain unchanged and p.age would still be 24.&lt;/p&gt;
&lt;h2 id=&#34;Values-Inside-of-a-Class&#34;&gt;&lt;a href=&#34;#Values-Inside-of-a-Class&#34; class=&#34;headerlink&#34; title=&#34;Values Inside of a Class&#34;&gt;&lt;/a&gt;Values Inside of a Class&lt;/h2&gt;&lt;p&gt;The final question that you should be asking at this point is when I declare a value type as a member variable of my class, as I’ve done with the age variable in Person above, where is the age variable located, on the stack or on the heap? The answer to that would be it is located in the heap because it is a member of a class that is located in the heap.  And if we created another person object inside of person, the pointer would also be located in the heap and it would point to another location of the heap.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/raking-leaves-and-writing-code/</guid>
            <title>Raking Leaves and Writing Code</title>
            <link>http://davembush.github.com/raking-leaves-and-writing-code/</link>
            <category>programming</category>
            <category>best practices</category>
            <category>code quality</category>
            <pubDate>Thu, 20 Nov 2014 07:00:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;So, today I had the task of removing the leaves from my yard, which gave me a lot of time to think because it is a pretty solitary job, even if you have people helping you, because much of the time I was using a leaf blower.  It is pretty hard to hold any kind of conversation when you are using a leaf blower.&lt;/p&gt;
&lt;p&gt;And  as I was running the leaf blower, I was thinking about what I was going to talk about today.  And then it struck me, why not just talk about cleaning up the leaves?  I mean if John Sonmez and Scott Hanselman can talk about stuff that isn’t necessarily programming related, why can’t I?&lt;/p&gt;
&lt;p&gt;But then I realized, I could talk about cleaning up the leaves in my yard AND talk about programming at the same time.&lt;/p&gt;
&lt;p&gt;Think about it.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Why-Rake-Leaves&#34;&gt;&lt;a href=&#34;#Why-Rake-Leaves&#34; class=&#34;headerlink&#34; title=&#34;Why Rake Leaves?&#34;&gt;&lt;/a&gt;Why Rake Leaves?&lt;/h2&gt;&lt;p&gt;Why did I clean up the leaves in my yard?  It wasn’t to make my yard look better.  No one can see my yard from the road.  No one would care but my family, and they do care.  But even if they didn’t, we ultimately clean the leaves off our yards because doing that means our grass will grow better next summer by allowing it to see the sun now.  We do it because nasty critters live in leaves.  We remove the leaves from our drive ways and sidewalks so that snow removal will be easier in the winter.  In short, as hard as the work is to take care of our leaves in the fall, the work is worth it because it makes the rest of the fall and winter easier for us  in the long run.&lt;/p&gt;
&lt;p&gt;What’s interesting about the first reason, allowing the grass to get more sun during the fall months, would mean that it would actually be better to clean up the leaves frequently during the fall rather than waiting for them to all fall and then rake them.  By the time I get to them, it is probably too late to do any real good because I wait for them to all fall before I remove them.  By that time, the sun shines less during the day and the frost has already kicked in.&lt;/p&gt;
&lt;h2 id=&#34;How-Is-This-Related-to-Code&#34;&gt;&lt;a href=&#34;#How-Is-This-Related-to-Code&#34; class=&#34;headerlink&#34; title=&#34;How Is This Related to Code?&#34;&gt;&lt;/a&gt;How Is This Related to Code?&lt;/h2&gt;&lt;p&gt;And that brings me to our code.  We all have code that needs “raking”.  You know you have code that is duplicated all over the place, but have you taken any time to collect all of that code into one place as a function?&lt;/p&gt;
&lt;p&gt;How many code smells do you have.  Are your functions long?  Do you have conditional blocks nested more than one deep?  Do you have classes that do more than one thing?  Have you written code that isn’t being used because “we might need it some day”?&lt;/p&gt;
&lt;p&gt;As I work with inexperienced programmers, the one thing I notice is that looking for places to simplify code is a skill that needs to be practiced.  It doesn’t come naturally.  Very few programmers assume that as long as the code does what it should, they are done.&lt;/p&gt;
&lt;p&gt;And yet, leaving these code smells in place means that the next time you go in to work on the system, you will not be able to understand the code as well as you should.  Because you haven’t let the sun shine on your code, when you get to it to maintain it, you’ll be working in mud instead of nice green grass.&lt;/p&gt;
&lt;h2 id=&#34;The-Challenge&#34;&gt;&lt;a href=&#34;#The-Challenge&#34; class=&#34;headerlink&#34; title=&#34;The Challenge&#34;&gt;&lt;/a&gt;The Challenge&lt;/h2&gt;&lt;p&gt;So today, your job is to find one place in your code that could be made better.  Make it less complicated.  Make it fewer lines of code (without making it hard to read).  Find two places that are doing essentially the same thing and turn that code into a function.  Find two classes that are tightly coupled (highly dependent on each other) and remove the dependencies.  Do this once a day for the next thirty days and see if you don’t find your code easier to work with than it  is today.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/defining-%E2%80%9Cdone%E2%80%9D/</guid>
            <title>Defining “Done”</title>
            <link>http://davembush.github.com/defining-%E2%80%9Cdone%E2%80%9D/</link>
            <category>programming</category>
            <category>definition of done</category>
            <category>DoD</category>
            <pubDate>Thu, 10 Jul 2014 13:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;A couple of weeks ago, I mention &lt;a href=&#34;/are-we-there-yet/&#34;&gt;“definition of done”&lt;/a&gt; which many of my readers may have never heard of before. The phrase, “definition of done” comes out of the agile movement.  But there is no reason why it needs to stay there.  In fact, I would argue that many of the problems we have in the software industry are because most organizations only have one definition of done, “If we ship this today, can we make money?” When the Agile people talk about “definition of done” what they ultimately mean is, “if we were to ship this product today,and someone were to inspect what we’ve done, would we be embarrassed?” Definition of done, is about the quality of the code. When thinking about the definition of done, here are some items you might consider.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h4 id=&#34;Does-the-code-meet-the-requirements-of-the-user-story&#34;&gt;&lt;a href=&#34;#Does-the-code-meet-the-requirements-of-the-user-story&#34; class=&#34;headerlink&#34; title=&#34;Does the code meet the requirements of the user story?&#34;&gt;&lt;/a&gt;Does the code meet the requirements of the user story?&lt;/h4&gt;&lt;p&gt;This is the most obvious.  Of course for this to work, you have to have a user story that is specific enough for you to answer this question.&lt;/p&gt;
&lt;h4 id=&#34;Has-all-the-documentation-that-the-organization-requires-been-updated&#34;&gt;&lt;a href=&#34;#Has-all-the-documentation-that-the-organization-requires-been-updated&#34; class=&#34;headerlink&#34; title=&#34;Has all the documentation that the organization requires been updated?&#34;&gt;&lt;/a&gt;Has all the documentation that the organization requires been updated?&lt;/h4&gt;&lt;p&gt;This one can fall through the cracks easily because documentation is the least favorite activity of a programmer.  But, it isn’t necessarily a programmer activity.  Remember, an ideal team has all the skills it needs.  So, if you have a documentation requirement, be it an ISO requirement or simple end user documentation telling them how to use the software, your team should have someone on it that can produce this documentation.&lt;/p&gt;
&lt;h4 id=&#34;Does-the-code-have-a-reasonable-level-of-unit-tests&#34;&gt;&lt;a href=&#34;#Does-the-code-have-a-reasonable-level-of-unit-tests&#34; class=&#34;headerlink&#34; title=&#34;Does the code have a reasonable level of unit tests?&#34;&gt;&lt;/a&gt;Does the code have a reasonable level of unit tests?&lt;/h4&gt;&lt;p&gt;I say “reasonable” here because the principle is high code coverage where we need it.  To try to aim for some metric will cause us to write tests where we don’t need them.  By combining a “reasonableness” level with code reviews, I think we can hit this target without setting an unrealistic arbitrary limit.&lt;/p&gt;
&lt;h4 id=&#34;Do-all-of-the-unit-tests-succeed&#34;&gt;&lt;a href=&#34;#Do-all-of-the-unit-tests-succeed&#34; class=&#34;headerlink&#34; title=&#34;Do all of the unit tests succeed?&#34;&gt;&lt;/a&gt;Do all of the unit tests succeed?&lt;/h4&gt;&lt;p&gt;You’d think this one would be obvious.  You have tests, you should be running them every time the code changes.  But, I’ve seen situations where tests sit in version control and never get run. Run your tests!&lt;/p&gt;
&lt;h4 id=&#34;Is-the-code-covered-by-system-level-tests&#34;&gt;&lt;a href=&#34;#Is-the-code-covered-by-system-level-tests&#34; class=&#34;headerlink&#34; title=&#34;Is the code covered by system level tests?&#34;&gt;&lt;/a&gt;Is the code covered by system level tests?&lt;/h4&gt;&lt;p&gt;Once again, this one should be obvious.  Just because you have unit tests, doesn’t mean the system works.  The main problem with the Federal Health Care web site that went live in the United States recently is because no one made sure all the parts worked together. And don’t leave this to manual testing.  There are many ways of testing at this level that you can automate.&lt;/p&gt;
&lt;h4 id=&#34;Do-all-the-system-tests-succeed&#34;&gt;&lt;a href=&#34;#Do-all-the-system-tests-succeed&#34; class=&#34;headerlink&#34; title=&#34;Do all the system tests succeed?&#34;&gt;&lt;/a&gt;Do all the system tests succeed?&lt;/h4&gt;&lt;p&gt;Once again, run your tests.&lt;/p&gt;
&lt;h4 id=&#34;Has-the-code-been-reviewed-by-one-other-programmer&#34;&gt;&lt;a href=&#34;#Has-the-code-been-reviewed-by-one-other-programmer&#34; class=&#34;headerlink&#34; title=&#34;Has the code been reviewed by one other programmer?&#34;&gt;&lt;/a&gt;Has the code been reviewed by one other programmer?&lt;/h4&gt;&lt;p&gt;If there isn’t at least one other programmer on your team that understands what you’ve done, you aren’t done.  I could, and probably will, write a whole post about this sometime.&lt;/p&gt;
&lt;h4 id=&#34;Have-coding-conventions-been-observed-throughout-the-code&#34;&gt;&lt;a href=&#34;#Have-coding-conventions-been-observed-throughout-the-code&#34; class=&#34;headerlink&#34; title=&#34;Have coding conventions been observed throughout the code?&#34;&gt;&lt;/a&gt;Have coding conventions been observed throughout the code?&lt;/h4&gt;&lt;p&gt;There are a number of tools out there  that check for coding conventions.  For CSharp, I like ReSharper.  JsHint is what I prefer for JavaScript.  There is  FxCop built into Visual Studio. Pick a standard, find a way to automatically verify the code meets the standard, and make sure nothing gets put into version control that doesn’t meet the standard!&lt;/p&gt;
&lt;h4 id=&#34;Has-the-code-passed-some-level-of-complexity-threshold&#34;&gt;&lt;a href=&#34;#Has-the-code-passed-some-level-of-complexity-threshold&#34; class=&#34;headerlink&#34; title=&#34;Has the code passed some level of complexity threshold?&#34;&gt;&lt;/a&gt;Has the code passed some level of complexity threshold?&lt;/h4&gt;&lt;p&gt;I’ve talked about &lt;a href=&#34;/avoiding-code-complexity/&#34;&gt;code complexity&lt;/a&gt; before.  Just go read that post.&lt;/p&gt;
&lt;h4 id=&#34;Is-there-any-known-code-duplication&#34;&gt;&lt;a href=&#34;#Is-there-any-known-code-duplication&#34; class=&#34;headerlink&#34; title=&#34;Is there any known code duplication?&#34;&gt;&lt;/a&gt;Is there any known code duplication?&lt;/h4&gt;&lt;p&gt;Again, there are tools for this.  Find one and use it.&lt;/p&gt;
&lt;h4 id=&#34;When-you-compile-are-there-warnings&#34;&gt;&lt;a href=&#34;#When-you-compile-are-there-warnings&#34; class=&#34;headerlink&#34; title=&#34;When you compile, are there warnings?&#34;&gt;&lt;/a&gt;When you compile, are there warnings?&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;/treat-warnings-as-errors/&#34;&gt;Compiling without warnings&lt;/a&gt; is something else I’ve already talked about.  &lt;/p&gt;
&lt;h2 id=&#34;Other-Places-Talking-About-“Definition-of-Done”&#34;&gt;&lt;a href=&#34;#Other-Places-Talking-About-“Definition-of-Done”&#34; class=&#34;headerlink&#34; title=&#34;Other Places Talking About “Definition of Done”&#34;&gt;&lt;/a&gt;Other Places Talking About “Definition of Done”&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//www.scrumalliance.org/community/articles/2008/september/what-is-definition-of-done-(dod)&#34;&gt;What Is Definition of Done (Scrum Alliance)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//www.mountaingoatsoftware.com/blog/clarifying-the-relationship-between-definition-of-done-and-conditions-of-sa&#34;&gt;Clarifying Definition of Done (Mountain Goat Software)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//blogs.atlassian.com/2013/10/8-steps-to-a-definition-of-done-in-jira/&#34;&gt;8 Steps To Definition of Done in JIRA (Atlassian Blog)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//www.mitchlacey.com/intro-to-agile/scrum/definition-of-done&#34;&gt;Definition of Done Creation (Mitch Lacey &amp;amp; Associates)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/avoiding-code-complexity/</guid>
            <title>Avoiding Code Complexity</title>
            <link>http://davembush.github.com/avoiding-code-complexity/</link>
            <category>programming</category>
            <category>best practices</category>
            <category>code quality</category>
            <category>cyclomatic</category>
            <category>halstead</category>
            <pubDate>Thu, 19 Jun 2014 13:27:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/06/clip_image001.png&#34; alt=&#34;clip_image001&#34; title=&#34;clip_image001&#34;&gt;A couple of weeks ago, I talked a bit about how we name things.  Specifically, I talked about the &lt;a href=&#34;/i-j-and-k-should-die/&#34;&gt;very bad habit of using the variables i, j, and k as variables in our for&amp;#x2F;next loops&lt;/a&gt;. A few weeks before that, I talked about &lt;a href=&#34;/dry-programming/&#34;&gt;DRY Programming&lt;/a&gt; and the fact that not repeating ourselves extends much farther than most of us normally think when we are thinking about our code. Today I want to continue on the general theme of code quality by discussing code complexity.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-is-it&#34;&gt;&lt;a href=&#34;#What-is-it&#34; class=&#34;headerlink&#34; title=&#34;What is it?&#34;&gt;&lt;/a&gt;What is it?&lt;/h2&gt;&lt;p&gt;Generally, code complexity is anything you introduce into your code that makes it hard to follow.  But here are a few areas you might look for code complexity.&lt;/p&gt;
&lt;h2 id=&#34;Do-you-have-REALLY-long-methods&#34;&gt;&lt;a href=&#34;#Do-you-have-REALLY-long-methods&#34; class=&#34;headerlink&#34; title=&#34;Do you have REALLY long methods?&#34;&gt;&lt;/a&gt;Do you have REALLY long methods?&lt;/h2&gt;&lt;p&gt;Here’s the deal.  The longer your method is, the more work it will be to keep track of the overall point of the method.  So, you want to keep the number of lines in your method low.  If you are doing too much, when you come back to your code, even you will be confused. I remember when I first started programming.  We only had 25 lines for a full screen, and the rule was, you should be able to see the full function or method on one screen full of code in your editor.  The problem with that metric now is that our screens have gotten capable of showing a lot more code.  It’s a lot like telling a new driver, he should be able to still see the license plates of the car in front of him when he stops behind a car.  Some cars exist where my tiny little Civic would be IN the other car and I’d still be able to see the plates. A better metric would be to use the 7 +&amp;#x2F;- 2 rule.  Ideally no more than 7 lines of functional code per method.  If you have to, you can fudge it to up to 9, but no more.  This is because the human brain can only deal with about 7 items at a time. I can think of a few times when you might want to break this rule, like when you have a set of conditions that really need to all be in the same place for them to make sense, but it wouldn’t hurt to try to keep to the rule as often as possible.&lt;/p&gt;
&lt;h2 id=&#34;Do-you-have-a-lot-of-conditions-within-one-method&#34;&gt;&lt;a href=&#34;#Do-you-have-a-lot-of-conditions-within-one-method&#34; class=&#34;headerlink&#34; title=&#34;Do you have a lot of conditions within one method?&#34;&gt;&lt;/a&gt;&lt;strong&gt;Do you have a lot of conditions within one method?&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;When I was discussing the problem with using i, j, and k as variables, I kind of mentioned this, but I didn’t dwell on the subject a lot. You see, the story I told when I was telling you all about the i, j, and k problem violated all of the readability rules.  First, it was using the wrong variable names.  Second, the method was MUCH too long.  And third it had too many conditions. You might think that only if&amp;#x2F;else statements are conditions.  But so are for&amp;#x2F;next, while, do&amp;#x2F;while, and switch statements.  As much as you can, your code should be setup so that you only have one condition per method.  Three at the most.  Again, switch statements might loose their context, but here, I would have one method that handles the switch statement and only one line per case statement.  Each case statement should call a function that does the real work. There is a tool in Visual Studio 2013 that will help you determine how bad your methods are.  You can calculate metrics for a project or the entire solution and it will generate a table of the Cyclomatic complexity of your code.  Look for methods that have a Cyclomatic complexity of over 10 and try to bring them down.  The closer to  zero you get, the better.  Many people suggest that we keep this number below 10 or 11, but this is just an opinion.  I would rather just say look at what you’ve currently got and strive for better. If you have Visual Studio, this option is under the Analyze menu option.&lt;/p&gt;
&lt;h2 id=&#34;Do-you-have-a-lot-of-operations-function-calls-parameters-to-those-calls&#34;&gt;&lt;a href=&#34;#Do-you-have-a-lot-of-operations-function-calls-parameters-to-those-calls&#34; class=&#34;headerlink&#34; title=&#34;Do you have a lot of operations, function calls, parameters to those calls?&#34;&gt;&lt;/a&gt;Do you have a lot of operations, function calls, parameters to those calls?&lt;/h2&gt;&lt;p&gt;What I’m basically talking about here is what’s called Halstead Volume or Halstead Metrics.  What this computes is how complex the code is. For example, if you have five lines of code and a Cyclomatic complexity of ten as everyone suggest, your code may still be in trouble because each line of code is so complex that no one on earth could possibly understand it. We call this self obfuscating code. You probably have some superstar on your team that thinks he’s so hot that he codes an entire function on one line.  The problem with this is that six months from now, neither he nor you will be able to figure out what the code does.  Any fix that will be needed will require an entire rewrite of the code.  That’s exactly what we are trying to prevent. If you are using Visual Studio 2013 Ultimate, you can get the &lt;a href=&#34;//visualstudiogallery.msdn.microsoft.com/f85a7ab9-b4c2-436c-a6e5-0f06e0bac16d&#34;&gt;Microsoft Codelens Code Health Indicator&lt;/a&gt; which adds the ability to check for all three of the above problems for each of your methods.  If you pay attention to it, it will help you make code that is easier to understand.&lt;/p&gt;
&lt;h2 id=&#34;Can-You-Easily-Find-Code-You-Need-To-Maintain&#34;&gt;&lt;a href=&#34;#Can-You-Easily-Find-Code-You-Need-To-Maintain&#34; class=&#34;headerlink&#34; title=&#34;Can You Easily Find Code You Need To Maintain?&#34;&gt;&lt;/a&gt;Can You Easily Find Code You Need To Maintain?&lt;/h2&gt;&lt;p&gt;This is one that is harder to detect, but I thought I’d mention it here because it is a real issue. In an ideal world, we shouldn’t need to use a debugger to track down where the code is that we need to modify.  There are cases where this may be the only solution.  But you should know, for example, that all of your validation code is in this one location.  If you have validation code in multiple locations, you are probably thinking about your code incorrectly. But also cut yourself some slack because this kind of code complexity is not something you are going to notice until late in your project.  You may never see it, but you will certainly recognize it when you run into it in someone else’s code.&lt;/p&gt;
&lt;h2 id=&#34;Which-reminds-me-of-a-story&#34;&gt;&lt;a href=&#34;#Which-reminds-me-of-a-story&#34; class=&#34;headerlink&#34; title=&#34;Which reminds me of a story.&#34;&gt;&lt;/a&gt;Which reminds me of a story.&lt;/h2&gt;&lt;p&gt;There was this guy that was working in a cube and he suddenly starts ranting.  “Who wrote this code?!  This is the dumbest code I’ve ever seen.  etc…”  Suddenly he got real quiet and the guy in the next cube asked him, “hey, Joe, what’s wrong?”  Joe replies, “It’s my code.” So even if you don’t pay attention to these issues for your coworker’s sake.  Do it for yourself.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/i-j-and-k-should-die/</guid>
            <title>I, J, and K Should Die</title>
            <link>http://davembush.github.com/i-j-and-k-should-die/</link>
            <category>programming</category>
            <category>naming conventions</category>
            <category>variables</category>
            <pubDate>Thu, 05 Jun 2014 13:01:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/05/ijk.png&#34; alt=&#34;ijk&#34; title=&#34;ijk&#34;&gt;One of the hardest things we do as programmers is naming things.  But the easiest thing to name is counter variables and most of us do it wrong several times a day. Of course, I’m talking about the notorious habit of naming our counter variables I, J, or K depending on how far down we’ve nested our looping.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;History&#34;&gt;&lt;a href=&#34;#History&#34; class=&#34;headerlink&#34; title=&#34;History&#34;&gt;&lt;/a&gt;History&lt;/h2&gt;&lt;p&gt;Now, my understanding of the history of I, J, and K as common variables that we use in programming is that the practice started in FORTRAN.  There are two reasons why FORTRAN programmers did this.  FORTRAN is primarily a math language.  I, J, and K were used in math and so the practice was carried over into FORTRAN and from there to other languages. FORTRAN encouraged this by also automatically declaring I, J and K as integers.  So using I, J and K made the code slightly easier to write and seemed to be considered a best practice at the time. The other reason I, J, and K have prevailed as indexing variables is because in the early days, our variable name length was limited and in some languages, the variable names were stored in our code and consumed memory, which was a precious resource we didn’t want to waste on long variable names. And so the practice continues to this day, largely because, “We’ve always done it that way.”&lt;/p&gt;
&lt;h2 id=&#34;Story&#34;&gt;&lt;a href=&#34;#Story&#34; class=&#34;headerlink&#34; title=&#34;Story&#34;&gt;&lt;/a&gt;Story&lt;/h2&gt;&lt;p&gt;But let me tell you a story that illustrates why this is a bad idea. Admittedly, this story is pretty old, but only because in my 28 years of programming, this is still the best story I have to illustrate this issue. You see, one day, back when I was still regularly programming in C++ (for you kids out there, C++ is what Java and CSharp get most of their syntax) my manager came to me with a bug. Now the interesting thing about this bug is that it only occurred with one particular data set.  Most of the time it worked. So, I put on my detective’s hat and went to work.  Now, I try to go for the quick kill first.  So, I set break points at various locations and checked variables and found out …  nothing. That’s right, nothing. After about four hours of trying various methods of the above and trying to step through the code only to find the looping that was taking place was going to cause that to take several weeks, I finally stumbled on to the problem. And I do mean I stumbled, there’s no way I was going to find this problem using any of my standard debugging techniques. Here is what the code looked like:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; someValue;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// lots of code here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(j = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;j &amp;lt; someOtherValue;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// still more code here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(k = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;k &amp;lt; yetAnotherValue;k++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// and again, more code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(someConditionThatBarelyEverHappens)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;// some correcting code here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// more code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// more code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Do-you-see-what-I-see&#34;&gt;&lt;a href=&#34;#Do-you-see-what-I-see&#34; class=&#34;headerlink&#34; title=&#34;Do you see what I see?&#34;&gt;&lt;/a&gt;Do you see what I see?&lt;/h2&gt;&lt;p&gt;Do you see it? What was happening is that the inner “for(i…)” loop was resetting the outer I so that the whole loop essentially turned into an infinite loop for this data set. Now, this code was wrong on so many levels.  But the chief problem with the code is that by the time the original programmer for this routine got to the inner “for(i…)” loop they had forgotten that they’d already used “I” as a variable. For all I know, the guy who put the inner “for(i…)” loop in wasn’t even the same guy as the one who created the outer variable. So, how do we fix this code? Well that’s easy.  In fact, creating variable names that mean something in place of I, J, and K is one of the easiest code fixes we can implement. What is I and index of.  If you are looping through an index of bananas, call it “bananaIndex”  It isn’t rocket science.&lt;/p&gt;
&lt;h2 id=&#34;Challenge&#34;&gt;&lt;a href=&#34;#Challenge&#34; class=&#34;headerlink&#34; title=&#34;Challenge&#34;&gt;&lt;/a&gt;Challenge&lt;/h2&gt;&lt;p&gt;And so, my code challenge to you is this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Never, ever, use I, J or K (or any other single letter) as a variable name in your code.  There should be a rule in your code quality checking that just prevents this.  Even in JavaScript code.  With tools like closure compilers, there is no valid reason to use short variable names even in JavaScript.&lt;/li&gt;
&lt;li&gt;When you find an existing single letter variable name, change it to something meaningful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;References&#34;&gt;&lt;a href=&#34;#References&#34; class=&#34;headerlink&#34; title=&#34;References&#34;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//en.wikipedia.org/wiki/Loop_counter&#34;&gt;Wikipedia “Loop Counter” article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//www.amazon.com/gp/product/0735619670/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735619670&amp;linkCode=as2&amp;tag=davmbusnetapp-20&amp;linkId=BWBBIYB3LPS5JDEN&#34;&gt;Code Complete&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=davmbusnetapp-20&amp;l=as2&amp;o=1&amp;a=0735619670&#34;&gt; – The book that first revealed this issue to me.&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/dry-programming/</guid>
            <title>DRY Programming</title>
            <link>http://davembush.github.com/dry-programming/</link>
            <category>programming</category>
            <category>DRY</category>
            <category>best practices</category>
            <pubDate>Thu, 29 May 2014 12:34:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/05/DRY.png&#34; alt=&#34;DRY&#34; title=&#34;DRY&#34;&gt;Today I thought I’d talk to you about the programming principle known as DRY.  As you may know, DRY stands for “Don’t Repeat Yourself” and it shows up in a lot more places than you might expect.  Even when you try really, really hard to not repeat yourself, you end up repeating yourself.  You repeat yourself even when you think you aren’t.  Lots of people repeat themselves.  Do you know of any? Ok.  I think you get the point.  Just like it is silly for me to repeat myself over and over again, it is silly for you to write the same code, or perform the same steps, over and over again.&lt;/p&gt;
&lt;p&gt;To drive the point home just a little bit more.  Do you know what the acronym WET stands for?  We Enjoy Typing.  While it doesn’t capture all of what DRY is trying to combat, I think it hits about 80% of the issue.  Have you typed something that is really similar to something you already typed?&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Copy-and-Paste&#34;&gt;&lt;a href=&#34;#Copy-and-Paste&#34; class=&#34;headerlink&#34; title=&#34;Copy and Paste&#34;&gt;&lt;/a&gt;Copy and Paste&lt;/h2&gt;&lt;p&gt;The most obvious form of something that is WET is code that is an exact duplicate of something you already wrote some place else.  This can be something as mundane as code that is in the same class, to code that exist in multiple classes. In fact, I just ran into this today with some code I was working on.  The person who had written the code had created a local variable to hold a string that he was then passing into multiple methods.  That was good.  This allows us to change the string once instead of changing it in multiple places.&lt;/p&gt;
&lt;p&gt;However, he was doing the same thing in three different methods of the same class.  And in two other places he was using that same string as a string instead of using a variable.&lt;/p&gt;
&lt;p&gt;Since the string was a reference to a field name, it seemed to me to make more sense to create the variable as a constant member variable in the class and use it in all of the locations.&lt;/p&gt;
&lt;p&gt;Copy and paste issue solved.&lt;/p&gt;
&lt;p&gt;But what about the case where you need to do something similar but the code is in multiple classes?  In this case, what you’d probably want to do is to create a static class that will have a static property that will return the string.  Better yet, you could put the string in a resource file that you can reference from the static class.&lt;/p&gt;
&lt;h2 id=&#34;Copy-Paste-and-Modify&#34;&gt;&lt;a href=&#34;#Copy-Paste-and-Modify&#34; class=&#34;headerlink&#34; title=&#34;Copy, Paste and Modify&#34;&gt;&lt;/a&gt;Copy, Paste and Modify&lt;/h2&gt;&lt;p&gt;The most difficult area in our code to detect that our code is WETter than it should be is when we create code that we’ve done the Copy, Paste, and Modify routine to.  This is because it is similar but not exactly similar.  This is where a huge chunk of our WET code resides.&lt;/p&gt;
&lt;p&gt;So as you navigate through your code, you should be looking for code that is similar but not exactly the same and you should be asking yourself this question, “Is there any way I can merge this code so that it only appears once?” One way you might  make this kind of code DRY is by creating a method that takes parameters.  The parameters will let you pass in the stuff that is different while allowing the bulk of the code that is similar to be in one location.&lt;/p&gt;
&lt;p&gt;Another way you might deal with this problem is by creating a class with virtual functions that get called by a main method.  Then you can create child classes that have overridden methods that handle the differences in functionality.&lt;/p&gt;
&lt;h2 id=&#34;Similar-Steps&#34;&gt;&lt;a href=&#34;#Similar-Steps&#34; class=&#34;headerlink&#34; title=&#34;Similar Steps&#34;&gt;&lt;/a&gt;Similar Steps&lt;/h2&gt;&lt;p&gt;The hardest type of duplicate code to detect is code that has similar steps.  If you find yourself doing the same thing over and over again, you probably have an area the you either need to deal with, like we dealt with Copy, Paste, and Modify, or you may need to think about creating code that writes your code for you.&lt;/p&gt;
&lt;p&gt;This is what techniques like T4 templates were created for.&lt;/p&gt;
&lt;h2 id=&#34;Similar-Code-in-Different-Environments&#34;&gt;&lt;a href=&#34;#Similar-Code-in-Different-Environments&#34; class=&#34;headerlink&#34; title=&#34;Similar Code in Different Environments&#34;&gt;&lt;/a&gt;Similar Code in Different Environments&lt;/h2&gt;&lt;p&gt;One of the most natural places to deal with duplicate code is in the area of database access.  Typically we have to create tables or stored procedures in SQL, and then to access that code we need to write code in our main development language that mirrors the SQL code.  In CSharp, we create POCOs and CRUD routines.  And then if we are working on a web site, we need to mirror that code once again in JavaScript.&lt;/p&gt;
&lt;p&gt;This is a prime candidate for code that writes code.  If you don’t already have something that will do it for you, write some code that will look at your SQL and generate the code you need from that.  DRY says there should be one place that gets modified when a change to the database occurs.  That would be the database.&lt;/p&gt;
&lt;h2 id=&#34;Not-Just-About-Code&#34;&gt;&lt;a href=&#34;#Not-Just-About-Code&#34; class=&#34;headerlink&#34; title=&#34;Not Just About Code&#34;&gt;&lt;/a&gt;Not Just About Code&lt;/h2&gt;&lt;p&gt;But DRY isn’t just about code.&lt;/p&gt;
&lt;p&gt;There are things we do every day that have nothing to do with code that are costing us time and money.  In fact, they probably cost more time and money than your WET code because they take longer to perform.&lt;/p&gt;
&lt;p&gt;One place this occurs all of the time is in making sure that your code builds.  If you are still doing this manually, you are wasting your time.  If you aren’t doing it at all, that’s even worse.  You may not know for months that your code isn’t building and you will find out at the worst possible time.  And assuming that you have been practicing Test Driven Development, how are you making sure that those tests still work every time you make a change to your code? The obvious solution is a Continuous Integration server that reports back to you that there was a problem.&lt;/p&gt;
&lt;p&gt;What about error logs?  You are logging the errors that your system generates, right?  Are you checking the error log?  Manually?  Did you know you could setup a job to email those errors to you as soon as they occur?  No more checking needed, unless you don’t check your email.  In that case, have it send a message to your cell phone or IM you with the error, or at least have it send you a message telling you to check the log.&lt;/p&gt;
&lt;p&gt;So, those are some possible places to look for WET code.  Be on the lookout today for places that are WET and spend a little time DRYing things up.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/tdd-saves-time-%E2%80%93-a-story/</guid>
            <title>TDD Saves Time – A Story</title>
            <link>http://davembush.github.com/tdd-saves-time-%E2%80%93-a-story/</link>
            <category>tdd</category>
            <category>programming</category>
            <category>testing</category>
            <pubDate>Thu, 22 May 2014 12:40:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/05/TDDSavesTime_AStory.png&#34; alt=&#34;TDDSavesTime_AStory&#34; title=&#34;TDDSavesTime_AStory&#34;&gt;I recently had an experience writing code that proved to me, once again, that using Test Driven Development really is faster than the way I have been working. You will remember a couple of weeks ago I presented &lt;a href=&#34;/automated-web-%E2%80%A6tional-testing/&#34;&gt;a strategy for creating test scenarios where we need to test storing data to a database from a web page&lt;/a&gt;. &lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Well, recently, I had a chance to use that strategy.  In that article, I talked about first testing that the data that we were sending back to the server was actually coming back correctly to the web site.  By doing this, you don’t have to track down where the problem is.  Is it in the database save routine or did it not even get from the client to the server?  This part worked pretty much as expected and my code for that worked right away so I can’t say that I saved a whole lot of time.&lt;/p&gt;
&lt;p&gt;But the part that did save me a TON of time is the second half.  Saving the data to the database without having to use the web site to create the data I wanted to save.&lt;/p&gt;
&lt;p&gt;While I was testing the client side, I saved the data to a JSON string which I used to create an object that represented the data that had been sent back.  Then in my unit test, I recreated the object from the stream and sent that into my save routine.  Once the save was done, I reloaded the object from the database.  Now I have the original object and the saved object which I can compare.&lt;/p&gt;
&lt;p&gt;And the comparison showed me that the save wasn’t quite working the way I had expected.  I actually had to go through several (10? 15? 20?) iterations of fixing and testing before I got to a point where my test was succeeding.  It took about a day to get everything working.  Imagine if I were using a manual method to test this.  Launch the web site, fill out the form (it’s a pretty long form with a lot of data) save the form, reload the form, remember what I had  filled out, verify that everything got saved.  I easily saved half a day using Test Driven Development.&lt;/p&gt;
&lt;p&gt;If you are  still on the fence as to the value of implementing test prior to writing code, I would encourage you to try it.  Just try it for 30 days.  Yes, it will be hard getting started.  Yes, it will FEEL like it takes more time to write the test first.  But as you make this part of how you develop code, you will start to see for yourself how many benefits you can realize by implementing this best practice.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/what-not-to-test/</guid>
            <title>What Not To Test</title>
            <link>http://davembush.github.com/what-not-to-test/</link>
            <category>tdd</category>
            <category>programming</category>
            <category>test driven development</category>
            <pubDate>Wed, 09 Apr 2014 12:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/04/WhatNotToTest.png&#34; alt=&#34;WhatNotToTest&#34; title=&#34;WhatNotToTest&#34;&gt;&lt;/p&gt;
&lt;p&gt;Many people believe that implementing Test Driven Development means that you need to have a test for every line of code in your system.  When  they start thinking about TDD in this way, they start to feel overwhelmed and quit before they even start.&lt;/p&gt;
&lt;p&gt;I know I did.&lt;/p&gt;
&lt;p&gt;In fact, I’ve seen suggestions on places like StackOverflow that suggest as much.&lt;/p&gt;
&lt;p&gt;But there is code in your application that you shouldn’t bother to write a test for.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Generated-Code&#34;&gt;&lt;a href=&#34;#Generated-Code&#34; class=&#34;headerlink&#34; title=&#34;Generated Code&#34;&gt;&lt;/a&gt;Generated Code&lt;/h2&gt;&lt;p&gt;Generated code includes any code that uses some automated process to create code your system is using.  This would include code that was written by Entity Framework, NHibernate, or code generators that you may have written.  Of course, I’m assuming that you’ve written test for the code generators that test both that they generate the expected code and the code that was generated works as expected.  But to write a test for every instance of the code the generator writes is quite a bit of overkill.&lt;/p&gt;
&lt;h2 id=&#34;Simple-Getters-and-Setters&#34;&gt;&lt;a href=&#34;#Simple-Getters-and-Setters&#34; class=&#34;headerlink&#34; title=&#34;Simple Getters and Setters&#34;&gt;&lt;/a&gt;Simple Getters and Setters&lt;/h2&gt;&lt;p&gt;If all your getters and setters are doing (properties) are retrieving and setting some backing store, there isn’t much point in writing a test for them.  One would assume that the code will get tested in the course of testing the code that is ultimately using the getters and setters.&lt;/p&gt;
&lt;h2 id=&#34;Third-Party-Libraries&#34;&gt;&lt;a href=&#34;#Third-Party-Libraries&#34; class=&#34;headerlink&#34; title=&#34;Third Party  Libraries&#34;&gt;&lt;/a&gt;Third Party  Libraries&lt;/h2&gt;&lt;p&gt;While I know it isn’t true, you have to assume that the third party library you are using actually works.  If you can’t assume that much, you should probably write it yourself.&lt;/p&gt;
&lt;h2 id=&#34;Your-Thinking-About-It-Wrong&#34;&gt;&lt;a href=&#34;#Your-Thinking-About-It-Wrong&#34; class=&#34;headerlink&#34; title=&#34;Your Thinking About It Wrong&#34;&gt;&lt;/a&gt;Your Thinking About It Wrong&lt;/h2&gt;&lt;p&gt;I would argue that if you are thinking about what you should write a test for, you are probably still thinking of Test Driven Development as something you do for the sake of testing rather than for the sake of &lt;a href=&#34;/tdd-isnt-all-about-testing/&#34;&gt;design, maintenance, and problem solving&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you write code, you should be thinking, “What problem am I trying to solve?”  Or better yet, “How can I state the problem in terms of a ‘When&amp;#x2F;Then’ statement?”&lt;/p&gt;
&lt;p&gt;When you think about the problem this way, what you test becomes that When&amp;#x2F;Then statement.  The class name for the test becomes When and the test becomes Then&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;WhenTheCodeIsInStateXAndIPerformActionYOnIt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;SetUp&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Setup&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// Setup When&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// Perform Action&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;Test&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ThenItShouldEndUpWithZState&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         Assert.That(&lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt;, Is.InSpecificState());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;When you do this, the question no longer is about how much code you have to test, but instead becomes “Have I written a test for every reasonable condition this class may encounter?”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/tdd-isn%E2%80%99t-all-about-testing/</guid>
            <title>TDD Isn’t All About Testing</title>
            <link>http://davembush.github.com/tdd-isn%E2%80%99t-all-about-testing/</link>
            <category>tdd</category>
            <category>programming</category>
            <category>test driven development</category>
            <pubDate>Tue, 25 Mar 2014 13:07:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/03/tran-land-045.jpg&#34; alt=&#34;tran-land-045&#34; title=&#34;tran-land-045&#34;&gt;While the artifact of Test Driven Development is test code, what you get out of test driven development far exceeds the test themselves. &lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Maintainable-Code&#34;&gt;&lt;a href=&#34;#Maintainable-Code&#34; class=&#34;headerlink&#34; title=&#34;Maintainable Code&#34;&gt;&lt;/a&gt;Maintainable Code&lt;/h2&gt;&lt;p&gt;By writing test first, you tend to write code that is more highly maintainable than if you just wrote the code to solve the problem.  By writing a class so that it can be used in both the system you are writing it for and so that it can be tested, you’ve been forced to think about the code in at least one other way from what you would have initially.  The result is your code tends to be more structured than it would have been otherwise.&lt;/p&gt;
&lt;h2 id=&#34;Clear-Specifications&#34;&gt;&lt;a href=&#34;#Clear-Specifications&#34; class=&#34;headerlink&#34; title=&#34;Clear Specifications&#34;&gt;&lt;/a&gt;Clear Specifications&lt;/h2&gt;&lt;p&gt;By writing test first, you are forced to develop clearer specifications.  I’ve run into this recently on a project that I’m currently working on.  I can’t write a test for the code I’m about to implement because I don’t clearly understand how this is supposed to interact with the rest of the application.  Until I do, I really can’t move forward.  If I were not writing a test, this would not be as clear now as it is.  Although, one could argue that eventually it would become clear.  But it is more likely I would leave the feature out completely because I forgot about it entirely.  Something I’ve been known to do in the past.&lt;/p&gt;
&lt;h2 id=&#34;Up-To-Date-Specifications&#34;&gt;&lt;a href=&#34;#Up-To-Date-Specifications&#34; class=&#34;headerlink&#34; title=&#34;Up To Date Specifications&#34;&gt;&lt;/a&gt;Up To Date Specifications&lt;/h2&gt;&lt;p&gt;This leads to another advantage to test driven development that &lt;a href=&#34;/test-driven-specifications/&#34;&gt;I’ve mentioned before&lt;/a&gt;.  By writing test in advance, you have the specification coded.  This forces you to keep the specification up to date if it changes because your test won’t run unless you do.  How many other programming methods are there that force the specifications to be kept up to date?  I can’t think of any.&lt;/p&gt;
&lt;h2 id=&#34;A-Safety-Net-For-Refactoring&#34;&gt;&lt;a href=&#34;#A-Safety-Net-For-Refactoring&#34; class=&#34;headerlink&#34; title=&#34;A Safety Net For Refactoring&#34;&gt;&lt;/a&gt;A Safety Net For Refactoring&lt;/h2&gt;&lt;p&gt;If you’ve ever looked at bad code and thought, “I bet I could make this better.”  But then you were afraid to make any changes because you aren’t sure your improvement wouldn’t break something, you’ll really appreciate TDD.  If there is a good test suite for the code you want to refactor, you can be sure that any changes you make won’t break something it should do.  I’ve left a lot of code alone for fear of breaking something else.&lt;/p&gt;
&lt;h2 id=&#34;Preventing-Feature-Creep&#34;&gt;&lt;a href=&#34;#Preventing-Feature-Creep&#34; class=&#34;headerlink&#34; title=&#34;Preventing Feature Creep&#34;&gt;&lt;/a&gt;Preventing Feature Creep&lt;/h2&gt;&lt;p&gt;Another thing TDD does is that it prevents feature creep on the part of developers.  Face it, how many times have you added a feature into the system that no one asked for?  By coding to the test, you reduce this urge.&lt;/p&gt;
&lt;p&gt;Many people start TDD by writing test after the fact and wonder how this can possibly be helpful.  This is because they’ve written them after they’ve written the code and they’ve completely bypass 80% of the benefits.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/%E2%80%9Cdebbie-done%E2%80%9D/</guid>
            <title>“Debbie-Done”</title>
            <link>http://davembush.github.com/%E2%80%9Cdebbie-done%E2%80%9D/</link>
            <category>tdd</category>
            <category>programming</category>
            <category>agile</category>
            <category>testing</category>
            <pubDate>Tue, 04 Mar 2014 05:38:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/02/88Tr.png&#34; alt=&#34;88Tr&#34; title=&#34;88Tr&#34;&gt;&lt;/p&gt;
&lt;p&gt;A long long time ago, in what seems now like another world, I worked for a company as a &lt;a href=&#34;//en.wikipedia.org/wiki/Clipper_(programming_language)&#34;&gt;Clipper programmer&lt;/a&gt;.  While I was there I heard this story about a lady named Debbie.&lt;/p&gt;
&lt;p&gt;I was told that Debbie was a programmer who used to work for this company.  Debbie was a lazy programmer.  She worked harder at avoiding work than if she just did the job she was supposed to do.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;The-ultimate-lazy-programmer&#34;&gt;&lt;a href=&#34;#The-ultimate-lazy-programmer&#34; class=&#34;headerlink&#34; title=&#34;The ultimate lazy programmer&#34;&gt;&lt;/a&gt;The ultimate lazy programmer&lt;/h2&gt;&lt;p&gt;For example.  Once my boss had stopped by her desk to see how she was progressing on a report she was supposed to be writing:&lt;/p&gt;
&lt;p&gt;Debbie: Oh, that’s done.  Here.  Take a look.&lt;/p&gt;
&lt;p&gt;The boss looked it over and found an error.  Some of the numbers didn’t match up.&lt;/p&gt;
&lt;p&gt;Debbie: Oh, I know what that is.  I can get that fixed right away.&lt;/p&gt;
&lt;p&gt;Which she did.  At least that’s what she made everyone believe.&lt;/p&gt;
&lt;p&gt;After she left (shortly after this) they found out that she hadn’t even connected to a database to create that report.  The whole report was hard coded.  Every time you ran it, it gave you the same numbers.&lt;/p&gt;
&lt;h2 id=&#34;“Debbie-Done”&#34;&gt;&lt;a href=&#34;#“Debbie-Done”&#34; class=&#34;headerlink&#34; title=&#34;“Debbie-Done”&#34;&gt;&lt;/a&gt;“Debbie-Done”&lt;/h2&gt;&lt;p&gt;The one thing I was told that sticks in my mind the most is that Debbie considered a project “done” if it compiled in linked.  She almost never ran the code.  Or if she did, she certainly didn’t run enough of it, or run it more than to make sure it didn’t crash.  Anyhow, the perception she left is that she only compiled and linked the code.  Today, we’d say all she did was build the project or solution.&lt;/p&gt;
&lt;p&gt;But recently, I’ve discovered that many programmers work at the “Debbie-Done” level more than we’d like to admit.&lt;/p&gt;
&lt;p&gt;I’ve always thought that programmers wrote code like I do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write a bit of code. &lt;/li&gt;
&lt;li&gt;Build the code.&lt;/li&gt;
&lt;li&gt;Run the code to see if that change works as expected. &lt;/li&gt;
&lt;li&gt;Write a bit more code. &lt;/li&gt;
&lt;li&gt;Build the code.&lt;/li&gt;
&lt;li&gt;Run the code to see if that change works as expected. &lt;/li&gt;
&lt;li&gt;Rinse, lather, repeat.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But what I’m discovering is that MANY programmers do not program that way at all.  No, many of them look like some version of “Debbie-Done” programming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write some code. &lt;/li&gt;
&lt;li&gt;Build the project to make sure it will build&lt;/li&gt;
&lt;li&gt;Write some more code&lt;/li&gt;
&lt;li&gt;Build the project&lt;/li&gt;
&lt;li&gt;Rinse, lather, repeat&lt;/li&gt;
&lt;li&gt;Run the code and “test” all of the changes at once.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem with this method is that no one can remember all of the changes they make so, in the end, the code I write tends to be more completely tested than the code that was tested in bulk.  The only difference between this method of development and “Debbie-Done” is the degree of completeness with which each developer is able “test” their code.&lt;/p&gt;
&lt;h2 id=&#34;Avoid-“Debbie-Done”-with-Test-First-Development&#34;&gt;&lt;a href=&#34;#Avoid-“Debbie-Done”-with-Test-First-Development&#34; class=&#34;headerlink&#34; title=&#34;Avoid “Debbie-Done” with Test First Development&#34;&gt;&lt;/a&gt;Avoid “Debbie-Done” with Test First Development&lt;/h2&gt;&lt;p&gt;It is no wonder that many programmers I talk to think that test driven development takes too much time.  Compared to how they are programming, it does.&lt;/p&gt;
&lt;p&gt;But think about this.  If you were to code like I do, suddenly writing test for every change you make suddenly makes sense because instead of you running the application and getting to the place that will trigger your code and observing if it will work or not, you can write a test for just the piece of code you are working on and run that each time you want to verify if it is working or not.  Yes, initially, this will take more time.  But over the life of the program, and I would say even over the time span that it takes to initially write the code, writing at least the Unit Test as you are writing the features will actually save you time.  Not only that, you will end up with test you can repeat every time the code is changed.&lt;/p&gt;
&lt;p&gt;Even my method of “code, build, test, code, build, test” is “Debbie-Done” compared to writing test for each change as you make the change.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/do-programmers-even-need-a-degree/</guid>
            <title>Do Programmers even NEED a degree?</title>
            <link>http://davembush.github.com/do-programmers-even-need-a-degree/</link>
            <category>programming</category>
            <category>education</category>
            <pubDate>Wed, 11 Sep 2013 11:32:04 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Well, a post that is no longer available really got  things going in blog-o-sphere.  Shoot!  Even &lt;a href=&#34;//www.joelonsoftware.com/items/2008/01/08.html&#34;&gt;Joel Spolsky&lt;/a&gt; got involved.  I saw another post, but I’m sorry to say, I can’t find it right now.&lt;/p&gt;
&lt;p&gt;The original article put forth the idea that we are teaching the right stuff in our undergraduate Computer science degree programs.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Joel’s article suggested that what we really need is a bachelor of fine arts program for programmers.  That programming, and computer science are really two entirely different disciplines.&lt;/p&gt;
&lt;p&gt;I think Joel’s onto something and his solution is probably the closest to what our current educational system can handle.  But, I have another solution to the problem that goes further.&lt;/p&gt;
&lt;p&gt;Why get a degree at all.  Most of you reading this post know as well as I do that a good 80% of what most programmers learn, they didn’t learn from college.  Let’s face reality here.  First, any degree program is, at best, 20 years behind.  It’s just a fact.  Ours is not the only industry facing this reality.  Second, the really good programmers are already doing what these schools are trying to teach.&lt;/p&gt;
&lt;p&gt;Joel suggest that we have people from the industry come in and teach this BA course work he’s suggesting.  There are several major problem with this.  First, most (not all) of the really good programmers can’t teach.  Some could with some training, but the school isn’t going to train them.  And those who can teach, probably don’t know the recent material.  There ARE exceptions.  My point here is that the exceptions won’t fill the need.&lt;/p&gt;
&lt;p&gt;But, what would happen if we went back to a really old way of doing things?  It worked.  We are almost doing some form of this already, mostly after graduation.  What if we just skipped the programming degree completely.&lt;/p&gt;
&lt;p&gt;I’ve been in this field long enough (20+ years) to know that most of the really good programmers got into our field through some back door.  I was a camp and recreation major that converted to programming via DePaul’s career change program.  A hoop I jumped through simply so I could get the first job.  At least 80% of what I was taught I was already doing as I had experimented with Basic, Pascal, and C.&lt;/p&gt;
&lt;p&gt;I know another guy who dropped out of school his sophomore year because he already had the job he was going to school to get.&lt;/p&gt;
&lt;p&gt;And don’t even get me started on certifications.  Let’s say we stop testing knowledge and start testing aptitude.  The aptitude test I took nearly knocked me out of the DuPaul program.  At the end of the program, the main prof told me I was the best natural talent he’d seen come through the program.  I wonder if he knows he almost never saw me?&lt;/p&gt;
&lt;p&gt;Let’s face it, what we as programmers need to know to do our jobs effectively can’t be taught.  And most of what can be taught could be taught on the job.&lt;/p&gt;
&lt;p&gt;So, here’s my recommendation.  Why don’t we go back to using the apprentice system?  This allows a good senior programmer to get a feel for what kind of programmer the new guy is going to be.  It would help the new programmer find out really quickly if this is what he really wants to do with his life.  He gives the formal training the new programmer needs.&lt;/p&gt;
&lt;p&gt;Unless you’re just starting out, you know that most of what you learn, you learn from experience.  Why not just admit that and stop trying to fit programming into a degreed program that largely doesn’t work for our industry?&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/why-programmers-can%E2%80%99t-program/</guid>
            <title>Why Programmers Can’t Program</title>
            <link>http://davembush.github.com/why-programmers-can%E2%80%99t-program/</link>
            <category>programming</category>
            <category>education</category>
            <category>college</category>
            <pubDate>Thu, 11 Mar 2010 07:53:24 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2010/03/WEST0241.png&#34; alt=&#34;WEST0241&#34; title=&#34;WEST0241&#34;&gt; Jeff Atwood of &lt;a href=&#34;//www.codinghorror.com/blog/2010/02/the-nonprogramming-programmer.html&#34;&gt;Coding Horror&lt;/a&gt; writes:&lt;/p&gt;
&lt;p&gt;“I find it difficult to believe, but the reports keep pouring in via Twitter and email: **many candidates who show up for programming job interviews can’t program. At all.**”&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Jeff, you must not have visited a college campus recently.  The reason most that most “programmers” can’t program is because their instructors led them to believe they could program.&lt;/p&gt;
&lt;p&gt;I have two stories that illustrate the point.&lt;/p&gt;
&lt;p&gt;I do work for a local community college.  The college hired one of their students to work on an ASP.NET project because he was recommended by the professor and because he got all A’s in his programming classes.  The professor told the manager, “this is one of the best students I’ve ever had.”&lt;/p&gt;
&lt;p&gt;Maybe he was the best if you evaluate by his grades, but he sure couldn’t program.  And even if he were to read this, or one of his buddies were to read this and show it to him, I think he’d agree.  He eventually quit and went back to doing what he used to do before he learned how to be a programmer.&lt;/p&gt;
&lt;p&gt;To the school’s credit, they did actually teach current languages.  But that’s where the education stopped.  They taught various programming languages like most of us learned math.  Here’s the formula.  Here’s an exercise that uses the formula.  Nothing in the classes require the student to solve a real-life problem, or even to solve any of the interview problems.&lt;/p&gt;
&lt;p&gt;At the school my daughter goes to, I found the situation even worse.  They have a computer science program but as I was talking to a recent graduate I found out there was no way I’d hire this kid.  I found out because the kid knew he’d been cheated and was freely telling me about it.  So just to find out how bad things were I asked a few questions.&lt;/p&gt;
&lt;p&gt;Turns out, he’d been educated in Java, but he couldn’t tell me what polymorphism was, or when I asked it as, “what is inheritance and how would you use it practically?”  he couldn’t tell me.&lt;/p&gt;
&lt;p&gt;He’d never seen JSP, HTML, or JavaScript either.  What school teaches Java and doesn’t teach those subjects with it?&lt;/p&gt;
&lt;p&gt;One of the commenters suggests that we need government-regulated tests (like that would work any better than any other government-regulated test?)  to help weed out those who can’t program.  While I’m sure there are some great examples of teachers who can program, can teach programming, and care about the quality of programmers they are graduating, I’d suggest changing the education system to weed out the professors who can’t teach, can’t program, and don’t care.  Maybe the certification tests need to go higher than the students we end up interviewing.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
