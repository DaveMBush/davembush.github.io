<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;ext js&#34; tag</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Wed, 13 Jul 2016 06:30:00 -0400</pubDate>
        <lastBuildDate>Wed, 13 Jul 2016 06:30:00 -0400</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/7-reasons-to-evade-ext-js/</guid>
            <title>7 Reasons To Evade Ext JS</title>
            <link>http://davembush.github.com/7-reasons-to-evade-ext-js/</link>
            <category>javascript</category>
            <category>ext js</category>
            <category>sencha</category>
            <pubDate>Wed, 13 Jul 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve worked with Ext JS now for a total of 2.5 years.  First with Ext 4.2 and now with Ext 6.x.&lt;/p&gt;
&lt;p&gt;Here’s my experience, and warning, of why you should avoid this disaster of a framework.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/07/image-1.png&#34; alt=&#34;7 Reasons To Evade Ext JS&#34; title=&#34;7 Reasons To Evade Ext JS&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Jack-of-All-Trades&#34;&gt;&lt;a href=&#34;#Jack-of-All-Trades&#34; class=&#34;headerlink&#34; title=&#34;Jack of All Trades&#34;&gt;&lt;/a&gt;Jack of All Trades&lt;/h2&gt;&lt;p&gt;Master of none! One of the great selling points of using Ext JS is the fact that it comes with “Everything you need” to build a web application.  That would be great if it were true.  But the fact of the matter is, it comes with all of the features you need but the features are all only partially implemented.  I’ve complained publicly several times that Sencha can’t possibly be testing the code they release because it only works in their demos.  If you try to use a feature they have documented as being available, you are likely to find that the feature doesn’t actually work.  How is it possible that you’ve written documentation for how something is supposed to work and yet you can release it without it working properly?  I can understand fringe stuff getting by.  We can’t think of every test.  But when this happens over and over again, you start to wonder what exactly they are testing.&lt;/p&gt;
&lt;h2 id=&#34;A-Wolf-in-Sheep’s-Clothing&#34;&gt;&lt;a href=&#34;#A-Wolf-in-Sheep’s-Clothing&#34; class=&#34;headerlink&#34; title=&#34;A Wolf in Sheep’s Clothing&#34;&gt;&lt;/a&gt;A Wolf in Sheep’s Clothing&lt;/h2&gt;&lt;p&gt;When I first started with Ext, the only design pattern they had available was what they referred to as MVC.  It took me two months of playing with the framework before I finally realized that what they were calling MVC wasn’t anything the &lt;a href=&#34;/designPatterns&#34;&gt;Gang of Four&lt;/a&gt; would recognize as MVC.  I guess if you have a View, a Model and a Controller, you can call it MVC?  It doesn’t matter that the Models define records in a table or that the Controller is tightly coupled to your view.&lt;/p&gt;
&lt;h2 id=&#34;Sheep-Without-Legs&#34;&gt;&lt;a href=&#34;#Sheep-Without-Legs&#34; class=&#34;headerlink&#34; title=&#34;Sheep Without Legs&#34;&gt;&lt;/a&gt;Sheep Without Legs&lt;/h2&gt;&lt;p&gt;OK.  So when they introduced the MVVM architecture I actually started to have just a bit of hope.  Yes, there were still some fundamental issues I have, but MVVM would make this tolerable.  But here is the issue.  Their idea of MVVM is that you would only need to implement it on a per page basis.&lt;/p&gt;
&lt;p&gt;Let me try to explain.&lt;/p&gt;
&lt;h3 id=&#34;Broken-Data-Binding&#34;&gt;&lt;a href=&#34;#Broken-Data-Binding&#34; class=&#34;headerlink&#34; title=&#34;Broken Data Binding&#34;&gt;&lt;/a&gt;Broken Data Binding&lt;/h3&gt;&lt;p&gt;In my ideal world, when I build a new component, I would build that component using the framework the rest of my application is using.  So my component uses MVVM.  Sencha’s implementation gives you a View, ViewController, and ViewModel.  Mostly this looks more like MVC if you ask me but whatever, it has two-way databinding, so we’ll call it MVVM for now.  If you build a component that lives inside another component, the first thing you’ll discover is that binding only works from the top down.  That is, I can bind data at the outer layer and it will get reflected all of the way in to the inner most component that uses it.  But, if you change the data in the inner most component, it doesn’t reflect back up to the outer most component.  I’ve written a hack for this, and there is no promise from Sencha that this will ever get fixed properly, so I guess my hack is safe.&lt;/p&gt;
&lt;h3 id=&#34;Broken-Controllers&#34;&gt;&lt;a href=&#34;#Broken-Controllers&#34; class=&#34;headerlink&#34; title=&#34;Broken Controllers&#34;&gt;&lt;/a&gt;Broken Controllers&lt;/h3&gt;&lt;p&gt;But it gets worse.  While child components can find data in models that are in parent components properly, they can’t find references to functions in controllers in the same way.  This is particularly problematic if you write a component that is a container of other components.  You would naturally want the child components to use the controller from the component that they were declared in.  But if you have an outer component that has your container component as a child and then other components inside of that.  The only way you can control what controller the child most components are going to notify of events is by wrapping the inner most components in their own component with their own controller.  This gets to be awkward when all you want to do is provide an event handler for one control in a column of a grid control.  Again, I have a monkey patch that fixes this, but why did I have to write it? This is just one specific example of my “Jack of All Trades” point that I started with.&lt;/p&gt;
&lt;p&gt;We won’t even address the question of if this is really MVVM or not!&lt;/p&gt;
&lt;h2 id=&#34;Never-Use-the-0-release&#34;&gt;&lt;a href=&#34;#Never-Use-the-0-release&#34; class=&#34;headerlink&#34; title=&#34;Never Use the .0 release&#34;&gt;&lt;/a&gt;Never Use the .0 release&lt;/h2&gt;&lt;p&gt;I think most of us now are generally conditioned to be wary of the .0 release of anything that hasn’t been developed using Open Source methods.  There just haven’t been enough eyes on the project to ensure that everything works as it should.&lt;/p&gt;
&lt;p&gt;But with Sencha, this extends to all of the patch releases at the very least and even into some minor releases.&lt;/p&gt;
&lt;p&gt;While the 4.0, 5.0, and 6.0 releases were unacceptably broken, we find that every new patch or minor release that comes out afterward breaks something that was working.  We always have to ask, “Can we live with this?”&lt;/p&gt;
&lt;h2 id=&#34;All-or-Nothing&#34;&gt;&lt;a href=&#34;#All-or-Nothing&#34; class=&#34;headerlink&#34; title=&#34;All or Nothing&#34;&gt;&lt;/a&gt;All or Nothing&lt;/h2&gt;&lt;p&gt;As I said at the beginning, Sencha gives you everything.  That sounds good.  You won’t have to go looking for a grid control, or many other common controls you might want to use.&lt;/p&gt;
&lt;p&gt;But the bad news is, you can only use controls that were written to be used with Ext.  Which other than what Sencha provides in the framework, doesn’t give you a lot of choices.  Don’t go thinking you’ll supplement Ext with a selection of third party controls.  It’s not going to happen.&lt;/p&gt;
&lt;h2 id=&#34;Fences-Protect-AND-Isolate&#34;&gt;&lt;a href=&#34;#Fences-Protect-AND-Isolate&#34; class=&#34;headerlink&#34; title=&#34;Fences Protect AND Isolate&#34;&gt;&lt;/a&gt;Fences Protect AND Isolate&lt;/h2&gt;&lt;p&gt;Up until this point in my post, no one can reasonably argue that anything I’ve said is actually a benefit.  At this point we switch to points that may vary based on how well you know JavaScript, HTML, and CSS.&lt;/p&gt;
&lt;p&gt;You see, the good news, and actually a major selling point to many people, is that you can write a web application using Ext without having to know much, if anything about HTML or CSS.  And for that matter even the amount of JavaScript you need to know is relatively limited.&lt;/p&gt;
&lt;p&gt;That’s the good news.  The bad news is, if you know anything about any of these, you’ll probably end up frustrated by EXT.  This is because Ext’s JavaScript controls most of the layout.  So if you are used to going into developer tools to tweak the CSS and then applying that to your style sheet, you are going to be very disappointed.  Pretty much nothing you do in developer tools is going to work as you would expect.  And figuring out how to apply those to your code is going to be a lot harder than you are used to.&lt;/p&gt;
&lt;h2 id=&#34;Their-Way-or-the-Highway&#34;&gt;&lt;a href=&#34;#Their-Way-or-the-Highway&#34; class=&#34;headerlink&#34; title=&#34;Their Way or the Highway&#34;&gt;&lt;/a&gt;Their Way or the Highway&lt;/h2&gt;&lt;p&gt;Once again, many people see this as an advantage.  And once again if you aren’t familiar with how the rest of the JavaScript world does things, this is going to sound fine.&lt;/p&gt;
&lt;h3 id=&#34;Sencha-CMD&#34;&gt;&lt;a href=&#34;#Sencha-CMD&#34; class=&#34;headerlink&#34; title=&#34;Sencha CMD&#34;&gt;&lt;/a&gt;Sencha CMD&lt;/h3&gt;&lt;p&gt;Everything runs through Sencha CMD.  A tool for building all things Ext.  If you want to bundle and minify your code, the standard way of doing this is by using “requires” statements in your code and then running Sencha CMD and have it figure out what you are using and put it all in one bundle.&lt;/p&gt;
&lt;p&gt;The problem with this is that there are several much better ways of doing this that are available using Node and various NPM packages.  Again, if you are a JavaScript developer, you are going to wonder what Sencha is thinking.&lt;/p&gt;
&lt;h3 id=&#34;Ext-define&#34;&gt;&lt;a href=&#34;#Ext-define&#34; class=&#34;headerlink&#34; title=&#34;Ext.define()&#34;&gt;&lt;/a&gt;Ext.define()&lt;/h3&gt;&lt;p&gt;Another place where proprietary shows up is in how Ext defines “Classes”.  When it was first introduced, TypeScript was new.  But now, we not only have TypeScript, which does much of what Ext does and some things it doesn’t, but we have an evolving JavaScript standard that I’m afraid Sencha won’t be able to keep up with.  They already discourage the use of ‘use strict’;.  Once again, there is only one place where this will get you in trouble, and the work around actually produces more efficient code.  But still, the point is, Sencha is relying on ECMA Script 3 standards while the world has largely moved on to ECMA 2015 and beyond.&lt;/p&gt;
&lt;p&gt;Anyhow, my point here is that Ext is not just a framework but also functions, largely, as its own language.  Not quite as much a fork from the standard as Coffee Script, but also not nearly as close to the JavaScript spec as TypeScript.  So while it is still JavaScript, if you are a JavaScript programmer, it isn’t going to feel quite like JavaScript to you.&lt;/p&gt;
&lt;h3 id=&#34;Themes&#34;&gt;&lt;a href=&#34;#Themes&#34; class=&#34;headerlink&#34; title=&#34;Themes&#34;&gt;&lt;/a&gt;Themes&lt;/h3&gt;&lt;p&gt;The final place you will find “Proprietary” lurking is with the Themes.  There are several really good CSS frameworks out there.  Sencha uses none of them.  And while the syntax they use for creating themes has been SASS up until Ext 6, now they even have their own proprietary SASS compiler.  Watch out here because they are still using the SASS extensions so you are likely to make some assumptions here that aren’t true because, once again, they’ve only implemented enough of the SASS engine to do what THEY need to do.&lt;/p&gt;
&lt;h2 id=&#34;VB-All-Over-Again&#34;&gt;&lt;a href=&#34;#VB-All-Over-Again&#34; class=&#34;headerlink&#34; title=&#34;VB All Over Again&#34;&gt;&lt;/a&gt;VB All Over Again&lt;/h2&gt;&lt;p&gt;Every time I hear someone praise how great Ext is, it is normally because it has everything you need out of the box and allows you to get stuff done quickly.  &lt;/p&gt;
&lt;p&gt;Basically the same argument for using Visual Basic back in the day.  And yet I learned to never take a VB job because it almost every instance, while it was possible to write well structured code in Visual Basic, it was generally so difficult to do that the code I would be maintaining would need to be rewritten in order to make any sense of it. Ext suffers the same issue.  There is nothing in Ext to force you to write well structured code.  The code I have had to maintain has almost always followed every anti-pattern known to man.  In this case, this isn’t Sencha’s fault directly other than the fact that the only reason my code tends to be cleaner than most is because I’m more likely to code a fix to an Ext bug than I am to work around the problem with an anti-pattern.&lt;/p&gt;
&lt;p&gt;In comparison to other frameworks that are available, if all you want is a tool that will get you a semi working application quickly, and you don’t care so much about having to rewrite it when you need to change it in some way, Ext is your tool.  If on the other hand, you care about design and you want to be able to maintain what you’ve written, you should look elsewhere.&lt;/p&gt;
&lt;p&gt;Remember, if it sounds too good to be true, it probably is.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/how-not-to-choose-a-framework/</guid>
            <title>How Not to Choose a Framework</title>
            <link>http://davembush.github.com/how-not-to-choose-a-framework/</link>
            <category>javascript</category>
            <category>react.js</category>
            <category>ext js</category>
            <category>angular.js</category>
            <pubDate>Thu, 02 Jun 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;In my job as a JavaScript architect, trainer and mentor, I’m often asked, “What’s your favorite framework?”  Or “What is the best framework?” And it surprises people when I give them two answers to that question.&lt;/p&gt;
&lt;p&gt;Right now, of the frameworks I’ve looked at, my favorite framework is &lt;a href=&#34;/tags/react-js/&#34;&gt;React JS&lt;/a&gt;.  But if I were picking a corporate framework, at this point I’d probably land on &lt;a href=&#34;/angular-2-first-impressions-compared-to-angular-1/&#34;&gt;Angular 2.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But the question you are probably asking is , “Why two different selections?”  And, I think a more interesting question would be, “How did you select which one to use?” In fact, when I was thinking about writing this post, I was going to title it “How to Choose a JavaScript Framework” but as I considered what I would actually say, I realized that the factors I would use really apply to any language and any time.&lt;/p&gt;
&lt;p&gt;But an even more interesting question is this.  What factors are essential when picking out a framework.  If I ignored these questions, what are the cost? So, I give you…&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/05/image-3.png &#34;How Not to Choose a Framework&#34;)&lt;figcaption&gt;Photo credit: [Tony Webster](//www.flickr.com/photos/diversey/980101167/) via [Visual hunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;How-Not-to-Choose-a-Framework&#34;&gt;&lt;a href=&#34;#How-Not-to-Choose-a-Framework&#34; class=&#34;headerlink&#34; title=&#34;How Not to Choose a Framework&#34;&gt;&lt;/a&gt;How Not to Choose a Framework&lt;/h2&gt;&lt;p&gt;As we progress, I’ll mention frameworks I have experience with.  To be fair, I will let you know my preferences.&lt;/p&gt;
&lt;p&gt;In order, the frameworks I would prefer to use would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React JS&lt;/li&gt;
&lt;li&gt;Angular 2&lt;/li&gt;
&lt;li&gt;Angular 1&lt;/li&gt;
&lt;li&gt;Ext JS 5 or 6&lt;/li&gt;
&lt;li&gt;Ext JS 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I were going to recommend a framework for a large enterprise organization, the order would be slightly different:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Angular 2&lt;/li&gt;
&lt;li&gt;Angular 1&lt;/li&gt;
&lt;li&gt;Ext JS 5 or 6&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Ext JS 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this in mind, here’s what you should pay attention to.&lt;/p&gt;
&lt;h2 id=&#34;Who-Will-Use-The-Framework&#34;&gt;&lt;a href=&#34;#Who-Will-Use-The-Framework&#34; class=&#34;headerlink&#34; title=&#34;Who Will Use The Framework?&#34;&gt;&lt;/a&gt;Who Will Use The Framework?&lt;/h2&gt;&lt;p&gt;At the organization I am working at now, most of the people there are Java programmers.  This means that programming in JavaScript, of any flavor, is going to be as much as a mind-shift as moving from C to C++ or C++ to Java or C#.  Yes, there are similarities to what they are used to, but there are enough differences to consider that you’ll probably gravitate toward a framework that allows them to not have to worry about those differences.  On this point Ext or Angular 2 are probably going to rise to the surface because they, more than any other framework, allow you to work with JavaScript more like it was like Java or C# than any other framework I know about.&lt;/p&gt;
&lt;h2 id=&#34;How-Steep-is-The-Learning-Curve&#34;&gt;&lt;a href=&#34;#How-Steep-is-The-Learning-Curve&#34; class=&#34;headerlink&#34; title=&#34;How Steep is The Learning Curve?&#34;&gt;&lt;/a&gt;How Steep is The Learning Curve?&lt;/h2&gt;&lt;p&gt;Related to who will use the framework is how long will it take them to learn the framework?  For this, you are going to want to look at things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can I buy support so I can get my questions answered?&lt;/li&gt;
&lt;li&gt;How clear is the documentation?&lt;/li&gt;
&lt;li&gt;How popular is the framework?&lt;/li&gt;
&lt;li&gt;Do I already have an expert on my team?&lt;/li&gt;
&lt;li&gt;Is there a public Slack channel for this framework?&lt;/li&gt;
&lt;li&gt;Do the people behind the framework care about the Enterprise?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On this point, depending on the experience of your developers, Ext JS and Angular 2 are probably going to surface as the clear winners while React is going to end up at the very bottom.  As much as I love it personally, I have to admit that learning it has taken me the most amount of time.&lt;/p&gt;
&lt;h2 id=&#34;How-Opinionated-is-the-Framework&#34;&gt;&lt;a href=&#34;#How-Opinionated-is-the-Framework&#34; class=&#34;headerlink&#34; title=&#34;How Opinionated is the Framework?&#34;&gt;&lt;/a&gt;How Opinionated is the Framework?&lt;/h2&gt;&lt;p&gt;I remember when VB 1.0 was first introduced.  The reason everyone gave me for why I should love this new development environment was, “Look how fast I can get something up and running.” Well, yes, but… VB let you write code any way that got the job done.  And coming from C++ and MFC and prior to that, OWL from Borland, I recognized that even though you could still write crappy code using a framework that provided some structure, the amount of crappy code you wrote was inversely proportional to the amount of structure the framework provides.&lt;/p&gt;
&lt;p&gt;When you are working with a large team of developers, something needs to be in place to ensure they are writing code in a highly structured way rather than just getting the job done.&lt;/p&gt;
&lt;p&gt;Once again, this places Angular 2 at the top of the pile of the ones I’ve actually worked with.  Ext sinks to the bottom of the pile.  While Ext does implement something they call MVC and MVVM, they don’t protect the developer from coding outside of what those design patterns are supposed to look like.  In the case of MVC, I’m not even sure the people who wrote it know what MVC is.&lt;/p&gt;
&lt;h2 id=&#34;Industry-Standards&#34;&gt;&lt;a href=&#34;#Industry-Standards&#34; class=&#34;headerlink&#34; title=&#34;Industry Standards&#34;&gt;&lt;/a&gt;Industry Standards&lt;/h2&gt;&lt;p&gt;The easiest way for me to illustrate what I mean here is to point out a few ways this gets violated with the existing frameworks.&lt;/p&gt;
&lt;p&gt;In order to make Ext work more like a desktop development environment, they generate the HTML for you and use their own layout mechanism to control where the various elements appear on the screen.  Every other framework I’ve mentioned lets you control the layout using CSS.  The advantage to Ext is that I don’t have to know HTML or CSS in order to get a screen up that looks nice.  The down side is that if I want to do anything just a bit out of the Ext box, I quickly become frustrated.  It also takes more time to render a screen than if I were using HTML and CSS.  This is particularly true if your components are nested more than 3 deep.&lt;/p&gt;
&lt;p&gt;Further, Ext has enabled JavaScript to look more like Java and C# than JavaScript by implementing a proprietary mechanism for defining a class.  What continually worries me is how well this will continue to work as the ECMAScript standards evolve and provide there own mechanisms for achieving the same results.&lt;/p&gt;
&lt;p&gt;Ext also (sorry, but Ext is the primary violator of this point) uses its own proprietary build process.  It is possible to circumvent their build process for most things.  But the question one has to ask is, “why can’t you just use standards like gulp, grunt or npm scripts?” Even though Angular 2 primarily uses TypeScript, the difference between Angular 2 and Ext is that 1) you don’t HAVE to use TypeScript even though it is highly encourages and 2) TypeScript only implements features that look like they are going to eventually end up in the ECMAScript standards.  So, it is a lot more future proof while adding a lot of the same features that Ext implements in a more proprietary fashion.&lt;/p&gt;
&lt;p&gt;Another framework where this kind of shows up is with React JS.  While everything about building the app is built using industry standards, the unit testing framework doesn’t allow you to use Karma as your test running.  There is another more proprietary implentation called Jest.  However, I also don’t have to use PhantomJS to gets my components.  I wish I could have both.&lt;/p&gt;
&lt;h2 id=&#34;How-Testable-Is-It&#34;&gt;&lt;a href=&#34;#How-Testable-Is-It&#34; class=&#34;headerlink&#34; title=&#34;How Testable Is It?&#34;&gt;&lt;/a&gt;How Testable Is It?&lt;/h2&gt;&lt;p&gt;Anyone who is familiar with my history of posts, who know me personally, know &lt;a href=&#34;/tags/tdd&#34;&gt;I am a huge proponent of TDD&lt;/a&gt;. So, any framework I use has to allow me to unit test. This is why Ext JS 4 ends up dead last on my list. You would think that a framework that says they implement MVC would allow you to test the controller without have the view attached. That’s one of the points of MVC. But Ext doesn’t allow this.&lt;/p&gt;
&lt;p&gt;On the other end of the spectrum, React is testable all the way down. This is why I love it. The only reason I don’t consider it the right choice for the enterprise is because it takes so long to learn and the documentation isn’t very well done.&lt;/p&gt;
&lt;h2 id=&#34;Doing-The-Research&#34;&gt;&lt;a href=&#34;#Doing-The-Research&#34; class=&#34;headerlink&#34; title=&#34;Doing The Research&#34;&gt;&lt;/a&gt;Doing The Research&lt;/h2&gt;&lt;p&gt;OK.  So, this is what you should look for, but when you are looking at the frameworks, how would you know?  Most of this information is only stuff you would find out after your programmers started using the framework.&lt;/p&gt;
&lt;p&gt;One way you can find out is to find people who have used the various frameworks you have under consideration.  One of my first test would be, “How much information can I find on the Internet about this framework?”My second question would be, “How popular is this framework?” and then finally I would look for people who don’t like the framework and try to determine if their points are valid.&lt;/p&gt;
&lt;h2 id=&#34;How-Not-to-Pick-a-Framework&#34;&gt;&lt;a href=&#34;#How-Not-to-Pick-a-Framework&#34; class=&#34;headerlink&#34; title=&#34;How Not to Pick a Framework&#34;&gt;&lt;/a&gt;How Not to Pick a Framework&lt;/h2&gt;&lt;p&gt;If you want to pick the wrong framework, trust the sales literature.  Don’t ask any question.  Ignore the points above.&lt;/p&gt;
&lt;p&gt;Ultimately regret your decision.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/ext-js-6-by-sencha-the-good-the-bad-the-ugly/</guid>
            <title>Ext JS 6 by Sencha - The Good, The Bad, The Ugly</title>
            <link>http://davembush.github.com/ext-js-6-by-sencha-the-good-the-bad-the-ugly/</link>
            <category>javascript</category>
            <category>ext js</category>
            <pubDate>Thu, 07 Apr 2016 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Long time readers may remember that I started using Ext JS about 3 years ago.  At the time, I was using version 4.2.2.  I recently started a new contract where they are using Ext JS 6.0.1.  I have to say, this version solves a lot of the architectural issues I had with the 4.x series.  But, there are still problems.&lt;/p&gt;
&lt;p&gt;Since I’ve provided an evaluation of &lt;a href=&#34;/angular-2-first-impressions-compared-to-angular-1/&#34;&gt;Angular 2&lt;/a&gt; and &lt;a href=&#34;/react-js-and-associated-bits/&#34;&gt;React JS&lt;/a&gt;, I thought providing an evaluation of the current version of Ext JS would be appropriate since these three seem to be the main players in the corporate world.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/04/image.png &#34;Ext JS by Sencha - The Good, The Bad, The Ugly&#34;)&lt;figcaption&gt;Photo credit: [sanbeiji](//www.flickr.com/photos/sanbeiji/5606497634/) via [Visual Hunt](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Ext-JS-The-Good&#34;&gt;&lt;a href=&#34;#Ext-JS-The-Good&#34; class=&#34;headerlink&#34; title=&#34;Ext JS - The Good&#34;&gt;&lt;/a&gt;Ext JS - The Good&lt;/h2&gt;&lt;h3 id=&#34;MVVM&#34;&gt;&lt;a href=&#34;#MVVM&#34; class=&#34;headerlink&#34; title=&#34;MVVM&#34;&gt;&lt;/a&gt;MVVM&lt;/h3&gt;&lt;p&gt;I’ve always had three major complaints about Ext JS.  Of the three, the fact that Ext JS is nearly impossible to test is the one that drove me away.  In fact, I almost didn’t interview for the contract I have now because they are using Ext JS.  This is because the 4.2 version that I was using implemented what they called the MVC framework.  The problem is, the MVC framework they implemented was not anything &lt;a href=&#34;/designPatterns&#34;&gt;the Gang of Four&lt;/a&gt; would recognize.  Once I realized that what they were calling MVC wasn’t really MVC, I was able to learn how to use the product much better.&lt;/p&gt;
&lt;p&gt;But being the TDD guy that I am, I was always frustrated by their implementation of MVC because in order to test anything in the Controller, I had to have the view available.  And while I tried several ways of mitigating this problem, I was never completely satisfied with the solution.  I ought to be able to test my controller without a view, or if I have to have a view, it should be some sort of fake view, or be able to render into a fake DOM like React JS does.&lt;/p&gt;
&lt;p&gt;But, in Ext JS 6, they’ve provided an alternate framework.  This time it is also more accurately named.  They have provided an MVVM implementation.  In the View, you provide your layout, declarative syntax to access the View’s state from the ViewModel and to specify the event handlers using listener blocks that tell the view what methods to call in the associated ViewController class.&lt;/p&gt;
&lt;p&gt;In the ViewController, your methods can access the ViewModel by calling getModel() and can set the state of the view by calling the ViewModel’s set() method.  Once this is done, the View can update using the ViewModel’s new state.&lt;/p&gt;
&lt;p&gt;What this means for testing is that I can test without the View by overriding the ViewContoller.getModel() method to return the ViewModel.  Run my test for a method and check the state of the ViewModel.  Look Ma, no View!&lt;/p&gt;
&lt;h3 id=&#34;Everything-You-Need&#34;&gt;&lt;a href=&#34;#Everything-You-Need&#34; class=&#34;headerlink&#34; title=&#34;Everything You Need&#34;&gt;&lt;/a&gt;Everything You Need&lt;/h3&gt;&lt;p&gt;One of the biggest selling points for using Ext JS is that just about everything you could need is provided for you in once product.  Unlike Angular or React JS where one project provides the framework and another project or projects provide components, nearly everything you are going to need for your application is provided out of the box.  This is not to say that there aren’t third party providers for Ext JS, but the need for them is very limited.&lt;/p&gt;
&lt;h3 id=&#34;Consistent-Rendering&#34;&gt;&lt;a href=&#34;#Consistent-Rendering&#34; class=&#34;headerlink&#34; title=&#34;Consistent Rendering&#34;&gt;&lt;/a&gt;Consistent Rendering&lt;/h3&gt;&lt;p&gt;One of the major attractions Ext has offered is that you don’t need to worry about cross browser rendering issues.  If you still need to support REALLY old browsers, this may still be a big selling point for you.  I think this will matter less in the future as the browsers continue to stabilize around standards.&lt;/p&gt;
&lt;h3 id=&#34;Responsive-x2F-Adaptive&#34;&gt;&lt;a href=&#34;#Responsive-x2F-Adaptive&#34; class=&#34;headerlink&#34; title=&#34;Responsive&amp;#x2F;Adaptive&#34;&gt;&lt;/a&gt;Responsive&amp;#x2F;Adaptive&lt;/h3&gt;&lt;p&gt;Even though Ext JS uses a none standard way of rendering controls (see below) they do manage to achieve Adaptive and Responsive designs.&lt;/p&gt;
&lt;h3 id=&#34;Ability-to-Control-DOM-Manipulation&#34;&gt;&lt;a href=&#34;#Ability-to-Control-DOM-Manipulation&#34; class=&#34;headerlink&#34; title=&#34;Ability to Control DOM Manipulation&#34;&gt;&lt;/a&gt;Ability to Control DOM Manipulation&lt;/h3&gt;&lt;p&gt;Finally, if you are having trouble achieving performance with the current way you are rending DOM changes, you will be happy to know that Ext JS does provide a way of turning of rendering to the DOM while you make all the changes and then turning it back on to do the final rendering.  But, at least my last usage of this, indicates that it doesn’t really turn off ALL DOM manipulation.  If you are inserting new DOM elements, those go out to the screen.  All Ext JS really does is to turn off their layout code.&lt;/p&gt;
&lt;h3 id=&#34;Who-Ya-Gonna-Call&#34;&gt;&lt;a href=&#34;#Who-Ya-Gonna-Call&#34; class=&#34;headerlink&#34; title=&#34;Who Ya Gonna Call?&#34;&gt;&lt;/a&gt;Who Ya Gonna Call?&lt;/h3&gt;&lt;p&gt;One of the strongest reasons many organizations choose Ext JS is because the price of the license gives you access to Sencha support.  Companies I’ve worked for have used this for everything from “My code doesn’t work, what am I doing wrong?” and actually getting an answer to “I think you have a bug here.” and getting the bug fixed.  Kind of a private StackOverflow with direct access to the programmers who wrote the framework.&lt;/p&gt;
&lt;h2 id=&#34;Ext-JS-The-Bad&#34;&gt;&lt;a href=&#34;#Ext-JS-The-Bad&#34; class=&#34;headerlink&#34; title=&#34;Ext JS - The Bad&#34;&gt;&lt;/a&gt;Ext JS - The Bad&lt;/h2&gt;&lt;h3 id=&#34;Lock-In&#34;&gt;&lt;a href=&#34;#Lock-In&#34; class=&#34;headerlink&#34; title=&#34;Lock In&#34;&gt;&lt;/a&gt;Lock In&lt;/h3&gt;&lt;p&gt;If you decide to use Ext JS, you are really making a much more significant commitment than if you were choosing to use either Angular or React.  With either of those two, I can write standard JavaScript and I can mix and match several different existing frameworks.  Since just about everything in Ext JS is proprietary, mixing and matching is not only frowned upon, but they warn against it.  If you are using Ext JS, you are going to use ALL of Ext JS for everything.&lt;/p&gt;
&lt;h3 id=&#34;Use-Strict&#34;&gt;&lt;a href=&#34;#Use-Strict&#34; class=&#34;headerlink&#34; title=&#34;Use Strict&#34;&gt;&lt;/a&gt;Use Strict&lt;/h3&gt;&lt;p&gt;Standard JS best practice recommends placing “use strict”; at the top of you IIFE block to protect you from making stupid mistakes.  Unfortunately, you can’t do this in your Ext JS code without having to work around the problems it produces.&lt;/p&gt;
&lt;h3 id=&#34;String-Based&#34;&gt;&lt;a href=&#34;#String-Based&#34; class=&#34;headerlink&#34; title=&#34;String Based&#34;&gt;&lt;/a&gt;String Based&lt;/h3&gt;&lt;p&gt;Ext JS is probably the most string based language I’ve ever seen.  While they now have plugins for some of the more popular IDEs that mitigate against the risk this imposes on your code, in terms of good solid JavaScript, there are much better ways of writing code than what Ext JS forces you into.&lt;/p&gt;
&lt;h3 id=&#34;Nesting-Issues&#34;&gt;&lt;a href=&#34;#Nesting-Issues&#34; class=&#34;headerlink&#34; title=&#34;Nesting Issues&#34;&gt;&lt;/a&gt;Nesting Issues&lt;/h3&gt;&lt;p&gt;As I mentioned above, Ext JS does their own layouts in order to achieve a presentation that will look the same regardless of what browser it is running on.  However, the cost of this is that if you nest components too deeply, rendering your view or changes to your view, will take significantly longer than anyone is willing to wait around for.  So, to get around this, you end up writing sub optimal code from just about every coding principle in existence.  Specifically, DRY and SRP are difficult to achieve using Ext JS views.&lt;/p&gt;
&lt;h3 id=&#34;Version-X-0-0-is-Always-Broken&#34;&gt;&lt;a href=&#34;#Version-X-0-0-is-Always-Broken&#34; class=&#34;headerlink&#34; title=&#34;Version X.0.0 is Always Broken&#34;&gt;&lt;/a&gt;Version X.0.0 is Always Broken&lt;/h3&gt;&lt;p&gt;I’ve complained about this publicly before.  But it seems to me, and everyone else I talk with that has used Ext JS that every .0.0 version is buggy.  Things that used to work in the previous version no longer work.  Despite the assertion from Sencha that they have thousands of tests.  I always wonder what kind of code coverage they have and if they have a test that covers every feature for every component they have documented.&lt;/p&gt;
&lt;h2 id=&#34;Ext-JS-The-Ugly&#34;&gt;&lt;a href=&#34;#Ext-JS-The-Ugly&#34; class=&#34;headerlink&#34; title=&#34;Ext JS - The Ugly&#34;&gt;&lt;/a&gt;Ext JS - The Ugly&lt;/h2&gt;&lt;h3 id=&#34;Ugly-HTML&#34;&gt;&lt;a href=&#34;#Ugly-HTML&#34; class=&#34;headerlink&#34; title=&#34;Ugly HTML&#34;&gt;&lt;/a&gt;Ugly HTML&lt;/h3&gt;&lt;p&gt;There is a lot that is ugly about Ext JS, but nothing is more visibly ugly than the HTML it produces.  This is because, in order to produces a view that will render on any browser, they’ve resorted to using HTML tables to wrap just about every standard control.  This is getting better.  There is less HTML generated in Ext JS 6 than there was in Ext JS 4, but it is still relatively ugly.&lt;/p&gt;
&lt;p&gt;And that whole nesting issue could go away tomorrow if they would give up on trying to control the rendering of the view through JavaScript.  Why do with JavaScript what CSS was designed to do and does MUCH better?!&lt;/p&gt;
&lt;h3 id=&#34;SASS-isn’t-SASS&#34;&gt;&lt;a href=&#34;#SASS-isn’t-SASS&#34; class=&#34;headerlink&#34; title=&#34;SASS isn’t SASS&#34;&gt;&lt;/a&gt;SASS isn’t SASS&lt;/h3&gt;&lt;p&gt;Up until version 6, Sencha’s theming engine used standard SASS.  With version 6, they’ve dumped standard SASS for their own implementation that mostly does what SASS does but has a few embellishments that aren’t all bad, except for the fact that they still kept the SASS extensions for the files and the syntax is mostly the same.&lt;/p&gt;
&lt;h3 id=&#34;None-Standard-JavaScript&#34;&gt;&lt;a href=&#34;#None-Standard-JavaScript&#34; class=&#34;headerlink&#34; title=&#34;None Standard JavaScript&#34;&gt;&lt;/a&gt;None Standard JavaScript&lt;/h3&gt;&lt;p&gt;But of all the issues I have with Ext JS 6, the one that bugs me the most is that their framework provides something that runs on JavaScript but really isn’t JavaScript.  They have their own way of declaring a class.  Their own way of instantiating a class.  Their own requires engine.  Their own bundling and minification engine.&lt;/p&gt;
&lt;p&gt;And since I can’t even use “use strict”; in what they have now – something that has been around long enough that it should be supported by every seriously used framework in existence – it makes me wonder what future embellishments to the JavaScript language we won’t be able to use because Sencha thinks they have a better idea.&lt;/p&gt;
&lt;p&gt;Will I be able to use the “class” keyword in the future instead of Ext.define()?&lt;/p&gt;
&lt;h3 id=&#34;None-Standard-Build-Tools&#34;&gt;&lt;a href=&#34;#None-Standard-Build-Tools&#34; class=&#34;headerlink&#34; title=&#34;None Standard Build Tools&#34;&gt;&lt;/a&gt;None Standard Build Tools&lt;/h3&gt;&lt;p&gt;Not only does Ext JS use none standard JavaScript, but they are using their own proprietary build tools to deploy the final applications.  Along with using their own version of SASS, they also have their own implementation of bundling and minification.  Why not use gulp or grunt and allow us to bundle our apps our way?  Oh, right, they have their own implementation of requires too.  And now they want to sell us proprietary testing tools.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, is Ext JS for you?  That’s a good question.  You’ll need to evaluate if the good parts outweigh the bad parts.  It isn’t like either Angular or React have everything.  There is no perfect choice.  There is the best choice for you and your organization.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
