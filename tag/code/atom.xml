<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://davembush.github.com</id>
    <title>Dave&#39;s Notebook • Posts by &#34;code&#34; tag</title>
    <link href="http://davembush.github.com" />
    <updated>2016-09-20T10:30:00.000Z</updated>
    <category term="project management" />
    <category term="code coverage" />
    <category term="tdd" />
    <category term="unit test" />
    <category term="code" />
    <category term="programming" />
    <category term="angular" />
    <category term="javascript" />
    <category term="performance" />
    <category term="react.js" />
    <category term="agile" />
    <category term="failure" />
    <category term="kanban" />
    <category term="scrum" />
    <category term="interview" />
    <category term="job search" />
    <category term="test driven development" />
    <category term="mvvm" />
    <category term="DRY" />
    <category term="loose coupling" />
    <category term="single responsibility" />
    <category term="c#" />
    <category term="learning" />
    <category term="bug" />
    <category term="ext js" />
    <category term="sencha" />
    <category term="career" />
    <category term="react" />
    <category term="ngrx" />
    <category term="redux" />
    <category term="functional" />
    <category term="reactive" />
    <category term="mvp" />
    <category term="private" />
    <category term="testing" />
    <category term="typescript" />
    <category term="routing" />
    <category term="pointers" />
    <category term="unsafe" />
    <category term="class diagram" />
    <category term="vb.net" />
    <category term="visual studio" />
    <category term="flux" />
    <category term="lazy loading" />
    <category term="scope" />
    <category term="DOM" />
    <category term="ionic" />
    <category term="putty" />
    <category term="ssh" />
    <category term="formgroup" />
    <category term="validation" />
    <category term="angular-cli" />
    <category term="modules" />
    <category term="ngmodule" />
    <category term="observables" />
    <category term="RxJS" />
    <category term="model driven" />
    <category term="reactive forms" />
    <category term="estimating" />
    <category term="story points" />
    <category term="best practices" />
    <category term="design patterns" />
    <category term="architecture" />
    <category term="asp.net" />
    <category term="memory" />
    <category term="angular.js" />
    <category term="iis" />
    <category term="ajax" />
    <category term="json" />
    <category term="controller" />
    <category term="MVC" />
    <category term="view" />
    <category term="404" />
    <category term="application_error" />
    <category term="exceptions" />
    <category term="viewstate" />
    <category term="archietcture" />
    <category term="bll" />
    <category term="dal" />
    <category term="Three Tiered" />
    <category term=".net" />
    <category term="enums" />
    <category term="tutorial" />
    <category term="code quality" />
    <category term="cyclomatic" />
    <category term="halstead" />
    <category term="child component" />
    <category term="CefSharp" />
    <category term="Chromium" />
    <category term="Vista" />
    <category term="VPN" />
    <category term="xp" />
    <category term="get" />
    <category term="properties" />
    <category term="set" />
    <category term="empty" />
    <category term="string" />
    <category term="habits" />
    <category term="application testing" />
    <category term="dependency injection" />
    <category term="debugging" />
    <category term="cms" />
    <category term="dotnetnuke" />
    <category term="WordPress" />
    <category term="authority" />
    <category term="confidence" />
    <category term="datalist" />
    <category term="listview" />
    <category term="comments" />
    <category term="tdd. agile" />
    <category term="bootstrap" />
    <category term="copy &amp;amp; paste" />
    <category term="cross browser" />
    <category term="idisposable" />
    <category term="animation" />
    <category term="css" />
    <category term="html" />
    <category term="debug" />
    <category term="checked" />
    <category term="double" />
    <category term="float" />
    <category term="int" />
    <category term="long" />
    <category term="short" />
    <category term="unchecked" />
    <category term="currency" />
    <category term="decimal" />
    <category term="floating point math" />
    <category term="single" />
    <category term="authentication" />
    <category term="isinrole" />
    <category term="roles" />
    <category term="user" />
    <category term="definition of done" />
    <category term="DoD" />
    <category term="dispose" />
    <category term="finalize" />
    <category term="suppressfinalize" />
    <category term="education" />
    <category term="client side" />
    <category term="development" />
    <category term="class" />
    <category term="dynamic classing" />
    <category term="gridview" />
    <category term="college" />
    <category term="freshman" />
    <category term="babel" />
    <category term="es2015" />
    <category term="es6" />
    <category term="jest" />
    <category term="bdd" />
    <category term="Single Responsibility" />
    <category term="Architecture" />
    <category term="full stack developer" />
    <category term="web development" />
    <category term="formsauthentication" />
    <category term="manual" />
    <category term="redirectfromloginpage" />
    <category term="setauthcookie" />
    <category term="NgRX" />
    <category term="luck" />
    <category term="social skills" />
    <category term="brain" />
    <category term="health" />
    <category term="programmer" />
    <category term="productivity" />
    <category term="QA" />
    <category term="extreme programming" />
    <category term="software" />
    <category term="httpcontext" />
    <category term="items" />
    <category term="session" />
    <category term="naming conventions" />
    <category term="variables" />
    <category term="self improvement" />
    <category term="301" />
    <category term="302" />
    <category term="fiddler" />
    <category term="infinite loop" />
    <category term="images" />
    <category term="iTextSharp" />
    <category term="PDF" />
    <category term="concatenation" />
    <category term="quirks" />
    <category term="parsing" />
    <category term="xhtml" />
    <category term="fonts" />
    <category term="stack" />
    <category term="htmltidy" />
    <category term="tables" />
    <category term="acrofields" />
    <category term="form fields" />
    <category term="outputstream" />
    <category term="pdfreader" />
    <category term="pdfstamper" />
    <category term="bind" />
    <category term="callbacks" />
    <category term="currying" />
    <category term="events" />
    <category term="business rules" />
    <category term="boolean" />
    <category term="fields" />
    <category term="methods" />
    <category term="object" />
    <category term="functions" />
    <category term="inheritance" />
    <category term="prototype" />
    <category term="hoist" />
    <category term="falsy" />
    <category term="truthy" />
    <category term="istanbul" />
    <category term="jasmine" />
    <category term="hoisting" />
    <category term="types" />
    <category term="type conversion" />
    <category term="dialog" />
    <category term="jQuery" />
    <category term="validation controls" />
    <category term="async" />
    <category term="each" />
    <category term="collapse" />
    <category term="expand" />
    <category term="load" />
    <category term="partial content" />
    <category term="tooltip" />
    <category term="regions" />
    <category term="limiting beliefs" />
    <category term="angular material" />
    <category term="linkedin" />
    <category term="social media" />
    <category term="tips" />
    <category term="CI. Continuous Integration" />
    <category term="magic numbers" />
    <category term="magic strings" />
    <category term="flex" />
    <category term="multiview" />
    <category term="wizard" />
    <category term="threading" />
    <category term="intern" />
    <category term="express" />
    <category term="node" />
    <category term="nunit" />
    <category term="object initializers" />
    <category term="video" />
    <category term="reflection" />
    <category term="unity" />
    <category term="best practice" />
    <category term="asp.net postback button" />
    <category term="iText" />
    <category term="property based testing" />
    <category term="cli" />
    <category term="software architecture" />
    <category term="rxjs. angular 2" />
    <category term="redirect" />
    <category term="response" />
    <category term="responsive design" />
    <category term="parallel" />
    <category term="selenium" />
    <category term="Marble Testing" />
    <category term="java" />
    <category term="grid" />
    <category term="hub" />
    <category term="serialization" />
    <category term="specflow" />
    <category term="like" />
    <category term="sql" />
    <category term="tsql" />
    <category term="where clause" />
    <category term="do while" />
    <category term="for next" />
    <category term="ms-sql" />
    <category term="while" />
    <category term="gamification" />
    <category term="paired programming" />
    <category term="reference types" />
    <category term="stringbuilder" />
    <category term="value types" />
    <category term="technical debt" />
    <category term="activetabindex" />
    <category term="postback" />
    <category term="tab control" />
    <category term="tabcontrol" />
    <category term="kata" />
    <category term="extjs" />
    <category term="email" />
    <category term="mailaddress" />
    <category term="mailmessage" />
    <category term="smtpclient" />
    <category term="Quality" />
    <category term="behavior" />
    <category term="psychology" />
    <category term="portal" />
    <category term="web 1.0" />
    <category term="web 2.0" />
    <category term="trace" />
    <category term="compiler" />
    <category term="errror" />
    <category term="warning" />
    <category term="connection string" />
    <category term="dataset" />
    <category term="error" />
    <category term="web.config" />
    <category term="tslint" />
    <category term="emotions" />
    <category term="hiring" />
    <category term="aspnet_regsql" />
    <category term="forms based authentication" />
    <category term="jsdom" />
    <category term="karma" />
    <category term="noTDD" />
    <category term="bundling" />
    <category term="gulp" />
    <category term="minification" />
    <category term="node.js" />
    <category term="file upload" />
    <category term="objects" />
    <category term="hide" />
    <category term="vb.net attributes" />
    <category term="nothing" />
    <category term="nullable" />
    <category term="conditional startup" />
    <category term="windows forms" />
    <category term="winforms" />
    <category term="char" />
    <category term="split" />
    <category term="strict" />
    <category term="clarity" />
    <category term="ui" />
    <category term="ux" />
    <category term="asmx" />
    <category term="error handling" />
    <category term="webservice" />
    <category term="binary" />
    <category term="bitwise" />
    <category term="operators" />
    <category term="automation" />
    <category term="browser" />
    <category term="mstest" />
    <category term="immutable" />
    <category term="global" />
    <category term="await" />
    <category term="webapi" />
    <category term="configuration" />
    <category term="devops" />
    <category term="testcasedata" />
    <category term="testcasesource" />
    <category term="closure" />
    <category term="loops" />
    <category term="certification" />
    <category term="mcsd" />
    <category term="microsoft" />
    <category term="inversion of control" />
    <category term="ioc" />
    <category term="casting" />
    <category term="convert" />
    <category term="arguements" />
    <category term="command line" />
    <category term="main" />
    <category term="yagni" />
    <category term="npm" />
    <category term="nvm" />
    <category term="resumes" />
    <category term="change-detection" />
    <category term="state-management" />
    <category term="web-workers" />
    <category term="libraries" />
    <category term="strong typing" />
    <category term="linting" />
    <category term="constructors" />
    <category term="clean code" />
    <category term="smart-ngrx" />
    <category term="ngrx-store" />
    <category term="ngrx-entity" />
    <category term="ngrx-effects" />
    <category term="TypeScript" />
    <category term="Performance" />
    <entry>
        <id>http://davembush.github.com/8-reasons-johnny-does-not-write-bug-free-code/</id>
        <title>8 Reasons Johnny Does Not Write Bug Free Code</title>
        <link rel="alternate" href="http://davembush.github.com/8-reasons-johnny-does-not-write-bug-free-code/"/>
        <content type="html">&lt;p&gt;There have been a number of things that have occurred over the last week that have prompted this particular post.  And for anyone I work with, this is not an indictment of our work place so much as it is an indictment of our industry.  PLEASE don’t take this personally.&lt;/p&gt;
&lt;p&gt;Some of those reasons will show up in this article.  But the question we need to examine today is why is it so hard to write bug free code.  And I’m not even talking about perfection.  Why is it that we miss the simple stuff?  The stuff that once it is found, we think, “how could we have missed that?!”.  I’m perfectly aware that all code has bugs some just haven’t been found yet.  I’m also aware that no matter how hard I try, the stupid bugs always make their way past my desk.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/09/image-1.png &#34;8 Reasons Johnny Does Not Write Bug Free Code&#34;)&lt;figcaption&gt;Photo credit: [~Pawsitive~Candie_N](//www.flickr.com/photos/scjn/3450910519/) via [Visualhunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;No-Training&#34;&gt;&lt;a href=&#34;#No-Training&#34; class=&#34;headerlink&#34; title=&#34;No Training&#34;&gt;&lt;/a&gt;No Training&lt;/h2&gt;&lt;p&gt;Certainly not the only reason.  But at the same time I think this is a core reason.  Our industry really sucks when it comes to teaching computer science.  So much so, that I’ve written articles about how, for the most part, you don’t need a college education to become a programmer.  Maybe if we taught what programmers don’t already know how to do, a college education would be valuable.&lt;/p&gt;
&lt;p&gt;But what do we do instead?  We teach programmers how to program.&lt;/p&gt;
&lt;p&gt;Dumb! I think back to my education.  Here’s a basic summary of what I learned:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;COBOL, dBase III, JCS, CICS syntax.&lt;/li&gt;
&lt;li&gt;Break your code into functions&lt;/li&gt;
&lt;li&gt;A bit on how to do requirements analysis.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Guess what?  I could have learned all of that on my own.  How do I know that?  Because I had already taught myself, Basic and C before.  I taught myself every language I’ve learned since.  I was already writing structured code, and still do.  And how we gather requirements has changed and somehow I managed to learn that on my own.  Programming is a learning profession.  It is one of the things that makes it attractive to me.&lt;/p&gt;
&lt;p&gt;But what didn’t I learn?  At no point did anyone ever teach me how to break my own code.  And while Test Driven Development wasn’t a thing when I was going to school.  I doubt they are teaching it today.  (Let me know if your school did or is.)&lt;/p&gt;
&lt;h2 id=&#34;Happy-Path-Specs&#34;&gt;&lt;a href=&#34;#Happy-Path-Specs&#34; class=&#34;headerlink&#34; title=&#34;Happy Path Specs&#34;&gt;&lt;/a&gt;Happy Path Specs&lt;/h2&gt;&lt;p&gt;So, the programmers have no training.  But it isn’t just a programmer problem.&lt;/p&gt;
&lt;p&gt;When is the last time you got a specification from whoever creates them in your organization that had any more than a happy path set of requirements?  But, certainly there are things the system should not do.  I recently had to go asking for required fields and maximum field lengths in an application I was working on.  And that’s the simple stuff.&lt;/p&gt;
&lt;h2 id=&#34;Not-My-Job&#34;&gt;&lt;a href=&#34;#Not-My-Job&#34; class=&#34;headerlink&#34; title=&#34;Not My Job&#34;&gt;&lt;/a&gt;Not My Job&lt;/h2&gt;&lt;p&gt;If you have a QA department, you might be tempted to leave testing to QA.  My personal goal is to make sure QA doesn’t find anything.  At least, not something really obvious.&lt;/p&gt;
&lt;p&gt;But I know that some programmers get sloppy about testing their code if they know the safety net of QA exist.&lt;/p&gt;
&lt;p&gt;There is also the problem of QA believing they are the only ones who test.  Strange, but true.  When QA found out I was writing unit test for a pretty complex piece of logic, I was asked, “Then what will be left for me to do?!”  Strange but true.&lt;/p&gt;
&lt;p&gt;But what if we started working as teams?  For example, what if I could get QA to help me develop my test plan?  What if developing software was a WE activity instead of several silo developers each doing their own thing?&lt;/p&gt;
&lt;h2 id=&#34;Batch-Programming&#34;&gt;&lt;a href=&#34;#Batch-Programming&#34; class=&#34;headerlink&#34; title=&#34;Batch Programming&#34;&gt;&lt;/a&gt;Batch Programming&lt;/h2&gt;&lt;p&gt;This is one I really don’t understand.  But I know programmers who will write code for hours prior to running it.  Even if you did remember everything you coded, how can you possibly know where a bug is located if you wait that long?  You should be running your code every time you have something different that can be run so that you know what change caused a problem.  And don’t tell me you test every possible condition.  I know you don’t.&lt;/p&gt;
&lt;p&gt;Programmers who program like this are “Debbie Done” programmers.&lt;/p&gt;
&lt;p&gt;Why “Debbie Done”? There is this story about a programmer who used to work at one of the companies I worked at in the past.  She considered code done if it compiled and linked.&lt;/p&gt;
&lt;p&gt;I’m not as good at testing as I would like (yet) and I’m always embarrassed when someone finds a problem with my code.  So, I was shocked one day when I found out that a project manager wanted to give me some work because my code “always works.”  I knew that wasn’t true.  But when I reflected on what he was saying I realized that the difference in how I code and the other programmers he was comparing me to is that I write for a few minutes and then make sure that works before I continue on.&lt;/p&gt;
&lt;h2 id=&#34;We-Don’t-Plan-to-Test&#34;&gt;&lt;a href=&#34;#We-Don’t-Plan-to-Test&#34; class=&#34;headerlink&#34; title=&#34;We Don’t Plan to Test&#34;&gt;&lt;/a&gt;We Don’t Plan to Test&lt;/h2&gt;&lt;p&gt;Ah.  And here we get a little closer to the truth.&lt;/p&gt;
&lt;p&gt;What do I mean by planning to test? For any spec you are working on, you should have, written out or coded, a repeatable set of steps that ensures that your code does what it should and doesn’t do what it shouldn’t.  This is what test driven development attempts to steer us toward.  I’m not going to go off on a rant about TDD again here.  But I will tell you that either having a written out test plan prior to coding enables me to ensure that my code does what the people who gave me the specification think it should.  It also forces me to think about ways I might break the code.  I know my code is delivered with less bugs because of this process.  Hopefully, I’ll get better at thinking of how to break my own code.&lt;/p&gt;
&lt;p&gt;Having a plan helps with the Debbie Done programmer as well as people who code more like me.&lt;/p&gt;
&lt;p&gt;Even though I code&amp;#x2F;test incrementally, I still only test the code right after I’ve written it.  Once I think it is working, I don’t go back, even though something else I’ve written may have changed how the code is working.  Having repeatable tests has save me several times.&lt;/p&gt;
&lt;h2 id=&#34;We-Don’t-Know-what-we-Don’t-Know&#34;&gt;&lt;a href=&#34;#We-Don’t-Know-what-we-Don’t-Know&#34; class=&#34;headerlink&#34; title=&#34;We Don’t Know what we Don’t Know&#34;&gt;&lt;/a&gt;We Don’t Know what we Don’t Know&lt;/h2&gt;&lt;p&gt;Even if we do everything right, we are still going to miss stuff.  One person can’t possibly figure out all that might go wrong.  It is how we deal with the problems once they are revealed that becomes the issue.  This is where we would, ideally, have the team come up with the test scenarios.&lt;/p&gt;
&lt;h2 id=&#34;Shame-Driven-Development&#34;&gt;&lt;a href=&#34;#Shame-Driven-Development&#34; class=&#34;headerlink&#34; title=&#34;Shame Driven Development&#34;&gt;&lt;/a&gt;Shame Driven Development&lt;/h2&gt;&lt;p&gt;I actually heard a project manager say, “Shame on the developer if QA finds bugs.” Really?!  What about “Shame on the BA for not including that item in the requirements.”?  What about “Shame on the product owner for not mentioning it.”? Or what about no shame at all? While shame is a powerful motivator in the short term, it is a sure way to make sure your developers leave.&lt;/p&gt;
&lt;p&gt;That you only retain highly dysfunctional programmers.  Or that you can only retain programmers who can’t really code.&lt;/p&gt;
&lt;p&gt;Shame based development can only lead to even more bugs.  Not fewer.&lt;/p&gt;
&lt;p&gt;At some point I should probably write about the dangers of a shame based culture.   If your organization is using shame to manage personnel.  Get out!&lt;/p&gt;
&lt;h2 id=&#34;Long-Hours&#34;&gt;&lt;a href=&#34;#Long-Hours&#34; class=&#34;headerlink&#34; title=&#34;Long Hours&#34;&gt;&lt;/a&gt;Long Hours&lt;/h2&gt;&lt;p&gt;Another way you can kill the overall effectiveness of your team is to make sure everyone works more than 45 hours a week for months or years at a time.  One of two things will happen, if not both.&lt;/p&gt;
&lt;p&gt;The code will suffer.  Want to introduce more bugs?  Keep everyone working overtime.  A week here or there is a different story.&lt;/p&gt;
&lt;p&gt;If the code doesn’t suffer, then you are likely to find a lot more socialization, social media activities, and just plain goofing off occurring.  People just can’t work that many hours.  Just because someone is at work for 10 hours doesn’t mean they are working 10 hours.  But hours are easy to measure, so this terrible practice continues.&lt;/p&gt;
&lt;h2 id=&#34;We-Can’t-Fix-Everything&#34;&gt;&lt;a href=&#34;#We-Can’t-Fix-Everything&#34; class=&#34;headerlink&#34; title=&#34;We Can’t Fix Everything&#34;&gt;&lt;/a&gt;We Can’t Fix Everything&lt;/h2&gt;&lt;p&gt;I’m in a unique position in that I’m currently functioning as a Scrum coach.  This allows me to influence all the areas I’ve discussed.  As programmers, you can only influence your own stuff.  So, my recommendation to you is to concentrate on what you have control over.  Create a test plan prior to writing code.  Once you’ve learned how to do that, work on learning how to code those test so you don’t have to run them manually over and over again.  Do this slowly.  Maybe start with just one test.  Squeeze it into the cracks of your regular work.  Learning to test and learning to code test takes time, but it will make you a better programmer and will ultimately make you a more reliable and faster programmer.  Someday you might just hear that they want to give you an important job because “Johnny’s code always works.”&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="code" />
        <category term="agile" />
        <category term="scrum" />
        <category term="bug" />
        <updated>2016-09-20T10:30:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/15-ways-to-write-beautiful-code-that-have-nothing-to-do-with-testing/</id>
        <title>15 Ways To Write Beautiful Code [That Have Nothing To Do With Testing]</title>
        <link rel="alternate" href="http://davembush.github.com/15-ways-to-write-beautiful-code-that-have-nothing-to-do-with-testing/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/08/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;I got a question this last week that I answered very briefly but I felt that to answer it completely would take a blog post.  So here’s the blog post.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Should the author of a piece of code be responsible for more than just unit testing, or does peer review have a play?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Loaded question, right?  Obviously, the guy asking this question believes that an author should both unit test AND have peer review.  And I agree.  But to limit the role of a programmer to even those two things is a very narrow view of programming. Then I got to thinking about it and realized that most of what we’d be trying to accomplish with a code review encompasses everything we’d want to include in a list of things a developer is responsible for.  Further, a code review is mostly a review that ensures that 1) the code does what it is supposed to do, and 2) the code is easy to maintain in the future.&lt;/p&gt;
&lt;p&gt;In other words, all that the word “Peer review” or “Code review” encompasses is largely about code clarity.&lt;/p&gt;
&lt;p&gt;Code clarity addresses the issue we all have when we pick up a new piece of code.  Can you understand it easily?  I just listened to a &lt;a href=&#34;//dotnetrocks.com/default.aspx?showNum=1172&#34;&gt;DotNetRocks episode&lt;/a&gt; that was all about the fact that we spend most of our time reading code and yet no one is talking about how we might do this better.  One way we can read code better is by writing it more clearly in the first place.&lt;/p&gt;
&lt;p&gt;Here are 15 ways you can make your code easier to read:&lt;/p&gt;
&lt;h2 id=&#34;Make-your-code-pretty&#34;&gt;&lt;a href=&#34;#Make-your-code-pretty&#34; class=&#34;headerlink&#34; title=&#34;Make your code pretty&#34;&gt;&lt;/a&gt;Make your code pretty&lt;/h2&gt;&lt;p&gt;I remember back when I was doing Clipper programming, we had one guy who would always show code that was ready to be printed in a text book.  I mean, regardless of what you had to say about what he had actually coded, the visual presentation of the code was a thing of beauty.  He had us believing that all of his code looked like that.  Then he went to work for some other company and we actually looked at the other code he had written.  It looked just like any other code.&lt;/p&gt;
&lt;p&gt;But it taught me a lesson.  A lesson I, unfortunately still need to be reminded of.  Pretty code is easier to maintain and implies a lot about the quality of the code.  Just like you wouldn’t go to an interview without wearing a suit because how you dress implies something about how you’ll program, your code should imply the quality by what it looks like before you ever start reading it.&lt;/p&gt;
&lt;h2 id=&#34;Establish-and-obey-naming-conventions-for-your-code&#34;&gt;&lt;a href=&#34;#Establish-and-obey-naming-conventions-for-your-code&#34; class=&#34;headerlink&#34; title=&#34;Establish and obey naming conventions for your code.&#34;&gt;&lt;/a&gt;Establish and obey naming conventions for your code.&lt;/h2&gt;&lt;p&gt;I’ve written about this before.  Most notably when .NET first came out in the article about &lt;a href=&#34;/hungarian-notation-use-what-works-spit-out-the-bones/&#34;&gt;Hungarian Notation&lt;/a&gt;.  As I point out in that article, not using Hungarian notation doesn’t mean you don’t have any standards.  Sure, you don’t want to prefix all of your integers with a lower case “I”, because you don’t care what kind of number it is.  But it is valuable to prefix a button with “button” so that it is easier to find in your Intellisense, or if you need to search your code for what you named it, it is much easier to find all of the buttons in your code this way.&lt;/p&gt;
&lt;p&gt;But there is another reason to establish and obey naming conventions.  Once you’ve done this, it makes it easier for everyone who is using those common conventions to read your code.&lt;/p&gt;
&lt;p&gt;For example, where I work, we have what I consider a very odd naming convention.  All of our POCO classes (we generate this ourselves because we are using DB2) are all UPPERCASE_UNDERSCORE_SEPARATED.  And all our properties of POCO collections are named UPPERCASE_UNDERSCORE_SEPARATEDs.  It used to drive me crazy, mostly because I use &lt;a href=&#34;/resharper&#34;&gt;ReSharper&lt;/a&gt; religiously and the default rules aren’t setup to handle this odd convention.  But, it is a standard and, I can tell you now, you open a file that is using a POCO and you know you are dealing with a POCO.  No question about it! While I still don’t recommend the practice, I tell you that example because it illustrates how much a coding standard can instantly tell you something about the code you are working on before you ever start reading the code.&lt;/p&gt;
&lt;h2 id=&#34;Establish-and-obey-a-common-architecture&#34;&gt;&lt;a href=&#34;#Establish-and-obey-a-common-architecture&#34; class=&#34;headerlink&#34; title=&#34;Establish and obey a common architecture.&#34;&gt;&lt;/a&gt;Establish and obey a common architecture.&lt;/h2&gt;&lt;p&gt;One of the biggest problems I have in reading other people’s code is if I can’t understand why they put things where they put them.  But having a common architecture that is easy to explain helps alleviate a lot of this problem.  One of the reasons I like working with frameworks is because much of the time these decisions are already made for you.  For example, just having a simple three tiered architecture that separates the View, Business Rules, and Data Access into different parts of your code can go a long way toward making code easy to read.  Within this basic framework you can layer in Model View Presenter, Model View Controller or any other design patterns.  Follow the mantra, “A place for everything and everything in its place” and your code will be much easier to follow.&lt;/p&gt;
&lt;h2 id=&#34;Name-objects-as-nouns-methods-as-verbs&#34;&gt;&lt;a href=&#34;#Name-objects-as-nouns-methods-as-verbs&#34; class=&#34;headerlink&#34; title=&#34;Name objects as nouns, methods as verbs.&#34;&gt;&lt;/a&gt;Name objects as nouns, methods as verbs.&lt;/h2&gt;&lt;p&gt;This is so basic that I almost feel like I should have to write this here.  But I still see the principle violate all of the time.  So, here it is.  Obviously, if you aren’t following an object oriented methodology.  Say you are doing Functional or Procedural programming, you’ll need to adapt this rule to your environment.  But for OOP guys and gals.  Stop breaking this rule.  It is a sign of immaturity.&lt;/p&gt;
&lt;h2 id=&#34;Name-variable-what-they-are&#34;&gt;&lt;a href=&#34;#Name-variable-what-they-are&#34; class=&#34;headerlink&#34; title=&#34;Name variable what they are.&#34;&gt;&lt;/a&gt;Name variable what they are.&lt;/h2&gt;&lt;p&gt;Similarly, stop with the short variable names unless you are using a language that is still so archaic as to require it.  I’ve written about this before.  Twice actually.  &lt;a href=&#34;/tags/naming-conventions/&#34;&gt;With rants about using i, j and k as variable names&lt;/a&gt;.  The point here is that you want to be able to read your code and to do that your code has to tell you something about what you are doing.  Short variable names almost always never assist in code readability.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-include-a-noun-in-your-method&#34;&gt;&lt;a href=&#34;#Don’t-include-a-noun-in-your-method&#34; class=&#34;headerlink&#34; title=&#34;Don’t include a noun in your method.&#34;&gt;&lt;/a&gt;Don’t include a noun in your method.&lt;/h2&gt;&lt;p&gt;This is different from just saying that method should be verbs.  There are a lot of places where I’ve seen code that has a verb AND a noun as a method name.  If you have a method that has both a noun and a verb in it, your class is probably trying to do too much.&lt;/p&gt;
&lt;p&gt;Wouldn’t it look funny if you had a Person class that had a method in it called FirstNameToLower()?&lt;/p&gt;
&lt;h2 id=&#34;Establish-a-cyclomatic-complexity-threshold-for-your-methods-and-obey-them-religiously&#34;&gt;&lt;a href=&#34;#Establish-a-cyclomatic-complexity-threshold-for-your-methods-and-obey-them-religiously&#34; class=&#34;headerlink&#34; title=&#34;Establish a cyclomatic complexity threshold for your methods and obey them religiously.&#34;&gt;&lt;/a&gt;Establish a &lt;a href=&#34;//en.wikipedia.org/wiki/Cyclomatic_complexity&#34;&gt;cyclomatic complexity&lt;/a&gt; threshold for your methods and obey them religiously.&lt;/h2&gt;&lt;p&gt;Cyclomatic complexity takes into account how many statements have to be executed and, most importantly, how many conditionals have to be executed in your code.  The easiest way to reduce cyclomatic complexity is to reduce the number of conditions.  But aside from that, you can make your code much more readable by eliminating nesting where ever possible.&lt;/p&gt;
&lt;p&gt;One of my favorites is instead of writing code that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SomeMethod&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x != y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// do stuff here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can make your code much more readable by writing it like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SomeMethod&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x == y) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;// do stuff here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, instead of nesting when this doesn’t work, as with while statements that contain other while statements, why not create a method for each while statement?&lt;/p&gt;
&lt;h2 id=&#34;Make-code-“self-documenting”&#34;&gt;&lt;a href=&#34;#Make-code-“self-documenting”&#34; class=&#34;headerlink&#34; title=&#34;Make code “self-documenting”&#34;&gt;&lt;/a&gt;Make code “self-documenting”&lt;/h2&gt;&lt;p&gt;That is, if you feel your code needs a comment, you probably have violated one or more of the other readability suggestions.  This is not to say that you should never add comments, but they should not be a replacement for readable code.  I generally leave comments for WHY I did something and leave the WHAT I did to the code.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-add-comments-for-things-that-you-can-deduce-by-reading-the-code&#34;&gt;&lt;a href=&#34;#Don’t-add-comments-for-things-that-you-can-deduce-by-reading-the-code&#34; class=&#34;headerlink&#34; title=&#34;Don’t add comments for things that you can deduce by reading the code.&#34;&gt;&lt;/a&gt;Don’t add comments for things that you can deduce by reading the code.&lt;/h2&gt;&lt;p&gt;“This next line increments loopVar by 1” does no one any good and could eventually end up being litter in your code that makes the code harder to read.  Why?  Because it is possible for loopVar to get renamed, or removed and the comment could stick around forever.  Until we get compilers that verify our comments as well as our executable code, referencing variables in comments is a generally bad practice that should be avoided.&lt;/p&gt;
&lt;h2 id=&#34;Is-the-code-SOLID&#34;&gt;&lt;a href=&#34;#Is-the-code-SOLID&#34; class=&#34;headerlink&#34; title=&#34;Is the code SOLID?&#34;&gt;&lt;/a&gt;Is the code &lt;a href=&#34;/pluralsightSOLID&#34;&gt;SOLID&lt;/a&gt;?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Single Responsibility of classes&lt;/li&gt;
&lt;li&gt;Open&amp;#x2F;Close Principle&lt;/li&gt;
&lt;li&gt;Liskov Substitution Principle&lt;/li&gt;
&lt;li&gt;Interface Segregation Principle&lt;/li&gt;
&lt;li&gt;Dependency Inversion&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Is-the-code-testable&#34;&gt;&lt;a href=&#34;#Is-the-code-testable&#34; class=&#34;headerlink&#34; title=&#34;Is the code testable?&#34;&gt;&lt;/a&gt;Is the code testable?&lt;/h2&gt;&lt;p&gt;If you follow all the rules above, the code should be easy to test.  But, this is something that you should review your code for explicitly.&lt;/p&gt;
&lt;h2 id=&#34;Will-the-code-fail&#34;&gt;&lt;a href=&#34;#Will-the-code-fail&#34; class=&#34;headerlink&#34; title=&#34;Will the code fail?&#34;&gt;&lt;/a&gt;Will the code fail?&lt;/h2&gt;&lt;p&gt;Can anyone write code that uses any particular method that would make the method crash, throw an exception, or otherwise do something that was never intended?&lt;/p&gt;
&lt;h2 id=&#34;Code-duplications&#34;&gt;&lt;a href=&#34;#Code-duplications&#34; class=&#34;headerlink&#34; title=&#34;Code duplications.&#34;&gt;&lt;/a&gt;Code duplications.&lt;/h2&gt;&lt;p&gt;I don’t know about you, but I’m pretty sure I’ve got code that looks practically the same littered throughout my code base.  One of my current goals is to make myself create a new method any time I’m getting ready to copy and paste more than three lines of code.&lt;/p&gt;
&lt;h2 id=&#34;100-Code-Coverage&#34;&gt;&lt;a href=&#34;#100-Code-Coverage&#34; class=&#34;headerlink&#34; title=&#34;100% Code Coverage&#34;&gt;&lt;/a&gt;100% Code Coverage&lt;/h2&gt;&lt;p&gt;Assuming you have unit test, do you have 100% code coverage on all of the methods that have a cyclomatic complexity score greater than 1?  I’m talking about code you’ve written.  I’ve written before about &lt;a href=&#34;/100-code-coverage/&#34;&gt;what code should be tested&lt;/a&gt; and what code doesn’t need to be tested.&lt;/p&gt;
&lt;h2 id=&#34;Learn-the-vocabulary-of-your-language&#34;&gt;&lt;a href=&#34;#Learn-the-vocabulary-of-your-language&#34; class=&#34;headerlink&#34; title=&#34;Learn the vocabulary of your language&#34;&gt;&lt;/a&gt;Learn the vocabulary of your language&lt;/h2&gt;&lt;p&gt;John Sonmez wrote a very compelling article in 2013 about &lt;a href=&#34;//simpleprogrammer.com/2013/04/14/what-makes-code-readable-not-what-you-think/&#34;&gt;what makes code readable&lt;/a&gt;.  In it he says that just like when we learn to read.  Code that is readable by a senior level developer may not be readable by an entry level developer simply because the entry level developer doesn’t have a firm grasp of the language.  Like John, I’ve been criticized for using the ternary operator because it is too terse.  Not descriptive enough.  Un-readable.  And I’ve always responded that arguing that the syntax isn’t clear is like arguing that a sentence isn’t clear because it uses a word you aren’t familiar with.  The word may actually be the perfect word for what the author is trying to communicate.  Your understanding of that word does not make the writing bad.  It just means the reader has some more learning to do.&lt;/p&gt;
</content>
        <category term="code" />
        <category term="programming" />
        <updated>2015-08-06T11:30:00.000Z</updated>
    </entry>
</feed>
