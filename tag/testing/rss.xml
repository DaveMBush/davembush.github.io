<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;testing&#34; tag</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Tue, 23 Jan 2018 06:30:24 -0500</pubDate>
        <lastBuildDate>Tue, 23 Jan 2018 06:30:24 -0500</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/property-based-testing-revealed-a-better-way-to-test/</guid>
            <title>Property Based Testing Revealed - A Better Way to Test</title>
            <link>http://davembush.github.com/property-based-testing-revealed-a-better-way-to-test/</link>
            <category>tdd</category>
            <category>testing</category>
            <category>property based testing</category>
            <pubDate>Tue, 23 Jan 2018 06:30:24 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last couple of weeks, I’ve been experimenting with Property Based Testing.  While I’m probably doing it “wrong” by many definitions, I’m finding it useful enough that I’m adding it to my testing toolbox. &lt;figure&gt;&lt;img src=&#34;/uploads/2018/01/2018-01-23.jpg&#34; title=&#34;Property Based Testing Revealed - A Better Way to Test&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//visualhunt.com/author/0651d3&#34;&gt;abraham.williams&lt;/a&gt; on &lt;a href=&#34;//visualhunt.com/re/284007&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by-sa/2.0/&#34;&gt; CC BY-SA&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;What’s-A-Property&#34;&gt;&lt;a href=&#34;#What’s-A-Property&#34; class=&#34;headerlink&#34; title=&#34;What’s A Property?&#34;&gt;&lt;/a&gt;What’s A Property?&lt;/h2&gt;&lt;p&gt;As you introduce yourself to Property Based Testing, one of the first things you’ll need to understand is what they mean by a “property.”  Most of us who have been doing some form of Object Oriented Programming think of “properties” as data points on an object.  That’s not even close to what the word means when we talk about Property Based Testing. &lt;/p&gt;
&lt;p&gt;Roughly translated, a “property” is some feature of the code under tests.  Most of the beginner literature uses the classic add(a, b) method.  Properties of an add method include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add(a, b) === add(b, a)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;a&lt;/code&gt; is zero then &lt;code&gt;add()&lt;/code&gt; will return the value of &lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add(a, b) - a&lt;/code&gt; will equal b (and similar for minus b equals a).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The key here is that we shouldn’t need to know too much about the data we are sending in to our add method because we are going to send in random data.  So, any property we test needs to be expressed in a data agnostic way.&lt;/p&gt;
&lt;h2 id=&#34;What-are-the-Advantages&#34;&gt;&lt;a href=&#34;#What-are-the-Advantages&#34; class=&#34;headerlink&#34; title=&#34;What are the Advantages?&#34;&gt;&lt;/a&gt;What are the Advantages?&lt;/h2&gt;&lt;p&gt;And while having to think about our test in a data agnostic way is hard, at first, the first advantage is that we start thinking about testing our code in terms of generalities instead of specifics.  And, really, a general test is a much more robust test. &lt;/p&gt;
&lt;p&gt;But, we need data for our tests, right?  Where does that come from?  Depending on the framework you are using, this may vary, but the general idea is that you describe what the data should look like, and the framework will generate random parameters to pass in.  This fact leads us to two more benefits of Property Based Testing. &lt;/p&gt;
&lt;p&gt;First, since all I need to do is describe what the data should look like, I’m not forced to think of the data I want to use to tests my function.  I don’t know about you, but my tendency is to create data that works with my function instead of trying to create data that will break my function.  By having the framework create random data, I’m more likely to test with data that will break my code. &lt;/p&gt;
&lt;p&gt;And that leads to the second benefit of random data.  I’m more likely to find the edge cases for my function under test. Now, one detail I’ve left out is that each test you create gets run multiple times with different random data.  So, it isn’t like one day your tests work great and another day they fail.  No.  The system I use generates 100 different sets of data per tests.  You can have it create more or less tests as needed.&lt;/p&gt;
&lt;h2 id=&#34;Places-You-Might-Not-Use-Property-Based-Testing&#34;&gt;&lt;a href=&#34;#Places-You-Might-Not-Use-Property-Based-Testing&#34; class=&#34;headerlink&#34; title=&#34;Places You Might Not Use Property Based Testing&#34;&gt;&lt;/a&gt;Places You Might Not Use Property Based Testing&lt;/h2&gt;&lt;p&gt;Now, running 100 different permutations on a test that takes a long time to run may not be practical.  My first question would be, why does your code take that long?  Are you trying to unit test HTML code and the rendering is taking a long time?  That’s probably a poor use case. &lt;/p&gt;
&lt;p&gt;Another place where you might want to avoid property based tests is when you’ve already basically tested the component parts and you just need to do a sanity check in the integration of the parts.&lt;/p&gt;
&lt;h2 id=&#34;Places-You-Might-Use-Property-Based-Testing-Anyhow&#34;&gt;&lt;a href=&#34;#Places-You-Might-Use-Property-Based-Testing-Anyhow&#34; class=&#34;headerlink&#34; title=&#34;Places You Might Use Property Based Testing Anyhow&#34;&gt;&lt;/a&gt;Places You Might Use Property Based Testing Anyhow&lt;/h2&gt;&lt;p&gt;On the other hand, not having to come up with my own parameter values makes the whole Property Based Testing pretty attractive, even when it doesn’t make a lot of sense.  And it might encourage you to write smaller functions.&lt;/p&gt;
&lt;h2 id=&#34;Problems-I’ve-Run-Into&#34;&gt;&lt;a href=&#34;#Problems-I’ve-Run-Into&#34; class=&#34;headerlink&#34; title=&#34;Problems I’ve Run Into&#34;&gt;&lt;/a&gt;Problems I’ve Run Into&lt;/h2&gt;&lt;p&gt;I would say the biggest problem I’ve run into using Property Based Testing is learning how to write tests that don’t re-implement the logic in my code in order to test the logic in my code. &lt;/p&gt;
&lt;p&gt;Going back to the &lt;code&gt;add(a, b)&lt;/code&gt; example above.  It is tempting to test that function by verifying that &lt;code&gt;add(a, b) === a + b&lt;/code&gt;.  But that wouldn’t be a very good test because we used the same logic that is probably already being used inside the &lt;code&gt;add()&lt;/code&gt; function.  In example based testing (classic unit testing), we have the same problem, we just don’t use code to implement it.  We add the numbers in our head and verify that &lt;code&gt;add(a, b) = c&lt;/code&gt;.  But, &lt;code&gt;c&lt;/code&gt; is just &lt;code&gt;a + b&lt;/code&gt; done in our head. &lt;/p&gt;
&lt;p&gt;Which leads me back to, even though it is “harder” we end up with better tests.&lt;/p&gt;
&lt;h2 id=&#34;I’m-Probably-Doing-it-Wrong&#34;&gt;&lt;a href=&#34;#I’m-Probably-Doing-it-Wrong&#34; class=&#34;headerlink&#34; title=&#34;I’m Probably Doing it Wrong&#34;&gt;&lt;/a&gt;I’m Probably Doing it Wrong&lt;/h2&gt;&lt;p&gt;I’m so new to this way of thinking, that I’m pretty sure I’m doing everything wrong.  But, I figure I can take advantage of what I understand and as I write more tests, I’ll find more and better ways of writing tests.  I encourage you to pick up a property based framework for your development environment and give it a try.&lt;/p&gt;
&lt;h2 id=&#34;Resources&#34;&gt;&lt;a href=&#34;#Resources&#34; class=&#34;headerlink&#34; title=&#34;Resources:&#34;&gt;&lt;/a&gt;Resources:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//hypothesis.works/articles/what-is-property-based-testing/&#34;&gt;What is Property Based Testing?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//fsharpforfunandprofit.com/posts/property-based-testing/&#34;&gt;An Introduction to Property Based Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/accessing-private-fields-in-typescript/</guid>
            <title>Accessing Private Fields in TypeScript</title>
            <link>http://davembush.github.com/accessing-private-fields-in-typescript/</link>
            <category>private</category>
            <category>testing</category>
            <category>typescript</category>
            <pubDate>Tue, 28 Feb 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Have you ever needed to access a private field in TypeScript? The most common place you may find yourself needing to do this is while writing a unit test. But, I also found myself needing to do this while using a JavaScript library where the field wasn’t declared in the type file for the library I was using.&lt;/p&gt;
&lt;p&gt;Now, suppose you could access those private fields effortlessly and easily. How valuable would that be to you?&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/02/image-3.png &#34;Accessing Private Fields in TypeScript&#34;) Photo via [VisualHunt](//visualhunt.com/)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Unit-Test&#34;&gt;&lt;a href=&#34;#Unit-Test&#34; class=&#34;headerlink&#34; title=&#34;Unit Test&#34;&gt;&lt;/a&gt;Unit Test&lt;/h2&gt;&lt;p&gt;In general, when you write a unit test, you only want to access public fields for both the purposes of setting up your tests and for evaluating the success or failure of the tests.&lt;/p&gt;
&lt;p&gt;But, occasionally, this is not possible.&lt;/p&gt;
&lt;p&gt;Now, what most people don’t realize is that, unlike private members in JavaScript, where the members aren’t accessible, in TypeScript, the resulting JavaScript has the variables just as public as the public members. In fact, the only thing that makes a member private in TypeScript is the compiler. This means that this TypeScript code:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;member1&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Ends up looking something like this in JavaScript&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;member1&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;bar&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Which means that&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; v = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; x = v.&lt;span class=&#34;property&#34;&gt;member1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v.&lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Should be working code.&lt;/p&gt;
&lt;p&gt;But, if you type that code into JavaScript and try to compile it, it won’t compile. Which means you can’t write your unit test in TypeScript and access the private variables.&lt;/p&gt;
&lt;p&gt;Or can you?&lt;/p&gt;
&lt;h2 id=&#34;TypeScript-is-just-JavaScript-with-Sugar&#34;&gt;&lt;a href=&#34;#TypeScript-is-just-JavaScript-with-Sugar&#34; class=&#34;headerlink&#34; title=&#34;TypeScript is just JavaScript with Sugar&#34;&gt;&lt;/a&gt;TypeScript is just JavaScript with Sugar&lt;/h2&gt;&lt;p&gt;One small little fact about TypeScript that we seem to forget is that it is just JavaScript with some sugar. What this means in practical terms is that, if we want to, or in this case, need to, we can write plain old boring JavaScript as part of our TypeScript code. And then the other little bit we tend to forget is that we can access a field using the name of the field as an indexer. That is, this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;v.&lt;span class=&#34;property&#34;&gt;member&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;is functionally the same as this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;v[&lt;span class=&#34;string&#34;&gt;&amp;#x27;member&amp;#x27;&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And because it all compiles down to JavaScript, and the private fields are public JavaScript fields, we can use the named index to access the field.&lt;/p&gt;
&lt;h2 id=&#34;JavaScript-Libraries&#34;&gt;&lt;a href=&#34;#JavaScript-Libraries&#34; class=&#34;headerlink&#34; title=&#34;JavaScript Libraries&#34;&gt;&lt;/a&gt;JavaScript Libraries&lt;/h2&gt;&lt;p&gt;Similarly, this past week I was working on finishing up some Angular 2 code. And one of my tests was failing. Even though the code was working in Chrome fine. The issue was that I was using PhantomJS which doesn’t have the latest JavaScript spec implemented, so it relies on polyfills. One of the polyfills I was using was not compressing the Regular Expressions that I was indirectly using correctly which resulting in the test throwing an exception.&lt;/p&gt;
&lt;p&gt;After tracking down the source of the problem for a day, I finally found a line at the bottom of the GitHub page that told me that I could turn the routine off by calling a function. And here is where the trouble begins.&lt;/p&gt;
&lt;p&gt;You see, I’m using an otherwise documented internal library that has a set of types already defined for it. This particular function is not a part of the types for this class. So, when I tried to call it, I got a compiler error.&lt;/p&gt;
&lt;p&gt;So, I pulled out the named index trick above and got the code to compile and ultimately got my test to run successfully. It all just requires that we think outside the box a bit and most any problem can be solved.&lt;/p&gt;
&lt;h2 id=&#34;Addendum&#34;&gt;&lt;a href=&#34;#Addendum&#34; class=&#34;headerlink&#34; title=&#34;Addendum&#34;&gt;&lt;/a&gt;Addendum&lt;/h2&gt;&lt;p&gt;As TypeScript has matured, the trick above doesn’t work quite as directly as when I originally wrote this article.  Now, you need to assign the original variable to a type of Object before using the indexer method, or you can just cast your variable to an Object and use the indexer.  But typescript is now smart enough to know that the indexer is accessing a property that is private and it won’t let you at it.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/are-you-thinking-clearly-about-your-architectural-choices/</guid>
            <title>Are You Thinking Clearly About Your Architectural Choices?</title>
            <link>http://davembush.github.com/are-you-thinking-clearly-about-your-architectural-choices/</link>
            <category>programming</category>
            <category>testing</category>
            <category>architecture</category>
            <pubDate>Thu, 17 Sep 2015 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Recently someone asked me where the business rules should go in an MVC framework.  The Model or the Controller? This reminded me of a post I wrote when ASP.NET MVC was first released.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/aspnet-mvc-model-bll-or-dal/&#34;&gt;ASP.NET MVC – Model !&amp;#x3D; BLL or DAL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But today I want to cover a broader topic common to everyone, not just programmers.  Not being able to think outside the box.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/09/image2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Here’s-the-deal&#34;&gt;&lt;a href=&#34;#Here’s-the-deal&#34; class=&#34;headerlink&#34; title=&#34;Here’s the deal.&#34;&gt;&lt;/a&gt;Here’s the deal.&lt;/h2&gt;&lt;p&gt;Good salesmen have known for years that the best way to close the sale is to ask the customer to pick between two buying decisions.  You never ask, “So, did you want to buy that today?”  Because almost invariably the customer will say, “No” because the implication is, “Did you want to buy that today, or some other day?”  And “some other day” is always a better option to the customer.  No, the proper way to frame the question is, “So, how did you want to pay for that?  Cash or Credit?” or “Did you want the blue one or the green one?”  By doing this, the customer is no longer even thinking “later” is an option.  The only options he is thinking about are the options he’s been presented with.  This isn’t to say that there isn’t a customer who can fight past this and respond, “No, I was just looking today.”  But the chance of the customer leaving without buying have just been reduced dramatically because two buying choices have been presented.&lt;/p&gt;
&lt;p&gt;So, what does this have to do with programming?  Well, that’s exactly what happens when we’ve been given an architectural framework to program with.&lt;/p&gt;
&lt;p&gt;Someone shows you the MVC pattern and you immediately think that the only places code can live in our application are in the Model, the View, or the Controller.&lt;/p&gt;
&lt;p&gt;Someone shows you the MVP pattern and you think code can only live in the Model, the View or the Presenter.&lt;/p&gt;
&lt;p&gt;Someone shows you the MVVM pattern and we think code only lives in the Model, the View or the ViewModel.&lt;/p&gt;
&lt;p&gt;And so, I ask you. Given any of those three patterns, where do you put your business logic?  And while we are at it, where does your data access logic go?&lt;/p&gt;
&lt;h2 id=&#34;Do-we-place-it-in-the-model&#34;&gt;&lt;a href=&#34;#Do-we-place-it-in-the-model&#34; class=&#34;headerlink&#34; title=&#34;Do we place it in the model?&#34;&gt;&lt;/a&gt;Do we place it in the model?&lt;/h2&gt;&lt;p&gt;Well, what is the model for?  A model is for storing data.  For most of us the data is a record that is displayed on the screen as a series of fields.  But how it gets displayed and what it actually contains doesn’t matter as much as the fact that the model &lt;strong&gt;stores data&lt;/strong&gt;.  Nothing there even hints at executing code.  In fact, I would argue that for most of our applications, the model should be so simple that it doesn’t need to be tested.&lt;/p&gt;
&lt;h2 id=&#34;How-about-the-Controller-or-the-Presenter&#34;&gt;&lt;a href=&#34;#How-about-the-Controller-or-the-Presenter&#34; class=&#34;headerlink&#34; title=&#34;How about the Controller or the Presenter?&#34;&gt;&lt;/a&gt;How about the Controller or the Presenter?&lt;/h2&gt;&lt;p&gt;A controller or presenter sends commands to the model to change its state and sends commands to the view to update the presentation.  Here things get a little confusing.  It sounds like, because the controller is sending commands the the model and the view that it is where the business rules live.&lt;/p&gt;
&lt;p&gt;In fact, when I was first introduced to MVC, this is what I thought was true.  But notice there is nothing in the statement about what a controller does that would indicate that it is anything more than a traffic cop.&lt;/p&gt;
&lt;h2 id=&#34;View-Model&#34;&gt;&lt;a href=&#34;#View-Model&#34; class=&#34;headerlink&#34; title=&#34;View Model?&#34;&gt;&lt;/a&gt;View Model?&lt;/h2&gt;&lt;p&gt;In the MVVM pattern, it becomes even clearer that there is no clear place for business logic because the ViewModel holds the state of the view.  The presenter or controller part is handled by a binder that is typically part of the framework you are using, as with KnockOut.&lt;/p&gt;
&lt;h2 id=&#34;Thinking-outside-the-box&#34;&gt;&lt;a href=&#34;#Thinking-outside-the-box&#34; class=&#34;headerlink&#34; title=&#34;Thinking outside the box&#34;&gt;&lt;/a&gt;Thinking outside the box&lt;/h2&gt;&lt;p&gt;Now that we’ve demonstrated that none of these frameworks explicitly state where the business logic should go, where should we put it? In my case, what I’ve started doing is that I’ve created a service layer, or a business rules layer.  It handles the processing of the logic to get the rest of the code working.  The classes in this layer can either be passed the model or viewmodel in which they can change the state directly, or they can return data that the controller can distribute as needed.  In my most recent application I selected the pass the model in approach.  The result was code that was much more testable than what I had started with, which is the whole point of placing the business rules outside of the pattern to begin with.  &lt;/p&gt;
&lt;h3 id=&#34;Resources&#34;&gt;&lt;a href=&#34;#Resources&#34; class=&#34;headerlink&#34; title=&#34;Resources&#34;&gt;&lt;/a&gt;Resources&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&#34;&gt;Model View Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&#34;&gt;Model View Presenter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//en.wikipedia.org/wiki/Model_View_ViewModel&#34;&gt;Model View ViewModel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/the-fallacy-of-motion/</guid>
            <title>The Fallacy of Motion</title>
            <link>http://davembush.github.com/the-fallacy-of-motion/</link>
            <category>tdd</category>
            <category>testing</category>
            <category>productivity</category>
            <pubDate>Thu, 23 Jul 2015 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/07/image1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;I had this thought this past week that we tend to believe that if we are in motion, we are accomplishing something.  That being busy somehow equals being productive.  And then I started thinking about how this is almost universal.  It doesn’t just impact how we program, which I’ll get to eventually, but it impacts all of our life.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Let-Me-Illustrate&#34;&gt;&lt;a href=&#34;#Let-Me-Illustrate&#34; class=&#34;headerlink&#34; title=&#34;Let Me Illustrate&#34;&gt;&lt;/a&gt;Let Me Illustrate&lt;/h2&gt;&lt;p&gt;Have you ever driven to some location and had your favorite GPS system route you multiple ways?  How many of you take the route that is, according to your GPS, longer, just because the roads are 65mph instead of 45mph?  Or an even better example.  You hit a traffic jam and, even though ever indication is that you’ll be out of the traffic in a few minutes, you take an alternate route simply because the traffic is moving on that other road.  In both cases you probably know that you won’t get to your destination any faster, in fact you may get to your destination slower, but you still opt to take the moving route instead of the one that isn’t moving or is moving relatively slowly.  I’ve even heard people say… shoot I’ve even said… “I want to take this route because it moves faster.”  I like FEELING like I’m getting to my destination faster even if the reality is that I’m not.&lt;/p&gt;
&lt;p&gt;And then there is the issue of your job.  How many of you have to look busy for your peers to think that you ARE busy?  But as programmers, how true is that?  Unless you do some kind of unskilled labor, I doubt it is true of most people who work.  And yet, because we are all paid by the hour (yes, even those of you who are salaried are still trading hours for dollars) there is a perception that, somehow, if we are not in motion, we are not really working.  But is that true? I remember hearing a story about a programmer who spent half his day “staring at the ceiling” who was twice as productive as any of his peers.  Why is that?  Because he spent half his day thinking about the problem before he ever started writing a line of code.&lt;/p&gt;
&lt;p&gt;I remember back in the day when I was coding on 8088 computers, a compile and link cycle could take up to 10 minutes.  Because I recompile and test every time I’m made a runnable change, I had a lot of 10 minute breaks.  I used this time to think about the problem I was working on.  This was not intentional, it just happened naturally.  I think it made me more productive than if I were just churning code all day long at the speed our computers work today.&lt;/p&gt;
&lt;p&gt;And then there is this side project I’m working on.  I tend to work on it a half hour at a time as I have time.  Between my main gig that takes up 40 hours a week, and some side gigs that I have, I have a very small amount of time to work on this project.  Some days I don’t work on it simply because I’m too tired.  But sometimes, even when I’m not sitting in front of my computer, I’ll sit on my sofa doing nothing and think about the project.  It is in those times that I figure out where I want to take the project next, or how to solve a problem I’ve run into.  That time thinking, even though there is no motion, has made the resulting code that much better.&lt;/p&gt;
&lt;h2 id=&#34;The-Fallacy-of-Motion-and-Testing&#34;&gt;&lt;a href=&#34;#The-Fallacy-of-Motion-and-Testing&#34; class=&#34;headerlink&#34; title=&#34;The Fallacy of Motion and Testing&#34;&gt;&lt;/a&gt;The Fallacy of Motion and Testing&lt;/h2&gt;&lt;p&gt;I’m sure you saw this coming, but one has to ask, is it the fallacy of motion that prevents us from testing our code? At my main gig, I have to admit, I’m bored.  There are a lot of reasons for this.  But one of them is that I spend a lot of time waiting for integrations tests to run to verify that my code is still working.  To be clear, I have way more unit test than integration test at this point.  But with the changes I’m currently making to the system, I’m more likely to find issues via the integration tests than I am from the unit tests.&lt;/p&gt;
&lt;p&gt;Compare this to a project I’m working on for another client where I’m primarily writing new code.  I’m a lot less bored.  The day zips by.  I FEEL more productive.&lt;/p&gt;
&lt;p&gt;And yet, the degree of certainty I have that the code I wrote for my main gig works as I designed it to work is a lot higher than the code I’m currently writing because I have more tests.&lt;/p&gt;
&lt;p&gt;This past week those tests actually showed me that my change wasn’t working entirely the way I wanted it to.  I probably would not have found it any other way.  I’m not even sure the people testing my code would have found it.  They aren’t those kind of testers.  And so I’ve proven to myself one more time that testing, while it feels slower, really is not just the right thing to do, but ultimately the faster thing to do.&lt;/p&gt;
&lt;p&gt;Think about what would have happened if I didn’t have these tests in place.  I would have released the code, eventually the bug would have revealed itself, and I would be left scrambling to fix the bug.  As it is, I was able to fix the bug in a somewhat leisurely manner because I found it early.&lt;/p&gt;
&lt;p&gt;And yet, I don’t FEEL productive.  As much as I’m convinced that Test Driven Development is the right way to go, I still struggle with this Fallacy of Motion.&lt;/p&gt;
&lt;h2 id=&#34;We-Don’t-Have-Time-to-Test&#34;&gt;&lt;a href=&#34;#We-Don’t-Have-Time-to-Test&#34; class=&#34;headerlink&#34; title=&#34;We Don’t Have Time to Test&#34;&gt;&lt;/a&gt;We Don’t Have Time to Test&lt;/h2&gt;&lt;p&gt;I heard this again this past week.  “When you are working on a project with a tight deadline, you can’t always test because you don’t have enough time.” What?! Is this the Fallacy of Motion at work again? I would argue that it is precisely BECAUSE you are working under a tight deadline that you NEED to write test.&lt;/p&gt;
&lt;p&gt;Think about this, you have this tight deadline.  Great.  So you are not going to think clearly.  You are going to rush.  You will write incomplete code.  Your methods won’t verify input parameters.  You’ll have null pointer exceptions.  Your code will do what it is supposed to do, but will it not do what it shouldn’t do?  How will you know?  And who is going to catch the bug? Well we know the answer to that last question.  The people using your code will catch the bug.  This will make you look like an idiot.  You are because it is something that should have been caught.  It will also mean that you’ll need to track down the problem, fix the problem, and re-deploy the software.  And this is faster?  Faster than what?! Of course, “We don’t have time to do it right, but we always have time to do it over.”&lt;/p&gt;
&lt;h2 id=&#34;Slow-and-Steady&#34;&gt;&lt;a href=&#34;#Slow-and-Steady&#34; class=&#34;headerlink&#34; title=&#34;Slow and Steady&#34;&gt;&lt;/a&gt;Slow and Steady&lt;/h2&gt;&lt;p&gt;So, slow down.  Do things right.  Remember the story of the tortoise and the hare.  The race doesn’t always go to the fastest but the one who is steady and persistent.  The one who doesn’t cut corners.  The one who consistently produces solid code.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/what-browser-is-selenium-currently-running/</guid>
            <title>What Browser Is Selenium Currently Running</title>
            <link>http://davembush.github.com/what-browser-is-selenium-currently-running/</link>
            <category>c#</category>
            <category>testing</category>
            <category>selenium</category>
            <category>automation</category>
            <category>browser</category>
            <pubDate>Thu, 16 Jul 2015 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/07/ppl-kid-044.jpg&#34; alt=&#34;ppl-kid-044&#34; title=&#34;ppl-kid-044&#34;&gt;&lt;/p&gt;
&lt;p&gt;This probably doesn’t happen all that often, but this last week I came across the need to know which browser I was running my selenium test against.  I figured that buried deep in the object structure of Selenium, there MUST be a way of finding out what browser I was currently running.  As it turns out, I was right.  The situation that caused this requirement is that the place where I’m currently writing most of my code is upgrading all the Firefox browsers.  I was asked to make sure the code we were running still works with the new browser.  When I did, I found that some of my tests broke even though the test itself still succeeds when it is run manually.  In fact, they only broke when running against this new version of Firefox.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Now to be clear, this isn’t really a Firefox problem.  In fact, the new version of Firefox runs my test the way I would expect.  It is the current version of IE and the older version of Firefox that we were running in combination with EXTjs 4.2 that was a problem.  So, now I’m in a situation where I need to run my work around for everything except for this new version of Firefox.&lt;/p&gt;
&lt;p&gt;You see, we have several dropdown list.  To select an item from the list, I cursor down until the correct item is found.  My old implementation actually needed to cursor down twice.  The first time made the list display and kept the current item selected.  The second down arrow selected the next item.  The tab key keeps that item as the selected one.  The new version of Firefox only requires one down arrow and a tab to do the same thing.&lt;/p&gt;
&lt;p&gt;Since we have multiple dropdowns that behave the same way, I made this code an extension method, so I only have to do it once.  The other thing I’m doing that makes this work is that I’m proxying the elements using the FindsBy attribute.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;FindsBy(How = How.Id, Using = &lt;span class=&#34;string&#34;&gt;&amp;quot;someIdHere&amp;quot;&lt;/span&gt;), CacheLookup&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; IWebElement SomePropertyName&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;; [UsedImplicitly] &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Under the hood this creates a proxy to the real element.  What we need access to is the Driver object that this element is using to get at the element on the browser.  I do that by going after the element’s WrappedDriver property.  In most code you’ll see this cast to an IWrapsDriver interface.  But it is actually pointing to a RemoteWebDriver object.  If we cast the type to that, we can then go after the Capabilities object which will give us access to the BrowserName. And so, my resulting code looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; keyDown = Keys.Down + Keys.Down;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; wrapsDriver = ((IWrapsDriver)(element)).WrappedDriver;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (wrapsDriver != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (wrapsDriver.GetType() == &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt;(RemoteWebDriver) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ((RemoteWebDriver)wrapsDriver)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .Capabilities.BrowserName ==  &lt;span class=&#34;string&#34;&gt;&amp;quot;firefox&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        keyDown = Keys.Down;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Which allows me to use the keyDown variable where ever I need to key down to select an item from the list.&lt;/p&gt;
&lt;p&gt;The element variable above represents the proxy element created by the FindsBy attribute.  The code is in the extension method that I mentioned previously, so it is actually the parameter that got passed into the extension method.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/setting-up-specflow/</guid>
            <title>Setting up SpecFlow</title>
            <link>http://davembush.github.com/setting-up-specflow/</link>
            <category>tdd</category>
            <category>testing</category>
            <category>bdd</category>
            <category>specflow</category>
            <pubDate>Thu, 21 May 2015 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve been asked to train a group of developers in the use of &lt;a href=&#34;//www.specflow.org/&#34;&gt;SpecFlow&lt;/a&gt; so that they can use it to write Selenium Tests.  So, in an attempt to “kill two birds with one stone” I thought today’s post would cover how to get the SpecFlow environment setup.  Not only will it help me prepare for the training session I will be leading, but it will help me when I need to set this up the next time because it tends to be a bit confusing when you setup a new project.  You’ll see why in a bit.&lt;/p&gt;
&lt;h2 id=&#34;Installing-SpecFlow&#34;&gt;&lt;a href=&#34;#Installing-SpecFlow&#34; class=&#34;headerlink&#34; title=&#34;Installing SpecFlow&#34;&gt;&lt;/a&gt;Installing SpecFlow&lt;/h2&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;The first thing you’ll want to do is to install the SpecFlow Visual Studio integration.  You do this by navigating to “Tools” –&amp;gt; “Extension and Updates …” &lt;img src=&#34;/uploads/2015/05/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt; This will bring up a dialog box where you’ll want to select the “Online” branch &lt;img src=&#34;/uploads/2015/05/image1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt; You will notice in the upper right corner of this dialog, a search box.  Type in “SpecFlow” to find the SpecFlow extensions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt; In the image above, I’ve already installed it, so there is a check box.  You’ll want to click the “Download” or “Install” button that displays when it isn’t installed.&lt;/p&gt;
&lt;h2 id=&#34;Creating-a-Test-Project&#34;&gt;&lt;a href=&#34;#Creating-a-Test-Project&#34; class=&#34;headerlink&#34; title=&#34;Creating a Test Project&#34;&gt;&lt;/a&gt;Creating a Test Project&lt;/h2&gt;&lt;p&gt;Now that you’ve installed the extension, you can create a new test project.  You might expect a SpecFlow template to appear somewhere in the project list.  Sorry, that’s not what you get.  You could create one yourself if you really wanted.  To create a SpecFlow project, all you really need to do is to create a Class Library project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image3.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Adding-a-Reference&#34;&gt;&lt;a href=&#34;#Adding-a-Reference&#34; class=&#34;headerlink&#34; title=&#34;Adding a Reference&#34;&gt;&lt;/a&gt;Adding a Reference&lt;/h2&gt;&lt;p&gt;And now, this is where I always get tripped up for a minute.  You can create a new feature file, but there is a menu item you should see that will allow you to add feature steps to a class file and you won’t see that until you add a reference to SpecFlow.  To do that, you will need to go back to NuGet.  This time use the menu option, “Tools” –&amp;gt; “NuGet Package Manager” –&amp;gt; “Manage NuGet Packages for Solution…”&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image4.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once again a dialog will display.  Make sure you are in the “Online” branch on the left and type “SpecFlow” into the search area in the upper right corner of the dialog.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image5.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;I always use SpecFlow with NUnit, if you install SpecFlow.NUnit it will automatically install the SpecFlow dependencies with it.  If you prefer to use xUnit, you can install that and the SpecFlow dependencies will install automatically.&lt;/p&gt;
&lt;h2 id=&#34;Create-Your-First-Feature-File&#34;&gt;&lt;a href=&#34;#Create-Your-First-Feature-File&#34; class=&#34;headerlink&#34; title=&#34;Create Your First Feature File&#34;&gt;&lt;/a&gt;Create Your First Feature File&lt;/h2&gt;&lt;p&gt;Now that you have the environment setup, you can actually use SpecFlow.  To create your first feature file, you can right click on the project and select “Add” –&amp;gt; “New Item…” from the context menu.  Just like you would add a new file to the project any other time.  From the resulting dialog, select “SpecFlow Feature File”, give it an appropriate file name, and click the “Add” button.  When I name my SpecFlow feature files, I try to name them similar to the feature it will be testing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image6.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;The resulting feature file will have a sample of how your feature will be setup.  You will want to change this to test whatever it is you are testing.  The next thing you will want to do is to create a Step Definition file.  This is a regular C# file with a Binding attribute added.  The file that SpecFlow will generate for you will match the template they provided in the feature file.  What I want you to do next is the delete all of the methods in the class so that I can show you how to add additional methods.  I’m not going to go to the trouble of showing you the screen shots.  I figure you know how to get to it and the image above shows it listed in the “Add File” dialog.&lt;/p&gt;
&lt;p&gt;Next, go back to your feature file and right click on the provided “Given” line, you should see a menu option that says, “Generate Step Definitions”&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image7.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you click this, you’ll get a dialog like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image8.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;A couple of things you should notice.  One is the name of the class you are going to create if you click the “Generate” button.  I would advise against using the generate button.  Instead, we are going to use the “Copy methods to clipboard” method.  If you want to try to keep things segmented, you might choose to copy some of the steps to the clipboard and paste them into one file and copy others and paste them into another file.  This list will only list steps that you don’t already have definitions for, so you don’t need to worry about producing duplicate definitions.&lt;/p&gt;
&lt;p&gt;If you copy the methods onto the clipboard and paste them into the step file, you should end up with code that is functionally equivalent to what the new file template created for you.&lt;/p&gt;
&lt;h2 id=&#34;Just-A-Start&#34;&gt;&lt;a href=&#34;#Just-A-Start&#34; class=&#34;headerlink&#34; title=&#34;Just A Start&#34;&gt;&lt;/a&gt;Just A Start&lt;/h2&gt;&lt;p&gt;This is enough to get you setup, but there is more to cover, so make sure you subscribe to the mailing list to get notified when I post another article about SpecFlow.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/run-nunit-from-visual-studio/</guid>
            <title>Run NUnit from Visual Studio</title>
            <link>http://davembush.github.com/run-nunit-from-visual-studio/</link>
            <category>testing</category>
            <category>debugging</category>
            <category>nunit</category>
            <pubDate>Thu, 30 Apr 2015 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;For the purposes of this post, I’m going to assume that you already have the NUnit Test Runner installed.  The question you are looking to get answered is, “How do I run NUnit from Visual Studio” or even more importantly, “How do I DEBUG NUnit test from Visual Studio”.  The following step by step should help you.&lt;/p&gt;
&lt;p&gt;Right click on the project in Solution Explorer that represents your test project.&lt;/p&gt;
&lt;p&gt;From the resulting menu, select “Properties.” In the resulting window, select the “Debug” tab from the left-hand side of the window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/04/Properties_Debug.png&#34; alt=&#34;Properties_Debug&#34; title=&#34;Properties_Debug&#34;&gt;&lt;/p&gt;
&lt;p&gt;You will want to select “Start external program” and point it to the UNnit runner that got installed when you installed NUnit.&lt;/p&gt;
&lt;p&gt;Now, whenever you run this project, with or without the debugger, NUnit will start up.&lt;/p&gt;
&lt;p&gt;Note: there is no reason to pass parameters telling it what DLL you want to run because it will load the last DLL it had up.&lt;/p&gt;
&lt;p&gt;But, if you wanted to do that, you could pass the location of the DLL as a parameter to the GUI runner.&lt;/p&gt;
&lt;p&gt;There are other parameters you can use.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Check the documentation for the version of NUnit you are using for the specifics.&lt;/p&gt;
&lt;p&gt;If you are running .NET 4.x, you’ll want to go to the location in your file system where NUnit.exe lives and find the NUnit.exe.config file.&lt;/p&gt;
&lt;p&gt;Find the startup element (&lt;code&gt;&amp;lt;startup&amp;gt; .... &amp;lt;/startup&amp;gt;&lt;/code&gt;) and place this line in between the open and close startup tags:&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;supportedRuntime&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;version&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;4.0&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you miss this step, you won’t be able to debug your 4.0 code. Alternatively, you can just set your project to use .NET 3.5. So, let’s give it a try. First, put some code in the test method you just created. For our purposes, we’ll just put in a console writeline so we have somplace to put a breakpoint.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyFirstTestMethod&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;Inside MyFirstTestMethod&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next set a breakpoint on the &lt;code&gt;Console.WriteLine&lt;/code&gt; method and then run your project with the debugger.&lt;/p&gt;
&lt;p&gt;Once NUnit loads the DLL, click the “Run” button in NUnit.&lt;/p&gt;
&lt;p&gt;If everything is setup correctly, you should stop on the breakpoint you set.&lt;/p&gt;
&lt;p&gt;You may have noticed that we put several &lt;code&gt;Console.WriteLines()&lt;/code&gt; in our code but they aren’t displaying anywhere.  So, where did they go?  How can we see them? By default the “Text Output” tab displays all of the &lt;code&gt;Console.WriteLine()&lt;/code&gt; messages as well as all of the test results.  If all you care to see is the test results, you should select the “Errors and Failures” tab.  Personally, I prefer to work in the “Text Output” tab and I suggest that you do the same.&lt;/p&gt;
&lt;p&gt;As an alternative to this, you can just pick up a copy of ReSharper, which has an NUnit Test Runner built into it.  All you need to do to debug a test is selection the test and choose debug from the context menu.  It will save you a ton of time.&lt;/p&gt;
&lt;p&gt;Another option would be to pick up the MS Test Adapter from nunit.org.  But, I’ve never liked the way MS Test renders the tests results.  So, I don’t recommend it.  Obviously, your mileage may vary.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/dependency-injection-frameworks-are-not-dependency-injection/</guid>
            <title>Dependency Injection Frameworks Are NOT Dependency Injection</title>
            <link>http://davembush.github.com/dependency-injection-frameworks-are-not-dependency-injection/</link>
            <category>tdd</category>
            <category>test driven development</category>
            <category>testing</category>
            <category>dependency injection</category>
            <pubDate>Thu, 12 Mar 2015 07:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/02/land-0148.jpg&#34; alt=&#34;land-0148&#34; title=&#34;land-0148&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you start your journey down the road of Unit Testing you will discover that part of what makes code testable is this concept of &lt;a href=&#34;//en.wikipedia.org/wiki/Dependency_injection&#34; title=&#34;Dependency injection&#34;&gt;Dependency Injection&lt;/a&gt;.  As you explore further, you will see people mentioning various Dependency Injection frameworks.&lt;/p&gt;
&lt;p&gt;You may naturally assume that to implement Dependency Injection, you will need to select an use a Dependency Injection framework.&lt;/p&gt;
&lt;p&gt;But, Dependency Injection has nothing to do with using a Dependency Injection framework.  The frameworks are there because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; much of our existing code is code that has too many dependencies and the framework helps us break those dependencies without having to refactor too much of our code and&lt;/li&gt;
&lt;li&gt;to give us a way to easily swap out one object for another when our code is structured in such a way as to not have dependencies at all.&lt;/li&gt;
&lt;/ol&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;So-what-then-is-Dependency-Injection&#34;&gt;&lt;a href=&#34;#So-what-then-is-Dependency-Injection&#34; class=&#34;headerlink&#34; title=&#34;So, what then is Dependency Injection?&#34;&gt;&lt;/a&gt;So, what then is Dependency Injection?&lt;/h2&gt;&lt;p&gt;I once heard this maxim that explains it best,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Classes should either create stuff, or do stuff, but no one class should do both.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Much of our code looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ReceiveSAMLResponse&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; SAMLResponse samlResponse,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; String relayState&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Receive the [SAML](//en.wikipedia.org/wiki/Security_Assertion_Markup_Language &amp;quot;Security Assertion Markup Language&amp;quot;) response over the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//specified binding.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlElement samlResponseXml;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ServiceProvider.ReceiveSAMLResponseByHTTPPost(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        HttpContext.Current.Request,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; samlResponseXml, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; relayState);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SAMLResponse resp = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SAMLResponse(samlResponseXml);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlElement samlAssertionElement =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        resp.GetSignedAssertions()[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Verify the response&amp;#x27;s signature.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlDocument doc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; XmlDocument();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//metadata file path (holds the description key).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    doc.Load(HttpContext.Current.Server.MapPath(&lt;span class=&#34;string&#34;&gt;&amp;quot;~/SAML.xml&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlElement root = doc.DocumentElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!SAMLAssertionSignature.Verify(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        samlAssertionElement, ReadMetadata(root)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        samlResponse = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        relayState = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Deserialize the XML.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    samlResponse = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SAMLResponse(samlResponseXml);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Yes, this is real code from a system I worked on.  The original code was written three or four years ago and this specific code is code I was given by another company.  I just used copy and paste inheritance to get it working in our code.&lt;/p&gt;
&lt;p&gt;That’s not to say I haven’t written code that has just as many problems.&lt;/p&gt;
&lt;p&gt;There are several things that are wrong with this code, but for now all I want to focus on is the Dependency Injection issue.&lt;/p&gt;
&lt;p&gt;All this code is trying to do is to deserialize the encrypted samlResponse object that was posted to the login form.  At least this code isn’t in the login form!  It has that much going for it.&lt;/p&gt;
&lt;h2 id=&#34;But-here-are-places-where-it-is-dependent-on-too-much&#34;&gt;&lt;a href=&#34;#But-here-are-places-where-it-is-dependent-on-too-much&#34; class=&#34;headerlink&#34; title=&#34;But here are places where it is dependent on too much:&#34;&gt;&lt;/a&gt;But here are places where it is dependent on too much:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ServiceProvider is a static class and called directly.&lt;/li&gt;
&lt;li&gt;ReceiveSAMLResponseByHTTPPost is dependent on the Request object that we retrieve from HttpContext.&lt;/li&gt;
&lt;li&gt;I create a new SAMLResponse object right before I call GetSignedAssertions()&lt;/li&gt;
&lt;li&gt;I create a new XmlDocument object so I can load the SAML.xml file&lt;/li&gt;
&lt;li&gt;SAMLAssertionSignature is static and called directly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In fact, this method is one huge dependency mess.  And I’m very aware of the mess that it is in because the company we wrote this code for just recently switched providers.  As we tried to get this working, I had no way of testing this code in isolation without adding code directly into this method.  We got it working, but it didn’t have to be that hard.&lt;/p&gt;
&lt;h2 id=&#34;So-here’s-what-I’d-do-to-this-code&#34;&gt;&lt;a href=&#34;#So-here’s-what-I’d-do-to-this-code&#34; class=&#34;headerlink&#34; title=&#34;So, here’s what I’d do to this code.&#34;&gt;&lt;/a&gt;So, here’s what I’d do to this code.&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Since ServiceProvider and SAMLAssertionSignature are calls to a third party API, I would wrap them in a none static class that I can instantiate.&lt;/li&gt;
&lt;li&gt;I would have the class that ultimately calls this method either pass in the dependent objects to the constructor, pass them in to the method that calls this, or set properties in the class.  This is what it means to inject dependencies.&lt;/li&gt;
&lt;li&gt;I would look for some way to avoid creating a new SAMLResponse object.  I’m not looking at the API documentation, but it would be great if I could new up the object and call a method, or set a property to give it the samlResponseXml variable.  If I had to, I’d probably wrap SAMLResponse in another class so that I could gain this functionality.&lt;/li&gt;
&lt;li&gt;Finally, I would make each of the dependent object based on an interface so that I could swap them out.  In the case of some of these classes, I may need to wrap them in another class that I have control over so that I can implement an interface.  For example, as things stand, I would not be able to create a fake request object because Request is a system class that does not implement an interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Advantages&#34;&gt;&lt;a href=&#34;#Advantages&#34; class=&#34;headerlink&#34; title=&#34;Advantages&#34;&gt;&lt;/a&gt;Advantages&lt;/h2&gt;&lt;p&gt;After making all of these changes, I would be able to create a test harness for this code, create fake versions of the objects, and verify that this method does what we intend for it do.&lt;/p&gt;
&lt;p&gt;Where this would have been particularly helpful is over this last week when we were trying to get this all working with the new provider.  In that case, I could have faked out the request object with what they were sending us and run it through a debugger to figure out what wasn’t quite right.&lt;/p&gt;
&lt;h2 id=&#34;No-Dependency-Injection-Framework&#34;&gt;&lt;a href=&#34;#No-Dependency-Injection-Framework&#34; class=&#34;headerlink&#34; title=&#34;No Dependency Injection Framework&#34;&gt;&lt;/a&gt;No Dependency Injection Framework&lt;/h2&gt;&lt;p&gt;Finally, you’ll notice that no where in this code did I have to use a Dependency Injection framework to get this all working.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/why-johnny-can-t-do-test-driven-development/</guid>
            <title>Why Johnny Can&#39;t do Test Driven Development</title>
            <link>http://davembush.github.com/why-johnny-can-t-do-test-driven-development/</link>
            <category>tdd</category>
            <category>test driven development</category>
            <category>testing</category>
            <category>bdd</category>
            <pubDate>Thu, 05 Mar 2015 07:00:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/02/ppl-kid-05.jpg&#34; alt=&#34;ppl-kid-05&#34; title=&#34;ppl-kid-05&#34;&gt;&lt;/p&gt;
&lt;p&gt;Last week we looked at a few excuses developers give for not testing their code as they develop it (&lt;a href=&#34;/excuses-for-not-testing/&#34;&gt;Excuses For Not Testing&lt;/a&gt;).  We finished that by mentioning that most of the code you write simply isn’t testable.  You can’t practice Test Driven Development on something that isn’t testable in the first place. And there, folks, is why Johnny can’t test.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;But-it’s-not-Johnny’s-fault&#34;&gt;&lt;a href=&#34;#But-it’s-not-Johnny’s-fault&#34; class=&#34;headerlink&#34; title=&#34;But, it’s not Johnny’s fault.&#34;&gt;&lt;/a&gt;But, it’s not Johnny’s fault.&lt;/h2&gt;&lt;p&gt;Think about what makes code testable.  At it’s core, testable code is loosely coupled.  But what do we mean by “loosely coupled”? Well, let’s start with the large picture.  Assuming you have a multi-layered architecture.  That is, you have your code broken out into View, Business Rules, and Data Access.  Raise your hand if your business rules access your view directly.  Would you be able to test your business rules without your view? At a finer level of detail.  How much of your code creates the objects it needs within the same class, or worse, the same method, that will need it?  Without using a Dependency Injection framework, could you swap out any objects your class uses?  Have you even heard the rule, “Classes should either create things or do things, but never both within the same class?”  If you did that, how much more testable would your code be? If you were to write a test for a method, how much setup work would you have to do?  If it is more than a few lines, your method is probably doing too much, either directly or indirectly.  You’ll need to find a way to make it do less.&lt;/p&gt;
&lt;p&gt;Maybe in future post, I’ll address some of these issues in code.  But for now, I just want to address the problem.&lt;/p&gt;
&lt;p&gt;Again, it isn’t Johnny’s fault that he doesn’t know this stuff.  Think about the code samples we tend to look at.&lt;/p&gt;
&lt;h2 id=&#34;When-is-the-last-time-you-saw-sample-code-that-was-testable&#34;&gt;&lt;a href=&#34;#When-is-the-last-time-you-saw-sample-code-that-was-testable&#34; class=&#34;headerlink&#34; title=&#34;When is the last time you saw sample code that was testable?&#34;&gt;&lt;/a&gt;When is the last time you saw sample code that was testable?&lt;/h2&gt;&lt;p&gt;Short rant here, but I’ve been working with EXTjs (version 4.x) for the last year and a half.  Sencha will tell you that this uses a MVC architecture.  But what they mean by “Controller” really functions more like a “ViewController.”  That is, the controller is tightly bound to the view that it handles events for.  The way they have things setup, you access View elements by getters that are automatically generated for you in the view.&lt;/p&gt;
&lt;p&gt;The problem with this is that you can’t really test the controller logic without bringing along the view.&lt;/p&gt;
&lt;p&gt;Sencha isn’t the only company who does this.  Most of the sample code for WebForms did the same kind of thing.&lt;/p&gt;
&lt;p&gt;Now, the reason this is an issue is that sample code is how most of the newer programmers are learning how to program.&lt;/p&gt;
&lt;p&gt;I heard recently that statistically, because of the growth of the industry, half of the programmers available have 5 years or less of experience.  I don’t know about you, but the first 5 years of my programming career, I was still figuring out how to program.  I wasn’t thinking about architecture issues and I certainly wasn’t thinking about formal testing.  From what I’ve seen of the new recruits, I don’t think they are either.  Shoot.  Some of the ones I’ve interacted with couldn’t code themselves out of a paper bag without help.&lt;/p&gt;
&lt;h2 id=&#34;And-so-what’s-the-conclusion-to-all-of-this&#34;&gt;&lt;a href=&#34;#And-so-what’s-the-conclusion-to-all-of-this&#34; class=&#34;headerlink&#34; title=&#34;And so, what’s the conclusion to all of this?&#34;&gt;&lt;/a&gt;And so, what’s the conclusion to all of this?&lt;/h2&gt;&lt;p&gt;I don’t know.  Maybe the first step is to admit that we have an issue here and that the issue is so much a management or time issue as it is an education and laziness issue.  That the code we generate shouldn’t assume that people will take the code and adapt it into testable code, but that we should write testable code as our sample code.  Maybe colleges should teach basic software architecture and TDD as part of the curriculum.  Maybe those of us who know better should just start testing and figure this all out well enough to explain it to others.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/excuses-for-not-testing/</guid>
            <title>Excuses For Not Testing</title>
            <link>http://davembush.github.com/excuses-for-not-testing/</link>
            <category>tdd</category>
            <category>test driven development</category>
            <category>testing</category>
            <category>bdd</category>
            <pubDate>Thu, 26 Feb 2015 07:00:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/02/ppl-kid-044.jpg&#34; alt=&#34;ppl-kid-044&#34; title=&#34;ppl-kid-044&#34;&gt;&lt;/p&gt;
&lt;p&gt;As I started my own journey into unit testing, I slowly began to realize that it was really easy to come up with reasons to NOT test my code as I was writing it, even once I understood what that was supposed to look like. The reason I think most programmers don’t unit test code, once they understand what it is they are supposed to be doing is that they don’t feel like they have permission. To this I also answer, “How much permission do you need?”&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Do-you-really-need-permission&#34;&gt;&lt;a href=&#34;#Do-you-really-need-permission&#34; class=&#34;headerlink&#34; title=&#34;Do you really need permission?&#34;&gt;&lt;/a&gt;Do you really need permission?&lt;/h2&gt;&lt;p&gt;Do you ask for permission to compile and link the code? Do you ask for permission to write every line of code to make the system do what it should do? Do you ask for permission to run your code periodically to make sure it does what you had in mind when you wrote the code? Do you periodically add code that makes you feel good but is not directly related to the task at hand? (Admit it, I don’t think I know of any programmer who doesn’t.) Then why do we feel like we need permission to write unit test for our code?&lt;/p&gt;
&lt;h2 id=&#34;Are-you-convinced-that-you-need-test&#34;&gt;&lt;a href=&#34;#Are-you-convinced-that-you-need-test&#34; class=&#34;headerlink&#34; title=&#34;Are you convinced that you need test?&#34;&gt;&lt;/a&gt;Are you convinced that you need test?&lt;/h2&gt;&lt;p&gt;We don’t write test code because we aren’t convinced it is necessary to do the job we’ve been given. We complain that our managers don’t want us to write unit test. But the problem is that you asked for permission in the first place. And, by asking for permission, you’ve basically told your manager that unit testing is optional. Your manager has said “no” because he thinks YOU think it is optional.&lt;/p&gt;
&lt;h2 id=&#34;It’s-not-your-manager’s-job&#34;&gt;&lt;a href=&#34;#It’s-not-your-manager’s-job&#34; class=&#34;headerlink&#34; title=&#34;It’s not your manager’s job&#34;&gt;&lt;/a&gt;It’s not your manager’s job&lt;/h2&gt;&lt;p&gt;It isn’t his job to understand that not testing will produce technical debt. He’s not even interested in understanding what technical debt is. All he cares about is this. When will this project be done?  When you say it is done, will it work as expected or will it have a lot of bugs that need to be fixed yet? Most of the managers I’ve worked for in the past will accept whatever number I give them once they understand that when I deliver the software to them, it is going to work.  In fact, I’ve even gotten asked to do jobs BECAUSE my code tends to work more often than anyone else they know who could do the job.&lt;/p&gt;
&lt;p&gt;Now, I will admit, that in some cases there are places where you’ve been explicitly told to not create unit test. But even here I will assert it is because someone asked management the question.&lt;/p&gt;
&lt;h2 id=&#34;Why&#34;&gt;&lt;a href=&#34;#Why&#34; class=&#34;headerlink&#34; title=&#34;Why?&#34;&gt;&lt;/a&gt;Why?&lt;/h2&gt;&lt;p&gt;And so, we need to evaluate why it is we think creating unit test are optional. Probably because what we’ve been doing for so long seems to be working and, when we try to incorporate unit test, the process seems slower.&lt;/p&gt;
&lt;p&gt;And it is.&lt;/p&gt;
&lt;p&gt;Initially, writing unit test is slower just like writing using a new language or a new framework or anything else new is slower than what we know.&lt;/p&gt;
&lt;p&gt;But the ultimate efficiency that writing unit test as we code provides has been proven to more than offset the learning curve involved.&lt;/p&gt;
&lt;p&gt;There is one other valid reason for not testing and that is, we simply don’t know how.  This is almost as big of a reason as not believing it is worth while.  But, I think if we thought testing was really worth while, we’d start testing and figure it out as we went along.&lt;/p&gt;
&lt;p&gt;If you think about your career, I bet there are a lot of things you know now that you didn’t know when you started out.  The fact of the matter is, most of us learn on the job.  We start out with basic skills, but it is the day to day implementations that improve those skills.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;Don’t-let-the-good-enough-be-the-enemy-of-the-perfect&#34;&gt;&lt;a href=&#34;#Don’t-let-the-good-enough-be-the-enemy-of-the-perfect&#34; class=&#34;headerlink&#34; title=&#34;Don’t let the good enough be the enemy of the perfect.&#34;&gt;&lt;/a&gt;Don’t let the good enough be the enemy of the perfect.&lt;/h5&gt;&lt;/blockquote&gt;
&lt;p&gt;Don’t let the good enough be the enemy of the perfect.  Your first set of test will be garbage.  As you stick with it, you’ll wonder what you were thinking when you wrote your first test.  But this should not deter you.  This is what happened when you first started coding.  Maybe it is still happening.  No worries.  It is the practice that will make you better able to write tests and better able to write code that is testable.&lt;/p&gt;
&lt;p&gt;And there is another reason we don’t test.  Most of the code you are currently writing simply isn’t testable.  But, that’s the subject for another post.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/asp-net-server-performance-testing/</guid>
            <title>ASP.NET Server Performance Testing</title>
            <link>http://davembush.github.com/asp-net-server-performance-testing/</link>
            <category>performance</category>
            <category>testing</category>
            <category>asp.net</category>
            <category>memory</category>
            <pubDate>Thu, 06 Nov 2014 06:00:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;This happened a couple of years ago, but it is still relevant because I know of at least one place where it is still happening even though Microsoft has fixed the issue that initially caused this hack to be put in place in the first place.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Problem-In-Production-–-Oh-NO&#34;&gt;&lt;a href=&#34;#Problem-In-Production-–-Oh-NO&#34; class=&#34;headerlink&#34; title=&#34;Problem In Production – Oh NO!&#34;&gt;&lt;/a&gt;Problem In Production – Oh NO!&lt;/h2&gt;&lt;p&gt;Here’s the problem we were seeing.  We had several large PDF files that the client wanted to put up on the site so that their customers could download them.  The problem that we were seeing is that even though the site worked fine under development and QA, the site seemed to consume a lot of memory under load.&lt;/p&gt;
&lt;p&gt;Another symptoms we saw was that the file download took a lot of time to start, or timed out completely.  But the main issue was the memory because when the memory was consumed, the site would restart, and because it was a worker process crash that caused it, the restart took the site down.  This is not something you want to see happen when you are working with a client with world wide exposure.  A client who, if I told you the name, I’m sure you would recognize.&lt;/p&gt;
&lt;p&gt;In fact, it was the site not responding, or crashing, that first alerted us to the problem.  So, as soon as we knew the site wasn’t responding, I’d log onto the server and fire up task manager to see what was going on.&lt;/p&gt;
&lt;h2 id=&#34;Server-Management-Tip&#34;&gt;&lt;a href=&#34;#Server-Management-Tip&#34; class=&#34;headerlink&#34; title=&#34;Server Management Tip&#34;&gt;&lt;/a&gt;Server Management Tip&lt;/h2&gt;&lt;p&gt;One of the things I did early on managing the servers, is that I set up an entirely separate app pool for each of the web sites we are hosting.  This way, we can monitor the memory and CPU activity of each one independently.  For those of you who are interested, the way to make the pool name show up in task manager is to run the pool in ApplicationPoolIdentity, a setting you can get to through “Advanced Settings…”  If you are only hosting one site, you shouldn’t need to do this, but in my case, with multiple sites, this told me a lot about what was going on with the sites and ultimately helped me track down what the problem was.&lt;/p&gt;
&lt;p&gt;By the way, you should always run each of your sites under a separate application pool so that when one site is having trouble, every site on your server doesn’t have trouble.  Imagine having an issue and not even knowing for sure which site was causing the trouble.  It’s bad enough not knowing what page is causing the problem.&lt;/p&gt;
&lt;h2 id=&#34;It-Is-a-Memory-Issue-Now-What&#34;&gt;&lt;a href=&#34;#It-Is-a-Memory-Issue-Now-What&#34; class=&#34;headerlink&#34; title=&#34;It Is a Memory Issue.  Now What?&#34;&gt;&lt;/a&gt;It Is a Memory Issue.  Now What?&lt;/h2&gt;&lt;p&gt;OK.  So, I could see the memory increasing as soon as the site came back up.  So, now to try to track down what was causing memory issues.&lt;/p&gt;
&lt;p&gt;I tried various things along the way, none of them shed any light at all on the problem.  I even got dotMemory from JetBrains to see if I could find anything.  A memory leak maybe?  No, none of my code had even a small leak.&lt;/p&gt;
&lt;h2 id=&#34;The-Fix-Discovered&#34;&gt;&lt;a href=&#34;#The-Fix-Discovered&#34; class=&#34;headerlink&#34; title=&#34;The Fix Discovered&#34;&gt;&lt;/a&gt;The Fix Discovered&lt;/h2&gt;&lt;p&gt;And then I finally stumbled on the issue.  I can’t remember what it was that we installed that needed this, but what it did was change our web.config file so that it had a section in it that looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;... lots of other configuration stuff ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;system.webServer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;modules&lt;/span&gt; **&lt;span class=&#34;attr&#34;&gt;runAllManagedModulesForAllRequests&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;**&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What that causes IIS to do is to run ALL of your web request through ALL of your .NET modules.  Why is this a problem you ask?  Because it even runs all of your images, css, javascript and other static content.  This isn’t normally a huge problem because most of that stuff is relatively small. But, when you try to run a be PDF through that pipeline, you’ll run out of memory because, and this is the major issue here, because the whole file has to be loaded into memory on the server before it can be sent on to the web browser to download.&lt;/p&gt;
&lt;p&gt;Make sure that runAllManagedModulesForAllRequest is either set to false, or doesn’t exist in your web.config file.  If you need it to be turned on for some valid reason that I am not thinking of, at least put your static files on another site where this can be turned off.&lt;/p&gt;
&lt;h2 id=&#34;Moral-Of-The-Story&#34;&gt;&lt;a href=&#34;#Moral-Of-The-Story&#34; class=&#34;headerlink&#34; title=&#34;Moral Of The Story&#34;&gt;&lt;/a&gt;Moral Of The Story&lt;/h2&gt;&lt;p&gt;Now, the question that we should be asking now that we’ve figured it all out is, why wasn’t this caught earlier?  When a site goes up, isn’t all of the functionality, including all of the links to all of the images, files to download, and other pages on the site and off the site supposed to be tested?&lt;/p&gt;
&lt;p&gt;Yes, of course they are, but if you haven’t at least written down where all of this is, if you don’t have a systematic way of testing EVERYTHING, you WILL end up with these kind of errors once you put the site live.  This is to say nothing of load testing along the way.  This can all be prevented.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/running-selenium-in-parallel-with-any-net-unit-testing-tool/</guid>
            <title>Running Selenium In Parallel With Any .NET Unit Testing Tool</title>
            <link>http://davembush.github.com/running-selenium-in-parallel-with-any-net-unit-testing-tool/</link>
            <category>c#</category>
            <category>testing</category>
            <category>.net</category>
            <category>nunit</category>
            <category>parallel</category>
            <category>selenium</category>
            <pubDate>Thu, 31 Jul 2014 13:15:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Running Selenium in parallel from .NET seems to be a problem because, as of the time of this writing, I’ve yet to find a viable way of running selenium test on multiple browsers using &lt;a href=&#34;//docs.seleniumhq.org/docs/07_selenium_grid.jsp&#34;&gt;Selenium Grid&lt;/a&gt;.  This doesn’t mean that there aren’t a few articles out there that have some kind of solution.  But they’ve never satisfied me as something that I could easily plug into my already created test. While my preferred testing tools are &lt;a href=&#34;//www.nunit.org/&#34;&gt;NUnit&lt;/a&gt; and &lt;a href=&#34;//www.specflow.org/&#34;&gt;SpecFlow&lt;/a&gt;, the method I am about to propose should work with any existing test harness you might want to use.  The only prerequisite is that you are using &lt;a href=&#34;//code.google.com/p/selenium/wiki/PageObjects&#34;&gt;Page Models&lt;/a&gt; to wrap your access to any particular web page. This article assumes that you already:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;know how to write Selenium tests&lt;/li&gt;
&lt;li&gt;know how to use Selenium Grid&lt;/li&gt;
&lt;li&gt;know how to use the Page Model pattern&lt;/li&gt;
&lt;li&gt;know how to use your chosen test harness.&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Here-Is-The-Problem&#34;&gt;&lt;a href=&#34;#Here-Is-The-Problem&#34; class=&#34;headerlink&#34; title=&#34;Here Is The Problem&#34;&gt;&lt;/a&gt;Here Is The Problem&lt;/h2&gt;&lt;p&gt;In order to run multiple browsers at the same time, the easiest way is to provide a wrapper Page Model that calls multiple instances of the page model at the same time. The hard way of doing this would be to create an Interface that represented the real page model and then create a proxy class that would hold a list of all of the real page model objects we needed to call.  Each time a property or method on the proxy gets called, all it would do would be to pass the call down into the real objects in parallel. This would work, but the main draw back is that I really don’t want to have to write a method for each method in my real page model.  So the question is, how can we get around this?&lt;/p&gt;
&lt;h2 id=&#34;DynamicObject-To-The-Rescue&#34;&gt;&lt;a href=&#34;#DynamicObject-To-The-Rescue&#34; class=&#34;headerlink&#34; title=&#34;DynamicObject To The Rescue&#34;&gt;&lt;/a&gt;DynamicObject To The Rescue&lt;/h2&gt;&lt;p&gt;Enter the little known class, &lt;a href=&#34;//msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject(v=vs.110).aspx&#34;&gt;DynamicObject&lt;/a&gt;.   In .NET 4, Microsoft introduced the dynamic keyword.  One of the main uses is for places where  you need to be able to declare a variable in your code that the compiler won’t know how to resolve the type of until runtime.  I could have used this several years ago when I had two assemblies that needed to reference each other.  In that case, I used reflection.  But dynamic would have worked with a lot less work. DynamicObject is a specific class that allows us to resolve property and method calls at runtime using our own logic. We will also use the Task Parallel library to implement our parallel calls. For completeness, and so that no one is confused when they try to implement this code, you’ll need the following using statements at the top of the CS file.&lt;/p&gt;
&lt;h2 id=&#34;Using-Statements-And-Constructor&#34;&gt;&lt;a href=&#34;#Using-Statements-And-Constructor&#34; class=&#34;headerlink&#34; title=&#34;Using Statements And Constructor&#34;&gt;&lt;/a&gt;Using Statements And Constructor&lt;/h2&gt;&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Collections.Concurrent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Dynamic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Reflection;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Threading.Tasks;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;So, let’s get started.  The first thing we will need is a class declaration:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ParallelPageModel&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;TPage&lt;/span&gt;&amp;gt;:  &lt;span class=&#34;title&#34;&gt;DynamicObject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;TPage allows us to specify the Interface the real Page Model implements.  Yes, we still need the interface, but we won’t need to create a new wrapper class for every page model we want to wrap.  The class  inherits from DynamicObject so that all of our on the fly goodness will work. Next, we’ll need some place to store an array of PageObjects we want to proxy.  So we add a private variable _page for that purpose.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; TPage[] _pages;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;By using TPage[], we create a variable that is the same type array as the Page Models we are proxying. Next we need a constructor.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ParallelPageModel(&lt;span class=&#34;keyword&#34;&gt;params&lt;/span&gt; TPage[] pages)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _pages = pages;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;By using the params keyword, we can either  pass in page objects as an array or as individual parameters. The magic happens in three overridden methods that are in DynamicObject:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TryInvokeMember – resolves any method calls.&lt;/li&gt;
&lt;li&gt;TrySetMember – resolves any property setters&lt;/li&gt;
&lt;li&gt;TryGetMember – resolves any property getters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So let’s add those methods next:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TryInvokeMember&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;InvokeMemberBinder binder,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt;[] args,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt; result&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TrySetMember&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;SetMemberBinder binder, &lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TryGetMember&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;GetMemberBinder binder, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt; result&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;TryInvokeMember&#34;&gt;&lt;a href=&#34;#TryInvokeMember&#34; class=&#34;headerlink&#34; title=&#34;TryInvokeMember&#34;&gt;&lt;/a&gt;TryInvokeMember&lt;/h2&gt;&lt;p&gt;Inside of the TryInvokeMember method, the first thing we will want to do is to use reflection to call into the real methods.  Since we could have multiple instances of the same method we need to call we will want to do this in a loop. When I first worked this out, I started by just implementing a foreach loop but we are going to jump right to using Parallel.ForEach() Parallel.ForEach() will let us pass in an array and run a lambda expression on each element in the array.  So, our foreach loop will look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; results = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConcurrentBag&amp;lt;&lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Parallel.ForEach(_pages, page =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; thisResult = &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; (TPage)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       .InvokeMember(binder.Name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        BindingFlags.InvokeMethod |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        BindingFlags.Public |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        BindingFlags.Instance,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, page, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    results.Add(thisResult);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Note that our lambda expression is not doing anything more than a simple reflection call. The result that is returned is added to our ConcurrentBag collection.  ConcurrentBag is a collection that is specifically made for parallel calls.  We could get into trouble if we added something to a List&amp;lt;&amp;gt; collection unless we added some parallelization gatekeeping around it.  I’m for doing as little work as possible. The second thing we want to do is to process the return results. For this we need to setup a basic foreach loop.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; thisResult &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; results)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Inside the foreach loop we will process the results collection. If the type that got  returned is the same type as the type that the page is proxying for, we just make our result value, the return value the TryInvokeMember is going to return for us to the code that called the proxy, equal to the proxy object.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (thisResult &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; TPage)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If the result is not null, meaning either that a previous result was null or we haven’t processed the loop yet, we want to check to see if the value of the current loop result is the same as the loop results we’ve already processed.  If it isn’t, we throw an exception.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (result != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!result.Equals(thisResult)) &lt;span class=&#34;comment&#34;&gt;// not the same value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Exception&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           (&lt;span class=&#34;string&#34;&gt;&amp;quot;Call to method returns different values.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we just set the result to whatever we have at this point.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = thisResult;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then the last thing we want to do is to return true to tell the system we were able to process the method.&lt;/p&gt;
&lt;h2 id=&#34;TryGetMember&#34;&gt;&lt;a href=&#34;#TryGetMember&#34; class=&#34;headerlink&#34; title=&#34;TryGetMember&#34;&gt;&lt;/a&gt;TryGetMember&lt;/h2&gt;&lt;p&gt;Since the implementation for TryGetMember looks very similar to TryInvokeMethod we’ll tackle that next. In fact, the only difference between the two methods is the code inside of the Parallel.ForEach parameter block. So, here it is:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Parallel.ForEach(_pages, page =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; thisResult = &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt;(TPage)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .GetProperty(binder.Name).GetValue(page);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    results.Add(thisResult);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;TrySetMember&#34;&gt;&lt;a href=&#34;#TrySetMember&#34; class=&#34;headerlink&#34; title=&#34;TrySetMember&#34;&gt;&lt;/a&gt;TrySetMember&lt;/h2&gt;&lt;p&gt;TrySetMember is the easiest implementation of all since there are no results to worry about.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Parallel.ForEach(_pages,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     page =&amp;gt; &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; (TPage)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .GetProperty(binder.Name).SetValue(page, &lt;span class=&#34;keyword&#34;&gt;value&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Casting&#34;&gt;&lt;a href=&#34;#Casting&#34; class=&#34;headerlink&#34; title=&#34;Casting&#34;&gt;&lt;/a&gt;Casting&lt;/h2&gt;&lt;p&gt;So the code above will work, but you won’t get any intellisense help from Visual Studio if you use this code without tweaking it. What we need is some way of casting the ParallelPageModel object to the TPage type that we pass in. For that we are going to use a cool library I found called &lt;a href=&#34;//github.com/ekonbenefits/impromptu-interface&#34;&gt;ImpromptuInterface&lt;/a&gt;. You’ll need to add a using statement.&lt;/p&gt;
&lt;p&gt;using ImpromptuInterface;&lt;/p&gt;
&lt;p&gt;And then you’ll need to add this method to the ParallelPageModel class.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; TPage &lt;span class=&#34;title&#34;&gt;Cast&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.ActLike();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You would use this like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;IMyPageModel p = pageModelProxy.Cast();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Where IMyPageModel is the interface that specifies what your real PageModel class looks like. Just in case someone is tempted to mention this in the comments, you can’t us operator overloading to achieve the cast because we need it to return TPage, which could be anything and the compiler can’t deal with that.  If you really want to use operator overloading you’ll need to provide your own specific implementation that ends up calling the code above.&lt;/p&gt;
&lt;h2 id=&#34;Calling-The-ParallelPageModel&#34;&gt;&lt;a href=&#34;#Calling-The-ParallelPageModel&#34; class=&#34;headerlink&#34; title=&#34;Calling The ParallelPageModel&#34;&gt;&lt;/a&gt;Calling The ParallelPageModel&lt;/h2&gt;&lt;p&gt;To setup the ParallelPageModel, your code would look something like this, assuming that you have a page model class called MyPageModel with an interface of IMyPageModel.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; pages = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConcurrentStack&amp;lt;IMyPageModel&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Parallel.Invoke(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    () =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pages.Push(PageFactory.GetPageModel(&lt;span class=&#34;string&#34;&gt;&amp;quot;FireFoxGrid&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    () =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pages.Push(PageFactory.GetPageModel(&lt;span class=&#34;string&#34;&gt;&amp;quot;IE11Grid&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; pagesArray = pages.ToArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MyTypedPage =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ParallelPageModel&amp;lt;IMyPageModel&amp;gt;(pagesArray).Cast();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Considerations&#34;&gt;&lt;a href=&#34;#Considerations&#34; class=&#34;headerlink&#34; title=&#34;Considerations&#34;&gt;&lt;/a&gt;Considerations&lt;/h2&gt;&lt;p&gt;I only just started using this.  It works for my current implementation.  But you may need to tweak it so that it works for you. For example, my assumption here is that you are only dealing with simple types or the page model type you are a proxy for.  There is no code here that will handle a situation where the call to a method would return a entirely new page model. Since the code I am testing is a collection of Single Page Applications and I am not testing navigation at this point, this is not a consideration for me.  But it would be relatively easy code to implement.  If I did that, I would probably handle it but subclassing this main class that does the bulk of the work and override the Try*Member method that needed to deal with that situation.  The other possible way of dealing with the situation is to pass in a list of types that need to be wrapped in their own parallelization object as parameters in the constructor and add some generic code in the ParallelPageModel class. Finally, I am well aware that this code may have bugs.  If you find one, go ahead and fix it. You can leave a comment so that others will benefit.   There is a &lt;a href=&#34;//github.com/DaveMBush/ParallelSeleniumUsingNUnit&#34;&gt;demo project on GitHub.&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;Other-Places-Talking-about-Parallel-Selenium&#34;&gt;&lt;a href=&#34;#Other-Places-Talking-about-Parallel-Selenium&#34; class=&#34;headerlink&#34; title=&#34;Other Places Talking about Parallel Selenium&#34;&gt;&lt;/a&gt;Other Places Talking about Parallel Selenium&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//slmoloch.blogspot.com/2009/12/design-of-selenium-tests-for-aspnet_19.html&#34;&gt;Using MbUnit to achieve parallelization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//www.browserstack.com/automate/c-sharp&#34;&gt;Use Browser Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And of course a ton of links to people asking how this can be achieved.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/what-is-specflow%E2%80%A6/</guid>
            <title>What is SpecFlow…</title>
            <link>http://davembush.github.com/what-is-specflow%E2%80%A6/</link>
            <category>tdd</category>
            <category>testing</category>
            <category>nunit</category>
            <category>specflow</category>
            <category>mstest</category>
            <pubDate>Thu, 12 Jun 2014 13:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;…And-why-do-I-want-it&#34;&gt;&lt;a href=&#34;#…And-why-do-I-want-it&#34; class=&#34;headerlink&#34; title=&#34;…And why do I want it?&#34;&gt;&lt;/a&gt;…And why do I want it?&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/uploads/2014/06/SpecFlow.png&#34; alt=&#34;SpecFlow&#34; title=&#34;SpecFlow&#34;&gt;That’s what I kept asking myself every time I saw this product. Well, the last time I looked, something caught my eye enough that I decided to download it and take a look. I’m really glad I did it. So, let me attempt to explain what &lt;a href=&#34;//www.specflow.org/&#34;&gt;SpecFlow&lt;/a&gt; is.  First, while you can get SpecFlow+ Runner to run your test, this isn’t a completely new testing platform. Instead, it is a testing platform that works with whatever testing platform you are using to test your .NET code. So, it works with NUnit, MSTest, xUnit and MbUnit. This is good for my situation because any test I write with SpecFlow will continue to work with the tools I already have in place. Including my current test runners (&lt;a href=&#34;//www.jetbrains.com/resharper/&#34;&gt;ReSharper&lt;/a&gt;) and my Continuous Integration system (&lt;a href=&#34;//www.jetbrains.com/teamcity/&#34;&gt;TeamCity&lt;/a&gt;). I wasn’t interested in adopting a platform that wouldn’t work with these two platforms.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Where-I-got-Confused&#34;&gt;&lt;a href=&#34;#Where-I-got-Confused&#34; class=&#34;headerlink&#34; title=&#34;Where I got Confused&#34;&gt;&lt;/a&gt;Where I got Confused&lt;/h2&gt;&lt;p&gt;Now the part that kept me from looking at this framework for such a long time was the &lt;a href=&#34;//www.specflow.org/&#34;&gt;home page&lt;/a&gt;. If you go there, you will see the “Three easy steps.” 1) Specify, 2) Automate, 3) enjoy. Well, at first glance it looked like was going to have to write my test in English and then write my test in code and then I could enjoy. Why would I want to do that? So, the part they forgot to mention is that once you’ve specified your test, the Visual Studio plugin will generate your test code for you. For NUnit it actually writes the NUnit test for you. The code you do have to write is the code that translates the individual steps. But even that code gets stubbed out for you. Once you have enough of those stubbed out, to write a test, you just write the test in English, save the file, and run the test. Now that I finally understand this, I like most of what SpecFlow does. But there are a few things I wish it did differently.&lt;/p&gt;
&lt;h2 id=&#34;What-I-like&#34;&gt;&lt;a href=&#34;#What-I-like&#34; class=&#34;headerlink&#34; title=&#34;What I like:&#34;&gt;&lt;/a&gt;What I like:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;It puts my test in a Given, When, Then structure like I mentioned a few weeks ago. 2) The class files it generates are all partial classes. This allowed me to keep my inheritance structure that I’m dependent on for my current NUnit testing framework. And allowed me to work around one of the shortcomings I’ve found. 3) The methods are all virtual, again, allowing for extension and flexibility. 4) Intellisense is enabled so you can see similar sentences you’ve already used as you are creating new test. 5) You can create tables of parameters for test scenarios, similar to how you can pass multiple parameters to an NUnit test with the TestCase attribute or the TestCaseSource attribute. 6) To write the supporting CSharp, code I didn’t have to learn anything new. 7) I can give the English language, none code, document to the business user and they should be able to read the test well enough to tell me if the test is an accurate reflection of what they want the system to do.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;What-I-don’t-like&#34;&gt;&lt;a href=&#34;#What-I-don’t-like&#34; class=&#34;headerlink&#34; title=&#34;What I don’t like:&#34;&gt;&lt;/a&gt;What I don’t like:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;I’ve become pretty dependent on the NUnit TestFixture attribute that allows me to pass parameters to the entire test. I use this to control the testing of multiple browsers. But, I’ve recently figured out a way to run all of my browsers simultaneously rather than sequentially so I won’t need this feature in the pretty near future. Once I’ve got that working, you can be sure I’ll share it here. So, don’t forget to subscribe to this blog if you haven’t already.&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/tdd-saves-time-%E2%80%93-a-story/</guid>
            <title>TDD Saves Time – A Story</title>
            <link>http://davembush.github.com/tdd-saves-time-%E2%80%93-a-story/</link>
            <category>tdd</category>
            <category>programming</category>
            <category>testing</category>
            <pubDate>Thu, 22 May 2014 12:40:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/05/TDDSavesTime_AStory.png&#34; alt=&#34;TDDSavesTime_AStory&#34; title=&#34;TDDSavesTime_AStory&#34;&gt;I recently had an experience writing code that proved to me, once again, that using Test Driven Development really is faster than the way I have been working. You will remember a couple of weeks ago I presented &lt;a href=&#34;/automated-web-%E2%80%A6tional-testing/&#34;&gt;a strategy for creating test scenarios where we need to test storing data to a database from a web page&lt;/a&gt;. &lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Well, recently, I had a chance to use that strategy.  In that article, I talked about first testing that the data that we were sending back to the server was actually coming back correctly to the web site.  By doing this, you don’t have to track down where the problem is.  Is it in the database save routine or did it not even get from the client to the server?  This part worked pretty much as expected and my code for that worked right away so I can’t say that I saved a whole lot of time.&lt;/p&gt;
&lt;p&gt;But the part that did save me a TON of time is the second half.  Saving the data to the database without having to use the web site to create the data I wanted to save.&lt;/p&gt;
&lt;p&gt;While I was testing the client side, I saved the data to a JSON string which I used to create an object that represented the data that had been sent back.  Then in my unit test, I recreated the object from the stream and sent that into my save routine.  Once the save was done, I reloaded the object from the database.  Now I have the original object and the saved object which I can compare.&lt;/p&gt;
&lt;p&gt;And the comparison showed me that the save wasn’t quite working the way I had expected.  I actually had to go through several (10? 15? 20?) iterations of fixing and testing before I got to a point where my test was succeeding.  It took about a day to get everything working.  Imagine if I were using a manual method to test this.  Launch the web site, fill out the form (it’s a pretty long form with a lot of data) save the form, reload the form, remember what I had  filled out, verify that everything got saved.  I easily saved half a day using Test Driven Development.&lt;/p&gt;
&lt;p&gt;If you are  still on the fence as to the value of implementing test prior to writing code, I would encourage you to try it.  Just try it for 30 days.  Yes, it will be hard getting started.  Yes, it will FEEL like it takes more time to write the test first.  But as you make this part of how you develop code, you will start to see for yourself how many benefits you can realize by implementing this best practice.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/%E2%80%9Cdebbie-done%E2%80%9D/</guid>
            <title>“Debbie-Done”</title>
            <link>http://davembush.github.com/%E2%80%9Cdebbie-done%E2%80%9D/</link>
            <category>tdd</category>
            <category>programming</category>
            <category>agile</category>
            <category>testing</category>
            <pubDate>Tue, 04 Mar 2014 05:38:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/02/88Tr.png&#34; alt=&#34;88Tr&#34; title=&#34;88Tr&#34;&gt;&lt;/p&gt;
&lt;p&gt;A long long time ago, in what seems now like another world, I worked for a company as a &lt;a href=&#34;//en.wikipedia.org/wiki/Clipper_(programming_language)&#34;&gt;Clipper programmer&lt;/a&gt;.  While I was there I heard this story about a lady named Debbie.&lt;/p&gt;
&lt;p&gt;I was told that Debbie was a programmer who used to work for this company.  Debbie was a lazy programmer.  She worked harder at avoiding work than if she just did the job she was supposed to do.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;The-ultimate-lazy-programmer&#34;&gt;&lt;a href=&#34;#The-ultimate-lazy-programmer&#34; class=&#34;headerlink&#34; title=&#34;The ultimate lazy programmer&#34;&gt;&lt;/a&gt;The ultimate lazy programmer&lt;/h2&gt;&lt;p&gt;For example.  Once my boss had stopped by her desk to see how she was progressing on a report she was supposed to be writing:&lt;/p&gt;
&lt;p&gt;Debbie: Oh, that’s done.  Here.  Take a look.&lt;/p&gt;
&lt;p&gt;The boss looked it over and found an error.  Some of the numbers didn’t match up.&lt;/p&gt;
&lt;p&gt;Debbie: Oh, I know what that is.  I can get that fixed right away.&lt;/p&gt;
&lt;p&gt;Which she did.  At least that’s what she made everyone believe.&lt;/p&gt;
&lt;p&gt;After she left (shortly after this) they found out that she hadn’t even connected to a database to create that report.  The whole report was hard coded.  Every time you ran it, it gave you the same numbers.&lt;/p&gt;
&lt;h2 id=&#34;“Debbie-Done”&#34;&gt;&lt;a href=&#34;#“Debbie-Done”&#34; class=&#34;headerlink&#34; title=&#34;“Debbie-Done”&#34;&gt;&lt;/a&gt;“Debbie-Done”&lt;/h2&gt;&lt;p&gt;The one thing I was told that sticks in my mind the most is that Debbie considered a project “done” if it compiled in linked.  She almost never ran the code.  Or if she did, she certainly didn’t run enough of it, or run it more than to make sure it didn’t crash.  Anyhow, the perception she left is that she only compiled and linked the code.  Today, we’d say all she did was build the project or solution.&lt;/p&gt;
&lt;p&gt;But recently, I’ve discovered that many programmers work at the “Debbie-Done” level more than we’d like to admit.&lt;/p&gt;
&lt;p&gt;I’ve always thought that programmers wrote code like I do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write a bit of code. &lt;/li&gt;
&lt;li&gt;Build the code.&lt;/li&gt;
&lt;li&gt;Run the code to see if that change works as expected. &lt;/li&gt;
&lt;li&gt;Write a bit more code. &lt;/li&gt;
&lt;li&gt;Build the code.&lt;/li&gt;
&lt;li&gt;Run the code to see if that change works as expected. &lt;/li&gt;
&lt;li&gt;Rinse, lather, repeat.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But what I’m discovering is that MANY programmers do not program that way at all.  No, many of them look like some version of “Debbie-Done” programming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write some code. &lt;/li&gt;
&lt;li&gt;Build the project to make sure it will build&lt;/li&gt;
&lt;li&gt;Write some more code&lt;/li&gt;
&lt;li&gt;Build the project&lt;/li&gt;
&lt;li&gt;Rinse, lather, repeat&lt;/li&gt;
&lt;li&gt;Run the code and “test” all of the changes at once.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem with this method is that no one can remember all of the changes they make so, in the end, the code I write tends to be more completely tested than the code that was tested in bulk.  The only difference between this method of development and “Debbie-Done” is the degree of completeness with which each developer is able “test” their code.&lt;/p&gt;
&lt;h2 id=&#34;Avoid-“Debbie-Done”-with-Test-First-Development&#34;&gt;&lt;a href=&#34;#Avoid-“Debbie-Done”-with-Test-First-Development&#34; class=&#34;headerlink&#34; title=&#34;Avoid “Debbie-Done” with Test First Development&#34;&gt;&lt;/a&gt;Avoid “Debbie-Done” with Test First Development&lt;/h2&gt;&lt;p&gt;It is no wonder that many programmers I talk to think that test driven development takes too much time.  Compared to how they are programming, it does.&lt;/p&gt;
&lt;p&gt;But think about this.  If you were to code like I do, suddenly writing test for every change you make suddenly makes sense because instead of you running the application and getting to the place that will trigger your code and observing if it will work or not, you can write a test for just the piece of code you are working on and run that each time you want to verify if it is working or not.  Yes, initially, this will take more time.  But over the life of the program, and I would say even over the time span that it takes to initially write the code, writing at least the Unit Test as you are writing the features will actually save you time.  Not only that, you will end up with test you can repeat every time the code is changed.&lt;/p&gt;
&lt;p&gt;Even my method of “code, build, test, code, build, test” is “Debbie-Done” compared to writing test for each change as you make the change.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/test-driven-specifications/</guid>
            <title>Test Driven Specifications</title>
            <link>http://davembush.github.com/test-driven-specifications/</link>
            <category>tdd</category>
            <category>agile</category>
            <category>test driven development</category>
            <category>testing</category>
            <pubDate>Tue, 25 Feb 2014 03:44:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/02/spider.jpg&#34; alt=&#34;spider&#34; title=&#34;spider&#34;&gt;Several years ago, long before the community was actively talking about Test Driven Development, I worked for a short time at a company as a “bug fixer.”  That was my role.  They had hired me because they had some software that was “basically done” but “had some issues.”  It should only take a few weeks.&lt;/p&gt;
&lt;p&gt;The first thing they needed me to fix was that the website was supposed to send out email.  It turns out it was a configuration problem.  But they were so impressed (“the last guy we had in here spent two weeks on that problem and still hadn’t solved the problem.”) that they gave me more and more bugs.&lt;/p&gt;
&lt;h2 id=&#34;This-Is-The-Job-That-Never-Ends&#34;&gt;&lt;a href=&#34;#This-Is-The-Job-That-Never-Ends&#34; class=&#34;headerlink&#34; title=&#34;This Is The Job That Never Ends&#34;&gt;&lt;/a&gt;This Is The Job That Never Ends&lt;/h2&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;The gig that was supposed to be a couple of weeks long was quickly turning into a perpetual job.  Soon I learned that what I was working with was a system that had a lot of bugs, but no one was willing to admit that.  Eventually, frustrated by the fact that this system seemed to have a new bug every day, I asked for the specs so that I could create a test plan.  That’s when I found out the worse news of all about this system.&lt;/p&gt;
&lt;h2 id=&#34;Lost-Specifications&#34;&gt;&lt;a href=&#34;#Lost-Specifications&#34; class=&#34;headerlink&#34; title=&#34;Lost Specifications&#34;&gt;&lt;/a&gt;Lost Specifications&lt;/h2&gt;&lt;p&gt;They had lost the specs.  Not only had they lost the specs, but they were unwilling to admit this to the client and instead they were relying on the process of fixing the bugs to eventually squash all  the bugs so they could end up with a stable system.&lt;/p&gt;
&lt;p&gt;Since I was not yet familiar with the concepts of unit testing or Test Driven Development, I accepted this as the best we could do.  Hey!  At least I was getting paid well.&lt;/p&gt;
&lt;p&gt;Oh, but the story gets worse.&lt;/p&gt;
&lt;h2 id=&#34;The-Plot-Thickens&#34;&gt;&lt;a href=&#34;#The-Plot-Thickens&#34; class=&#34;headerlink&#34; title=&#34;The Plot Thickens&#34;&gt;&lt;/a&gt;The Plot Thickens&lt;/h2&gt;&lt;p&gt;About three months into this gig, the manager of my project went on vacation which left the project in HIS manager’s hands.  That’s when the poop hit the fan.&lt;/p&gt;
&lt;p&gt;The Oracle consultant that was working with me and I were called into the office.&lt;/p&gt;
&lt;p&gt;“Why does this system still have bugs?!!”  Oh, he was angry.  That should be all bold and all caps and all underlined.&lt;/p&gt;
&lt;p&gt;Well sir, several weeks ago I asked for the requirements document so that I could write a test plan and I was told the requirements were lost.  If we can’t write a test plan, we never will be able to ensure that the system is working the way that it should.&lt;/p&gt;
&lt;p&gt;“I want you to write a test plan.”&lt;/p&gt;
&lt;p&gt;To which I repeated my need for a requirements document.&lt;/p&gt;
&lt;p&gt;We went back and forth with him insisting that I write a test plan and me stating that it could not be done until I finally said, “I think I’ve done all I can do here.”  Walked out of the office, packed up my stuff, went home, and immediately called my recruiter to make sure he got MY version of what happened first.&lt;/p&gt;
&lt;p&gt;But, it didn’t have to end like that.&lt;/p&gt;
&lt;h2 id=&#34;A-Better-Way&#34;&gt;&lt;a href=&#34;#A-Better-Way&#34; class=&#34;headerlink&#34; title=&#34;A Better Way&#34;&gt;&lt;/a&gt;A Better Way&lt;/h2&gt;&lt;p&gt;Had I known about test driven development, every time a new bug came in, I could have written a new test, even if it was only unit test and not acceptance test, every time a new bug came in.  Eventually, I would have created not only the test plan, but I would have created the specification, or at least the parts that tended to break, and we would have ended up with a stable system like they thought they were going to get.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/test-sending-email-without-a-server-in-asp-net/</guid>
            <title>Test Sending Email without a Server in ASP.NET</title>
            <link>http://davembush.github.com/test-sending-email-without-a-server-in-asp-net/</link>
            <category>c#</category>
            <category>testing</category>
            <category>vb.net</category>
            <category>asp.net</category>
            <category>email</category>
            <category>mailaddress</category>
            <category>mailmessage</category>
            <category>smtpclient</category>
            <pubDate>Wed, 05 Jun 2013 03:36:19 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2009/08/back041.jpg&#34; alt=&#34;back-041&#34; title=&#34;back-041&#34;&gt; By now, most people are familiar with the fact that ASP.NET will send mail from the codebehind by simply adding a few lines to your web.config file and adding another few lines of code in the codebehind file.&lt;/p&gt;
&lt;p&gt;But it wasn’t until recently that I found that you don’t need to have access to an SMTP server to test your code.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;In fact, this little trick will allow you to read the email without clogging up your email client with email you only wanted for testing purposes.&lt;/p&gt;
&lt;p&gt;Instead of the normal entry of&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;mailSettings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;smtp&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;from&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;you@domain.com&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;network&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;host&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;maiServerl&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;password&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;           &lt;span class=&#34;attr&#34;&gt;userName&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;loginName&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;port&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;25&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;smtp&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;mailSettings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can use&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;mailSettings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;smtp&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;from&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;you@domain.com&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;         &lt;span class=&#34;attr&#34;&gt;deliveryMethod&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;SpecifiedPickupDirectory&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;specifiedPickupDirectory&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;pickupDirectoryLocation&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;c:\\mail&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;smtp&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;mailSettings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This will drop your email message in the c:\mail directory as an *.eml file which you can open with Outlook Express.&lt;/p&gt;
&lt;p&gt;The code you would write to send the mail is still the same:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;SmtpClient smtp = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SmtpClient();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MailAddress &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MailAddress(fromEmail, fromEmail);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MailAddress to = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MailAddress(emailAddress, emailAddress);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MailMessage message = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MailMessage(&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt;, to);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;message.Subject = SubjectLine;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;message.Body = htmlString;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;message.From = &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;message.To.Add(to);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;message.IsBodyHtml = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;smtp.Send(message);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
