<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://davembush.github.com</id>
    <title>Dave&#39;s Notebook • Posts by &#34;property based testing&#34; tag</title>
    <link href="http://davembush.github.com" />
    <updated>2018-02-06T11:30:58.000Z</updated>
    <category term="project management" />
    <category term="code coverage" />
    <category term="tdd" />
    <category term="unit test" />
    <category term="code" />
    <category term="programming" />
    <category term="angular" />
    <category term="javascript" />
    <category term="performance" />
    <category term="react.js" />
    <category term="agile" />
    <category term="failure" />
    <category term="kanban" />
    <category term="scrum" />
    <category term="interview" />
    <category term="job search" />
    <category term="test driven development" />
    <category term="mvvm" />
    <category term="DRY" />
    <category term="loose coupling" />
    <category term="single responsibility" />
    <category term="c#" />
    <category term="learning" />
    <category term="bug" />
    <category term="ext js" />
    <category term="sencha" />
    <category term="career" />
    <category term="react" />
    <category term="ngrx" />
    <category term="redux" />
    <category term="functional" />
    <category term="reactive" />
    <category term="mvp" />
    <category term="private" />
    <category term="testing" />
    <category term="typescript" />
    <category term="routing" />
    <category term="pointers" />
    <category term="unsafe" />
    <category term="class diagram" />
    <category term="vb.net" />
    <category term="visual studio" />
    <category term="flux" />
    <category term="lazy loading" />
    <category term="scope" />
    <category term="DOM" />
    <category term="ionic" />
    <category term="putty" />
    <category term="ssh" />
    <category term="formgroup" />
    <category term="validation" />
    <category term="angular-cli" />
    <category term="modules" />
    <category term="ngmodule" />
    <category term="observables" />
    <category term="RxJS" />
    <category term="model driven" />
    <category term="reactive forms" />
    <category term="estimating" />
    <category term="story points" />
    <category term="best practices" />
    <category term="design patterns" />
    <category term="architecture" />
    <category term="asp.net" />
    <category term="memory" />
    <category term="angular.js" />
    <category term="iis" />
    <category term="ajax" />
    <category term="json" />
    <category term="controller" />
    <category term="MVC" />
    <category term="view" />
    <category term="404" />
    <category term="application_error" />
    <category term="exceptions" />
    <category term="viewstate" />
    <category term="archietcture" />
    <category term="bll" />
    <category term="dal" />
    <category term="Three Tiered" />
    <category term=".net" />
    <category term="enums" />
    <category term="tutorial" />
    <category term="code quality" />
    <category term="cyclomatic" />
    <category term="halstead" />
    <category term="child component" />
    <category term="CefSharp" />
    <category term="Chromium" />
    <category term="Vista" />
    <category term="VPN" />
    <category term="xp" />
    <category term="get" />
    <category term="properties" />
    <category term="set" />
    <category term="empty" />
    <category term="string" />
    <category term="habits" />
    <category term="application testing" />
    <category term="dependency injection" />
    <category term="debugging" />
    <category term="cms" />
    <category term="dotnetnuke" />
    <category term="WordPress" />
    <category term="authority" />
    <category term="confidence" />
    <category term="datalist" />
    <category term="listview" />
    <category term="comments" />
    <category term="tdd. agile" />
    <category term="bootstrap" />
    <category term="copy &amp;amp; paste" />
    <category term="cross browser" />
    <category term="idisposable" />
    <category term="animation" />
    <category term="css" />
    <category term="html" />
    <category term="debug" />
    <category term="checked" />
    <category term="double" />
    <category term="float" />
    <category term="int" />
    <category term="long" />
    <category term="short" />
    <category term="unchecked" />
    <category term="currency" />
    <category term="decimal" />
    <category term="floating point math" />
    <category term="single" />
    <category term="authentication" />
    <category term="isinrole" />
    <category term="roles" />
    <category term="user" />
    <category term="definition of done" />
    <category term="DoD" />
    <category term="dispose" />
    <category term="finalize" />
    <category term="suppressfinalize" />
    <category term="education" />
    <category term="client side" />
    <category term="development" />
    <category term="class" />
    <category term="dynamic classing" />
    <category term="gridview" />
    <category term="college" />
    <category term="freshman" />
    <category term="babel" />
    <category term="es2015" />
    <category term="es6" />
    <category term="jest" />
    <category term="bdd" />
    <category term="Single Responsibility" />
    <category term="Architecture" />
    <category term="full stack developer" />
    <category term="web development" />
    <category term="formsauthentication" />
    <category term="manual" />
    <category term="redirectfromloginpage" />
    <category term="setauthcookie" />
    <category term="NgRX" />
    <category term="luck" />
    <category term="social skills" />
    <category term="brain" />
    <category term="health" />
    <category term="programmer" />
    <category term="productivity" />
    <category term="QA" />
    <category term="extreme programming" />
    <category term="software" />
    <category term="httpcontext" />
    <category term="items" />
    <category term="session" />
    <category term="naming conventions" />
    <category term="variables" />
    <category term="self improvement" />
    <category term="301" />
    <category term="302" />
    <category term="fiddler" />
    <category term="infinite loop" />
    <category term="images" />
    <category term="iTextSharp" />
    <category term="PDF" />
    <category term="concatenation" />
    <category term="quirks" />
    <category term="parsing" />
    <category term="xhtml" />
    <category term="fonts" />
    <category term="stack" />
    <category term="htmltidy" />
    <category term="tables" />
    <category term="acrofields" />
    <category term="form fields" />
    <category term="outputstream" />
    <category term="pdfreader" />
    <category term="pdfstamper" />
    <category term="bind" />
    <category term="callbacks" />
    <category term="currying" />
    <category term="events" />
    <category term="business rules" />
    <category term="boolean" />
    <category term="fields" />
    <category term="methods" />
    <category term="object" />
    <category term="functions" />
    <category term="inheritance" />
    <category term="prototype" />
    <category term="hoist" />
    <category term="falsy" />
    <category term="truthy" />
    <category term="istanbul" />
    <category term="jasmine" />
    <category term="hoisting" />
    <category term="types" />
    <category term="type conversion" />
    <category term="dialog" />
    <category term="jQuery" />
    <category term="validation controls" />
    <category term="async" />
    <category term="each" />
    <category term="collapse" />
    <category term="expand" />
    <category term="load" />
    <category term="partial content" />
    <category term="tooltip" />
    <category term="regions" />
    <category term="limiting beliefs" />
    <category term="angular material" />
    <category term="linkedin" />
    <category term="social media" />
    <category term="tips" />
    <category term="CI. Continuous Integration" />
    <category term="magic numbers" />
    <category term="magic strings" />
    <category term="flex" />
    <category term="multiview" />
    <category term="wizard" />
    <category term="threading" />
    <category term="intern" />
    <category term="express" />
    <category term="node" />
    <category term="nunit" />
    <category term="object initializers" />
    <category term="video" />
    <category term="reflection" />
    <category term="unity" />
    <category term="best practice" />
    <category term="asp.net postback button" />
    <category term="iText" />
    <category term="property based testing" />
    <category term="cli" />
    <category term="software architecture" />
    <category term="rxjs. angular 2" />
    <category term="redirect" />
    <category term="response" />
    <category term="responsive design" />
    <category term="parallel" />
    <category term="selenium" />
    <category term="Marble Testing" />
    <category term="java" />
    <category term="grid" />
    <category term="hub" />
    <category term="serialization" />
    <category term="specflow" />
    <category term="like" />
    <category term="sql" />
    <category term="tsql" />
    <category term="where clause" />
    <category term="do while" />
    <category term="for next" />
    <category term="ms-sql" />
    <category term="while" />
    <category term="gamification" />
    <category term="paired programming" />
    <category term="reference types" />
    <category term="stringbuilder" />
    <category term="value types" />
    <category term="technical debt" />
    <category term="activetabindex" />
    <category term="postback" />
    <category term="tab control" />
    <category term="tabcontrol" />
    <category term="kata" />
    <category term="extjs" />
    <category term="email" />
    <category term="mailaddress" />
    <category term="mailmessage" />
    <category term="smtpclient" />
    <category term="Quality" />
    <category term="behavior" />
    <category term="psychology" />
    <category term="portal" />
    <category term="web 1.0" />
    <category term="web 2.0" />
    <category term="trace" />
    <category term="compiler" />
    <category term="errror" />
    <category term="warning" />
    <category term="connection string" />
    <category term="dataset" />
    <category term="error" />
    <category term="web.config" />
    <category term="tslint" />
    <category term="emotions" />
    <category term="hiring" />
    <category term="aspnet_regsql" />
    <category term="forms based authentication" />
    <category term="jsdom" />
    <category term="karma" />
    <category term="noTDD" />
    <category term="bundling" />
    <category term="gulp" />
    <category term="minification" />
    <category term="node.js" />
    <category term="file upload" />
    <category term="objects" />
    <category term="hide" />
    <category term="vb.net attributes" />
    <category term="nothing" />
    <category term="nullable" />
    <category term="conditional startup" />
    <category term="windows forms" />
    <category term="winforms" />
    <category term="char" />
    <category term="split" />
    <category term="strict" />
    <category term="clarity" />
    <category term="ui" />
    <category term="ux" />
    <category term="asmx" />
    <category term="error handling" />
    <category term="webservice" />
    <category term="binary" />
    <category term="bitwise" />
    <category term="operators" />
    <category term="automation" />
    <category term="browser" />
    <category term="mstest" />
    <category term="immutable" />
    <category term="global" />
    <category term="await" />
    <category term="webapi" />
    <category term="configuration" />
    <category term="devops" />
    <category term="testcasedata" />
    <category term="testcasesource" />
    <category term="closure" />
    <category term="loops" />
    <category term="certification" />
    <category term="mcsd" />
    <category term="microsoft" />
    <category term="inversion of control" />
    <category term="ioc" />
    <category term="casting" />
    <category term="convert" />
    <category term="arguements" />
    <category term="command line" />
    <category term="main" />
    <category term="yagni" />
    <category term="npm" />
    <category term="nvm" />
    <category term="resumes" />
    <category term="change-detection" />
    <category term="state-management" />
    <category term="web-workers" />
    <category term="libraries" />
    <category term="strong typing" />
    <category term="linting" />
    <category term="constructors" />
    <category term="clean code" />
    <category term="smart-ngrx" />
    <category term="ngrx-store" />
    <category term="ngrx-entity" />
    <category term="ngrx-effects" />
    <category term="TypeScript" />
    <category term="Performance" />
    <entry>
        <id>http://davembush.github.com/property-based-testing-in-angular-with-jsverify/</id>
        <title>Property Based Testing in Angular with jsVerify</title>
        <link rel="alternate" href="http://davembush.github.com/property-based-testing-in-angular-with-jsverify/"/>
        <content type="html">&lt;p&gt;Several weeks ago, I mentioned that I’ve been playing around with &lt;a href=&#34;/property-based-testing-revealed-a-better-way-to-test/&#34;&gt;Property Based Testing&lt;/a&gt;.  In particular, I’ve been using it with my Angular code.  The framework I’ve chosen is &lt;a href=&#34;//github.com/jsverify/jsverify&#34;&gt;jsVerify&lt;/a&gt; because it seemed like the most straight forward of the available tools and it has a documented way of integrating with Jasmine, which Angular test use by default.  Angular with jsVerify.  How does that work?&lt;/p&gt;
&lt;p&gt;The documentation for how to use jsVerify seems to be written for people who already understand Property Based Testing from some other environment.  This makes picking it up and using it awkward at best.&lt;/p&gt;
&lt;p&gt;Here’s what I’ve learned along the way. &lt;figure&gt;&lt;img src=&#34;/uploads/2018/02/2018-02-06.jpg&#34; title=&#34;Property Based Testing in Angular with jsVerify&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//visualhunt.com/author/a3b62c&#34;&gt;Official U.S. Navy Imagery&lt;/a&gt; on &lt;a href=&#34;//visualhunt.com/re/d44953&#34;&gt;Visual Hunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;The-Basics&#34;&gt;&lt;a href=&#34;#The-Basics&#34; class=&#34;headerlink&#34; title=&#34;The Basics&#34;&gt;&lt;/a&gt;The Basics&lt;/h2&gt;&lt;p&gt;To install jsVerify into your dev environment, use:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save-dev jsverify&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To use the code in your spec file, import jsverify using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import * as jsc from &amp;#39;jsverify&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We us ‘jsc’ because jsVerify originated from &lt;a href=&#34;//github.com/douglascrockford/JSCheck&#34;&gt;jsCheck&lt;/a&gt;.  Why not just use jsCheck?  Well, because it looks even less well documented.  That doesn’t mean that it is, but that is how I felt when I went to the sites and I couldn’t be bothered to wade through the wall of text the documentation site presented me with.&lt;/p&gt;
&lt;h2 id=&#34;A-Simple-Test&#34;&gt;&lt;a href=&#34;#A-Simple-Test&#34; class=&#34;headerlink&#34; title=&#34;A Simple Test&#34;&gt;&lt;/a&gt;A Simple Test&lt;/h2&gt;&lt;p&gt;Now to setup a simple test.  We won’t really test anything.  I just want to show the structure of the test.&lt;/p&gt;
&lt;p&gt;There are two methods you might use that seem very similar.  &lt;code&gt;assertForall()&lt;/code&gt; and &lt;code&gt;checkForall()&lt;/code&gt;.  What I didn’t realize at first is that &lt;code&gt;assertForall()&lt;/code&gt; is the one you want to use because it will throw the exception that Jasmine is listening for so that I knows the test failed.  If you use &lt;code&gt;checkForall()&lt;/code&gt; the test will fail, but Jasmine will think it succeeded.  And if you’re thinking, yeah but you should use expect() with checkForAll(), that doesn’t always work quite the way you would expect.  No pun intended.&lt;/p&gt;
&lt;p&gt;The basic structure of a test will go inside of your &lt;code&gt;it()&lt;/code&gt; block.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Any two numeric values&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should equal 20&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jsc.&lt;span class=&#34;title function_&#34;&gt;assertForall&lt;/span&gt;(jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;, jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;a: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;, b: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; a_and_b_equal_20 = a + b === &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a_and_b_equal_20;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This test will, obviously, fail.  A test we would expect to pass would look like this.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Any two numeric values&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should be able to be added in any order&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jsc.&lt;span class=&#34;title function_&#34;&gt;assertForall&lt;/span&gt;(jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;, jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;a: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;, b: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; a_and_b_equal_20 = a + b === b + a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a_and_b_equal_20;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You may have guessed by now that &lt;code&gt;assertForall()&lt;/code&gt;takes a variable number of parameters.  The last parameter is a callback that runs our test.  The parameters before the callback describe the kinds of parameters that will be passed to the callback.  The description of the parameter is of type Arbitrary.  So, what we’ve said above is something to the effect of, “generate two random integers and pass them to the callback.”  You can check the jsVerify site for “Primitive Arbitraries” to see what is built in.&lt;/p&gt;
&lt;h2 id=&#34;Adding-Complexity&#34;&gt;&lt;a href=&#34;#Adding-Complexity&#34; class=&#34;headerlink&#34; title=&#34;Adding Complexity&#34;&gt;&lt;/a&gt;Adding Complexity&lt;/h2&gt;&lt;p&gt;It won’t be long before you run into a situation where the primitive arbitraries won’t do the job for you and you’ll need to resort to the combinators.  This allows you to create a brand new arbitrary by combining primitives together.  The one I found myself using the most was &lt;code&gt;oneof()&lt;/code&gt; where you pass a list of arbitraries as an array and the system will pick from the list and generate a new random value from the list.  Don’t confuse this with &lt;code&gt;either()&lt;/code&gt;.  I’ve used &lt;code&gt;oneof()&lt;/code&gt; in combination with &lt;code&gt;constant()&lt;/code&gt;for cases where I’ve needed to create a random value from a list of possible values.&lt;/p&gt;
&lt;p&gt;Where things really got interesting though was when I needed to create an object with random values for the properties.  For this, you’ll need to use a record.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; recordArb = jsc.&lt;span class=&#34;title function_&#34;&gt;record&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: jsc.&lt;span class=&#34;property&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: jsc.&lt;span class=&#34;property&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;arrayThing&lt;/span&gt;: jsc.&lt;span class=&#34;title function_&#34;&gt;array&lt;/span&gt;(jsc.&lt;span class=&#34;title function_&#34;&gt;record&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;fieldOne&lt;/span&gt;: jsc.&lt;span class=&#34;property&#34;&gt;integer&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;dateField&lt;/span&gt;: jsc.&lt;span class=&#34;property&#34;&gt;datetime&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This will let us pass random objects to our tests.  This is great for testing Reducers.  You’ll notice we even were able to create a nested array.  This will create a random length array with random records inside of it.&lt;/p&gt;
&lt;h2 id=&#34;Arbitraries-from-Generators&#34;&gt;&lt;a href=&#34;#Arbitraries-from-Generators&#34; class=&#34;headerlink&#34; title=&#34;Arbitraries from Generators&#34;&gt;&lt;/a&gt;Arbitraries from Generators&lt;/h2&gt;&lt;p&gt;Now that I’ve been working with it for a while, I can’t remember why it was so difficult.  But the one place I did have some trouble was the concept of Generators vs Arbitraries.  Arbitraries are what we need to pass into &lt;code&gt;assertForall().&lt;/code&gt; Generators are what we use when we need to come up with some way of creating our own special random data.  You rarely need to use this, but when you do, being able to convert the Generator to an Arbitrary will become critical.&lt;/p&gt;
&lt;p&gt;To convert a generator to an arbitrary, use bless.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;jsc.&lt;span class=&#34;property&#34;&gt;generator&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;bless&lt;/span&gt;(generatorThing);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Typing&#34;&gt;&lt;a href=&#34;#Typing&#34; class=&#34;headerlink&#34; title=&#34;Typing&#34;&gt;&lt;/a&gt;Typing&lt;/h2&gt;&lt;p&gt;As of this writing, the typing for &lt;code&gt;checkForall()&lt;/code&gt; is incorrect.  It is typed as returning &lt;code&gt;Result&amp;lt;any&amp;gt;&lt;/code&gt;when it in fact returns &lt;code&gt;Result&amp;lt;any&amp;gt; | boolean&lt;/code&gt;I just discovered this so I haven’t entered a pull request that will fix the issue.  If you decide to use &lt;code&gt;checkForall()&lt;/code&gt; instead of &lt;code&gt;assertForall()&lt;/code&gt;, you’ll need to fix up the typings yourself.&lt;/p&gt;
&lt;h2 id=&#34;Puzzles&#34;&gt;&lt;a href=&#34;#Puzzles&#34; class=&#34;headerlink&#34; title=&#34;Puzzles&#34;&gt;&lt;/a&gt;Puzzles&lt;/h2&gt;&lt;p&gt;The one thing I’m still trying to figure out is the best way of running the test.  The fact of the matter is that jsVerify tests do not lend themselves to the structure of a Jasmine test.  And since I have to generate 100 instances of random data for each test, it may not be efficient to separate each test out into separate it statements.&lt;/p&gt;
&lt;p&gt;For now, I’m running all related evaluations within one it statement and using the back-tick string delimiter to allow me to have a multi-line it() string that describes all that I’m testing.  But, by combining all of my test like this, I can no longer determine which of my test actually failed.&lt;/p&gt;
&lt;p&gt;I’m not exactly sure what the best solution to that is (yet) and right now, there don’t seem to be a lot of people using jsVerify or any other property based framework with Jasmine to get a lot of hints on how we might write tests that are easy to use.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;I encourage you to give jsVerify a try.  It really isn’t that hard to pick up and hopefully, this short article will smooth over some of the problems you may have as you get started.  Despite the puzzles I mentioned above the advantages of using it over example based testing encourage me to see just how far I can push this framework.&lt;/p&gt;
</content>
        <category term="angular" />
        <category term="jasmine" />
        <category term="property based testing" />
        <updated>2018-02-06T11:30:58.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/property-based-testing-revealed-a-better-way-to-test/</id>
        <title>Property Based Testing Revealed - A Better Way to Test</title>
        <link rel="alternate" href="http://davembush.github.com/property-based-testing-revealed-a-better-way-to-test/"/>
        <content type="html">&lt;p&gt;Over the last couple of weeks, I’ve been experimenting with Property Based Testing.  While I’m probably doing it “wrong” by many definitions, I’m finding it useful enough that I’m adding it to my testing toolbox. &lt;figure&gt;&lt;img src=&#34;/uploads/2018/01/2018-01-23.jpg&#34; title=&#34;Property Based Testing Revealed - A Better Way to Test&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//visualhunt.com/author/0651d3&#34;&gt;abraham.williams&lt;/a&gt; on &lt;a href=&#34;//visualhunt.com/re/284007&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by-sa/2.0/&#34;&gt; CC BY-SA&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;What’s-A-Property&#34;&gt;&lt;a href=&#34;#What’s-A-Property&#34; class=&#34;headerlink&#34; title=&#34;What’s A Property?&#34;&gt;&lt;/a&gt;What’s A Property?&lt;/h2&gt;&lt;p&gt;As you introduce yourself to Property Based Testing, one of the first things you’ll need to understand is what they mean by a “property.”  Most of us who have been doing some form of Object Oriented Programming think of “properties” as data points on an object.  That’s not even close to what the word means when we talk about Property Based Testing. &lt;/p&gt;
&lt;p&gt;Roughly translated, a “property” is some feature of the code under tests.  Most of the beginner literature uses the classic add(a, b) method.  Properties of an add method include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add(a, b) === add(b, a)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;a&lt;/code&gt; is zero then &lt;code&gt;add()&lt;/code&gt; will return the value of &lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add(a, b) - a&lt;/code&gt; will equal b (and similar for minus b equals a).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The key here is that we shouldn’t need to know too much about the data we are sending in to our add method because we are going to send in random data.  So, any property we test needs to be expressed in a data agnostic way.&lt;/p&gt;
&lt;h2 id=&#34;What-are-the-Advantages&#34;&gt;&lt;a href=&#34;#What-are-the-Advantages&#34; class=&#34;headerlink&#34; title=&#34;What are the Advantages?&#34;&gt;&lt;/a&gt;What are the Advantages?&lt;/h2&gt;&lt;p&gt;And while having to think about our test in a data agnostic way is hard, at first, the first advantage is that we start thinking about testing our code in terms of generalities instead of specifics.  And, really, a general test is a much more robust test. &lt;/p&gt;
&lt;p&gt;But, we need data for our tests, right?  Where does that come from?  Depending on the framework you are using, this may vary, but the general idea is that you describe what the data should look like, and the framework will generate random parameters to pass in.  This fact leads us to two more benefits of Property Based Testing. &lt;/p&gt;
&lt;p&gt;First, since all I need to do is describe what the data should look like, I’m not forced to think of the data I want to use to tests my function.  I don’t know about you, but my tendency is to create data that works with my function instead of trying to create data that will break my function.  By having the framework create random data, I’m more likely to test with data that will break my code. &lt;/p&gt;
&lt;p&gt;And that leads to the second benefit of random data.  I’m more likely to find the edge cases for my function under test. Now, one detail I’ve left out is that each test you create gets run multiple times with different random data.  So, it isn’t like one day your tests work great and another day they fail.  No.  The system I use generates 100 different sets of data per tests.  You can have it create more or less tests as needed.&lt;/p&gt;
&lt;h2 id=&#34;Places-You-Might-Not-Use-Property-Based-Testing&#34;&gt;&lt;a href=&#34;#Places-You-Might-Not-Use-Property-Based-Testing&#34; class=&#34;headerlink&#34; title=&#34;Places You Might Not Use Property Based Testing&#34;&gt;&lt;/a&gt;Places You Might Not Use Property Based Testing&lt;/h2&gt;&lt;p&gt;Now, running 100 different permutations on a test that takes a long time to run may not be practical.  My first question would be, why does your code take that long?  Are you trying to unit test HTML code and the rendering is taking a long time?  That’s probably a poor use case. &lt;/p&gt;
&lt;p&gt;Another place where you might want to avoid property based tests is when you’ve already basically tested the component parts and you just need to do a sanity check in the integration of the parts.&lt;/p&gt;
&lt;h2 id=&#34;Places-You-Might-Use-Property-Based-Testing-Anyhow&#34;&gt;&lt;a href=&#34;#Places-You-Might-Use-Property-Based-Testing-Anyhow&#34; class=&#34;headerlink&#34; title=&#34;Places You Might Use Property Based Testing Anyhow&#34;&gt;&lt;/a&gt;Places You Might Use Property Based Testing Anyhow&lt;/h2&gt;&lt;p&gt;On the other hand, not having to come up with my own parameter values makes the whole Property Based Testing pretty attractive, even when it doesn’t make a lot of sense.  And it might encourage you to write smaller functions.&lt;/p&gt;
&lt;h2 id=&#34;Problems-I’ve-Run-Into&#34;&gt;&lt;a href=&#34;#Problems-I’ve-Run-Into&#34; class=&#34;headerlink&#34; title=&#34;Problems I’ve Run Into&#34;&gt;&lt;/a&gt;Problems I’ve Run Into&lt;/h2&gt;&lt;p&gt;I would say the biggest problem I’ve run into using Property Based Testing is learning how to write tests that don’t re-implement the logic in my code in order to test the logic in my code. &lt;/p&gt;
&lt;p&gt;Going back to the &lt;code&gt;add(a, b)&lt;/code&gt; example above.  It is tempting to test that function by verifying that &lt;code&gt;add(a, b) === a + b&lt;/code&gt;.  But that wouldn’t be a very good test because we used the same logic that is probably already being used inside the &lt;code&gt;add()&lt;/code&gt; function.  In example based testing (classic unit testing), we have the same problem, we just don’t use code to implement it.  We add the numbers in our head and verify that &lt;code&gt;add(a, b) = c&lt;/code&gt;.  But, &lt;code&gt;c&lt;/code&gt; is just &lt;code&gt;a + b&lt;/code&gt; done in our head. &lt;/p&gt;
&lt;p&gt;Which leads me back to, even though it is “harder” we end up with better tests.&lt;/p&gt;
&lt;h2 id=&#34;I’m-Probably-Doing-it-Wrong&#34;&gt;&lt;a href=&#34;#I’m-Probably-Doing-it-Wrong&#34; class=&#34;headerlink&#34; title=&#34;I’m Probably Doing it Wrong&#34;&gt;&lt;/a&gt;I’m Probably Doing it Wrong&lt;/h2&gt;&lt;p&gt;I’m so new to this way of thinking, that I’m pretty sure I’m doing everything wrong.  But, I figure I can take advantage of what I understand and as I write more tests, I’ll find more and better ways of writing tests.  I encourage you to pick up a property based framework for your development environment and give it a try.&lt;/p&gt;
&lt;h2 id=&#34;Resources&#34;&gt;&lt;a href=&#34;#Resources&#34; class=&#34;headerlink&#34; title=&#34;Resources:&#34;&gt;&lt;/a&gt;Resources:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//hypothesis.works/articles/what-is-property-based-testing/&#34;&gt;What is Property Based Testing?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//fsharpforfunandprofit.com/posts/property-based-testing/&#34;&gt;An Introduction to Property Based Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="tdd" />
        <category term="testing" />
        <category term="property based testing" />
        <updated>2018-01-23T11:30:24.000Z</updated>
    </entry>
</feed>
