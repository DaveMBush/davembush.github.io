<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://davembush.github.com</id>
    <title>Dave&#39;s Notebook • Posts by &#34;productivity&#34; tag</title>
    <link href="http://davembush.github.com" />
    <updated>2015-11-19T13:30:00.000Z</updated>
    <category term="project management" />
    <category term="code coverage" />
    <category term="tdd" />
    <category term="unit test" />
    <category term="code" />
    <category term="programming" />
    <category term="angular" />
    <category term="javascript" />
    <category term="performance" />
    <category term="react.js" />
    <category term="agile" />
    <category term="failure" />
    <category term="kanban" />
    <category term="scrum" />
    <category term="interview" />
    <category term="job search" />
    <category term="test driven development" />
    <category term="mvvm" />
    <category term="DRY" />
    <category term="loose coupling" />
    <category term="single responsibility" />
    <category term="c#" />
    <category term="learning" />
    <category term="bug" />
    <category term="ext js" />
    <category term="sencha" />
    <category term="career" />
    <category term="react" />
    <category term="ngrx" />
    <category term="redux" />
    <category term="functional" />
    <category term="reactive" />
    <category term="mvp" />
    <category term="private" />
    <category term="testing" />
    <category term="typescript" />
    <category term="routing" />
    <category term="pointers" />
    <category term="unsafe" />
    <category term="class diagram" />
    <category term="vb.net" />
    <category term="visual studio" />
    <category term="flux" />
    <category term="lazy loading" />
    <category term="scope" />
    <category term="DOM" />
    <category term="ionic" />
    <category term="putty" />
    <category term="ssh" />
    <category term="formgroup" />
    <category term="validation" />
    <category term="angular-cli" />
    <category term="modules" />
    <category term="ngmodule" />
    <category term="observables" />
    <category term="RxJS" />
    <category term="model driven" />
    <category term="reactive forms" />
    <category term="estimating" />
    <category term="story points" />
    <category term="best practices" />
    <category term="design patterns" />
    <category term="architecture" />
    <category term="asp.net" />
    <category term="memory" />
    <category term="angular.js" />
    <category term="iis" />
    <category term="ajax" />
    <category term="json" />
    <category term="controller" />
    <category term="MVC" />
    <category term="view" />
    <category term="404" />
    <category term="application_error" />
    <category term="exceptions" />
    <category term="viewstate" />
    <category term="archietcture" />
    <category term="bll" />
    <category term="dal" />
    <category term="Three Tiered" />
    <category term=".net" />
    <category term="enums" />
    <category term="tutorial" />
    <category term="code quality" />
    <category term="cyclomatic" />
    <category term="halstead" />
    <category term="child component" />
    <category term="CefSharp" />
    <category term="Chromium" />
    <category term="Vista" />
    <category term="VPN" />
    <category term="xp" />
    <category term="get" />
    <category term="properties" />
    <category term="set" />
    <category term="empty" />
    <category term="string" />
    <category term="habits" />
    <category term="application testing" />
    <category term="dependency injection" />
    <category term="debugging" />
    <category term="cms" />
    <category term="dotnetnuke" />
    <category term="WordPress" />
    <category term="authority" />
    <category term="confidence" />
    <category term="datalist" />
    <category term="listview" />
    <category term="comments" />
    <category term="tdd. agile" />
    <category term="bootstrap" />
    <category term="copy &amp;amp; paste" />
    <category term="cross browser" />
    <category term="idisposable" />
    <category term="animation" />
    <category term="css" />
    <category term="html" />
    <category term="debug" />
    <category term="checked" />
    <category term="double" />
    <category term="float" />
    <category term="int" />
    <category term="long" />
    <category term="short" />
    <category term="unchecked" />
    <category term="currency" />
    <category term="decimal" />
    <category term="floating point math" />
    <category term="single" />
    <category term="authentication" />
    <category term="isinrole" />
    <category term="roles" />
    <category term="user" />
    <category term="definition of done" />
    <category term="DoD" />
    <category term="dispose" />
    <category term="finalize" />
    <category term="suppressfinalize" />
    <category term="education" />
    <category term="client side" />
    <category term="development" />
    <category term="class" />
    <category term="dynamic classing" />
    <category term="gridview" />
    <category term="college" />
    <category term="freshman" />
    <category term="babel" />
    <category term="es2015" />
    <category term="es6" />
    <category term="jest" />
    <category term="bdd" />
    <category term="Single Responsibility" />
    <category term="Architecture" />
    <category term="full stack developer" />
    <category term="web development" />
    <category term="formsauthentication" />
    <category term="manual" />
    <category term="redirectfromloginpage" />
    <category term="setauthcookie" />
    <category term="NgRX" />
    <category term="luck" />
    <category term="social skills" />
    <category term="brain" />
    <category term="health" />
    <category term="programmer" />
    <category term="productivity" />
    <category term="QA" />
    <category term="extreme programming" />
    <category term="software" />
    <category term="httpcontext" />
    <category term="items" />
    <category term="session" />
    <category term="naming conventions" />
    <category term="variables" />
    <category term="self improvement" />
    <category term="301" />
    <category term="302" />
    <category term="fiddler" />
    <category term="infinite loop" />
    <category term="images" />
    <category term="iTextSharp" />
    <category term="PDF" />
    <category term="concatenation" />
    <category term="quirks" />
    <category term="parsing" />
    <category term="xhtml" />
    <category term="fonts" />
    <category term="stack" />
    <category term="htmltidy" />
    <category term="tables" />
    <category term="acrofields" />
    <category term="form fields" />
    <category term="outputstream" />
    <category term="pdfreader" />
    <category term="pdfstamper" />
    <category term="bind" />
    <category term="callbacks" />
    <category term="currying" />
    <category term="events" />
    <category term="business rules" />
    <category term="boolean" />
    <category term="fields" />
    <category term="methods" />
    <category term="object" />
    <category term="functions" />
    <category term="inheritance" />
    <category term="prototype" />
    <category term="hoist" />
    <category term="falsy" />
    <category term="truthy" />
    <category term="istanbul" />
    <category term="jasmine" />
    <category term="hoisting" />
    <category term="types" />
    <category term="type conversion" />
    <category term="dialog" />
    <category term="jQuery" />
    <category term="validation controls" />
    <category term="async" />
    <category term="each" />
    <category term="collapse" />
    <category term="expand" />
    <category term="load" />
    <category term="partial content" />
    <category term="tooltip" />
    <category term="regions" />
    <category term="limiting beliefs" />
    <category term="angular material" />
    <category term="linkedin" />
    <category term="social media" />
    <category term="tips" />
    <category term="CI. Continuous Integration" />
    <category term="magic numbers" />
    <category term="magic strings" />
    <category term="flex" />
    <category term="multiview" />
    <category term="wizard" />
    <category term="threading" />
    <category term="intern" />
    <category term="express" />
    <category term="node" />
    <category term="nunit" />
    <category term="object initializers" />
    <category term="video" />
    <category term="reflection" />
    <category term="unity" />
    <category term="best practice" />
    <category term="asp.net postback button" />
    <category term="iText" />
    <category term="property based testing" />
    <category term="cli" />
    <category term="software architecture" />
    <category term="rxjs. angular 2" />
    <category term="redirect" />
    <category term="response" />
    <category term="responsive design" />
    <category term="parallel" />
    <category term="selenium" />
    <category term="Marble Testing" />
    <category term="java" />
    <category term="grid" />
    <category term="hub" />
    <category term="serialization" />
    <category term="specflow" />
    <category term="like" />
    <category term="sql" />
    <category term="tsql" />
    <category term="where clause" />
    <category term="do while" />
    <category term="for next" />
    <category term="ms-sql" />
    <category term="while" />
    <category term="gamification" />
    <category term="paired programming" />
    <category term="reference types" />
    <category term="stringbuilder" />
    <category term="value types" />
    <category term="technical debt" />
    <category term="activetabindex" />
    <category term="postback" />
    <category term="tab control" />
    <category term="tabcontrol" />
    <category term="kata" />
    <category term="extjs" />
    <category term="email" />
    <category term="mailaddress" />
    <category term="mailmessage" />
    <category term="smtpclient" />
    <category term="Quality" />
    <category term="behavior" />
    <category term="psychology" />
    <category term="portal" />
    <category term="web 1.0" />
    <category term="web 2.0" />
    <category term="trace" />
    <category term="compiler" />
    <category term="errror" />
    <category term="warning" />
    <category term="connection string" />
    <category term="dataset" />
    <category term="error" />
    <category term="web.config" />
    <category term="tslint" />
    <category term="emotions" />
    <category term="hiring" />
    <category term="aspnet_regsql" />
    <category term="forms based authentication" />
    <category term="jsdom" />
    <category term="karma" />
    <category term="noTDD" />
    <category term="bundling" />
    <category term="gulp" />
    <category term="minification" />
    <category term="node.js" />
    <category term="file upload" />
    <category term="objects" />
    <category term="hide" />
    <category term="vb.net attributes" />
    <category term="nothing" />
    <category term="nullable" />
    <category term="conditional startup" />
    <category term="windows forms" />
    <category term="winforms" />
    <category term="char" />
    <category term="split" />
    <category term="strict" />
    <category term="clarity" />
    <category term="ui" />
    <category term="ux" />
    <category term="asmx" />
    <category term="error handling" />
    <category term="webservice" />
    <category term="binary" />
    <category term="bitwise" />
    <category term="operators" />
    <category term="automation" />
    <category term="browser" />
    <category term="mstest" />
    <category term="immutable" />
    <category term="global" />
    <category term="await" />
    <category term="webapi" />
    <category term="configuration" />
    <category term="devops" />
    <category term="testcasedata" />
    <category term="testcasesource" />
    <category term="closure" />
    <category term="loops" />
    <category term="certification" />
    <category term="mcsd" />
    <category term="microsoft" />
    <category term="inversion of control" />
    <category term="ioc" />
    <category term="casting" />
    <category term="convert" />
    <category term="arguements" />
    <category term="command line" />
    <category term="main" />
    <category term="yagni" />
    <category term="npm" />
    <category term="nvm" />
    <category term="resumes" />
    <category term="change-detection" />
    <category term="state-management" />
    <category term="web-workers" />
    <category term="libraries" />
    <category term="strong typing" />
    <category term="linting" />
    <category term="constructors" />
    <category term="clean code" />
    <category term="smart-ngrx" />
    <category term="ngrx-store" />
    <category term="ngrx-entity" />
    <category term="ngrx-effects" />
    <category term="TypeScript" />
    <category term="Performance" />
    <entry>
        <id>http://davembush.github.com/how-to-be-personally-agile/</id>
        <title>How to be (Personally) Agile</title>
        <link rel="alternate" href="http://davembush.github.com/how-to-be-personally-agile/"/>
        <content type="html">&lt;p&gt;When I first wrote down the idea for this post, I was originally thinking about how we might use agile development practices in a work place that practices Water Fall or worse.  But since then, I’ve expanded my thinking to include the concept of using agile everywhere, including where it “isn’t allowed.” Here’s what I’m talking about.  What does your work environment look like?  Many of the places I end up working either are using no formal process at all, or weakly attempt some form of Scrum or Water Fall.  In fact, my current major gig has a “project manager” (I use the term loosely) that manages our project with MS Project.  There is not even a formal issue tracking system.  And this is at a very LARGE organization that SHOULD know better.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/11/image1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Agile-in-an-Anti-Agile-Environment&#34;&gt;&lt;a href=&#34;#Agile-in-an-Anti-Agile-Environment&#34; class=&#34;headerlink&#34; title=&#34;Agile in an Anti-Agile Environment&#34;&gt;&lt;/a&gt;Agile in an Anti-Agile Environment&lt;/h2&gt;&lt;h3 id=&#34;Kanban-Board&#34;&gt;&lt;a href=&#34;#Kanban-Board&#34; class=&#34;headerlink&#34; title=&#34;Kanban Board&#34;&gt;&lt;/a&gt;Kanban Board&lt;/h3&gt;&lt;p&gt;Now, I’m not saying I’m the most organized guy on the planet.  In fact, in an environment like this, it would be easy to just go with the flow.  But I know me well enough to know that if I don’t have a place to keep track of the task I need to accomplish, something will fall through the cracks.  So, I got permission to use &lt;a href=&#34;/trello&#34;&gt;Trello&lt;/a&gt; along with the &lt;a href=&#34;/plusForTrello&#34;&gt;Plus for Trello&lt;/a&gt; plugin on Chrome so that I can at least track the task that have been assigned to me.&lt;/p&gt;
&lt;p&gt;Trello, for those who don’t know, allows you to setup a basic Kanban board and configure it any way you would like.  From the basic, “To do”, “In Progress”, “Done” format to something more in line with your actual work flow.  For this project, I have “Back Log”, “On Hold”, “Up Next”, “In Progress”, “Done This Week” and “Done”.  Yeah, that’s a lot of columns.  But I want to be able to keep track of where my task are at that level.  The beauty of Trello is that you can configure it however you want.&lt;/p&gt;
&lt;p&gt;Plus For Trello builds on that and allows you to add estimates to each of your Trello Cards.  While they refer to the estimate as “hours” I just translate that to “Effort Points” and track how much effort I think I’ve completed rather than how many hours I’ve actually worked.&lt;/p&gt;
&lt;p&gt;Between the two, I can track how far along in the project I am, how many effort points I tend to complete each week, and I’m the only one on the team who can give a reasonable guess as to when I will be done with this project I am working on.  And when I need to change the estimates, I can show when they changed and why.&lt;/p&gt;
&lt;h3 id=&#34;Productivity-Hacks&#34;&gt;&lt;a href=&#34;#Productivity-Hacks&#34; class=&#34;headerlink&#34; title=&#34;Productivity Hacks&#34;&gt;&lt;/a&gt;Productivity Hacks&lt;/h3&gt;&lt;p&gt;But agile isn’t just about Kanban boards and accurate estimates.  Agile is about becoming better.  So, what are some ways you can become better at work without being any more disruptive than you have to be?  Here are some ways that have been effective for me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use the Pomodoro technique&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;/pomodoro&#34;&gt;Pomodoro&lt;/a&gt; technique is a technique that has you highly focused on the task at hand for 25 minutes at a time.  No interruptions for email, social media, coffee.  That’s for the breaks or their own Pomodoro.  After 25 minutes of work, you get a 5 minute break.  Sometimes I just sit in my chair and close my eyes.  Kind of a mini nap.  The routine has you do 4 Pomodoros and then rest for 15 minutes instead of 5.  If you take a lunch, you should take your lunch break during one of the longer Pomodoros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Avoid Distractions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don’t know about you, but the last time I had the luxury of an office was 2.5 years ago when I was working from home.  I miss those days.  But now I close my virtual door by putting on headphones and listening to &lt;a href=&#34;//t.co/EgPhHCQqLE&#34;&gt;this Pandora station that I created&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Batch E-mail&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As I said before, don’t check email while you are working.  I check mine during the Pomodoro breaks.  If you get more than what you can handle during the breaks you should create a Pomodoro for them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Schedule Your Day!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OK, this may or may not work for you depending on your environment.  But, it is worth a try.  Personally, I know that my best hours are in the morning and that I start losing my concentration around 1:30.  I start my day at around 7am.  Ideally, if you want me to be productive, you won’t schedule meetings prior to 1:30.  So, I went into outlook and scheduled myself as “Busy” from 7am to 1:30pm.  Now when someone looks to see when I am available, they will see that I am available from 1:30 to 3:30.&lt;/p&gt;
&lt;p&gt;You might object that this is not being honest.  But I would argue that it is if you honestly believe that keeping appointments with yourself is as important as keeping appointments with other people.  It is just a matter of perspective.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Turn Off Your Phone&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;OK, I’m assuming you are all programmers and not sales people.  But, I would go so far as to say that the only time you should answer your phone is when you have an appointment.  I stopped answering my phone YEARS ago.  Most of the calls that I got were either sales calls or recruiters.  Then I finally got smart and created a silent ring tone for my phone.  That is my default ring tone.  And my default vibrate pattern is no vibration at all.  I don’t even know that my phone rang until I look at my phone and it says I have a missed call.&lt;/p&gt;
&lt;p&gt;But, I can hear you say, I might miss something important.  Well, yes, there are calls that I don’t want to miss.  For those, I assign real ring tones.  Everyone in my family and some VERY close friends, all get a real ring tone that makes a sound.&lt;/p&gt;
&lt;p&gt;What about potential clients?  Well, first I schedule the call via email, if I even determine it is necessary, and second I ask for the number they will be calling from so that I can assign a ring tone to that number.&lt;/p&gt;
&lt;p&gt;I wish I could do something similar with my desk phone at work.  I answered it yesterday only to have it be a sales call.  I should have known better!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;Agile-Home&#34;&gt;&lt;a href=&#34;#Agile-Home&#34; class=&#34;headerlink&#34; title=&#34;Agile Home&#34;&gt;&lt;/a&gt;Agile Home&lt;/h2&gt;&lt;p&gt;There is a whole course on PluralSight about being an Agile Family.  I’m not talking about that.  I’m talking about being personally Agile at home just like I am suggesting that you can be personally Agile at work, regardless of the environment.&lt;/p&gt;
&lt;h3 id=&#34;Kanban-Again&#34;&gt;&lt;a href=&#34;#Kanban-Again&#34; class=&#34;headerlink&#34; title=&#34;Kanban Again&#34;&gt;&lt;/a&gt;Kanban Again&lt;/h3&gt;&lt;p&gt;Yep, I use Trello at home too.  But not the Plus for Trello plugin.  At least not yet.  I have a list that keeps track of my exercise rotation.  I have a list for Saturday.  I have a list of chores I need to do.  I have others, but those are the ones that I use regularly.&lt;/p&gt;
&lt;h3 id=&#34;Schedules&#34;&gt;&lt;a href=&#34;#Schedules&#34; class=&#34;headerlink&#34; title=&#34;Schedules&#34;&gt;&lt;/a&gt;Schedules&lt;/h3&gt;&lt;p&gt;I schedule my whole day.  This probably sounds more extreme than it is.  I was finding that not having a schedule, especially after work, was actually preventing me from getting stuff done that I really wanted to get done.&lt;/p&gt;
&lt;p&gt;Here are tips for scheduling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If you really want something to get done, schedule it.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t schedule every last minute&lt;/strong&gt;. For example, I know it generally takes me 45 minutes to get home.  But I also know bad traffic could make that longer.  So I don’t plan the next activity after work until 4:45.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Schedule your Kanban list&lt;/strong&gt;. I’m assuming your Kanban list are projects that you want to get done.  Well, if you really want them to get done, when are you going to work on them?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t try to do too much&lt;/strong&gt;. Once I started scheduling, I realized I was trying to accomplish way more than was physically possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Schedules are a great way for you to determine, ahead of time, what is most important to you.  Once that decision has been made, it is just a matter of execution.  If there are other things you’d like to be able to do, put them on the back log.&lt;/p&gt;
&lt;h2 id=&#34;The-Point&#34;&gt;&lt;a href=&#34;#The-Point&#34; class=&#34;headerlink&#34; title=&#34;The Point&#34;&gt;&lt;/a&gt;The Point&lt;/h2&gt;&lt;p&gt;So what’s the point of all of this?  Don’t wait on someone else.  You can be agile even if&amp;#x2F;when others aren’t.&lt;/p&gt;
</content>
        <category term="agile" />
        <category term="productivity" />
        <updated>2015-11-19T13:30:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/the-fallacy-of-motion/</id>
        <title>The Fallacy of Motion</title>
        <link rel="alternate" href="http://davembush.github.com/the-fallacy-of-motion/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/07/image1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;I had this thought this past week that we tend to believe that if we are in motion, we are accomplishing something.  That being busy somehow equals being productive.  And then I started thinking about how this is almost universal.  It doesn’t just impact how we program, which I’ll get to eventually, but it impacts all of our life.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Let-Me-Illustrate&#34;&gt;&lt;a href=&#34;#Let-Me-Illustrate&#34; class=&#34;headerlink&#34; title=&#34;Let Me Illustrate&#34;&gt;&lt;/a&gt;Let Me Illustrate&lt;/h2&gt;&lt;p&gt;Have you ever driven to some location and had your favorite GPS system route you multiple ways?  How many of you take the route that is, according to your GPS, longer, just because the roads are 65mph instead of 45mph?  Or an even better example.  You hit a traffic jam and, even though ever indication is that you’ll be out of the traffic in a few minutes, you take an alternate route simply because the traffic is moving on that other road.  In both cases you probably know that you won’t get to your destination any faster, in fact you may get to your destination slower, but you still opt to take the moving route instead of the one that isn’t moving or is moving relatively slowly.  I’ve even heard people say… shoot I’ve even said… “I want to take this route because it moves faster.”  I like FEELING like I’m getting to my destination faster even if the reality is that I’m not.&lt;/p&gt;
&lt;p&gt;And then there is the issue of your job.  How many of you have to look busy for your peers to think that you ARE busy?  But as programmers, how true is that?  Unless you do some kind of unskilled labor, I doubt it is true of most people who work.  And yet, because we are all paid by the hour (yes, even those of you who are salaried are still trading hours for dollars) there is a perception that, somehow, if we are not in motion, we are not really working.  But is that true? I remember hearing a story about a programmer who spent half his day “staring at the ceiling” who was twice as productive as any of his peers.  Why is that?  Because he spent half his day thinking about the problem before he ever started writing a line of code.&lt;/p&gt;
&lt;p&gt;I remember back in the day when I was coding on 8088 computers, a compile and link cycle could take up to 10 minutes.  Because I recompile and test every time I’m made a runnable change, I had a lot of 10 minute breaks.  I used this time to think about the problem I was working on.  This was not intentional, it just happened naturally.  I think it made me more productive than if I were just churning code all day long at the speed our computers work today.&lt;/p&gt;
&lt;p&gt;And then there is this side project I’m working on.  I tend to work on it a half hour at a time as I have time.  Between my main gig that takes up 40 hours a week, and some side gigs that I have, I have a very small amount of time to work on this project.  Some days I don’t work on it simply because I’m too tired.  But sometimes, even when I’m not sitting in front of my computer, I’ll sit on my sofa doing nothing and think about the project.  It is in those times that I figure out where I want to take the project next, or how to solve a problem I’ve run into.  That time thinking, even though there is no motion, has made the resulting code that much better.&lt;/p&gt;
&lt;h2 id=&#34;The-Fallacy-of-Motion-and-Testing&#34;&gt;&lt;a href=&#34;#The-Fallacy-of-Motion-and-Testing&#34; class=&#34;headerlink&#34; title=&#34;The Fallacy of Motion and Testing&#34;&gt;&lt;/a&gt;The Fallacy of Motion and Testing&lt;/h2&gt;&lt;p&gt;I’m sure you saw this coming, but one has to ask, is it the fallacy of motion that prevents us from testing our code? At my main gig, I have to admit, I’m bored.  There are a lot of reasons for this.  But one of them is that I spend a lot of time waiting for integrations tests to run to verify that my code is still working.  To be clear, I have way more unit test than integration test at this point.  But with the changes I’m currently making to the system, I’m more likely to find issues via the integration tests than I am from the unit tests.&lt;/p&gt;
&lt;p&gt;Compare this to a project I’m working on for another client where I’m primarily writing new code.  I’m a lot less bored.  The day zips by.  I FEEL more productive.&lt;/p&gt;
&lt;p&gt;And yet, the degree of certainty I have that the code I wrote for my main gig works as I designed it to work is a lot higher than the code I’m currently writing because I have more tests.&lt;/p&gt;
&lt;p&gt;This past week those tests actually showed me that my change wasn’t working entirely the way I wanted it to.  I probably would not have found it any other way.  I’m not even sure the people testing my code would have found it.  They aren’t those kind of testers.  And so I’ve proven to myself one more time that testing, while it feels slower, really is not just the right thing to do, but ultimately the faster thing to do.&lt;/p&gt;
&lt;p&gt;Think about what would have happened if I didn’t have these tests in place.  I would have released the code, eventually the bug would have revealed itself, and I would be left scrambling to fix the bug.  As it is, I was able to fix the bug in a somewhat leisurely manner because I found it early.&lt;/p&gt;
&lt;p&gt;And yet, I don’t FEEL productive.  As much as I’m convinced that Test Driven Development is the right way to go, I still struggle with this Fallacy of Motion.&lt;/p&gt;
&lt;h2 id=&#34;We-Don’t-Have-Time-to-Test&#34;&gt;&lt;a href=&#34;#We-Don’t-Have-Time-to-Test&#34; class=&#34;headerlink&#34; title=&#34;We Don’t Have Time to Test&#34;&gt;&lt;/a&gt;We Don’t Have Time to Test&lt;/h2&gt;&lt;p&gt;I heard this again this past week.  “When you are working on a project with a tight deadline, you can’t always test because you don’t have enough time.” What?! Is this the Fallacy of Motion at work again? I would argue that it is precisely BECAUSE you are working under a tight deadline that you NEED to write test.&lt;/p&gt;
&lt;p&gt;Think about this, you have this tight deadline.  Great.  So you are not going to think clearly.  You are going to rush.  You will write incomplete code.  Your methods won’t verify input parameters.  You’ll have null pointer exceptions.  Your code will do what it is supposed to do, but will it not do what it shouldn’t do?  How will you know?  And who is going to catch the bug? Well we know the answer to that last question.  The people using your code will catch the bug.  This will make you look like an idiot.  You are because it is something that should have been caught.  It will also mean that you’ll need to track down the problem, fix the problem, and re-deploy the software.  And this is faster?  Faster than what?! Of course, “We don’t have time to do it right, but we always have time to do it over.”&lt;/p&gt;
&lt;h2 id=&#34;Slow-and-Steady&#34;&gt;&lt;a href=&#34;#Slow-and-Steady&#34; class=&#34;headerlink&#34; title=&#34;Slow and Steady&#34;&gt;&lt;/a&gt;Slow and Steady&lt;/h2&gt;&lt;p&gt;So, slow down.  Do things right.  Remember the story of the tortoise and the hare.  The race doesn’t always go to the fastest but the one who is steady and persistent.  The one who doesn’t cut corners.  The one who consistently produces solid code.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="testing" />
        <category term="productivity" />
        <updated>2015-07-23T10:00:00.000Z</updated>
    </entry>
</feed>
