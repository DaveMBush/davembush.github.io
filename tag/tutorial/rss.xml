<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;tutorial&#34; tag</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Thu, 29 Nov 2007 08:20:09 -0500</pubDate>
        <lastBuildDate>Thu, 29 Nov 2007 08:20:09 -0500</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/the-vb-net-ternary-operator/</guid>
            <title>The VB.NET Ternary Operator</title>
            <link>http://davembush.github.com/the-vb-net-ternary-operator/</link>
            <category>vb.net</category>
            <category>visual studio</category>
            <category>tutorial</category>
            <pubDate>Thu, 29 Nov 2007 08:20:09 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I think the VB.NET Ternary Operator may be the last operator that I really miss in VB.NET from my curly brace language experience.  Although, I have to admit, I wouldn’t have missed it all that much if they never added it.  There just isn’t a whole lot of use for it.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;However, the Ternary operator is a REALLY nice feature to have available to you when you do need it.  It’s another one of those language features that falls under, “Just because it is there doesn’t mean you have to use it.”&lt;/p&gt;
&lt;p&gt;If you’ve ever run into a situation where you just need a simple evaluation and assign a variable based on it.  Like this:&lt;/p&gt;
&lt;figure class=&#34;highlight vb&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;Dim&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;As&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;If&lt;/span&gt; Session(&lt;span class=&#34;string&#34;&gt;&amp;quot;mySessionVar&amp;quot;&lt;/span&gt;) &lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;Then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    s = &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;.Empty&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;Else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    s = Session(&lt;span class=&#34;string&#34;&gt;&amp;quot;mySessionVar&amp;quot;&lt;/span&gt;).ToString()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;If&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;you’ll appreciate the new Ternary operator which shrinks it to:&lt;/p&gt;
&lt;figure class=&#34;highlight vb&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;Dim&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;As&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s = &lt;span class=&#34;keyword&#34;&gt;If&lt;/span&gt;(Session(&lt;span class=&#34;string&#34;&gt;&amp;quot;mySessionVar&amp;quot;&lt;/span&gt;) &lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;Nothing&lt;/span&gt;, _&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;.Empty, Session(&lt;span class=&#34;string&#34;&gt;&amp;quot;mySessionVar&amp;quot;&lt;/span&gt;).ToString)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Note that this NOT the same as&lt;/p&gt;
&lt;figure class=&#34;highlight vb&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;Dim&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;As&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s = IIf(Session(&lt;span class=&#34;string&#34;&gt;&amp;quot;mySessionVar&amp;quot;&lt;/span&gt;) &lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;Nothing&lt;/span&gt;, _&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;.Empty, Session(&lt;span class=&#34;string&#34;&gt;&amp;quot;mySessionVar&amp;quot;&lt;/span&gt;).ToString)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the difference between the two.&lt;/p&gt;
&lt;p&gt;IIf will always evaluate the second and third parameter regardless of if the first parameter evaluates to true or false.  This is because IIf is a function, not an operator.&lt;/p&gt;
&lt;p&gt;If is an operator, and therefore only evaluates the second OR third parameter when they are the value that will ultimately be returned.  So, If() will run my code above without any errors while IIf will throw a null pointer exception when Session(“mySessionVar”) evaluates to nothing because it will try to apply ToString() to the object that is null.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/object-initialization-in-csharp-3-0-and-vb-net-9/</guid>
            <title>Object Initialization in CSharp 3.0 and VB.NET 9</title>
            <link>http://davembush.github.com/object-initialization-in-csharp-3-0-and-vb-net-9/</link>
            <category>c#</category>
            <category>vb.net</category>
            <category>visual studio</category>
            <category>tutorial</category>
            <category>object initializers</category>
            <category>video</category>
            <pubDate>Wed, 28 Nov 2007 09:24:13 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Yesterday we looked at the new var keyword in CSharp.  This makes CSharp variable declaration similar to VB.  After all, they’ve had the DIM keyword for years which essentially does the same thing.&lt;/p&gt;
&lt;p&gt;Today, we’re going to look at object initializers, which have been added to both CSharp and VB.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Let’s say we have a class named, “Customer” with the properties: FirstName, LastName, Address, City, and State.  If you wanted to initialize those properties as part of the object creation process you basically had two choices.  You could create a constructor with each of the properties represented as a parameter, or you could use the default constructor and then initialize each property individually immediately after you instantiate the object.  Using CSharp, that process would look something like:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Customer c = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Customer()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c.FirstName = &lt;span class=&#34;string&#34;&gt;&amp;quot;Dave&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c.LastName = &lt;span class=&#34;string&#34;&gt;&amp;quot;Bush&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;in VB you could write code similar to the CSharp code above, with obvious syntax changes for VB, or you could use the WITH keyword to simplify it.&lt;/p&gt;
&lt;figure class=&#34;highlight vb&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;Dim&lt;/span&gt; c &lt;span class=&#34;keyword&#34;&gt;As&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;New&lt;/span&gt; Customer()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;With&lt;/span&gt; c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .FirstName = &lt;span class=&#34;string&#34;&gt;&amp;quot;Dave&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .LastName = &lt;span class=&#34;string&#34;&gt;&amp;quot;Bush&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;With&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The new versions of these languages make the initialization process a bit easier.  Now, your CSharp code can look like:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Customer c = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Customer()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FirstName = &lt;span class=&#34;string&#34;&gt;&amp;quot;Dave&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LastName = &lt;span class=&#34;string&#34;&gt;&amp;quot;Bush&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;and your VB code can look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight vb&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;Dim&lt;/span&gt; c &lt;span class=&#34;keyword&#34;&gt;As&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;New&lt;/span&gt; Customer() &lt;span class=&#34;keyword&#34;&gt;With&lt;/span&gt; &amp;#123; _&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .FirstName = &lt;span class=&#34;string&#34;&gt;&amp;quot;Dave&amp;quot;&lt;/span&gt;, _&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .LastName = &lt;span class=&#34;string&#34;&gt;&amp;quot;Bush&amp;quot;&lt;/span&gt; _&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Keep in mind that the code that I just wrote compiles into the code I wrote using the old syntax.  This means that we can use this syntax in Visual Studio 2008 even if we are writing code for .NET 2.0.  Secondly, this means that it would still be faster to use the constructor with parameters if it is available.&lt;/p&gt;
&lt;p&gt;My fear is that some of the new features in the compilers will allow lazy programmers to write crappy code.  The point of the object initialization syntax is not to help you avoid creating parameterized constructors.  The point is to make your coding life easier when, and only when, the proper parameterized constructors do not exist.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/csharp-adds-the-var-keyword/</guid>
            <title>CSharp adds the var keyword!</title>
            <link>http://davembush.github.com/csharp-adds-the-var-keyword/</link>
            <category>c#</category>
            <category>visual studio</category>
            <category>tutorial</category>
            <pubDate>Tue, 27 Nov 2007 07:56:11 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;There have been several new features added to the CSharp language that will significantly reduce the amount of code that ends up in our source files.  It will not significantly reduce the amount of code that we have to write. One of those language features is the ability to create properties, &lt;a href=&#34;/2007/11/22/simple-properties-in-c-35/&#34; title=&#34;Simple properties in CSharp&#34;&gt;which we looked at last week.&lt;/a&gt; Another of those features is the new var keyword. So, instead of writing:&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;MyClass c = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyClass();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;  you can now write:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; c = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyClass();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Which isn’t a lot of code until you start qualifying the Class name with namespaces.&lt;/p&gt;
&lt;p&gt;During the beta cycle, I saw a demo that let you declare a variable, var c, and then several lines later initialize it with, new MyClass(), which gave the appearance that var was more like the var keyword in javascript, and therefore a variant than what it really is.&lt;/p&gt;
&lt;p&gt;In the release version of CSharp 3.0, if you use the var keyword to declare a variable, you MUST initialize it on the same line, or you will get a compiler error.  I suppose it makes writing the compiler a whole lot easier this way too.&lt;/p&gt;
&lt;p&gt;One other small thing to note, which should be obvious by now.  Since we have to initialize the variable to some object or value, and since we can’t initialize it anywhere other than on the line it is declared on, you can’t treat the variable as a variant.  A variable declared as var is as strongly typed as any other variable you would create.  So, if I did something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; c = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyClass();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c = &lt;span class=&#34;string&#34;&gt;&amp;quot;Some string here&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I would get a compiler error because I’m trying to assign a string type to a MyClass variable.  &lt;code&gt;var&lt;/code&gt; does not stand for “variant,” it stands for “variable.”  All the compiler does when it sees this is look at the type being assigned to the variable and replaces the var keyword with that type.&lt;/p&gt;
&lt;p&gt;So, when the compiler processes the code, it takes this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; c = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyClass();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;and turns it into this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;MyClass c = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyClass();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Finally, it may be helpful to point out here that this whole process happens at compile time.  This should be obvious by the fact that this works in both .NET 2.0 code compiled with the CSharp 3.0 compiler as well as .NET 3.x code.  But, sometimes the obvious isn’t obvious until someone states it explicitly.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/simple-properties-in-c-3-5/</guid>
            <title>Simple Properties in C# 3.5</title>
            <link>http://davembush.github.com/simple-properties-in-c-3-5/</link>
            <category>c#</category>
            <category>visual studio</category>
            <category>tutorial</category>
            <pubDate>Thu, 22 Nov 2007 05:49:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;It’s such a little thing.  But, how much of our CSharp code looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; _propertyName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; PropertyName&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; _propertyName; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt; &amp;#123; _propertyName = &lt;span class=&#34;keyword&#34;&gt;value&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;When I teach other programmers how to use CSharp (or VB) I always stress the importance of using properties instead of public member variables.  You never know when you’ll want your set to do some sort of validation and just about all of the databinding stuff requires us to use properties instead of member variables.  But, that’s a lot of code to write when all you want to do is wrap a member variable. Well, in CSharp 3.5, life just got a lot sweeter.  That code above just got replace with this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; PropertyName &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;; &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can still use the code above if you want to.  But, why write all that code, even if you write it using a code snippet, when you can just write that one line?&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/assign-multiple-enum-values-to-one-variable/</guid>
            <title>Assign Multiple enum Values To One Variable</title>
            <link>http://davembush.github.com/assign-multiple-enum-values-to-one-variable/</link>
            <category>.net</category>
            <category>enums</category>
            <category>tutorial</category>
            <pubDate>Fri, 02 Nov 2007 07:56:52 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I saw this question and immediately thought, “You can’t!  An Enum is an Integer that has been restricted to the values it can accept.”&lt;/p&gt;
&lt;p&gt;And I was basically right.  But, I forgot that even with an integer you can do the following in CSharp:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/03/image-2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And in VB.NET&lt;/p&gt;
&lt;figure class=&#34;highlight vb&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;Dim&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;As&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Or&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;To end up with a variable i equal to 3 because both do bitwise ands.&lt;/p&gt;
&lt;p&gt;So if I had an enumerated value&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;enum&lt;/span&gt; F &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thing1 = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thing2 = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thing3 = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Or, in VB.NET&lt;/p&gt;
&lt;figure class=&#34;highlight vb&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;Enum&lt;/span&gt; F&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thing1 = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thing2 = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thing3 = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;Enum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;``&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;You could &lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; the following &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; CSharp:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;``` csharp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;F fvar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fvar = F.thing1 | F.thing2;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Or you could do it in VB.NET like this:&lt;/p&gt;
&lt;figure class=&#34;highlight vb&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;Dim&lt;/span&gt; fvar &lt;span class=&#34;keyword&#34;&gt;As&lt;/span&gt; F = F.thing1 &lt;span class=&#34;built_in&#34;&gt;Or&lt;/span&gt; F.thing2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There’s just one small problem with doing all of this. &lt;/p&gt;
&lt;p&gt;If you evaluate fvar, you see that it is equal to 3 because we did not define 3 to be a specific value in our enumeration.  However, by adding the Flags attribute to our enum definition:&lt;/p&gt;
&lt;figure class=&#34;highlight fsharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[Flags]&lt;span class=&#34;built_in&#34;&gt;enum&lt;/span&gt; F &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thing1 &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thing2 &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thing3 &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Or&lt;/p&gt;
&lt;figure class=&#34;highlight vb&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;Flags()&amp;gt; _Enum F&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thing1 = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thing2 = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thing3 = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;Enum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;fvar will evaluate to:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;thing1 | thing2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;in CSharp and in VB.NET…&lt;/p&gt;
&lt;p&gt;Well, in VB.NET it still evaluates to 3.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/asp-net-gridview-edit-all-rows-at-once/</guid>
            <title>ASP.NET GridView Edit All Rows At Once</title>
            <link>http://davembush.github.com/asp-net-gridview-edit-all-rows-at-once/</link>
            <category>asp.net</category>
            <category>tutorial</category>
            <category>gridview</category>
            <pubDate>Tue, 30 Oct 2007 07:23:15 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I just saw a question about this yesterday and realized that while I know how to do this, not everyone does.  So, here we go…&lt;/p&gt;
&lt;p&gt;Here’s the problem.  You want to be able to edit all the rows in the gridview at once instead of having to switch to edit mode and save one row at the time.  Normally, you’d want to do this when only a couple of items need to be changed per row and not the entire row’s worth of data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/03/image-1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/tico24/16673795/&#34;&gt;tico_24&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt;CC BY&lt;/a&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;You can do this easily if you make the columns that need to be edited templated columns and place editable controls in them (checkbox, textbox, etc)  You can then either make these controls “AutoPostback” controls, or you can provide a control at the bottom of the screen that triggers the update.  In either case, the code you are going to write at the codebehind level is going to be the same.&lt;/p&gt;
&lt;p&gt;For this example, we are going to assume that you only have one column that needs to be updated and that the control is a checkbox control.&lt;/p&gt;
&lt;p&gt;One of the issues you are going to run into with this is that you’ll need to know which row is associated with the control when it is updated.  The easiest way I’ve found of dealing with this problem is by adding a HiddenField control and databinding the row Id to it.  Since we are dealing with a CheckBox control, you will need to create an event handler for the Checked event.  The first parameter that will be passed into this event handler will be the sender.  Sender represents the control that fired the event.  In this case, it will represent the CheckBox control.&lt;/p&gt;
&lt;p&gt;The other control you’ll need to retrieve is the HiddenField control that you placed next to the check box.  You can retrieve this control by using the FindControl() method that is hanging off the parent control of the check box.  Assuming your HiddenField control is named “_hiddenFieldId” you can get the ID by using:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; id = (HiddenField)(((CheckBox)(Sender)).Parent&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .FindControl(&lt;span class=&#34;string&#34;&gt;&amp;quot;_hiddenFieldId&amp;quot;&lt;/span&gt;)).Text;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now that you have the value of the ID and the value of the checkbox, you can update your database.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
