<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://davembush.github.com</id>
    <title>Dave&#39;s Notebook • Posts by &#34;architecture&#34; tag</title>
    <link href="http://davembush.github.com" />
    <updated>2020-10-04T17:58:05.000Z</updated>
    <category term="project management" />
    <category term="code coverage" />
    <category term="tdd" />
    <category term="unit test" />
    <category term="code" />
    <category term="programming" />
    <category term="angular" />
    <category term="javascript" />
    <category term="performance" />
    <category term="react.js" />
    <category term="agile" />
    <category term="failure" />
    <category term="kanban" />
    <category term="scrum" />
    <category term="interview" />
    <category term="job search" />
    <category term="test driven development" />
    <category term="mvvm" />
    <category term="DRY" />
    <category term="loose coupling" />
    <category term="single responsibility" />
    <category term="c#" />
    <category term="learning" />
    <category term="bug" />
    <category term="ext js" />
    <category term="sencha" />
    <category term="career" />
    <category term="react" />
    <category term="ngrx" />
    <category term="redux" />
    <category term="functional" />
    <category term="reactive" />
    <category term="mvp" />
    <category term="private" />
    <category term="testing" />
    <category term="typescript" />
    <category term="routing" />
    <category term="pointers" />
    <category term="unsafe" />
    <category term="class diagram" />
    <category term="vb.net" />
    <category term="visual studio" />
    <category term="flux" />
    <category term="lazy loading" />
    <category term="scope" />
    <category term="DOM" />
    <category term="ionic" />
    <category term="putty" />
    <category term="ssh" />
    <category term="formgroup" />
    <category term="validation" />
    <category term="angular-cli" />
    <category term="modules" />
    <category term="ngmodule" />
    <category term="observables" />
    <category term="RxJS" />
    <category term="model driven" />
    <category term="reactive forms" />
    <category term="estimating" />
    <category term="story points" />
    <category term="best practices" />
    <category term="design patterns" />
    <category term="architecture" />
    <category term="asp.net" />
    <category term="memory" />
    <category term="angular.js" />
    <category term="iis" />
    <category term="ajax" />
    <category term="json" />
    <category term="controller" />
    <category term="MVC" />
    <category term="view" />
    <category term="404" />
    <category term="application_error" />
    <category term="exceptions" />
    <category term="viewstate" />
    <category term="archietcture" />
    <category term="bll" />
    <category term="dal" />
    <category term="Three Tiered" />
    <category term=".net" />
    <category term="enums" />
    <category term="tutorial" />
    <category term="code quality" />
    <category term="cyclomatic" />
    <category term="halstead" />
    <category term="child component" />
    <category term="CefSharp" />
    <category term="Chromium" />
    <category term="Vista" />
    <category term="VPN" />
    <category term="xp" />
    <category term="get" />
    <category term="properties" />
    <category term="set" />
    <category term="empty" />
    <category term="string" />
    <category term="habits" />
    <category term="application testing" />
    <category term="dependency injection" />
    <category term="debugging" />
    <category term="cms" />
    <category term="dotnetnuke" />
    <category term="WordPress" />
    <category term="authority" />
    <category term="confidence" />
    <category term="datalist" />
    <category term="listview" />
    <category term="comments" />
    <category term="tdd. agile" />
    <category term="bootstrap" />
    <category term="copy &amp;amp; paste" />
    <category term="cross browser" />
    <category term="idisposable" />
    <category term="animation" />
    <category term="css" />
    <category term="html" />
    <category term="debug" />
    <category term="checked" />
    <category term="double" />
    <category term="float" />
    <category term="int" />
    <category term="long" />
    <category term="short" />
    <category term="unchecked" />
    <category term="currency" />
    <category term="decimal" />
    <category term="floating point math" />
    <category term="single" />
    <category term="authentication" />
    <category term="isinrole" />
    <category term="roles" />
    <category term="user" />
    <category term="definition of done" />
    <category term="DoD" />
    <category term="dispose" />
    <category term="finalize" />
    <category term="suppressfinalize" />
    <category term="education" />
    <category term="client side" />
    <category term="development" />
    <category term="class" />
    <category term="dynamic classing" />
    <category term="gridview" />
    <category term="college" />
    <category term="freshman" />
    <category term="babel" />
    <category term="es2015" />
    <category term="es6" />
    <category term="jest" />
    <category term="bdd" />
    <category term="Single Responsibility" />
    <category term="Architecture" />
    <category term="full stack developer" />
    <category term="web development" />
    <category term="formsauthentication" />
    <category term="manual" />
    <category term="redirectfromloginpage" />
    <category term="setauthcookie" />
    <category term="NgRX" />
    <category term="luck" />
    <category term="social skills" />
    <category term="brain" />
    <category term="health" />
    <category term="programmer" />
    <category term="productivity" />
    <category term="QA" />
    <category term="extreme programming" />
    <category term="software" />
    <category term="httpcontext" />
    <category term="items" />
    <category term="session" />
    <category term="naming conventions" />
    <category term="variables" />
    <category term="self improvement" />
    <category term="301" />
    <category term="302" />
    <category term="fiddler" />
    <category term="infinite loop" />
    <category term="images" />
    <category term="iTextSharp" />
    <category term="PDF" />
    <category term="concatenation" />
    <category term="quirks" />
    <category term="parsing" />
    <category term="xhtml" />
    <category term="fonts" />
    <category term="stack" />
    <category term="htmltidy" />
    <category term="tables" />
    <category term="acrofields" />
    <category term="form fields" />
    <category term="outputstream" />
    <category term="pdfreader" />
    <category term="pdfstamper" />
    <category term="bind" />
    <category term="callbacks" />
    <category term="currying" />
    <category term="events" />
    <category term="business rules" />
    <category term="boolean" />
    <category term="fields" />
    <category term="methods" />
    <category term="object" />
    <category term="functions" />
    <category term="inheritance" />
    <category term="prototype" />
    <category term="hoist" />
    <category term="falsy" />
    <category term="truthy" />
    <category term="istanbul" />
    <category term="jasmine" />
    <category term="hoisting" />
    <category term="types" />
    <category term="type conversion" />
    <category term="dialog" />
    <category term="jQuery" />
    <category term="validation controls" />
    <category term="async" />
    <category term="each" />
    <category term="collapse" />
    <category term="expand" />
    <category term="load" />
    <category term="partial content" />
    <category term="tooltip" />
    <category term="regions" />
    <category term="limiting beliefs" />
    <category term="angular material" />
    <category term="linkedin" />
    <category term="social media" />
    <category term="tips" />
    <category term="CI. Continuous Integration" />
    <category term="magic numbers" />
    <category term="magic strings" />
    <category term="flex" />
    <category term="multiview" />
    <category term="wizard" />
    <category term="threading" />
    <category term="intern" />
    <category term="express" />
    <category term="node" />
    <category term="nunit" />
    <category term="object initializers" />
    <category term="video" />
    <category term="reflection" />
    <category term="unity" />
    <category term="best practice" />
    <category term="asp.net postback button" />
    <category term="iText" />
    <category term="property based testing" />
    <category term="cli" />
    <category term="software architecture" />
    <category term="rxjs. angular 2" />
    <category term="redirect" />
    <category term="response" />
    <category term="responsive design" />
    <category term="parallel" />
    <category term="selenium" />
    <category term="Marble Testing" />
    <category term="java" />
    <category term="grid" />
    <category term="hub" />
    <category term="serialization" />
    <category term="specflow" />
    <category term="like" />
    <category term="sql" />
    <category term="tsql" />
    <category term="where clause" />
    <category term="do while" />
    <category term="for next" />
    <category term="ms-sql" />
    <category term="while" />
    <category term="gamification" />
    <category term="paired programming" />
    <category term="reference types" />
    <category term="stringbuilder" />
    <category term="value types" />
    <category term="technical debt" />
    <category term="activetabindex" />
    <category term="postback" />
    <category term="tab control" />
    <category term="tabcontrol" />
    <category term="kata" />
    <category term="extjs" />
    <category term="email" />
    <category term="mailaddress" />
    <category term="mailmessage" />
    <category term="smtpclient" />
    <category term="Quality" />
    <category term="behavior" />
    <category term="psychology" />
    <category term="portal" />
    <category term="web 1.0" />
    <category term="web 2.0" />
    <category term="trace" />
    <category term="compiler" />
    <category term="errror" />
    <category term="warning" />
    <category term="connection string" />
    <category term="dataset" />
    <category term="error" />
    <category term="web.config" />
    <category term="tslint" />
    <category term="emotions" />
    <category term="hiring" />
    <category term="aspnet_regsql" />
    <category term="forms based authentication" />
    <category term="jsdom" />
    <category term="karma" />
    <category term="noTDD" />
    <category term="bundling" />
    <category term="gulp" />
    <category term="minification" />
    <category term="node.js" />
    <category term="file upload" />
    <category term="objects" />
    <category term="hide" />
    <category term="vb.net attributes" />
    <category term="nothing" />
    <category term="nullable" />
    <category term="conditional startup" />
    <category term="windows forms" />
    <category term="winforms" />
    <category term="char" />
    <category term="split" />
    <category term="strict" />
    <category term="clarity" />
    <category term="ui" />
    <category term="ux" />
    <category term="asmx" />
    <category term="error handling" />
    <category term="webservice" />
    <category term="binary" />
    <category term="bitwise" />
    <category term="operators" />
    <category term="automation" />
    <category term="browser" />
    <category term="mstest" />
    <category term="immutable" />
    <category term="global" />
    <category term="await" />
    <category term="webapi" />
    <category term="configuration" />
    <category term="devops" />
    <category term="testcasedata" />
    <category term="testcasesource" />
    <category term="closure" />
    <category term="loops" />
    <category term="certification" />
    <category term="mcsd" />
    <category term="microsoft" />
    <category term="inversion of control" />
    <category term="ioc" />
    <category term="casting" />
    <category term="convert" />
    <category term="arguements" />
    <category term="command line" />
    <category term="main" />
    <category term="yagni" />
    <category term="npm" />
    <category term="nvm" />
    <category term="resumes" />
    <category term="change-detection" />
    <category term="state-management" />
    <category term="web-workers" />
    <category term="libraries" />
    <category term="strong typing" />
    <category term="linting" />
    <category term="constructors" />
    <category term="clean code" />
    <category term="smart-ngrx" />
    <category term="ngrx-store" />
    <category term="ngrx-entity" />
    <category term="ngrx-effects" />
    <category term="TypeScript" />
    <category term="Performance" />
    <entry>
        <id>http://davembush.github.com/fixing-single-responsibility/</id>
        <title>Fixing Single Responsibility</title>
        <link rel="alternate" href="http://davembush.github.com/fixing-single-responsibility/"/>
        <content type="html">&lt;p&gt;The Single Responsibility principle is a well-known, Object Oriented principle that states that we should narrow the scope of the code in our Module&amp;#x2F;Class&amp;#x2F;Function so that is it only responsible for one thing.&lt;/p&gt;
&lt;p&gt;By doing so, this reduces the size of our code that needs to be tested.&lt;/p&gt;
&lt;p&gt;Linting rules can generally help enforce this rule by making sure your Class file isn’t too long, and your functions are not too complex. But there are other ways of violating this principle that linting rules can not pick up.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;For example, in the world of Entity Framework, there has been a design pattern that has us putting our code in distinct layers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Controller&lt;/li&gt;
&lt;li&gt;Business Logic&lt;/li&gt;
&lt;li&gt;Repository&lt;/li&gt;
&lt;li&gt;Data Access&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the world of Angular, you may be using NgRX and OnPush notification (if you aren’t you should). Here are the layers you should see in an Angular project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Component&lt;/li&gt;
&lt;li&gt;Component-Service&lt;/li&gt;
&lt;li&gt;NgRX&lt;ul&gt;
&lt;li&gt;Actions&lt;/li&gt;
&lt;li&gt;Reducers&lt;/li&gt;
&lt;li&gt;Effects&lt;/li&gt;
&lt;li&gt;Selectors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In both of these architectures, you can completely jumble your code by putting it in the wrong place.&lt;/p&gt;
&lt;p&gt;You see, Single Responsibility is not only about “doing one thing” but it is also about understanding WHERE the code goes so that each layer of the code is only responsible for one thing.&lt;/p&gt;
&lt;h2 id=&#34;A-Place-for-Everything-…&#34;&gt;&lt;a href=&#34;#A-Place-for-Everything-…&#34; class=&#34;headerlink&#34; title=&#34;A Place for Everything …&#34;&gt;&lt;/a&gt;A Place for Everything …&lt;/h2&gt;&lt;p&gt;Both of these architectures have a definition of where everything goes. I continue to see, in both cases, code going in the wrong location.&lt;/p&gt;
&lt;h3 id=&#34;Entity-Framework-Example&#34;&gt;&lt;a href=&#34;#Entity-Framework-Example&#34; class=&#34;headerlink&#34; title=&#34;Entity Framework Example&#34;&gt;&lt;/a&gt;Entity Framework Example&lt;/h3&gt;&lt;p&gt;A couple of examples.  The Repository layer is where we retrieve our data. This might be from the database and often is, but it might also be from a service of some sort.&lt;/p&gt;
&lt;p&gt;The Business Logic layer is where we perform actions on that data to do some sort of meaningful work.&lt;/p&gt;
&lt;p&gt;Clear?&lt;/p&gt;
&lt;h4 id=&#34;Repository-or-Business-Logic&#34;&gt;&lt;a href=&#34;#Repository-or-Business-Logic&#34; class=&#34;headerlink&#34; title=&#34;Repository or Business Logic&#34;&gt;&lt;/a&gt;Repository or Business Logic&lt;/h4&gt;&lt;p&gt;Well, I guess it isn’t because what I often see is the conflation of the two so that, most often, you end up with Business logic inside the Repository.&lt;/p&gt;
&lt;p&gt;Unfortunately, there is an easy rule to follow that eliminates most of this.&lt;/p&gt;
&lt;p&gt;The only thing your repository should return is an IQueryable of the type represented by the Repository name.  If your repository is for accessing a particular table, it should return an IQueryable of that table’s Model and ONLY IQueryables for that Model.  Not some of one Model and some of another.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes, I know, technically speaking, the Repository is both dead and could also return IEnumerable, but I find that adds to the problem of putting Business Logic inside the Repository.  So, I’m going to assert that IF you are going to use the Repository pattern, it really should ONLY return IQueryable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In a typical Entity Framework application, your goal is to not actually retrieve data until you are in the Business Logic layer.  By returning IQueryable, you prevent any data retrieval from occurring and you also give yourself and your team the added benefit of being able to use multiple methods in your repository from the business logic layer by combining them all into one query.&lt;/p&gt;
&lt;p&gt;Code reuse and a possible performance gain.  What could be better?&lt;/p&gt;
&lt;h4 id=&#34;Projects&#34;&gt;&lt;a href=&#34;#Projects&#34; class=&#34;headerlink&#34; title=&#34;Projects&#34;&gt;&lt;/a&gt;Projects&lt;/h4&gt;&lt;p&gt;The other place I see issues with the Single Responsibility principle while using Entity Framework is when try to cram multiple classes for a layer into one project.  A good dose of Domain Driven Design would go a long way to helping this but here again, we need to consider what we are trying to do and the impact we are having on future coding efforts.&lt;/p&gt;
&lt;p&gt;On really large projects, you can particularly end up with migration headaches because you’ve managed to combine everything into one Context.  If you were to break your models into multiple context, you could avoid many of these conflicts because they would each have their own migration history.&lt;/p&gt;
&lt;p&gt;Similarly, at the controller level, you should consider how much sense it makes to add yet another end point to an existing class.  Or maybe it makes more sense to start a new class.&lt;/p&gt;
&lt;h3 id=&#34;Angular&#34;&gt;&lt;a href=&#34;#Angular&#34; class=&#34;headerlink&#34; title=&#34;Angular&#34;&gt;&lt;/a&gt;Angular&lt;/h3&gt;&lt;h4 id=&#34;Components&#34;&gt;&lt;a href=&#34;#Components&#34; class=&#34;headerlink&#34; title=&#34;Components&#34;&gt;&lt;/a&gt;Components&lt;/h4&gt;&lt;p&gt;Angular components are pretty easy to create and, most of the time use code that has already been tested.  It is the logic of our components that is hard to test.  To separate the two, I suggest using a Component-Service leaving the only logic that is in the component.ts file logic that is specific to the presentation.&lt;/p&gt;
&lt;p&gt;Think of it this way.  If you had to replace the presentation layer?  How much of the code would you have to duplicate or rewrite?  If you push that code down a layer, would that simplify things for you?&lt;/p&gt;
&lt;h4 id=&#34;NgRX&#34;&gt;&lt;a href=&#34;#NgRX&#34; class=&#34;headerlink&#34; title=&#34;NgRX&#34;&gt;&lt;/a&gt;NgRX&lt;/h4&gt;&lt;p&gt;One of the more difficult concepts for most people to wrap their heads around fully is the concept of NgRX.  With in this, where do I message my data?&lt;/p&gt;
&lt;p&gt;The temptation is to message the data in the component or the component-service.  But a better location is in a function that a selector calls.  By doing this, you only end up messaging the data IF the underlying data changes and now your component and component service become ways of displaying what’s in your store.&lt;/p&gt;
&lt;p&gt;In fact, you may find that your component service has nothing to do because all the work has been done in the selector.&lt;/p&gt;
&lt;h2 id=&#34;The-Real-Problem&#34;&gt;&lt;a href=&#34;#The-Real-Problem&#34; class=&#34;headerlink&#34; title=&#34;The Real Problem&#34;&gt;&lt;/a&gt;The Real Problem&lt;/h2&gt;&lt;p&gt;Given these examples, you’d expect me now to dive into how to really work these patterns.  But, I’ve been intentionally vague about the solutions because the problem isn’t really about where stuff lives or how closely we follow the Single Responsibility principle.&lt;/p&gt;
&lt;p&gt;The problem is that too many of us are hackers and not learners.&lt;/p&gt;
&lt;p&gt;I made the comment to a friend of mine recently that the reason I don’t believe a team should have options on architecture is because, largely the people on the team “learn” by copy and pasting existing code. Even if it is wrong.&lt;/p&gt;
&lt;p&gt;And so, the reason we have issues with Single Responsibility at all is because, as an industry, we believe we can just dump people into a new language or a framework and they’ll “pick it up.”  Managers need to get beyond, “well it works” to “can this be maintained?”&lt;/p&gt;
&lt;p&gt;To do this they need to do several things up front:&lt;/p&gt;
&lt;p&gt;First, make sure their developers understand the patterns and practices they are using. This may mean sending them to training. This may mean pairing them with someone who you know already knows.&lt;/p&gt;
&lt;p&gt;Second, you need a watchdog on your team to ensure that patterns are followed closely. In my experience, this is not something that comes naturally to programmers.&lt;/p&gt;
&lt;p&gt;I’ve frequently said that it takes most programmers 5 years just to get to a point where they’ve stopped learning how to program and see programming as more than just learning the syntax of a language.  It takes another 5 years before they begin to see the advantages of architecture, if they see it at all. It could take another 10 years past that before they are able to mentor and train others.&lt;/p&gt;
</content>
        <category term="Single Responsibility" />
        <category term="Architecture" />
        <updated>2020-10-04T17:58:05.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/are-you-thinking-clearly-about-your-architectural-choices/</id>
        <title>Are You Thinking Clearly About Your Architectural Choices?</title>
        <link rel="alternate" href="http://davembush.github.com/are-you-thinking-clearly-about-your-architectural-choices/"/>
        <content type="html">&lt;p&gt;Recently someone asked me where the business rules should go in an MVC framework.  The Model or the Controller? This reminded me of a post I wrote when ASP.NET MVC was first released.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/aspnet-mvc-model-bll-or-dal/&#34;&gt;ASP.NET MVC – Model !&amp;#x3D; BLL or DAL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But today I want to cover a broader topic common to everyone, not just programmers.  Not being able to think outside the box.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/09/image2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Here’s-the-deal&#34;&gt;&lt;a href=&#34;#Here’s-the-deal&#34; class=&#34;headerlink&#34; title=&#34;Here’s the deal.&#34;&gt;&lt;/a&gt;Here’s the deal.&lt;/h2&gt;&lt;p&gt;Good salesmen have known for years that the best way to close the sale is to ask the customer to pick between two buying decisions.  You never ask, “So, did you want to buy that today?”  Because almost invariably the customer will say, “No” because the implication is, “Did you want to buy that today, or some other day?”  And “some other day” is always a better option to the customer.  No, the proper way to frame the question is, “So, how did you want to pay for that?  Cash or Credit?” or “Did you want the blue one or the green one?”  By doing this, the customer is no longer even thinking “later” is an option.  The only options he is thinking about are the options he’s been presented with.  This isn’t to say that there isn’t a customer who can fight past this and respond, “No, I was just looking today.”  But the chance of the customer leaving without buying have just been reduced dramatically because two buying choices have been presented.&lt;/p&gt;
&lt;p&gt;So, what does this have to do with programming?  Well, that’s exactly what happens when we’ve been given an architectural framework to program with.&lt;/p&gt;
&lt;p&gt;Someone shows you the MVC pattern and you immediately think that the only places code can live in our application are in the Model, the View, or the Controller.&lt;/p&gt;
&lt;p&gt;Someone shows you the MVP pattern and you think code can only live in the Model, the View or the Presenter.&lt;/p&gt;
&lt;p&gt;Someone shows you the MVVM pattern and we think code only lives in the Model, the View or the ViewModel.&lt;/p&gt;
&lt;p&gt;And so, I ask you. Given any of those three patterns, where do you put your business logic?  And while we are at it, where does your data access logic go?&lt;/p&gt;
&lt;h2 id=&#34;Do-we-place-it-in-the-model&#34;&gt;&lt;a href=&#34;#Do-we-place-it-in-the-model&#34; class=&#34;headerlink&#34; title=&#34;Do we place it in the model?&#34;&gt;&lt;/a&gt;Do we place it in the model?&lt;/h2&gt;&lt;p&gt;Well, what is the model for?  A model is for storing data.  For most of us the data is a record that is displayed on the screen as a series of fields.  But how it gets displayed and what it actually contains doesn’t matter as much as the fact that the model &lt;strong&gt;stores data&lt;/strong&gt;.  Nothing there even hints at executing code.  In fact, I would argue that for most of our applications, the model should be so simple that it doesn’t need to be tested.&lt;/p&gt;
&lt;h2 id=&#34;How-about-the-Controller-or-the-Presenter&#34;&gt;&lt;a href=&#34;#How-about-the-Controller-or-the-Presenter&#34; class=&#34;headerlink&#34; title=&#34;How about the Controller or the Presenter?&#34;&gt;&lt;/a&gt;How about the Controller or the Presenter?&lt;/h2&gt;&lt;p&gt;A controller or presenter sends commands to the model to change its state and sends commands to the view to update the presentation.  Here things get a little confusing.  It sounds like, because the controller is sending commands the the model and the view that it is where the business rules live.&lt;/p&gt;
&lt;p&gt;In fact, when I was first introduced to MVC, this is what I thought was true.  But notice there is nothing in the statement about what a controller does that would indicate that it is anything more than a traffic cop.&lt;/p&gt;
&lt;h2 id=&#34;View-Model&#34;&gt;&lt;a href=&#34;#View-Model&#34; class=&#34;headerlink&#34; title=&#34;View Model?&#34;&gt;&lt;/a&gt;View Model?&lt;/h2&gt;&lt;p&gt;In the MVVM pattern, it becomes even clearer that there is no clear place for business logic because the ViewModel holds the state of the view.  The presenter or controller part is handled by a binder that is typically part of the framework you are using, as with KnockOut.&lt;/p&gt;
&lt;h2 id=&#34;Thinking-outside-the-box&#34;&gt;&lt;a href=&#34;#Thinking-outside-the-box&#34; class=&#34;headerlink&#34; title=&#34;Thinking outside the box&#34;&gt;&lt;/a&gt;Thinking outside the box&lt;/h2&gt;&lt;p&gt;Now that we’ve demonstrated that none of these frameworks explicitly state where the business logic should go, where should we put it? In my case, what I’ve started doing is that I’ve created a service layer, or a business rules layer.  It handles the processing of the logic to get the rest of the code working.  The classes in this layer can either be passed the model or viewmodel in which they can change the state directly, or they can return data that the controller can distribute as needed.  In my most recent application I selected the pass the model in approach.  The result was code that was much more testable than what I had started with, which is the whole point of placing the business rules outside of the pattern to begin with.  &lt;/p&gt;
&lt;h3 id=&#34;Resources&#34;&gt;&lt;a href=&#34;#Resources&#34; class=&#34;headerlink&#34; title=&#34;Resources&#34;&gt;&lt;/a&gt;Resources&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&#34;&gt;Model View Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&#34;&gt;Model View Presenter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//en.wikipedia.org/wiki/Model_View_ViewModel&#34;&gt;Model View ViewModel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="programming" />
        <category term="testing" />
        <category term="architecture" />
        <updated>2015-09-17T11:30:00.000Z</updated>
    </entry>
</feed>
