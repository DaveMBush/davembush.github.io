<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://davembush.github.com</id>
    <title>Dave&#39;s Notebook • Posts by &#34;extreme programming&#34; tag</title>
    <link href="http://davembush.github.com" />
    <updated>2018-02-20T11:30:35.000Z</updated>
    <category term="project management" />
    <category term="code coverage" />
    <category term="tdd" />
    <category term="unit test" />
    <category term="code" />
    <category term="programming" />
    <category term="angular" />
    <category term="javascript" />
    <category term="performance" />
    <category term="react.js" />
    <category term="agile" />
    <category term="failure" />
    <category term="kanban" />
    <category term="scrum" />
    <category term="interview" />
    <category term="job search" />
    <category term="test driven development" />
    <category term="mvvm" />
    <category term="DRY" />
    <category term="loose coupling" />
    <category term="single responsibility" />
    <category term="c#" />
    <category term="learning" />
    <category term="bug" />
    <category term="ext js" />
    <category term="sencha" />
    <category term="career" />
    <category term="react" />
    <category term="ngrx" />
    <category term="redux" />
    <category term="functional" />
    <category term="reactive" />
    <category term="mvp" />
    <category term="private" />
    <category term="testing" />
    <category term="typescript" />
    <category term="routing" />
    <category term="pointers" />
    <category term="unsafe" />
    <category term="class diagram" />
    <category term="vb.net" />
    <category term="visual studio" />
    <category term="flux" />
    <category term="lazy loading" />
    <category term="scope" />
    <category term="DOM" />
    <category term="ionic" />
    <category term="putty" />
    <category term="ssh" />
    <category term="formgroup" />
    <category term="validation" />
    <category term="angular-cli" />
    <category term="modules" />
    <category term="ngmodule" />
    <category term="observables" />
    <category term="RxJS" />
    <category term="model driven" />
    <category term="reactive forms" />
    <category term="estimating" />
    <category term="story points" />
    <category term="best practices" />
    <category term="design patterns" />
    <category term="architecture" />
    <category term="asp.net" />
    <category term="memory" />
    <category term="angular.js" />
    <category term="iis" />
    <category term="ajax" />
    <category term="json" />
    <category term="controller" />
    <category term="MVC" />
    <category term="view" />
    <category term="404" />
    <category term="application_error" />
    <category term="exceptions" />
    <category term="viewstate" />
    <category term="archietcture" />
    <category term="bll" />
    <category term="dal" />
    <category term="Three Tiered" />
    <category term=".net" />
    <category term="enums" />
    <category term="tutorial" />
    <category term="code quality" />
    <category term="cyclomatic" />
    <category term="halstead" />
    <category term="child component" />
    <category term="CefSharp" />
    <category term="Chromium" />
    <category term="Vista" />
    <category term="VPN" />
    <category term="xp" />
    <category term="get" />
    <category term="properties" />
    <category term="set" />
    <category term="empty" />
    <category term="string" />
    <category term="habits" />
    <category term="application testing" />
    <category term="dependency injection" />
    <category term="debugging" />
    <category term="cms" />
    <category term="dotnetnuke" />
    <category term="WordPress" />
    <category term="authority" />
    <category term="confidence" />
    <category term="datalist" />
    <category term="listview" />
    <category term="comments" />
    <category term="tdd. agile" />
    <category term="bootstrap" />
    <category term="copy &amp;amp; paste" />
    <category term="cross browser" />
    <category term="idisposable" />
    <category term="animation" />
    <category term="css" />
    <category term="html" />
    <category term="debug" />
    <category term="checked" />
    <category term="double" />
    <category term="float" />
    <category term="int" />
    <category term="long" />
    <category term="short" />
    <category term="unchecked" />
    <category term="currency" />
    <category term="decimal" />
    <category term="floating point math" />
    <category term="single" />
    <category term="authentication" />
    <category term="isinrole" />
    <category term="roles" />
    <category term="user" />
    <category term="definition of done" />
    <category term="DoD" />
    <category term="dispose" />
    <category term="finalize" />
    <category term="suppressfinalize" />
    <category term="education" />
    <category term="client side" />
    <category term="development" />
    <category term="class" />
    <category term="dynamic classing" />
    <category term="gridview" />
    <category term="college" />
    <category term="freshman" />
    <category term="babel" />
    <category term="es2015" />
    <category term="es6" />
    <category term="jest" />
    <category term="bdd" />
    <category term="Single Responsibility" />
    <category term="Architecture" />
    <category term="full stack developer" />
    <category term="web development" />
    <category term="formsauthentication" />
    <category term="manual" />
    <category term="redirectfromloginpage" />
    <category term="setauthcookie" />
    <category term="NgRX" />
    <category term="luck" />
    <category term="social skills" />
    <category term="brain" />
    <category term="health" />
    <category term="programmer" />
    <category term="productivity" />
    <category term="QA" />
    <category term="extreme programming" />
    <category term="software" />
    <category term="httpcontext" />
    <category term="items" />
    <category term="session" />
    <category term="naming conventions" />
    <category term="variables" />
    <category term="self improvement" />
    <category term="301" />
    <category term="302" />
    <category term="fiddler" />
    <category term="infinite loop" />
    <category term="images" />
    <category term="iTextSharp" />
    <category term="PDF" />
    <category term="concatenation" />
    <category term="quirks" />
    <category term="parsing" />
    <category term="xhtml" />
    <category term="fonts" />
    <category term="stack" />
    <category term="htmltidy" />
    <category term="tables" />
    <category term="acrofields" />
    <category term="form fields" />
    <category term="outputstream" />
    <category term="pdfreader" />
    <category term="pdfstamper" />
    <category term="bind" />
    <category term="callbacks" />
    <category term="currying" />
    <category term="events" />
    <category term="business rules" />
    <category term="boolean" />
    <category term="fields" />
    <category term="methods" />
    <category term="object" />
    <category term="functions" />
    <category term="inheritance" />
    <category term="prototype" />
    <category term="hoist" />
    <category term="falsy" />
    <category term="truthy" />
    <category term="istanbul" />
    <category term="jasmine" />
    <category term="hoisting" />
    <category term="types" />
    <category term="type conversion" />
    <category term="dialog" />
    <category term="jQuery" />
    <category term="validation controls" />
    <category term="async" />
    <category term="each" />
    <category term="collapse" />
    <category term="expand" />
    <category term="load" />
    <category term="partial content" />
    <category term="tooltip" />
    <category term="regions" />
    <category term="limiting beliefs" />
    <category term="angular material" />
    <category term="linkedin" />
    <category term="social media" />
    <category term="tips" />
    <category term="CI. Continuous Integration" />
    <category term="magic numbers" />
    <category term="magic strings" />
    <category term="flex" />
    <category term="multiview" />
    <category term="wizard" />
    <category term="threading" />
    <category term="intern" />
    <category term="express" />
    <category term="node" />
    <category term="nunit" />
    <category term="object initializers" />
    <category term="video" />
    <category term="reflection" />
    <category term="unity" />
    <category term="best practice" />
    <category term="asp.net postback button" />
    <category term="iText" />
    <category term="property based testing" />
    <category term="cli" />
    <category term="software architecture" />
    <category term="rxjs. angular 2" />
    <category term="redirect" />
    <category term="response" />
    <category term="responsive design" />
    <category term="parallel" />
    <category term="selenium" />
    <category term="Marble Testing" />
    <category term="java" />
    <category term="grid" />
    <category term="hub" />
    <category term="serialization" />
    <category term="specflow" />
    <category term="like" />
    <category term="sql" />
    <category term="tsql" />
    <category term="where clause" />
    <category term="do while" />
    <category term="for next" />
    <category term="ms-sql" />
    <category term="while" />
    <category term="gamification" />
    <category term="paired programming" />
    <category term="reference types" />
    <category term="stringbuilder" />
    <category term="value types" />
    <category term="technical debt" />
    <category term="activetabindex" />
    <category term="postback" />
    <category term="tab control" />
    <category term="tabcontrol" />
    <category term="kata" />
    <category term="extjs" />
    <category term="email" />
    <category term="mailaddress" />
    <category term="mailmessage" />
    <category term="smtpclient" />
    <category term="Quality" />
    <category term="behavior" />
    <category term="psychology" />
    <category term="portal" />
    <category term="web 1.0" />
    <category term="web 2.0" />
    <category term="trace" />
    <category term="compiler" />
    <category term="errror" />
    <category term="warning" />
    <category term="connection string" />
    <category term="dataset" />
    <category term="error" />
    <category term="web.config" />
    <category term="tslint" />
    <category term="emotions" />
    <category term="hiring" />
    <category term="aspnet_regsql" />
    <category term="forms based authentication" />
    <category term="jsdom" />
    <category term="karma" />
    <category term="noTDD" />
    <category term="bundling" />
    <category term="gulp" />
    <category term="minification" />
    <category term="node.js" />
    <category term="file upload" />
    <category term="objects" />
    <category term="hide" />
    <category term="vb.net attributes" />
    <category term="nothing" />
    <category term="nullable" />
    <category term="conditional startup" />
    <category term="windows forms" />
    <category term="winforms" />
    <category term="char" />
    <category term="split" />
    <category term="strict" />
    <category term="clarity" />
    <category term="ui" />
    <category term="ux" />
    <category term="asmx" />
    <category term="error handling" />
    <category term="webservice" />
    <category term="binary" />
    <category term="bitwise" />
    <category term="operators" />
    <category term="automation" />
    <category term="browser" />
    <category term="mstest" />
    <category term="immutable" />
    <category term="global" />
    <category term="await" />
    <category term="webapi" />
    <category term="configuration" />
    <category term="devops" />
    <category term="testcasedata" />
    <category term="testcasesource" />
    <category term="closure" />
    <category term="loops" />
    <category term="certification" />
    <category term="mcsd" />
    <category term="microsoft" />
    <category term="inversion of control" />
    <category term="ioc" />
    <category term="casting" />
    <category term="convert" />
    <category term="arguements" />
    <category term="command line" />
    <category term="main" />
    <category term="yagni" />
    <category term="npm" />
    <category term="nvm" />
    <category term="resumes" />
    <category term="change-detection" />
    <category term="state-management" />
    <category term="web-workers" />
    <category term="libraries" />
    <category term="strong typing" />
    <category term="linting" />
    <category term="constructors" />
    <category term="clean code" />
    <category term="smart-ngrx" />
    <category term="ngrx-store" />
    <category term="ngrx-entity" />
    <category term="ngrx-effects" />
    <category term="TypeScript" />
    <category term="Performance" />
    <entry>
        <id>http://davembush.github.com/how-you-do-anything/</id>
        <title>How you do Anything ...</title>
        <link rel="alternate" href="http://davembush.github.com/how-you-do-anything/"/>
        <content type="html">&lt;p&gt;I’ve been programming now for 30 years. Over those thirty years, and more so over the last five to ten years, I’ve become increasingly frustrated by the attitude of managers and programmers alike toward programming. &lt;/p&gt;
&lt;p&gt;One programmer I know is pretty vocal about this attitude.  All he seems to care about is how fast he can write the code.  “I got that application done in a month!”  And then he’ll complain about how it is everyone else’s fault that he spent the next four months fixing bugs. &lt;/p&gt;
&lt;p&gt;And it is no wonder he has this attitude.  Most of the managers I’ve worked for will acknowledge that there is a lot of technical debt, but the pressure of getting the code written always outweighs the pressure of the debt. &lt;/p&gt;
&lt;p&gt;I’ve said for years that I’m not at all surprised that software has bugs.  What surprises me most is that any of our code works at all.  If we are honest about our code, we recognize that our code is worse than a store front on the wild west.  A nice facade on the front that everyone sees (if we are lucky) but look behind the facade and the store is barely standing up because the design, architecture and lumber is so bad. &lt;/p&gt;
&lt;p&gt;But, if it is true that “How you do anything is how you do everything.”  shouldn’t we spend a little time practicing quality in the not so obvious places so that we can get in the habit of quality?  Maybe a culture of quality will rub off into our code and produce code that really does get written quickly and has very little technical debt.  Not just in the area of bugs, but in flexibility, architecture, and design. &lt;/p&gt;
&lt;p&gt;So, what could we change in our programming practice that wouldn’t require persuading a manager to make a change in how the whole organization worked? &lt;figure&gt;&lt;img src=&#34;/uploads/2018/02/2018-02-20.jpg&#34; title=&#34;How you do anything...&#34;&gt; Photo on &lt;a href=&#34;//visualhunt.com/re/cecba2&#34;&gt;Visualhunt&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;How-do-you-Dress&#34;&gt;&lt;a href=&#34;#How-do-you-Dress&#34; class=&#34;headerlink&#34; title=&#34;How do you Dress?&#34;&gt;&lt;/a&gt;How do you Dress?&lt;/h2&gt;&lt;p&gt;When I first started programming, I had to wear a suit to work.  I forgot my tie one day and actually got reprimanded.  This, despite the fact that the programmers were tucked away in a back room that you had to know existed to get to.  That is, there was no way one of the customers our business worked with was going to find us.  I hated it. &lt;/p&gt;
&lt;p&gt;The pendulum has in the opposite direction.  I’ve been on several interviews where I’ve explicitly been told to NOT wear a suit. &lt;/p&gt;
&lt;p&gt;But I do wonder.  Does how we dress have an impact on our code?  If we don’t care much about how WE look, might we not care that much about what our code looks like?  Does it matter?  I think it might. &lt;/p&gt;
&lt;p&gt;Might it also subconsciously impact other’s view of the quality of code you produce?  You know the adage.  Always dress just below your manager.  But what if your manager dresses like a slob?  Currently, my signature work clothes are black jeans, button down shirt and a sweater.  But, I’m thinking of bumping it up a notch.&lt;/p&gt;
&lt;h2 id=&#34;What-does-your-desk-look-like&#34;&gt;&lt;a href=&#34;#What-does-your-desk-look-like&#34; class=&#34;headerlink&#34; title=&#34;What does your desk look like?&#34;&gt;&lt;/a&gt;What does your desk look like?&lt;/h2&gt;&lt;p&gt;There was a guy I worked with early on in my career who always left his desk in a condition that looked like no one had worked at the desk in months.  Everything was put away.  Several years ago, I decided to take on that habit. &lt;/p&gt;
&lt;p&gt;Funny story.  A couple of gigs ago, a manager from three levels up came down to visit after I had left for the day.  She looked at my desk and said, “Does anyone work here?”  My manager said, “YES!!! Don’t touch anything!”  Guess she was hunting for stray equipment. &lt;/p&gt;
&lt;p&gt;I would say, this simple act was the pivot point for me when I started to care more about my code beyond “Does it work?” &lt;/p&gt;
&lt;p&gt;There is something about working in a clean area slightly dressed up.  Other parts of your life follow along for the ride.&lt;/p&gt;
&lt;h2 id=&#34;Linters&#34;&gt;&lt;a href=&#34;#Linters&#34; class=&#34;headerlink&#34; title=&#34;Linters&#34;&gt;&lt;/a&gt;Linters&lt;/h2&gt;&lt;p&gt;One of those areas is what your code looks like.  A linter can be configured to enforce style rules on your code.  And can also catch dumb mistakes.  The more I use linters, the more convinced I am everyone should use one. &lt;/p&gt;
&lt;p&gt;Here is some of the ways you will benefit, even if you are the only one using a linter.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your code will always follow the same format.  This will make the code easier to read and understand.&lt;/li&gt;
&lt;li&gt;As I mentioned, some rules help catch dumb mistakes before you even run the code.&lt;/li&gt;
&lt;li&gt;Just like a clean desk feels inviting, well formatted code feels inviting.  The converse, poorly formatted code, adds to the stress level of working on the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Learn-Your-Tools&#34;&gt;&lt;a href=&#34;#Learn-Your-Tools&#34; class=&#34;headerlink&#34; title=&#34;Learn Your Tools&#34;&gt;&lt;/a&gt;Learn Your Tools&lt;/h2&gt;&lt;p&gt;I am amazed at how many places I’ve worked where they expect you to learn a particular tool on the fly.  No training.  “We are now using X on this next project.  Download it and start using it!”  And then they wonder why the project is such a disaster.  Bugs everywhere. &lt;/p&gt;
&lt;p&gt;Want to look like a rock star?  Want to be the guy the boss ask “what should we do?”  Be the guy who knows that new tool better than anyone else. &lt;/p&gt;
&lt;p&gt;In the process, you’ll also be the guy who uses the tool the way the people who developed that tool intended it to be used. &lt;/p&gt;
&lt;p&gt;Here’s a truth I’ve observed.  Everyone wants to use whatever tool they’ve just started using like the last tool they used.  And then, when it doesn’t, the new tool “doesn’t work.”  This one truth has done more to hold our industry back than any other one thing I can point to.&lt;/p&gt;
&lt;h2 id=&#34;Design-Patterns&#34;&gt;&lt;a href=&#34;#Design-Patterns&#34; class=&#34;headerlink&#34; title=&#34;Design Patterns&#34;&gt;&lt;/a&gt;Design Patterns&lt;/h2&gt;&lt;p&gt;Learn the basic design patterns for your environment.  But go beyond learning the pattern.  Learn why the pattern exist.  What problem does it solve?  Be able to recognize counterfeits.&lt;/p&gt;
&lt;h2 id=&#34;Architecture&#34;&gt;&lt;a href=&#34;#Architecture&#34; class=&#34;headerlink&#34; title=&#34;Architecture&#34;&gt;&lt;/a&gt;Architecture&lt;/h2&gt;&lt;p&gt;Along with Design Patterns, learn the basics of Architecture.  Here’s a hint.  All good architecture answers the question, “How can I write code that is not dependent on any other code?”  This is one of the reasons I love Functional Programming.  By design, Functional code is not dependent on other code.  Dependencies are passed into the function.  But you can achieve similar objectives using Object Oriented programming languages or even Procedural languages.&lt;/p&gt;
&lt;h2 id=&#34;Single-Responsibility&#34;&gt;&lt;a href=&#34;#Single-Responsibility&#34; class=&#34;headerlink&#34; title=&#34;Single Responsibility&#34;&gt;&lt;/a&gt;Single Responsibility&lt;/h2&gt;&lt;p&gt;Granular is better than Monolithic!  Don’t be afraid to split things up.  Use components.  Compose classes of other classes.  Components of other components.  And most important of all, don’t create a Utils class of any kind.  In some languages this is easier than others.  But if you can, any method you have in a Utils class should be a function in its own file.  If you can’t do that, maybe each function belongs in its own class unless there is a strong argument for putting them together in a class that can be reasonably named in a way that obviously groups those methods. &lt;/p&gt;
&lt;p&gt;Another pet peeve of mine is putting multiple classes or interfaces in one file. Split them up!  Don’t make me go hunting for the source of a class. &lt;/p&gt;
&lt;p&gt;The ONLY time you might be excused from splitting things up is if the only place the code is being used is in the file’s main class.  But once you make that class available to the outside world, out it comes.&lt;/p&gt;
&lt;h2 id=&#34;Alternate-Languages&#34;&gt;&lt;a href=&#34;#Alternate-Languages&#34; class=&#34;headerlink&#34; title=&#34;Alternate Languages&#34;&gt;&lt;/a&gt;Alternate Languages&lt;/h2&gt;&lt;p&gt;This should go without saying.  But the more languages you learn, the better programmer you will become.  I remember when I started learning C++, I had a hard time understanding references.  And then I started learning Clipper (a dBase III compiler) and something they said made references make sense suddenly. &lt;/p&gt;
&lt;p&gt;And this has been my experience all along.  Every new thing I learn helps me see problems in a slightly different perspective.  Making my code in every language I know that much better.&lt;/p&gt;
&lt;h2 id=&#34;Code-Reviews&#34;&gt;&lt;a href=&#34;#Code-Reviews&#34; class=&#34;headerlink&#34; title=&#34;Code Reviews&#34;&gt;&lt;/a&gt;Code Reviews&lt;/h2&gt;&lt;p&gt;So far, everything I’ve mentioned is something you can do on your own.  This last one will require at least one other person.  Maybe you can buddy up with someone at work for this. &lt;/p&gt;
&lt;p&gt;It amazes me that in 30 years of programming, only three of those years have been in an environment where my code was ever reviewed by someone else.  But getting another set of eyes on your code is helpful if for no other reason than someone else has had to try to understand what you did while you still remember instead of waiting years and you’ve forgotten or moved on.  None of us are as smart as all of us.  Take advantage of another pair of eyes on your code, even if that’s not a formal thing where you currently work.&lt;/p&gt;
</content>
        <category term="agile" />
        <category term="best practices" />
        <category term="extreme programming" />
        <updated>2018-02-20T11:30:35.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/the-parable-of-the-road-line-painter/</id>
        <title>The Parable of The Road Line Painter</title>
        <link rel="alternate" href="http://davembush.github.com/the-parable-of-the-road-line-painter/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/land-0125.jpg&#34; alt=&#34;land-0125&#34; title=&#34;land-0125&#34;&gt;&lt;/p&gt;
&lt;p&gt;Way back in the day when lines were first being painted on roads.  The early lines were painted by hand.  In those days, a painter was hired and given a stretch of road to paint.  The first day he got on very well.  In fact, he was one of the best line painters they had ever had.  His lines were perfectly aligned, there were no unpainted areas in the space where there should be paint, and he managed to get 500 yards of road painted.  The average line painter normally did 250 yards in the first day.  The managers who had hired him were quite pleased.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Well, the next day, he came to work and set off on his task of painting the road.  He still had another 500 yards of road to paint.  And yet, for as fast as he was, he was only able to get 350 yards painted that day.  Not quite what his managers expected given his performance on the first day.  But still, better than their average painter, and so they reasoned to themselves, “Maybe he hit an extra hilly patch of road or some other unforeseen obstacle got in his way.”&lt;/p&gt;
&lt;p&gt;Finally, the third day, he came in and finished the patch of road he had been given.&lt;/p&gt;
&lt;p&gt;Since he had done so well on the first 1000 yards of road, management decided to put him on a job of a 1 mile stretch of road.  They also decided to make him the lead painter with a crew of 10 other painters who they had just hired.  He taught these new hires how to paint the road as he had been painting the road to date and they set off.  The first day was a great day.  They managed to get an average of 300 yards per person completed the first day.  Not quite what management had expected, but still better than the average line painter could do.&lt;/p&gt;
&lt;p&gt;The next day they all came to work and continued their painting.  Yet, this time, all they were able to accomplish was 200 yards per person.&lt;/p&gt;
&lt;p&gt;Predictably the next day they all came to work and continued their painting but only got 100 yards per person done.&lt;/p&gt;
&lt;p&gt;Of course management got concerned and since this was a rather easy job, they couldn’t understand how the painting could keep getting slower every day.  But obviously, since they had deadlines to meet, it was time to hire some more painters.  So they added another 10 painters to the job.  This had the impact of turning the lead painter into a manager, without the pay of a manager, and in the end, it actually slowed the painting down even more because all of the painters were getting in each other’s way.&lt;/p&gt;
&lt;h2 id=&#34;A-Good-Idea&#34;&gt;&lt;a href=&#34;#A-Good-Idea&#34; class=&#34;headerlink&#34; title=&#34;A Good Idea&#34;&gt;&lt;/a&gt;A Good Idea&lt;/h2&gt;&lt;p&gt;One day, as they were painting, one of the painters mentioned that he had been reading that if they paired up and had one of the painters move the paint while the other painted the line and then they switched off painting or moving the paint, that the end result would be that they would actually end up completing the painting faster.  But his peer replied with several objections, the first being that they didn’t have permission to move the paint can.  If management had wanted them to move the paint can then that would have been part of the training they had received on the first day.  Others pointed out that obviously if they only had half of the people painting, it would take even longer to get the painting done.  Others were a lot more honest and just said, “I’m really not sure how we could move the paint.  The paint bucket is so heavy.&lt;/p&gt;
&lt;h2 id=&#34;Tell-The-Boss&#34;&gt;&lt;a href=&#34;#Tell-The-Boss&#34; class=&#34;headerlink&#34; title=&#34;Tell The Boss?&#34;&gt;&lt;/a&gt;Tell The Boss?&lt;/h2&gt;&lt;p&gt;Well, you know the type.  Guys with good ideas are hard to stop.  So at the end of the day as they were cleaning up, he mentioned to the lead painter that he had an idea that might make the job move a little faster.  What if we rigged the paint so that it could be moved along as we painted?  Then we wouldn’t have to keep walking back to the paint can.  In fact, we could pair up and have one guy move the paint while the other spent his time continuously painting.  And by switching back and forth between painting and moving paint, no one would get excessively tired doing one or the other.&lt;/p&gt;
&lt;p&gt;Well, the lead painter was of course feeling threatened at this point and so he told this young up-start painter that he was hired to paint.  Not to innovate with stupid ideas that would obviously make the job take even longer.&lt;/p&gt;
&lt;h2 id=&#34;Quit&#34;&gt;&lt;a href=&#34;#Quit&#34; class=&#34;headerlink&#34; title=&#34;Quit&#34;&gt;&lt;/a&gt;Quit&lt;/h2&gt;&lt;p&gt;Well, now.  Not being content to keep doing things the hard way, the innovative young painter quit this crew and went to work for a new road crew who advertised themselves as “innovative, fun and open to suggestions.”  Well, I’m sure you can predict exactly what happened next.&lt;/p&gt;
&lt;p&gt;The day he started on the job he found that they were painting the road exactly the same place as the last crew he worked on.  Of course, he mentioned his innovative idea, and of course, he got the same responses.&lt;/p&gt;
&lt;p&gt;Frustrated, he kept moving from company to company only to find out that they nearly all had the same attitude.  And so, he decided that since at each company he was pretty well left on his own to paint the lines, it wouldn’t hurt if he rigged up a wheel barrow with some paint cans so that he could fill the paint cans from the main paint receptacle and then carry the paint to the location he was painting.  This would reduce the amount of trips back to the main paint container and it really wouldn’t disrupt the work of anyone else.&lt;/p&gt;
&lt;h2 id=&#34;It-Is-The-Same-Everywhere&#34;&gt;&lt;a href=&#34;#It-Is-The-Same-Everywhere&#34; class=&#34;headerlink&#34; title=&#34;It Is The Same Everywhere&#34;&gt;&lt;/a&gt;It Is The Same Everywhere&lt;/h2&gt;&lt;p&gt;There was just one problem with this.  As he started out on the new job, he found that all the nay-sayers were right.  It really did slow things down.  While before he was able to get 500 yards of road done on the first day, this time he was only able to get 300 yards of road done.  He was feeling a bit discouraged, and yet convinced that if he persisted the next day would prove him right, he continued.  Sure enough, while the average painter was able to get 200 yards done on the second day, he was able to continue with 300 yards on the second day as well.  In fact, as everyone else seemed to get slower, the innovative painter was able to get 300 yards of road done every day he painted.&lt;/p&gt;
&lt;h2 id=&#34;The-Promotion&#34;&gt;&lt;a href=&#34;#The-Promotion&#34; class=&#34;headerlink&#34; title=&#34;The Promotion&#34;&gt;&lt;/a&gt;The Promotion&lt;/h2&gt;&lt;p&gt;Well, now he has management’s attention.  Let’s promote him.&lt;/p&gt;
&lt;p&gt;Well sir, he got promoted sure enough.  You know what the first thing he tried to implement?  Yep, how about if we change our whole process to move the paint can.  Well, I’m sure you know how well that went off. &lt;/p&gt;
&lt;p&gt;“We’ve been painting roads like this for 10 years and it works just fine.”&lt;/p&gt;
&lt;h2 id=&#34;More-Frustration&#34;&gt;&lt;a href=&#34;#More-Frustration&#34; class=&#34;headerlink&#34; title=&#34;More Frustration&#34;&gt;&lt;/a&gt;More Frustration&lt;/h2&gt;&lt;p&gt;Even with his own team, he couldn’t get the “move the paint” method of painting roads fully implemented, no matter how hard he tried.  Yeah, there were a few pockets of painters who gave it a try, but ultimately, since it felt slower than what they had always done, they fell back to the old method they knew so well.&lt;/p&gt;
&lt;p&gt;And then, one day, a new painter came on the team who believed in the move the paint method.  He used it and found another guy on the team who was willing to pair with him so that one would move the paint and the other would paint.  Wow!  The progress they made!&lt;/p&gt;
&lt;p&gt;As they were working, one of them said, “I wonder if we can rig the wheelbarrow to drip the paint out so that we only have to spread it instead of having to dip the brush into the paint…&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="extreme programming" />
        <category term="paired programming" />
        <updated>2015-05-28T10:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/tdd-gamification-turning-test-driven-development-into-a-game/</id>
        <title>TDD Gamification - Turning Test Driven Development into a Game</title>
        <link rel="alternate" href="http://davembush.github.com/tdd-gamification-turning-test-driven-development-into-a-game/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/04/ge-gam-018.jpg&#34; alt=&#34;ge-gam-018&#34; title=&#34;Test Driven Development Gamification&#34;&gt;&lt;/p&gt;
&lt;p&gt;When I was in college, there were some guys I hung out with who played this game called “Questions” which they got from some book.  &lt;a href=&#34;//en.wikipedia.org/wiki/Questions_(game)&#34;&gt;Actually, it was a play&lt;/a&gt;. Anyhow, the basic rules are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can’t answer a question with a statement&lt;/li&gt;
&lt;li&gt;You can’t hesitate or make a false start&lt;/li&gt;
&lt;li&gt;You can’t repeat a question that has already been used&lt;/li&gt;
&lt;li&gt;You can’t ask a rhetorical question&lt;/li&gt;
&lt;li&gt;You can’t ask an unrelated question.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There was also &lt;a href=&#34;//dotnetrocks.com/default.aspx?showNum=1111&#34;&gt;this podcast at DotNetRocks&lt;/a&gt; where they were talking about a beer app and how they had added game elements to the app by adding badges for various types of beer to get you out of your comfort zone.  Maybe there is one for “My first beer that I liked” because I’ve yet to find something I like.  But give me a good Merlot! All of this got me to thinking about how we might turn Test Driven Development into something of a game. There are several people who have already addressed the Gamification of TDD&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;TDD-and-the-Gamification-of-Testing&#34;&gt;&lt;a href=&#34;#TDD-and-the-Gamification-of-Testing&#34; class=&#34;headerlink&#34; title=&#34;TDD and the Gamification of Testing&#34;&gt;&lt;/a&gt;&lt;a href=&#34;//effectivesoftwaredesign.com/2011/11/21/tdd-and-the-gamification-of-testing/&#34;&gt;TDD and the Gamification of Testing&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This article talks mostly about how TDD has many elements of good gaming inherent in it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Because it makes testing more like programming.  Well, what he actually says is that it raises testing to the level of complexity the programmer is familiar with.  But in reality, I think this is because it makes testing something that can be coded.&lt;/li&gt;
&lt;li&gt;Because TDD is measurable.  The test either succeeds or fails.&lt;/li&gt;
&lt;li&gt;Because TDD gives you immediate feedback.  Or at least a well written test gives you immediate feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;TDD-The-Gamification-of-Programming&#34;&gt;&lt;a href=&#34;#TDD-The-Gamification-of-Programming&#34; class=&#34;headerlink&#34; title=&#34;TDD: The Gamification of Programming&#34;&gt;&lt;/a&gt;&lt;a href=&#34;//benvanik.tumblr.com/post/20702406947/tdd-the-gamification-of-programming&#34;&gt;TDD: The Gamification of Programming&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This article provides an interesting perspective of someone trying to program using TDD for the first time.  You get the normal complaints, like “this takes too long” along with acknowledgement of some of the benefits.  But what he realizes is that the process has made programming more like a game than about the creative problem solving most of us got in to programming for in the first place.&lt;/p&gt;
&lt;h2 id=&#34;Gamify-TDD&#34;&gt;&lt;a href=&#34;#Gamify-TDD&#34; class=&#34;headerlink&#34; title=&#34;Gamify TDD&#34;&gt;&lt;/a&gt;&lt;a href=&#34;//www.tdddev.com/2014/09/gamify-tdd.html&#34;&gt;Gamify TDD&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is the first article I found that, instead of saying that TDD is already a game, like the two above, actually ask how we might formally turn TDD into a game because it already has many elements of a game.  But he never actually says HOW he would do that.&lt;/p&gt;
&lt;h2 id=&#34;TDD-Gamification&#34;&gt;&lt;a href=&#34;#TDD-Gamification&#34; class=&#34;headerlink&#34; title=&#34;TDD Gamification&#34;&gt;&lt;/a&gt;TDD Gamification&lt;/h2&gt;&lt;p&gt;Putting this all together.  Here is how I would actually make TDD into a game.&lt;/p&gt;
&lt;h4 id=&#34;The-rules&#34;&gt;&lt;a href=&#34;#The-rules&#34; class=&#34;headerlink&#34; title=&#34;The rules:&#34;&gt;&lt;/a&gt;The rules:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;The game is played in pairs.  (Paired programming)&lt;/li&gt;
&lt;li&gt;Game starts when programmer 1 writes the first test.&lt;/li&gt;
&lt;li&gt;Once a failing test is written, programmer 2 writes JUST ENOUGH to make the test succeed.&lt;/li&gt;
&lt;li&gt;Once a test succeeds, programmer 2 writes another test, and programmer 1 writes just enough to make it succeed.&lt;/li&gt;
&lt;li&gt;Play alternates until no one can think of another test that will force more code to be written.&lt;/li&gt;
&lt;li&gt;Programmer loses points if he is caught writing more code than is necessary to pass the test.&lt;/li&gt;
&lt;li&gt;Programmer loses points if he is caught writing code that has dependencies embedded in it.&lt;/li&gt;
&lt;li&gt;If a dependency is required, the test writer and the code implementer will collaborate in the method of dependency injection to be used.&lt;/li&gt;
&lt;li&gt;All points lost by one programmer go to the programmer who caught the mistake.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Embellishment&#34;&gt;&lt;a href=&#34;#Embellishment&#34; class=&#34;headerlink&#34; title=&#34;Embellishment:&#34;&gt;&lt;/a&gt;Embellishment:&lt;/h4&gt;&lt;p&gt;If code is found to have a bug in production, both programmers responsible for the code loose a point, regardless of how many lines of code are impacted.  One point per recorded bug.&lt;/p&gt;
&lt;p&gt;I’m assuming that most shops have more than 2 programmers.  On any given day, programmers would be paired up for the day of programming.  They are responsible for turning out bug free code.  Because we are tracking the code over the long term, we will be able to see just how effective each programmer is at eliminating bugs.&lt;/p&gt;
&lt;p&gt;In fact, if you are in an environment that can’t quite stomach having your programmers paired up, I would suggest keeping track of the code that wasn’t done under the game.  This would be the “house score” compared to an individual programmer’s score.&lt;/p&gt;
&lt;p&gt;The only thing we have left is some way of being able to account for productivity.  I mean, if I write no code, I’ll have no bugs, right?  And all things being equal, the more productive I am, the more bugs I’ll have.  So how do we measure this? Here is what we can’t do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lines of code – you can’t measure based on lines of code because that has been shown to be an inaccurate measure of productivity.  More lines may just mean you are not very efficient.&lt;/li&gt;
&lt;li&gt;Hours worked – &lt;a href=&#34;/rapidDevelopment&#34;&gt;Rapid Development&lt;/a&gt; has statistics in it that show there is a factor of 10 difference between good programmers and bad programmers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Just-a-suggestion&#34;&gt;&lt;a href=&#34;#Just-a-suggestion&#34; class=&#34;headerlink&#34; title=&#34;Just a suggestion:&#34;&gt;&lt;/a&gt;Just a suggestion:&lt;/h4&gt;&lt;p&gt;Since short methods are desirable, what if we measure number of test relative to number of methods relative to number of classes.  This would enforce the single responsibility principle.&lt;/p&gt;
&lt;p&gt;T &amp;#x3D; Tests M &amp;#x3D; Methods C &amp;#x3D; Classes 1&amp;#x2F;((T&amp;#x2F;M)&amp;#x2F;C) &amp;#x3D; Productivity Score Therefore,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If I worked on 3 classes each with 6 methods and each method has 2 tests, I end up with a productivity score of 1.5&lt;/li&gt;
&lt;li&gt;If I had one class with 18 methods each with 2 tests, I end up with a productivity score of .5&lt;/li&gt;
&lt;li&gt;If, on the other hand, I put everything in one method, and one class and had the same 36 tests, my productivity score would be .02&lt;/li&gt;
&lt;li&gt;If you write no code, your productivity score is 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s just a simple way to calculate.  You may choose to use cyclomatic complexity in some way if you have that number easily available to you.&lt;/p&gt;
&lt;p&gt;Well, that’s my rough sketch of how we might be able to turn TDD into something of a game along with being able to prove to ourselves and management that it really does produce better code. How else might you embellish this or change it so it works better?  Let me know in the comments below.&lt;/p&gt;
&lt;h4 id=&#34;Other-Test-Driven-Development-Resources&#34;&gt;&lt;a href=&#34;#Other-Test-Driven-Development-Resources&#34; class=&#34;headerlink&#34; title=&#34;Other Test Driven Development Resources&#34;&gt;&lt;/a&gt;Other Test Driven Development Resources&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/testDrivenDevelopmentByExample&#34;&gt;Test Driven Development: by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/professionalTestDrivenDevelopmentWithCSharp&#34;&gt;Professional Test Driven Development w&amp;#x2F; C#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="tdd" />
        <category term="agile" />
        <category term="extreme programming" />
        <category term="gamification" />
        <category term="paired programming" />
        <updated>2015-04-23T10:00:00.000Z</updated>
    </entry>
</feed>
