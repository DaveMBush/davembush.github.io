<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;code coverage&#34; tag</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Thu, 26 May 2016 06:30:00 -0400</pubDate>
        <lastBuildDate>Thu, 26 May 2016 06:30:00 -0400</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/3-reasons-you-believe-100-code-coverage-is-impossible/</guid>
            <title>3 Reasons You Believe 100% Code Coverage Is Impossible</title>
            <link>http://davembush.github.com/3-reasons-you-believe-100-code-coverage-is-impossible/</link>
            <category>code coverage</category>
            <category>tdd</category>
            <category>test driven development</category>
            <pubDate>Thu, 26 May 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve written about &lt;a href=&#34;/categories/TDD/&#34;&gt;Test Driven Development&lt;/a&gt; before.  I’ve even written about &lt;a href=&#34;/100-code-coverage/&#34;&gt;100% code coverage&lt;/a&gt; before.  And I haven’t written much about it recently because I’ve been focused on JavaScript.  But, I’ve been thinking about the 100% code coverage debate more and I have a few more thoughts on the subject.&lt;/p&gt;
&lt;p&gt;You see, the more I practice Test Driven Development, the more inclined I am to believe that there are only three reasons for arguing against 100% code coverage.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/05/image-2.png&#34; alt=&#34;100% Code Coverage&#34; title=&#34;100% Code Coverage&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;There-is-Something-Wrong-with-Your-Framework&#34;&gt;&lt;a href=&#34;#There-is-Something-Wrong-with-Your-Framework&#34; class=&#34;headerlink&#34; title=&#34;There is Something Wrong with Your Framework&#34;&gt;&lt;/a&gt;There is Something Wrong with Your Framework&lt;/h2&gt;&lt;p&gt;This will be the easiest one for most people to accept.  It isn’t so personal.&lt;/p&gt;
&lt;p&gt;You see, I’ve been learning &lt;a href=&#34;/tags/react-js/&#34;&gt;React JS&lt;/a&gt; and, as I’ve mentioned before, I decided to learn React AND learn to test it at the same time.  The thing that has impressed me from the outset is that ALL the code that I write is testable.  Where a lot of other frameworks are testable except for the View, React JS is ALL testable.&lt;/p&gt;
&lt;p&gt;And this got me to thinking, if all the code you write is testable, why wouldn’t you write tests?  In fact, as I wrote in “&lt;a href=&#34;/test-driven-learning-an-experiment/&#34;&gt;Test Driven Learning, an Experiment&lt;/a&gt;”, the process of writing the tests as I go has helped me understand React JS better than if I had not.&lt;/p&gt;
&lt;p&gt;But compare this to other frameworks where the View is basically HTML.  There is no really easy way to write tests for HTML.  At least, none that I know about.&lt;/p&gt;
&lt;p&gt;And then there are frameworks that seem to do all they can to make it hard to test.  When I was using Ext JS 4.x, I spent two years looking for a way to make my code testable without having to have the View rendered because the way they had implemented “MVC” made loading the view mandatory.  Talk about tight coupling!  Fortunately, now that they’ve implemented MVVM, if you do this correctly, it solves these problems.&lt;/p&gt;
&lt;p&gt;Another place where I found testing difficult was with Angular 1.  Most of Angular 1 is quite testable.  It was created with testing in mind.  But as I was trying to add a &lt;a href=&#34;//docs.angularjs.org/guide/decorators&#34;&gt;decorator&lt;/a&gt; to the &lt;a href=&#34;//ui-grid.info/&#34;&gt;UI Grid&lt;/a&gt; component, I found that testing the decorator was quite difficult.  This, I believe, said more about how the UI Grid component had been created than about how the Angular framework was put together.  But this just illustrates my point.  Sometimes, the reason you can’t test has more to do with the tools you are using than any other reason.&lt;/p&gt;
&lt;p&gt;Then again, the problem may be you.&lt;/p&gt;
&lt;h2 id=&#34;There-is-Something-Wrong-with-Your-Code&#34;&gt;&lt;a href=&#34;#There-is-Something-Wrong-with-Your-Code&#34; class=&#34;headerlink&#34; title=&#34;There is Something Wrong with Your Code&#34;&gt;&lt;/a&gt;There is Something Wrong with Your Code&lt;/h2&gt;&lt;p&gt;Now, arguably, in my last example, the reason I was not able to test the decorator for my Grid was because I was missing some fundamental concept related to testing decorators in general or how that related to the Grid.&lt;/p&gt;
&lt;p&gt;The reason I say this is because the one thing I’ve noticed the more I test is this.  The more I practice TDD, the easier TDD becomes.&lt;/p&gt;
&lt;p&gt;As I introduce testing into the organizations I work with and as I’ve grown in my own TDD skills, the one thing I’ve noticed is that when we start out learning TDD, it almost always starts out as DDT.  That is, Development Driven Testing.&lt;/p&gt;
&lt;p&gt;This is, of course, better than not testing at all, but if you wait until after you’ve written your code, or you develop your code without thinking about how you will test it, you will almost always end up in a situation where you will have to rearrange your code to make it testable.  Untestable code is probably the single biggest reason why code doesn’t get tested.&lt;/p&gt;
&lt;p&gt;If you were able to make yourself write your tests first, you would be much more likely to write test for everything you wrote.&lt;/p&gt;
&lt;p&gt;This doesn’t help you though if you’ve been tasked with writing tests for all pre-existing code.  Yours on someone else’s.  In this case, the best help I can give you is to recommend the book “&lt;a href=&#34;/qayn&#34;&gt;Working Effectively With Legacy Code&lt;/a&gt;” where Michael Feathers illustrates how to handle a lot of the common scenarios he has run into with various languages and how to untangle the mess so that it can be tested.  I will admit it is a tedious read, but there really is no better resource on the topic.&lt;/p&gt;
&lt;h2 id=&#34;Lack-of-Experience&#34;&gt;&lt;a href=&#34;#Lack-of-Experience&#34; class=&#34;headerlink&#34; title=&#34;Lack of Experience&#34;&gt;&lt;/a&gt;Lack of Experience&lt;/h2&gt;&lt;p&gt;The final reason you might want to think that 100% code coverage is impossible is that you simply don’t have enough experience.&lt;/p&gt;
&lt;p&gt;As I mentioned above, my own experience has been that the more I practice TDD, the easier it gets.  When I started out, I struggled to write test at all.  Then I got to a point where I would at least attempt to write tests after I’d written some code.  I’m now at the point where I’m writing tests as I code.  Soon, I hope to achieve the ultimate goal of writing test prior to writing the real code.  But even though I wasn’t writing the tests first, I can still say that the tests were driving my development because I knew at some point, I was going to have to test the code with unit tests.&lt;/p&gt;
&lt;p&gt;But as I’ve monitored the noise on the Internet about using TDD or not.  As people have discussed how much of their code should be tested.  I wonder, “Just how long has this person been trying to tests?”  Along with that, I wonder, “Do they even want to test?”  My dad used to say, “It is amazing how much I don’t understand when it doesn’t fit my plan.” Let’s face it, for most programmers, writing tests is not nearly as much fun as writing the application.  If this is true, then aren’t you already biased against writing tests for your application?  Wouldn’t you much rather write the app and toss it over the fence for someone else to tests?  I know I would.&lt;/p&gt;
&lt;p&gt;Now combine that with the fact that testing is hard, and you have a recipe for excusing yourself from testing as much of your code as possible.&lt;/p&gt;
&lt;p&gt;But, if you stick with it.  If you make writing bug free code a personal challenge, you will find that the rewards are worth it.&lt;/p&gt;
&lt;p&gt;What would it be like to be THE developer who was always working on new features because no one could find bugs in the features you programmed in the past?  What would that do for your career?&lt;/p&gt;
&lt;h2 id=&#34;The-100-Code-Coverage-Payoff&#34;&gt;&lt;a href=&#34;#The-100-Code-Coverage-Payoff&#34; class=&#34;headerlink&#34; title=&#34;The 100% Code Coverage Payoff&#34;&gt;&lt;/a&gt;The 100% Code Coverage Payoff&lt;/h2&gt;&lt;p&gt;I want to conclude with another story that illustrates how writing tests paid off.&lt;/p&gt;
&lt;p&gt;I’ve been working on a resource scheduling component for the last several weeks.  The bulk of the logic is that if two resources are scheduled for the same time, I need to be able to display that there is a conflict.  It sounds pretty straight forward until you look at all the various ways items can overlap.  I’ve isolated the logic for this into a class that is quite testable and I had created a test suite with about 400 tests when I was told that along with that requirement, there were a particular set of conditions where what looked like a conflict wasn’t really a conflict.  I needed to show that there was an overlap, but I need to display it in such a way as to indicate that it isn’t a conflict.&lt;/p&gt;
&lt;p&gt;As I sat down to add in the new logic, I realized that the path I had been going down wasn’t going to work well given this new scenario.  What I really needed to do is to do some major refactoring.  In fact, you might even say I had to rewrite most of the code I had in place.  Now, in the past, I would have been afraid to tear up all that I had done and start over because it would have meant I would have to retest all that I had already worked on … manually!  But, since I already had tests in place, I was able to 1) commit what I had done so far to version control so I could get it back if I needed and 2) rip up what I had done, rewrite and refactor so that it would work well with the new requirement and 3) retest with the tests I ALREADY had in place.  I’ve added another 100 tests for the new scenarios and I’m pretty confident that the code I’ve written does what it should and doesn’t do what it shouldn’t.&lt;/p&gt;
&lt;p&gt;And that whole refactoring exercise took less than 7 hours.&lt;/p&gt;
&lt;p&gt;Oh.  And I have 100% code coverage!&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-unit-test-code-coverage-using-nodejs/</guid>
            <title>JavaScript Unit Test Code Coverage Using NodeJS</title>
            <link>http://davembush.github.com/javascript-unit-test-code-coverage-using-nodejs/</link>
            <category>code coverage</category>
            <category>javascript</category>
            <category>istanbul</category>
            <category>jasmine</category>
            <pubDate>Thu, 04 Feb 2016 08:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;A couple of weeks ago, I showed how to get &lt;a href=&#34;/using-node-js-and-gulp-with-an-existing-web-application-in-visual-studio-2015/&#34;&gt;Node.JS and Gulp working with Visual Studio 2015&lt;/a&gt;.  Last week I showed you &lt;a href=&#34;/using-gulp-to-bundle-minify-and-cache-bust/&#34;&gt;how to bundle, minify, and cache-bust using Gulp&lt;/a&gt;.  This week, we are going to use Node.js to provide JavaScript Unit Test Code Coverage.&lt;/p&gt;
&lt;p&gt;The main tools we will be using to pull this off are Karma and Istanbul.  The test we write will be using Jasmine.&lt;/p&gt;
&lt;p&gt;If you don’t use Visual Studio, you should still be able to adapt these instructions to your own environment.  I’ve found getting Istanbul setup kind of tricky at times.  Since everything I’m going to show you here is pure Node.JS, you can ignore the Visual Studio parts.&lt;/p&gt;
&lt;p&gt;Let’s get started.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/01/image-6.png&#34; alt=&#34;JavaScript Unit Test Code Coverage Using NodeJS&#34; title=&#34;JavaScript Unit Test Code Coverage Using NodeJS&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Assumptions&#34;&gt;&lt;a href=&#34;#Assumptions&#34; class=&#34;headerlink&#34; title=&#34;Assumptions&#34;&gt;&lt;/a&gt;Assumptions&lt;/h2&gt;&lt;p&gt;I’m going to assume that you’ve already got a project setup.  For the purposes of this discussion, we are going to assume that the files we want to test are in the &amp;#x2F;app directory and that our test are in the &amp;#x2F;jsTest directory.&lt;/p&gt;
&lt;p&gt;If you are using Visual Studio, one of the first questions you might have is, “if I put my tests in the same project as the app I am testing, won’t those test get deployed with the application?”  And the answer to that question is, “Yes, if you use the defaults.” But we aren’t going to use the defaults.  What we are going to do is that we are going to make sure that any files we create that we don’t want to deploy to the web server have their build action set to “none”.  You can find this in the file’s property window.&lt;/p&gt;
&lt;p&gt;The other way you could solve this problem is that you could have a deploy script written in Gulp that specifies exactly what files should be deployed.&lt;/p&gt;
&lt;h2 id=&#34;A-Simple-Demo-File&#34;&gt;&lt;a href=&#34;#A-Simple-Demo-File&#34; class=&#34;headerlink&#34; title=&#34;A Simple Demo File&#34;&gt;&lt;/a&gt;A Simple Demo File&lt;/h2&gt;&lt;p&gt;Just so we have something to test, I’ve created a really simple demo JavaScript file that looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;demo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; self = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a, b&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.&lt;span class=&#34;property&#34;&gt;add&lt;/span&gt; = add;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;demo&lt;/span&gt; = demo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Yes, just a simple add function.  But that is all we need today.&lt;/p&gt;
&lt;h3 id=&#34;Why-the-IIFE&#34;&gt;&lt;a href=&#34;#Why-the-IIFE&#34; class=&#34;headerlink&#34; title=&#34;Why the IIFE?&#34;&gt;&lt;/a&gt;Why the IIFE?&lt;/h3&gt;&lt;p&gt;You may be wondering why I put an IIFE around such a simple demo.&lt;/p&gt;
&lt;p&gt;I’ve gotten so frustrated reading other people’s blog posts with demo code that confuses me because they have not used best practices for the framework they are using, that I’ve determined to always write my demo code as close to the way I would write production code as possible.  If I were writing a real system, I would place an IIFE around my JavaScript.  So, I’m doing it here.&lt;/p&gt;
&lt;h2 id=&#34;And-A-Simple-Test&#34;&gt;&lt;a href=&#34;#And-A-Simple-Test&#34; class=&#34;headerlink&#34; title=&#34;And A Simple Test&#34;&gt;&lt;/a&gt;And A Simple Test&lt;/h2&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;describe,it,expect&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/jsTests/app/demoTests&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; demo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            demo = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;demo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;demo should truthy&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(demo).&lt;span class=&#34;title function_&#34;&gt;toBeTruthy&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)(&lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;describe&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;it&lt;/span&gt;, &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;expect&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Why-Pass-In-Global-Variables&#34;&gt;&lt;a href=&#34;#Why-Pass-In-Global-Variables&#34; class=&#34;headerlink&#34; title=&#34;Why Pass In Global Variables?&#34;&gt;&lt;/a&gt;Why Pass In Global Variables?&lt;/h3&gt;&lt;p&gt;By passing in the global variables, I can reference them as normal, but JSLint will no longer complain that I’m using an undefined variable.  Passing in the variables also places them in the local scope of the IIFE so that the test code doesn’t have to crawl all the way up the scope chain to find the variables.  Finally, if I were to accidentally create a variable with the same name as a global variable, passing them into the IIFE will cause my development tools to warn me that I’ve overwritten a variable name.&lt;/p&gt;
&lt;h2 id=&#34;Install-Karma-and-Istanbul&#34;&gt;&lt;a href=&#34;#Install-Karma-and-Istanbul&#34; class=&#34;headerlink&#34; title=&#34;Install Karma and Istanbul&#34;&gt;&lt;/a&gt;Install Karma and Istanbul&lt;/h2&gt;&lt;p&gt;The next thing you’ll want to do is to install Karma and Istanbul.  This is rather trivial because you can install both with one NPM command.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install karma karma-cli karma-coverage --save-dev&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;Install-Karma-Jasmine&#34;&gt;&lt;a href=&#34;#Install-Karma-Jasmine&#34; class=&#34;headerlink&#34; title=&#34;Install Karma-Jasmine&#34;&gt;&lt;/a&gt;Install Karma-Jasmine&lt;/h2&gt;&lt;p&gt;&lt;code&gt;npm install karma-jasmine --save-dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you are using some other test runner, you’ll need to install the appropriate karma package for it.&lt;/p&gt;
&lt;h2 id=&#34;Install-PhantomJS&#34;&gt;&lt;a href=&#34;#Install-PhantomJS&#34; class=&#34;headerlink&#34; title=&#34;Install PhantomJS&#34;&gt;&lt;/a&gt;Install PhantomJS&lt;/h2&gt;&lt;p&gt;This is the final install you will need to make.  The truth of the matter is that you can use any browser to run your test.  But, normally, you’ll want to use a headless browser so that you can run the tests in your continuous integration server.&lt;/p&gt;
&lt;p&gt;When I am interested in seeing if my tests passed during development, I’ll run the tests in a regular browser using a regular HTML file.  Standard, old, jasmine tests.  When I want to see the code coverage, I’ll use PhantomJS. To use PhantomJS, go to the site and &lt;a href=&#34;//phantomjs.org/download.html&#34;&gt;download the zip file that contains the EXE&lt;/a&gt; and place it in your PATH environment variable.  Or, you can place it in a known location relative to your project and you can call it directly.  For this demo, we will place it in &amp;#x2F;jsTests&amp;#x2F;phantomjs. You will also need the phantom launcher.  There are several available, but the one I use just installs the launcher and assumes you already have it installed.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install karma-phantomjs-launcher-nonet –save-dev&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;Karma-conf-js&#34;&gt;&lt;a href=&#34;#Karma-conf-js&#34; class=&#34;headerlink&#34; title=&#34;Karma.conf.js&#34;&gt;&lt;/a&gt;Karma.conf.js&lt;/h2&gt;&lt;p&gt;The last step is to create a karma.conf.js file.  I typically put this in my jsTests directory because it is part of the test files.&lt;/p&gt;
&lt;p&gt;Your Karma.conf.js file should contain content that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;exports&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;config&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; path = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;path&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    config.&lt;span class=&#34;title function_&#34;&gt;set&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;browsers&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;PhantomJS&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;phantomjsLauncher&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;cmd&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;win32&lt;/span&gt;: path.&lt;span class=&#34;title function_&#34;&gt;join&lt;/span&gt;(__dirname,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                     &lt;span class=&#34;string&#34;&gt;&amp;#x27;/phantomjs/phantomjs.exe&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// this tells Karma to start Jasmine&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;frameworks&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;jasmine&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;files&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;string&#34;&gt;&amp;#x27;../app/**/*.js&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;string&#34;&gt;&amp;#x27;../jsTests/app/**/*.js&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// coverage reporter generates the coverage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;reporters&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;progress&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;coverage&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;preprocessors&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;../app/**/*.js&amp;#x27;&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;coverage&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// optionally, configure the reporter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;coverageReporter&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;html&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;dir&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;coverage/&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Run-Your-Tests&#34;&gt;&lt;a href=&#34;#Run-Your-Tests&#34; class=&#34;headerlink&#34; title=&#34;Run Your Tests&#34;&gt;&lt;/a&gt;Run Your Tests&lt;/h2&gt;&lt;p&gt;Unlike many of the demos for running Karma that are available.  We are going to run our tests in a slightly different way.  Using Gulp.&lt;/p&gt;
&lt;p&gt;Most people know of Gulp as a file processing tool.  But here we are going to just use its task running capability.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; gulp = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;gulp&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Server&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;karma&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;property&#34;&gt;Server&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;done&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Server&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;configFile&lt;/span&gt;: __dirname + &lt;span class=&#34;string&#34;&gt;&amp;#x27;\\jsTests\\karma.conf.js&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;singleRun&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;browserNoActivityTimeout&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;60000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123; &lt;span class=&#34;title function_&#34;&gt;done&lt;/span&gt;(); &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;start&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This simple task will run Karma for you using the karma.conf.js file we just created in jsTests.&lt;/p&gt;
&lt;p&gt;If you want to have this run every time a file changes once you’ve kicked off this task, change singleRun to false.  As it is written, it only runs the tests on demand.&lt;/p&gt;
&lt;h2 id=&#34;JavaScript-Unit-Test-Code-Coverage&#34;&gt;&lt;a href=&#34;#JavaScript-Unit-Test-Code-Coverage&#34; class=&#34;headerlink&#34; title=&#34;JavaScript Unit Test Code Coverage&#34;&gt;&lt;/a&gt;JavaScript Unit Test Code Coverage&lt;/h2&gt;&lt;p&gt;So, hopefully, you’ve got everything running correctly.  Let’s look at the results.&lt;/p&gt;
&lt;p&gt;The output for the code coverage should now be in &amp;#x2F;jsTests&amp;#x2F;coverage&amp;#x2F;PhantomJS* directory.  Load the index.html file in your browser.&lt;/p&gt;
&lt;p&gt;You should see a screen that looks something like this: &lt;img src=&#34;/uploads/2016/01/image-7.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;   Click on ‘app&amp;#x2F;’ to see this: &lt;img src=&#34;/uploads/2016/01/image-8.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt; And finally, click on ‘Demo.js’ to see &lt;img src=&#34;/uploads/2016/01/image-9.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;The-Shortcut&#34;&gt;&lt;a href=&#34;#The-Shortcut&#34; class=&#34;headerlink&#34; title=&#34;The Shortcut&#34;&gt;&lt;/a&gt;The Shortcut&lt;/h2&gt;&lt;p&gt;Fortunately for you, &lt;a href=&#34;//github.com/DaveMBush/CodeCoverageDemo&#34;&gt;I’ve created a project on GitHub with all of this already done&lt;/a&gt;.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/100-code-coverage-possible/</guid>
            <title>100% Code Coverage Possible?</title>
            <link>http://davembush.github.com/100-code-coverage-possible/</link>
            <category>code coverage</category>
            <category>tdd</category>
            <category>unit test</category>
            <pubDate>Thu, 26 Mar 2015 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/03/iStock_000005626017Medium1.jpg&#34; alt=&#34;100% code coverage&#34; title=&#34;100% Code Coverage&#34;&gt;&lt;/p&gt;
&lt;p&gt;In response to my post “&lt;a href=&#34;/excuses-for-not-testing/&#34;&gt;Excuses For Not Testing&lt;/a&gt;” &lt;a href=&#34;//disqus.com/by/mayofcherries/&#34;&gt;Kris K&lt;/a&gt; asked:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is also another side of &lt;a href=&#34;//en.wikipedia.org/wiki/Unit_testing&#34; title=&#34;Unit testing&#34;&gt;Unit Tests&lt;/a&gt;. Some companies are so fixated they aspire to have 100% Unit Tests coverage and they make programmers write Unit Tests for legacy code for no reason. Just for the sake of having Unit Tests. … [I] wonder if you had any similar experiences and what you think about this approach. I guess the 100% extreme is better than no tests at all, but it can make the developers very bored and feeling useless.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And my initial reaction to this was, “WOW!  So much to respond to here.  I think this is worth a blog post.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Is-100-realistic&#34;&gt;&lt;a href=&#34;#Is-100-realistic&#34; class=&#34;headerlink&#34; title=&#34;Is 100% realistic?&#34;&gt;&lt;/a&gt;Is 100% realistic?&lt;/h2&gt;&lt;p&gt;So, first, the question of 100% coverage.  Is that a realistic goal?  And the answer of course is, “it depends.”&lt;/p&gt;
&lt;h4 id=&#34;The-first-dependency-is-of-course-“what-do-you-mean-by-‘100-code-coverage’-”&#34;&gt;&lt;a href=&#34;#The-first-dependency-is-of-course-“what-do-you-mean-by-‘100-code-coverage’-”&#34; class=&#34;headerlink&#34; title=&#34;The first dependency is, of course, “what do you mean by ‘100% code coverage’?”&#34;&gt;&lt;/a&gt;The first dependency is, of course, “what do you mean by ‘100% &lt;a href=&#34;//en.wikipedia.org/wiki/Code_coverage&#34; title=&#34;Code coverage&#34;&gt;code coverage&lt;/a&gt;’?”&lt;/h4&gt;&lt;p&gt;Do you mean you need tests for not just all the code you wrote, but all the code your tools wrote for you and all of your third party libraries?  If 100% is inclusive, I’d lean toward 100% not only being not realistic, but also not necessary.&lt;/p&gt;
&lt;p&gt;Although, in a highly critical system, you’ll probably want to do some kind of vetting of the tools and libraries you are using.  But by the time you are using them, you should already know that they work, the only thing you won’t know for sure is if you are using them correctly.  In this case, you are looking at integration tests and not unit tests.&lt;/p&gt;
&lt;h4 id=&#34;The-second-dependency-is-“Is-the-code-testable-”&#34;&gt;&lt;a href=&#34;#The-second-dependency-is-“Is-the-code-testable-”&#34; class=&#34;headerlink&#34; title=&#34;The second dependency is, “Is the code testable?”&#34;&gt;&lt;/a&gt;The second dependency is, “Is the code testable?”&lt;/h4&gt;&lt;p&gt;This is a little trickier to evaluate, so let me illustrate.  There is code that isn’t testable that should be.  I’m not talking about that code.  I’m talking about code that just can’t be tested.&lt;/p&gt;
&lt;p&gt;Let me illustrate.&lt;/p&gt;
&lt;p&gt;I’m working with &lt;a href=&#34;//www.sencha.com/products/extjs/&#34; title=&#34;Ext JS&#34;&gt;EXTjs&lt;/a&gt; which uses their proprietary implementation of MVC.  The part that is particularly interesting is that the View part of the architecture is basically a JSON object that defines what the view looks like.  While you can put in code that performs some action, the fact of the matter is that this code, when coded correctly, doesn’t really DO anything.  So, I would ask, how would you test this?  Sure I could put it in a test harness and run it through  some sort of parse routine or something, but unless you can say, “when I do this, this other thing over here should be true (or false)” you really can’t test the code.  A class that has no methods is basically a structure and structures can’t, by definition, be tested.&lt;/p&gt;
&lt;p&gt;On the other hand, I wrote some code once in WinForms that I was able to get under test and execute by calling the methods directly in the form.  I would have been better off moving that code into a presenter class so I could test the functionality separate from the presentation (view) and marked the view as untestable.&lt;/p&gt;
&lt;h4 id=&#34;Finally-I-have-to-ask-“Is-refactoring-allowed-”&#34;&gt;&lt;a href=&#34;#Finally-I-have-to-ask-“Is-refactoring-allowed-”&#34; class=&#34;headerlink&#34; title=&#34;Finally, I have to ask, “Is refactoring allowed?”&#34;&gt;&lt;/a&gt;Finally, I have to ask, “Is refactoring allowed?”&lt;/h4&gt;&lt;p&gt;This is legacy code we are talking about.  And legacy code is notoriously hard to unit test.  As I mentioned a &lt;a href=&#34;/why-johnny-cant-do-test-driven-development/&#34;&gt;couple of weeks ago&lt;/a&gt;, in order to write unit test, the code has to be testable in the first place.  So, if the code isn’t in a condition that it can be unit tested, and you aren’t allowed to make the code testable, then either 100% code coverage isn’t possible or you aren’t unit testing.  It’s that simple.&lt;/p&gt;
&lt;h2 id=&#34;Testing-is-boring&#34;&gt;&lt;a href=&#34;#Testing-is-boring&#34; class=&#34;headerlink&#34; title=&#34;Testing is boring&#34;&gt;&lt;/a&gt;Testing is boring&lt;/h2&gt;&lt;p&gt;Next, I’d like to address the issue of testing being boring.  I can understand this.  Most of my day is spent unit testing code I’ve previously written because when I wrote it, I wasn’t as good at unit testing as I am today.&lt;/p&gt;
&lt;p&gt;But, you know what I’ve found along the way?  That by making sure the code is covered 100% it has made me think about how I’ve structured my code and it has made my code more maintainable.&lt;/p&gt;
&lt;p&gt;But, mostly I find testing entertaining because I learn just a little more about testing.  I get to prove to myself and my peers that writing unit test really does find bugs we didn’t have any idea were there.  I get to perfect my craft just a little bit more.&lt;/p&gt;
&lt;p&gt;Here are some things to consider about the statement that “testing is boring.”  You may not like what I have to say, but keep in mind, I don’t know you and I don’t know Kris.  I just know what the research says about the state of being bored.&lt;/p&gt;
&lt;h4 id=&#34;Dictionary-Definition&#34;&gt;&lt;a href=&#34;#Dictionary-Definition&#34; class=&#34;headerlink&#34; title=&#34;Dictionary Definition&#34;&gt;&lt;/a&gt;&lt;a href=&#34;//www.macmillandictionary.com/us/dictionary/american/bored&#34;&gt;Dictionary Definition&lt;/a&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;feeling impatient or dissatisfied, because you are not interested in something or because you have nothing to do.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;People-who-get-bored-are-anxious-people&#34;&gt;&lt;a href=&#34;#People-who-get-bored-are-anxious-people&#34; class=&#34;headerlink&#34; title=&#34;People who get bored are anxious people&#34;&gt;&lt;/a&gt;&lt;a href=&#34;//www.dragosroua.com/how-and-why-we-get-bored/&#34;&gt;People who get bored are anxious people&lt;/a&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;People who get bored easily are usually anxious people. They’re also having quite a low level of self-esteem. If you’re constantly challenging yourself by trying to stop what you’re doing, because you don’t “like” it, you end up considering yourself an inappropriate person.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;One-Of-My-Professors-Said&#34;&gt;&lt;a href=&#34;#One-Of-My-Professors-Said&#34; class=&#34;headerlink&#34; title=&#34;One Of My Professors Said&#34;&gt;&lt;/a&gt;One Of My Professors Said&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Boring people get bored&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  Personally, I find that I’m most bored when I have something else I’d rather be doing.  It isn’t so much that I don’t want to do what I’m currently doing as I’d rather be doing something that I can’t currently do.  I had this experience on Friday because on Thursday night I had found an article on SEO stuff that I desperately wanted to start putting into practice.&lt;/p&gt;
&lt;p&gt;What I’m suggesting here is that if you change your perspective from one of, “this is a ridiculous idea” to “this is a challenge to be met” or “this is an opportunity to learn”, or even (to address a specific comment that started this post) “I get to make my this application more bug free.”  you may find that the boredom leaves.&lt;/p&gt;
&lt;p&gt;Treat it as a game.  Maybe pair up with people on your team and see who can discover the most bugs during the day.  Create a leader board.  Since you have to do this anyhow, make it fun.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
