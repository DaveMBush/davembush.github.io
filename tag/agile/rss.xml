<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;agile&#34; tag</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Sat, 20 Jun 2020 07:00:00 -0400</pubDate>
        <lastBuildDate>Sat, 20 Jun 2020 07:00:00 -0400</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/you-aren%E2%80%99t-doing-scrum-if%E2%80%A6/</guid>
            <title>You Aren’t Doing Scrum If…</title>
            <link>http://davembush.github.com/you-aren%E2%80%99t-doing-scrum-if%E2%80%A6/</link>
            <category>agile</category>
            <category>scrum</category>
            <pubDate>Sat, 20 Jun 2020 07:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/01/YouArentDoingScrumIf.png&#34; alt=&#34;You Aren&amp;#39;t Doing Scrum If...&#34; title=&#34;YouArentDoingScrumIf&#34;&gt;I’ve been frustrated lately by the flippant use of the words “Scrum” and “Agile” in our industry. &lt;/p&gt;
&lt;p&gt;Actually, I’m STILL frustrated.  I originally wrote this article January 2015.  Not only is it still true.  It is &lt;strong&gt;more&lt;/strong&gt; true.&lt;/p&gt;
&lt;p&gt;Our industry has been treating Scrum and Agile as “buzzwords that mean nothing.” These words get slapped onto job requirements like the typical requirements we’ve all seen.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Must be able to communicate&lt;/li&gt;
&lt;li&gt;Must be able to work in a team environment&lt;/li&gt;
&lt;li&gt;Must be able to work under pressure&lt;/li&gt;
&lt;li&gt;Must be able to work in an Agile environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What’s really funny is when I see&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Meet tight deadline&lt;/li&gt;
&lt;li&gt;Expert in Agile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;together in the same job request.&lt;/p&gt;
&lt;p&gt;And even if it doesn’t show up in the job description.  Once you get into the organization, you find out they are no different than any other organization.  All those promises about running “Agile” or “Scrum” as a well of figuring out how long a project will take fly right out the window as soon as a manager wants something done by a specific date.&lt;/p&gt;
&lt;p&gt;If management ain’t Agile, ain’t no one Agile.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Really-Do-you-know-what-you’re-saying&#34;&gt;&lt;a href=&#34;#Really-Do-you-know-what-you’re-saying&#34; class=&#34;headerlink&#34; title=&#34;Really?  Do you know what you’re saying?!&#34;&gt;&lt;/a&gt;Really?  Do you know what you’re saying?!&lt;/h2&gt;&lt;p&gt;Many people even use the words “Agile” and “Scrum” interchangeably.  Most because they really do think they are the same thing.&lt;/p&gt;
&lt;p&gt;I’m finding that what most people mean when they use these words is, either, “we work really fast”, “we work iteratively”, or “we don’t really have a plan.”&lt;/p&gt;
&lt;h2 id=&#34;So-the-first-thing-we-need-to-clarify-is-what-is-Scrum-and-what-is-Agile&#34;&gt;&lt;a href=&#34;#So-the-first-thing-we-need-to-clarify-is-what-is-Scrum-and-what-is-Agile&#34; class=&#34;headerlink&#34; title=&#34;So, the first thing we need to clarify is, what is Scrum and what is Agile.&#34;&gt;&lt;/a&gt;So, the first thing we need to clarify is, what is Scrum and what is Agile.&lt;/h2&gt;&lt;p&gt;Agile is a set of values.  It is what we believe about software development specifically and, I would argue, also impacts how we view life.  You might have other beliefs that live on top of Agile, but these beliefs will have an impact on how you manage the software development process specifically and your organization in general. Check out the &lt;a href=&#34;//www.agilemanifesto.org/&#34;&gt;Agile Manifesto&lt;/a&gt;.  This is what it means to be Agile.&lt;/p&gt;
&lt;p&gt;In contrast to this, Scrum is a methodology that helps an organization BE agile.&lt;/p&gt;
&lt;p&gt;Now here is where things get tricky for some people.  They read in the manifesto that we should value “Individuals and interactions over processes and tools” and think that they can make Scrum be whatever they want it to be because, they would say, “we don’t value processes and tools”.&lt;/p&gt;
&lt;p&gt;But the Agile Manifesto never says that.  It says we value individuals and interactions MORE than, not INSTEAD of, processes and tools.&lt;/p&gt;
&lt;p&gt;So, yes, you can adapt and modify Scrum to fit your situation.  You may need to.  But there are some specific elements of Scrum that you simply can’t ignore because to do so would mean either that you are no longer Agile or you are not implementing Scrum.&lt;/p&gt;
&lt;h2 id=&#34;And-so-you-aren’t-doing-Scrum-if&#34;&gt;&lt;a href=&#34;#And-so-you-aren’t-doing-Scrum-if&#34; class=&#34;headerlink&#34; title=&#34;And so, you aren’t doing Scrum if:&#34;&gt;&lt;/a&gt;And so, you aren’t doing Scrum if:&lt;/h2&gt;&lt;h4 id=&#34;You-have-deadlines-especially-if-you-have-“tight-deadlines”&#34;&gt;&lt;a href=&#34;#You-have-deadlines-especially-if-you-have-“tight-deadlines”&#34; class=&#34;headerlink&#34; title=&#34;You have deadlines, especially if you have “tight deadlines”&#34;&gt;&lt;/a&gt;You have deadlines, especially if you have “tight deadlines”&lt;/h4&gt;&lt;p&gt;“Now wait a minute,” you say, “I heard that Scrum has these things called ‘Sprints’ that are a fixed length.  Don’t those qualify as ‘deadlines?’” Well, yes and no.  You see, I don’t think what Scrum treats as a “deadline” is what most managers mean by “deadline.” At the end of the day you’ll get to the end of the Sprint and you’ll show what you’ve got.  The GOAL is to have a complete set of code that you wouldn’t be embarrassed to show to another programmer.  You should have only selected what could reasonably get done in the timeframe of a sprint so that all that needs to be done to complete the task could get done.&lt;/p&gt;
&lt;p&gt;One of the confusions is that somewhere along the line we were told that at the end of each sprint we should have a “shippable unit of software” and we’ve confused that with “a viably marketable product”  All that shippable means is, “if the customer thinks what you’ve completed so far is something they can use, you would not respond with, ‘but it still needs…’” This ties in with the other way you know you aren’t doing Scrum&lt;/p&gt;
&lt;h4 id=&#34;You-aren’t-doing-scrum-if-you-don’t-have-a-“definition-of-done-”&#34;&gt;&lt;a href=&#34;#You-aren’t-doing-scrum-if-you-don’t-have-a-“definition-of-done-”&#34; class=&#34;headerlink&#34; title=&#34;You aren’t doing scrum if you don’t have a “definition of done.”&#34;&gt;&lt;/a&gt;You aren’t doing scrum if you don’t have a “definition of done.”&lt;/h4&gt;&lt;p&gt;And once again, there is confusion.  To most people, the “definition of done” is “I can ship this code.”  But that may not be appropriate.  You’re definition of done during your first sprint may be “a set of stories that begin to describe the application we are trying to build.”  As you are learning scrum, you’re definition of done may be as simple as, “all of the code we’ve written so far have Unit Test, appropriate documentation, and we’ve learned something of how long a story point will take our team.” Definition of done doesn’t always have to mean “I’ve written code I can ship.”&lt;/p&gt;
&lt;h4 id=&#34;You-aren’t-doing-Scrum-if-you-HAVE-to-work-more-than-40-hours-a-week&#34;&gt;&lt;a href=&#34;#You-aren’t-doing-Scrum-if-you-HAVE-to-work-more-than-40-hours-a-week&#34; class=&#34;headerlink&#34; title=&#34;You aren’t doing Scrum if you HAVE to work more than 40 hours a week.&#34;&gt;&lt;/a&gt;You aren’t doing Scrum if you HAVE to work more than 40 hours a week.&lt;/h4&gt;&lt;p&gt;One of the benefits of Scrum is that it allows us to pace ourselves.  We no longer scramble to get stuff done.  We work consistently toward the goal.  But it isn’t a race.&lt;/p&gt;
&lt;p&gt;I have a rule.  If I tell you something will be done by a set time, I’ll bust my butt to make that happen.  If you tell me when it will be done, good luck with that.&lt;/p&gt;
&lt;p&gt;Of course, even when I tell someone when something will be done, I pad the estimate with enough hours that I never work more than 45 hours a week.  There is one day, in the 26 years I’ve been doing this where I worked longer than 12 hours.&lt;/p&gt;
&lt;p&gt;In fact, I had one manager who called me into his office and asked me to come in on Saturdays.  I was already working 10 hour days 5 days a week!  Talk about getting blood out of a turnip! I looked him straight in the eye and said, “I have 50 hours a week in me.  I’d prefer to give them to you Monday through Friday.  But if you want me to come in on Saturday, I can do that, but you are still only going to get 50 hours a week.” Needless to say, I never came in on Saturday.&lt;/p&gt;
&lt;h2 id=&#34;I-could-go-on…&#34;&gt;&lt;a href=&#34;#I-could-go-on…&#34; class=&#34;headerlink&#34; title=&#34;I could go on…&#34;&gt;&lt;/a&gt;I could go on…&lt;/h2&gt;&lt;p&gt;But I won’t&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/what-if-unit-testing-wasn%E2%80%99t-necessary-notdd/</guid>
            <title>What If Unit Testing Wasn’t Necessary? #noTDD</title>
            <link>http://davembush.github.com/what-if-unit-testing-wasn%E2%80%99t-necessary-notdd/</link>
            <category>tdd</category>
            <category>agile</category>
            <category>noTDD</category>
            <pubDate>Sat, 06 Oct 2018 06:30:05 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I recently read (yet another) post proposing that &lt;a href=&#34;//blogs.msdn.microsoft.com/ericgu/2017/06/22/notdd/&#34;&gt;TDD “doesn’t work” and that we shouldn’t use it, or should use it very little&lt;/a&gt;. What was shocking about this article wasn’t the content, but the fact that it is hosted on a Microsoft site.&lt;/p&gt;
&lt;p&gt;While I’m not entirely on board with throwing out TDD, the one thing I will agree to is that learning TDD is difficult. I am also willing to admit that, to a large extent, TDD is broken. If you’ve been following my post for a while, this SHOULD be shocking news.&lt;/p&gt;
&lt;p&gt;And so, I’ve been thinking.&lt;/p&gt;
&lt;p&gt;Maybe we’ve been asking the wrong question.  Maybe, instead of asking “How do we encourage people to implement TDD?”  We should be asking, “How do we make TDD either unnecessary, or trivial to implement?”&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/06/2017-06-27.jpg &#34;What If Unit Testing Wasn&#39;t Necessary? #noTDD&#34;)&lt;figcaption&gt;Photo credit: [abraham.williams](//www.flickr.com/photos/4braham/5867328365/) via [VisualHunt.com](//visualhunt.com/re/0e2a0e) / [ CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Benefits-of-TDD&#34;&gt;&lt;a href=&#34;#Benefits-of-TDD&#34; class=&#34;headerlink&#34; title=&#34;Benefits of TDD&#34;&gt;&lt;/a&gt;Benefits of TDD&lt;/h2&gt;&lt;p&gt;So, let’s review why we think TDD is a good idea. One of the first reasons that you’ll find is that when TDD is done correctly, it encourages loose coupling of code. In fact, one of the things that make TDD hard to learn is that our code tends to be SO tightly coupled that it can’t be tested. There are whole books about how to decouple legacy code so we can get tests around them. There are problems with this, but we’ll get to those in a bit.&lt;/p&gt;
&lt;p&gt;The next major benefit of TDD is that it allows us to refactor our code without worrying about breaking anything. This is the feature I like the most. I was working on a system recently where the requirements were being “leaked” to me a bit at a time. I’d get something done and it would be “oh, I forgot to tell you about…”  &lt;/p&gt;
&lt;p&gt;Arrrgh.&lt;/p&gt;
&lt;p&gt;I was able to add the new code up until the last, “Oh, I forgot…”  And that broke my whole pattern. But it forced a much better architecture.&lt;/p&gt;
&lt;p&gt;Now in the old days, before I started writing tests, I would have been really nervous about tearing the code apart and putting it back together again. What if I broke something that already worked? But, because I had a large suite of tests around this code, I could refactor, run the tests, and fix the tests until I was back to everything working. Without the tests, I would not have known that I broke anything.&lt;/p&gt;
&lt;p&gt;BTW, no one has found any bugs in this code yet and it has been almost a year since I wrote it.&lt;/p&gt;
&lt;p&gt;Related to refactoring, by having a suite of tests in place, we can be reasonably sure that, as we add new features, we aren’t breaking any existing features.&lt;/p&gt;
&lt;p&gt;Next, TDD forces, or it should force, incremental coding.&lt;/p&gt;
&lt;p&gt;I was surprised when I found out that people don’t program incrementally. I always write just enough code to move the project along and then test it. But I know people who write code for hours and even days before they run any of it. And then, they can’t figure out where they broke the code. TDD done correctly, doesn’t let this happen.&lt;/p&gt;
&lt;p&gt;And finally, once you’ve learned how to test, TDD actually increases the speed with which you can produce quality code. I know a guy who brags about how fast he can code. But I also know he’s only counting the time until he said he was done, not the time it took him to fix all the bugs he found. Is he really any faster than any other programmer? It is hard to judge. But studies have shown that using TDD leads to greater over all speed and less technical debt. Something to consider.&lt;/p&gt;
&lt;h2 id=&#34;Disadvantages-of-TDD&#34;&gt;&lt;a href=&#34;#Disadvantages-of-TDD&#34; class=&#34;headerlink&#34; title=&#34;Disadvantages of TDD&#34;&gt;&lt;/a&gt;Disadvantages of TDD&lt;/h2&gt;&lt;p&gt;But for all those benefits, there are still some major problems with TDD as a practice. &lt;/p&gt;
&lt;p&gt;The first and most looming of all, is the fact that using TDD introduces A LOT of friction into the programming process. As an exercise, I wrote a demo application using TDD while learning a new framework. I knew the language and the testing framework, I was just learning a new programming framework. The problem was I not only had to learn the new framework, but the framework has its own helper functions for testing that I also had to learn.&lt;/p&gt;
&lt;p&gt;I would say this friction is what holds most people back and is often voiced as, “TDD slows down my programming.”  Which is true until you’ve learned it all.&lt;/p&gt;
&lt;p&gt;The tendency with TDD is to try to get 100% code coverage. This often lulls us into the belief that we’ve tested everything that can be tested. But the problem is, because our code often has hidden parameters, we can’t always be sure we’ve written enough tests to be sure that we’ve covered all the possible ways those parameters show up. So, the fact is, we can’t be sure we have 100% coverage of the situations our code may run into even if we have 100% coverage of our code.&lt;/p&gt;
&lt;p&gt;The next two disadvantages impact relatively new programmers. That is, people who have been programming for less than 5 years. The problem is, that’s half of the programmers available to the market. After 5 years, you’ve either been promoted to management where you eventually forget how to program or, at the very best only know what you knew when you were promoted, or you’ve moved on to a new career. And then there are people like me who can’t stop coding.&lt;/p&gt;
&lt;p&gt;The problem with programmers who have less than 5 years of experience is that they don’t have any concept of design patterns and they know nothing of architecture. And unless you work in an organization that has senior level programmers with more than 10 years of experience, you aren’t likely to know it is even something you need to learn. And here is the problem. It is nearly impossible to implement TDD if you don’t have a broad understanding of these two subjects. If you have less than 5 years of experience, you are still focused on the basic problem of naming things, keeping your code DRY, and making sure you are implementing the single responsibility principle.&lt;/p&gt;
&lt;p&gt;And finally, there is simply nothing that is making you write tests. Your code will compile and run just fine without them. The syntax of your language really doesn’t care. So given all the detractors, it is really easy to just not write them at all. There, I’ve said it. Yes, we SHOULD use TDD, but it is impractical to expect any but the most seasoned programmers to use this methodology. And by then, they may not need them as much.&lt;/p&gt;
&lt;h2 id=&#34;What-Tests-Aren’t-Needed&#34;&gt;&lt;a href=&#34;#What-Tests-Aren’t-Needed&#34; class=&#34;headerlink&#34; title=&#34;What Tests Aren’t Needed&#34;&gt;&lt;/a&gt;What Tests Aren’t Needed&lt;/h2&gt;&lt;p&gt;But what if we could write code that didn’t need to be tested? Well, generally any code you can look at and be sure you know what it does and what you can expect is code you don’t have to test. Code with a cyclomatic complexity of 2 or lower, which still allows for a condition or two. Code that is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Small.&lt;/li&gt;
&lt;li&gt;No conditions&lt;/li&gt;
&lt;li&gt;No hidden parameters&lt;/li&gt;
&lt;li&gt;No side effects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By “small” I’m talking about code that is, ideally, 5 lines or fewer with the occasional 10 lines in the rarest of instances. &lt;/p&gt;
&lt;p&gt;No hidden parameters. This is a big one. Think about code you’ve recently written. If you are writing Object-Oriented code, you typically have a method that takes a parameter or two (maybe more) and then accesses a member variable and may even create a new object in the middle of the function. The reason we have Dependency Injection is to give us the ability to inject mock objects into our tests so that we can write test against something stable and known rather than these hidden parameters that are constantly changing. &lt;/p&gt;
&lt;p&gt;“No side effects” is a specific instance of a hidden parameter. Anyone try to test code that accesses a database? What if all the code you wrote that had some side effect was isolated to a specific area of your program? In that case, it would reduce the number of tests you would need to write to just that area. And if you wrote that code correctly, the tests would be trivial to write.&lt;/p&gt;
&lt;h2 id=&#34;I’ve-Fallen-in-Love-…&#34;&gt;&lt;a href=&#34;#I’ve-Fallen-in-Love-…&#34; class=&#34;headerlink&#34; title=&#34;I’ve Fallen in Love …&#34;&gt;&lt;/a&gt;I’ve Fallen in Love …&lt;/h2&gt;&lt;p&gt;And this is why I’ve fallen in love with the concepts behind Functional Programming.&lt;/p&gt;
&lt;p&gt;In Functional Programming you have a series of functions that you chain together. Much like fluent programming in the Object-Oriented world, the return value of a function becomes the input for the next function. Each function does just one thing, so they implement the Single Responsibility principle probably better than any class you can possibly write. Each function only works on the parameters it has been given, so you don’t need to worry about hidden parameters and the function is not allowed to generate a side effect.  Even your conditions are handled by functions that filter the data before passing it on. This all makes your code REALLY easy to test if you decide you need to test it at all.&lt;/p&gt;
&lt;p&gt;Of course, no one ever said we couldn’t have side effects. Those are all isolated to specific code that is super easy to test.&lt;/p&gt;
&lt;p&gt;If this is all new to you, I suggest you take a look at the &lt;a href=&#34;//reactivex.io/&#34;&gt;ReactiveX&lt;/a&gt; and start learning this library in the language of your choice.&lt;/p&gt;
&lt;p&gt;For me, the gateway drug into the Functional world has be NgRX and the Flux&amp;#x2F;Redux pattern which is based on RxJS a JavaScript implementation of ReactiveX.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/how-you-do-anything/</guid>
            <title>How you do Anything ...</title>
            <link>http://davembush.github.com/how-you-do-anything/</link>
            <category>agile</category>
            <category>best practices</category>
            <category>extreme programming</category>
            <pubDate>Tue, 20 Feb 2018 06:30:35 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve been programming now for 30 years. Over those thirty years, and more so over the last five to ten years, I’ve become increasingly frustrated by the attitude of managers and programmers alike toward programming. &lt;/p&gt;
&lt;p&gt;One programmer I know is pretty vocal about this attitude.  All he seems to care about is how fast he can write the code.  “I got that application done in a month!”  And then he’ll complain about how it is everyone else’s fault that he spent the next four months fixing bugs. &lt;/p&gt;
&lt;p&gt;And it is no wonder he has this attitude.  Most of the managers I’ve worked for will acknowledge that there is a lot of technical debt, but the pressure of getting the code written always outweighs the pressure of the debt. &lt;/p&gt;
&lt;p&gt;I’ve said for years that I’m not at all surprised that software has bugs.  What surprises me most is that any of our code works at all.  If we are honest about our code, we recognize that our code is worse than a store front on the wild west.  A nice facade on the front that everyone sees (if we are lucky) but look behind the facade and the store is barely standing up because the design, architecture and lumber is so bad. &lt;/p&gt;
&lt;p&gt;But, if it is true that “How you do anything is how you do everything.”  shouldn’t we spend a little time practicing quality in the not so obvious places so that we can get in the habit of quality?  Maybe a culture of quality will rub off into our code and produce code that really does get written quickly and has very little technical debt.  Not just in the area of bugs, but in flexibility, architecture, and design. &lt;/p&gt;
&lt;p&gt;So, what could we change in our programming practice that wouldn’t require persuading a manager to make a change in how the whole organization worked? &lt;figure&gt;&lt;img src=&#34;/uploads/2018/02/2018-02-20.jpg&#34; title=&#34;How you do anything...&#34;&gt; Photo on &lt;a href=&#34;//visualhunt.com/re/cecba2&#34;&gt;Visualhunt&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;How-do-you-Dress&#34;&gt;&lt;a href=&#34;#How-do-you-Dress&#34; class=&#34;headerlink&#34; title=&#34;How do you Dress?&#34;&gt;&lt;/a&gt;How do you Dress?&lt;/h2&gt;&lt;p&gt;When I first started programming, I had to wear a suit to work.  I forgot my tie one day and actually got reprimanded.  This, despite the fact that the programmers were tucked away in a back room that you had to know existed to get to.  That is, there was no way one of the customers our business worked with was going to find us.  I hated it. &lt;/p&gt;
&lt;p&gt;The pendulum has in the opposite direction.  I’ve been on several interviews where I’ve explicitly been told to NOT wear a suit. &lt;/p&gt;
&lt;p&gt;But I do wonder.  Does how we dress have an impact on our code?  If we don’t care much about how WE look, might we not care that much about what our code looks like?  Does it matter?  I think it might. &lt;/p&gt;
&lt;p&gt;Might it also subconsciously impact other’s view of the quality of code you produce?  You know the adage.  Always dress just below your manager.  But what if your manager dresses like a slob?  Currently, my signature work clothes are black jeans, button down shirt and a sweater.  But, I’m thinking of bumping it up a notch.&lt;/p&gt;
&lt;h2 id=&#34;What-does-your-desk-look-like&#34;&gt;&lt;a href=&#34;#What-does-your-desk-look-like&#34; class=&#34;headerlink&#34; title=&#34;What does your desk look like?&#34;&gt;&lt;/a&gt;What does your desk look like?&lt;/h2&gt;&lt;p&gt;There was a guy I worked with early on in my career who always left his desk in a condition that looked like no one had worked at the desk in months.  Everything was put away.  Several years ago, I decided to take on that habit. &lt;/p&gt;
&lt;p&gt;Funny story.  A couple of gigs ago, a manager from three levels up came down to visit after I had left for the day.  She looked at my desk and said, “Does anyone work here?”  My manager said, “YES!!! Don’t touch anything!”  Guess she was hunting for stray equipment. &lt;/p&gt;
&lt;p&gt;I would say, this simple act was the pivot point for me when I started to care more about my code beyond “Does it work?” &lt;/p&gt;
&lt;p&gt;There is something about working in a clean area slightly dressed up.  Other parts of your life follow along for the ride.&lt;/p&gt;
&lt;h2 id=&#34;Linters&#34;&gt;&lt;a href=&#34;#Linters&#34; class=&#34;headerlink&#34; title=&#34;Linters&#34;&gt;&lt;/a&gt;Linters&lt;/h2&gt;&lt;p&gt;One of those areas is what your code looks like.  A linter can be configured to enforce style rules on your code.  And can also catch dumb mistakes.  The more I use linters, the more convinced I am everyone should use one. &lt;/p&gt;
&lt;p&gt;Here is some of the ways you will benefit, even if you are the only one using a linter.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your code will always follow the same format.  This will make the code easier to read and understand.&lt;/li&gt;
&lt;li&gt;As I mentioned, some rules help catch dumb mistakes before you even run the code.&lt;/li&gt;
&lt;li&gt;Just like a clean desk feels inviting, well formatted code feels inviting.  The converse, poorly formatted code, adds to the stress level of working on the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Learn-Your-Tools&#34;&gt;&lt;a href=&#34;#Learn-Your-Tools&#34; class=&#34;headerlink&#34; title=&#34;Learn Your Tools&#34;&gt;&lt;/a&gt;Learn Your Tools&lt;/h2&gt;&lt;p&gt;I am amazed at how many places I’ve worked where they expect you to learn a particular tool on the fly.  No training.  “We are now using X on this next project.  Download it and start using it!”  And then they wonder why the project is such a disaster.  Bugs everywhere. &lt;/p&gt;
&lt;p&gt;Want to look like a rock star?  Want to be the guy the boss ask “what should we do?”  Be the guy who knows that new tool better than anyone else. &lt;/p&gt;
&lt;p&gt;In the process, you’ll also be the guy who uses the tool the way the people who developed that tool intended it to be used. &lt;/p&gt;
&lt;p&gt;Here’s a truth I’ve observed.  Everyone wants to use whatever tool they’ve just started using like the last tool they used.  And then, when it doesn’t, the new tool “doesn’t work.”  This one truth has done more to hold our industry back than any other one thing I can point to.&lt;/p&gt;
&lt;h2 id=&#34;Design-Patterns&#34;&gt;&lt;a href=&#34;#Design-Patterns&#34; class=&#34;headerlink&#34; title=&#34;Design Patterns&#34;&gt;&lt;/a&gt;Design Patterns&lt;/h2&gt;&lt;p&gt;Learn the basic design patterns for your environment.  But go beyond learning the pattern.  Learn why the pattern exist.  What problem does it solve?  Be able to recognize counterfeits.&lt;/p&gt;
&lt;h2 id=&#34;Architecture&#34;&gt;&lt;a href=&#34;#Architecture&#34; class=&#34;headerlink&#34; title=&#34;Architecture&#34;&gt;&lt;/a&gt;Architecture&lt;/h2&gt;&lt;p&gt;Along with Design Patterns, learn the basics of Architecture.  Here’s a hint.  All good architecture answers the question, “How can I write code that is not dependent on any other code?”  This is one of the reasons I love Functional Programming.  By design, Functional code is not dependent on other code.  Dependencies are passed into the function.  But you can achieve similar objectives using Object Oriented programming languages or even Procedural languages.&lt;/p&gt;
&lt;h2 id=&#34;Single-Responsibility&#34;&gt;&lt;a href=&#34;#Single-Responsibility&#34; class=&#34;headerlink&#34; title=&#34;Single Responsibility&#34;&gt;&lt;/a&gt;Single Responsibility&lt;/h2&gt;&lt;p&gt;Granular is better than Monolithic!  Don’t be afraid to split things up.  Use components.  Compose classes of other classes.  Components of other components.  And most important of all, don’t create a Utils class of any kind.  In some languages this is easier than others.  But if you can, any method you have in a Utils class should be a function in its own file.  If you can’t do that, maybe each function belongs in its own class unless there is a strong argument for putting them together in a class that can be reasonably named in a way that obviously groups those methods. &lt;/p&gt;
&lt;p&gt;Another pet peeve of mine is putting multiple classes or interfaces in one file. Split them up!  Don’t make me go hunting for the source of a class. &lt;/p&gt;
&lt;p&gt;The ONLY time you might be excused from splitting things up is if the only place the code is being used is in the file’s main class.  But once you make that class available to the outside world, out it comes.&lt;/p&gt;
&lt;h2 id=&#34;Alternate-Languages&#34;&gt;&lt;a href=&#34;#Alternate-Languages&#34; class=&#34;headerlink&#34; title=&#34;Alternate Languages&#34;&gt;&lt;/a&gt;Alternate Languages&lt;/h2&gt;&lt;p&gt;This should go without saying.  But the more languages you learn, the better programmer you will become.  I remember when I started learning C++, I had a hard time understanding references.  And then I started learning Clipper (a dBase III compiler) and something they said made references make sense suddenly. &lt;/p&gt;
&lt;p&gt;And this has been my experience all along.  Every new thing I learn helps me see problems in a slightly different perspective.  Making my code in every language I know that much better.&lt;/p&gt;
&lt;h2 id=&#34;Code-Reviews&#34;&gt;&lt;a href=&#34;#Code-Reviews&#34; class=&#34;headerlink&#34; title=&#34;Code Reviews&#34;&gt;&lt;/a&gt;Code Reviews&lt;/h2&gt;&lt;p&gt;So far, everything I’ve mentioned is something you can do on your own.  This last one will require at least one other person.  Maybe you can buddy up with someone at work for this. &lt;/p&gt;
&lt;p&gt;It amazes me that in 30 years of programming, only three of those years have been in an environment where my code was ever reviewed by someone else.  But getting another set of eyes on your code is helpful if for no other reason than someone else has had to try to understand what you did while you still remember instead of waiting years and you’ve forgotten or moved on.  None of us are as smart as all of us.  Take advantage of another pair of eyes on your code, even if that’s not a formal thing where you currently work.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/humpty-dumpty-and-programming/</guid>
            <title>Humpty Dumpty and Programming</title>
            <link>http://davembush.github.com/humpty-dumpty-and-programming/</link>
            <category>programming</category>
            <category>agile</category>
            <category>design patterns</category>
            <pubDate>Tue, 05 Dec 2017 06:30:32 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve noticed a pattern in the programming world at large both with programmers and with managers.  We define things how we want them to be for our organization and not how they are.  We are like Humpty Dumpty who says, “When I use a word … it means just what I choose it to mean – neither more nor less.” &lt;/p&gt;
&lt;p&gt;There are two places where I see this pattern manifesting.  The Agile movement and Design Patterns. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/12/2017-12-05.png&#34; title=&#34;Humpty Dumpty and Programming&#34;&gt; Photo by &lt;a href=&#34;//visualhunt.com/author/f31767&#34;&gt;aturkus&lt;/a&gt; on &lt;a href=&#34;//visualhunt.com/re/b4881b&#34;&gt;Visualhunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Agile&#34;&gt;&lt;a href=&#34;#Agile&#34; class=&#34;headerlink&#34; title=&#34;Agile&#34;&gt;&lt;/a&gt;Agile&lt;/h2&gt;&lt;p&gt;Longtime readers are familiar with my rants against the failure of Agile.  Ever job interview I go to eventually ends up asking the same question. &lt;/p&gt;
&lt;p&gt;“Have you ever worked in an Agile organization before?” &lt;/p&gt;
&lt;p&gt;I have a lot of issues with this question, but my answer is always the same.  “I’ve worked in several organizations that call themselves Agile, but I’ve yet to work in one that really is.”  And there is the problem.  Even if I say I’ve worked in an Agile organization, there is no possible way you can be sure I’ve worked in an Agile organization that defines Agile the way you describe Agile.  So, why even ask the question? &lt;/p&gt;
&lt;p&gt;It is like Humpty Dumpty trying to explain the meaning of the poem &lt;a href=&#34;//www.jabberwocky.com/carroll/jabber/jabberwocky.html&#34;&gt;Jabberwocky&lt;/a&gt;. We define Agile with the bits we like and ignore the bits we don’t like or don’t understand, like the 4 blind men “looking” at an elephant and then wonder why it doesn’t really work for our organization. &lt;/p&gt;
&lt;p&gt;Next time someone ask me that question, I may just answer the question with another question, “Why do you ask?” or “How do you define ‘Agile’?” &lt;/p&gt;
&lt;p&gt;Seriously! What’s the point of asking the question when it doesn’t tell you anything about the applicant you are interviewing?  Agile has become such a major buzzword that I doubt you’ll find any applicants that haven’t worked in an organization that calls itself “Agile.”&lt;/p&gt;
&lt;h2 id=&#34;Design-Patterns&#34;&gt;&lt;a href=&#34;#Design-Patterns&#34; class=&#34;headerlink&#34; title=&#34;Design Patterns&#34;&gt;&lt;/a&gt;Design Patterns&lt;/h2&gt;&lt;p&gt;The more popular the design pattern, the more likely we are to see the exact same issues in our programming.  Currently, we can most clearly see this in the MV* design pattern.  Here again, people are using the design pattern based on what they imagine it to be. &lt;/p&gt;
&lt;p&gt;In an article I wrote several months ago, someone recently commented about MVVM, “Isn’t that the way MVVM works? views don’t have business login, only pure “view” logic, the ViewModel is the one having business logic.” &lt;/p&gt;
&lt;p&gt;This is a common misconception.  That the ViewModel, or the Controller, or the Presenter (MVP) are where our business logic go.  This completely ignores the fact that MV* is a View layer design pattern.  The View part of the MV* is the part within the larger View layer that is responsible for rendering state.&lt;/p&gt;
&lt;h2 id=&#34;A-Community-of-Hacks&#34;&gt;&lt;a href=&#34;#A-Community-of-Hacks&#34; class=&#34;headerlink&#34; title=&#34;A Community of Hacks?&#34;&gt;&lt;/a&gt;A Community of Hacks?&lt;/h2&gt;&lt;p&gt;Are we just a community of hacks?  I think maybe we are. All we care about is that we’ve shipped some code. We, largely, don’t care about our craft.  If we were artist, we starve.  Not because artist starve (which is a myth by the way) but because the code we produce is so crappy, no one would consider it valuable. &lt;/p&gt;
&lt;p&gt;If we built houses, we’d never get past the building inspectors.  If we were architects, the houses would never get built because the plans are too confusing. &lt;/p&gt;
&lt;p&gt;The blessing and the curse of programming is that we can change things quickly.  Because we can change things quickly, this has us believing there is no need to be careful. &lt;/p&gt;
&lt;p&gt;Each year we need more and more programmers to work on code because the codebase becomes crappier each year.  No one cares.  In the 30 years I’ve been programming, I’ve only had my code reviewed as a practice in two organizations.  That alone should tell you something about the state of our code.  And for all the claims about being Agile, none have used any best practices that grew out of Extreme Programming!&lt;/p&gt;
&lt;h2 id=&#34;What-If&#34;&gt;&lt;a href=&#34;#What-If&#34; class=&#34;headerlink&#34; title=&#34;What If?&#34;&gt;&lt;/a&gt;What If?&lt;/h2&gt;&lt;p&gt;In previous post I’ve explored both sides of the technical interview process.  Up until recently, the technical interviews focused on the language, the framework, the tools.  And we try to develop an interview process that assures us that the applicant can actually use those tools.  Then when we hire them, and they can’t actually code. We wonder why? &lt;/p&gt;
&lt;p&gt;What if we got beyond tools to how people think?&lt;/p&gt;
&lt;h2 id=&#34;Code-Puzzles&#34;&gt;&lt;a href=&#34;#Code-Puzzles&#34; class=&#34;headerlink&#34; title=&#34;Code Puzzles&#34;&gt;&lt;/a&gt;Code Puzzles&lt;/h2&gt;&lt;p&gt;Recently, I’ve been challenging myself with coding puzzles that are typically used at places like Google, Facebook and Amazon.  Problems that get at issues such as BigO notation, Binary Trees,  Memoization and much more.  I’m doing this for several reasons.  First, working on problems like this reminds me that I’m really not all that smart.  Oh, I can get by, but I don’t challenge myself to produce the best code possible.  Maybe the rant above is more about me than the industry, but I don’t think so.  I think I’ve risen (or more accurately, sunk) to the level of the people I’m surrounded by who themselves are only as high as the people they’ve been working with. &lt;/p&gt;
&lt;p&gt;I’m also doing these problems because being able to do them will inform my code.  Maybe I’ll never actually need to know about depth first vs breath first searches of a binary tree, but if I can do those problems, I will have additional tools in my toolbox when I code the mundane things.  &lt;/p&gt;
&lt;p&gt;And finally, these kinds of problems almost always have edge cases I don’t see.  I really need to get better at discovering edge cases before my clients do. &lt;/p&gt;
&lt;p&gt;And now, here’s the big question.  If these are the kind of questions that Google, Facebook, Amazon and others are using, what do they know that other companies don’t?  Could it be that hiring programmers that can answer these kinds of questions not only ensures that the quality of the code is better, but is actually cheaper in the long run?  Why not hire programmers who are a dime a dozen and can get the job done, but produce crappy code in the process?  I mean, if code quality doesn’t matter like most of our industry thinks, why do these successful companies not just go hire warm bodies?&lt;/p&gt;
&lt;h2 id=&#34;The-Advantage&#34;&gt;&lt;a href=&#34;#The-Advantage&#34; class=&#34;headerlink&#34; title=&#34;The Advantage&#34;&gt;&lt;/a&gt;The Advantage&lt;/h2&gt;&lt;p&gt;The advantage to hiring based on how people think rather than on what tools they know is that when the tools change, it won’t matter to the developer who can think through these tougher issues.  On the other hand, those who can’t won’t be able to grasp some of the newer concepts that show up in newer tools.  I’ve seen this first hand as I’ve tried to explain NgRX, RxJS and Functional Programming generally to some of my peers.  Are they difficult concepts.  Sure they are! Are they worth learning? Absolutely!&lt;/p&gt;
&lt;h2 id=&#34;Be-Intentional&#34;&gt;&lt;a href=&#34;#Be-Intentional&#34; class=&#34;headerlink&#34; title=&#34;Be Intentional&#34;&gt;&lt;/a&gt;Be Intentional&lt;/h2&gt;&lt;p&gt;So, what’s the point of all of this?  Mostly, be intentional. Don’t coast. Learn everything you can about your craft. &lt;/p&gt;
&lt;p&gt;Do you really know what MVC, MVVM, MVP, etc are and how they work? Or, are you just working off of what someone else has told you? &lt;/p&gt;
&lt;p&gt;Do you really know what Agile is? &lt;/p&gt;
&lt;p&gt;How many design patterns do you know that aren’t the hot new trend? &lt;/p&gt;
&lt;p&gt;Could you code your way out of an interview with Google, Facebook or Amazon? &lt;/p&gt;
&lt;p&gt;Where do you want to be with your career next year?  In 5 years? &lt;/p&gt;
&lt;p&gt;Are you average or striving to be awesome? &lt;/p&gt;
&lt;p&gt;Join me on the journey!&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/the-myth-of-sloppy-code/</guid>
            <title>The Myth of Sloppy Code</title>
            <link>http://davembush.github.com/the-myth-of-sloppy-code/</link>
            <category>tdd</category>
            <category>agile</category>
            <category>design patterns</category>
            <pubDate>Tue, 18 Oct 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;ul&gt;
&lt;li&gt;Tightly coupled code runs faster.&lt;/li&gt;
&lt;li&gt;Tightly coupled code is easier to write.&lt;/li&gt;
&lt;li&gt;Test Driven Development increases development time.&lt;/li&gt;
&lt;li&gt;Test Driven Development negatively impacts code design.&lt;/li&gt;
&lt;li&gt;Knowing the names of design patterns isn’t important as long as you can use them.&lt;/li&gt;
&lt;li&gt;All my customer cares about is how soon they can have the product, not how clean the code is.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these statements, and others like them, are excuses for not writing code correctly. And you know what an excuse is, right?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The skin of a reason stuffed with a lie.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;![](/uploads/2016/10/image-1.png &#34;The Myth of Sloppy Code&#34;)&lt;figcaption&gt;Photo credit: [dynamosquito](//www.flickr.com/photos/dynamosquito/5866244470/) via [Visualhunt.com](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;  

&lt;p&gt;Now, I could go through and argue each of the points above. But today, I want to look more at the attitude behind these statements.&lt;/p&gt;
&lt;h2 id=&#34;It’s-All-in-Your-Head&#34;&gt;&lt;a href=&#34;#It’s-All-in-Your-Head&#34; class=&#34;headerlink&#34; title=&#34;It’s All in Your Head&#34;&gt;&lt;/a&gt;It’s All in Your Head&lt;/h2&gt;&lt;p&gt;Man is a funny being. We make decisions with our hearts and justify the decisions with our brains. Once you know this, you can hack it to your favor. But how does this relate to what we’ve been talking about? It is really quite simple. All of the best practices I’ve mentioned above require work to learn. We would rather not invest the time to learn how to do these well, and so rather than just saying, “this is not where I choose to spend my time right now” we say things like, “my management won’t let me do that” or “my way is more efficient” or at times, we even resort to vilifying the practice.&lt;/p&gt;
&lt;p&gt;I have the same issue when I try to convince management that their process needs to change. It took seven years for me to get one company to move their project management system from email to project management software. Why? Because what they were doing “worked” and they couldn’t see that doing something different would work better in any way.&lt;/p&gt;
&lt;h2 id=&#34;A-Skin-of-a-Reason&#34;&gt;&lt;a href=&#34;#A-Skin-of-a-Reason&#34; class=&#34;headerlink&#34; title=&#34;A Skin of a Reason&#34;&gt;&lt;/a&gt;A Skin of a Reason&lt;/h2&gt;&lt;p&gt;So, let’s look at the parts of these myths that are true.&lt;/p&gt;
&lt;p&gt;First, it is true that while you are learning how to use any one of these best practices, it will in fact, take you longer to write your code. Tightly coupled code is easier to reason about and one could argue is therefore easier to write. Test Driven Development is one of the most difficult things to learn. And just like the myth that Agile&amp;#x2F;Scrum&amp;#x2F;Kanban doesn’t work, the myth that Test Driven Development doesn’t work is largely based on misconceptions about what Test Driven Development is. Initially, it will impact the time it takes for you to write your code. But the more interesting argument to me is that testing negatively impacts design. If you mean that you can’t use the design you are used to using and that design involves writing tightly coupled code. Yeah, I guess it does.&lt;/p&gt;
&lt;p&gt;Implementing design patterns is better than not. It is true. But that doesn’t mean you shouldn’t learn the names.&lt;/p&gt;
&lt;p&gt;Yes, your customer cares about how fast you can get the project done. But, that isn’t all they care about.&lt;/p&gt;
&lt;h2 id=&#34;The-Lies&#34;&gt;&lt;a href=&#34;#The-Lies&#34; class=&#34;headerlink&#34; title=&#34;The Lies&#34;&gt;&lt;/a&gt;The Lies&lt;/h2&gt;&lt;p&gt;Just because something takes longer while you are learning how to do it, doesn’t mean it will always take longer. It probably took you a while to learn how to program proficiently too. That didn’t stop you did it? Does it take you as long to program now as when you first started? Of course not! Let’s look at this from another angle. As you’ve learned multiple languages, would you say that it made you a better or worse programmer? Unless you have a very strange perspective, you will probably answer better. Was the new language hard to learn? Of course. Did it take you longer to code using the new language than one you knew previously? Of course. Would you say the result of being proficient in both has made it easier or harder to code in both? Easier, right? Tightly coupled code is easier to write, but as the application grows, tightly coupled code becomes harder to add to and harder to maintain. It lends itself to code duplication and is more likely to be the code base that needs to be rewritten first.&lt;/p&gt;
&lt;p&gt;Tightly coupled code is also the hardest to tests and is probably the reason you don’t want to write test for your code. Because you write tightly coupled code, testing is MUCH harder than it should be. This leads you to have a firm belief that writing tests is hard as well. A vicious cycle.&lt;/p&gt;
&lt;p&gt;And if you believe that tightly coupled code is a proper design, you will believe that tightly coupled code hinders design. But in fact, writing tests will force you to write loosely coupled code. So, instead of hindering design, it actually helps it.&lt;/p&gt;
&lt;p&gt;I used to think not learning the correct names for design patterns didn’t matter. But the advantage of knowing the proper name for things is that we can all talk about something using the name rather than trying to explain what that thing is with lots of words. It saves time. But, there is another much more subtle reason why you need to learn the proper name for things. You might be calling a design pattern you are using by an incorrect name and confusing the people you are communicating with. And, finally, learning the names for all of the design patterns will expose you to design patterns you aren’t aware of, broadening your horizons.&lt;/p&gt;
&lt;p&gt;This last one is, or should be the most obvious. Getting the project done quickly isn’t ALL your customer cares about. It might be a relatively high priority, but I can assure you, if you explain to them that getting the project done as fast as possible will mean you have to rewrite the code if they want any changes, you’ll quickly find out that redoing work they’ve already paid for doesn’t sit well with them either.&lt;/p&gt;
&lt;h2 id=&#34;Benefits&#34;&gt;&lt;a href=&#34;#Benefits&#34; class=&#34;headerlink&#34; title=&#34;Benefits&#34;&gt;&lt;/a&gt;Benefits&lt;/h2&gt;&lt;p&gt;It is a sad, sad truth that by convincing yourself that not investing in these best practices really is best for you and the clients you work for, you’ve also limited yourself to the quality of client you can work for. The places that pay well expect you to know how to do this stuff. They believe in good design. They believe in testing. They know how to implement design patterns.&lt;/p&gt;
&lt;p&gt;And guess what, these places also pay better too. It raises you beyond the level of “commodity programmer” and into the level of “rare gem” How do I know? This past year I’ve been doing a lot of interviewing. For various reasons, I decided to interview for jobs that pay 25% better than what I currently make. In the beginning, I did this because I figured it would expose me to people more like myself who wanted to be better. In the process, I discovered that the interview process is a little harder, but not impossible. I figured out what I still need to learn. And, I managed to beat my goal. Time to notch it up a bit more.&lt;/p&gt;
&lt;h2 id=&#34;Are-You-Dead&#34;&gt;&lt;a href=&#34;#Are-You-Dead&#34; class=&#34;headerlink&#34; title=&#34;Are You Dead?&#34;&gt;&lt;/a&gt;Are You Dead?&lt;/h2&gt;&lt;p&gt;You hear stories all the time about people who can’t find work in our industry. When you ask, you find out that all they know is something that was hot 10 years ago or longer. Well, of course you can’t find a job. And it is no wonder the last company got rid of you. You provide no value.&lt;/p&gt;
&lt;p&gt;This past week I heard someone tell me the equivalent of, “I’m not going to learn anything new. Every time I do, it ends up being hot for a few years and then it is gone.” I was stunned. I fear for this guy. You might as well say, “I’m planning to retire in 10 years or less.” because that is what will happen to you. Worse, if you stop learning completely, you could end up with dementia or worse.&lt;/p&gt;
&lt;p&gt;My plan is to program until I’m at least 75. Longer if I stay healthy enough. Even if I could retire, I won’t. What would I do? I love programming. I love mentoring other programmers. I love learning new stuff.&lt;/p&gt;
&lt;h2 id=&#34;Do-hard-stuff&#34;&gt;&lt;a href=&#34;#Do-hard-stuff&#34; class=&#34;headerlink&#34; title=&#34;Do hard stuff&#34;&gt;&lt;/a&gt;Do hard stuff&lt;/h2&gt;&lt;p&gt;And so what’s the point of all this? Do hard stuff. It will make you a better programmer.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/8-reasons-johnny-does-not-write-bug-free-code/</guid>
            <title>8 Reasons Johnny Does Not Write Bug Free Code</title>
            <link>http://davembush.github.com/8-reasons-johnny-does-not-write-bug-free-code/</link>
            <category>tdd</category>
            <category>code</category>
            <category>agile</category>
            <category>scrum</category>
            <category>bug</category>
            <pubDate>Tue, 20 Sep 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;There have been a number of things that have occurred over the last week that have prompted this particular post.  And for anyone I work with, this is not an indictment of our work place so much as it is an indictment of our industry.  PLEASE don’t take this personally.&lt;/p&gt;
&lt;p&gt;Some of those reasons will show up in this article.  But the question we need to examine today is why is it so hard to write bug free code.  And I’m not even talking about perfection.  Why is it that we miss the simple stuff?  The stuff that once it is found, we think, “how could we have missed that?!”.  I’m perfectly aware that all code has bugs some just haven’t been found yet.  I’m also aware that no matter how hard I try, the stupid bugs always make their way past my desk.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/09/image-1.png &#34;8 Reasons Johnny Does Not Write Bug Free Code&#34;)&lt;figcaption&gt;Photo credit: [~Pawsitive~Candie_N](//www.flickr.com/photos/scjn/3450910519/) via [Visualhunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;No-Training&#34;&gt;&lt;a href=&#34;#No-Training&#34; class=&#34;headerlink&#34; title=&#34;No Training&#34;&gt;&lt;/a&gt;No Training&lt;/h2&gt;&lt;p&gt;Certainly not the only reason.  But at the same time I think this is a core reason.  Our industry really sucks when it comes to teaching computer science.  So much so, that I’ve written articles about how, for the most part, you don’t need a college education to become a programmer.  Maybe if we taught what programmers don’t already know how to do, a college education would be valuable.&lt;/p&gt;
&lt;p&gt;But what do we do instead?  We teach programmers how to program.&lt;/p&gt;
&lt;p&gt;Dumb! I think back to my education.  Here’s a basic summary of what I learned:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;COBOL, dBase III, JCS, CICS syntax.&lt;/li&gt;
&lt;li&gt;Break your code into functions&lt;/li&gt;
&lt;li&gt;A bit on how to do requirements analysis.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Guess what?  I could have learned all of that on my own.  How do I know that?  Because I had already taught myself, Basic and C before.  I taught myself every language I’ve learned since.  I was already writing structured code, and still do.  And how we gather requirements has changed and somehow I managed to learn that on my own.  Programming is a learning profession.  It is one of the things that makes it attractive to me.&lt;/p&gt;
&lt;p&gt;But what didn’t I learn?  At no point did anyone ever teach me how to break my own code.  And while Test Driven Development wasn’t a thing when I was going to school.  I doubt they are teaching it today.  (Let me know if your school did or is.)&lt;/p&gt;
&lt;h2 id=&#34;Happy-Path-Specs&#34;&gt;&lt;a href=&#34;#Happy-Path-Specs&#34; class=&#34;headerlink&#34; title=&#34;Happy Path Specs&#34;&gt;&lt;/a&gt;Happy Path Specs&lt;/h2&gt;&lt;p&gt;So, the programmers have no training.  But it isn’t just a programmer problem.&lt;/p&gt;
&lt;p&gt;When is the last time you got a specification from whoever creates them in your organization that had any more than a happy path set of requirements?  But, certainly there are things the system should not do.  I recently had to go asking for required fields and maximum field lengths in an application I was working on.  And that’s the simple stuff.&lt;/p&gt;
&lt;h2 id=&#34;Not-My-Job&#34;&gt;&lt;a href=&#34;#Not-My-Job&#34; class=&#34;headerlink&#34; title=&#34;Not My Job&#34;&gt;&lt;/a&gt;Not My Job&lt;/h2&gt;&lt;p&gt;If you have a QA department, you might be tempted to leave testing to QA.  My personal goal is to make sure QA doesn’t find anything.  At least, not something really obvious.&lt;/p&gt;
&lt;p&gt;But I know that some programmers get sloppy about testing their code if they know the safety net of QA exist.&lt;/p&gt;
&lt;p&gt;There is also the problem of QA believing they are the only ones who test.  Strange, but true.  When QA found out I was writing unit test for a pretty complex piece of logic, I was asked, “Then what will be left for me to do?!”  Strange but true.&lt;/p&gt;
&lt;p&gt;But what if we started working as teams?  For example, what if I could get QA to help me develop my test plan?  What if developing software was a WE activity instead of several silo developers each doing their own thing?&lt;/p&gt;
&lt;h2 id=&#34;Batch-Programming&#34;&gt;&lt;a href=&#34;#Batch-Programming&#34; class=&#34;headerlink&#34; title=&#34;Batch Programming&#34;&gt;&lt;/a&gt;Batch Programming&lt;/h2&gt;&lt;p&gt;This is one I really don’t understand.  But I know programmers who will write code for hours prior to running it.  Even if you did remember everything you coded, how can you possibly know where a bug is located if you wait that long?  You should be running your code every time you have something different that can be run so that you know what change caused a problem.  And don’t tell me you test every possible condition.  I know you don’t.&lt;/p&gt;
&lt;p&gt;Programmers who program like this are “Debbie Done” programmers.&lt;/p&gt;
&lt;p&gt;Why “Debbie Done”? There is this story about a programmer who used to work at one of the companies I worked at in the past.  She considered code done if it compiled and linked.&lt;/p&gt;
&lt;p&gt;I’m not as good at testing as I would like (yet) and I’m always embarrassed when someone finds a problem with my code.  So, I was shocked one day when I found out that a project manager wanted to give me some work because my code “always works.”  I knew that wasn’t true.  But when I reflected on what he was saying I realized that the difference in how I code and the other programmers he was comparing me to is that I write for a few minutes and then make sure that works before I continue on.&lt;/p&gt;
&lt;h2 id=&#34;We-Don’t-Plan-to-Test&#34;&gt;&lt;a href=&#34;#We-Don’t-Plan-to-Test&#34; class=&#34;headerlink&#34; title=&#34;We Don’t Plan to Test&#34;&gt;&lt;/a&gt;We Don’t Plan to Test&lt;/h2&gt;&lt;p&gt;Ah.  And here we get a little closer to the truth.&lt;/p&gt;
&lt;p&gt;What do I mean by planning to test? For any spec you are working on, you should have, written out or coded, a repeatable set of steps that ensures that your code does what it should and doesn’t do what it shouldn’t.  This is what test driven development attempts to steer us toward.  I’m not going to go off on a rant about TDD again here.  But I will tell you that either having a written out test plan prior to coding enables me to ensure that my code does what the people who gave me the specification think it should.  It also forces me to think about ways I might break the code.  I know my code is delivered with less bugs because of this process.  Hopefully, I’ll get better at thinking of how to break my own code.&lt;/p&gt;
&lt;p&gt;Having a plan helps with the Debbie Done programmer as well as people who code more like me.&lt;/p&gt;
&lt;p&gt;Even though I code&amp;#x2F;test incrementally, I still only test the code right after I’ve written it.  Once I think it is working, I don’t go back, even though something else I’ve written may have changed how the code is working.  Having repeatable tests has save me several times.&lt;/p&gt;
&lt;h2 id=&#34;We-Don’t-Know-what-we-Don’t-Know&#34;&gt;&lt;a href=&#34;#We-Don’t-Know-what-we-Don’t-Know&#34; class=&#34;headerlink&#34; title=&#34;We Don’t Know what we Don’t Know&#34;&gt;&lt;/a&gt;We Don’t Know what we Don’t Know&lt;/h2&gt;&lt;p&gt;Even if we do everything right, we are still going to miss stuff.  One person can’t possibly figure out all that might go wrong.  It is how we deal with the problems once they are revealed that becomes the issue.  This is where we would, ideally, have the team come up with the test scenarios.&lt;/p&gt;
&lt;h2 id=&#34;Shame-Driven-Development&#34;&gt;&lt;a href=&#34;#Shame-Driven-Development&#34; class=&#34;headerlink&#34; title=&#34;Shame Driven Development&#34;&gt;&lt;/a&gt;Shame Driven Development&lt;/h2&gt;&lt;p&gt;I actually heard a project manager say, “Shame on the developer if QA finds bugs.” Really?!  What about “Shame on the BA for not including that item in the requirements.”?  What about “Shame on the product owner for not mentioning it.”? Or what about no shame at all? While shame is a powerful motivator in the short term, it is a sure way to make sure your developers leave.&lt;/p&gt;
&lt;p&gt;That you only retain highly dysfunctional programmers.  Or that you can only retain programmers who can’t really code.&lt;/p&gt;
&lt;p&gt;Shame based development can only lead to even more bugs.  Not fewer.&lt;/p&gt;
&lt;p&gt;At some point I should probably write about the dangers of a shame based culture.   If your organization is using shame to manage personnel.  Get out!&lt;/p&gt;
&lt;h2 id=&#34;Long-Hours&#34;&gt;&lt;a href=&#34;#Long-Hours&#34; class=&#34;headerlink&#34; title=&#34;Long Hours&#34;&gt;&lt;/a&gt;Long Hours&lt;/h2&gt;&lt;p&gt;Another way you can kill the overall effectiveness of your team is to make sure everyone works more than 45 hours a week for months or years at a time.  One of two things will happen, if not both.&lt;/p&gt;
&lt;p&gt;The code will suffer.  Want to introduce more bugs?  Keep everyone working overtime.  A week here or there is a different story.&lt;/p&gt;
&lt;p&gt;If the code doesn’t suffer, then you are likely to find a lot more socialization, social media activities, and just plain goofing off occurring.  People just can’t work that many hours.  Just because someone is at work for 10 hours doesn’t mean they are working 10 hours.  But hours are easy to measure, so this terrible practice continues.&lt;/p&gt;
&lt;h2 id=&#34;We-Can’t-Fix-Everything&#34;&gt;&lt;a href=&#34;#We-Can’t-Fix-Everything&#34; class=&#34;headerlink&#34; title=&#34;We Can’t Fix Everything&#34;&gt;&lt;/a&gt;We Can’t Fix Everything&lt;/h2&gt;&lt;p&gt;I’m in a unique position in that I’m currently functioning as a Scrum coach.  This allows me to influence all the areas I’ve discussed.  As programmers, you can only influence your own stuff.  So, my recommendation to you is to concentrate on what you have control over.  Create a test plan prior to writing code.  Once you’ve learned how to do that, work on learning how to code those test so you don’t have to run them manually over and over again.  Do this slowly.  Maybe start with just one test.  Squeeze it into the cracks of your regular work.  Learning to test and learning to code test takes time, but it will make you a better programmer and will ultimately make you a more reliable and faster programmer.  Someday you might just hear that they want to give you an important job because “Johnny’s code always works.”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/3-reasons-agile-will-not-succeed/</guid>
            <title>3 Reasons Agile Will Not Succeed</title>
            <link>http://davembush.github.com/3-reasons-agile-will-not-succeed/</link>
            <category>agile</category>
            <category>failure</category>
            <category>kanban</category>
            <category>scrum</category>
            <pubDate>Thu, 09 Jun 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve written about &lt;a href=&#34;/categories/Agile/&#34;&gt;Agile&lt;/a&gt; and &lt;a href=&#34;/tags/scrum/&#34;&gt;Scrum&lt;/a&gt; before and most of my regular readers know that I am a huge fan.  But recently I am starting to believe the Agile movement is doomed.  In fact, the most common response to my enthusiasm for Agile and Scrum is, “Yeah, we tried that once and it was a complete failure.”  Which seems odd to me because in every instance where I’ve been able to implement it, it has worked beautifully.  &lt;/p&gt;
&lt;p&gt;So why would I say Agile Will Not Succeed?&lt;/p&gt;
&lt;p&gt;The buzz around Agile has become so loud that Agile has moved from strictly a software development thing, to all corners of the business world.  And yet, as much as I believe Agile is the right way to develop software, as a movement, it is doomed for failure. &lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/06/image.png &#34;3 Reasons Agile Will Not Succeed&#34;)&lt;figcaption&gt;Photo credit: [Tim Evanson](//www.flickr.com/photos/timevanson/9325191852/) via [VisualHunt](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Reminder-Agile-Isn’t-a-Method&#34;&gt;&lt;a href=&#34;#Reminder-Agile-Isn’t-a-Method&#34; class=&#34;headerlink&#34; title=&#34;Reminder - Agile Isn’t a Method&#34;&gt;&lt;/a&gt;Reminder - Agile Isn’t a Method&lt;/h2&gt;&lt;p&gt;This is the surest sign that a movement is struggling.  It has become so popular that people are using it without knowing anything of what they are doing.  The surest sign you’ve walked into an organization where Agile is doomed is if they say something along the lines of “We do Agile.”&lt;/p&gt;
&lt;p&gt;Why is this a clear sign? &lt;/p&gt;
&lt;p&gt;Because you can’t DO Agile.  You can only BE Agile.  &lt;a href=&#34;//www.agilemanifesto.org/&#34;&gt;Read the Agile Manifesto&lt;/a&gt;.  There is nothing there about how to implement Agile.  It simply isn’t a methodology.  So, when an organization says to me they are “Doing Agile” it tells me right away that they have no idea what it means to be Agile.&lt;/p&gt;
&lt;h2 id=&#34;‘Doing-Agile’-for-the-Wrong-Reasons&#34;&gt;&lt;a href=&#34;#‘Doing-Agile’-for-the-Wrong-Reasons&#34; class=&#34;headerlink&#34; title=&#34;‘Doing Agile’ for the Wrong Reasons&#34;&gt;&lt;/a&gt;‘Doing Agile’ for the Wrong Reasons&lt;/h2&gt;&lt;p&gt;One of the outcomes of implementing an Agile process is that code tends to get developed faster.  Unfortunately, this has become the main selling point of moving toward Agile.  I get it, every shop I’ve worked in has been under some sort of development pressure to get stuff done.  So it is easy to look at faster delivery as the main reason why you would use an Agile method. &lt;/p&gt;
&lt;p&gt;But, speed is a side effect.  In fact, it is only a long term side effect.  Initially, as you move toward being Agile, you will probably end up being slower.  You might have to lay people off because they only know how to work on their own while true Agile requires teamwork.  The more mature your team, the harder it will be to switch.&lt;/p&gt;
&lt;p&gt;So, if you shouldn’t move toward Agile because of speed, why should you? Well, two of the main reasons for me are: visibility, flexibility, and predictability.&lt;/p&gt;
&lt;p&gt;I was once told the story of how plumbers plumb a new house.  The first day they come in and hang all the pipes in hangers.  By the time the owner comes by that evening, everything is hung and it looks like they are practically done.  They now have two weeks to get it all soldered together before the owner comes by again. This is why most Agile methods require short sprints.  The more you can show the customer the progress you are making, the less nervous they will get and the more likely you are to be left alone to do your job.  However, it will take time because the customer has been burned too often in the past, so it may be a while before they learn to wait for the sprint reviews.&lt;/p&gt;
&lt;p&gt;But there is an added advantage to being visible that is a huge win for everyone.  By letting the customer see the progress you are making, he is able to make tweaks along the way.  I’ve learned over the years that no one really knows what they want until they see it.  But letting them see it often and make tweaks along the way saves me from having to do a complete rewrite when I am “done.” And agile adds predictability that isn’t available using older methods.  It doesn’t let you say up front how long a project will take.  Estimates are still rather futile.  You’ll never know less about a project than the first day you try to provide an estimate.  But, as you progress, you will know roughly how much effort the remaining project will take and how much time that much effort will take on average.  The project becomes predictable using statistics generated by the project.&lt;/p&gt;
&lt;h2 id=&#34;You-Aren’t-Fully-Committed&#34;&gt;&lt;a href=&#34;#You-Aren’t-Fully-Committed&#34; class=&#34;headerlink&#34; title=&#34;You Aren’t Fully Committed&#34;&gt;&lt;/a&gt;You Aren’t Fully Committed&lt;/h2&gt;&lt;p&gt;In my last interview, I was asked if I had any experience with “Agile.”  I really need to learn to qualify that question.  I answered, “&lt;a href=&#34;//www.scrumalliance.org/community/profile/dbush2&#34;&gt;I have my Scrum Master certification&lt;/a&gt;, but I’ve yet to work in a truly Agile environment.”  And yet, I have worked in environments that call themselves “Agile”  But these are all environments that Carl and Richard over at &lt;a href=&#34;//dotnetrocks.com/&#34;&gt;DotNetRocks&lt;/a&gt; call “Scrum But…”.  “Agile But…”?  And at another place, we called it “Scrummerfall”.  The idea is the same, rather than doing either Scrum or Kanban, they take the parts they’ve heard about that they like and merge them into what they are currently doing.&lt;/p&gt;
&lt;p&gt;Of course, they weren’t fully committed to the process they were using either, so it shouldn’t work any worse.  But it often does.&lt;/p&gt;
&lt;p&gt;One of the most obvious points of failure is with project management.  I’ve seen it all.  Scrum masters who are still trying to function as project managers and organizations that have skipped the scrum master role and left the project managers.  Stand ups that last an hour.&lt;/p&gt;
&lt;p&gt;Or how about this one.  Teams trying to estimate stories instead of task.&lt;/p&gt;
&lt;p&gt;I went on one interview that had the following bullets in the job request I was sent:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Must be able to work in an Agile environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;followed three points later by&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Must be able to work under tight deadlines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Talk about an oxymoron! When I asked what “Agile” meant to him (the owner of the company) he said, “Oh, that just means we do iterative development.” Here’s the deal.  If you are going to say you are going to implement Agile, at least learn enough about it to know what the word means!  You might decide it isn’t for you.  That’s fine.  Doing something simply because it is the “In” thing to do is never a good reason to do something.&lt;/p&gt;
&lt;h2 id=&#34;Management-Has-No-Clue&#34;&gt;&lt;a href=&#34;#Management-Has-No-Clue&#34; class=&#34;headerlink&#34; title=&#34;Management Has No Clue&#34;&gt;&lt;/a&gt;Management Has No Clue&lt;/h2&gt;&lt;p&gt;In my current job, I was told that some boss several levels up who I’ve still not met has declared our project to be a “Waterfall project” because “we already know what this is supposed to do.” As soon as I heard that, I said, “Someone doesn’t know what Agile is.” Here is why this sounds right.  The project I am working on is a rewrite from a very old platform to a web application.  In principle, from that definition, it sounds like a known entity.  However, simply because the GUI has changed there are things that were done on the old platform that make no sense on the new platform.&lt;/p&gt;
&lt;p&gt;But it gets worse.  The application is being expanded to include other business units with additional requirements.  So, we only partially know all this is supposed to do.&lt;/p&gt;
&lt;p&gt;If we were using true Waterfall, we would have to design the whole thing up front.  This project is due in a little less than a year.  Tell me what on the web doesn’t change in a year?&lt;/p&gt;
&lt;h2 id=&#34;Agile-Will-Not-Succeed&#34;&gt;&lt;a href=&#34;#Agile-Will-Not-Succeed&#34; class=&#34;headerlink&#34; title=&#34;Agile Will Not Succeed&#34;&gt;&lt;/a&gt;Agile Will Not Succeed&lt;/h2&gt;&lt;p&gt;So, what’s the point?  People love their perceptions.  Not reality.  What Agile set out to do was nobel, and for the most part, right.  But people are lazy.  They get a snippet of the truth here, a snippet of the truth there, ignore a snippet, paste in a snippet (here a snippet, there a snippet, everywhere a snip of snippet).  And that becomes their truth, while not being THE truth.  We do it with everything we believe.  Agile has reached that point of group think that it can now be classified as “religion.”  It now has so much group think weight that I’m not sure even those who started the movement can clearly articulate what it IS anymore.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/how-to-be-personally-agile/</guid>
            <title>How to be (Personally) Agile</title>
            <link>http://davembush.github.com/how-to-be-personally-agile/</link>
            <category>agile</category>
            <category>productivity</category>
            <pubDate>Thu, 19 Nov 2015 08:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;When I first wrote down the idea for this post, I was originally thinking about how we might use agile development practices in a work place that practices Water Fall or worse.  But since then, I’ve expanded my thinking to include the concept of using agile everywhere, including where it “isn’t allowed.” Here’s what I’m talking about.  What does your work environment look like?  Many of the places I end up working either are using no formal process at all, or weakly attempt some form of Scrum or Water Fall.  In fact, my current major gig has a “project manager” (I use the term loosely) that manages our project with MS Project.  There is not even a formal issue tracking system.  And this is at a very LARGE organization that SHOULD know better.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/11/image1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Agile-in-an-Anti-Agile-Environment&#34;&gt;&lt;a href=&#34;#Agile-in-an-Anti-Agile-Environment&#34; class=&#34;headerlink&#34; title=&#34;Agile in an Anti-Agile Environment&#34;&gt;&lt;/a&gt;Agile in an Anti-Agile Environment&lt;/h2&gt;&lt;h3 id=&#34;Kanban-Board&#34;&gt;&lt;a href=&#34;#Kanban-Board&#34; class=&#34;headerlink&#34; title=&#34;Kanban Board&#34;&gt;&lt;/a&gt;Kanban Board&lt;/h3&gt;&lt;p&gt;Now, I’m not saying I’m the most organized guy on the planet.  In fact, in an environment like this, it would be easy to just go with the flow.  But I know me well enough to know that if I don’t have a place to keep track of the task I need to accomplish, something will fall through the cracks.  So, I got permission to use &lt;a href=&#34;/trello&#34;&gt;Trello&lt;/a&gt; along with the &lt;a href=&#34;/plusForTrello&#34;&gt;Plus for Trello&lt;/a&gt; plugin on Chrome so that I can at least track the task that have been assigned to me.&lt;/p&gt;
&lt;p&gt;Trello, for those who don’t know, allows you to setup a basic Kanban board and configure it any way you would like.  From the basic, “To do”, “In Progress”, “Done” format to something more in line with your actual work flow.  For this project, I have “Back Log”, “On Hold”, “Up Next”, “In Progress”, “Done This Week” and “Done”.  Yeah, that’s a lot of columns.  But I want to be able to keep track of where my task are at that level.  The beauty of Trello is that you can configure it however you want.&lt;/p&gt;
&lt;p&gt;Plus For Trello builds on that and allows you to add estimates to each of your Trello Cards.  While they refer to the estimate as “hours” I just translate that to “Effort Points” and track how much effort I think I’ve completed rather than how many hours I’ve actually worked.&lt;/p&gt;
&lt;p&gt;Between the two, I can track how far along in the project I am, how many effort points I tend to complete each week, and I’m the only one on the team who can give a reasonable guess as to when I will be done with this project I am working on.  And when I need to change the estimates, I can show when they changed and why.&lt;/p&gt;
&lt;h3 id=&#34;Productivity-Hacks&#34;&gt;&lt;a href=&#34;#Productivity-Hacks&#34; class=&#34;headerlink&#34; title=&#34;Productivity Hacks&#34;&gt;&lt;/a&gt;Productivity Hacks&lt;/h3&gt;&lt;p&gt;But agile isn’t just about Kanban boards and accurate estimates.  Agile is about becoming better.  So, what are some ways you can become better at work without being any more disruptive than you have to be?  Here are some ways that have been effective for me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use the Pomodoro technique&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;/pomodoro&#34;&gt;Pomodoro&lt;/a&gt; technique is a technique that has you highly focused on the task at hand for 25 minutes at a time.  No interruptions for email, social media, coffee.  That’s for the breaks or their own Pomodoro.  After 25 minutes of work, you get a 5 minute break.  Sometimes I just sit in my chair and close my eyes.  Kind of a mini nap.  The routine has you do 4 Pomodoros and then rest for 15 minutes instead of 5.  If you take a lunch, you should take your lunch break during one of the longer Pomodoros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Avoid Distractions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don’t know about you, but the last time I had the luxury of an office was 2.5 years ago when I was working from home.  I miss those days.  But now I close my virtual door by putting on headphones and listening to &lt;a href=&#34;//t.co/EgPhHCQqLE&#34;&gt;this Pandora station that I created&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Batch E-mail&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As I said before, don’t check email while you are working.  I check mine during the Pomodoro breaks.  If you get more than what you can handle during the breaks you should create a Pomodoro for them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Schedule Your Day!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OK, this may or may not work for you depending on your environment.  But, it is worth a try.  Personally, I know that my best hours are in the morning and that I start losing my concentration around 1:30.  I start my day at around 7am.  Ideally, if you want me to be productive, you won’t schedule meetings prior to 1:30.  So, I went into outlook and scheduled myself as “Busy” from 7am to 1:30pm.  Now when someone looks to see when I am available, they will see that I am available from 1:30 to 3:30.&lt;/p&gt;
&lt;p&gt;You might object that this is not being honest.  But I would argue that it is if you honestly believe that keeping appointments with yourself is as important as keeping appointments with other people.  It is just a matter of perspective.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Turn Off Your Phone&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;OK, I’m assuming you are all programmers and not sales people.  But, I would go so far as to say that the only time you should answer your phone is when you have an appointment.  I stopped answering my phone YEARS ago.  Most of the calls that I got were either sales calls or recruiters.  Then I finally got smart and created a silent ring tone for my phone.  That is my default ring tone.  And my default vibrate pattern is no vibration at all.  I don’t even know that my phone rang until I look at my phone and it says I have a missed call.&lt;/p&gt;
&lt;p&gt;But, I can hear you say, I might miss something important.  Well, yes, there are calls that I don’t want to miss.  For those, I assign real ring tones.  Everyone in my family and some VERY close friends, all get a real ring tone that makes a sound.&lt;/p&gt;
&lt;p&gt;What about potential clients?  Well, first I schedule the call via email, if I even determine it is necessary, and second I ask for the number they will be calling from so that I can assign a ring tone to that number.&lt;/p&gt;
&lt;p&gt;I wish I could do something similar with my desk phone at work.  I answered it yesterday only to have it be a sales call.  I should have known better!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;Agile-Home&#34;&gt;&lt;a href=&#34;#Agile-Home&#34; class=&#34;headerlink&#34; title=&#34;Agile Home&#34;&gt;&lt;/a&gt;Agile Home&lt;/h2&gt;&lt;p&gt;There is a whole course on PluralSight about being an Agile Family.  I’m not talking about that.  I’m talking about being personally Agile at home just like I am suggesting that you can be personally Agile at work, regardless of the environment.&lt;/p&gt;
&lt;h3 id=&#34;Kanban-Again&#34;&gt;&lt;a href=&#34;#Kanban-Again&#34; class=&#34;headerlink&#34; title=&#34;Kanban Again&#34;&gt;&lt;/a&gt;Kanban Again&lt;/h3&gt;&lt;p&gt;Yep, I use Trello at home too.  But not the Plus for Trello plugin.  At least not yet.  I have a list that keeps track of my exercise rotation.  I have a list for Saturday.  I have a list of chores I need to do.  I have others, but those are the ones that I use regularly.&lt;/p&gt;
&lt;h3 id=&#34;Schedules&#34;&gt;&lt;a href=&#34;#Schedules&#34; class=&#34;headerlink&#34; title=&#34;Schedules&#34;&gt;&lt;/a&gt;Schedules&lt;/h3&gt;&lt;p&gt;I schedule my whole day.  This probably sounds more extreme than it is.  I was finding that not having a schedule, especially after work, was actually preventing me from getting stuff done that I really wanted to get done.&lt;/p&gt;
&lt;p&gt;Here are tips for scheduling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If you really want something to get done, schedule it.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t schedule every last minute&lt;/strong&gt;. For example, I know it generally takes me 45 minutes to get home.  But I also know bad traffic could make that longer.  So I don’t plan the next activity after work until 4:45.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Schedule your Kanban list&lt;/strong&gt;. I’m assuming your Kanban list are projects that you want to get done.  Well, if you really want them to get done, when are you going to work on them?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t try to do too much&lt;/strong&gt;. Once I started scheduling, I realized I was trying to accomplish way more than was physically possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Schedules are a great way for you to determine, ahead of time, what is most important to you.  Once that decision has been made, it is just a matter of execution.  If there are other things you’d like to be able to do, put them on the back log.&lt;/p&gt;
&lt;h2 id=&#34;The-Point&#34;&gt;&lt;a href=&#34;#The-Point&#34; class=&#34;headerlink&#34; title=&#34;The Point&#34;&gt;&lt;/a&gt;The Point&lt;/h2&gt;&lt;p&gt;So what’s the point of all of this?  Don’t wait on someone else.  You can be agile even if&amp;#x2F;when others aren’t.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/tdd-gamification-turning-test-driven-development-into-a-game/</guid>
            <title>TDD Gamification - Turning Test Driven Development into a Game</title>
            <link>http://davembush.github.com/tdd-gamification-turning-test-driven-development-into-a-game/</link>
            <category>tdd</category>
            <category>agile</category>
            <category>extreme programming</category>
            <category>gamification</category>
            <category>paired programming</category>
            <pubDate>Thu, 23 Apr 2015 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/04/ge-gam-018.jpg&#34; alt=&#34;ge-gam-018&#34; title=&#34;Test Driven Development Gamification&#34;&gt;&lt;/p&gt;
&lt;p&gt;When I was in college, there were some guys I hung out with who played this game called “Questions” which they got from some book.  &lt;a href=&#34;//en.wikipedia.org/wiki/Questions_(game)&#34;&gt;Actually, it was a play&lt;/a&gt;. Anyhow, the basic rules are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can’t answer a question with a statement&lt;/li&gt;
&lt;li&gt;You can’t hesitate or make a false start&lt;/li&gt;
&lt;li&gt;You can’t repeat a question that has already been used&lt;/li&gt;
&lt;li&gt;You can’t ask a rhetorical question&lt;/li&gt;
&lt;li&gt;You can’t ask an unrelated question.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There was also &lt;a href=&#34;//dotnetrocks.com/default.aspx?showNum=1111&#34;&gt;this podcast at DotNetRocks&lt;/a&gt; where they were talking about a beer app and how they had added game elements to the app by adding badges for various types of beer to get you out of your comfort zone.  Maybe there is one for “My first beer that I liked” because I’ve yet to find something I like.  But give me a good Merlot! All of this got me to thinking about how we might turn Test Driven Development into something of a game. There are several people who have already addressed the Gamification of TDD&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;TDD-and-the-Gamification-of-Testing&#34;&gt;&lt;a href=&#34;#TDD-and-the-Gamification-of-Testing&#34; class=&#34;headerlink&#34; title=&#34;TDD and the Gamification of Testing&#34;&gt;&lt;/a&gt;&lt;a href=&#34;//effectivesoftwaredesign.com/2011/11/21/tdd-and-the-gamification-of-testing/&#34;&gt;TDD and the Gamification of Testing&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This article talks mostly about how TDD has many elements of good gaming inherent in it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Because it makes testing more like programming.  Well, what he actually says is that it raises testing to the level of complexity the programmer is familiar with.  But in reality, I think this is because it makes testing something that can be coded.&lt;/li&gt;
&lt;li&gt;Because TDD is measurable.  The test either succeeds or fails.&lt;/li&gt;
&lt;li&gt;Because TDD gives you immediate feedback.  Or at least a well written test gives you immediate feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;TDD-The-Gamification-of-Programming&#34;&gt;&lt;a href=&#34;#TDD-The-Gamification-of-Programming&#34; class=&#34;headerlink&#34; title=&#34;TDD: The Gamification of Programming&#34;&gt;&lt;/a&gt;&lt;a href=&#34;//benvanik.tumblr.com/post/20702406947/tdd-the-gamification-of-programming&#34;&gt;TDD: The Gamification of Programming&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This article provides an interesting perspective of someone trying to program using TDD for the first time.  You get the normal complaints, like “this takes too long” along with acknowledgement of some of the benefits.  But what he realizes is that the process has made programming more like a game than about the creative problem solving most of us got in to programming for in the first place.&lt;/p&gt;
&lt;h2 id=&#34;Gamify-TDD&#34;&gt;&lt;a href=&#34;#Gamify-TDD&#34; class=&#34;headerlink&#34; title=&#34;Gamify TDD&#34;&gt;&lt;/a&gt;&lt;a href=&#34;//www.tdddev.com/2014/09/gamify-tdd.html&#34;&gt;Gamify TDD&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is the first article I found that, instead of saying that TDD is already a game, like the two above, actually ask how we might formally turn TDD into a game because it already has many elements of a game.  But he never actually says HOW he would do that.&lt;/p&gt;
&lt;h2 id=&#34;TDD-Gamification&#34;&gt;&lt;a href=&#34;#TDD-Gamification&#34; class=&#34;headerlink&#34; title=&#34;TDD Gamification&#34;&gt;&lt;/a&gt;TDD Gamification&lt;/h2&gt;&lt;p&gt;Putting this all together.  Here is how I would actually make TDD into a game.&lt;/p&gt;
&lt;h4 id=&#34;The-rules&#34;&gt;&lt;a href=&#34;#The-rules&#34; class=&#34;headerlink&#34; title=&#34;The rules:&#34;&gt;&lt;/a&gt;The rules:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;The game is played in pairs.  (Paired programming)&lt;/li&gt;
&lt;li&gt;Game starts when programmer 1 writes the first test.&lt;/li&gt;
&lt;li&gt;Once a failing test is written, programmer 2 writes JUST ENOUGH to make the test succeed.&lt;/li&gt;
&lt;li&gt;Once a test succeeds, programmer 2 writes another test, and programmer 1 writes just enough to make it succeed.&lt;/li&gt;
&lt;li&gt;Play alternates until no one can think of another test that will force more code to be written.&lt;/li&gt;
&lt;li&gt;Programmer loses points if he is caught writing more code than is necessary to pass the test.&lt;/li&gt;
&lt;li&gt;Programmer loses points if he is caught writing code that has dependencies embedded in it.&lt;/li&gt;
&lt;li&gt;If a dependency is required, the test writer and the code implementer will collaborate in the method of dependency injection to be used.&lt;/li&gt;
&lt;li&gt;All points lost by one programmer go to the programmer who caught the mistake.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Embellishment&#34;&gt;&lt;a href=&#34;#Embellishment&#34; class=&#34;headerlink&#34; title=&#34;Embellishment:&#34;&gt;&lt;/a&gt;Embellishment:&lt;/h4&gt;&lt;p&gt;If code is found to have a bug in production, both programmers responsible for the code loose a point, regardless of how many lines of code are impacted.  One point per recorded bug.&lt;/p&gt;
&lt;p&gt;I’m assuming that most shops have more than 2 programmers.  On any given day, programmers would be paired up for the day of programming.  They are responsible for turning out bug free code.  Because we are tracking the code over the long term, we will be able to see just how effective each programmer is at eliminating bugs.&lt;/p&gt;
&lt;p&gt;In fact, if you are in an environment that can’t quite stomach having your programmers paired up, I would suggest keeping track of the code that wasn’t done under the game.  This would be the “house score” compared to an individual programmer’s score.&lt;/p&gt;
&lt;p&gt;The only thing we have left is some way of being able to account for productivity.  I mean, if I write no code, I’ll have no bugs, right?  And all things being equal, the more productive I am, the more bugs I’ll have.  So how do we measure this? Here is what we can’t do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lines of code – you can’t measure based on lines of code because that has been shown to be an inaccurate measure of productivity.  More lines may just mean you are not very efficient.&lt;/li&gt;
&lt;li&gt;Hours worked – &lt;a href=&#34;/rapidDevelopment&#34;&gt;Rapid Development&lt;/a&gt; has statistics in it that show there is a factor of 10 difference between good programmers and bad programmers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Just-a-suggestion&#34;&gt;&lt;a href=&#34;#Just-a-suggestion&#34; class=&#34;headerlink&#34; title=&#34;Just a suggestion:&#34;&gt;&lt;/a&gt;Just a suggestion:&lt;/h4&gt;&lt;p&gt;Since short methods are desirable, what if we measure number of test relative to number of methods relative to number of classes.  This would enforce the single responsibility principle.&lt;/p&gt;
&lt;p&gt;T &amp;#x3D; Tests M &amp;#x3D; Methods C &amp;#x3D; Classes 1&amp;#x2F;((T&amp;#x2F;M)&amp;#x2F;C) &amp;#x3D; Productivity Score Therefore,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If I worked on 3 classes each with 6 methods and each method has 2 tests, I end up with a productivity score of 1.5&lt;/li&gt;
&lt;li&gt;If I had one class with 18 methods each with 2 tests, I end up with a productivity score of .5&lt;/li&gt;
&lt;li&gt;If, on the other hand, I put everything in one method, and one class and had the same 36 tests, my productivity score would be .02&lt;/li&gt;
&lt;li&gt;If you write no code, your productivity score is 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s just a simple way to calculate.  You may choose to use cyclomatic complexity in some way if you have that number easily available to you.&lt;/p&gt;
&lt;p&gt;Well, that’s my rough sketch of how we might be able to turn TDD into something of a game along with being able to prove to ourselves and management that it really does produce better code. How else might you embellish this or change it so it works better?  Let me know in the comments below.&lt;/p&gt;
&lt;h4 id=&#34;Other-Test-Driven-Development-Resources&#34;&gt;&lt;a href=&#34;#Other-Test-Driven-Development-Resources&#34; class=&#34;headerlink&#34; title=&#34;Other Test Driven Development Resources&#34;&gt;&lt;/a&gt;Other Test Driven Development Resources&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/testDrivenDevelopmentByExample&#34;&gt;Test Driven Development: by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/professionalTestDrivenDevelopmentWithCSharp&#34;&gt;Professional Test Driven Development w&amp;#x2F; C#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/limiting-beliefs-of-programmers/</guid>
            <title>Limiting Beliefs of Programmers</title>
            <link>http://davembush.github.com/limiting-beliefs-of-programmers/</link>
            <category>tdd</category>
            <category>programming</category>
            <category>agile</category>
            <category>scrum</category>
            <category>limiting beliefs</category>
            <pubDate>Thu, 09 Apr 2015 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/03/ppl-men-026.jpg&#34; alt=&#34;scream&#34; title=&#34;scream&#34;&gt;&lt;/p&gt;
&lt;p&gt;At the risk of making half of my audience think I’ve gone off the deep end, I’m going to address a topic that I’ve only recently REALLY begun to understand, in part thanks to &lt;a href=&#34;/softSkills&#34;&gt;Soft Skills&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I’ve heard the topic of “Limiting Beliefs” come up, it has almost always been in the context of something along the lines of “What the mind can conceive and believe, it can achieve.”  Which is easy to disprove.  At least it is out of context!  I mean really, if I can conceive and believe myself to be a butterfly, it just isn’t going to happen! However, the opposite is pretty easy to both accept and believe.  And that’s what I want to talk about today.  But even then, it probably isn’t what you are expecting.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Typically, when people talk about “Limiting Beliefs”, they are talking about patterns and practices you picked up as a kid that are holding you back now.  And while those may be areas that you need to work on, what I want to talk about today is more micro than that, although they may have roots in our past for various reasons, the Limiting Beliefs I want to talk about today are common across nearly every programmer I talk to.  If you think “Limiting Beliefs” mean something along the lines of, “you are limited because you don’t believe enough,” that is NOT what I have in mind here at all.  In fact, “Limiting Beliefs” are beliefs that we believe TOO strongly and because we hold them too strongly, they limit us.  This is what I mean when I talk about “Limiting Beliefs” even if it is used in another way by someone else.&lt;/p&gt;
&lt;p&gt;Here are some examples specifically related to the craft of programming.&lt;/p&gt;
&lt;h2 id=&#34;You-Can’t-Practice-TDD&#34;&gt;&lt;a href=&#34;#You-Can’t-Practice-TDD&#34; class=&#34;headerlink&#34; title=&#34;You Can’t Practice TDD&#34;&gt;&lt;/a&gt;You Can’t Practice TDD&lt;/h2&gt;&lt;p&gt;As I’ve mentioned in other articles, most programmers I know don’t practice Test Driven Development because they believe they don’t have permission.  And when they ask, they don’t get permission because you’ve transferred the belief that you don’t think it is important.&lt;/p&gt;
&lt;p&gt;If instead, you believed you had permission to do whatever it took to legitimately do your job well, you would learn how to do everything it took to practice TDD well.&lt;/p&gt;
&lt;h2 id=&#34;Can’t-Create-Branches-in-Version-Control&#34;&gt;&lt;a href=&#34;#Can’t-Create-Branches-in-Version-Control&#34; class=&#34;headerlink&#34; title=&#34;Can’t Create Branches in Version Control&#34;&gt;&lt;/a&gt;Can’t Create Branches in Version Control&lt;/h2&gt;&lt;p&gt;I recently ran into a comment on a blog that mention this.  In fact I’ve run into this very issue where I am currently working.  But instead of thinking about what I can’t do, or when I am frustrated by what I can’t do, I first think 1) is this important enough to find a way around? And 2) what CAN I do? In this case, I found it critically important.  My productivity was being hampered because I am adding new features to existing code and, while that code is being tested, I’m converting the code to the last version of the library that we use.  Branching allows me to switch between the two projects easily and it allows me to migrate the current code into the upgrade code so that when the conversion is done, I can merge it down into the main branch and keep going.&lt;/p&gt;
&lt;p&gt;How did I do this?  We use TFS with the old TFVS version control system instead of the Git repository.  But there are at least two projects that exist that allow you to create a bridge between your local code that uses a local GIT repository and the remote TFS repository.  There is at least one project available for subversion that allows you to do the same sort of thing.&lt;/p&gt;
&lt;p&gt;I get my branches and yet I have not caused any disruption to the rest of my team.&lt;/p&gt;
&lt;h2 id=&#34;Can’t-Use-X-Technology&#34;&gt;&lt;a href=&#34;#Can’t-Use-X-Technology&#34; class=&#34;headerlink&#34; title=&#34;Can’t Use X Technology&#34;&gt;&lt;/a&gt;Can’t Use X Technology&lt;/h2&gt;&lt;p&gt;OK.  So, again, ask yourself the same questions.  Is this hampering your productivity?  What CAN you do?&lt;/p&gt;
&lt;h2 id=&#34;You-Have-to-be-Perfect&#34;&gt;&lt;a href=&#34;#You-Have-to-be-Perfect&#34; class=&#34;headerlink&#34; title=&#34;You Have to be Perfect&#34;&gt;&lt;/a&gt;You Have to be Perfect&lt;/h2&gt;&lt;p&gt;I think many of us realize that we can’t be perfect and yet, how do you react when someone finds a bug in your code? I saw a tweet last week that captures the essence of the bug fixing process.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;That can’t happen&lt;/li&gt;
&lt;li&gt;That doesn’t happen on my machine.&lt;/li&gt;
&lt;li&gt;That shouldn’t happen.&lt;/li&gt;
&lt;li&gt;Why does that happen?&lt;/li&gt;
&lt;li&gt;Oh, I see.&lt;/li&gt;
&lt;li&gt;How did that ever work?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The question I need to ask is, why do we start with “That can’t happen” unless we feel that we need to be perfect.&lt;/p&gt;
&lt;p&gt;In the last year, I’ve finally gotten to the point where my first reaction is, “OK, well, put it in the issue tracker.” (Or if you are doing Agile, “put it in the backlog”).&lt;/p&gt;
&lt;h2 id=&#34;Can’t-Practice-Agile-x2F-Scrum&#34;&gt;&lt;a href=&#34;#Can’t-Practice-Agile-x2F-Scrum&#34; class=&#34;headerlink&#34; title=&#34;Can’t Practice Agile&amp;#x2F;Scrum&#34;&gt;&lt;/a&gt;Can’t Practice Agile&amp;#x2F;Scrum&lt;/h2&gt;&lt;p&gt;Speaking of Agile&amp;#x2F;Scrum.  Are you working at a place that doesn’t practice Agile or Scrum, but you think they should?  What parts of Agile&amp;#x2F;Scrum can you implement in the sphere of influence you have?  So, you can’t form a Scrum team.  But, do you personally put people over processes?  Do you put people first at all?  Most of the &lt;a href=&#34;//agilemanifesto.org/&#34;&gt;Agile Manifesto&lt;/a&gt; can be implemented at a personal level once you understand what it is really about.  Don’t expect anyone to adopt agile in your organization if they don’t see it in you first.&lt;/p&gt;
&lt;h2 id=&#34;You-Are-an-Introvert&#34;&gt;&lt;a href=&#34;#You-Are-an-Introvert&#34; class=&#34;headerlink&#34; title=&#34;You Are an Introvert&#34;&gt;&lt;/a&gt;You Are an Introvert&lt;/h2&gt;&lt;p&gt;How many of us hide behind this one?  We don’t want to deal with people.  We really don’t value people over much of anything.  In fact, we think, “programming would be a great job if it weren’t for the clients.”  I’m reading some books that talk about the impact of confusing behavior with who we are.  OK, so sure, your behavior is that you prefer to avoid loud noises.  You’d rather talk to one or two people at a time.  You process stuff in your head instead of with your mouth.  That’s behavior.  To say, “I am an Introvert” can have the effect of saying, “I hate people” and can become a limiting belief because it will isolate you from the very people you should be helping.  Sorry, you can’t get far as a programmer if you avoid the people part of it.&lt;/p&gt;
&lt;h2 id=&#34;Restrictions&#34;&gt;&lt;a href=&#34;#Restrictions&#34; class=&#34;headerlink&#34; title=&#34;Restrictions&#34;&gt;&lt;/a&gt;Restrictions&lt;/h2&gt;&lt;p&gt;And then there is the general set of restrictions that come with being part of any organization.  We have a few where I work that, on the face of it, seem ridiculous.  I HAVE to take a lunch break even though my lunch consist of 5 sausage links that can be consumed in about 5 minutes.  I can’t start before 7am.  I can’t leave until 3:30.&lt;/p&gt;
&lt;p&gt;But what can I do?  Well, no one said WHEN I had to take the lunch break, so I come in and watch a half hour of &lt;a href=&#34;/pluralSight&#34;&gt;PluralSight&lt;/a&gt; courses every morning.&lt;/p&gt;
&lt;p&gt;I can’t start before 7am.  But I CAN enter the office before then.  I prefer to come earlier because the traffic is lighter if I come in at 6:45.  So, I come in and don’t start working until seven.&lt;/p&gt;
&lt;p&gt;To get my eight hours in, I can’t leave until 3:30 anyhow.  So that is not an issue.  And if I need to leave early occasionally, no one said I couldn’t do that.&lt;/p&gt;
&lt;h2 id=&#34;The-Key-To-Eliminating-Limiting-Beliefs&#34;&gt;&lt;a href=&#34;#The-Key-To-Eliminating-Limiting-Beliefs&#34; class=&#34;headerlink&#34; title=&#34;The Key To Eliminating Limiting Beliefs&#34;&gt;&lt;/a&gt;The Key To Eliminating Limiting Beliefs&lt;/h2&gt;&lt;p&gt;Do you see what I’ve done here?  At every point where I’ve been told or believed I could not do something, I’ve change the question from “What can’t I do?” to “What can I do?”  Can’t locks you down.  It locks you out.  Can frees you. So, what limiting beliefs do you have and how can you overcome them?&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/being-agile-is-about-the-journey%E2%80%A6/</guid>
            <title>Being Agile Is About The Journey…</title>
            <link>http://davembush.github.com/being-agile-is-about-the-journey%E2%80%A6/</link>
            <category>agile</category>
            <category>scrum</category>
            <pubDate>Thu, 12 Feb 2015 07:00:00 -0500</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;…-Not-The-Destination&#34;&gt;&lt;a href=&#34;#…-Not-The-Destination&#34; class=&#34;headerlink&#34; title=&#34;… Not The Destination&#34;&gt;&lt;/a&gt;… Not The Destination&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/uploads/2015/02/BeingAgile.png&#34; alt=&#34;BeingAgile&#34; title=&#34;BeingAgile&#34;&gt;&lt;/p&gt;
&lt;p&gt;This post first started as I was discussing my post “&lt;a href=&#34;/you-arent-doing-scrum-if/&#34;&gt;You Aren’t Doing Scrum If …&lt;/a&gt;” with a friend who had read the post and was worried that I might not fit in an organization that wasn’t doing all of Scrum.  I’ve since had other conversations and as I’ve reflected on the topic, I still stand by my original post, because there are some fundamental properties of Scrum that you have to implement in order to follow that methodology.  This is why I called the post “You Aren’t Doing &lt;strong&gt;Scrum&lt;/strong&gt; If …” and not “You Aren’t Doing Agile If …”&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Agile-isn’t-Scrum&#34;&gt;&lt;a href=&#34;#Agile-isn’t-Scrum&#34; class=&#34;headerlink&#34; title=&#34;Agile isn’t Scrum&#34;&gt;&lt;/a&gt;Agile isn’t Scrum&lt;/h2&gt;&lt;p&gt;But Agile is different.  Agile isn’t a process. Agile is a mindset. So you can call yourself “Agile” without necessarily implementing any particular methodology because “Agile” isn’t about process.  Agile is about the collective state of mind of the team.  The organization as a whole.  Being Agile means that you are open to change.  That you embrace change.  Agile is about being flexible.  About knowing that you don’t know and that you don’t know what you don’t know.  Agile is about adapting.  Ultimately, it is about finding ways of being more productive. In fact, you could implement scrum precisely, which I doubt anyone really does, and not be Agile.&lt;/p&gt;
&lt;h2 id=&#34;Sacred-Cows&#34;&gt;&lt;a href=&#34;#Sacred-Cows&#34; class=&#34;headerlink&#34; title=&#34;Sacred Cows&#34;&gt;&lt;/a&gt;Sacred Cows&lt;/h2&gt;&lt;p&gt;In fact, my experience has been that as I try to move an organization along the sliding scale of being more productive, I will, eventually, find a point of resistance.  The sacred cow of their process.  You can change whatever else you want, and yes, everything else you’ve suggested that we change has proven itself to be a better, more productive, less error prone way of doing what we do.  But, you can’t change our sacred cow. And so far every organization I’ve been in has some sacred cow that we either have to kill or we don’t progress further into being agile. And so we end up hearing comments from people in the industry like, “I don’t think I’ve been in any organization that has been TOTALLY ‘Agile.’” because every organization eventually runs up against some sacred cow on their road toward being agile.&lt;/p&gt;
&lt;h2 id=&#34;Leadership-Needs-To-Be-Agile&#34;&gt;&lt;a href=&#34;#Leadership-Needs-To-Be-Agile&#34; class=&#34;headerlink&#34; title=&#34;Leadership Needs To Be Agile&#34;&gt;&lt;/a&gt;Leadership Needs To Be Agile&lt;/h2&gt;&lt;p&gt;I know of another guy in the industry that postulates that the reason organizations fail as they try to implement agile is because agile is being forced on the organization.  That we need to create an environment where people have opted in to agile.  And to a certain extent, I think he’s right.  But, and I think this is a HUGE but, I think the larger problem is that the leadership has not embraced being agile and so you end up with developers trying to BE agile while the leadership is trying to be predictive.  Funny thing I’ve noticed about most employees, they’ll pretty much do whatever they think will keep the paychecks flowing.  So I don’t think we need opt-in at the worker bee level so much as we need opt-in at the leadership level.  Although I have seen resistance at both levels.&lt;/p&gt;
&lt;h2 id=&#34;Individuals-Need-To-Be-Agile&#34;&gt;&lt;a href=&#34;#Individuals-Need-To-Be-Agile&#34; class=&#34;headerlink&#34; title=&#34;Individuals Need To Be Agile&#34;&gt;&lt;/a&gt;Individuals Need To Be Agile&lt;/h2&gt;&lt;p&gt;Finally, while your organization may not be agile at all. It may not do Scrum, or Kanban.  It may resist all attempts to move in that direction.  This is not excuse for you to not be agile. You should ask yourself periodically, “What can I do that might be more productive than what I am currently doing?”  Because an organization can only be as agile as the people working in that organization and sometimes, all it really takes to move an organization closer to being agile is one individual who is willing to do what he or she does just a little more toward agile than they currently are. What sacred cows have you run into?  What are you doing to be more agile as an individual?  Leave a comment below.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/technical-debt-is-inevitable/</guid>
            <title>Technical Debt Is Inevitable</title>
            <link>http://davembush.github.com/technical-debt-is-inevitable/</link>
            <category>agile</category>
            <category>scrum</category>
            <category>technical debt</category>
            <pubDate>Thu, 16 Oct 2014 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Whoa there Dave.  What are you talking about?  Have you given up the fight? You who have preached the TDD religion.  You who’ve struggled to get organizations to adopt naming conventions, to use version control systems and to use project management software.  The same guy who has implemented continuous integration on his current project?  What’s this world coming to?&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;No. Relax. I haven’t given up.  In fact it is precisely because technical debt is inevitable that we need to implement all of the above.&lt;/p&gt;
&lt;h2 id=&#34;Danger&#34;&gt;&lt;a href=&#34;#Danger&#34; class=&#34;headerlink&#34; title=&#34;Danger&#34;&gt;&lt;/a&gt;Danger&lt;/h2&gt;&lt;p&gt;But there  is a danger in believing that if we were to implement all of the best practices in the book, or that could ever be devised, that technical debt would simply vanish.  And the sooner some of you realize this, the less stressed out you will be.&lt;/p&gt;
&lt;p&gt;You see, no matter how good of a programmer you are today, tomorrow you will be a better programmer.  That is true for all of us.  We are all doing as good of a job as we possibly can today.&lt;/p&gt;
&lt;h2 id=&#34;A-Story&#34;&gt;&lt;a href=&#34;#A-Story&#34; class=&#34;headerlink&#34; title=&#34;A Story&#34;&gt;&lt;/a&gt;A Story&lt;/h2&gt;&lt;p&gt;This reminds me of a story I heard once.&lt;/p&gt;
&lt;p&gt;It seems there was this programmer who had to make a change to some code and, like we all do, the first thing he did was to try to wrap his head around the code he was looking at.  A few minutes into this common exercise, he starts exclaiming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Who wrote this code?&lt;/li&gt;
&lt;li&gt;This is the worst code I’ve ever seen.&lt;/li&gt;
&lt;li&gt;The guy who wrote this can’t even really call himself a programmer!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then, it got unusually quite in his cubicle.&lt;/p&gt;
&lt;p&gt;His friend in the next cube calls over the wall, “Hey John, you OK?”&lt;/p&gt;
&lt;p&gt;And John responds, “It’s my code.”&lt;/p&gt;
&lt;p&gt;Now, the reason this is a funny story… well, it is a funny story for me anyhow… is because this happens to us all of the time.&lt;/p&gt;
&lt;p&gt;I think I spent the first 5 years of my career looking at code I wrote six months ago and thinking, “What was I thinking when I wrote this?”&lt;/p&gt;
&lt;p&gt;Even today, 26 years in, I have code I wrote six months or more ago that I know I need to rewrite.  The only reason I haven’t yet is because I want to make sure I have a full test harness around it before I tweak it.&lt;/p&gt;
&lt;h2 id=&#34;Here’s-the-point&#34;&gt;&lt;a href=&#34;#Here’s-the-point&#34; class=&#34;headerlink&#34; title=&#34;Here’s the point.&#34;&gt;&lt;/a&gt;Here’s the point.&lt;/h2&gt;&lt;p&gt;We are all getting better at what we do.  What we would do today isn’t what we would have done six months ago.  The person who wrote the code you are looking at was doing the best he could at the time.&lt;/p&gt;
&lt;p&gt;Therefore, we should just plan on code being “wrong.”&lt;/p&gt;
&lt;p&gt;This has two explicit implications to how you relate to your code and your co-workers.&lt;/p&gt;
&lt;h3 id=&#34;Don’t-be-surprised-by-bad-code&#34;&gt;&lt;a href=&#34;#Don’t-be-surprised-by-bad-code&#34; class=&#34;headerlink&#34; title=&#34;Don’t be surprised by bad code&#34;&gt;&lt;/a&gt;Don’t be surprised by bad code&lt;/h3&gt;&lt;p&gt;First, you should not be surprised when you find bad code.  You should instead be shocked when you find well written code.  Since even you write bad code, you should be gracious when you find bad code that isn’t yours.  You don’t want to be the guy in the story  I just told.  You might have done the same thing today if you knew only what the person who wrote the code you are looking at knew at the time the code was written.&lt;/p&gt;
&lt;h3 id=&#34;You-should-expect-that-your-code-will-be-broken-in-some-way&#34;&gt;&lt;a href=&#34;#You-should-expect-that-your-code-will-be-broken-in-some-way&#34; class=&#34;headerlink&#34; title=&#34;You should expect that your code will be broken in some way.&#34;&gt;&lt;/a&gt;You should expect that your code will be broken in some way.&lt;/h3&gt;&lt;p&gt;This has been probably the hardest thing for me to get control of.  I have, historically, been one to deny that my code has a bug.  I’ve taken it as a personal insult, or an assault on my character when someone finds a bug in my code. &lt;/p&gt;
&lt;p&gt;Until recently.&lt;/p&gt;
&lt;p&gt;Once I was able to internalize the fact that the person reporting the bug was not upset, that the only person who expected me to be perfect was me, and that being wrong was part of being human, I was able to calm down a bit.&lt;/p&gt;
&lt;p&gt;You see, none of us are all knowing.  Most of us program for what the code is supposed to do and don’t think about what it shouldn’t do (which is where most of the bugs occur).  The spoken&amp;#x2F;written language is an imprecise communicator, even if you develop a dictionary for your project.  You’ll never get all of your terms defined.  You just don’t know what you don’t know.  And therefore there will be bugs.&lt;/p&gt;
&lt;p&gt;Maybe you’ll think, “I should have known that!”  Well, yes, maybe you SHOULD have.  But the fact is, you didn’t.&lt;/p&gt;
&lt;p&gt;When before I used to deny that the bug could even exist, my reaction now is, “Hmmm, wonder what’s going on there.  OK, well, put it in the issue tracker and I’ll get it fixed.”&lt;/p&gt;
&lt;p&gt;No drama.  No conflict.  No denial.  No blame.  Just deal with the issue.&lt;/p&gt;
&lt;h2 id=&#34;This-is-what-it-means-to-be-Agile&#34;&gt;&lt;a href=&#34;#This-is-what-it-means-to-be-Agile&#34; class=&#34;headerlink&#34; title=&#34;This is what it means to be Agile&#34;&gt;&lt;/a&gt;This is what it means to be Agile&lt;/h2&gt;&lt;p&gt;And you see, this is the beauty of the Agile methodology.  Agile assumes we aren’t going to get it right the first time.  It assumes humans are poor communicators.  It assumes that programmers aren’t going to understand the problem the first time they try to come up with a solution.  It assumes technical debt is inevitable.&lt;/p&gt;
&lt;p&gt;Isn’t it time that you do too? Or am I the only one who has suffered with this problem?&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/%E2%80%9Cdebbie-done%E2%80%9D/</guid>
            <title>“Debbie-Done”</title>
            <link>http://davembush.github.com/%E2%80%9Cdebbie-done%E2%80%9D/</link>
            <category>tdd</category>
            <category>programming</category>
            <category>agile</category>
            <category>testing</category>
            <pubDate>Tue, 04 Mar 2014 05:38:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/02/88Tr.png&#34; alt=&#34;88Tr&#34; title=&#34;88Tr&#34;&gt;&lt;/p&gt;
&lt;p&gt;A long long time ago, in what seems now like another world, I worked for a company as a &lt;a href=&#34;//en.wikipedia.org/wiki/Clipper_(programming_language)&#34;&gt;Clipper programmer&lt;/a&gt;.  While I was there I heard this story about a lady named Debbie.&lt;/p&gt;
&lt;p&gt;I was told that Debbie was a programmer who used to work for this company.  Debbie was a lazy programmer.  She worked harder at avoiding work than if she just did the job she was supposed to do.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;The-ultimate-lazy-programmer&#34;&gt;&lt;a href=&#34;#The-ultimate-lazy-programmer&#34; class=&#34;headerlink&#34; title=&#34;The ultimate lazy programmer&#34;&gt;&lt;/a&gt;The ultimate lazy programmer&lt;/h2&gt;&lt;p&gt;For example.  Once my boss had stopped by her desk to see how she was progressing on a report she was supposed to be writing:&lt;/p&gt;
&lt;p&gt;Debbie: Oh, that’s done.  Here.  Take a look.&lt;/p&gt;
&lt;p&gt;The boss looked it over and found an error.  Some of the numbers didn’t match up.&lt;/p&gt;
&lt;p&gt;Debbie: Oh, I know what that is.  I can get that fixed right away.&lt;/p&gt;
&lt;p&gt;Which she did.  At least that’s what she made everyone believe.&lt;/p&gt;
&lt;p&gt;After she left (shortly after this) they found out that she hadn’t even connected to a database to create that report.  The whole report was hard coded.  Every time you ran it, it gave you the same numbers.&lt;/p&gt;
&lt;h2 id=&#34;“Debbie-Done”&#34;&gt;&lt;a href=&#34;#“Debbie-Done”&#34; class=&#34;headerlink&#34; title=&#34;“Debbie-Done”&#34;&gt;&lt;/a&gt;“Debbie-Done”&lt;/h2&gt;&lt;p&gt;The one thing I was told that sticks in my mind the most is that Debbie considered a project “done” if it compiled in linked.  She almost never ran the code.  Or if she did, she certainly didn’t run enough of it, or run it more than to make sure it didn’t crash.  Anyhow, the perception she left is that she only compiled and linked the code.  Today, we’d say all she did was build the project or solution.&lt;/p&gt;
&lt;p&gt;But recently, I’ve discovered that many programmers work at the “Debbie-Done” level more than we’d like to admit.&lt;/p&gt;
&lt;p&gt;I’ve always thought that programmers wrote code like I do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write a bit of code. &lt;/li&gt;
&lt;li&gt;Build the code.&lt;/li&gt;
&lt;li&gt;Run the code to see if that change works as expected. &lt;/li&gt;
&lt;li&gt;Write a bit more code. &lt;/li&gt;
&lt;li&gt;Build the code.&lt;/li&gt;
&lt;li&gt;Run the code to see if that change works as expected. &lt;/li&gt;
&lt;li&gt;Rinse, lather, repeat.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But what I’m discovering is that MANY programmers do not program that way at all.  No, many of them look like some version of “Debbie-Done” programming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write some code. &lt;/li&gt;
&lt;li&gt;Build the project to make sure it will build&lt;/li&gt;
&lt;li&gt;Write some more code&lt;/li&gt;
&lt;li&gt;Build the project&lt;/li&gt;
&lt;li&gt;Rinse, lather, repeat&lt;/li&gt;
&lt;li&gt;Run the code and “test” all of the changes at once.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem with this method is that no one can remember all of the changes they make so, in the end, the code I write tends to be more completely tested than the code that was tested in bulk.  The only difference between this method of development and “Debbie-Done” is the degree of completeness with which each developer is able “test” their code.&lt;/p&gt;
&lt;h2 id=&#34;Avoid-“Debbie-Done”-with-Test-First-Development&#34;&gt;&lt;a href=&#34;#Avoid-“Debbie-Done”-with-Test-First-Development&#34; class=&#34;headerlink&#34; title=&#34;Avoid “Debbie-Done” with Test First Development&#34;&gt;&lt;/a&gt;Avoid “Debbie-Done” with Test First Development&lt;/h2&gt;&lt;p&gt;It is no wonder that many programmers I talk to think that test driven development takes too much time.  Compared to how they are programming, it does.&lt;/p&gt;
&lt;p&gt;But think about this.  If you were to code like I do, suddenly writing test for every change you make suddenly makes sense because instead of you running the application and getting to the place that will trigger your code and observing if it will work or not, you can write a test for just the piece of code you are working on and run that each time you want to verify if it is working or not.  Yes, initially, this will take more time.  But over the life of the program, and I would say even over the time span that it takes to initially write the code, writing at least the Unit Test as you are writing the features will actually save you time.  Not only that, you will end up with test you can repeat every time the code is changed.&lt;/p&gt;
&lt;p&gt;Even my method of “code, build, test, code, build, test” is “Debbie-Done” compared to writing test for each change as you make the change.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/test-driven-specifications/</guid>
            <title>Test Driven Specifications</title>
            <link>http://davembush.github.com/test-driven-specifications/</link>
            <category>tdd</category>
            <category>agile</category>
            <category>test driven development</category>
            <category>testing</category>
            <pubDate>Tue, 25 Feb 2014 03:44:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/02/spider.jpg&#34; alt=&#34;spider&#34; title=&#34;spider&#34;&gt;Several years ago, long before the community was actively talking about Test Driven Development, I worked for a short time at a company as a “bug fixer.”  That was my role.  They had hired me because they had some software that was “basically done” but “had some issues.”  It should only take a few weeks.&lt;/p&gt;
&lt;p&gt;The first thing they needed me to fix was that the website was supposed to send out email.  It turns out it was a configuration problem.  But they were so impressed (“the last guy we had in here spent two weeks on that problem and still hadn’t solved the problem.”) that they gave me more and more bugs.&lt;/p&gt;
&lt;h2 id=&#34;This-Is-The-Job-That-Never-Ends&#34;&gt;&lt;a href=&#34;#This-Is-The-Job-That-Never-Ends&#34; class=&#34;headerlink&#34; title=&#34;This Is The Job That Never Ends&#34;&gt;&lt;/a&gt;This Is The Job That Never Ends&lt;/h2&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;The gig that was supposed to be a couple of weeks long was quickly turning into a perpetual job.  Soon I learned that what I was working with was a system that had a lot of bugs, but no one was willing to admit that.  Eventually, frustrated by the fact that this system seemed to have a new bug every day, I asked for the specs so that I could create a test plan.  That’s when I found out the worse news of all about this system.&lt;/p&gt;
&lt;h2 id=&#34;Lost-Specifications&#34;&gt;&lt;a href=&#34;#Lost-Specifications&#34; class=&#34;headerlink&#34; title=&#34;Lost Specifications&#34;&gt;&lt;/a&gt;Lost Specifications&lt;/h2&gt;&lt;p&gt;They had lost the specs.  Not only had they lost the specs, but they were unwilling to admit this to the client and instead they were relying on the process of fixing the bugs to eventually squash all  the bugs so they could end up with a stable system.&lt;/p&gt;
&lt;p&gt;Since I was not yet familiar with the concepts of unit testing or Test Driven Development, I accepted this as the best we could do.  Hey!  At least I was getting paid well.&lt;/p&gt;
&lt;p&gt;Oh, but the story gets worse.&lt;/p&gt;
&lt;h2 id=&#34;The-Plot-Thickens&#34;&gt;&lt;a href=&#34;#The-Plot-Thickens&#34; class=&#34;headerlink&#34; title=&#34;The Plot Thickens&#34;&gt;&lt;/a&gt;The Plot Thickens&lt;/h2&gt;&lt;p&gt;About three months into this gig, the manager of my project went on vacation which left the project in HIS manager’s hands.  That’s when the poop hit the fan.&lt;/p&gt;
&lt;p&gt;The Oracle consultant that was working with me and I were called into the office.&lt;/p&gt;
&lt;p&gt;“Why does this system still have bugs?!!”  Oh, he was angry.  That should be all bold and all caps and all underlined.&lt;/p&gt;
&lt;p&gt;Well sir, several weeks ago I asked for the requirements document so that I could write a test plan and I was told the requirements were lost.  If we can’t write a test plan, we never will be able to ensure that the system is working the way that it should.&lt;/p&gt;
&lt;p&gt;“I want you to write a test plan.”&lt;/p&gt;
&lt;p&gt;To which I repeated my need for a requirements document.&lt;/p&gt;
&lt;p&gt;We went back and forth with him insisting that I write a test plan and me stating that it could not be done until I finally said, “I think I’ve done all I can do here.”  Walked out of the office, packed up my stuff, went home, and immediately called my recruiter to make sure he got MY version of what happened first.&lt;/p&gt;
&lt;p&gt;But, it didn’t have to end like that.&lt;/p&gt;
&lt;h2 id=&#34;A-Better-Way&#34;&gt;&lt;a href=&#34;#A-Better-Way&#34; class=&#34;headerlink&#34; title=&#34;A Better Way&#34;&gt;&lt;/a&gt;A Better Way&lt;/h2&gt;&lt;p&gt;Had I known about test driven development, every time a new bug came in, I could have written a new test, even if it was only unit test and not acceptance test, every time a new bug came in.  Eventually, I would have created not only the test plan, but I would have created the specification, or at least the parts that tended to break, and we would have ended up with a stable system like they thought they were going to get.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
