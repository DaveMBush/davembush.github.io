<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;css&#34; tag</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Tue, 20 Mar 2018 06:30:51 -0400</pubDate>
        <lastBuildDate>Tue, 20 Mar 2018 06:30:51 -0400</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/vmware-s-clarity-design-system-for-angular/</guid>
            <title>VMWare&#39;s Clarity Design System for Angular</title>
            <link>http://davembush.github.com/vmware-s-clarity-design-system-for-angular/</link>
            <category>angular</category>
            <category>css</category>
            <category>clarity</category>
            <category>ui</category>
            <category>ux</category>
            <pubDate>Tue, 20 Mar 2018 06:30:51 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Unless you are a CSS wizard, you are probably using one of two CSS frameworks for your Angular projects or some sort of adaptation of them.  Bootstrap or Angular Material.  These have served us well, but they have one major flaw.  They target the “Mobile First” method of design.  This is great if your application must work on a mobile device.  But most corporate web applications target web applications.&lt;/p&gt;
&lt;p&gt;Have you ever heard any of these objections from your end users?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why is everything so big?&lt;/li&gt;
&lt;li&gt;Why can’t I have the label NEXT to the input field?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then you explain, it is so the screen can run on a mobile device and you hear, “But, this application will never run on a mobile device!”  Which is a valid point. &lt;/p&gt;
&lt;p&gt;Therefore, I was so excited to hear that VMWare has finally taken up the challenge of creating a Desktop First CSS Framework called &lt;a href=&#34;//vmware.github.io/clarity/&#34;&gt;Clarity&lt;/a&gt;. &lt;/p&gt;
&lt;figure style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;/vmware-s-clarity-design-system-for-angular/2018-03-20.jpg&#34; class=&#34;&#34; title=&#34;VMWare&amp;#39;s Clarity Design System for Angular&#34;&gt;&lt;figcaption&gt;Photo credit: [Sean Hering Photography](//visualhunt.com/author/2edd3b) on [Visual Hunt](//visualhunt.com/re/764a8a) / [ CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;
 &lt;/figure&gt; 

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-Is-Clarity&#34;&gt;&lt;a href=&#34;#What-Is-Clarity&#34; class=&#34;headerlink&#34; title=&#34;What Is Clarity?&#34;&gt;&lt;/a&gt;What Is Clarity?&lt;/h2&gt;&lt;p&gt;To call it a CSS Framework though doesn’t really do it justice.  It is a UI&amp;#x2F;UX System.  Much like Angular Material.  In fact, an application written using Clarity is going to end up looking a lot like a Material Design application.  The main differences are going to be, it will be built for the desktop rather than a mobile device.  This means the components won’t be so fat and the components will look more like what you would expect from a desktop application.&lt;/p&gt;
&lt;h2 id=&#34;Why-Clarity&#34;&gt;&lt;a href=&#34;#Why-Clarity&#34; class=&#34;headerlink&#34; title=&#34;Why Clarity?&#34;&gt;&lt;/a&gt;Why Clarity?&lt;/h2&gt;&lt;p&gt;Aside from the Desktop vs Mobile issue, there are other reasons you might want to consider using Clarity.&lt;/p&gt;
&lt;h3 id=&#34;Material-Meets-Bootstrap&#34;&gt;&lt;a href=&#34;#Material-Meets-Bootstrap&#34; class=&#34;headerlink&#34; title=&#34;Material Meets Bootstrap&#34;&gt;&lt;/a&gt;Material Meets Bootstrap&lt;/h3&gt;&lt;p&gt;Now, while the end result looks a lot like Angular Material, the way you style your application feels a lot more like Bootstrap.  This is something that has always bothered me about Angular Material.  In fact, one of the main reasons we didn’t use Angular Material at one of the places I’ve worked is specifically because it was too hard to make the site follow the design guides that were handed down to us.  Bootstrap, on the other hand, gave us an easy way to adapt the CSS to fit the requirements.  Give me components that provide functionality and provide a way that I can style them.  But don’t make common components their own special component just so you can add CSS to the standard element.  Make that a common CSS thing that you can change with CSS!&lt;/p&gt;
&lt;h3 id=&#34;508-Compliance&#34;&gt;&lt;a href=&#34;#508-Compliance&#34; class=&#34;headerlink&#34; title=&#34;508 Compliance&#34;&gt;&lt;/a&gt;508 Compliance&lt;/h3&gt;&lt;p&gt;Another big motivation for me to look at Clarity is that they have stricter 508 compliance if you use the default theme.  The one that is particularly important to me is the issue of contrast to support people who are color blind like me.  That’s 10% of the population that is impacted by color blindness in general which is a pretty large sample size to be pissing off with your color choices when there are tools that will let you see what it will look like to the various type of color blind people.  There compliance doesn’t end there, but that is the one that impacts me, so I care more about it.&lt;/p&gt;
&lt;h3 id=&#34;More-x2F-Better-Components&#34;&gt;&lt;a href=&#34;#More-x2F-Better-Components&#34; class=&#34;headerlink&#34; title=&#34;More&amp;#x2F;Better Components&#34;&gt;&lt;/a&gt;More&amp;#x2F;Better Components&lt;/h3&gt;&lt;p&gt;Third, several components exist that meet some requirements that the team I’m currently working on could have benefited from. While Angular Material is moving to fill in some of the gaps, the Clarity system has those components already.&lt;/p&gt;
&lt;h3 id=&#34;Great-Documentation&#34;&gt;&lt;a href=&#34;#Great-Documentation&#34; class=&#34;headerlink&#34; title=&#34;Great Documentation&#34;&gt;&lt;/a&gt;Great Documentation&lt;/h3&gt;&lt;p&gt;While it isn’t necessarily unique to Clarity, I found the documentation complete and easy to locate.  However, just like any of the other systems, you should take the time to read through most of the documentation, so you understand how it should work prior to actually trying to code anything.&lt;/p&gt;
&lt;h3 id=&#34;Easy-to-Use&#34;&gt;&lt;a href=&#34;#Easy-to-Use&#34; class=&#34;headerlink&#34; title=&#34;Easy to Use&#34;&gt;&lt;/a&gt;Easy to Use&lt;/h3&gt;&lt;p&gt;Finally, I took Clarity for a spin and found it MUCH easier to use than either Bootstrap or Angular Material.  Everything worked the way I expected it to and I don’t believe there was one time I had to add CSS to one of my components to make it do what I really wanted it to do.  This says a lot for a product that hasn’t even been officially released yet.&lt;/p&gt;
&lt;h3 id=&#34;VMWare&#34;&gt;&lt;a href=&#34;#VMWare&#34; class=&#34;headerlink&#34; title=&#34;VMWare&#34;&gt;&lt;/a&gt;VMWare&lt;/h3&gt;&lt;p&gt;Oh, and did I mention that it is backed by VMWare?  I always like it when an open source project is backed by a major company that doesn’t appear to be going away anytime soon.  This is why I tend to stay away from some of the smaller projects, like Vue, regardless of how great they are.  Yes, I know it has a big community.  But, people need to eat.  A project with corporate sponsorship is much more likely to be run well, progress at a steady pace, and be responsive to issues that crop up.&lt;/p&gt;
&lt;h2 id=&#34;Why-You-Might-Want-to-Pass&#34;&gt;&lt;a href=&#34;#Why-You-Might-Want-to-Pass&#34; class=&#34;headerlink&#34; title=&#34;Why You Might Want to Pass&#34;&gt;&lt;/a&gt;Why You Might Want to Pass&lt;/h2&gt;&lt;p&gt;For all these benefits, there are a couple of reasons why you might want to at least wait if not ignore Clarity. &lt;/p&gt;
&lt;p&gt;As I mentioned above, the product hasn’t been released yet and therefore there will be breaking changes as the project makes its way to version 1.0.  This is easily mitigated by freezing your development efforts to the current release and only upgrading when you have time to address the breaking changes. &lt;/p&gt;
&lt;p&gt;You also might want to avoid using Clarity if you really need Mobile First.  I’m sure you could adapt the CSS to work with Mobile as well as Desktop.  Personally, I’d just make sure all of my business logic was outside my components so that I could develop a Mobile front-end and a Desktop front-end without losing any functionality.  This would mean one site would use Bootstrap, Angular Material, or IONIC and the other would use Clarity.&lt;/p&gt;
&lt;h2 id=&#34;Installation-The-Right-Way&#34;&gt;&lt;a href=&#34;#Installation-The-Right-Way&#34; class=&#34;headerlink&#34; title=&#34;Installation - The Right Way&#34;&gt;&lt;/a&gt;Installation - The Right Way&lt;/h2&gt;&lt;p&gt;The clarity site has instructions for installing Clarity that are general enough that you could use the styles on multiple frameworks.  What follows is an adaptation of those instructions that are specific to an Angular site that uses the Angular CLI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save @webcomponents/custom-elements@^1.0.0&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is a polyfill that we will add to our polyfills.ts file&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;import &amp;#39;@webcomponents/custom-elements/custom-elements.min&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save @clr/icons&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save @clr/ui&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save bootstrap@4.0.0-alpha.5&lt;/code&gt;(note I didn’t try using the current release version.  It may, or may not, work.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install --save @clr/angular&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the icon css and js files to the .angular-cli.json file in the “styles” and “scripts” section:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;styles&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;styles.css&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;../node_modules/@clr/icons/clr-icons.css&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;../node_modules/@clr/ui/clr-ui.min.css&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;../node_modules/@clr/icons/clr-icons.min.js&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Import the clarity module into your AppModule to make the components available&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;ClarityModule&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@clr/angular&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;BrowserModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;ClarityModule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm start&lt;/code&gt; to make sure everything builds correctly.  If everything builds and you run the app, you will see that the page has bigger fonts than you may be used to.  If it looks like it has always looked, you probably don’t have it configured correctly yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If Clarity looks like it might meet your requirements better than the alternatives, I encourage you to take &lt;a href=&#34;//vmware.github.io/clarity/&#34;&gt;Clarity&lt;/a&gt; for a spin.&lt;/p&gt;
&lt;h2 id=&#34;Other-Places-Talking-About-VMWare-Clarity&#34;&gt;&lt;a href=&#34;#Other-Places-Talking-About-VMWare-Clarity&#34; class=&#34;headerlink&#34; title=&#34;Other Places Talking About VMWare Clarity&#34;&gt;&lt;/a&gt;Other Places Talking About VMWare Clarity&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//www.starwindsoftware.com/blog/vmware-clarity-why-should-you-care&#34;&gt;VMware Clarity – Why should you care&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//devchat.tv/adv-in-angular/aia-172-clarity-project-vmware-eudes-petonnet-vincent-matt-hippely&#34;&gt;The Clarity Project at VMware&lt;/a&gt; (podcast episode)&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/more-control-with-angular-flex-layout/</guid>
            <title>More Control with Angular Flex Layout</title>
            <link>http://davembush.github.com/more-control-with-angular-flex-layout/</link>
            <category>angular</category>
            <category>css</category>
            <category>flex</category>
            <pubDate>Tue, 11 Apr 2017 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;If you are using Angular(2+) and you are looking for an easy way to layout your components that gives you lots of flexibility and very few restrictions, you owe it to yourself to checkout &lt;a href=&#34;//github.com/angular/flex-layout&#34;&gt;Angular Flex Layout&lt;/a&gt;.  While it is still in Beta, the framework is quite usable.  I’ve been using it in one of my projects and I’ve been quite happy with the results.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/04/image-2.png &#34;More Control with Angular Flex Layout&#34;) Photo via [VisualHunt.com](//visualhunt.com/re/7d8037)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;The-Old-Days&#34;&gt;&lt;a href=&#34;#The-Old-Days&#34; class=&#34;headerlink&#34; title=&#34;The Old Days&#34;&gt;&lt;/a&gt;The Old Days&lt;/h2&gt;&lt;h3 id=&#34;Straight-CSS&#34;&gt;&lt;a href=&#34;#Straight-CSS&#34; class=&#34;headerlink&#34; title=&#34;Straight CSS&#34;&gt;&lt;/a&gt;Straight CSS&lt;/h3&gt;&lt;p&gt;I tell people, “I’ve been programming websites since ‘Al Gore invented the Internet’” Which is to say, some time prior to 1998. So, I’ve had to deal with layout issues for a very long time. At least in terms of “Internet Time.” And during that time, being able to lay things out on the page in some sort of intelligent way has matured quite a bit. But still, coding it all by hand, unless you are a fulltime CSS person, is not the best use of my time.&lt;/p&gt;
&lt;p&gt;This is, in part, why Bootstrap was created.&lt;/p&gt;
&lt;h3 id=&#34;Bootstrap&#34;&gt;&lt;a href=&#34;#Bootstrap&#34; class=&#34;headerlink&#34; title=&#34;Bootstrap&#34;&gt;&lt;/a&gt;Bootstrap&lt;/h3&gt;&lt;p&gt;I generally love Bootstrap. A great CSS framework that allows me to style my application easily, is easy to modify, and has a pretty respectable grid systems for placing my controls on the page. The problem with Bootstrap though is that the grid system is really all you have available for layout, and it is rather limited. At least that has been my experience. By default, you get a grid with 12 columns. And while you can next grids in other grids, you still end up with alignment issues. There must be an easier way.&lt;/p&gt;
&lt;h3 id=&#34;AngularJS-Material-Design&#34;&gt;&lt;a href=&#34;#AngularJS-Material-Design&#34; class=&#34;headerlink&#34; title=&#34;AngularJS Material Design&#34;&gt;&lt;/a&gt;AngularJS Material Design&lt;/h3&gt;&lt;p&gt;The Angular Flex Layout used to be part of the AngularJS Material Design project. But instead of making it part of the Angular Material Design project, it has been broken out so that we can use it in combination with other systems. Grids where they make sense and Flex Layout where that will work better.&lt;/p&gt;
&lt;h2 id=&#34;Flex-Layout-Benefits&#34;&gt;&lt;a href=&#34;#Flex-Layout-Benefits&#34; class=&#34;headerlink&#34; title=&#34;Flex Layout Benefits&#34;&gt;&lt;/a&gt;Flex Layout Benefits&lt;/h2&gt;&lt;h3 id=&#34;No-Grids&#34;&gt;&lt;a href=&#34;#No-Grids&#34; class=&#34;headerlink&#34; title=&#34;No Grids&#34;&gt;&lt;/a&gt;No Grids&lt;/h3&gt;&lt;p&gt;Now, what makes Flex Layout so great? The first thing that I think of is that I can do everything I was able to do with the Bootstrap grid system, but I have a lot more control. In fact, this past week, I converted an existing layout that was using nested grids to achieve the layout I was looking for and flattened it significantly by switching it to use Flex. You see, in Flex, you can say you want a row and then for each cell in that row, you can specify the width of the cell in any unit you want, or you can tell it to take up the remaining space. And just like Bootstrap grids, the DIVs wrap if needed.&lt;/p&gt;
&lt;h3 id=&#34;Directive-Based&#34;&gt;&lt;a href=&#34;#Directive-Based&#34; class=&#34;headerlink&#34; title=&#34;Directive Based&#34;&gt;&lt;/a&gt;Directive Based&lt;/h3&gt;&lt;p&gt;The other thing that is true of flex is that all of this control is specified at the template level. I’m not specifying layout in a file that is separate from the template I want to apply it to.&lt;/p&gt;
&lt;p&gt;Now, the CSS purist might object to this. “Style information should all go in a global CSS file so you aren’t repeating yourself.” They’ll say. &lt;/p&gt;
&lt;p&gt;Well, yes, that’s true, if you are creating multiple pages that you want to all look the same. But we are talking about Angular here. A Single Page Application. If you have multiple templates that all need the same layout information, you are probably not thinking about your components correctly. That is, your problem isn’t a CSS&amp;#x2F;Style issue, it is a component issue.&lt;/p&gt;
&lt;p&gt;In a SPA, each page looks the same because each page uses the same parent component. Rarely, do you really have a need to share layout styles. Mostly we share component look and feel. That’s different.&lt;/p&gt;
&lt;h3 id=&#34;Responsive&#34;&gt;&lt;a href=&#34;#Responsive&#34; class=&#34;headerlink&#34; title=&#34;Responsive&#34;&gt;&lt;/a&gt;Responsive&lt;/h3&gt;&lt;p&gt;And if I want a cell to be one size for desktop and another size for tablets or phones, I can easily specify what size each should be. Similar to how we would do it with Bootstrap, but in much finer detail.&lt;/p&gt;
&lt;h2 id=&#34;It’s-Just-CSS&#34;&gt;&lt;a href=&#34;#It’s-Just-CSS&#34; class=&#34;headerlink&#34; title=&#34;It’s Just CSS&#34;&gt;&lt;/a&gt;It’s Just CSS&lt;/h2&gt;&lt;p&gt;Before we move on, I want to point out that Flex Layout doesn’t do anything that the current CSS spec doesn’t already allow us to do. However, the current Flexbox CSS implementations are so new that each browser implements the spec enough different that we can’t be sure the styles will work the same way as we move from browser to browser.&lt;/p&gt;
&lt;p&gt;What Flex Layout attempts to do is to normalize the differences in a way similar to how jQuery normalized the DOM for us. Someday, we may not need Flex Layout. But until then, this is going to save you a lot of time trying to figure things out.&lt;/p&gt;
&lt;h2 id=&#34;What-You-Can-Do&#34;&gt;&lt;a href=&#34;#What-You-Can-Do&#34; class=&#34;headerlink&#34; title=&#34;What You Can Do&#34;&gt;&lt;/a&gt;What You Can Do&lt;/h2&gt;&lt;h3 id=&#34;Maintain-Aspect-Ratios&#34;&gt;&lt;a href=&#34;#Maintain-Aspect-Ratios&#34; class=&#34;headerlink&#34; title=&#34;Maintain Aspect Ratios&#34;&gt;&lt;/a&gt;Maintain Aspect Ratios&lt;/h3&gt;&lt;p&gt;I first started playing with the Flexbox CSS spec when I needed to implement a layout that included a video player that was bounded by a splitter control. As the splitter resizes the panel, the video needs to shrink and grow maintaining the aspect ratio while at the same time allowing the cell under it to grow and shrink. This is something that Flex can handle easily.&lt;/p&gt;
&lt;h3 id=&#34;Rows-with-Cells&#34;&gt;&lt;a href=&#34;#Rows-with-Cells&#34; class=&#34;headerlink&#34; title=&#34;Rows with Cells&#34;&gt;&lt;/a&gt;Rows with Cells&lt;/h3&gt;&lt;p&gt;As I’ve already mentioned, it is as easy to set up a new row and place wrapping DIVs in it as it is with Bootstrap.&lt;/p&gt;
&lt;h3 id=&#34;Columns-with-Cells&#34;&gt;&lt;a href=&#34;#Columns-with-Cells&#34; class=&#34;headerlink&#34; title=&#34;Columns with Cells&#34;&gt;&lt;/a&gt;Columns with Cells&lt;/h3&gt;&lt;p&gt;But unlike Bootstrap, you can also create groups of Columns with Cells.&lt;/p&gt;
&lt;h3 id=&#34;Responsive-Card-Layouts&#34;&gt;&lt;a href=&#34;#Responsive-Card-Layouts&#34; class=&#34;headerlink&#34; title=&#34;Responsive Card Layouts&#34;&gt;&lt;/a&gt;Responsive Card Layouts&lt;/h3&gt;&lt;p&gt;The last couple of weeks, I needed to implement a card layout that changed the number of columns displayed based on the width of the container. By using Flex Layout along with min-width and max-width on the cards, I was able to get this to layout correctly regardless of the container width.&lt;/p&gt;
&lt;h2 id=&#34;Getting-Started&#34;&gt;&lt;a href=&#34;#Getting-Started&#34; class=&#34;headerlink&#34; title=&#34;Getting Started&#34;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;&lt;p&gt;I’m not going to spend a lot of time going over the ins and outs of using Flex Layout. They do a pretty respectable job on the website. But, the one thing I did have trouble getting started with was exactly what syntax to use. Some stuff I found used &lt;code&gt;fx-flex&lt;/code&gt; syntax and other sites used &lt;code&gt;fxFlex&lt;/code&gt;. The one you want is &lt;code&gt;fxFlex&lt;/code&gt;. That and a bit of experimentation should get you well on your way.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/secrets-to-styling-angular2/</guid>
            <title>Secrets to Styling Angular2</title>
            <link>http://davembush.github.com/secrets-to-styling-angular2/</link>
            <category>angular</category>
            <category>animation</category>
            <category>css</category>
            <pubDate>Tue, 31 Jan 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;This past week, while working on a new project, I discovered some secrets to styling Angular2 that I don’t think are very well-known.&lt;/p&gt;
&lt;p&gt;There are two specific issues I needed to solve this week that took a bit of digging. The first was that I wanted my routes to fade in and out as I move between routes. The second was that I was using a grid control from a third party and I needed to style an inner component. We will cover both as well as some more basic operations.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/01/image-2.png &#34;Secrets to Styling Angular2&#34;) Photo via [Visual hunt](//visualhunt.com/)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Angular2-Version&#34;&gt;&lt;a href=&#34;#Angular2-Version&#34; class=&#34;headerlink&#34; title=&#34;Angular2 Version&#34;&gt;&lt;/a&gt;Angular2 Version&lt;/h2&gt;&lt;p&gt;Just so there isn’t any confusion, this article is accurate for Angular 2.x as of 2.5&lt;/p&gt;
&lt;h2 id=&#34;The-Basics&#34;&gt;&lt;a href=&#34;#The-Basics&#34; class=&#34;headerlink&#34; title=&#34;The Basics&#34;&gt;&lt;/a&gt;The Basics&lt;/h2&gt;&lt;p&gt;Just to make sure we have the basics covered, we want to start with generic styling. The temptation might be to style each of your components independently. This would be a mistake. Angular2 doesn’t throw out all the existing CSS rules. Instead, it adds to them. Therefore, anything you can do with a generic style should be handled at that level.&lt;/p&gt;
&lt;p&gt;Since I generally use Bootstrap to theme my applications, this is what I’ll reference here. Using the angular-cli, the way you would add the CSS theme information is to include it in the angular-cli.json file of your application in the “styles” section.&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;styles&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;../node_modules/bootstrap/dist/css/bootstrap.css&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;styles.css&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;],&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you have a component that you need to style in a way that is outside the bounds of the general CSS you’ve included, you can add CSS to the components CSS file. This all works as expected with one small exception. The CSS you add to this file only applies to the component and will override any other CSS that might already be applied by the general CSS.&lt;/p&gt;
&lt;p&gt;This is Angular2 CSS 101 stuff. I’ve written pretty extensively about this in the article “&lt;a href=&#34;https://medium.com/@davembush/adding-css-and-javascript-to-an-angular-cli-project-2b843a8283f3&#34;&gt;Adding CSS and JavaScript to an Angular-CLI Project&lt;/a&gt;”&lt;/p&gt;
&lt;h2 id=&#34;Host-access&#34;&gt;&lt;a href=&#34;#Host-access&#34; class=&#34;headerlink&#34; title=&#34;Host access&#34;&gt;&lt;/a&gt;Host access&lt;/h2&gt;&lt;p&gt;But there are times when the thing you want to style is the host container of the component. Not just the HTML inside it. There are two ways that you might do this.&lt;/p&gt;
&lt;h3 id=&#34;host&#34;&gt;&lt;a href=&#34;#host&#34; class=&#34;headerlink&#34; title=&#34;:host&#34;&gt;&lt;/a&gt;:host&lt;/h3&gt;&lt;p&gt;The first way is to use the &lt;code&gt;:host&lt;/code&gt; directive in your CSS. But you’ll need to be careful with this, as I found out recently.&lt;/p&gt;
&lt;p&gt;You see, you might expect that&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-pseudo&#34;&gt;:host&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;background-color&lt;/span&gt;: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;would cause the background color of the element to turn blue. But if you try that with a simple component you’ll find out that nothing shows up with a background color of blue because by default an element that isn’t part of the HTML spec has no size and basically disappears from the display. We want it to display an essentially be a container for all our other HTML so what you really want to do is something like:&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-pseudo&#34;&gt;:host&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;background-color&lt;/span&gt;: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;height&lt;/span&gt;: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;width&lt;/span&gt;: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;position&lt;/span&gt;: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The only way it will show up, in my experience, is to make the position ‘absolute.’ Remember, we are doing this only because we want the :host to have some impact as a container for all the other elements that might be in it. Normally, you can get by styling the html inside it.&lt;/p&gt;
&lt;h3 id=&#34;HostBinding&#34;&gt;&lt;a href=&#34;#HostBinding&#34; class=&#34;headerlink&#34; title=&#34;@HostBinding()&#34;&gt;&lt;/a&gt;@HostBinding()&lt;/h3&gt;&lt;p&gt;An alternate way of setting style on the component container is by using the @HostBinding() decorator. What this does is that it binds a variable to the containers attribute so that you can change the value from your TypeScript code.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Component(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  selector: &lt;span class=&#34;string&#34;&gt;&amp;#x27;app-view&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  templateUrl: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./view.component.html&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  styleUrls: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;./view.component.css&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ViewComponent&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnInit&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  @HostBinding(&lt;span class=&#34;string&#34;&gt;&amp;#x27;style.backgroundColor&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    backgroundColr = &lt;span class=&#34;string&#34;&gt;&amp;#x27;blue&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  constructor() &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ngOnInit() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Child-Elements&#34;&gt;&lt;a href=&#34;#Child-Elements&#34; class=&#34;headerlink&#34; title=&#34;Child Elements&#34;&gt;&lt;/a&gt;Child Elements&lt;/h2&gt;&lt;p&gt;Now, the other problem you might run into is that you’ll be using some third-party control and you’ll want to style some container element inside of it to fit your needs. Again, this isn’t a particularly common problem, but it might just take you a while to find the answer.&lt;/p&gt;
&lt;p&gt;The first thing you may try is to just style the markup.&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;component-parent component-child &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* style stuff here */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But, try as you might, you’ll never get those styles to show up. You can style the &lt;code&gt;component-parent&lt;/code&gt; all you want, but not the &lt;code&gt;component-child&lt;/code&gt; no matter what you do.&lt;/p&gt;
&lt;p&gt;Here is the trick that allows you to style the &lt;code&gt;component-child&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;component-parent &amp;gt;&amp;gt;&amp;gt; component-child &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /\* style stuff here */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;That &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; thing is call the “piercing” operator. All you need to know is that it is how you get the child elements styled.&lt;/p&gt;
&lt;h2 id=&#34;Animations&#34;&gt;&lt;a href=&#34;#Animations&#34; class=&#34;headerlink&#34; title=&#34;Animations&#34;&gt;&lt;/a&gt;Animations&lt;/h2&gt;&lt;p&gt;You might wonder, at first, why we would need an Animation API in Angular2. Aren’t CSS animations good enough? Well, actually… It isn’t that CSS animations aren’t good enough, but because Angular2 “hide” and “shows” elements by putting them into and out of the DOM and does other DOM manipulations that conflict with CSS animations, you will find there are time you are going to need to use the Angular2 Animation API.&lt;/p&gt;
&lt;p&gt;The Animation API works in a similar way to how the CSS Animations work so this isn’t going to be a big stretch for you if you are already familiar with CSS Animations.&lt;/p&gt;
&lt;p&gt;To animate a component, you are going to need to add an animations section to the @Component decorator of your component:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Component(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  selector: &lt;span class=&#34;string&#34;&gt;&amp;#x27;app-view&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  templateUrl: &lt;span class=&#34;string&#34;&gt;&amp;#x27;./view.component.html&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  styleUrls: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;./view.component.css&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  animations: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/* animation definitions here */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The question then, is “how do we define an animation” Since animations is obviously an array, we want to know, what is it an array of? It is an array of triggers. A trigger has two parts. A name, an an array that specifies how the animation should work. This name gets used in our template using the [@name] syntax to bind to a component property.&lt;/p&gt;
&lt;p&gt;Next, we define each of the states we want to respond to and style we want to end up with when that state is triggered.&lt;/p&gt;
&lt;p&gt;Finally, we define each of the transitions.&lt;/p&gt;
&lt;p&gt;The combination gives us a lot of flexibility. While we can create the same kind of transitions that we might have using CSS, we can also create transitions the we never could have using CSS. All we need to do is have our component change the value of some member variable in some predictable way and the transitions will kick into work.&lt;/p&gt;
&lt;p&gt;You can read more about transitions on the &lt;a href=&#34;//angular.io/docs/ts/latest/guide/animations.html&#34;&gt;Angular2 documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Route-Animations&#34;&gt;&lt;a href=&#34;#Route-Animations&#34; class=&#34;headerlink&#34; title=&#34;Route Animations&#34;&gt;&lt;/a&gt;Route Animations&lt;/h2&gt;&lt;p&gt;Route animations are similar. However, this is where everything I’ve said above comes together.&lt;/p&gt;
&lt;p&gt;The first problem you are going to run into trying to animate a route is that the state you want to base your animations on is the route, which is the parent component of your component you are probably trying to animate. But the reality is, what you are really doing is animating something when it is first displayed and animating it again when it is going away. That is, when it is placed into the DOM and when it is being removed from the DOM. Angular2 has to predefined states for this, ‘:enter’ and ‘:leave’.&lt;/p&gt;
&lt;p&gt;So, we create a trigger named ‘routeAnimation’ and in our route components we bind to it using the @HostBinding() decorator.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@HostBinding(&lt;span class=&#34;string&#34;&gt;&amp;#x27;@routeAnimation&amp;#x27;&lt;/span&gt;) routeAnimation = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Everything else you need to know I’ve already discussed above.&lt;/p&gt;
&lt;p&gt;For more information about routing animations, you can check the &lt;a href=&#34;//angular.io/docs/ts/latest/guide/router.html&#34;&gt;router documentation on the Angular2 documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Finally&#34;&gt;&lt;a href=&#34;#Finally&#34; class=&#34;headerlink&#34; title=&#34;Finally&#34;&gt;&lt;/a&gt;Finally&lt;/h2&gt;&lt;p&gt;It took me way too long to figure this out because a lot of the information has changed since RC0. Hopefully, it will point you in the right direction.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/responsive-web-design-conversion/</guid>
            <title>Responsive Web Design Conversion</title>
            <link>http://davembush.github.com/responsive-web-design-conversion/</link>
            <category>javascript</category>
            <category>css</category>
            <category>html</category>
            <category>responsive design</category>
            <pubDate>Thu, 25 Dec 2014 07:00:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Several weeks ago, I started the process of converting this blog to a responsive design.  At this point it is mostly done.  But it is done enough that I can tell you the process that I went through to get the site converted. I was surprised by how easy the process was.  But I guess I was lucky because the theme I started out with already was following a number of best practices. So, to start out with, if you want to move your site toward responsive web design, there are some prerequisites that you’ll need to pay attention to.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Responsive-Design-–-Prerequisites&#34;&gt;&lt;a href=&#34;#Responsive-Design-–-Prerequisites&#34; class=&#34;headerlink&#34; title=&#34;Responsive Design – Prerequisites&#34;&gt;&lt;/a&gt;Responsive Design – Prerequisites&lt;/h2&gt;&lt;p&gt;First, before you do anything else, you need to make sure your current theme is not using tables anywhere.  If you are, the first thing you will need to do is to convert your them from tables to using DIVs.  The CSS world has been telling you this for years.  And now you see why this is true. Frankly, if you are using tables instead of DIVs for your layout, you are probably better off just starting over. Second, you need to ensure that you don’t have any CSS embedded in your HTML, or even worse, style attributes in your elements that are going to get in the way of your design.  While it is true, you can override these with JavaScript, the less of this you have to do, the better.  So clean that up now. Third, you need to think about what you really NEED to show on the page and what can be  hidden.  Sidebars are a good candidate for hiding since they aren’t your main content.  On this site I have two side bars.  One on the left and one on the right.  I’ve decided that the right sidebar is more important, so I’ve hidden the left one for small screens and both for tiny screens.  You might decide to move them to the bottom instead.  But you might find that more difficult than hiding them.&lt;/p&gt;
&lt;h2 id=&#34;Responsive-Web-Design-–-HTML&#34;&gt;&lt;a href=&#34;#Responsive-Web-Design-–-HTML&#34; class=&#34;headerlink&#34; title=&#34;Responsive Web Design – HTML&#34;&gt;&lt;/a&gt;Responsive Web Design – HTML&lt;/h2&gt;&lt;p&gt;With the prerequisites taken care of, let’s look at a small HTML change you will need to make. You will need to add the following META tag into the HEAD area of your HTML:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;content&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;width=device-width, initial-scale=1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I’ll let you search for the technical explanation of what this actually does.  What I’ll tell you is why you need it. If you don’t add this then when you go to view your web site on the iPhone and other browsers that are looking for this tag, you’ll see the full site scaled down to fit on the phone instead of the adaptive rendering you were probably expecting. That is, you’ll have everything working on your desktop so that it works on various screen sizes as you expect, but when you try to render it on your phone, it will scale the full version of the site to fit within the screen.&lt;/p&gt;
&lt;h2 id=&#34;Responsive-Web-Design-–-CSS&#34;&gt;&lt;a href=&#34;#Responsive-Web-Design-–-CSS&#34; class=&#34;headerlink&#34; title=&#34;Responsive Web Design – CSS&#34;&gt;&lt;/a&gt;Responsive Web Design – CSS&lt;/h2&gt;&lt;p&gt;Most of your changes will be in the CSS.  This is where a lot of the magic happens.  The first change you are going to want to make to your original design is that you are going to want to make all of your width information percentage values instead of hard pixel values (or EMs, if that’s what you use.) Of course your outer DIV is going to need to be 100%.  But if you do that, and you view your site on a large monitor, your site is going to be really hard to read.   So, to fix that issue, add the max-width attribute to the css definition for that element.&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-class&#34;&gt;.container&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;attribute&#34;&gt;width&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;attribute&#34;&gt;max-width&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1200px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now we have to add rules to tell the browsers how to render the page at different resolutions.  To do that, we use media tags. You may have thought that media tags were just for styling the printed version of your web site, or for telling text to speech engines how to read your page.  But they are also useful for telling the browser what rules to use for the various screen resolutions. You can use media tags for screen in the same way that you use media tags for print.  Either by specifying in your CSS or by specifying  in your LINK statement in the HTML.  I choose to put them in my CSS because I wasn’t adding that much information and I compress my CSS anyhow. The basic syntax looks like:&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@media&lt;/span&gt; screen &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; (some rule here)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;It is the rule bit that gets confusing. The rule bit looks like:&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@media&lt;/span&gt; screen &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; (&lt;span class=&#34;attribute&#34;&gt;max-width&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;600px&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What this says is, only apply this CSS to screen sizes LESS THAN or equal to 600px.  That is, only apply the CSS to a screen who’s max width is 600px. If you are going to mess up anything, this is where it will be. there is also a rule for min-width, so you can say something like&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@media&lt;/span&gt; screen &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; (&lt;span class=&#34;attribute&#34;&gt;max-width&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;600px&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; (&lt;span class=&#34;attribute&#34;&gt;min-width&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;300px&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Which would only apply the CSS to a screen width between 300 and 600 pixels. Now, you might be inclined to use a rule like that, but what I’ve found is that most of my CSS is additive.  That is, the rules I applied to max-with of 900 pixels I also want applied to max-width of 600 pixels.  I just want additional rules applied to max-width of 600.  So, I tend to just stack them instead of making a separate rule set for each resolution. Other than removing the sidebars, you may also want to adjust font sizes and banner sizes based on the size of the screen.  That’s what I did here.  You’ll notice that the banner area shrinks as the screen gets smaller.&lt;/p&gt;
&lt;h2 id=&#34;Responsive-Web-Design-–-JavaScript&#34;&gt;&lt;a href=&#34;#Responsive-Web-Design-–-JavaScript&#34; class=&#34;headerlink&#34; title=&#34;Responsive Web Design – JavaScript&#34;&gt;&lt;/a&gt;Responsive Web Design – JavaScript&lt;/h2&gt;&lt;p&gt;OK, so now you have your screens scaling nicely, but you may notice one final issue.  All of those images you have on your site are all a fixed size.  Some of those you might be able to fix by using CSS.  But, in my case the images I had the most trouble with were the images that show up at the top of the post.  So, in my case, I wrote some JavaScript to scale them to fit the width of the container.  I still have to modify the code in some of my older posts to work better with the JavaScript I wrote.  But for the newer posts, this is all working well.  I’ve been thinking about making the scaling code work as the screen size changes, but that’s a lot of work for something most people aren’t going to use. If you do decide to change the screen size and you see the images bleeding over the width of the container, refresh your browser and the images will scale.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/css-animation-resources/</guid>
            <title>CSS Animation Resources</title>
            <link>http://davembush.github.com/css-animation-resources/</link>
            <category>animation</category>
            <category>css</category>
            <category>html</category>
            <pubDate>Thu, 30 Oct 2014 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;This week I discovered CSS Animations.  Well, I shouldn’t say I discovered it so much as I finally spent some time figuring out what it is and why I would care about it.  This could make so much of what we normally do in JavaScript entirely unnecessary.  So, more for my own benefit than anything else, I thought today I would just create a list of resources that are available. But first, why would you want to use CSS for animation when JavaScript could do it just as well?&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;CSS-and-HTML-live-in-the-same-world&#34;&gt;&lt;a href=&#34;#CSS-and-HTML-live-in-the-same-world&#34; class=&#34;headerlink&#34; title=&#34;CSS and HTML live in the same world&#34;&gt;&lt;/a&gt;CSS and HTML live in the same world&lt;/h2&gt;&lt;p&gt;As I mentioned a few weeks ago when I discussed JavaScript performance, anytime you manipulate the DOM from JavaScript, you have to cross the HTML&amp;#x2F;JavaScript boundary.  And to do it right, you have to make sure you work in sync with the key frames that the DOM is living in.  If you don’t, at best you will be animating more than you need to if you use JavaScript to do the animation.  On a phone, this can eat up precious battery life.  For me, this is the biggest reason.&lt;/p&gt;
&lt;h2 id=&#34;Declarative-Code-Is-Easier-To-Read&#34;&gt;&lt;a href=&#34;#Declarative-Code-Is-Easier-To-Read&#34; class=&#34;headerlink&#34; title=&#34;Declarative Code Is Easier To Read&#34;&gt;&lt;/a&gt;Declarative Code Is Easier To Read&lt;/h2&gt;&lt;p&gt;I realize that some may disagree with this.  But my feeling is, if I can express in one line what would  take a loop in JavaScript to do, I’ll take the one line of code.  This one of the things that makes Angular attractive.  I can create my own HTML tags.  Why not get the same benefit from my CSS?&lt;/p&gt;
&lt;h2 id=&#34;Reasons-Why-You-Might-Not&#34;&gt;&lt;a href=&#34;#Reasons-Why-You-Might-Not&#34; class=&#34;headerlink&#34; title=&#34;Reasons Why You Might Not&#34;&gt;&lt;/a&gt;Reasons Why You Might Not&lt;/h2&gt;&lt;p&gt;There are a few reasons why you might not use CSS Animations.  First, it is relatively new.  It may not do everything you want it to do.  So, you may have to resort to using JavaScript for at least some of the things you want to do. Second, it may not support all of the browsers you need to support.&lt;/p&gt;
&lt;h2 id=&#34;Resources&#34;&gt;&lt;a href=&#34;#Resources&#34; class=&#34;headerlink&#34; title=&#34;Resources&#34;&gt;&lt;/a&gt;Resources&lt;/h2&gt;&lt;p&gt;Here are a brief list of resources that I found&lt;/p&gt;
&lt;h3 id=&#34;CSS-Generators&#34;&gt;&lt;a href=&#34;#CSS-Generators&#34; class=&#34;headerlink&#34; title=&#34;CSS Generators&#34;&gt;&lt;/a&gt;CSS Generators&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//www.cssanimate.com/&#34;&gt;CSS Animate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//www.css3maker.com/css3-animation.html#&#34;&gt;CSS3 Maker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;CSS-Animated-Accordion&#34;&gt;&lt;a href=&#34;#CSS-Animated-Accordion&#34; class=&#34;headerlink&#34; title=&#34;CSS Animated Accordion&#34;&gt;&lt;/a&gt;CSS Animated Accordion&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//css3.bradshawenterprises.com/accordions/&#34;&gt;Bradshaw Enterprises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//www.jamestease.co.uk/blether/accordion-using-css-animations&#34;&gt;James Tease&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//martinivanov.net/2014/03/19/animated-css3-only-horizontal-accordion/&#34;&gt;Martin Ivanov&lt;/a&gt; (side ways)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//www.thecssninja.com/css/accordian-effect-using-css&#34;&gt;The CSS Ninja&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Menus&#34;&gt;&lt;a href=&#34;#Menus&#34; class=&#34;headerlink&#34; title=&#34;Menus&#34;&gt;&lt;/a&gt;Menus&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//css3menu.com/&#34;&gt;CSS Menu&lt;/a&gt; (lots of variations)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//css3-menu.com/animated-css3-menu.html&#34;&gt;Menu Maker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Slide-Show&#34;&gt;&lt;a href=&#34;#Slide-Show&#34; class=&#34;headerlink&#34; title=&#34;Slide Show&#34;&gt;&lt;/a&gt;Slide Show&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//css-tricks.com/infinite-all-css-scrolling-slideshow/&#34;&gt;Infinite Scrolling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//agskryp.wordpress.com/2014/07/20/css3-animation-slideshow/&#34;&gt;One at a time&lt;/a&gt; (&lt;a href=&#34;/oneatatimeslideshow&#34; title=&#34;http:/oneatatimeslideshow&#34;&gt;http:&amp;#x2F;oneatatimeslideshow&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I first suggested “CSS Animations” to a designer friend of mine, he reacted as though I was suggesting putting a flash animation on a web site.  Obviously, we wouldn’t want to do that. But we use animation is some pretty creative ways.  So the next time you reach for JavaScript to add some sort of animation to your web application, do a search for a CSS Animation instead.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
