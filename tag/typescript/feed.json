{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"typescript\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/use-typescript-class-instead-of-interface-or-type/",
            "url": "http://davembush.github.com/use-typescript-class-instead-of-interface-or-type/",
            "title": "Use TypeScript Class instead of Interface or Type",
            "date_published": "2025-04-02T17:04:48.000Z",
            "content_html": "<p>Since TypeScript introduced Interfaces and Types, we’ve been getting lazy. It is so much easier to create an object that obeys an interface than it is to create a Class that obeys the same interface. But what have we lost in the process?</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Checking-Type-at-Runtime\"><a href=\"#Checking-Type-at-Runtime\" class=\"headerlink\" title=\"Checking Type at Runtime\"></a>Checking Type at Runtime</h2><p>In a typical application, if we want a strongly typed object, we create an interface or a type, define our object, and then assign an object to a variable with that type.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">user</span>: <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>All goes well until we need to check to see if the object is of type User. To do that, we have to test to see if the object has the properties we expect and that those properties have the types we expect.</p>\n<p>If we had created a class instead, we could have used the <code>instanceof</code> operator to check if the object is of type User.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>, <span class=\"keyword\">public</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">1</span>, <span class=\"string\">&#x27;John Doe&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> isUser = user <span class=\"keyword\">instanceof</span> <span class=\"title class_\">User</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>This is a much cleaner solution. We can also add methods to the class that operate on the properties of the class, which is not possible with an interface or type.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>, <span class=\"keyword\">public</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Silly example</span></span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"But-What-About-Flexibility\"><a href=\"#But-What-About-Flexibility\" class=\"headerlink\" title=\"But What About Flexibility?\"></a>But What About Flexibility?</h2><p>But we’ve lost the flexibility of using an anonymous object to create the User. We can fix this by allowing the constructor to accept an object that has the same properties as the User class.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"attr\">user</span>: <span class=\"title class_\">User</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = user.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = user.<span class=\"property\">name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(&#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dev-Tools-Impact\"><a href=\"#Dev-Tools-Impact\" class=\"headerlink\" title=\"Dev Tools Impact\"></a>Dev Tools Impact</h2><p>An additional reason for using a class instead of an interface or a type is that the type information not only sticks around so we can use instanceof checks. But it sticks around so we can see the class name in our debug tools. This becomes important when you are looking at a stack trace that happened during runtime that you do not have map files available for or when you are looking at flame charts or you are tracking down memory leaks.</p>\n<p>When you use an interface or a type, the type information is erased at runtime. This means that if you have a stack trace that shows an object of type User, you will not be able to see the class name in the stack trace. This can make it difficult to track down bugs and performance issues.</p>\n<h2 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h2><p>And if you care about performance, there is one final reason you should want to use Classes instead of Interfaces or Types.</p>\n<p>When you use an interface or type, it does not ensure that they fields stay in the same position as you copy it around.</p>\n<p>What do I mean by this? And why do we care?</p>\n<p>Let’s use the same object example we’ve been working with but using interfaces again.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">user</span>: <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">user2</span>: <span class=\"title class_\">User</span> = &#123; ...user, <span class=\"attr\">id</span>: <span class=\"number\">2</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>We do this all the time, right? But what we’ve done is created one object, user, that looks like:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And another object, user2, that looks like:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>That spread operator changed the order of our fields. Now, for applications that are small where we don’t care all that much about performance, this doesn’t matter. But, under the hood, the V8 engine is going to create a separate hidden class for each of these objects even though they are essentially the same type. The more fields you have in an object, the more hidden classes you are likely to create. This eats up memory as well as causing the V8 engine to have to do more work to optimize the code.</p>\n<p>One of the next optimizations I’ll be making in my code is to prefer Classes over Interfaces and Types. It is a trivial change to make and has huge benefits. I would encourage you to do the same.</p>\n",
            "tags": [
                "TypeScript",
                "Performance"
            ]
        },
        {
            "id": "http://davembush.github.com/dr-seuss-on-constructors/",
            "url": "http://davembush.github.com/dr-seuss-on-constructors/",
            "title": "Dr Seuss on Constructors",
            "date_published": "2023-07-22T14:21:00.000Z",
            "content_html": "<img src=\"/dr-seuss-on-constructors/BugsVilleSam.png\" style=\"width: 100%;\" />\n\n<p>In the vibrant town of Bugville, known for its thrill,<br>There lived a brisk coder named Sam, climbing up a skill hill.<br>One day, he embarked on a project so grand,<br>To craft an entity, a creature named ClutterSand.</p>\n<span id=\"more\"></span>\n\n<p>With properties and methods, the ClutterSand was vast,<br>It needed a constructor, to echo its past.<br>A special function, Sam knew it true,<br>It’s called when an instance, of the class, is brand new.</p>\n<p>Sam, though clever, was fond of a trick,<br>“Why not let the constructor perform more?”, he picked.<br>Logics, computations, actions so raw,<br>In his constructor, he saw no flaw.</p>\n<p>His constructor, now bloated, did more than just spawn,<br>It fetched data, it computed, from dusk to dawn.<br>And as the ClutterSand grew, he felt a tad smug,<br>Ignoring a rising tide, under his proverbial rug.</p>\n<p>Inheritance and Polymorphism started to frown,<br>Base class antics caused the subclasses to drown.<br>Overridden properties, methods once lean,<br>Now gave unpredictable results, the scene turned mean.</p>\n<p>Guaranteed object initialization, once a steady rock,<br>Now seemed more like an elusive flock.<br>Objects weren’t always ready when constructors were through,<br>Leaving Sam puzzled, with a clue or two.</p>\n<p>Then came the exceptions, with nowhere to hide,<br>Complex tasks in constructor, made them collide.<br>Who’d handle these exceptions? Sam started to wonder,<br>As his codebase threatened to split asunder.</p>\n<p>Unit tests, Sam’s supposed trustworthy aid,<br>Became a nightmare, a never-ending raid.<br>With complex constructors, tests were a mess,<br>Frustration peaked, causing undue stress.</p>\n<p>Transparency, predictability, pillars of good code,<br>Began to wobble under the constructor’s load.<br>Debugging was like chasing shadows in the night,<br>Sam’s hasty decision didn’t seem so right.</p>\n<p>Days turned into nights, bug reports piled high,<br>Sam’s grand project was now but a sigh.<br>A lesson learned, a principle reborn,<br>A simple constructor, complex tasks must scorn.</p>\n<p>For constructors should be modest, diligent, and pure,<br>To make the objects ready, stable, and sure.<br>And for extra logic, another way must be sought,<br>So, dear coder, let this lesson not be for naught.</p>\n<p>Remember the tale of Sam and his ClutterSand,<br>In the world of code, let simplicity command.<br>Though the road was rough, and the journey was cruel,<br>In the end, Sam learned the golden rule!</p>\n",
            "tags": [
                "typescript",
                "best practices",
                "constructors",
                "clean code"
            ]
        },
        {
            "id": "http://davembush.github.com/why-insist-on-return-types-in-typescript/",
            "url": "http://davembush.github.com/why-insist-on-return-types-in-typescript/",
            "title": "Why Insist On Return Types In TypeScript?",
            "date_published": "2023-03-25T18:47:38.000Z",
            "content_html": "<p>There are different opinions about whether or not to use return types in TypeScript. I respect that, but I would like to share why I think they are helpful.</p>\n<p>First, let’s acknowledge the reasons why some people prefer not to use return types.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Reasons-Against\"><a href=\"#Reasons-Against\" class=\"headerlink\" title=\"Reasons Against\"></a>Reasons Against</h2><h3 id=\"Verbosity-and-Redundancy\"><a href=\"#Verbosity-and-Redundancy\" class=\"headerlink\" title=\"Verbosity and Redundancy\"></a>Verbosity and Redundancy</h3><p>They can add verbosity and redundancy to the code, especially if the return type can be easily inferred by the compiler or the reader.</p>\n<p>I understand that adding return types to methods and functions can make the code longer and sometimes repetitive. But I also believe that they can add some benefits that outweigh the costs. We’ll explore those benefits later.</p>\n<h3 id=\"Limiting-Flexibility-and-Reusability\"><a href=\"#Limiting-Flexibility-and-Reusability\" class=\"headerlink\" title=\"Limiting Flexibility and Reusability\"></a>Limiting Flexibility and Reusability</h3><p>They can limit the flexibility and reusability of functions, especially if the return type is too specific or restrictive.</p>\n<p>I agree that we should avoid making our functions too specific or restrictive. But I don’t think that using return types necessarily leads to that. In fact, we can use generics and other TypeScript features to make our functions more flexible and reusable.</p>\n<h3 id=\"Introducing-Errors-and-Inconsistencies\"><a href=\"#Introducing-Errors-and-Inconsistencies\" class=\"headerlink\" title=\"Introducing Errors and Inconsistencies\"></a>Introducing Errors and Inconsistencies</h3><p>They can introduce errors or inconsistencies if the return type does not match the actual implementation or behavior of the function.</p>\n<p>I think this is a rare case, and if it happens, it means that we have a bug in our logic, not because of TypeScript but in spite of it. TypeScript is designed to catch these kinds of errors at compile time, so we can fix them before they cause any trouble.</p>\n<h3 id=\"Sometimes-difficult-or-impossible-to-specify\"><a href=\"#Sometimes-difficult-or-impossible-to-specify\" class=\"headerlink\" title=\"Sometimes difficult or impossible to specify\"></a>Sometimes difficult or impossible to specify</h3><p>They can be difficult or impossible to specify for some functions that throw errors or have multiple return paths.</p>\n<p>I admit that this can be challenging, but not impossible. We can use union types, never types, and other TypeScript tools to specify the return type for any function. If we can’t, then maybe we need to rethink our code design.</p>\n<p>Is the function too big? Doing too much? Maybe we can split it into smaller functions that do one thing and do it well.</p>\n<h2 id=\"Reasons-For\"><a href=\"#Reasons-For\" class=\"headerlink\" title=\"Reasons For\"></a>Reasons For</h2><p>If you haven’t noticed, I’m a fan of using return types in TypeScript. I think they make the code more readable, reliable, and maintainable. Here are some of the reasons why:</p>\n<h3 id=\"Readability-and-Documentation\"><a href=\"#Readability-and-Documentation\" class=\"headerlink\" title=\"Readability and Documentation\"></a>Readability and Documentation</h3><p>They make the code more readable and self-documenting, especially for complex or unfamiliar functions. They also help IDEs and editors to provide better code completion and hints.</p>\n<p>By using return types, we can communicate to ourselves and other developers what a function is supposed to do and what it returns. This can save us time and effort when we need to understand or modify the code. It can also help us avoid mistakes and bugs by using the wrong type of data.</p>\n<h3 id=\"Reliability-and-Robustness\"><a href=\"#Reliability-and-Robustness\" class=\"headerlink\" title=\"Reliability and Robustness\"></a>Reliability and Robustness</h3><p>They make the code more reliable and robust, especially for edge cases and unexpected scenarios. They also help TypeScript to <a href=\"https://www.typescriptlang.org/docs/handbook/type-inference.html\">perform better type inference and type checking</a> and <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance#using-type-annotations\">can improve the compile time performance</a>.</p>\n<p>By using return types, we can ensure that our functions behave consistently and correctly, even when they encounter errors or unexpected inputs. We can also leverage TypeScript’s powerful type system to catch errors at compile time, rather than at runtime. This can prevent crashes and improve performance.</p>\n<p>I recently read of a team who had a system that was largely untyped. Whenever a bug came in, they fixed the bug and then added types to the original code to see if the compiler would catch the bug. It turns out that simply adding types would have caught 15% of the bugs that came in.</p>\n<h3 id=\"Maintainability-and-Scalability\"><a href=\"#Maintainability-and-Scalability\" class=\"headerlink\" title=\"Maintainability and Scalability\"></a>Maintainability and Scalability</h3><p>They make the code more maintainable and scalable, especially for large or complex projects. They also help us to refactor and test our code more easily and confidently.</p>\n<p>By using return types, we can make our code more modular and reusable, avoiding duplication and complexity. We can also refactor and test our code more easily and confidently, knowing that TypeScript will alert us if we break something.</p>\n<h3 id=\"Sorting-our-Code-Into-Libraries\"><a href=\"#Sorting-our-Code-Into-Libraries\" class=\"headerlink\" title=\"Sorting our Code Into Libraries\"></a>Sorting our Code Into Libraries</h3><p>One problem I’ve run into in the past is with a code base that has a lot of typing issues. Along with that the code lived in 400+ libraries that is not very well sorted. I guess you have a similar problem only your code may not be quite so big.</p>\n<p>In order to move the code to a system that allows us to cache our compile results the libs to be buildable. But you can only have buildable libs if none of the libs cause a circular lib reference. To do this, we needed a way to sort the code into appropriate libraries.</p>\n<p>It might have been possible using inferred types, but it is considerably easier if we implicitly type our return values through out the code base.</p>\n<p>Then, using AST, we can easily go through the code and determine what code needs to move and where we should move it to. It still isn’t an easy job, but using return types makes it a lot easier.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>As you can see, I think that using return types in TypeScript is a good practice that can improve the quality of our code. Of course, there may be exceptions and trade-offs, depending on the context and preferences. But in general, I think that the benefits outweigh the costs.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://dev.to/arnelenero/why-explicit-return-type-is-a-good-thing-43lj\">Why Explicity Return Type is a Good Thing</a></li>\n<li><a href=\"https://www.reddit.com/r/typescript/comments/ihpnme/opinion_on_explicit_return_types/\">Reddit Thread Where The Majority Support Return Types</a></li>\n<li><a href=\"https://topher.io/writing/make-returns-explicit\">Make Returns Explicit</a></li>\n<li><a href=\"https://sebastiandedeyne.com/when-to-add-types-and-when-to-infer-in-typescript/\">When to Add Types and When to Infer in TypeScript</a></li>\n<li><a href=\"https://www.fun4code.com/typescript-explicit-vs-implicit/\">TypeScript Explicit vs Implicit</a></li>\n<li><a href=\"https://effectivetypescript.com/\">Effective TypeScript (Book)</a></li>\n</ul>\n<p>There are more. While there are people who insist using return types is a bad thing. My research indicates that the overwhelming consensus from the community is that using return types for functions and methods is generally a good thing and that following the default rules of the eslint rule <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.md\">explicit-function-return-types</a> is the proper balance between using return types where they supply value an turning them off where they do not.</p>\n",
            "tags": [
                "typescript",
                "strong typing",
                "linting"
            ]
        },
        {
            "id": "http://davembush.github.com/typescript-basics-for-angular-developers/",
            "url": "http://davembush.github.com/typescript-basics-for-angular-developers/",
            "title": "TypeScript Basics for Angular Developers",
            "date_published": "2018-09-08T10:30:30.000Z",
            "content_html": "<p>For the most part, TypeScript feels a lot like JavaScript.  Most people pick it up without having any formal training.</p>\n<p>But, here’s the deal.  “Just because you can, doesn’t mean you should.” </p>\n<p>The thing that makes me most nervous about Angular is that it is structured so that you can write some really clean code.  But, you don’t have to.  Which mean most won’t. </p>\n<p>In fact, recruiters continue to contact me about Angular jobs with rates that make it obvious that hiring an Angular programmer is the same as hiring an HTML “programmer” 10 years ago.  Sorry gang, JavaScript has grown up and so has Angular. </p>\n<p>So, here are a few things you need to know about TypeScript that will make you a better Angular developer. <figure><img src=\"/uploads/2017/07/TypescriptBasicsForAngular.jpg\" title=\"TypeScript Basics for Angular Developers\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/mujitra/8059355303/\">MIKI Yoshihito. (#mikiyoshihito)</a> via <a href=\"//visualhunt.com/re/b6d829\">VisualHunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Variable-Declaration\"><a href=\"#Variable-Declaration\" class=\"headerlink\" title=\"Variable Declaration\"></a>Variable Declaration</h2><p>There are three ways of declaring a variable in TypeScript.  You can either use the JavaScript <code>var</code> keyword like you’ve always done or you can use the <code>let</code> keyword or the <code>const</code> keyword. </p>\n<p>But first, what problem are we trying to solve? </p>\n<p>In the old JavaScript world, we would declare variables in a block of code, but where-ever we declared that variable, the actual declaration was “hoisted” to the top of the function.  In fact, there never was anything like block scope.  Just function scope. </p>\n<p>This caused one particular problem that was rather common.  If I created a for&#x2F;next loop that called an asynchronous function, the asynchronous function would use the last value of the for&#x2F;next incrementer. </p>\n<p>The primary benefit of using <code>let</code> or <code>const</code> is that they effectively provide for block level scope so that we can write code like I described above and it will behave in the way we would expect from other languages. </p>\n<p>Unless you explicitly want to avoid block level scope, you should never use the <code>var</code> keyword to declare a variable in TypeScript.  This falls under the “just because you can, doesn’t mean you should” rule. </p>\n<p>In my experience, you will use <code>const</code> more often than <code>let</code>.  Here’s the difference. </p>\n<p>If you are declaring a variable that will only ever be assigned one value, you declare it using <code>const</code>.  What isn’t obvious is that changing the contents of an object does not change the value of an object.  So, doing something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myArray = [];  </span><br><span class=\"line\">myArray.<span class=\"title function_\">push</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Would be more valid as:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myArray = [];</span><br><span class=\"line\">myArray.<span class=\"title function_\">push</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Because pushing something into the array doesn’t change the value, or the pointer, of myArray.  It only changes the content of the array.</p>\n<p>You DID know that, right?</p>\n<h2 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h2><p>The main thing that makes TypeScript what it is, is that it allows us to type-check our code.  You don’t have to.  In fact, there are times when this might get in your way.  But, you have a choice. </p>\n<p>By default, TypeScript uses inference when it can to figure out the type of a variable.  This is important because I can bet one of the first errors you are going to see is a type mismatch error. You might try to do something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> v = <span class=\"string\">&#x27;abc&#x27;</span>;  </span><br><span class=\"line\"><span class=\"comment\">// some other code, and then ...  </span></span><br><span class=\"line\">v = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure>\n\n<p>That’s not going to compile. But you could do something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">v</span>: <span class=\"built_in\">any</span> = <span class=\"string\">&#x27;abc&#x27;</span>;  </span><br><span class=\"line\"><span class=\"comment\">// some other code, and then …  </span></span><br><span class=\"line\">v = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure>\n\n<p>That is telling the TypeScript compiler that we are OK with the variable v being any type. </p>\n<p>Other than the Classes and Interfaces that are either part of JavaScript or that we, or a third party, create, there are boolean, number, string, array, enum, any, void, tuple, never, null, and undefined. </p>\n<p>I’m going to assume that until I mentioned “tuple” you were ok with the types I mentioned.  So, let’s dig a little deeper on those last few. </p>\n<p>A tuple is a type that wars have been fought over.  Well, it isn’t that bad, but it is controversial. What we care about here is why you might want to use it.  It allows you to return a highly defined array or object directly into local variables.  That is, I can specify that a function returns an array or object that has a specific number of elements and each element is a specific type.  It has its uses, but it is probably one of the types that you want to reserve for special cases.  It saves you from having to access array elements or object fields or properties.  That’s the long and short of it. </p>\n<p>The never type allows you to specify that a function never returns.  There are two reasons why this would be true.  First, you’ve entered an infinite loop or second, you’ve thrown an exception.  Again, not something you are likely to use. </p>\n<p>You can also explicitly specify that a type can only handle null or undefined.  But what is much more likely is that you specify that you don’t want to use these.</p>\n<h2 id=\"Combined-Types\"><a href=\"#Combined-Types\" class=\"headerlink\" title=\"Combined Types\"></a>Combined Types</h2><p>So, let’s say you have a parameter or a variable that accepts multiple types.  You could just use any and go on your merry way.  But, wouldn’t it be nice if you could say, “I want this type to be either a string or a number.”?  Well, you can.  Simply by using the pipe operator between types.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">v</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Remember our example above where we said we needed a variable to be either a number or a string, the above syntax is a much better way of typing the variable to do this because it limits the variable to exactly the types that we want to allow rather than letting anything be assigned to it.</p>\n<p>Amd we can take this even further.  Let’s say we want to make sure that the variable is a particular class type that we also want to be sure implements a specific interface.  For that, we use the ampersand.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">v</span>: <span class=\"title class_\">Person</span> &amp; <span class=\"title class_\">Manager</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And while we are at it, what if we want to make sure that a variable only accepts string types that are not null or undefined?  By default, the compiler allows null and undefined to be assigned to anything, but there is a compiler switch that turns that feature off.  If you use the compiler switch and you want to allow null or undefined, you’ll need to use the pipe operator to include them.</p>\n<h2 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h2><p>For the most part, a TypeScript Interface looks a lot like an Interface in other languages. However, there are some differences that you need to know about. </p>\n<p>First, you don’t need to create a class that implements an Interface and then instantiate an object from that class in order to have an object of a particular interface type.  Actually, if you stop to think about it, this makes sense.  The problem is, there are a lot of people teaching TypeScript who are still using interfaces this way. </p>\n<p>But, in JavaScript, you can create an Object Literal.  TypeScript adds to JavaScript.  So, it only makes sense that TypeScript also allows you to create an Object Literal.  So, let’s say you have a parameter that takes an interface of type Name.  As long as the object we pass in conforms to the interface definition, the code will compile.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// interface Name with firstName and lastName as properties  </span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// function that takes a Name as a parameter  </span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"params\">name: Name</span>) &#123;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// call the function with an object literal  </span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(&#123;<span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Dave&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Bush&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Optional\"><a href=\"#Optional\" class=\"headerlink\" title=\"Optional\"></a>Optional</h2><p>We’ve been talking a lot about Parameters and Interfaces.  In both cases, we often want to define a parameter or a property as optional. </p>\n<p>For example, most people have a middle name, but our Name interface doesn’t account for that.  If we added it, we’d want to make it optional since it is possible for that to not be included.  On the other hand, we don’t want people added whatever they want. </p>\n<p>The way we make sure a parameter is optional is by placing a question mark after the property, but before the colon.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// middleName is optional</span></span><br><span class=\"line\">  middleName?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// foo() now takes an optional name parameter  </span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"params\">name?: Name</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>I would highly recommend that you tweak your tslint rules to require type annotations on all of your code.  Out of the box, the tslint rules that come with the Angular-CLI are a bit too lax in this area.</p>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>The <code>this</code> keyword in JavaScript is probably the hardest concept to fully understand.  And while recent advances in the language have helped tame it, it still doesn’t fully conform to the model most people have in their mind of how an Object-Oriented language should behave.  This is because, of course, JavaScript isn’t an Object-Oriented language.  It is a Prototypal language.  There are similarities, but they aren’t they same. </p>\n<p>TypeScript, on the other hand, is more object oriented.  I say “more” because it is really only object-oriented in the places where you are taking advantage of TypeScript specific features, such as a Class.  If you create an object literal that has an inline function, you are back in JavaScript land. </p>\n<p>In a class, if you have a method that calls another method in the same class, you must use the <code>this</code> keyword to go after it.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SomeClass</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">someFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"title function_\">someOtherFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"title function_\">someFunction</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This may take some getting used to if you are coming from JavaScript where you can call any function that is in scope without using the this keyword.  But, I can assure you that having this rule imposed on the language solves a lot of bugs caused the “this” side effects, that it is well worth the adjustment.</p>\n<h2 id=\"Arrow-Functions\"><a href=\"#Arrow-Functions\" class=\"headerlink\" title=\"Arrow Functions\"></a>Arrow Functions</h2><p>Fat Arrow functions, Arrow Functions, or Lambda Expressions all refer to the same concept.  They are probably one of my favorite features of the latest version of TypeScript and JavaScript both because they allow me to write code with fewer characters and because they solve a very real problem that has confused JavaScript developers for years. </p>\n<p>First the problem. </p>\n<p>If you’ve written any serious application using JavaScript, one of the following scenarios will be familiar to you. </p>\n<p>Any time you create an event handler, when the function gets called, the ‘this’ keyword isn’t pointing to the object you are in, it is pointing to the context of the event that fired it.  This could be null, a windows object, or something else.  We often get around this problem by using the bind() function to wrap the context of the function. </p>\n<p>What the arrow functions in TypeScript do is that they form a closure around the current ‘this’ context by taking advantage of how TypeScript is compiled into JavaScript. </p>\n<p>You see, when your TypeScript code is compiled, every place you referred to <code>this</code> it refers to a variable named <code>_this</code>.  Inside the arrow function, they refer to this same <code>_this</code> instead of creating a new one or looking at the context the function was called from. </p>\n<p>The main difference between a regular anonymous function and an arrow function is that we leave out a lot of junk. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newFunc = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something with x  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Compared to:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">newFunc</span> = (<span class=\"params\">x</span>) =&gt; &#123;  </span><br><span class=\"line\">  <span class=\"comment\">// do something with x  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But wait! There’s more.  </p>\n<p>If you only have one line, you can remove the curly braces. </p>\n<p>Let’s say you want to create an arrow function that returns the square of some number.  You could write this as:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">newFunct</span> = (<span class=\"params\">x</span>) =&gt; x * x;</span><br></pre></td></tr></table></figure>\n\n<p>Fat arrow functions return the value from the function automatically.</p>\n<h2 id=\"Decorators\"><a href=\"#Decorators\" class=\"headerlink\" title=\"Decorators\"></a>Decorators</h2><p>I don’t want to spend a lot of time on decorators.  If you’ve been using .NET, you’ll recognized decorators as “Attributes”. Java programmers are probably used to calling them annotations. </p>\n<p>Effectively, what a decorator does is that it adds additional information to a function, field, or class that marks it for special use.  While you can create your own decorators, we will only concentrate on implementing decorators that have already been defined for us. </p>\n<p>You’ll know that something is a decorator because it is a symbol prefixed with the at symbol.</p>\n<h2 id=\"Import-and-Export\"><a href=\"#Import-and-Export\" class=\"headerlink\" title=\"Import and Export\"></a>Import and Export</h2><p>Last in our discussion of TypeScript are the keywords import and export. </p>\n<p>Now, why do we need these keywords? </p>\n<p>If you are familiar with other languages such as C#, VB.NET or Java, you will recognize the concept of Import as the keyword that says, “Tell this file I’m going to reference code from that other file over there in here.”  And then when we compile our code, the compiler makes sure that we are using that other code correctly. </p>\n<p>A similar thing happens in TypeScript, but in Angular we get the added benefit of also being able to use this information so that we only include the code we are actually using. </p>\n<p>You see, in the old days, we would suck in entire JavaScript libraries just because we were using a few functions.  But now with concepts like “Tree Shaking” that we will cover later, we can look at the actual code we are referencing and only include that code.  This reduces the size and number of files that our customer has to download to use our applications. </p>\n<p>The export keyword, on the other hand, tells the compiler what functions, classes, and interfaces external code is able to reference.  If it isn’t exported, it is only available to code in the file it was declared in.</p>\n<h2 id=\"More\"><a href=\"#More\" class=\"headerlink\" title=\"More\"></a>More</h2><p>I have barely scratched the surface of TypeScript here.  There is a lot more available in the language than what I’ve introduced to you here and knowing the parts I’ve left out will ultimately make you a better programmer and make your code more stable.  But the parts I have introduced will get you going and will make you familiar with the parts you will see most often.</p>\n",
            "tags": [
                "angular",
                "typescript"
            ]
        },
        {
            "id": "http://davembush.github.com/this-one-tweak-improved-my-angular-code/",
            "url": "http://davembush.github.com/this-one-tweak-improved-my-angular-code/",
            "title": "This One Tweak Improved my Angular Code",
            "date_published": "2017-09-12T10:30:10.000Z",
            "content_html": "<p>I made a tweak to my Angular code process over the last month or so that has resulted in greater productivity in my development environment and fewer bugs. </p>\n<p>Now, I didn’t make this change because I thought it would improve my productivity.  At least that wasn’t the primary reason.  I made the change because I thought it would reduce the chance of introducing bugs into my code.  And while it does reduce the number of bugs in my code, the result has been generally improved productivity. </p>\n<p>What is this great secret? <figure><img src=\"/uploads/2017/09/2017-09-12.jpg\" title=\"This One Tweak Improved my Angular Code\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/sheila_sund/36859429262/\">docoverachiever</a> via <a href=\"//visualhunt.com/re/d75fb5\">Visual Hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h2><p>Before I tell you the secret, I want to tell you how I got here.  Yesterday, I was listening to a podcast that was reviewing another framework with the creators of that framework.  All during the podcast they were comparing their framework to Angular and React.  Fine, compare and contrast is good.  Except, they were comparing and contrasting something they knew really well, their framework, to something they had a lesser understanding of.  So, in the process, one of their complaints about Angular was that Angular doesn’t take full advantage of TypeScript.  Or, it doesn’t take as full advantage of TypeScript as their framework does. </p>\n<p>As I listened to this I realized that most Angular developers probably aren’t taking as full advantage of TypeScript as they could.  I think this is by design.  But, it is too our hurt.  Fortunately, we can turn things on that Angular leaves turned off.</p>\n<h2 id=\"Type-Safety\"><a href=\"#Type-Safety\" class=\"headerlink\" title=\"Type Safety\"></a>Type Safety</h2><p>Now, if you are like most developers I know, you just want to get your code working.  And so, you don’t pay attention to things like Linters.  And you have learned enough TypeScript to get your code working.  This is especially true of those who are coming from “old school” JavaScript. </p>\n<p>Now, I’m going to challenge you to do two things.  First, use TSLint.  Next, make the rules as rigid as possible.</p>\n<h3 id=\"TSLint\"><a href=\"#TSLint\" class=\"headerlink\" title=\"TSLint\"></a>TSLint</h3><p>If you are using the Angular CLI, TSLint is built in.  To run TSLint, all you need to do is to run </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run lint</span><br></pre></td></tr></table></figure>\n\n<p>On the command line. </p>\n<p>This will verify that you haven’t made any really stupid syntax mistakes by default. </p>\n<p>Next, the editor you are using should have a way of hooking TSLint up to the editor so that you can tell you have a problem in your code as you write your code.  If your editor doesn’t have a way of doing this, find a new editor.  The two editors I recommend are VS Code and WebStorm.  Each have their own strengths and weaknesses.</p>\n<h3 id=\"Rules\"><a href=\"#Rules\" class=\"headerlink\" title=\"Rules\"></a>Rules</h3><p>The rules that come with the Angular CLI are, in my opinion, too relaxed.  They are strong enough to not annoy JavaScript programmers.  They protect you from making really stupid TypeScript programming errors.  But, they don’t help you write code that you have a high assurance will work correctly the first time without running it. </p>\n<p>We are going to fix this. </p>\n<p>The main thing we want to do is that we want to tighten up type checking.  So, instead of using the defaults that either let variables be anything or default them to the type they are assigned to when they are declared if that can be determined, we are going to force variables to be declared.</p>\n<h2 id=\"Why-This-Helps\"><a href=\"#Why-This-Helps\" class=\"headerlink\" title=\"Why This Helps\"></a>Why This Helps</h2><p>When I first made this kind of change, I was doing it to <a href=\"/typescript-functional-programming/\">improve my NgRX code</a>.  Once I did that, I immediately saw that by enforcing type safety, I could easily tell if the functions I was using in my Observable chains was going to end up returning what I thought it was going to.  This means, I can write my code and if I don’t get any tslint warnings in my editor, I can have a high degree of certainty that the code will run correctly once I compile it and run it. </p>\n<p>Maybe you think type safety is for sissies.  OK then, you can continue to run your code multiple times to find the same error that I can find before I ever run the code.  I think we all know who will be more productive. </p>\n<p>Once I saw this productivity gain, I determined to add type safety to my entire project.  This took much less time than you would expect and I was able to apply the rules incrementally so that I was not disrupting the progress of the project I was working on.</p>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><p>The implementation is actually pretty simple.  The first thing you are going to want to do is that you’ll want to change the npm lint script from: </p>\n<p><code>&quot;lint&quot;: &quot;ng lint&quot;</code> </p>\n<p>to </p>\n<p><code>&quot;lint&quot;: &quot;ng lint --type-check --fix&quot;</code> </p>\n<p>This does two things.  First it allows us to change to tslint rules to use rules that require type checking.  And second it will cause the tslint to fix any problems it finds that it can fix automatically. </p>\n<p>Next, you’ll want to install tslint-immutable, which will allow us to add in rules for immutability that I mentioned in my previous post that I linked to above.  As of this writing, I’m using version 4.1.0 </p>\n<p><code>npm install --save-dev tslint-immutable</code> </p>\n<p>Next, open up tslint.json which should be at the root of your application. </p>\n<p>Inside this file, right before the rulesDirectory section, add this code: </p>\n<p><code>&quot;extends&quot;: [&quot;tslint-immutable&quot;],</code> </p>\n<p>This will allow us to access the immutable rules we just added with <code>npm install</code>.</p>\n<h3 id=\"typedef\"><a href=\"#typedef\" class=\"headerlink\" title=\"typedef\"></a>typedef</h3><p>The first thing we want to do is that we want to force everything to have a type definition. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;typedef&quot;</span>: [ <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;call-signature&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;arrow-call-signature&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;parameter&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;arrow-parameter&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;property-declaration&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;variable-declaration&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;member-variable-declaration&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;object-destructuring&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;array-destructuring&quot;</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n\n<p>The one place where you might have a problem is that by default, the no-inferable-types rule is turned on, which is what we want.  Currently, tslint is not smart enough to know that no-inferable-types should take precedence over typedef.  So, you’ll need to occasionally exclude the rule using the <a href=\"//palantir.github.io/tslint/usage/rule-flags/\">tslint comment exclusion</a>.  I exclude the typedef when I run into this problem. </p>\n<p>If you are interested, you can google each of the typedef declarations (rather than linking to them and have the links go stale).</p>\n<h3 id=\"no-any\"><a href=\"#no-any\" class=\"headerlink\" title=\"no-any\"></a>no-any</h3><p>Now that we are forcing everything to have a type definition, the next thing you want to do is that you’ll want to disallow using “any” as a type definition.  Otherwise, why force the type definition at all?  I’d love to be able to disallow “object” as well, but there is currently no definition for that so until someone creates that rule, you’ll just have to use discipline.</p>\n<p><code>&quot;no-any&quot;: true,</code></p>\n<p>You may complain that sometimes you want to have the variable really be anything.  Anything?  Really?  I bet most of the time what you really want to be able to do is that you’ll want to define the variable as one of two, maybe three types.  You can achieve this definition as of TypeScript 2.4, by using the pipe operator.</p>\n<p><code>var stringOrNumber: string | number;</code></p>\n<h3 id=\"no-unused-variable\"><a href=\"#no-unused-variable\" class=\"headerlink\" title=\"no-unused-variable\"></a>no-unused-variable</h3><p>To keep your code clean, the next rule you want to enable is to disallow creating variables that you aren’t using.  This will have the side effect of cleaning up your import statements as well. </p>\n<p><code>&quot;no-unused-variable&quot;: true,</code> </p>\n<p>Those are all the rules I use that impact type safety.  Here are a few more you might want to consider adding.</p>\n<h3 id=\"Cyclomatic-Complexity\"><a href=\"#Cyclomatic-Complexity\" class=\"headerlink\" title=\"Cyclomatic Complexity\"></a>Cyclomatic Complexity</h3><p>Cyclomatic Complexity is a measure of how complicated your functions and methods are.  While the default implementation for this is 20, I find that if I’ve written a function that is that complex, even I have trouble understanding it any more.  While keeping my complexity lower than 10 contributes to extremely readable code.  Yes, there are times when there really isn’t any good way of breaking the code into smaller chunks.  But that is rare and code comment exclusions will let you handle those exceptions. </p>\n<p><code>&quot;cyclomatic-complexity&quot;: [true, 10],</code></p>\n<h2 id=\"Optional-Rules\"><a href=\"#Optional-Rules\" class=\"headerlink\" title=\"Optional Rules\"></a>Optional Rules</h2><p>Some other rules you might want to consider adding in that could improve your code include:</p>\n<h3 id=\"array-type-generic\"><a href=\"#array-type-generic\" class=\"headerlink\" title=\"array-type generic\"></a>array-type generic</h3><p>Coming from a C# background, I prefer to define my arrays as Array<T> instead of T[].  By default nothing is defined.  If it is just you working on the code, it probably doesn’t matter than much.  But on a team, I find consistency useful. </p>\n<p><code>&quot;array-type&quot;: [true, &quot;generic&quot;],</code></p>\n<h3 id=\"readonly-array\"><a href=\"#readonly-array\" class=\"headerlink\" title=\"readonly-array\"></a>readonly-array</h3><p>For my NgRX code, I like to have readonly-array turned on to ensure immutability.  I’ve found that I rarely need to turn this off in the rest of my code since NgRX is where I would be mutating anything that isn’t local to a function.  So, I just turn this rule on globally. </p>\n<p><code>&quot;readonly-array&quot;: [true, &quot;ignore-local&quot;],</code></p>\n<h2 id=\"Final-Notes\"><a href=\"#Final-Notes\" class=\"headerlink\" title=\"Final Notes\"></a>Final Notes</h2><p>I mentioned above that if you are using TypeScript 2.4.n, you can use the pipe operator to combine types.  You also get stronger type checking if you use that version.  However, if you are using codelyzer, as of this writing, you’ll have trouble if you use TypeScript 2.4.n with a version of Codelyzer greater than 3.0.1.  I keep trying the newer versions to see if this issue has been corrected.  Anyhow, your mileage may vary moving your code to TypeScript 2.4.n.</p>\n<h2 id=\"My-TSLint-file\"><a href=\"#My-TSLint-file\" class=\"headerlink\" title=\"My TSLint file\"></a>My TSLint file</h2><p>For those who are curious, my full tslint.json file is below. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;extends&quot;</span>: [<span class=\"string\">&quot;tslint-immutable&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;rulesDirectory&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;node_modules/codelyzer&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;rules&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;typedef&quot;</span>: [<span class=\"literal\">true</span>, </span><br><span class=\"line\">            <span class=\"string\">&quot;call-signature&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;arrow-call-signature&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;parameter&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;arrow-parameter&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;property-declaration&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;variable-declaration&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;member-variable-declaration&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;object-destructuring&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;array-destructuring&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;array-type&quot;</span>: [<span class=\"literal\">true</span>, <span class=\"string\">&quot;generic&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;readonly-keyword&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;readonly-array&quot;</span>: [<span class=\"literal\">true</span>, <span class=\"string\">&quot;ignore-local&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;no-let&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-any&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;cyclomatic-complexity&quot;</span>: [<span class=\"literal\">true</span>, <span class=\"number\">10</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;no-unused-variable&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;arrow-return-shorthand&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;callable-types&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;class-name&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;comment-format&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-space&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;curly&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;eofline&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;forin&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;import-blacklist&quot;</span>: [<span class=\"literal\">true</span>, <span class=\"string\">&quot;rxjs&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;import-spacing&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;indent&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;spaces&quot;</span>,</span><br><span class=\"line\">            <span class=\"number\">4</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;interface-over-type-literal&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;label-position&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;max-line-length&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"number\">140</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;member-access&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;member-ordering&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;static-before-instance&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;variables-before-functions&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;no-arg&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-bitwise&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-console&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;debug&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;info&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;time&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;timeEnd&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;trace&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;no-construct&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-debugger&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-duplicate-super&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-duplicate-variable&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-empty&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-empty-interface&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-eval&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-inferrable-types&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-misused-new&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-non-null-assertion&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-shadowed-variable&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-string-literal&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-string-throw&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-switch-case-fall-through&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-unnecessary-initializer&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-trailing-whitespace&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-unused-expression&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-use-before-declare&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-var-keyword&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;object-literal-sort-keys&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;one-line&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-open-brace&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-catch&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-else&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-whitespace&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;prefer-const&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;quotemark&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;single&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;radix&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;semicolon&quot;</span>: [</span><br><span class=\"line\">            <span class=\"string\">&quot;always&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;triple-equals&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;allow-null-check&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;typedef-whitespace&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;call-signature&quot;</span>: <span class=\"string\">&quot;nospace&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;index-signature&quot;</span>: <span class=\"string\">&quot;nospace&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;parameter&quot;</span>: <span class=\"string\">&quot;nospace&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;property-declaration&quot;</span>: <span class=\"string\">&quot;nospace&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;variable-declaration&quot;</span>: <span class=\"string\">&quot;nospace&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;typeof-compare&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;unified-signatures&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;variable-name&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;whitespace&quot;</span>: [</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-decl&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-operator&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-separator&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;check-type&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;directive-selector&quot;</span>: [<span class=\"literal\">true</span>, <span class=\"string\">&quot;attribute&quot;</span>, <span class=\"string\">&quot;app&quot;</span>, <span class=\"string\">&quot;camelCase&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;component-selector&quot;</span>: [<span class=\"literal\">true</span>, <span class=\"string\">&quot;element&quot;</span>, <span class=\"string\">&quot;app&quot;</span>, <span class=\"string\">&quot;kebab-case&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;use-input-property-decorator&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;use-output-property-decorator&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;use-host-property-decorator&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-input-rename&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-output-rename&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;use-life-cycle-interface&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;use-pipe-transform-interface&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;component-class-suffix&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;directive-class-suffix&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;no-access-missing-member&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;templates-use-public&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;invoke-injectable&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "angular",
                "typescript"
            ]
        },
        {
            "id": "http://davembush.github.com/enforce-typescript-functional-programming/",
            "url": "http://davembush.github.com/enforce-typescript-functional-programming/",
            "title": "Enforce TypeScript Functional Programming",
            "date_published": "2017-07-25T10:30:00.000Z",
            "content_html": "<p>As consistent readers of this blog are aware, I’ve fallen in love with Functional Programming.  But I also live in a primarily Angular&#x2F;TypeScript world where some code is still Object Oriented and other code is more Functional in nature.  And while TypeScript lets you do some Functional things, I’ve found it hard to force functional concepts in TypeScript.  So, I’ve gone searching.  Wouldn’t it be great if there were some sort of flag you could set that said, “Hey compiler, I’m in ‘Functional’ mode now!”  And the compiler would make sure that you never used a conditional statement, never accessed hidden parameters, and never mutated state? </p>\n<p>Well, I think I’ve figured out some of how to manage all of this using nothing more than TypeScript and some TSLint rules. <figure><img src=\"/uploads/2017/07/2017-07-25.jpg\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/archer10/15127010075/\">archer10 (Dennis) 99M Views</a> via <a href=\"//visualhunt.com/re/52cd50\">VisualHunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by-sa/2.0/\"> CC BY-SA</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Immutability\"><a href=\"#Immutability\" class=\"headerlink\" title=\"Immutability\"></a>Immutability</h2><p>Several weeks ago, I demonstrated how to <a href=\"/really-use-ngrx-better/\">protect against immutability using freeze</a>.  But, wouldn’t it be better to catch immutability issues at compile time? </p>\n<p>There are a couple features in TypeScript that do just that. </p>\n<p>First, we can use the <code>readonly</code> keyword on a field to ensure that it doesn’t change.  And second, we can declare arrays using <code>ReadonlyArray</code>.  For this to be most useful, we are going to want to provide an interface for all of our data that needs to be immutable.  This is how I typically use NgRX.</p>\n<h2 id=\"Enforcing-Functional\"><a href=\"#Enforcing-Functional\" class=\"headerlink\" title=\"Enforcing Functional\"></a>Enforcing Functional</h2><p>Now, that is as far as it goes for support in TypeScript itself, as far as I am aware.  But, we can get more support by using TSLint.  If you are using the Angular-CLI, this gets installed when you create your project.  If you aren’t using the Angular-CLI, or you are using some other framework, you are on your own for getting that installed and setup. </p>\n<p>There are two problems we need to overcome in order to use TSLint to solve our “switch into Functional mode” issue.  First, is that we need a set of rules we can use.  The second is that we will need some way of isolating where those rules take effect. </p>\n<p>Fortunately, we can create a separate <code>tslint.json</code> file for each directory.  And since all of my Functional code is isolated to my NgRX state management stuff, I can put a file in that directory and it will take care of my Functional needs while leaving my normal <code>tslint.json</code> file for the rest of my code. </p>\n<p>The other thing you will want to do is that you’ll want to install <a href=\"//www.npmjs.com/package/tslint-immutable\">tslint-immutable.</a> </p>\n<p>tslint-immutable adds some rules specifically for immutability that are not included in the core implementation.  I love plugable systems. </p>\n<p>I’ll let you read the documentation on the site for the rules that it adds.  Who knows when you’ll be reading this and the package may have changed by the time you get here.</p>\n<h2 id=\"pre-commit-hooks\"><a href=\"#pre-commit-hooks\" class=\"headerlink\" title=\"pre-commit hooks\"></a>pre-commit hooks</h2><p>Having a good set of linting rules if of no use if they get ignored.  Right? </p>\n<p>Now, another package I install into my projects is pre-commit.  Be warned though.  If you are using Windows as your development computer, you’ll also need to install <a href=\"//gnuwin32.sourceforge.net/packages/coreutils.htm\">coreutils</a> because pre-commit assumes you are able to run bash. </p>\n<p>But of course, someone could comment out or remove the pre-commit hooks or otherwise force a commit.  This is why you also want a good code review process in place for your team.  Or better yet, a job that runs on your central repository that verifies that these precommit task have run successfully. </p>\n<p>When I review code, I check several items regularly.</p>\n<ul>\n<li>What changed and was it changed in a way consistent with how we want things coded.</li>\n<li>If something wasn’t coded correctly, is there a linting rule we can put in place to correct it?</li>\n<li>When I pull down the code, can I compile for production as well as for development mode?</li>\n</ul>\n<p>Point 2 is critical.  The more reviewing the computer can do for you the better off you’ll be.</p>\n<h2 id=\"Conditionals\"><a href=\"#Conditionals\" class=\"headerlink\" title=\"Conditionals\"></a>Conditionals</h2><p>What I haven’t been able to find is a rule that will prevent conditions from showing up inside of observable functions or their array cousins.  If you know of something, please let me know in the comments below.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>Now, a little code would be nice to flesh this all out.  So, this is what I’m currently using: </p>\n<p>First, the scripts and pre-commit sections from my package.json file: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng lint --type-check&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;pre-commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lint&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>And then the tslint that I put with my NgRX code: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;tslint-immutable&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;rulesDirectory&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;../../../node_modules/codelyzer&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* New rules to enable immutable checks */</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;typedef&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"keyword\">true</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"string\">&quot;call-signature&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;arrow-call-signature&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;parameter&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;arrow-parameter&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;property-declaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;variable-declaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;member-variable-declaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;object-destructuring&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;array-destructuring&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;readonly-keyword&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;readonly-array&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"keyword\">true</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;ignore-local&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;no-let&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;no-any&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">/* existing rules follow */</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "functional",
                "typescript",
                "tslint"
            ]
        },
        {
            "id": "http://davembush.github.com/accessing-private-fields-in-typescript/",
            "url": "http://davembush.github.com/accessing-private-fields-in-typescript/",
            "title": "Accessing Private Fields in TypeScript",
            "date_published": "2017-02-28T12:30:00.000Z",
            "content_html": "<p>Have you ever needed to access a private field in TypeScript? The most common place you may find yourself needing to do this is while writing a unit test. But, I also found myself needing to do this while using a JavaScript library where the field wasn’t declared in the type file for the library I was using.</p>\n<p>Now, suppose you could access those private fields effortlessly and easily. How valuable would that be to you?</p>\n<figure>![](/uploads/2017/02/image-3.png \"Accessing Private Fields in TypeScript\") Photo via [VisualHunt](//visualhunt.com/)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Unit-Test\"><a href=\"#Unit-Test\" class=\"headerlink\" title=\"Unit Test\"></a>Unit Test</h2><p>In general, when you write a unit test, you only want to access public fields for both the purposes of setting up your tests and for evaluating the success or failure of the tests.</p>\n<p>But, occasionally, this is not possible.</p>\n<p>Now, what most people don’t realize is that, unlike private members in JavaScript, where the members aren’t accessible, in TypeScript, the resulting JavaScript has the variables just as public as the public members. In fact, the only thing that makes a member private in TypeScript is the compiler. This means that this TypeScript code:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">member1</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ends up looking something like this in JavaScript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">member1</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">bar</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Which means that</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = v.<span class=\"property\">member1</span>;</span><br><span class=\"line\">v.<span class=\"title function_\">bar</span>();</span><br></pre></td></tr></table></figure>\n\n<p>Should be working code.</p>\n<p>But, if you type that code into JavaScript and try to compile it, it won’t compile. Which means you can’t write your unit test in TypeScript and access the private variables.</p>\n<p>Or can you?</p>\n<h2 id=\"TypeScript-is-just-JavaScript-with-Sugar\"><a href=\"#TypeScript-is-just-JavaScript-with-Sugar\" class=\"headerlink\" title=\"TypeScript is just JavaScript with Sugar\"></a>TypeScript is just JavaScript with Sugar</h2><p>One small little fact about TypeScript that we seem to forget is that it is just JavaScript with some sugar. What this means in practical terms is that, if we want to, or in this case, need to, we can write plain old boring JavaScript as part of our TypeScript code. And then the other little bit we tend to forget is that we can access a field using the name of the field as an indexer. That is, this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v.<span class=\"property\">member</span> = <span class=\"string\">&#x27;x&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>is functionally the same as this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v[<span class=\"string\">&#x27;member&#x27;</span>] = <span class=\"string\">&#x27;x&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And because it all compiles down to JavaScript, and the private fields are public JavaScript fields, we can use the named index to access the field.</p>\n<h2 id=\"JavaScript-Libraries\"><a href=\"#JavaScript-Libraries\" class=\"headerlink\" title=\"JavaScript Libraries\"></a>JavaScript Libraries</h2><p>Similarly, this past week I was working on finishing up some Angular 2 code. And one of my tests was failing. Even though the code was working in Chrome fine. The issue was that I was using PhantomJS which doesn’t have the latest JavaScript spec implemented, so it relies on polyfills. One of the polyfills I was using was not compressing the Regular Expressions that I was indirectly using correctly which resulting in the test throwing an exception.</p>\n<p>After tracking down the source of the problem for a day, I finally found a line at the bottom of the GitHub page that told me that I could turn the routine off by calling a function. And here is where the trouble begins.</p>\n<p>You see, I’m using an otherwise documented internal library that has a set of types already defined for it. This particular function is not a part of the types for this class. So, when I tried to call it, I got a compiler error.</p>\n<p>So, I pulled out the named index trick above and got the code to compile and ultimately got my test to run successfully. It all just requires that we think outside the box a bit and most any problem can be solved.</p>\n<h2 id=\"Addendum\"><a href=\"#Addendum\" class=\"headerlink\" title=\"Addendum\"></a>Addendum</h2><p>As TypeScript has matured, the trick above doesn’t work quite as directly as when I originally wrote this article.  Now, you need to assign the original variable to a type of Object before using the indexer method, or you can just cast your variable to an Object and use the indexer.  But typescript is now smart enough to know that the indexer is accessing a property that is private and it won’t let you at it.</p>\n",
            "tags": [
                "private",
                "testing",
                "typescript"
            ]
        },
        {
            "id": "http://davembush.github.com/amazing-angular2-dom-tips-tricks-and-warnings/",
            "url": "http://davembush.github.com/amazing-angular2-dom-tips-tricks-and-warnings/",
            "title": "Amazing Angular2 DOM Tips, Tricks, and Warnings",
            "date_published": "2017-01-17T12:30:00.000Z",
            "content_html": "<p>I’ve been working with Angular2 now since RC0 and I’ve learned quite a few things about Angular2 DOM tips, tricks, and warnings that you’ll want to pay attention to as you get started.</p>\n<figure>![](/uploads/2017/01/image.png \"Amazing Angular2 DOM Tips, Tricks and Warnings\")<figcaption>Photo credit: [Sister72](//www.flickr.com/photos/sis/196867770/) via [VisualHunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Avoid-DOM-Manipulation\"><a href=\"#Avoid-DOM-Manipulation\" class=\"headerlink\" title=\"Avoid DOM Manipulation\"></a>Avoid DOM Manipulation</h2><p>One of the first things you need to understand about how Angular2 works compared to AngularJS is that any DOM manipulation you do using Angular2 isn’t really manipulating the DOM. At least not directly. Everything that happens at the DOM level is a result of a state change in the component. When Angular2 realizes that the state has changed, it changes the DOM to reflect the change.</p>\n<p>What this means, generally, is that if you need to know about some state change that happened at the DOM level, you’ll want to track that change in your component class. Can you access the DOM directly from your code? Yes. And sometimes you might just have to. But you’ll produce code that is much easier to test if you avoid having your code reach up into the DOM to get current state information.</p>\n<p>You may have already heard about the experimental Web Workers support in Angular2. To make sure you can use this, it would be best to avoid direct DOM manipulation until we are sure the Web Workers implementation will be able to deal with this properly. What this all means in practical terms is that you’ll want to avoid using libraries such as jQuery to manipulate your code and instead replicate that behavior using native Angular2 calls.</p>\n<h2 id=\"Only-Generate-the-HTML-You-Need\"><a href=\"#Only-Generate-the-HTML-You-Need\" class=\"headerlink\" title=\"Only Generate the HTML You Need\"></a>Only Generate the HTML You Need</h2><p>On a similar note, you only want to render the HTML you’re going to need at any one time. Not everything all at once. This will allow your code to render much more efficiently.</p>\n<p>For example, if you have a menu that has dropdown menus, the temptation is going to be to render all the HTML the menu may need all at once and use JavaScript to show or hide the dropdowns as you mouse over them or click them. But with Angular2, you could use the *ngIf directive to include and exclude the menu option as you need them to show. This reduces the initial page size and simplifies your code. Been there, done that.</p>\n<p>By the way, there are other directives you’ll want to get familiar with, but *ngIf is probably the most often ignored because you are likely to try to use display:none to hide an element instead of just eliminating it from the DOM completely.</p>\n<h2 id=\"Minimize-Change-Detection\"><a href=\"#Minimize-Change-Detection\" class=\"headerlink\" title=\"Minimize Change Detection\"></a>Minimize Change Detection</h2><p>I was recently working on a component that displayed a nested array as a set of tabs and dropdown menus. Everything was working great but I wanted to check the CSS on the dropdown so I could make some adjustments. This is when I discovered that the HTML was being rewritten about once a second even though nothing had changed. I couldn’t see this on the main screen, but it became super evident when I opened the developer tools.</p>\n<p>Fortunately, I had already learned about OnPush change detection. So I was able to set my component to use Push notification:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">    templateUrl: <span class=\"string\">&#x27;template.html&#x27;</span>,</span><br><span class=\"line\">    changeDetection: ChangeDetectionStrategy.OnPush <span class=\"comment\">// &lt;===</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export <span class=\"keyword\">class</span> <span class=\"title\">View</span> ...</span><br></pre></td></tr></table></figure>\n\n<p>And now the component only re-renders when the data it is looking at changes.</p>\n<p>For Push notification to work correctly, all the data that the component is looking at has to be <a href=\"/what-if-everything-was-immutable/\">immutable</a> or an <a href=\"/reasons-to-use-rxjs-today/\">Observable</a>. These are both patterns you should become familiar with because any well architected Angular2 application will make significant use of both of these.</p>\n<h2 id=\"Accessing-the-Component-Container\"><a href=\"#Accessing-the-Component-Container\" class=\"headerlink\" title=\"Accessing the Component Container\"></a>Accessing the Component Container</h2><p>Another problem I recently had was that I wanted to use the class attributes from the container on a child component. The question I had trouble getting the answer to was, “just how to I access the container element?” This was very easy. It is always easy once you know the secret handshake.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.elementRef</span><br></pre></td></tr></table></figure>\n\n<p>There are various properties and methods hanging off that which might be useful to you. In my case, I wanted to go after the classes that had been attached and reattach them to the INPUT element that was a child of the component. So, I needed to use:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.elementRef.nativeElement.classList</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Accessing-Child-Elements\"><a href=\"#Accessing-Child-Elements\" class=\"headerlink\" title=\"Accessing Child Elements\"></a>Accessing Child Elements</h2><p>Similarly, you might want to access child elements from your code. This is much easier to find when you search the Internet.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ViewChild(<span class=\"string\">&#x27;input&#x27;</span>) input: ElementRef;</span><br></pre></td></tr></table></figure>\n\n<p>@ViewChild is an attribute that tells the Angular2 compiler to look for an element in the template with the variable named input. I’ll explain template variables in a bit. In the code above, I’m going after the INPUT element with a template variable named “input” so I typed it as ElementRef since I don’t have a specific class name for it.</p>\n<p>If you only have one unique element, you can just use code that looks more like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ViewChild(ElementClassName) variableName: ElementClassName;</span><br></pre></td></tr></table></figure>\n\n<p>Of course, you’ll want to make sure you imported <code>ElementClassName</code> for this to work. In this case, I’m going after a specific type of element so I type the variable as that type. Now my typescript code knows what properties, fields, and methods I have available.</p>\n<h2 id=\"Template-Variables\"><a href=\"#Template-Variables\" class=\"headerlink\" title=\"Template Variables\"></a>Template Variables</h2><p>As I mentioned above, you can create template variables to allow you to access your child elements from your typescript code. But you can use them for other purposes as well. To create a template variable, just put a hash in front of the variable name you want to use.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">firstName</span> <span class=\"attr\">...</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Now you can use this in your typescript using ViewChild() as explained above, or you can use it in your template as a regular variable.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123; &#123;firstName.value&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Use-a-Model-Driven-Approach\"><a href=\"#Use-a-Model-Driven-Approach\" class=\"headerlink\" title=\"Use a Model Driven Approach\"></a>Use a Model Driven Approach</h2><p>If you are coming from AngularJS, you may be tempted to use what is commonly referred to as a Template Driven approach. This is approach that relies no “Two-Way” data-binding to update the data in the typescript code to the fields in your template. While this works for a lot of simple apps, you never know when a simple app will turn into a complex app and your Template based approach will quickly become insufficient.</p>\n<p>No, what you want to use is the Model Driven approach. This approach gives you A LOT more control over what we typically are attempting to do in our forms and scales well as the complexity of our forms increases.</p>\n<p>I’ve written a lot more about this in my post on <a href=\"/awesome-angular2-architecture-options-and-opinions/\">Angular2 Architecture</a>.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Obviously, there is a lot to learn. If you keep using Angular2 like you’ve been using AngularJS, you are going to run into a lot of difficulties. It pays to learn how a system works prior to using it for a real application.</p>\n<p>What have you learned along the way? Leave a comment.</p>\n",
            "tags": [
                "angular",
                "typescript",
                "DOM"
            ]
        },
        {
            "id": "http://davembush.github.com/unit-testing-an-angular-2-cli-project/",
            "url": "http://davembush.github.com/unit-testing-an-angular-2-cli-project/",
            "title": "Unit Testing an Angular 2 CLI Project",
            "date_published": "2016-11-23T00:30:00.000Z",
            "content_html": "<p>This week we want to continue our series about Angular 2 by looking at the Unit Testing capabilities that Angular 2 provides for us. What we want to cover today is:</p>\n<ul>\n<li>Tweaking Karma to avoid using the Browser Window</li>\n<li>Code Coverage</li>\n<li>Tips to testing components</li>\n</ul>\n<p>This article was written using Angular CLI version 1.0.0-beta.20-4 (Tip, if you are upgrading on windows, <code>rm –rf node_modules dist temp</code> just means to delete the three directories. You can do that part manually, or install bash for Windows and run the command in bash.)</p>\n<figure>![](/uploads/2016/11/image-3.png \"Unit Testing an Angular 2 CLI Project\")<figcaption>Photo credit: [jimmiehomeschoolmom](//www.flickr.com/photos/jimmiehomeschoolmom/4427775569/) via [VisualHunt.com](//visualhunt.com) / [CC BY-NC-SA](//creativecommons.org/licenses/by-nc-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Tweaking-Karma\"><a href=\"#Tweaking-Karma\" class=\"headerlink\" title=\"Tweaking Karma\"></a>Tweaking Karma</h2><p>Open up the project we’ve been working on.</p>\n<ul>\n<li><a href=\"/getting-started-angular-2/\">Getting Started With Angular 2</a></li>\n<li><a href=\"https://medium.com/@davembush/adding-css-and-javascript-to-an-angular-cli-project-2b843a8283f3\">Adding CSS and JavaScript to an Angular CLI Project</a></li>\n</ul>\n<p>Drop into command line mode and run <code>ng test</code> The first thing you will notice is that this brings up the Chrome browser to run your test. I don’t know about you, but I really dislike having a browser window up. I have enough windows running on my screen as it is. This is the first thing we need to fix. To do this we are going to install PhantomJS.</p>\n<p><code>npm install --save-dev phantomjs-prebuilt</code></p>\n<p>Then, we need to tell karma to use PhantomJS. This is a two step process. First, we install the karma phantomjs runner <code>npm install --save-dev karma-phantomjs-launcher</code> Next, we modify the karma.conf.js file Change <code>require(&#39;karma-chrome-launcher&#39;),</code> and <code>browsers: [&#39;Chrome&#39;],</code> To <code>require(&#39;karma-phantomjs-launcher&#39;),</code> and <code>browsers: [&#39;PhantomJS&#39;],</code> Last, since we are not using the browser, we will need a better reporting mechanism.</p>\n<p>To do this we will install spec reporter.</p>\n<p><code>npm install --save-dev karma-spec-reporter</code></p>\n<p>and we replace this line in karma.conf.js</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reporters<span class=\"punctuation\">:</span> config.angularCli &amp;&amp; config.angularCli.codeCoverage</span><br><span class=\"line\">          ? <span class=\"punctuation\">[</span>&#x27;progress&#x27;<span class=\"punctuation\">,</span> &#x27;karma-remap-istanbul&#x27;<span class=\"punctuation\">]</span></span><br><span class=\"line\">          <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>&#x27;progress&#x27;<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>with</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reporters<span class=\"punctuation\">:</span> config.angularCli &amp;&amp; config.angularCli.codeCoverage</span><br><span class=\"line\">          ? <span class=\"punctuation\">[</span>&#x27;spec&#x27;<span class=\"punctuation\">,</span> &#x27;karma-remap-istanbul&#x27;<span class=\"punctuation\">]</span></span><br><span class=\"line\">          <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>&#x27;spec&#x27;<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>And we add a require line at the top of the file with the other requires</p>\n<p><code>require(&#39;karma-spec-reporter&#39;),</code></p>\n<p>Now, when we run <code>ng test</code> We get a nice text report in our terminal windows instead of the browser popping up.</p>\n<h2 id=\"Code-Coverage\"><a href=\"#Code-Coverage\" class=\"headerlink\" title=\"Code Coverage\"></a>Code Coverage</h2><p>To get a code coverage report for our test use the command ng test –cc The code coverage files will end up in a directory named ‘coverage’ hanging off the root of your project. You can view the coverage&#x2F;index.html file to see how well your files are covered.</p>\n<h2 id=\"Testing-Components\"><a href=\"#Testing-Components\" class=\"headerlink\" title=\"Testing Components\"></a>Testing Components</h2><p>For the purposes of this article, I’m going to assume you have some familiarity with creating Jasmine tests. If you don’t the documentation for Jasmine is pretty easy to understand.</p>\n<p>But what I do want to cover here is how we test components.</p>\n<p>If you open up the <code>app.component.spec.ts</code> file, you’ll notice a <code>TestBed</code> class that gets used quite a bit. Since your test isn’t going to test modules because they only package our other code together, you need some way of faking that out so you can test the components. To do that, you use</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">TestBed</span>.<span class=\"title function_\">configureTestingModule</span>( &#123; <span class=\"attr\">declarations</span>: [ <span class=\"title class_\">AppComponent</span> ] &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Which just sets up the declarations you need to reference the component you need to test. You can put anything in this block that you would normally put in your module definition.</p>\n<p>Another <code>TestBed</code> method you’ll see is</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">TestBed</span>.<span class=\"title function_\">createComponent</span>()</span><br></pre></td></tr></table></figure>\n\n<p>which you probably have guessed, creates an instance of the module so you can test it. The object it creates has a <code>debugElement</code> property hanging off of it. There are two properties that hang off this object that you’ll make use of a lot. <code>componentInstance</code> is the actual instance of the component that you created. Any properties and methods that your component has will be available off of <code>componentInstance</code>.</p>\n<p>The other object that will be available is <code>nativeElement</code>. This is the DOM element that the component renders to and you can use <code>querySelector(cssSelectorGoesHere)</code> to select the first element matches the selector or <code>querySelectorAll(cssSelectorGoesHere)</code> to retrieve an array of elements that match.</p>\n<p>Of course, a test isn’t any good if you don’t make changes to the component and test for them. And for that we have <code>detectChanges()</code>. You’ll see that being used in the third test. You’ll want to use that before you <code>expect()</code> anything.</p>\n<h2 id=\"Ready-Set-…\"><a href=\"#Ready-Set-…\" class=\"headerlink\" title=\"Ready, Set, …\"></a>Ready, Set, …</h2><p>Now that we have some way of testing our code, we can actually begin to write so. Don’t forget to subscribe to the email I sent out so you don’t miss the next article in this series.</p>\n<p>Code so far is located at <a href=\"//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step2\">https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step2</a></p>\n",
            "tags": [
                "unit test",
                "angular",
                "javascript",
                "typescript"
            ]
        }
    ]
}