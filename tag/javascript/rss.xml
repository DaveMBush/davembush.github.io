<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;javascript&#34; tag</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Tue, 05 Sep 2017 06:30:54 -0400</pubDate>
        <lastBuildDate>Tue, 05 Sep 2017 06:30:54 -0400</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/thinking-in-javascript/</guid>
            <title>Thinking in JavaScript</title>
            <link>http://davembush.github.com/thinking-in-javascript/</link>
            <category>javascript</category>
            <category>mvvm</category>
            <category>redux</category>
            <category>MVC</category>
            <category>NgRX</category>
            <pubDate>Tue, 05 Sep 2017 06:30:54 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last week I’ve gradually come to the realization that the fundamental reason why most people have trouble with JavaScript is because it doesn’t fit their mental model of how programming should be done.  This isn’t to say that most programmers don’t manage to achieve their end goal.  But if you sit back and take an objective look at the code we end up writing, you have to admit, the code ends up being quite ugly. &lt;/p&gt;
&lt;p&gt;Now, this isn’t a dig at the way we’ve been doing things.  We’ve all been doing the best we can with what we have.  But, the JavaScript world has progressed and there is a better mental model that has developed and should even be expanded which will allow us to develop more complex and feature rich applications now and well into the future. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/09/2017-09-05.jpg&#34; title=&#34;Thinking in JavaScript&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/froderik/8283727226/&#34;&gt;freddie boy&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/fb4c57&#34;&gt;Visual Hunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by-sa/2.0/&#34;&gt; CC BY-SA&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Where-We’ve-Been&#34;&gt;&lt;a href=&#34;#Where-We’ve-Been&#34; class=&#34;headerlink&#34; title=&#34;Where We’ve Been&#34;&gt;&lt;/a&gt;Where We’ve Been&lt;/h2&gt;&lt;p&gt;I’ve been saying for years that the thing that holds most programmers back is that they always want to treat whatever new thing they are using like the last thing they were using.  And nowhere has this displayed itself more apparently than with JavaScript. &lt;/p&gt;
&lt;p&gt;Take the most obvious of examples.  Everyone knows, or should know by now, that JavaScript is not really object-oriented.  And yet, we’ve been trying to force JavaScript to BE object-oriented pretty much from the beginning.  This hasn’t been such a big problem, although one could argue that by trying to make JavaScript object-oriented, we’ve prevented it from being able to do some of the things it does best. &lt;/p&gt;
&lt;p&gt;Where we really run into trouble is with the event based, and often asynchronous nature of JavaScript. Think about this.  For years, we’ve been trying to synchronize something that is inherently asynchronous.  And this is where the real trouble begins. &lt;/p&gt;
&lt;p&gt;First, we had call back. Then promises. Now Observables. Soon async and await. And while callbacks are how the asynchronous nature of JavaScript is handle under the hood, the others are attempts to tame the asynchronous beast.  Especially async and await.&lt;/p&gt;
&lt;h2 id=&#34;Why&#34;&gt;&lt;a href=&#34;#Why&#34; class=&#34;headerlink&#34; title=&#34;Why?&#34;&gt;&lt;/a&gt;Why?&lt;/h2&gt;&lt;p&gt;Now, this is where we are. Constantly trying to make JavaScript be something it isn’t. But, why is this? &lt;/p&gt;
&lt;p&gt;I believe it is because we are trying to impose models onto JavaScript that were useful in our desktop and server-side applications.  MVC, MVVM, Object-Oriented, and others all grew up in a world that was both synchronous, multi-threaded, and lent themselves well to an object-oriented model.  As various frameworks have evolved, the attempt has been to take these familiar models and apply them to an asynchronous, single threaded and not really object-oriented.  From where I sit, I am amazed any of this worked at all.  It seems to me it should have failed long ago.&lt;/p&gt;
&lt;h2 id=&#34;A-Light-in-The-Darkness&#34;&gt;&lt;a href=&#34;#A-Light-in-The-Darkness&#34; class=&#34;headerlink&#34; title=&#34;A Light in The Darkness&#34;&gt;&lt;/a&gt;A Light in The Darkness&lt;/h2&gt;&lt;p&gt;Hey, I’ve been stuck in the old school model too.  But, I’m starting to think there may be a better way.  I’ve written about Redux and NgRX a lot on this blog.  I’ve fielded a lot of questions on the Angular slack channel.  Most of the questions revolve around the basic question of handling multiple asynchronous calls for data as part of one action.  All of the questions presuppose you would need to make each of the calls for data and then use some method of waiting for everything to return and assemble the data before moving on.  In each case, I recommend an alternative.  What if, each call was a unique action.  When each returns, another action is fired that places the return data in the appropriate store, or sub store.  In this model, we don’t care when the data comes back.  When it comes back, we deal with it appropriately.&lt;/p&gt;
&lt;h2 id=&#34;An-Example&#34;&gt;&lt;a href=&#34;#An-Example&#34; class=&#34;headerlink&#34; title=&#34;An Example&#34;&gt;&lt;/a&gt;An Example&lt;/h2&gt;&lt;p&gt;Let’s go with one of the more common examples I see. &lt;/p&gt;
&lt;p&gt;I need to make a request for a set of records.  Once I have the results, for each record in the result, I need to go get a set of child records.  Here is how I would deal with this at a very high level using NgRX.  I’m sure this would work for multiple Redux patterns but they may call things by different names.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fire an Action that request the main set of records.&lt;/li&gt;
&lt;li&gt;The appropriate Effect responds to the action by making an AJAX call for the data.&lt;/li&gt;
&lt;li&gt;When the AJAX call returns,&lt;ul&gt;
&lt;li&gt;fire an Action that puts the main records in the store.&lt;/li&gt;
&lt;li&gt;for each record in the result fire an Action asking for the child record(s).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The appropriate Effect(s) responds to the request for child records by making AJAX calls.&lt;/li&gt;
&lt;li&gt;When the data returns fire an Action that places the data in the store.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since your view is listening for changes on the entities in your store, it will update as the data comes in. Even better if you setup a debounce on your listener, the screen will update only when all of the data has been retrieved.&lt;/p&gt;
&lt;h2 id=&#34;The-Key-Concept&#34;&gt;&lt;a href=&#34;#The-Key-Concept&#34; class=&#34;headerlink&#34; title=&#34;The Key Concept&#34;&gt;&lt;/a&gt;The Key Concept&lt;/h2&gt;&lt;p&gt;The key concept here is that we no longer care WHEN something happens.  We only care THAT it happens.  And rather than trying to setup forkJoins() or some other mechanism to flatten this all out, our code ends up being quite simple.  Discrete bits of functionality.  And now, all our asynchronous code becomes Reactive code.  We no longer need to flatten anything out.&lt;/p&gt;
&lt;h2 id=&#34;Server-Side&#34;&gt;&lt;a href=&#34;#Server-Side&#34; class=&#34;headerlink&#34; title=&#34;Server Side&#34;&gt;&lt;/a&gt;Server Side&lt;/h2&gt;&lt;p&gt;Sadly, on the server side, things aren’t quite so easy.  At best we are tied to an implementation Observables and the various methods of combining Observables.  But I could also see some kind of client&amp;#x2F;server implementation that used a framework like SignalR or Socket.io so that as the various Observables complete, the data on the client would get updated.  An interesting way to make all of the AJAXy calls rather transparent to the user.&lt;/p&gt;
&lt;h2 id=&#34;Taking-it-To-the-Next-Level&#34;&gt;&lt;a href=&#34;#Taking-it-To-the-Next-Level&#34; class=&#34;headerlink&#34; title=&#34;Taking it To the Next Level&#34;&gt;&lt;/a&gt;Taking it To the Next Level&lt;/h2&gt;&lt;p&gt;You may call me a dreamer, but what if we made a JavaScript framework that was all message driven and reactive like I’ve described above?  We’ve done it before. &lt;/p&gt;
&lt;p&gt;When Windows was first created in ran on single core CPUs.  It was essentially single threaded.  The way it worked was primarily by putting “events” on a que and then sending the events to the appropriate application that needed to know about them. &lt;/p&gt;
&lt;p&gt;If you applied this model to JavaScript and folded in what I’ve described above, you could easily have a system that appeared to be multi-threaded even though it was single threaded at its core.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-Throw-the-Baby-Out-…&#34;&gt;&lt;a href=&#34;#Don’t-Throw-the-Baby-Out-…&#34; class=&#34;headerlink&#34; title=&#34;Don’t Throw the Baby Out …&#34;&gt;&lt;/a&gt;Don’t Throw the Baby Out …&lt;/h2&gt;&lt;p&gt;Now, you may think I’m endorsing throwing out object-oriented JavaScript.  Actually, I think most of the View stuff we do lends itself well to object-oriented programming.  But, most of our business rules lend themselves better to the model I’ve described above.  Functional and Reactive.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/coasting-curiosity-diversification-and-being-awesome/</guid>
            <title>Coasting, Curiosity, Diversification and Being Awesome</title>
            <link>http://davembush.github.com/coasting-curiosity-diversification-and-being-awesome/</link>
            <category>programming</category>
            <category>javascript</category>
            <category>c#</category>
            <category>.net</category>
            <pubDate>Tue, 21 Mar 2017 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;There are two twin evils that I see in the programming community. The first is the programmer who knows what he knows and has no desire to learn more. I call these, “coasters”. And then there are the programmers who are so curious that they try to learn every new thing that comes along, with no focus. The interesting thing is, both of these types of people end up at the same place. Out of work. The cure for both is the same.  Being Awesome.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/03/image-3.png &#34;Coasting, Curiosity, Diversification and Being Awesome&#34;)&lt;figcaption&gt;Photo credit: [aaronHwarren](//www.flickr.com/photos/pedalfreak/3745777389/) via [Visual hunt](//visualhunt.com/re/1b14eb) / [ CC BY-ND](//creativecommons.org/licenses/by-nd/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Coasting-Is-for-Morons&#34;&gt;&lt;a href=&#34;#Coasting-Is-for-Morons&#34; class=&#34;headerlink&#34; title=&#34;Coasting Is for Morons&#34;&gt;&lt;/a&gt;Coasting Is for Morons&lt;/h2&gt;&lt;p&gt;If you are reading this blog, you are probably not in this category. In fact, it probably frustrates you to watch these types of programmers as much as it does me. But for completeness, let’s describe the coasting moron.&lt;/p&gt;
&lt;p&gt;These are the programmers who learned how to program more than 5 years ago and got a job and have never moved since. They are still programming in the same language they learned originally. They are probably still at the same job they started at. And, if they had to get a new job, they probably would not be able to find one because their skills are SO out-of-date.&lt;/p&gt;
&lt;p&gt;They are still using Web Forms or MVC in ASP.NET, have no idea how to use anything beyond .NET 2.0. Or worse, they learned how to program in Visual Basic back in the day and couldn’t write a proper .NET application to save their life.&lt;/p&gt;
&lt;p&gt;They know HTML 3.2 and maybe xHTML, but have no idea what HTML5 is.&lt;/p&gt;
&lt;p&gt;And if they had to use JavaScript, they are probably still stuck using ECMA Script 3. This is to say nothing of knowing the dangers of global variables or what prototypal inheritance is.&lt;/p&gt;
&lt;p&gt;They are doomed because they are so far behind, it would be impossible to catch up.&lt;/p&gt;
&lt;h2 id=&#34;Curiosity-Killed-the-Cat&#34;&gt;&lt;a href=&#34;#Curiosity-Killed-the-Cat&#34; class=&#34;headerlink&#34; title=&#34;Curiosity Killed the Cat&#34;&gt;&lt;/a&gt;Curiosity Killed the Cat&lt;/h2&gt;&lt;p&gt;On the opposite end of the spectrum is the programmer who chases every new programming idea that comes out. These are the programmers who typically complain about things like &lt;a href=&#34;/javascript-fatigue-makes-me-scream/&#34;&gt;JavaScript Fatigue&lt;/a&gt;. While they are slightly better off than the programmer who learns nothing, they problem they face is that because they are trying to learn too much at once, they learn nothing. You have to commend their curiosity though.&lt;/p&gt;
&lt;p&gt;Fortunately, with a bit of structure, we can help the curious programmer. They are already motivated. And while I might be able to help the coaster in a one on one situation, I’m not going to spend a lot of time trying in this post. Why write to people who aren’t even likely to read?&lt;/p&gt;
&lt;p&gt;But I can help you.&lt;/p&gt;
&lt;h2 id=&#34;Diversification-for-Programmers&#34;&gt;&lt;a href=&#34;#Diversification-for-Programmers&#34; class=&#34;headerlink&#34; title=&#34;Diversification for Programmers&#34;&gt;&lt;/a&gt;Diversification for Programmers&lt;/h2&gt;&lt;p&gt;So, first, what should you learn next? Another language? A new operating system?&lt;/p&gt;
&lt;p&gt;Well, the first thing you need to do is list out all the things you are interested in. Once you have that list, the next thing you want to try to figure out is which of those things is going to make you more valuable where you are today without causing you to learn more than one new thing.&lt;/p&gt;
&lt;p&gt;For example, you may currently know how to program in C# or VB.NET but only have a rough idea of how to use SQL other than basic CRUD operations. Maybe a deep dive into &lt;a href=&#34;/SqlForNetProgrammers&#34;&gt;learning SQL&lt;/a&gt; would be the next path.&lt;/p&gt;
&lt;p&gt;Or maybe you are doing some web development and know a bit of JavaScript, but haven’t looked at any of the SPA frameworks that are currently available. Pick one and learn it. I recommend Angular2 at this point, but it doesn’t really matter. Find something on your list and learn it.&lt;/p&gt;
&lt;p&gt;Anything you learn is good. Or maybe you are interested in a brand new language, but you can stay within the same basic framework. For example, I know C#, but I’m intrigued by functional programming. F# is on my short list of things I might learn next.&lt;/p&gt;
&lt;p&gt;The idea is to move incrementally rather than leaping to something where everything is new again. If you can somehow work this all into your day job, even better. You can’t always, but it is the fastest way to learn new stuff.&lt;/p&gt;
&lt;h3 id=&#34;Learn-Outside-of-Programming&#34;&gt;&lt;a href=&#34;#Learn-Outside-of-Programming&#34; class=&#34;headerlink&#34; title=&#34;Learn Outside of Programming&#34;&gt;&lt;/a&gt;Learn Outside of Programming&lt;/h3&gt;&lt;p&gt;But it isn’t all about programming, is it? What can you learn that isn’t directly related to programming? There are all kinds of things. And the broader knowledge can help your programming as well. Maybe you have a side interest in business, finance, or marketing. Maybe you find yourself having trouble with interpersonal relationships. There are all kinds of other things you could be studying that really have nothing to do with programming directly, but have everything to do with making you more valuable both as a person and as an employee.&lt;/p&gt;
&lt;p&gt;Find outside interest!&lt;/p&gt;
&lt;h2 id=&#34;Focus-Makes-Awesome&#34;&gt;&lt;a href=&#34;#Focus-Makes-Awesome&#34; class=&#34;headerlink&#34; title=&#34;Focus Makes Awesome&#34;&gt;&lt;/a&gt;Focus Makes Awesome&lt;/h2&gt;&lt;p&gt;Having said all of this. The real trick is focus. As I pointed out above, it is great to be curious. We can do something with that. But, if you try to learn more than 3 things at a time, you will end up learning nothing well.&lt;/p&gt;
&lt;p&gt;One of the guys I work with has a Trello board with a list of possible things to learn. I have a stack of sample kindle books to read someday, maybe. They are things I was curious about at one point. If I’m still interested when I’m looking for something new to read, I’ll pull them down and read the sample.&lt;/p&gt;
&lt;p&gt;But here’s the thing. I only focus on learning 2 or 3 new things at a time. Generally, one new programming thing and one new not programming thing.&lt;/p&gt;
&lt;p&gt;Currently, I’m learning all things Angular2. My goal is to be THE Angular2&amp;#x2F;JavaScript expert in Connecticut. I’m well on my way.&lt;/p&gt;
&lt;p&gt;I have two other interest that have nothing to do with programming. One is Options Trading. I’m at a point with that where it only takes a few minutes a day. So, I have room for something else.&lt;/p&gt;
&lt;p&gt;That something else is everything brain science. Psychology, Sociology, Hypnosis, Memory, and more. It is a fascinating world.&lt;/p&gt;
&lt;h2 id=&#34;Be-Awesome&#34;&gt;&lt;a href=&#34;#Be-Awesome&#34; class=&#34;headerlink&#34; title=&#34;Be Awesome&#34;&gt;&lt;/a&gt;Be Awesome&lt;/h2&gt;&lt;p&gt;There is a story about two guys who were in the woods when they ran into a bear. Being smart hikers, they agreed to try standing still to see if the bear would just ignore them. This worked well.&lt;/p&gt;
&lt;p&gt;But, after the bear left, one of the guys said to the other, “What would you have done if standing still didn’t work?” To which the second guy said, “I would have run as fast as I can.” The first guy responded, “But, do you really think you can outrun a bear?!” And then the second guy says, “I wouldn’t have to out run the bear. I only need to out run you.”&lt;/p&gt;
&lt;p&gt;And that is the market we live in. The good news is, there are so many people that are coasting right now that “awesome” is a pretty easy level to achieve in life.&lt;/p&gt;
&lt;p&gt;So, go out, do some focused learning and be awesome&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/3-javascript-fallacies-you-might-believe/</guid>
            <title>3 JavaScript Fallacies You Might Believe</title>
            <link>http://davembush.github.com/3-javascript-fallacies-you-might-believe/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>performance</category>
            <category>react.js</category>
            <pubDate>Tue, 14 Mar 2017 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;You know, you think the whole world knows something is true until you hear someone people respect say something really dumb.  The three JavaScript fallacies I have here are actual statements I’ve heard over the last week during a discussion about Angular2 and Rect.  What makes these fallacies particularly interesting is that they sound plausible.  In fact, there are time when they are even true.  But in the larger context of a JavaScript application they are nearly always false.&lt;/p&gt;
&lt;p&gt;So, here are 3 JavaScript Fallacies you may still believe that you may want to reevaluate.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/03/image-2.png &#34;3 JavaScript Fallacies You Might Believe&#34;)&lt;figcaption&gt;Photo credit: [bark](//www.flickr.com/photos/barkbud/4341791754/) via [VisualHunt](//visualhunt.com/re/8dc251) / [ CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Direct-Access-to-the-DOM-is-Faster-than-using-a-Virtual-DOM&#34;&gt;&lt;a href=&#34;#Direct-Access-to-the-DOM-is-Faster-than-using-a-Virtual-DOM&#34; class=&#34;headerlink&#34; title=&#34;Direct Access to the DOM is Faster than using a Virtual DOM&#34;&gt;&lt;/a&gt;Direct Access to the DOM is Faster than using a Virtual DOM&lt;/h2&gt;&lt;p&gt;OK. I will grant that if you only ever want to change one thing on the screen at a time, yes accessing the DOM directly from JavaScript is probably going to be faster than going through some kind of Virtual DOM layer as is common in React, Angular2 and several other libraries and frameworks that are available today.&lt;/p&gt;
&lt;p&gt;But, the fact is, that’s not how most code works. If you are writing this kind of application and you are using a library or framework that uses a virtual DOM layer, something is wrong. I would argue you’ve probably chosen the wrong library for what you are trying to do.&lt;/p&gt;
&lt;p&gt;But, let’s assume that you are writing a typical SPA application that doesn’t just update one area of the screen. In this case, the fastest way to make this update is all at once. One call to the DOM from JavaScript. I’ve written before about how &lt;a href=&#34;/javascript-performance-tweaks/&#34;&gt;slow accessing the DOM is&lt;/a&gt;. And for all the performance enhancements since I wrote that article, accessing the DOM is still one of the slowest things you can do. So, a framework that lets you write your code in a way similar to how you would write to the DOM directly, but lets you do this in a way that doesn’t actually write to the DOM until the last minute is FASTER than writing to the DOM directly.&lt;/p&gt;
&lt;h2 id=&#34;Immutable-Objects-are-Necessarily-Slower-than-Mutable-Objects&#34;&gt;&lt;a href=&#34;#Immutable-Objects-are-Necessarily-Slower-than-Mutable-Objects&#34; class=&#34;headerlink&#34; title=&#34;Immutable Objects are Necessarily Slower than Mutable Objects&#34;&gt;&lt;/a&gt;Immutable Objects are Necessarily Slower than Mutable Objects&lt;/h2&gt;&lt;p&gt;Functional JavaScript programming has become the latest cool new buzzword in the JavaScript community, for a lot of good reasons, but one main concept that comes along for the ride is the idea of making all of our object immutable. This means, for example, that if I want to modify an array, instead of changing the current array, I would create a new array and copy the elements and the new element into it. No more push.&lt;/p&gt;
&lt;p&gt;Similarly, for a regular object that isn’t a list, we would create a new object and copy the existing elements into it and then overwrite the items that have changed.&lt;/p&gt;
&lt;h3 id=&#34;Why&#34;&gt;&lt;a href=&#34;#Why&#34; class=&#34;headerlink&#34; title=&#34;Why?&#34;&gt;&lt;/a&gt;Why?&lt;/h3&gt;&lt;p&gt;Now, why would we want to go to all of this work? It does seem like it would be faster to just modify the existing object. Right?&lt;/p&gt;
&lt;p&gt;But you see, there is this little thing called “change detection” that more than makes up for all of this overhead I just described.&lt;/p&gt;
&lt;p&gt;In most of our applications, at some point we want to know if an object has changed, right? If we can’t rely on the fact that we have a new object, we have to do a deep comparison of the two objects until we’ve determined that there is a difference, or we’ve been through the whole list and verified that the nothing has changed.&lt;/p&gt;
&lt;p&gt;Once we can rely on objects being immutable, we can use the equals operator (&amp;#x3D;&amp;#x3D;, or &amp;#x3D;&amp;#x3D;&amp;#x3D;) to see if the object has changed. I’m sure you can see that this takes much less time than evaluating an entire object tree, even if you object only has two properties in it that need to be compared.&lt;/p&gt;
&lt;h3 id=&#34;Real-Problem&#34;&gt;&lt;a href=&#34;#Real-Problem&#34; class=&#34;headerlink&#34; title=&#34;Real Problem?&#34;&gt;&lt;/a&gt;Real Problem?&lt;/h3&gt;&lt;p&gt;But let’s step back and look at the bigger picture. In most of the code that I write, what we are really talking about is immutable arrays. Yes there are other non-array places where we would use immutable objects, but my guess is that immutable objects impacts 80% of my code. Get a list of records from the database for example.&lt;/p&gt;
&lt;p&gt;The fact of the matter is, every time I access the database, I get a new array back anyhow. Even in the case of retrieving a single record, I still get a new object back.&lt;/p&gt;
&lt;p&gt;If I need to delete an element from an array, here again, I’ll end up creating a new object.&lt;/p&gt;
&lt;p&gt;In fact, except modifying a row, or adding a record to the end of a list, just about everything I tend to do with an array ends up being an immutable operation anyhow. By making everything immutable, we are forcing the areas that we aren’t already implementing immutability to be immutable. The point is, in terms of performance the net is an obvious gain both in terms of performance and in terms of consistency.&lt;/p&gt;
&lt;p&gt;And, going back to the issue of rendering our data into the DOM, because the change detection is faster, we can determine that a particular component doesn’t need to have the DOM updated quicker rather than re-rendering the entire DOM.&lt;/p&gt;
&lt;h2 id=&#34;Backwards-Compatibility-means-I-can’t-upgrade-my-Development-Environment&#34;&gt;&lt;a href=&#34;#Backwards-Compatibility-means-I-can’t-upgrade-my-Development-Environment&#34; class=&#34;headerlink&#34; title=&#34;Backwards Compatibility means I can’t upgrade my Development Environment&#34;&gt;&lt;/a&gt;Backwards Compatibility means I can’t upgrade my Development Environment&lt;/h2&gt;&lt;p&gt;Continuing on, remember the conversation I’m referencing was about React and Angular2. And the guy who was making these statements about performance was asserting that he couldn’t upgrade his React environment to use the latest and greatest tool chain because he had to support older browsers. He specifically stated IE6. Now, knowing the site he’s talking about, I doubt we make any money at all from people who run IE6. But, let’s just assume for a second that we do.&lt;/p&gt;
&lt;h3 id=&#34;So-what-you’re-telling-me-is…&#34;&gt;&lt;a href=&#34;#So-what-you’re-telling-me-is…&#34; class=&#34;headerlink&#34; title=&#34;So, what you’re telling me is…&#34;&gt;&lt;/a&gt;So, what you’re telling me is…&lt;/h3&gt;&lt;p&gt;… that you are willing to let performance suffer for 99% of your very large customer based because you need to support the 1% (I’m being generous here) of the people who have refused to upgrade and probably aren’t producing any revenue for the company? Maybe I’m missing something, but this seems rather short-sighted. That, or maybe you just don’t know that the new features in the newer browsers allow you to not just write better JavaScript but also allow you to do things without JavaScript that perform better. If you are really interested in writing fast web sites, you should be moving to the latest and greatest tool chain as often as is humanly possible.&lt;/p&gt;
&lt;h3 id=&#34;Bugs-and-Security-Risk&#34;&gt;&lt;a href=&#34;#Bugs-and-Security-Risk&#34; class=&#34;headerlink&#34; title=&#34;Bugs and Security Risk&#34;&gt;&lt;/a&gt;Bugs and Security Risk&lt;/h3&gt;&lt;p&gt;Just this last week I saw a study that said that over a third of the web sites on the Internet were running code that left them venerable to security risk. That is, the code they were running had known security risk. By not upgrading your tools for public facing sites, you are leaving your company at risk. When your site is compromised, do you want to be the one who has to explain to your boss that it is because you refused to upgrade your tools? I sure don’t.&lt;/p&gt;
&lt;h3 id=&#34;But-what-about-the-old-browsers&#34;&gt;&lt;a href=&#34;#But-what-about-the-old-browsers&#34; class=&#34;headerlink&#34; title=&#34;But what about the old browsers?&#34;&gt;&lt;/a&gt;But what about the old browsers?&lt;/h3&gt;&lt;p&gt;Well, if you really need to support the old stuff, there are polyfills that you can apply that will let you run the newer stuff in the older browsers. Seems to me you get the best of both worlds. Your customers who are up to date benefit with a better performing, and less buggy website, and the customers using older browser still get to see something. Are there places where you might still have to make some compromises. Sure. There are a few places. But not enough that you shouldn’t upgrade.&lt;/p&gt;
&lt;h2 id=&#34;What-is-the-Bigger-Problem&#34;&gt;&lt;a href=&#34;#What-is-the-Bigger-Problem&#34; class=&#34;headerlink&#34; title=&#34;What is the Bigger Problem?&#34;&gt;&lt;/a&gt;What is the Bigger Problem?&lt;/h2&gt;&lt;p&gt;So, how can this happen? How can really smart people make really bad choices like this?&lt;/p&gt;
&lt;p&gt;I don’t really know, but I have a few theories.&lt;/p&gt;
&lt;p&gt;One is just plain arrogance. Being so sure you are right that you never stop to think you might be wrong.&lt;/p&gt;
&lt;p&gt;I have to admit, when I first learned about immutability, I thought it sounded slow too. But, my thinking went along the lines of, “well, much smarter people than me are working on this, they must think it makes sense. I wonder why?” And then I started digging for answers.&lt;/p&gt;
&lt;p&gt;So, I would encourage those who are responsible for making decisions to make sure that the people they are listening to can actually back up what they are saying and not just assume they are right because they seem so confident.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-fatigue-makes-me-scream/</guid>
            <title>JavaScript Fatigue Makes Me Scream</title>
            <link>http://davembush.github.com/javascript-fatigue-makes-me-scream/</link>
            <category>javascript</category>
            <pubDate>Tue, 21 Feb 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Maybe JavaScript Fatigue makes you scream too. Are you annoyed with the constantly changing JavaScript environment? Do you wish things could just settle down for a bit? Have you decided that you won’t learn anything new because there will just be something new to learn tomorrow? Welcome to JavaScript Fatigue. But frankly, unlike many people who talk about JavaScript Fatigue, I see JavaScript Fatigue and the much broader subject of language fatigue as a symptom of a much larger problem that has less to do with JavaScript and more to do with human psychology and the state of the programming community at large. &lt;img src=&#34;/uploads/2017/02/image-2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;What-is-JavaScript-Fatigue&#34;&gt;&lt;a href=&#34;#What-is-JavaScript-Fatigue&#34; class=&#34;headerlink&#34; title=&#34;What is JavaScript Fatigue&#34;&gt;&lt;/a&gt;What is JavaScript Fatigue&lt;/h2&gt;&lt;p&gt;JavaScript Fatigue is the belief that there are so many ways of assembling a JavaScript project that instead of just having to learn JavaScript, you have to learn several other related technologies.  It is in essence, more about decision overload than it is about JavaScript specifically. Think about the average JavaScript project that goes beyond the (now) old school “Augment my form with some jQuery.” Here are a sample of decisions that need to be made:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Should you use a JavaScript framework, or just write native JavaScript?&lt;/li&gt;
&lt;li&gt;If you decide to use a framework, which one should you use?&lt;/li&gt;
&lt;li&gt;What tool(s) will you use to bundle, minify, cache bust, and tree shake your code?&lt;/li&gt;
&lt;li&gt;Should you bother lazy loading?&lt;/li&gt;
&lt;li&gt;Will you use MVVM, MVC, Redux or something else as a basic architecture?&lt;/li&gt;
&lt;li&gt;How do you plan on dealing with AJAX calls? Callback hell? Promises? RxJS? Something yet to be created?&lt;/li&gt;
&lt;li&gt;What directory structure will you use?&lt;/li&gt;
&lt;li&gt;What component libraries will you use?&lt;/li&gt;
&lt;li&gt;How will you style your application?  Raw CSS? Bootstrap? Material Design?&lt;/li&gt;
&lt;li&gt;What development environment will you use?&lt;/li&gt;
&lt;li&gt;Oh and by the way, to use most of these tools you’ll need to learn node and may need to decide between NPM and YARN.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I recently heard that for a basic React application there are about 40 different decisions of this kind that need to be made.&lt;/p&gt;
&lt;h2 id=&#34;Why-JavaScript-Fatigue-Is-Considered-a-Problem&#34;&gt;&lt;a href=&#34;#Why-JavaScript-Fatigue-Is-Considered-a-Problem&#34; class=&#34;headerlink&#34; title=&#34;Why JavaScript Fatigue Is Considered a Problem&#34;&gt;&lt;/a&gt;Why JavaScript Fatigue Is Considered a Problem&lt;/h2&gt;&lt;p&gt;If you are working on your own, or working in a small shop without any clear architectural direction, the choices can seem overwhelming. For that matter, if you are an architect, this is still a pretty long list of things that you need to learn well enough to evaluate. But the reason JavaScript fatigue is a problem is because it triggers emotions of fear, anger, and depression. It all starts with fear. You look at all the stuff that you “need to learn” and think, “I can’t possibly learn all of that. And even if I do, there will be something newer tomorrow that I’ll need to learn.” And so your fear turns to anger. I’m not talking rage kind of anger. Just that mild, “I’m not in control here and I’m feeling a bit uncomfortable” kind of anger. And this point, the next most logical thing most of us attempt to do is to try to get some sort of control over the situation. But in this case, the beast can’t be tamed.  So, we resign ourselves to the situation and decide that since we can’t control any of it, we’ll give it a name and in really extreme situations give up learning any of it. Yes, I’ve actually read comments and had conversations with people who have told me as much. “Too much new stuff to keep track of, I’ve just given up.” Hey, OK. Don’t complain to me when you can’t get a job though.&lt;/p&gt;
&lt;h2 id=&#34;How-to-Fix-JavaScript-Fatigue&#34;&gt;&lt;a href=&#34;#How-to-Fix-JavaScript-Fatigue&#34; class=&#34;headerlink&#34; title=&#34;How to Fix JavaScript Fatigue&#34;&gt;&lt;/a&gt;How to Fix JavaScript Fatigue&lt;/h2&gt;&lt;p&gt;I used to think that the people who had given up like this had either lost their love of learning, or were so distracted by the bright and shiny that they had hit overload and couldn’t continue. I now see that the real problem is depression. A natural extension of anger. But, suppose there was a different way of looking a all of this JavaScript Fatigue stuff? Yes, there is a lot of stuff to learn. A lot of stuff you could learn. And you see, that’s the first step. There is a world of difference from NEEDing to learn all that is out there and having that all be things you could learn. I doubt you evaluated all the possible languages you could use prior to using the first language you used. Maybe it was chosen for you by your first job. Maybe it was the language you were most attracted to. In my case, I tried three different languages prior to my first job and when I started my first job, I wasn’t using any of them. Even today. How many languages are there? How many do you know? The point is, you don’t HAVE to know everything about anything. You really only need to know enough to get your work done. Sure, there will be something new and shiny. Take your time and evaluate if it is even worth looking at. Dip your toes in.  Does what you’ve seen so far make sense? Go further. Recently, YARN has become the “hot new thing.”  I tried it. It didn’t work in my current environment. At least for now, we are sticking with NPM. We’ll take another look when it matures a bit further. I love learning. But, I also realize I can only learn one thing at a time. I can’t be awesome at everything. So, I focus. Everything else I might need to know, I learn well enough to get the core thing done.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;And so, the cure for JavaScript Fatigue lies not outside of us, but within. Fix your perspective.  Focus on what you need to know now. Learn bits at a time. Don’t worry about what is coming. There will always be new stuff. Not just with JavaScript but in the programming world in general. Even in the world at large. Don’t worry, be happy!&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-fatigue-makes-me-scream/</guid>
            <title>JavaScript Fatigue Makes Me Scream</title>
            <link>http://davembush.github.com/javascript-fatigue-makes-me-scream/</link>
            <category>javascript</category>
            <pubDate>Tue, 21 Feb 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Maybe JavaScript Fatigue makes you scream too.&lt;/p&gt;
&lt;p&gt;Are you annoyed with the constantly changing JavaScript environment?  Do you wish things could just settle down for a bit?  Have you decided that you won’t learn anything new because there will just be something new to learn tomorrow?&lt;/p&gt;
&lt;p&gt;Welcome to JavaScript Fatigue.&lt;/p&gt;
&lt;p&gt;But frankly, unlike many people who talk about JavaScript Fatigue, I see JavaScript Fatigue and the much broader subject of language fatigue as a symptom of a much larger problem that has less to do with JavaScript and more to do with human psychology and the state of the programming community at large. &lt;img src=&#34;/uploads/2017/02/image-2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;What-is-JavaScript-Fatigue&#34;&gt;&lt;a href=&#34;#What-is-JavaScript-Fatigue&#34; class=&#34;headerlink&#34; title=&#34;What is JavaScript Fatigue&#34;&gt;&lt;/a&gt;What is JavaScript Fatigue&lt;/h2&gt;&lt;p&gt;JavaScript Fatigue is the belief that there are so many ways of assembling a JavaScript project that instead of just having to learn JavaScript, you have to learn several other related technologies. It is in essence, more about decision overload than it is about JavaScript specifically.&lt;/p&gt;
&lt;p&gt;Think about the average JavaScript project that goes beyond the (now) old school “Augment my form with some jQuery.”&lt;/p&gt;
&lt;p&gt;Here are a sample of decisions that need to be made:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Should you use a JavaScript framework, or just write native JavaScript?&lt;/li&gt;
&lt;li&gt;If you decide to use a framework, which one should you use?&lt;/li&gt;
&lt;li&gt;What tool(s) will you use to bundle, minify, cache bust, and tree shake your code?&lt;/li&gt;
&lt;li&gt;Should you bother lazy loading?&lt;/li&gt;
&lt;li&gt;Will you use MVVM, MVC, Redux or something else as a basic architecture?&lt;/li&gt;
&lt;li&gt;How do you plan on dealing with AJAX calls? Callback hell? Promises? RxJS? Something yet to be created?&lt;/li&gt;
&lt;li&gt;What directory structure will you use?&lt;/li&gt;
&lt;li&gt;What component libraries will you use?&lt;/li&gt;
&lt;li&gt;How will you style your application? Raw CSS? Bootstrap? Material Design?&lt;/li&gt;
&lt;li&gt;What development environment will you use?&lt;/li&gt;
&lt;li&gt;Oh and by the way, to use most of these tools you’ll need to learn node and may need to decide between NPM and YARN.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I recently heard that for a basic React application there are about 40 different decisions of this kind that need to be made.&lt;/p&gt;
&lt;h2 id=&#34;Why-JavaScript-Fatigue-Is-Considered-a-Problem&#34;&gt;&lt;a href=&#34;#Why-JavaScript-Fatigue-Is-Considered-a-Problem&#34; class=&#34;headerlink&#34; title=&#34;Why JavaScript Fatigue Is Considered a Problem&#34;&gt;&lt;/a&gt;Why JavaScript Fatigue Is Considered a Problem&lt;/h2&gt;&lt;p&gt;If you are working on your own, or working in a small shop without any clear architectural direction, the choices can seem overwhelming.&lt;/p&gt;
&lt;p&gt;For that matter, if you are an architect, this is still a pretty long list of things that you need to learn well enough to evaluate.&lt;/p&gt;
&lt;p&gt;But the reason JavaScript fatigue is a problem is because it triggers emotions of fear, anger, and depression.&lt;/p&gt;
&lt;p&gt;It all starts with fear. You look at all the stuff that you “need to learn” and think, “I can’t possibly learn all of that. And even if I do, there will be something newer tomorrow that I’ll need to learn.”&lt;/p&gt;
&lt;p&gt;And so your fear turns to anger. I’m not talking rage kind of anger. Just that mild, “I’m not in control here and I’m feeling a bit uncomfortable” kind of anger. And this point, the next most logical thing most of us attempt to do is to try to get some sort of control over the situation. But in this case, the beast can’t be tamed. So, we resign ourselves to the situation and decide that since we can’t control any of it, we’ll give it a name and in really extreme situations give up learning any of it.&lt;/p&gt;
&lt;p&gt;Yes, I’ve actually read comments and had conversations with people who have told me as much. “Too much new stuff to keep track of, I’ve just given up.”&lt;/p&gt;
&lt;p&gt;Hey, OK. &lt;/p&gt;
&lt;p&gt;Don’t complain to me when you can’t get a job though.&lt;/p&gt;
&lt;h2 id=&#34;How-to-Fix-JavaScript-Fatigue&#34;&gt;&lt;a href=&#34;#How-to-Fix-JavaScript-Fatigue&#34; class=&#34;headerlink&#34; title=&#34;How to Fix JavaScript Fatigue&#34;&gt;&lt;/a&gt;How to Fix JavaScript Fatigue&lt;/h2&gt;&lt;p&gt;I used to think that the people who had given up like this had either lost their love of learning, or were so distracted by the bright and shiny that they had hit overload and couldn’t continue. I now see that the real problem is depression. A natural extension of anger.&lt;/p&gt;
&lt;p&gt;But, suppose there was a different way of looking at all this JavaScript Fatigue stuff?&lt;/p&gt;
&lt;p&gt;Yes, there is a lot of stuff to learn. A lot of stuff you could learn. And you see, that’s the first step. There is a world of difference from NEEDing to learn all that is out there and having that all be things you could learn.&lt;/p&gt;
&lt;p&gt;I doubt you evaluated all the possible languages you could use prior to using the first language you used. Maybe it was chosen for you by your first job. Maybe it was the language you were most attracted to. In my case, I tried three different languages prior to my first job and when I started my first job, I wasn’t using any of them.&lt;/p&gt;
&lt;p&gt;Even today. How many languages are there? How many do you know?&lt;/p&gt;
&lt;p&gt;The point is, you don’t HAVE to know everything about anything. You really only need to know enough to get your work done. Sure, there will be something new and shiny. Take your time and evaluate if it is even worth looking at. Dip your toes in. Does what you’ve seen so far make sense? Go further.&lt;/p&gt;
&lt;p&gt;Recently, YARN has become the “hot new thing.” I tried it. It didn’t work in my current environment. At least for now, we are sticking with NPM. We’ll take another look when it matures a bit further.&lt;/p&gt;
&lt;p&gt;I love learning. But, I also realize I can only learn one thing at a time. I can’t be awesome at everything. So, I focus. Everything else I might need to know, I learn well enough to get the core thing done.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;And so, the cure for JavaScript Fatigue lies not outside of us, but within. Fix your perspective. Focus on what you need to know now. Learn bits at a time. Don’t worry about what is coming. There will always be new stuff. Not just with JavaScript but in the programming world in general. Even in the world at large.&lt;/p&gt;
&lt;p&gt;Don’t worry, be happy!&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/what-if-everything-was-immutable/</guid>
            <title>What if Everything Was Immutable?</title>
            <link>http://davembush.github.com/what-if-everything-was-immutable/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>immutable</category>
            <pubDate>Tue, 10 Jan 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;The first time a programmer who was trained in the classical procedural&amp;#x2F;object oriented history is confronted with the concept of making everything immutable, the first question that comes to mind is, “won’t that make my application slow?”  This is because of how most programmers have been trained.  Making everything immutable generally means that we must copy a lot of memory from one place to another.  Moving memory around is generally considered slow.&lt;/p&gt;
&lt;p&gt;And so, most programmers dismiss the whole idea as crazy talk.  But is it really all that crazy?&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/12/image-4.png &#34;What if Everything Was Immutable?&#34;)&lt;figcaption&gt;Photo credit: [Paul Stevenson](//www.flickr.com/photos/pss/354177349/) via [Visualhunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Two-Paths&#34;&gt;&lt;a href=&#34;#Two-Paths&#34; class=&#34;headerlink&#34; title=&#34;Two Paths&#34;&gt;&lt;/a&gt;Two Paths&lt;/h2&gt;&lt;p&gt;So, let’s look at some computer history.  If you’ve been in this industry any length of time, you’ve probably heard the name Turing and you know the Turing machine has something to do with programming.  But you may not know how it impacts your day to day programming life.&lt;/p&gt;
&lt;p&gt;In short, Turing is the guy we can point to as the father of modern computing, complete with the fact that we generally process everything sequentially.  It is this sequential processing that causes us to have instructions working on memory and it has served us well.&lt;/p&gt;
&lt;p&gt;But there is another branch of computer science that was made popular by Alonzo Church that is based on Lambda Calculus.  This branch of computer science is where the bulk of Functional Programming can be traced back to.  In this branch, everything is a function.  Any parameters you pass in cannot have their state changed and the value that is returned is a new value.&lt;/p&gt;
&lt;p&gt;The main benefits to this newer functional style are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If I pass in the same parameters, I’ll always get back the same value.&lt;/li&gt;
&lt;li&gt;State is never mutated accidentally because state is never mutated.&lt;/li&gt;
&lt;li&gt;Functions never have an unpredictable side effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just think of how many bugs you wouldn’t have introduced into your code had this been true when you wrote it.&lt;/p&gt;
&lt;h2 id=&#34;Convergence&#34;&gt;&lt;a href=&#34;#Convergence&#34; class=&#34;headerlink&#34; title=&#34;Convergence&#34;&gt;&lt;/a&gt;Convergence&lt;/h2&gt;&lt;p&gt;Recently, functional programming has become more popular and the two branches of computer science have started to merge.  Taking the best of both worlds and using what makes sense from each.  But, we’ve already had at least one immutable object in most of our object-oriented languages.  The String object.  So, what does String give us that we use nearly every day?&lt;/p&gt;
&lt;h2 id=&#34;Immutable-Strings&#34;&gt;&lt;a href=&#34;#Immutable-Strings&#34; class=&#34;headerlink&#34; title=&#34;Immutable Strings&#34;&gt;&lt;/a&gt;Immutable Strings&lt;/h2&gt;&lt;h3 id=&#34;No-Side-Effects&#34;&gt;&lt;a href=&#34;#No-Side-Effects&#34; class=&#34;headerlink&#34; title=&#34;No Side Effects&#34;&gt;&lt;/a&gt;No Side Effects&lt;/h3&gt;&lt;p&gt;As we’ve already mentioned, that fact that something is immutable means it can’t be changed.  So, when you pass a string as a parameter, even though it is an object, the string won’t change if the function changes the string.  This is good news because the calling function doesn’t have to protect itself against unintended consequences.&lt;/p&gt;
&lt;h3 id=&#34;Memory-Efficiency&#34;&gt;&lt;a href=&#34;#Memory-Efficiency&#34; class=&#34;headerlink&#34; title=&#34;Memory Efficiency&#34;&gt;&lt;/a&gt;Memory Efficiency&lt;/h3&gt;&lt;p&gt;The other thing that happens with immutable object is that every string representation only exist once.  So, we never duplicate memory.&lt;/p&gt;
&lt;p&gt;What do I mean by this? Well, take this example from C#&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; string1 = &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; string2 = &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (string1 == string2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;writeLn&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;is equal&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Testing-Equality&#34;&gt;&lt;a href=&#34;#Testing-Equality&#34; class=&#34;headerlink&#34; title=&#34;Testing Equality&#34;&gt;&lt;/a&gt;Testing Equality&lt;/h3&gt;&lt;p&gt;&lt;code&gt;string1&lt;/code&gt; and &lt;code&gt;string2&lt;/code&gt; point to the same object “abc” not two different instances of “abc”.  This is why we can write &lt;code&gt;string1 == string2&lt;/code&gt;.  Unfortunately, the &amp;#x3D;&amp;#x3D; operator is overloaded so we are still doing string comparison.  &lt;/p&gt;
&lt;p&gt;But if you want efficiency, you can use the &lt;a href=&#34;/net-string-pool-not-just-for-the-compiler/&#34;&gt;Intern()&lt;/a&gt; method and ReferenceEquals() to bypass this overload and use pointer comparison.  This is a good thing because we test for string equality and inequality so often the performance penalty we incur from making strings immutable is more than offset by the performance gains we get testing for equality.&lt;/p&gt;
&lt;h2 id=&#34;Make-Everything-Immutable&#34;&gt;&lt;a href=&#34;#Make-Everything-Immutable&#34; class=&#34;headerlink&#34; title=&#34;Make Everything Immutable&#34;&gt;&lt;/a&gt;Make Everything Immutable&lt;/h2&gt;&lt;p&gt;If you think about the code you typically write, how much of the time would you benefit from every object in your code working in a similar way to strings? Wouldn’t it be a great thing if you knew that when you passed an object into a function, that function was not going to change the object at all?  Can you think of times that might have prevented a bug? Think of the memory optimizations you would benefit from.&lt;/p&gt;
&lt;p&gt;And how much easier would it be to test for equality if all you had to test was a memory pointer?  Not only would it be fast, but it would be reliable and a lot less work to code.&lt;/p&gt;
&lt;h2 id=&#34;Immutability-is-Hard-–-or-is-it&#34;&gt;&lt;a href=&#34;#Immutability-is-Hard-–-or-is-it&#34; class=&#34;headerlink&#34; title=&#34;Immutability is Hard – or is it?&#34;&gt;&lt;/a&gt;Immutability is Hard – or is it?&lt;/h2&gt;&lt;p&gt;So now that you know what the benefits are, you are probably thinking, “Yes, but coding immutability into a language that doesn’t support it natively is a lot of work.  It is so much easier to write code the way I always have, even if it isn’t quite a safe.” Yes, I feel your pain.  But there are libraries for that.  Say you could get all the benefits of immutability with very little programming or performance cost?  Would you be interested? I know I was.  Just having the benefits of immutable data with the performance was benefit enough for me.  But then I was introduced to &lt;a href=&#34;//facebook.github.io/immutable-js/&#34;&gt;immutable.j&lt;/a&gt;s and I realized that I could have all of the benefits with a lot less performance cost than I was expecting because the library uses data structures that allow us to manipulate pointers rather than raw data.  The result is that only pointers to data that have actually changed change.  Nearly everything else stays as it was and adding items to List instead of arrays and Maps ends up being a lot more efficient.&lt;/p&gt;
&lt;h2 id=&#34;Impact-on-Angular2&#34;&gt;&lt;a href=&#34;#Impact-on-Angular2&#34; class=&#34;headerlink&#34; title=&#34;Impact on Angular2&#34;&gt;&lt;/a&gt;Impact on Angular2&lt;/h2&gt;&lt;p&gt;By using immutable object in Angular2 along with libraries like &lt;a href=&#34;//github.com/ngrx/store&#34;&gt;NgRX&amp;#x2F;Store&lt;/a&gt; you can see some major performance increases because the view will be able to determine when it needs to change based on simple object pointer comparison rather than checking entire objects.  For compute-intensive tasks, this is going to be a huge benefit.&lt;/p&gt;
&lt;p&gt;But it is also well worth learning how to use this before you ever need it simply because it will be a new way of thinking about your project that may take some time to get accustomed to.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/the-irrational-fear-of-javascript-script-kiddies/</guid>
            <title>The Irrational fear of JavaScript &#34;Script Kiddies&#34;</title>
            <link>http://davembush.github.com/the-irrational-fear-of-javascript-script-kiddies/</link>
            <category>javascript</category>
            <pubDate>Tue, 03 Jan 2017 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last several months, I’ve seen a lot of whining, complaining a fear regarding Angular 2 in particular and the JavaScript platform in general.&lt;/p&gt;
&lt;p&gt;Terms like “JavaScript fatigue” are indicative of the attitude.&lt;/p&gt;
&lt;p&gt;Another place I see this is with the recent announcement from the Angular team stating there will be another major point release every six months.  Like this is a bad thing? Or the general attitude that particular (modern) design decisions that have been made in some of the more recent frameworks that have been released are bad for JavaScript.&lt;/p&gt;
&lt;p&gt;And I look at that and honestly wonder why these people are programming in the first place.  If change bothers you, you are really in the wrong industry.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/12/image-3.png &#34;The Irrational fear of JavaScript &#34;Script Kiddies&#34;&#34;) Photo via [tookapic](//pixabay.com/en/users/tookapic-1386459/) via [Visualhunt.com](//visualhunt.com/)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;I’m-Moving-To-…&#34;&gt;&lt;a href=&#34;#I’m-Moving-To-…&#34; class=&#34;headerlink&#34; title=&#34;I’m Moving To …&#34;&gt;&lt;/a&gt;I’m Moving To …&lt;/h2&gt;&lt;p&gt;I seriously saw this comment on one of the articles announcing the major point release and jumping to version 4 instead of 3.  The actual comment was, “I’m going to move to React.”  Now, the reason he was going to move to React because he’s afraid that these major point releases are going to be drastically different from the previous version so that he’ll always need to be learning something new.  I understand the fear.  But, I think it is unfounded.  Aside from the fact that the Angular team has assured us that there won’t be any breaking changes in the next version, what we have to take a look at is WHY there were so many breaking changes from version 1 to version 2.&lt;/p&gt;
&lt;h2 id=&#34;Remember-when…&#34;&gt;&lt;a href=&#34;#Remember-when…&#34; class=&#34;headerlink&#34; title=&#34;Remember when…&#34;&gt;&lt;/a&gt;Remember when…&lt;/h2&gt;&lt;p&gt;Remember back to when AngularJS was first introduced?  The best platform we had at the time was jQuery and KnockOut.  Yes, there were others, but those were the most prominent.  Especially jQuery.  Since then, the browsers have stabilized and most of the reasons for using jQuery have vanished.&lt;/p&gt;
&lt;p&gt;Another factor we need to consider is that the language has changed.  Oh, yeah, you can still write code like you used to 10 years ago, if you want.  But, the standards committee has finally committed to putting out new standards for the language every year.  So now, we have improvements that handle scope closure issues and fat arrow functions and the promise of not having to use promises or callbacks to force JavaScript into a more synchronous flow by using async and await.&lt;/p&gt;
&lt;p&gt;And then there is the history of various frameworks that have come out since.  We’ve made a lot of mistakes in the past that have led to improved ways of working with JavaScript to achieve various goals.  Function programming has crept into the mainstream.  Reactive programming has become more popular.&lt;/p&gt;
&lt;p&gt;For any framework to stay stagnant under these conditions would be foolish, if not suicidal.&lt;/p&gt;
&lt;p&gt;And to that programmer who is leaving Angular for React?  Good luck.  You think Angular is bad.  React makes all those changes you dread without changing the major number.&lt;/p&gt;
&lt;h2 id=&#34;What-would-it-be-like-if-…&#34;&gt;&lt;a href=&#34;#What-would-it-be-like-if-…&#34; class=&#34;headerlink&#34; title=&#34;What would it be like if …&#34;&gt;&lt;/a&gt;What would it be like if …&lt;/h2&gt;&lt;p&gt;Just imagine with me what it would be like if nothing ever changed.  How far back do you want to go?  How about back to where I started programming.  OK, that was 29 years ago.  I started programming on DOS 3.1 using Clipper (that’s a dBase III compiler).  We had 640K (that’s 640,000 bytes, not megs, not gigs) to program in.  We used overlay tricks to cram programs that were three times that size into the computer.  There was no GUI and what graphics we did have were incredibly grainy.  You were lucky if you had color.  There was no Internet, that was still the “property” of the colleges and the universities.  No Google to find answers to your questions.  No blogs.&lt;/p&gt;
&lt;p&gt;No cell phones.&lt;/p&gt;
&lt;p&gt;No social media.&lt;/p&gt;
&lt;p&gt;And all of that was less than 30 years ago.&lt;/p&gt;
&lt;p&gt;And yet, the way many people act, they would like things to stay the same.  And I ask, “Why?”  So that 30 years from today we are still struggling with the same issues we are today?&lt;/p&gt;
&lt;h2 id=&#34;Maturity&#34;&gt;&lt;a href=&#34;#Maturity&#34; class=&#34;headerlink&#34; title=&#34;Maturity&#34;&gt;&lt;/a&gt;Maturity&lt;/h2&gt;&lt;p&gt;Every new technology goes through essentially the same process.&lt;/p&gt;
&lt;p&gt;At first, it is brand new.  No one really knows the best way to use it.  Some are better planned than others, others were accidents and were subject to more discovery than others.  JavaScript was one of those that was more of an accident.  So, we’ve spent a lot of time trying to figure out the best way to use it.  Think about this, if we had known then what we know now, don’t you think JavaScript would have been designed differently from the beginning? At some point the new technology either dies, or matures enough that people start experimenting with how to use it best.  This is the place where design patterns are developed and features are added to the language.  This is the part of the cycle I love and is generally where I tend to jump into the technology.&lt;/p&gt;
&lt;p&gt;Eventually the technology matures and gets boring.  This is where I tend to jump off.  Java and .NET are in this phase.  The patterns for both are well established.  What features are being added are at the “nice to have” level.  But generally everything most people need to be able to do can already be done with what is available.&lt;/p&gt;
&lt;p&gt;We are currently at the beginning of the experimental phase.  Expect to see A LOT of change in the next several years.  If you don’t like it, move to a more mature technology that won’t change so much on you.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;The final factor that magnifies all of the problems with JavaScript I’ve mentioned is that for way too long, JavaScript has been the language of Script Kiddies.  These are “programmers” who think that because they can achieve some sort of animation or validation on an HTML page by copy and pasting JavaScript they are real programmers.  So when someone with much more experience comes along and shows them a better way to program, instead of trying to learn they assert that this new way is wrong, or ridiculous, or declare they are going to take their toys and go to some other castle.&lt;/p&gt;
&lt;p&gt;The problem is, all the castles are now occupied by Kings and Queens instead of children who don’t know any better.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/awesome-angular2-architecture-options-and-opinions/</guid>
            <title>Awesome Angular2 Architecture Options and Opinions</title>
            <link>http://davembush.github.com/awesome-angular2-architecture-options-and-opinions/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>archietcture</category>
            <pubDate>Tue, 27 Dec 2016 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;On the subject of Angular2 Architecture, the perception is that Angular 2 is a highly-opinionated architecture. But even though there is a &lt;a href=&#34;/angular.io/styleguide&#34;&gt;style guide for Angular 2&lt;/a&gt;, there are a lot of decisions that still need to be made when working on any but the most trivial of applications. And even then, since most applications take on a life of their own, one could make the case that you need to make these decisions for any application you are building regardless of the initial size. Applications grow up. But, that’s another blog post&lt;/p&gt;
&lt;p&gt;I’ve identified, and have formed opinions about 5 areas that Angular 2 leaves open for decisions. Areas that if you don’t spend time considering the choices and making decisions could cost you in the future&lt;/p&gt;
&lt;p&gt;The five areas I’ve identified are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Handling Forms&lt;/li&gt;
&lt;li&gt;Page State Management&lt;/li&gt;
&lt;li&gt;Component State Management&lt;/li&gt;
&lt;li&gt;Data Flow&lt;/li&gt;
&lt;li&gt;Client Side Data&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;![](/uploads/2016/12/image-2.png &#34;Awesome Angular2 Architecture Options and Opinions&#34;) Photo via [africaniscool](//pixabay.com/en/users/africaniscool-216435/) via [Visualhunt.com](//visualhunt.com/photos/business/)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Handling-Forms&#34;&gt;&lt;a href=&#34;#Handling-Forms&#34; class=&#34;headerlink&#34; title=&#34;Handling Forms&#34;&gt;&lt;/a&gt;Handling Forms&lt;/h2&gt;&lt;p&gt;There are, at this point, two ways of dealing with forms in Angular 2. The first looks a lot like Angular 1 in that it is “Template Driven.” That is, everything you would describe about the form goes in the template. Using declarative syntax, the bulk of your form logic is declared in “HTML” like syntax and bound to your TypeScript code in a “code behind” kind of way. In a lot of ways, this will be very familiar to people who have coded ASP.NET or Angular 1&lt;/p&gt;
&lt;p&gt;But, the problem with using this method is that at some point, you won’t be able to do something you need to do using just a declarative syntax. The option is to use a “Model Driven” approach. These leaves the HTML parts in the template with a few tags to wire the template to the TypeScript code it is associated with, but the bulk of the processing is all in the TypeScript file. On the surface, you might think, “but Template Driven is much easier to think about.” But I assure you, using a predominately model driven approach has several advantages that the serious programmer will enjoy.&lt;/p&gt;
&lt;h3 id=&#34;More-control-over-your-forms&#34;&gt;&lt;a href=&#34;#More-control-over-your-forms&#34; class=&#34;headerlink&#34; title=&#34;More control over your forms.&#34;&gt;&lt;/a&gt;More control over your forms.&lt;/h3&gt;&lt;p&gt;The first advantage you will notice is that you’ll have more control over your form. One place you will notice this is with form validation. But, you’ll also notice greater control because you will have direct control on how the data moves in and out of your form instead of the “magic happens here” of data binding that can, with complex forms, become entirely too complex to reason about.&lt;/p&gt;
&lt;h3 id=&#34;Easier-to-test-the-forms&#34;&gt;&lt;a href=&#34;#Easier-to-test-the-forms&#34; class=&#34;headerlink&#34; title=&#34;Easier to test the forms.&#34;&gt;&lt;/a&gt;Easier to test the forms.&lt;/h3&gt;&lt;p&gt;Another huge advantage to using Model Driven forms is that you end up with forms that are MUCH easier to test. You can assume that the HTML is doing what it should and just test the TypeScript code. With a more template driven approach you’ll need to work out how to actually test your HTML. It can be done, and it isn’t really all that hard. But using a model driven approach is easier.&lt;/p&gt;
&lt;h3 id=&#34;Easier-to-reason-about-how-the-code-is-being-processed&#34;&gt;&lt;a href=&#34;#Easier-to-reason-about-how-the-code-is-being-processed&#34; class=&#34;headerlink&#34; title=&#34;Easier to reason about how the code is being processed.&#34;&gt;&lt;/a&gt;Easier to reason about how the code is being processed.&lt;/h3&gt;&lt;p&gt;Related to the two previous points, using Model Driven forms makes your cod much easier to reason about. Once again, that whole “magic happens here” approach of data-binding can get in the way, while using the model driven approach will allow you to be very direct about what gets updated when more directly.&lt;/p&gt;
&lt;h2 id=&#34;Page-and-Component-State-Management&#34;&gt;&lt;a href=&#34;#Page-and-Component-State-Management&#34; class=&#34;headerlink&#34; title=&#34;Page and Component State Management&#34;&gt;&lt;/a&gt;Page and Component State Management&lt;/h2&gt;&lt;p&gt;The temptation is to try to architect an Angular 2 project so that it looks something like how we used to write Angular 1 applications. That is, using an MV* architecture. Where this gets messed up is that the HTML template, the TypeScript and the CSS are really all part of the same class. Once you start thinking of them as one, MV* stops making as much sense&lt;/p&gt;
&lt;p&gt;The pattern I prefer here is one that uses the top-level View as a Controller View. That is, it is the one component that is responsible for being the traffic data cop. All the components under it are responsible for either rendering the state information they have been passed by the Controller View, updating that state information or firing event out when they’ve done something the outside world should know about&lt;/p&gt;
&lt;p&gt;The View Controller, on the other hand, is responsible for getting the data to and from where ever it needs to go&lt;/p&gt;
&lt;p&gt;By doing this, you end up with very testable, modular code and it becomes very clear that all your logic for a page, or sub-page, exist in one very well-defined section of your code. In fact, you can eliminate the need for most dependency injection by following this pattern. Any dependency injection you do need will probably end up in your Controller View.&lt;/p&gt;
&lt;h2 id=&#34;Data-Flow&#34;&gt;&lt;a href=&#34;#Data-Flow&#34; class=&#34;headerlink&#34; title=&#34;Data Flow&#34;&gt;&lt;/a&gt;Data Flow&lt;/h2&gt;&lt;p&gt;So far, the three main methods of data management that have emerged for Angular 2 seem to be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Direct Access&lt;/li&gt;
&lt;li&gt;Flux&amp;#x2F;Redux&lt;/li&gt;
&lt;li&gt;NgRX&amp;#x2F;Store&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Background&#34;&gt;&lt;a href=&#34;#Background&#34; class=&#34;headerlink&#34; title=&#34;Background&#34;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;h4 id=&#34;MVVM&#34;&gt;&lt;a href=&#34;#MVVM&#34; class=&#34;headerlink&#34; title=&#34;MVVM&#34;&gt;&lt;/a&gt;MVVM&lt;/h4&gt;&lt;p&gt;While MVVM was possible in Angular 1, and it works at the View level in Angular 2, the preferred model is what has come to be known as “One way data binding” which sounds odd, and really doesn’t describe what it does&lt;/p&gt;
&lt;p&gt;In short, while all the code you write may act like it is using two-way data-binding, the reality is that the code is only ever flowing in one direction&lt;/p&gt;
&lt;p&gt;The problem with true MVVM data binding is that when it is done correctly, data changes because other data changed&lt;/p&gt;
&lt;p&gt;This makes it very difficult to reason about the data in your application in all but the smallest of applications&lt;/p&gt;
&lt;p&gt;Further, to get this to work correctly, the resulting system is almost always slower than it needs to be. I’ve written before about &lt;a href=&#34;/4-reasons-to-drop-mvvm/&#34;&gt;why I think MVVM is a poor choice for design patterns&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;Direct&#34;&gt;&lt;a href=&#34;#Direct&#34; class=&#34;headerlink&#34; title=&#34;Direct&#34;&gt;&lt;/a&gt;Direct&lt;/h4&gt;&lt;p&gt;It is possible to write an application that kind of looks like old style three layer architectures that some might try to call MVC, but it is a poor man’s implementation at best, and only because Angular 2 implements its own Dependency Injection Container mechanism does the result end up being anything close to loosely coupled&lt;/p&gt;
&lt;p&gt;This implementation generally has the top-level component managing the state of the application, or at least the state of that particular page, and calling out directly to services that retrieve data from the server and manipulate data&lt;/p&gt;
&lt;p&gt;While it works, in larger applications it can be difficult to manage and respond to state changes throughout your application. Imagine if that could happen for “free”.&lt;/p&gt;
&lt;h4 id=&#34;Flux&#34;&gt;&lt;a href=&#34;#Flux&#34; class=&#34;headerlink&#34; title=&#34;Flux&#34;&gt;&lt;/a&gt;Flux&lt;/h4&gt;&lt;p&gt;The React community introduced a new pattern called Flux. There are multiple implementations of Flux, but the one that has become the defacto standard is called Redux. In general, Flux is made up of a series of publish subscribe mechanisms and ends up looking a lot like what the Gang of Four originally defined MVC to be while not actually being MVC.&lt;/p&gt;
&lt;p&gt;In very simple terms, the View fires an event to a “Dispatcher” which is a singleton. Each repository, or data store, or model (just depends on what you want to call it) registers a listener with the “Dispatcher” that lets the dispatcher know that it wants to know whenever something significant happens. These repositories are also singletons.&lt;/p&gt;
&lt;p&gt;When the Dispatcher receives a notification from a View, it notifies all the listeners in turn. The listeners look at the message they receive from the dispatcher to see if it is something they care about. If it is, they process the message accordingly.&lt;/p&gt;
&lt;p&gt;Once they are done, they fire an event to each Controller View that has registered a listener with them. The Controller View then updates the view based on the information it was passed in the event. I don’t want this to get too far down the road of “How” but to make the above paragraph just a bit clearer…&lt;/p&gt;
&lt;p&gt;There is a top-level View item that does no rendering. It is only responsible for responding to event notifications and passing the data down into the child views. You may hear this referred to as a View Controller, but it is more accurately a Controller View.&lt;/p&gt;
&lt;p&gt;Hopefully, you can see how this solves the problem up needing to force an update on a View because some other View changed the state of something. Because everyone who cares about the state is listening for a notification that something changes, the screen update “just works” and is much more reliable than a more MVVM style of updating the view and data.&lt;/p&gt;
&lt;h4 id=&#34;NgRX-x2F-Store&#34;&gt;&lt;a href=&#34;#NgRX-x2F-Store&#34; class=&#34;headerlink&#34; title=&#34;NgRX&amp;#x2F;Store&#34;&gt;&lt;/a&gt;NgRX&amp;#x2F;Store&lt;/h4&gt;&lt;p&gt;Reactive Extensions are available for multiple platforms, including JavaScript. You can read more about them at &lt;a href=&#34;//reactivex.io/&#34;&gt;http://reactivex.io/&lt;/a&gt; and I’ve written about &lt;a href=&#34;/reasons-to-use-rxjs-today/&#34;&gt;the reasons you want to use them&lt;/a&gt; before. But for purposes of this article, one of the problems that Reactive programming solves is cleanly dealing with the asynchronous nature of JavaScript&lt;/p&gt;
&lt;p&gt;Nowhere is this more obvious than with Ajax request.&lt;/p&gt;
&lt;p&gt;If you’ve ever needed to deal with having to wait for multiple Ajax request to complete before you do something meaningful with the data, you are going to love Reactive programming.&lt;/p&gt;
&lt;p&gt;Another thing that Reactive programming gives you is it makes everything a “stream”.&lt;/p&gt;
&lt;p&gt;In simple terms imagine working with an array that never ends and being able to respond appropriately to each element that come through that stream of arrays and you’ll have a good conceptual idea of what it means that everything is a stream. This is how Reactive programming deals with asynchronous calls and events. Add to this the concept that streams can be combined and you’ll start to understand why this cleans up the asynchronous nature of JavaScript.&lt;/p&gt;
&lt;p&gt;The result is that we can write code that fills the stream and other code that says, “when a particular item comes in on the stream, let me know about it.” Basically, an embellished publish&amp;#x2F;subscribe design pattern.&lt;/p&gt;
&lt;p&gt;From the description above, you should be able to see that Reactive programming can be used to implement Flux.&lt;/p&gt;
&lt;p&gt;This is exactly what NgRx&amp;#x2F;Store does. It allows us to concentrate on writing Reducers while it focuses on managing the dispatcher, event handling, and the various repositories, or stores, our application might need.&lt;/p&gt;
&lt;p&gt;As I’ve used NgRX&amp;#x2F;Store in my own applications, I’ve found that it further reduces the need for dependency injection and increases the testability of my code. The tradeoff is that there is a learning curve. But the time learning this new design pattern is well worth the effort.&lt;/p&gt;
&lt;h2 id=&#34;Client-Side-Data&#34;&gt;&lt;a href=&#34;#Client-Side-Data&#34; class=&#34;headerlink&#34; title=&#34;Client Side Data&#34;&gt;&lt;/a&gt;Client Side Data&lt;/h2&gt;&lt;p&gt;At some point, you are going to need to manage the data on the client side. There are several issue you might want to consider. But at the most fundamental layer, you will end up with data on the client side that looks like a relational data in a database. The only difference is that your data will be primarily JSON data. Eventually, you’ll want to join that data or filter it. How will you do that? One product you might consider is &lt;a href=&#34;//www.getbreezenow.com/&#34;&gt;Breeze&lt;/a&gt;. It does a lot of stuff that makes your client side data look more like a database. It is worth a look&lt;/p&gt;
&lt;p&gt;If you end up using NgRX&amp;#x2F;Store and RxJS, you may find that does everything you need. So that is another option. The advantage to using this method is you are no longer constrained by trying to make everything look like a relational database table even when it isn’t&lt;/p&gt;
&lt;p&gt;The other option, of course, is to use both for what they are good at.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Angular 2 brings a lot of new concepts. While it might be tempting to use coding patterns that seem more comfortable, I believe that the path that Angular 2 has chosen is the future of JavaScript specifically and the programming world in general.&lt;/p&gt;
&lt;p&gt;Just about everything that is new falls into the general category of “Functional Programming” and much like the switch from procedural programming to object oriented programming, there are going to be people who are not able to wrap their heads around the concepts. How many guys ended up using C++ syntax to write C code? However, the productivity gains once we make the jump to this new way of thinking about our code will be well worth both the learning curve and the possible loss of some older programmers who can’t or won’t be retrained.&lt;/p&gt;
&lt;p&gt;There is also a danger of not being able to retain good programmers because we are still stuck using design patterns that were popular in the past but have been superseded by ways the developer community at large considers “better.”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/dissecting-angular-2-modules/</guid>
            <title>Dissecting Angular 2 Modules</title>
            <link>http://davembush.github.com/dissecting-angular-2-modules/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>modules</category>
            <pubDate>Tue, 20 Dec 2016 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;In the new world of Angular 2, and even in the world of Angular.js, you might feel like the concept of a module is the most difficult to wrap your head around.&lt;/p&gt;
&lt;p&gt;This is especially if you’ve only ever written client side JavaScript code. Once you’ve learned why you need a module, the temptation is to use one module for all your code. I am guilty of doing that myself when I first started. But, many times using one module for your entire application is the wrong thing to do because it reduces the ability to reuse your code in other modules. Once you understand why modules exist, you’ll begin to reason about how to use modules appropriately.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/12/image-1.png &#34;Dissecting Angular 2 Modules&#34;)&lt;figcaption&gt;Photo credit: [Sappymoosetree](//www.flickr.com/photos/bahkubean/416801559/) via [Visual hunt](//visualhunt.com) / [CC BY-ND](//creativecommons.org/licenses/by-nd/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Why-Do-Modules-Exist&#34;&gt;&lt;a href=&#34;#Why-Do-Modules-Exist&#34; class=&#34;headerlink&#34; title=&#34;Why Do Modules Exist?&#34;&gt;&lt;/a&gt;Why Do Modules Exist?&lt;/h2&gt;&lt;p&gt;When the Angular 2 project started, modules did not exist, even though they had existed in Angular.js. But as the RC process continued, it became obvious that modules were going to be necessary. We could have written our code without modules, but the amount of code we would need to repeat to get the same functionality would be dramatically greater.&lt;/p&gt;
&lt;p&gt;It also often becomes more complex and harder to reason about.&lt;/p&gt;
&lt;p&gt;So, what exactly do modules get us? If you’ve worked in languages in the past that have the concept of a namespace, it might help you to think of a module as a substitute for namespaces. They allow us to group similar functionality together, and specify what functionality that belongs to the module can be accessed by the outside world. For example, I recently wrote a component that all the applications in our organization will be starting out with. It is composed of multiple components, but I only want the top most component exposed to the developers who will be using it.&lt;/p&gt;
&lt;p&gt;So, modules allow us to both group code together and encapsulate code so that code that might otherwise be publicly available becomes private to the outside world.&lt;/p&gt;
&lt;h2 id=&#34;Dissecting-Modules&#34;&gt;&lt;a href=&#34;#Dissecting-Modules&#34; class=&#34;headerlink&#34; title=&#34;Dissecting Modules&#34;&gt;&lt;/a&gt;Dissecting Modules&lt;/h2&gt;&lt;p&gt;You may remember that in the &lt;a href=&#34;//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-4&#34;&gt;application we’ve been working on&lt;/a&gt; we’ve already created a module. In fact, when you create any application using the CLI, there will always be this top-level module.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@NgModule(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  declarations: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AppComponent&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  imports: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BrowserModule,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FormsModule,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HttpModule,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    GettingStartedWithAngular2RoutingModule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  providers: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  bootstrap: [AppComponent]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AppModule&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The declarations section simply specifies the components that this module owns. In the case of our app so far, the only component it owns is the top-level AppComponent.&lt;/p&gt;
&lt;p&gt;The imports section loads modules this module is going to need available in the components it owns. Many times, the components we need access to are only needed in our templates. Prior to using modules, we would need to include our components in our TS files just so the templates could access them. By loading them in the module, we can load modules once even though we may have multiple components that are part of the module that may need them.&lt;/p&gt;
&lt;p&gt;Since our module is not using any injectables, the providers section is empty. But that is what the providers section is for. Any class that we will need to inject in the constructor of other code would be listed in this providers section.&lt;/p&gt;
&lt;p&gt;Finally, the bootstrap section has the one component this module should load. This only shows up in the top-level module. While it is needed, I’ve yet to figure out why. We’ve already loaded the module, and therefore the component and the tag for the top-level component is in our index.html file, so I can’t see the point of specifying it here yet again.&lt;/p&gt;
&lt;p&gt;You may wonder, “How does this AppModules get loaded?” Go back to the root of your app directory and look for the main.ts file. You’ll see that we loaded it in there.&lt;/p&gt;
&lt;p&gt;platformBrowserDynamic().bootstrapModule(AppModule);&lt;/p&gt;
&lt;p&gt;You might wonder why this code is not included in the application module. This is because you might not always want to use platformBrowserDynamic(). If you are using Web Workers to run your code or using Ahead of Time compile, you would use two other methods of bootstrapping the module. I’ve only mentioned three here, but there are others.&lt;/p&gt;
&lt;p&gt;The next property you are likely to see in a module declaration is the exports section:&lt;/p&gt;
&lt;p&gt;exports:  [Edit]&lt;/p&gt;
&lt;p&gt;This tells the module that has imported this module that it can use the Edit component. We didn’t need this in the app module because the app module isn’t being used by another module. It is the top most module and really can’t be used by any other module by definition.&lt;/p&gt;
&lt;h2 id=&#34;Routing-and-Modules&#34;&gt;&lt;a href=&#34;#Routing-and-Modules&#34; class=&#34;headerlink&#34; title=&#34;Routing and Modules&#34;&gt;&lt;/a&gt;Routing and Modules&lt;/h2&gt;&lt;p&gt;Several weeks ago we took a look at &lt;a href=&#34;/angular-2-lazy-loading/&#34;&gt;implementing Lazy Loading by modifying our routing module&lt;/a&gt;. What is unique about this situation is that every time you lazy load a module, it becomes the top most module, so once again, there is no real need to export it.&lt;/p&gt;
&lt;h2 id=&#34;When-Should-Modules-Be-Used&#34;&gt;&lt;a href=&#34;#When-Should-Modules-Be-Used&#34; class=&#34;headerlink&#34; title=&#34;When Should Modules Be Used?&#34;&gt;&lt;/a&gt;When Should Modules Be Used?&lt;/h2&gt;&lt;p&gt;As I said when I started, the temptation is to just put all our import statements that our application is going to need in our app module. But that seems like an extremely lazy way of writing code. And when you go to write lazy loaded modules, that’s not going to work so well for you. So, there are two ways you can approach this.&lt;/p&gt;
&lt;p&gt;First, you can just create a module for every component you write. It is probably over kill, but it would be hard to go too far wrong here. Given the choice between too many modules and not enough, I’d error on the side of too many. At least it gives you the flexibility do make necessary changes in the future.&lt;/p&gt;
&lt;p&gt;But the more reasonable approach would be one module per feature and a module for common stuff. For example, if you are writing a component library, you would probably be safe writing a module for all the components in your library so you only have to import the library module and all your component would automatically become available to you. You’ll want to at least want to have one module per route so that you can lazy load the routes if you decide that is necessary.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/reasons-to-use-rxjs-today/</guid>
            <title>Reasons to use RxJS Today</title>
            <link>http://davembush.github.com/reasons-to-use-rxjs-today/</link>
            <category>javascript</category>
            <category>rxjs. angular 2</category>
            <pubDate>Tue, 13 Dec 2016 07:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;If you’ve started looking at Angular 2, one of the things that you’ll notice is that &lt;a href=&#34;//github.com/Reactive-Extensions/RxJS&#34;&gt;RxJS&lt;/a&gt; has gotten a bit of a toe hold in the framework. This becomes apparent the first time you try to access data. Gone is the $http service that returns a promise. Instead, we now have a service that returns an Observable. Now, writing the code to access the server is arguably easy to learn. But, as you travel down the rabbit hole that is Angular 2, you realize that RxJS shows up in places as disperse as &lt;a href=&#34;//github.com/ngrx/store&#34;&gt;NgRX&amp;#x2F;Store&lt;/a&gt;, handling events, and as we’ve already mentioned, AJAX calls.&lt;/p&gt;
&lt;p&gt;Because it shows up in so many places, this new API is set to be the next thing we will need to learn to be effective JavaScript programmers. But, should we?&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/12/image.png &#34;Reasons to use RxJS Today&#34;)&lt;figcaption&gt;Photo credit: [Dace Kiršpile](//www.flickr.com/photos/91035846@N05/9374805577/) via [Visualhunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;A-Story&#34;&gt;&lt;a href=&#34;#A-Story&#34; class=&#34;headerlink&#34; title=&#34;A Story&#34;&gt;&lt;/a&gt;A Story&lt;/h2&gt;&lt;p&gt;As I first started to dig into using RxJS, I found myself being more confused than I expected. And yet, I was convinced that this new way of thinking about my code would be well worth the effort.&lt;/p&gt;
&lt;p&gt;It reminds me of the days when we switched from Procedural Programming (PP) to Object Oriented Programming (OOP). Yes, I’ve been coding that long.&lt;/p&gt;
&lt;p&gt;Somewhere around the third year of my career, C++ finally became popular enough that both Borland and Microsoft produced a C++ compiler and framework for developing Windows applications. I remember falling in love with it. Maybe I hadn’t been using procedural programming long enough to make switching difficult. Maybe I just thought about code as Objects anyhow. But, whatever the reason, I couldn’t figure out why some of my peers had such a hard time grasping the concepts.&lt;/p&gt;
&lt;p&gt;As I was working on learning RxJS, I found myself feeling like I was either too old to learn a new trick, or I was just getting dumb in my old age. Why is it so hard? Fortunately, I found a site that helped me understand RxJS specifically and Reactive Functional programming in general. I am no longer in the class of “old farts who can’t learn new stuff.” And now that I understand, everything is starting to look for Reactive.&lt;/p&gt;
&lt;h2 id=&#34;What-Is-RxJS&#34;&gt;&lt;a href=&#34;#What-Is-RxJS&#34; class=&#34;headerlink&#34; title=&#34;What Is RxJS?&#34;&gt;&lt;/a&gt;What Is RxJS?&lt;/h2&gt;&lt;p&gt;If you’ve ready anything about RxJS or any of the ReactiveX libraries that are available for other languages, you’ll find that most of them start off by saying that RxJS “makes everything a stream.” Which, while that may be technically true, isn’t very helpful. What would it look like if we redefine that? The best way to think about RxJS is that it makes everything a special type of collection called an Observable.&lt;/p&gt;
&lt;h3 id=&#34;Arrays&#34;&gt;&lt;a href=&#34;#Arrays&#34; class=&#34;headerlink&#34; title=&#34;Arrays&#34;&gt;&lt;/a&gt;Arrays&lt;/h3&gt;&lt;p&gt;In JavaScript, you are already deal with a special type of collection called an Array.&lt;/p&gt;
&lt;p&gt;Now, let me lead you though the thought process you’ll need to travel down to see how RxJS is going to be helpful for you.&lt;/p&gt;
&lt;p&gt;For now, let’s just assume everything is an array. This will make the jump easier.&lt;/p&gt;
&lt;p&gt;In pure JavaScript, you are typically writing code that either looks like this: (old school)&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someArray = [...data here...];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; array.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = someArray[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ... &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; something &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; the data ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Or using newer syntax:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someArray = [...data here...];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;someArray.&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ...&lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; something &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; the data...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;//code.tutsplus.com/tutorials/what-they-didnt-tell-you-about-es5s-array-extras--net-28263&#34;&gt;Array Extras&lt;/a&gt; takes some of the code we typically write in these loops and standardizes them so we can reduce the amount of code we need to write, while still achieving the same goals.&lt;/p&gt;
&lt;p&gt;For example, you might loop through an array to generate a new array. For that you would use map(). Or you might loop through an array to filter out elements. That would be filter().&lt;/p&gt;
&lt;p&gt;The great thing about this Array Extra functions is that they each return a new array. This means you don’t impact the original array and you can chain these functions together:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someArray = [...data here...];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; transformedAndFiltered = someArray&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;)&amp;#123;...filter code...&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;)&amp;#123;...tranform code...&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;``&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;` javascript&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;`&lt;/span&gt;someArray&lt;span class=&#34;string&#34;&gt;` still has the original data and transformedAndFiltered has the new data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;### Events&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;Now, imagine we create a system where we have arrays that never end. Instead of using the old school for/next loop, we would be left with only being able to use a forEach, or one of the Array Extras function. Which would be fine. The function would just wait until the next element showed up or it got some sort of signal that there wouldn’t be any more elements.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;This is exactly what RxJS does. So, now we can listen for events as though they were arrays.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;``&lt;/span&gt; javascript&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fromEvent&lt;/span&gt;(element,&lt;span class=&#34;string&#34;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt;)&amp;#123;...&lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; something &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; response...&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Pretty cool, right? If you need to, you can place a filter prior to the subscribe so that you only get events that meet the exact condition. In fact, if any of the functions you pass as parameters have conditional logic in them, this is a good indication that you are not yet thinking in a Reactive way.&lt;/p&gt;
&lt;h3 id=&#34;Asynchronous-Code&#34;&gt;&lt;a href=&#34;#Asynchronous-Code&#34; class=&#34;headerlink&#34; title=&#34;Asynchronous Code&#34;&gt;&lt;/a&gt;Asynchronous Code&lt;/h3&gt;&lt;p&gt;Now, as I’ve already mentioned, RxJS also lets you deal with asynchronous code as though it is an array. This works pretty much as you would expect on the surface, but there are some added advantages to using RxJS to deal with asynchronous calls. The most significant of them being that you can achieve better flow of control.&lt;/p&gt;
&lt;p&gt;If you’ve ever dealt with needing to make multiple calls to the server for data prior to allowing the user to use the screen, you’ll appreciate that you can make all the calls at once and only continue once all of them have completed. Or, you could make the calls one after the other, if you have calls that depend on each other. Yes, promises do this as well, but the Reactive method is a bit cleaner.&lt;/p&gt;
&lt;p&gt;The other way RxJS improves on promises is that you can cancel a request instead of just letting it run even though you no longer want the data. This means, you won’t be tying up bandwidth waiting for data to come back when you want newer data instead.&lt;/p&gt;
&lt;p&gt;Finally, using RxJS, you can easily retry a failing request, as well as deal with failing request using the .retry() and catch() functions.&lt;/p&gt;
&lt;h2 id=&#34;Functional-Matters&#34;&gt;&lt;a href=&#34;#Functional-Matters&#34; class=&#34;headerlink&#34; title=&#34;Functional Matters&#34;&gt;&lt;/a&gt;Functional Matters&lt;/h2&gt;&lt;p&gt;Now, all of this is great. But the side effect of the fact that RxJS is both Functional and Reactive is that it not only reduces the amount of code that you need to write, but it also produces code that is less prone to errors and easier to test.&lt;/p&gt;
&lt;p&gt;Let me explain.&lt;/p&gt;
&lt;p&gt;We’ve already shown above that all the RxJS functions return new Observables. I kind of brushed over this. But this is a big deal. Because the original data in the Observable is never modified, you never run the risk of modifying the data that some other part of your code is expecting to never be modified. This is even more important when you are working on a larger project with multiple developers. This means all your assumptions about your data will remain true when your team commits to using functional paradigms throughout your code base.&lt;/p&gt;
&lt;p&gt;But this effect doesn’t just impact the observable code base. What I’ve found is that the more code you write that is functional and obeys the immutable rules, the easier the rest of your code is to test. Specifically, I find myself using less dependency injection simply because I am using immutable objects. Because I can depend on the code not having any side effects, my functional code is easier to test and my none functional, more object-oriented code, is easier to test because it has fewer dependencies.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;The most difficult thing about using RxJS or any other Reactive Functional library is the fact that it requires you to think a little bit differently about the problems you are solving. But the advantages far outweigh the learning curve. Don’t be like so many of the script kiddies on the web who complain every time they must learn something new. Step up to the challenge. Your customers will thank you. The guy who maintains your code in the future will thank you. Your future self will thank you.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/unit-testing-an-angular-2-cli-project/</guid>
            <title>Unit Testing an Angular 2 CLI Project</title>
            <link>http://davembush.github.com/unit-testing-an-angular-2-cli-project/</link>
            <category>unit test</category>
            <category>angular</category>
            <category>javascript</category>
            <category>typescript</category>
            <pubDate>Tue, 22 Nov 2016 19:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;This week we want to continue our series about Angular 2 by looking at the Unit Testing capabilities that Angular 2 provides for us. What we want to cover today is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tweaking Karma to avoid using the Browser Window&lt;/li&gt;
&lt;li&gt;Code Coverage&lt;/li&gt;
&lt;li&gt;Tips to testing components&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article was written using Angular CLI version 1.0.0-beta.20-4 (Tip, if you are upgrading on windows, &lt;code&gt;rm –rf node_modules dist temp&lt;/code&gt; just means to delete the three directories. You can do that part manually, or install bash for Windows and run the command in bash.)&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/11/image-3.png &#34;Unit Testing an Angular 2 CLI Project&#34;)&lt;figcaption&gt;Photo credit: [jimmiehomeschoolmom](//www.flickr.com/photos/jimmiehomeschoolmom/4427775569/) via [VisualHunt.com](//visualhunt.com) / [CC BY-NC-SA](//creativecommons.org/licenses/by-nc-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Tweaking-Karma&#34;&gt;&lt;a href=&#34;#Tweaking-Karma&#34; class=&#34;headerlink&#34; title=&#34;Tweaking Karma&#34;&gt;&lt;/a&gt;Tweaking Karma&lt;/h2&gt;&lt;p&gt;Open up the project we’ve been working on.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/getting-started-angular-2/&#34;&gt;Getting Started With Angular 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@davembush/adding-css-and-javascript-to-an-angular-cli-project-2b843a8283f3&#34;&gt;Adding CSS and JavaScript to an Angular CLI Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Drop into command line mode and run &lt;code&gt;ng test&lt;/code&gt; The first thing you will notice is that this brings up the Chrome browser to run your test. I don’t know about you, but I really dislike having a browser window up. I have enough windows running on my screen as it is. This is the first thing we need to fix. To do this we are going to install PhantomJS.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save-dev phantomjs-prebuilt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then, we need to tell karma to use PhantomJS. This is a two step process. First, we install the karma phantomjs runner &lt;code&gt;npm install --save-dev karma-phantomjs-launcher&lt;/code&gt; Next, we modify the karma.conf.js file Change &lt;code&gt;require(&amp;#39;karma-chrome-launcher&amp;#39;),&lt;/code&gt; and &lt;code&gt;browsers: [&amp;#39;Chrome&amp;#39;],&lt;/code&gt; To &lt;code&gt;require(&amp;#39;karma-phantomjs-launcher&amp;#39;),&lt;/code&gt; and &lt;code&gt;browsers: [&amp;#39;PhantomJS&amp;#39;],&lt;/code&gt; Last, since we are not using the browser, we will need a better reporting mechanism.&lt;/p&gt;
&lt;p&gt;To do this we will install spec reporter.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save-dev karma-spec-reporter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and we replace this line in karma.conf.js&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;reporters&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; config.angularCli &amp;amp;&amp;amp; config.angularCli.codeCoverage&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          ? &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&amp;#x27;progress&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &amp;#x27;karma-remap-istanbul&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&amp;#x27;progress&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;reporters&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; config.angularCli &amp;amp;&amp;amp; config.angularCli.codeCoverage&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          ? &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&amp;#x27;spec&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &amp;#x27;karma-remap-istanbul&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&amp;#x27;spec&amp;#x27;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And we add a require line at the top of the file with the other requires&lt;/p&gt;
&lt;p&gt;&lt;code&gt;require(&amp;#39;karma-spec-reporter&amp;#39;),&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, when we run &lt;code&gt;ng test&lt;/code&gt; We get a nice text report in our terminal windows instead of the browser popping up.&lt;/p&gt;
&lt;h2 id=&#34;Code-Coverage&#34;&gt;&lt;a href=&#34;#Code-Coverage&#34; class=&#34;headerlink&#34; title=&#34;Code Coverage&#34;&gt;&lt;/a&gt;Code Coverage&lt;/h2&gt;&lt;p&gt;To get a code coverage report for our test use the command ng test –cc The code coverage files will end up in a directory named ‘coverage’ hanging off the root of your project. You can view the coverage&amp;#x2F;index.html file to see how well your files are covered.&lt;/p&gt;
&lt;h2 id=&#34;Testing-Components&#34;&gt;&lt;a href=&#34;#Testing-Components&#34; class=&#34;headerlink&#34; title=&#34;Testing Components&#34;&gt;&lt;/a&gt;Testing Components&lt;/h2&gt;&lt;p&gt;For the purposes of this article, I’m going to assume you have some familiarity with creating Jasmine tests. If you don’t the documentation for Jasmine is pretty easy to understand.&lt;/p&gt;
&lt;p&gt;But what I do want to cover here is how we test components.&lt;/p&gt;
&lt;p&gt;If you open up the &lt;code&gt;app.component.spec.ts&lt;/code&gt; file, you’ll notice a &lt;code&gt;TestBed&lt;/code&gt; class that gets used quite a bit. Since your test isn’t going to test modules because they only package our other code together, you need some way of faking that out so you can test the components. To do that, you use&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;TestBed&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;configureTestingModule&lt;/span&gt;( &amp;#123; &lt;span class=&#34;attr&#34;&gt;declarations&lt;/span&gt;: [ &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt; ] &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Which just sets up the declarations you need to reference the component you need to test. You can put anything in this block that you would normally put in your module definition.&lt;/p&gt;
&lt;p&gt;Another &lt;code&gt;TestBed&lt;/code&gt; method you’ll see is&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;TestBed&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createComponent&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;which you probably have guessed, creates an instance of the module so you can test it. The object it creates has a &lt;code&gt;debugElement&lt;/code&gt; property hanging off of it. There are two properties that hang off this object that you’ll make use of a lot. &lt;code&gt;componentInstance&lt;/code&gt; is the actual instance of the component that you created. Any properties and methods that your component has will be available off of &lt;code&gt;componentInstance&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The other object that will be available is &lt;code&gt;nativeElement&lt;/code&gt;. This is the DOM element that the component renders to and you can use &lt;code&gt;querySelector(cssSelectorGoesHere)&lt;/code&gt; to select the first element matches the selector or &lt;code&gt;querySelectorAll(cssSelectorGoesHere)&lt;/code&gt; to retrieve an array of elements that match.&lt;/p&gt;
&lt;p&gt;Of course, a test isn’t any good if you don’t make changes to the component and test for them. And for that we have &lt;code&gt;detectChanges()&lt;/code&gt;. You’ll see that being used in the third test. You’ll want to use that before you &lt;code&gt;expect()&lt;/code&gt; anything.&lt;/p&gt;
&lt;h2 id=&#34;Ready-Set-…&#34;&gt;&lt;a href=&#34;#Ready-Set-…&#34; class=&#34;headerlink&#34; title=&#34;Ready, Set, …&#34;&gt;&lt;/a&gt;Ready, Set, …&lt;/h2&gt;&lt;p&gt;Now that we have some way of testing our code, we can actually begin to write so. Don’t forget to subscribe to the email I sent out so you don’t miss the next article in this series.&lt;/p&gt;
&lt;p&gt;Code so far is located at &lt;a href=&#34;//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step2&#34;&gt;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step2&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/getting-started-with-angular-2/</guid>
            <title>Getting Started with Angular 2</title>
            <link>http://davembush.github.com/getting-started-with-angular-2/</link>
            <category>angular</category>
            <category>javascript</category>
            <pubDate>Tue, 25 Oct 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Angular 2 is finally released. But the biggest problem with learning Angular 2 is that it is a “Choose your own adventure” kind of framework. And while React has a similar problem, I think Angular has out done them. This means that you can learn bits and pieces of Angular 2, but it will be a while before you get a cohesive understanding of what choices you need to make, which choices are the right choices, and why all of this matters.&lt;/p&gt;
&lt;p&gt;And all of this is even more difficult if you are a relatively new programmer. I’m talking those of you who have less than 5 years of experience and even some of you who have less than 10 years of experience.&lt;/p&gt;
&lt;p&gt;So, what I thought I’d do to address this very real problem is to assemble a very opinionated Angular 2 tutorial. Over the next several weeks I plan to show you how to create a simple CRUD application using Angular 2 in a way that will scale up to larger projects. While I may mention some of the other options along the way, what you’ll end up with is the “right way.” OK. To be fair, most of what I consider “right” is opinion. Some very smart people disagree with me. But, some other very smart people agree with me too.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/10/image-2.png &#34;Getting Started with Angular 2&#34;)&lt;figcaption&gt;Photo credit: [mikecogh](//www.flickr.com/photos/mikecogh/11300349426/) via [VisualHunt](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;  Here’s where I think we are going with this.

&lt;ul&gt;
&lt;li&gt;Getting the project set up.&lt;/li&gt;
&lt;li&gt;Building, Running, Testing&lt;/li&gt;
&lt;li&gt;Adding in external packages&lt;/li&gt;
&lt;li&gt;Client Side Routing&lt;/li&gt;
&lt;li&gt;Building Components&lt;/li&gt;
&lt;li&gt;Using Reactive Programming&lt;/li&gt;
&lt;li&gt;Managing Application State&lt;/li&gt;
&lt;li&gt;Accessing the Server&lt;/li&gt;
&lt;li&gt;Using Web Workers for more Responsive Applications&lt;/li&gt;
&lt;li&gt;Ahead of Time (AoT) Compiling&lt;/li&gt;
&lt;li&gt;Server Side Rendering&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article, let’s focus on just getting a basic application up and running.&lt;/p&gt;
&lt;h2 id=&#34;Prerequisites&#34;&gt;&lt;a href=&#34;#Prerequisites&#34; class=&#34;headerlink&#34; title=&#34;Prerequisites&#34;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;If you haven’t installed Node yet, I suggest you do that now. &lt;a href=&#34;/you-can-start-using-node-today/&#34;&gt;Here’s an article on how to install Node if you are new to Node&lt;/a&gt;. Even if you think you know how to install node (“How hard can that be?”) read the article. You might learn something. I would recommend installing Node 6.x as of this writing or whatever the latest version is when you are reading this.&lt;/p&gt;
&lt;p&gt;You’ll also want to get an editor that has good support for TypeScript, HTML, and CSS. I’ve heard a lot of good things about VS Code, but the editor I use is WebStorm. If you are a .NET programmer, Visual Studio will get you kind of close. If you can’t or won’t switch to WebStorm for your JavaScript development, at least get the ReSharper plugin for Visual Studio. You’ll also need plugins to enable Node and TypeScript development from within Visual Studio if you haven’t installed them already.&lt;/p&gt;
&lt;p&gt;For those of you in the Java world using Eclipse. Eclipse has the worse JavaScript support I’ve ever seen. I understand that it is familiar, but just about any other JavaScript editor will be better.&lt;/p&gt;
&lt;p&gt;Anyhow, I’m using WebStorm. If you are using another editor, you are on your own.&lt;/p&gt;
&lt;h2 id=&#34;Angular-CLI&#34;&gt;&lt;a href=&#34;#Angular-CLI&#34; class=&#34;headerlink&#34; title=&#34;Angular CLI&#34;&gt;&lt;/a&gt;Angular CLI&lt;/h2&gt;&lt;p&gt;Now that you have Node installed and you have a reasonably good JavaScript&amp;#x2F;TypeScript editor, the next thing you will want to install is the &lt;a href=&#34;//github.com/angular/angular-cli&#34;&gt;Angular CLI&lt;/a&gt;. As of this writing, the Angular CLI is at Beta .17 so I can understand that you might be hesitant to use it. But it is done enough that we can use it to get our project going with MUCH less effort than if we did it by hand. And hopefully, the parts we need will get completed by the time we need them.&lt;/p&gt;
&lt;p&gt;There are a few other practical reasons for using the CLI rather than coding it yourself. First, the CLI conforms to the Angular 2 style guide. This was developed by the team that wrote Angular 2. Who better to tell us what the code should look like? And while I may not always agree with some of the recommendations, I understand why they are there and I’m willing to live with them. Hopefully, organizations coding Angular 2 applications will conform to these conventions so that anyone who writes Angular 2 code will already know them as they move from one organization to another.&lt;/p&gt;
&lt;p&gt;The instructions are on the web site for installing. But here is what you need to do in a little more detail.&lt;/p&gt;
&lt;p&gt;First, install the angular cli globally.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install -g angular-cli&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;By the way, when you run &lt;code&gt;npm&lt;/code&gt; commands, or &lt;code&gt;ng&lt;/code&gt; commands later on, you’ll do that from the command line.&lt;/p&gt;
&lt;p&gt;The next thing you’ll want to do is create a new project using the Angular CLI. This is where things are not as clear as I would have liked. Probably because their development environment looks different than mine. The official documents say to run these commands&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ng new PROJECT_NAME cd PROJECT_NAME ng serve&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where PROJECT_NAME is the name you want to give your project. This project name will become a sub directory under the directory you executed the command from. But what if you want to create a new project first, using your editor, and then you want to run &lt;code&gt;ng new&lt;/code&gt;? My first attempt was to run ng new using the directory where my project existed. But that just gave me an error message that said the directory already existed. Yeah, I know.&lt;/p&gt;
&lt;p&gt;Then I tried running &lt;code&gt;ng new&lt;/code&gt; without the directory name inside the project directory. The result of that was being told that I forgot a parameter.&lt;/p&gt;
&lt;p&gt;Well, what about using &lt;code&gt;ng new&lt;/code&gt; with “.” as a parameter, meaning “current directory”. Nope, “.” is not a valid name. It took me a while to figure this out.&lt;/p&gt;
&lt;p&gt;But you can execute &lt;code&gt;ng init&lt;/code&gt; from within the directory your existing project is in and it will scaffold out your application in your current directory.&lt;/p&gt;
&lt;h2 id=&#34;NG-SERVE&#34;&gt;&lt;a href=&#34;#NG-SERVE&#34; class=&#34;headerlink&#34; title=&#34;NG SERVE&#34;&gt;&lt;/a&gt;NG SERVE&lt;/h2&gt;&lt;p&gt;One of the commands you’ll see above is &lt;code&gt;ng serve&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You may wonder what this is and why you would want to run it. Don’t I just deploy my application on my own server? Well, yes, eventually you will. But while you are developing the application you will want or need to test it locally.&lt;/p&gt;
&lt;p&gt;Since Angular 2 requires a build and packaging step, you’ll want to automate this as much as possible. So, before you toss the idea of using &lt;code&gt;ng serve&lt;/code&gt; out, let’s take a look at what this gives you.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;ng serve&lt;/code&gt; gives you a web server to run your application. By default, this runs on &lt;a href=&#34;//localhost:4200&#34;&gt;http://localhost:4200&lt;/a&gt;. You can try this now.&lt;/p&gt;
&lt;p&gt;Oh wait! What’s it doing? It looks like it is doing way more than starting a web server.&lt;/p&gt;
&lt;p&gt;Well, yes, it is. You see &lt;code&gt;ng serve&lt;/code&gt; automatically compiles all of your typescript files and bundles all of your resulting files together every time a file changes. The first time you run &lt;code&gt;ng serve&lt;/code&gt;, it will do this because everything has changed. But it gets better, it will also refresh whatever browser is looking at the application so that your browser will always reflect whatever changes you’ve made in your source code.&lt;/p&gt;
&lt;p&gt;There are a few specific cases where this won’t work, but generally this works out pretty well.&lt;/p&gt;
&lt;p&gt;If you make a change and it doesn’t get reflected as you would expect, try restarting the server. That will probably fix the issue.&lt;/p&gt;
&lt;p&gt;The other thing you can do is that you can configure the server to proxy request to another server. This would be useful if you want to pull data from your Java, ASP.NET, or other platform while still running ng serve for the client side development work.&lt;/p&gt;
&lt;p&gt;If everything is working so far, you should be able to pull up your browser and run the application on &lt;a href=&#34;//localhost:4200&#34;&gt;http://localhost:4200&lt;/a&gt; and see a message “app works!” It really is just the barest of all possible applications.&lt;/p&gt;
&lt;h2 id=&#34;What-Else&#34;&gt;&lt;a href=&#34;#What-Else&#34; class=&#34;headerlink&#34; title=&#34;What Else?&#34;&gt;&lt;/a&gt;What Else?&lt;/h2&gt;&lt;p&gt;If you are curious like I am, you may have taken a look around the file structure to see what was installed. One directory you may have noticed is the “e2e” directory. This is where your end to end tests go. You can run these using the command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ng e2e&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Just make sure you have already run ng serve in another window. You can also run the unit tests that are in *.spec.ts files by running the command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ng test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will run the tests using Jasmine in a Chrome browser.&lt;/p&gt;
&lt;p&gt;The final thing to note about the CLI is that it uses Webpack instead of System.JS to manage bundling and minification. As of this writing, the tour of heroes demo still uses System.JS so this might be a point of confusion for you. The good news is that Webpack is a bit more straight forward than System.JS and I believe you’ll find it a lot easier to use.&lt;/p&gt;
&lt;h2 id=&#34;Follow-Along&#34;&gt;&lt;a href=&#34;#Follow-Along&#34; class=&#34;headerlink&#34; title=&#34;Follow Along&#34;&gt;&lt;/a&gt;Follow Along&lt;/h2&gt;&lt;p&gt;The result of step one can be found on my GitHub account: &lt;a href=&#34;//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-1&#34; title=&#34;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-1&#34;&gt;https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step-1&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-2-thoughts/</guid>
            <title>Angular 2 Thoughts</title>
            <link>http://davembush.github.com/angular-2-thoughts/</link>
            <category>angular</category>
            <category>javascript</category>
            <pubDate>Tue, 04 Oct 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I was asked this past week what my thoughts were on Angular 2. I wrote early on about my impressions of Angular 2 when it was barely done enough to review. But now that I’ve been working with it for a while and know a bit more, what I want to discuss is more along the line of what it means to the average developer and, more importantly, organizations that are planning to use it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/09/image-3.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Options&#34;&gt;&lt;a href=&#34;#Options&#34; class=&#34;headerlink&#34; title=&#34;Options&#34;&gt;&lt;/a&gt;Options&lt;/h2&gt;&lt;p&gt;While like Angular 1, Angular 2 provides us with most of what we need to build an application. Angular 2 also provides us, out of the box, with very Angular 1 ish ways of putting together an application, complete with modules. What Angular 2 provides that isn’t quite so obvious going into your development is options.&lt;/p&gt;
&lt;p&gt;In angular 1, we had options at the GUI level. And while this is still true for Angular 2, this is not the only place where you will see options.&lt;/p&gt;
&lt;p&gt;In general, you can split your options into, 1) do you want to do things the Angular 1 way, or 2) would you like to use an approach that looks more like React.JS? No place is this more obvious than with how you deal with forms. You can create forms with a declarative syntax, like you’ve done with Angular 1, using &lt;a href=&#34;//angular.io/docs/ts/latest/guide/template-syntax.html&#34;&gt;Template Syntax&lt;/a&gt;. But, in my opinion, a much better way to create forms is with a more reactive approach using the FormControls and FormGroups classes. If all you are doing is just displaying data, you’ll probably find that using the template syntax is all you need. But once you start working with complex forms that accepts data input and implements validation, you’ll probably want to move toward a more reactive approach. The added benefit is that more of you code will be testable.&lt;/p&gt;
&lt;p&gt;The next option you are going to have is figuring out how to move data around your system. Most of the literature is going to suggest you use a data flow that looks a lot like what you were doing in Angular 1. But there is nothing stopping you from using Flux, Redux, or even RxJS instead. And here again, my recommendation would be that you learn these because I think you’ll find that your system will end up being much easier to reason about than the old MVVM stuff you may be used to.&lt;/p&gt;
&lt;h2 id=&#34;Lazy-Loading&#34;&gt;&lt;a href=&#34;#Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;Lazy Loading&#34;&gt;&lt;/a&gt;Lazy Loading&lt;/h2&gt;&lt;p&gt;There are several places where we had to make choices in Angular 2 where the feature has been built into the framework. One of these places is lazy loading. Why load all of your JavaScript up front? Load what you need when you need it. Angular 2 makes this easy with Lazy Loading and the choice between using WebPack (the default) or System.JS.&lt;/p&gt;
&lt;p&gt;I’ll warn you though, as of this writing, Lazy Loading only really works when using System.JS unless you want to spend a lot of time tweaking your webpack config file.&lt;/p&gt;
&lt;h2 id=&#34;Angular-2-CLI&#34;&gt;&lt;a href=&#34;#Angular-2-CLI&#34; class=&#34;headerlink&#34; title=&#34;Angular 2 CLI&#34;&gt;&lt;/a&gt;Angular 2 CLI&lt;/h2&gt;&lt;p&gt;Command Line Interfaces seem to be the cool new kid on the block. You aren’t a real framework unless you have one. While the Angular CLI is not quite baked yet, I can see how this is going to make writing Angular 2 apps much easier. There are a lot of moving parts involved in getting even the most basic of applications up and running. The Angular CLI makes starting your first application REALLY easy. It even hides all of the WebPack internals while allowing you to add your own config file if you need to. Once they have the routing bit re-implemented, it should make using Lazy Loading with WebPack much easier.&lt;/p&gt;
&lt;p&gt;The other thing using the CLI will do for you is that you will automatically start following the &lt;a href=&#34;//angular.io/styleguide&#34;&gt;coding standards&lt;/a&gt; that the Angular team have developed.&lt;/p&gt;
&lt;h2 id=&#34;Angular-2-Components&#34;&gt;&lt;a href=&#34;#Angular-2-Components&#34; class=&#34;headerlink&#34; title=&#34;Angular 2 Components&#34;&gt;&lt;/a&gt;Angular 2 Components&lt;/h2&gt;&lt;p&gt;Right now, there aren’t a lot of options available for Angular 2 for custom components. While Kendo UI has been the defacto standard for Angular components in the past, Telerik is in the middle of rewriting &lt;a href=&#34;//www.telerik.com/blogs/kendo-ui-for-angular-2-r3-roadmap&#34;&gt;Kendo UI for Angular 2&lt;/a&gt; (and React.JS). I haven’t seen any movement in the Angular UI camp to support Angular 2. Angular 2 Material has a few components that seem ready, but they are all relatively simple. The only vendors that seems to have a complete Angular 2 package is &lt;a href=&#34;//wijmo.com/angular2/&#34;&gt;Wijmo&lt;/a&gt; and &lt;a href=&#34;//www.primefaces.org/primeng/&#34;&gt;Prime Faces&lt;/a&gt;. I haven’t tried them and I’m not endorsing them. I’m just reporting what I’ve found. There are a few standalone components here and there, but if you are looking for a set of components you can just use from one source, I’m afraid you’ll have to wait. This isn’t necessarily a bad thing. It gives you time to properly learn Angular 2.&lt;/p&gt;
&lt;p&gt;But what about the Angular 1 to Angular 2 bridge? In my mind this is way more trouble than it is worth. We’ve waited two years for Angular 2, I think we can wait just a bit longer for a set of components that we can use with it.&lt;/p&gt;
&lt;h2 id=&#34;What-Angular-2-Means-for-You&#34;&gt;&lt;a href=&#34;#What-Angular-2-Means-for-You&#34; class=&#34;headerlink&#34; title=&#34;What Angular 2 Means for You&#34;&gt;&lt;/a&gt;What Angular 2 Means for You&lt;/h2&gt;&lt;p&gt;The main difference between Angular 1 and Angular 2 is that just about any Script Kiddie could pick up Angular 1 and get something done. Angular 1 was developed during a period of JavaScript history when JavaScript had not quite reach the level of “serious programming language.” But now, JavaScript has not just reached that level, but several very serious frameworks have been developed.&lt;/p&gt;
&lt;p&gt;What I notice as I review the JavaScript landscape is that we’ve moved from just getting stuff done with little to no planning, to treating JavaScript as a first class programming language that requires, and even demands that we adhere to a set of programming best practices that we would use for any other language. These include things like naming conventions and design patterns. For you to write code well in this new universe, you will need to understand what these design patterns are, why they exist and how to implement them well. If you continue on your merry script kiddie way, you will soon find yourself out of work.&lt;/p&gt;
&lt;p&gt;Further, if you think you know Angular 2 just because you know Angular 1, or you think Angular 2 will be easy to pick up because you know Angular 1, you are in for a very big surprise. Many of the concepts are the same. But since Angular 2 has so many options, you should learn the options well so that you can make an educated decision about which option to use.&lt;/p&gt;
&lt;h2 id=&#34;What-Angular-2-Means-for-Organizations&#34;&gt;&lt;a href=&#34;#What-Angular-2-Means-for-Organizations&#34; class=&#34;headerlink&#34; title=&#34;What Angular 2 Means for Organizations&#34;&gt;&lt;/a&gt;What Angular 2 Means for Organizations&lt;/h2&gt;&lt;p&gt;Similarly, if you are an organization that is planning to move to Angular 2, don’t expect your programmers to just pick up and move to Angular 2 overnight. Give them time to learn it. My recommendation is that you make learning it part of their job while they continue to use Angular 1 for the product you are trying to complete. We all have time pressure, so you need to factor learning into the schedule.&lt;/p&gt;
&lt;p&gt;But Angular 2 may also mean you need to find additional programmers who already have the skills and can transfer the knowledge to your team.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/using-javascript-to-drive-selenium-tests/</guid>
            <title>Using JavaScript to Drive Selenium Tests</title>
            <link>http://davembush.github.com/using-javascript-to-drive-selenium-tests/</link>
            <category>javascript</category>
            <category>bdd</category>
            <category>selenium</category>
            <pubDate>Tue, 16 Aug 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve written about &lt;a href=&#34;/tags/selenium/&#34;&gt;using Selenium to test web applications before&lt;/a&gt;.  But all of those articles have assumed you are using C#.  I’ve realized that Selenium has multiple language bindings which allow me to use any language I want but C# just seemed easier at the time.  But, now I’m in an environment that doesn’t use .NET at all.  They use Java.  I know Java, but I choose not to use it and instead my focus at this shop is all JavaScript.  Which means, if I want to write Selenium tests to verify my work, I need to write my tests in JavaScript.  But Using JavaScript to Drive Selenium is, in my opinion what everyone should be doing.  At least everyone who is writing most of their web application using client side code.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Think about it, the primary language you wrote the client side with is JavaScript, and yet you are going to write your tests using C#, Java, PHP… when you could be writing the tests using JavaScript.  The same language you used to write the bulk of your application.  Further, when you write your tests using C# or Java, you’ll probably either write the tests using a unit testing framework (MSTest, NUnit, JUnit) or you’ll use some sort of BDD adapter like SpecFlow to coerce the unit testing framework into the behavioral pattern you need.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/08/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;  If, you use JavaScript, you can use Jasmine, which is already behavioral, to run your tests.&lt;/p&gt;
&lt;p&gt;Another added advantage to the binding I’m going to recommend in this post, is that you get parallelization right out of the box.  You don’t need to write any funky code to &lt;a href=&#34;/running-selenium-in-parallel-with-any-net-unit-testing-tool/&#34;&gt;make your tests run in parallel&lt;/a&gt;.  You get that for free.&lt;/p&gt;
&lt;p&gt;Another advantage I see for large companies is that not every group is going to be using the same server side language.  Where I’m at there are several groups using .NET and several groups using Java.  But everyone is using JavaScript.  If we all use JavaScript to drive our Selenium tests, we can share the knowledge we learn with other groups.&lt;/p&gt;
&lt;p&gt;So, let’s get started.&lt;/p&gt;
&lt;p&gt;For the purposes of this article, I’m going to assume you’ve already &lt;a href=&#34;/you-can-start-using-node-today/&#34;&gt;setup your node environment using the instructions I provided a couple of weeks ago&lt;/a&gt;.  If you haven’t, you should do that now.  If you already have Node setup on your computer, but you are still using a version less that 6.3, I’m going to suggest you upgrade to the current version so that you can use some of the new ES2015 functionality like fat arrows.&lt;/p&gt;
&lt;h2 id=&#34;Setup&#34;&gt;&lt;a href=&#34;#Setup&#34; class=&#34;headerlink&#34; title=&#34;Setup&#34;&gt;&lt;/a&gt;Setup&lt;/h2&gt;&lt;p&gt;The tools we are going to use for testing using JavaScript, other than Node are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//webdriver.io/&#34;&gt;WebDriver.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//webdriver.io/guide/reporters/spec.html&#34;&gt;WebDriver.io Spec Reporter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//jasmine.github.io/&#34;&gt;Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And while the documentation on the WebDriver.IO site is quite complete, you would need to wade through quite a bit of information you don’t need to get this all setup and going.  We are going to give you just enough to get started.  If you want more information, I invite you to visit the website I’ve linked to above.&lt;/p&gt;
&lt;p&gt;For the purposes of this walk through, we are going to ignore the Selenium Grid part.  I’ve written about setting up Selenium Grid before.  Using the grid from WebDriver.io will just be a matter of changing some configurations.  Similarly, if you want to run the test from a cloud provider, the docs for that are on the website.&lt;/p&gt;
&lt;p&gt;Here, we are just going to get setup with a standalone server.  This suits my typical use of Selenium is to write a test for one specific tests at a time.  Once I have it working, I disable the tests.  The only time I run all of my test is prior to deploying the code to DEV just to make sure I didn’t break anything along the way.  Besides, setting up a standalone environment gets you started quickly.&lt;/p&gt;
&lt;p&gt;Before we really get started with the JavaScript stuff, make sure you have Java installed on your computer.  You’ll need that to run the Selenium stuff.&lt;/p&gt;
&lt;p&gt;So, to start out, install WebDriver.io First create a project directory for your new test project.  You can, of course, name it whatever you want.  Just make sure you make that directory your current working directory (CD into it.) Once you’re in the project directory, create your package.json file by typing in npm init Which will ask you several questions about your project.  Answer the questions and&amp;#x2F;or accept the defaults.&lt;/p&gt;
&lt;p&gt;Then install WebDriver.io by using the NPM command &lt;code&gt;npm install webdriverio --save-dev&lt;/code&gt; This should place wdio in your .&amp;#x2F;node_modules&amp;#x2F;.bin directory.  Run &lt;code&gt;./node_modules/.bin/wdio --help&lt;/code&gt; To verify that it is working.  If you are running on a Windows computer, you’ll want to make those forward slashes back slashes.&lt;/p&gt;
&lt;p&gt;Now that it is working, we are going to use it to configure a test runner file.  Type in .&amp;#x2F;node_module&amp;#x2F;.bin&amp;#x2F;wdio config One of the questions it is going to ask is which framework you want to use.  Pick ‘Jasmine’ Then it will ask if it should install the framework for you, pick ‘Yes’ Then it will ask where your tests are located.  Type in the correct location.&lt;/p&gt;
&lt;p&gt;Then it will ask which adapter you want to use.  Pick ‘spec’ and have it install that library for you.&lt;/p&gt;
&lt;p&gt;For Service, select ‘selenium-standalone’ and let it install that for you as well.  (Noticing a theme here?) For base URL, pick &lt;a href=&#34;//www.google.com&#34;&gt;https://www.google.com&lt;/a&gt; because we are going to write out demo tests against google.&lt;/p&gt;
&lt;p&gt;Now sit back and let the wdio config install the missing parts it needs for your tests.&lt;/p&gt;
&lt;p&gt;By default, this setup makes FireFox the test browser.  You can change that using the instructions located here: &lt;a href=&#34;//webdriver.io/guide/testrunner/configurationfile.html&#34; title=&#34;http://webdriver.io/guide/testrunner/configurationfile.html&#34;&gt;http://webdriver.io/guide/testrunner/configurationfile.html&lt;/a&gt; I know that looks like a lot of setup, but it really is pretty easy.  One NPM command to install webdriver.io and another wdio command to get the config file setup and the rest of the dependencies installed.  Pretty sweet.&lt;/p&gt;
&lt;p&gt;Now, let’s write our first test.&lt;/p&gt;
&lt;h2 id=&#34;Writing-Tests&#34;&gt;&lt;a href=&#34;#Writing-Tests&#34; class=&#34;headerlink&#34; title=&#34;Writing Tests&#34;&gt;&lt;/a&gt;Writing Tests&lt;/h2&gt;&lt;p&gt;We are going to put our test in the directory we specified in our config file.  In my case, I put my tests under &amp;#x2F;tests&amp;#x2F;**&amp;#x2F;*.js Just to make sure everything is working correctly, we are going to write a pretty simple first test.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;First test&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        browser.&lt;span class=&#34;title function_&#34;&gt;url&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://www.google.com&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should display &amp;quot;Google&amp;quot; in the title&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(browser.&lt;span class=&#34;title function_&#34;&gt;getTitle&lt;/span&gt;()).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Google&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There are some bits that might look new here.&lt;/p&gt;
&lt;p&gt;First, because we are running this in node, only the file has scope so we can place ‘use strict’; at the top.&lt;/p&gt;
&lt;p&gt;Second, we are making use of the fat arrow functions.  For our purposes today, ()&amp;#x3D;&amp;gt;{} is the same as function(){}.  Just a bit easier to write.&lt;/p&gt;
&lt;p&gt;Third, we are using a browser variable that hasn’t been defined anywhere.  At least not that we can see.  This is a design decision the WebDriverIO team made that I don’t necessarily agree with.  We should require() it into our module when we need it.  But it is what it is.&lt;/p&gt;
&lt;p&gt;You can checkout the API for the browser object here: &lt;a href=&#34;//webdriver.io/api.html&#34; title=&#34;http://webdriver.io/api.html&#34;&gt;http://webdriver.io/api.html&lt;/a&gt; So, our test is loading the default URL and checking the contents of the title tag.&lt;/p&gt;
&lt;p&gt;Now we run our test with wdio &lt;code&gt;./node_modules/.bin/wdio wdio.conf.js&lt;/code&gt; Our test should pass.&lt;/p&gt;
&lt;h2 id=&#34;Page-Objects&#34;&gt;&lt;a href=&#34;#Page-Objects&#34; class=&#34;headerlink&#34; title=&#34;Page Objects&#34;&gt;&lt;/a&gt;Page Objects&lt;/h2&gt;&lt;p&gt;So that’s the basics.&lt;/p&gt;
&lt;p&gt;If you are already familiar with writing Selenium testing, that’s the guts of what you need to know to get going.&lt;/p&gt;
&lt;p&gt;If you aren’t, or you’ve never heard of Page Objects, that is what I plan to cover next.&lt;/p&gt;
&lt;p&gt;Generally, when we write our selenium test, we want to use a Page Object.  That is, we want to hide all of our Selenium specific stuff under an object so we can write our test without having to worry about the location of the elements on the screen changing.&lt;/p&gt;
&lt;p&gt;You see, here’s the problem you are going to run into.  You are going to write lots of tests.  At least I hope you do.  And then someday, you are going to want to change an ID of an element, or otherwise change how you find it.  If you write all of the tests so that they code directly to the Selenium code, you’ll need to find every place you were looking for that element and replace it with the new lookup.  Not very DRY.&lt;/p&gt;
&lt;p&gt;But, if you create a page object, you’ll put your code there and call it from your tests.&lt;/p&gt;
&lt;p&gt;So for an example.  Let’s create a GooglePage definition.  Once again, because we are using Node 6.3 (or above) we can use the class keyword.  The browser variable is still available to us because it is global.&lt;/p&gt;
&lt;p&gt;So, a pretty simple page object for Google search might look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;load&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        browser.&lt;span class=&#34;title function_&#34;&gt;url&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://www.google.com&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;title&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; browser.&lt;span class=&#34;title function_&#34;&gt;getTitle&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;searchInput&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; browser.&lt;span class=&#34;title function_&#34;&gt;element&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;input[name=&amp;quot;q&amp;quot;]&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;searchButton&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; browser.&lt;span class=&#34;title function_&#34;&gt;element&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;input[name=&amp;quot;btnK&amp;quot;]&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;search&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;value&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;searchInput&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;setValue&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Node.js&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        browser.&lt;span class=&#34;title function_&#34;&gt;pause&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;exports&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then to access it from our test, we modify the test file above to look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;../pages/GooglePage&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;First test&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;load&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should display &amp;quot;Google&amp;quot; in the title&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;title&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Google&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;and I search for &amp;quot;Node.JS&amp;quot;&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;search&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Node.JS&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should display &amp;quot;Node.JS&amp;quot; in the title&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;title&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;node.js - Google Search&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This is a pretty simple example for demonstration purposes.  If you’ve never done any kind of Selenium testing before, I recommend you dig a little deeper than where I’ve gone here&lt;/p&gt;
&lt;h2 id=&#34;Project&#34;&gt;&lt;a href=&#34;#Project&#34; class=&#34;headerlink&#34; title=&#34;Project&#34;&gt;&lt;/a&gt;Project&lt;/h2&gt;&lt;p&gt;The completed project is available on GitHub here &lt;a href=&#34;//github.com/DaveMBush/WebDriverIO-Sample&#34; title=&#34;https://github.com/DaveMBush/WebDriverIO-Sample&#34;&gt;https://github.com/DaveMBush/WebDriverIO-Sample&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/smjb/8107539280/&#34;&gt;smjbk&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com&#34;&gt;Visualhunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt;CC BY&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/you-can-start-using-node-today/</guid>
            <title>You Can Start Using Node Today</title>
            <link>http://davembush.github.com/you-can-start-using-node-today/</link>
            <category>javascript</category>
            <category>node</category>
            <category>npm</category>
            <category>nvm</category>
            <pubDate>Tue, 02 Aug 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I was just getting started writing an article about using Node&amp;#x2F;JavaScript to drive my Selenium tests and as I was writing the “Prerequisite” section, I realized I have never written the basics about how to get setup with Node or even why you would want to.&lt;/p&gt;
&lt;p&gt;As popular as Node is, I am still finding that many of the people I work with have no idea what it is or if they do, they only have a partial idea and can’t see how it would apply to the work they do on a daily basis.&lt;/p&gt;
&lt;p&gt;So, let’s start with the fundamentals.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/07/image-4.png &#34;You Can Start Using Node Today&#34;)&lt;figcaption&gt;Photo credit: [stevendepolo](//www.flickr.com/photos/stevendepolo/5749192025/) via [VisualHunt.com](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-is-Node&#34;&gt;&lt;a href=&#34;#What-is-Node&#34; class=&#34;headerlink&#34; title=&#34;What is Node?&#34;&gt;&lt;/a&gt;What is Node?&lt;/h2&gt;&lt;p&gt;I think the best place to start with our introduction is by providing a comprehensive view of what Node is.  A rather simplistic description would be, “Node is the V8 JavaScript engine from the Chrome browser, wrapped in an executable, that lets you run JavaScript without a browser.” Now, with that simplistic definition, you might think, “Why would I want to do that?”  Maybe you are assuming that this implementation only lets you do the same stuff that you can do in the browser.  And this is where you would be wrong.&lt;/p&gt;
&lt;p&gt;So, let’s start over.&lt;/p&gt;
&lt;p&gt;Node allows you to write cross platform applications that will run directly on your computer using JavaScript as the language.&lt;/p&gt;
&lt;p&gt;And now I hear everyone thinking, “Yeah, yeah, that was the promise of Java.” OK.  Maybe that’s true.  Time will tell.&lt;/p&gt;
&lt;h2 id=&#34;What-Can-You-Do-with-Node&#34;&gt;&lt;a href=&#34;#What-Can-You-Do-with-Node&#34; class=&#34;headerlink&#34; title=&#34;What Can You Do with Node?&#34;&gt;&lt;/a&gt;What Can You Do with Node?&lt;/h2&gt;&lt;p&gt;Several well-known applications use Node.  You may be surprised at how much node is already being used.  Here’s a short list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many Web Servers&lt;/li&gt;
&lt;li&gt;Desktop Applications&lt;/li&gt;
&lt;li&gt;Developer Build Processes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Does any of that surprise you? There is a &lt;a href=&#34;//github.com/nodejs/node/wiki/Projects,-Applications,-and-Companies-Using-Node&#34;&gt;long list of companies&lt;/a&gt; who are using Node for some part of their development process or infrastructure.  Some more notable implementations include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VS Code by Microsoft – a code editor built using Node and Electron.&lt;/li&gt;
&lt;li&gt;Slack Desktop App – uses Node and Electron&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, you can do just about anything you can think of.&lt;/p&gt;
&lt;h2 id=&#34;Installing-Node&#34;&gt;&lt;a href=&#34;#Installing-Node&#34; class=&#34;headerlink&#34; title=&#34;Installing Node&#34;&gt;&lt;/a&gt;Installing Node&lt;/h2&gt;&lt;p&gt;This falls under the category of “Things I wish I had known.” You can just go to the &lt;a href=&#34;//nodejs.org/en/&#34;&gt;Node site&lt;/a&gt; and download the version you want to use.  But at some point, you are going to want to use multiple versions of Node.  One version for one project and a different version for some other project.  For that, you are going to need a tool called ‘NVM’.  Life will be a lot easier if you just install NVM first and then install Node from there.&lt;/p&gt;
&lt;p&gt;If you are running Windows, you’ll want to &lt;a href=&#34;//github.com/coreybutler/nvm-windows/releases&#34;&gt;grab NVM from here&lt;/a&gt;.  Everyone else can &lt;a href=&#34;//github.com/creationix/nvm&#34;&gt;get NVM from here&lt;/a&gt;. Once you have NVM installed, you should be able to run &lt;code&gt;nvm install _version.number.here_&lt;/code&gt; or you can run &lt;code&gt;nvm install node&lt;/code&gt; To install the latest version.&lt;/p&gt;
&lt;p&gt;You can run this command for each version you want to have installed.&lt;/p&gt;
&lt;p&gt;To see which versions are installed, you can run &lt;code&gt;nvm ls&lt;/code&gt; And to use a specific version you can run &lt;code&gt;nvm use _version.number.here_&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;Using-the-Node-Package-Manager&#34;&gt;&lt;a href=&#34;#Using-the-Node-Package-Manager&#34; class=&#34;headerlink&#34; title=&#34;Using the Node Package Manager&#34;&gt;&lt;/a&gt;Using the Node Package Manager&lt;/h2&gt;&lt;p&gt;When you installed Node, you also installed the Node Package Manager(NPM).  For those of you who are coming from the Microsoft world, NPM is like NuGet.  It is how we install additional “Modules” (think libraries) into our Node environment.&lt;/p&gt;
&lt;p&gt;The commands for NPM are pretty straight forward and most of the time, the documentation will tell you exactly what command to run to get it into your development environment.  But, it is helpful to know why you are running the various commands.&lt;/p&gt;
&lt;p&gt;But, before you start installing Node packages into your development environment, you are going to want a package.json file.  The easiest way to create this in a form that NPM can use is to use the command &lt;code&gt;npm init&lt;/code&gt; which will walk you through all of the questions you need to answer to create a proper package.json file.&lt;/p&gt;
&lt;p&gt;The next command you are going to encounter is &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;npm install&lt;/code&gt; has several switches that you’ll be using.  Each with a different purpose.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install _packagename_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will install the most recent version of the package into your node_modules directory and record the dependency in your package.json file in the dependencies section.&lt;/p&gt;
&lt;p&gt;If you want to be explicit about where you are saving the file you can use the &lt;code&gt;--save&lt;/code&gt; flag.  It does the same thing as &lt;code&gt;npm install package&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save _packagename_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Your other option for saving is&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--save-dev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This puts the dependency in the devDependencies section.&lt;/p&gt;
&lt;p&gt;You might wonder why you would have two different dependency sections.&lt;/p&gt;
&lt;p&gt;The reason for this is because you might have modules that you need simply to build the project. They aren’t needed when you deploy the project. So having the two different sections allows you to deploy without the extra set of modules.&lt;/p&gt;
&lt;h2 id=&#34;Node-JavaScript&#34;&gt;&lt;a href=&#34;#Node-JavaScript&#34; class=&#34;headerlink&#34; title=&#34;Node JavaScript&#34;&gt;&lt;/a&gt;Node JavaScript&lt;/h2&gt;&lt;p&gt;I once had someone assert that even within the same versions of JavaScript, there are different versions of JavaScript.  His main point was that there are differences between JavaScript on the browser and JavaScript in Node.  I assert, they are the same version of JavaScript, but the API that is available, or required, is different based on the environment.&lt;/p&gt;
&lt;p&gt;So, JavaScript on Node is syntactically no different from the JavaScript you write now.  However, Node does solve an age old problem we’ve had in client side code automatically. This problem is global scope pollution. If we write JavaScript that looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Without wrapping the code in a function, the code will end up in global scope.&lt;/p&gt;
&lt;p&gt;The fix for this is to wrap all of our files in immediately invoked function expressions (IIFEs).  I’ve written about using IIFEs before as a best practice for Angular programming.  In fact, it is a best practice for all client side JavaScript programming.&lt;/p&gt;
&lt;p&gt;But, in Node it is completely unnecessary because Node puts each file in its own scope.  Putting something on the global scope is something you have to do intentionally.  This is good, but it does require us to write some extra code.&lt;/p&gt;
&lt;p&gt;You see, the problem is, if all of the code we write is only local to the file we write it in, how are we going to be able to write code in a modular fashion?  We don’t want all of our code in one monolithic file.&lt;/p&gt;
&lt;h2 id=&#34;Modules&#34;&gt;&lt;a href=&#34;#Modules&#34; class=&#34;headerlink&#34; title=&#34;Modules&#34;&gt;&lt;/a&gt;Modules&lt;/h2&gt;&lt;p&gt;So, to handle this problem, Node implements two keywords&amp;#x2F;functions&amp;#x2F;variables (depends on how you think about it) We’ll just call them keywords for now.&lt;/p&gt;
&lt;p&gt;The first is the requires() keyword.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; foo = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;fooScript&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This says go find the script “fooScript.js” and assign what was exported from it to our “foo” variable.  If the file you need to require has been installed with NPM, then all you need is the name of the module, like I did above.  But if you are requiring in a file from your own code, you’ll need to require using a path reference.  For you Windows people, this always works using forward slashes (&amp;#x2F;) not backslash (\).&lt;/p&gt;
&lt;p&gt;This probably leaves you asking the question, how does fooScript expose its content to the module requiring it? With code that looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;exports&lt;/span&gt; = fooFunc;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This line normally appears at the end of a file.  In the case of the line above, assume that fooFunc is a function that is defined somewhere above the module.exports line. You could also write the exports using:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;exports&lt;/span&gt; = fooFunc;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;They do the same thing.&lt;/p&gt;
&lt;p&gt;If our fooFunc is in a file named “fooScript.js” then our foo variable above can call the fooFunc() function by using foo.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var foo = require(&amp;#x27;fooScript&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;foo(); // this line calls fooFunc() in fooScript.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Optimizations&#34;&gt;&lt;a href=&#34;#Optimizations&#34; class=&#34;headerlink&#34; title=&#34;Optimizations&#34;&gt;&lt;/a&gt;Optimizations&lt;/h2&gt;&lt;p&gt;What took me a while to grasp is that you can export anything.  A function, a variable, an object.  It really doesn’t matter.  But you have to be aware of some optimizations that Node makes for you.&lt;/p&gt;
&lt;p&gt;You see, it would be pretty stupid to process the file every time it was required into another file.  So rather than do that, Node caches the export and assigns that the next time it is required.  If you export an object, the next time you require it, you will get the same object.  So an exported object becomes a singleton.  If you want to be able to create new objects, you are better off exporting the function (or class in ES2015) that creates the object and new-ing it up when you need it.&lt;/p&gt;
&lt;h2 id=&#34;Your-Turn&#34;&gt;&lt;a href=&#34;#Your-Turn&#34; class=&#34;headerlink&#34; title=&#34;Your Turn&#34;&gt;&lt;/a&gt;Your Turn&lt;/h2&gt;&lt;p&gt;So, now it is your turn.  If you have not tried using Node.js install it and try a few things.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/4-reasons-to-drop-mvvm/</guid>
            <title>4 Reasons To Drop MVVM</title>
            <link>http://davembush.github.com/4-reasons-to-drop-mvvm/</link>
            <category>javascript</category>
            <category>mvvm</category>
            <pubDate>Wed, 27 Jul 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;The MVVM design pattern has been around for quite a while now.  It has a lot of strengths when done correctly.&lt;/p&gt;
&lt;p&gt;But, I believe the time has come to recognize that MVVM has a lot of shortcomings that point to its demise.  Since I primarily develop web applications, I will keep this discussion centered on the use of MVVM in web applications.  The use of MVVM for desktop may or may not have these same issues.&lt;/p&gt;
&lt;p&gt;I realize that for some of you, the very suggestion of dropping MVVM will invoke a negative emotional response.  Some very smart people have quit their job at the suggestion that MVVM and its close cousin two-way data-binding, be abandoned in favor of another way.  But just for a few minutes, I would like for you to stop treating programming as a religion and consider the possibility that there may be a better way.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/07/image-2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;History-of-MVVM&#34;&gt;&lt;a href=&#34;#History-of-MVVM&#34; class=&#34;headerlink&#34; title=&#34;History of MVVM&#34;&gt;&lt;/a&gt;History of MVVM&lt;/h2&gt;&lt;p&gt;MVVM was originally created by John Gossman to support the XAML syntax used to create Windows™ desktop applications and Silver Light applications.  Its main advantage has always been that it provides an easy way to decouple the View code from any business logic that might need to run.  Because of this decoupling, our applications become much easier to unit test.&lt;/p&gt;
&lt;p&gt;The next major implementation of MVVM that I can remember is &lt;a href=&#34;//knockoutjs.com/&#34;&gt;Knockout&lt;/a&gt;.  It is the knockout framework that introduced me to MVVM and I have to say it is also the only one I feel like actually got it right.  By that I mean that it actually did what it was advertised to do.  Maybe that’s because of all the implementations I’ve used, Knockout is the only one that ONLY implemented MVVM rather than making it part of a larger framework.&lt;/p&gt;
&lt;h2 id=&#34;Definition-of-MVVM&#34;&gt;&lt;a href=&#34;#Definition-of-MVVM&#34; class=&#34;headerlink&#34; title=&#34;Definition of MVVM&#34;&gt;&lt;/a&gt;Definition of MVVM&lt;/h2&gt;&lt;p&gt;I’ve written about MVVM before where I’ve explained more completely what MVVM is.  But just so we have a working definition of what I mean when I talk about MVVM, let’s define it this way.&lt;/p&gt;
&lt;p&gt;MVVM is a design pattern that uses two-way data-binding to get data in and out of the presentation layer, referred to as the View, without the programmer needing to do any more than specifying that this should happen in the view.  MVVM is also able to have data elements and functions in the “ViewModel” track changes so that anything that is dependent on other data is automatically recalculated without the programmer having to write a lot of code to make this happen.  This creates a model that is able to respond to events in the view, but is primarily data centric rather than event centric has we have often reasoned about our applications in the past.&lt;/p&gt;
&lt;p&gt;It sounds great.  And when it works it is.  But that’s the main problem, it hardly ever works well.&lt;/p&gt;
&lt;h2 id=&#34;MVVM-Done-Right-is-Slow&#34;&gt;&lt;a href=&#34;#MVVM-Done-Right-is-Slow&#34; class=&#34;headerlink&#34; title=&#34;MVVM Done Right is Slow&#34;&gt;&lt;/a&gt;MVVM Done Right is Slow&lt;/h2&gt;&lt;p&gt;If you’ve had any experience or paid any attention to the implementation of MVVM using JavaScript, you will realize that the number one problem with MVVM is that it is a memory hog and performs poorly for all but the most trivial of applications.  In fact, for all of the popularity of Angular JS, the biggest complaint has been around the implementation of the data-binding.  In a large application, you might need to loop through the data multiple times to make sure it has all recalculated correctly.  If you just use the framework and let the framework deal with your sloppy code, this can make the system incredibly slow.  If you actually pay attention to what you are doing, it takes longer to implement than if you had chosen some other design pattern.&lt;/p&gt;
&lt;p&gt;But doing that means we have not moved on to…&lt;/p&gt;
&lt;h2 id=&#34;MVVM-is-Hard-to-Implement&#34;&gt;&lt;a href=&#34;#MVVM-is-Hard-to-Implement&#34; class=&#34;headerlink&#34; title=&#34;MVVM is Hard to Implement&#34;&gt;&lt;/a&gt;MVVM is Hard to Implement&lt;/h2&gt;&lt;p&gt;Recognizing that looping through the data until it stabilizes may not be a good idea, the framework designers have developed rules such as, “We’ll only run the digest cycle once.”  and “We’ll only run it when some user interaction has occurred.”  Well, OK.  That sounds good.  At least now it will be obvious that I have a problem.  But this is where the trouble begins.  If I can’t rely on my data, and ultimately my view, responding to changes in my data correctly, I am left with having to only partially implementing MVVM so that I can work around these limitations and using other means to make sure my view is updated correctly.&lt;/p&gt;
&lt;p&gt;This is to say nothing of many frameworks just not working as you would expect them to.&lt;/p&gt;
&lt;h2 id=&#34;MVVM-is-Hard-to-Reason-About&#34;&gt;&lt;a href=&#34;#MVVM-is-Hard-to-Reason-About&#34; class=&#34;headerlink&#34; title=&#34;MVVM is Hard to Reason About&#34;&gt;&lt;/a&gt;MVVM is Hard to Reason About&lt;/h2&gt;&lt;p&gt;Again, in all but the most trivial of applications, and because of the optimizations that various frameworks have tried to implement, MVVM becomes difficult to implement.  As I’ve tried to explain MVVM to others and even as I’ve tried to implement it myself, I’ve found that the simple act of keeping the view stuff in the view layer and the data stuff in the data layer and making sure it all updates appropriately has me, at times tearing my hair out.  Many times this is caused by incomplete implementations.  But if being hard to implement means it is hard to reason about, maybe we shouldn’t be using it to begin with.&lt;/p&gt;
&lt;h2 id=&#34;MVVM-is-Overkill&#34;&gt;&lt;a href=&#34;#MVVM-is-Overkill&#34; class=&#34;headerlink&#34; title=&#34;MVVM is Overkill&#34;&gt;&lt;/a&gt;MVVM is Overkill&lt;/h2&gt;&lt;p&gt;But it does work sometimes.  In really simple CRUD applications, it works great.  None of the problems I’ve mentioned.  And this is the great seduction of MVVM.  You try it on some small application and you get excited.  Like a gateway drug, it lures you in.  And when you finally go to implement it on some larger application, you find out that it really doesn’t scale all that well.  And on that small app you tried it on, couldn’t you have done that just as easily using another design pattern?&lt;/p&gt;
&lt;h2 id=&#34;Where-to-Go-from-Here&#34;&gt;&lt;a href=&#34;#Where-to-Go-from-Here&#34; class=&#34;headerlink&#34; title=&#34;Where to Go from Here&#34;&gt;&lt;/a&gt;Where to Go from Here&lt;/h2&gt;&lt;p&gt;As I was reviewing these arguments with a co-worker this week, he asked, “Are you saying we shouldn’t be using MVVM?”  And my answer might surprise you.&lt;/p&gt;
&lt;p&gt;I said, “Given the two models we have to work within the framework we are currently using, MVVM is the best choice.” However, what we might want to consider is moving to another framework that provides a better design pattern.  There are several “One-way” design patterns that intrigue me.  The first is the basic Flux pattern that React tends to use.  Done correctly, this uses events to achieve the decoupling we all should be striving for.  At its core, it is basic MVC.&lt;/p&gt;
&lt;p&gt;The second one, which is very flux like, is RxJS.  I’m still wrapping my head around how I to use it in an application and honestly don’t know enough about it at this point to say any more than that it looks interesting.&lt;/p&gt;
&lt;p&gt;And even if we decided to move away from MVVM, I think using two way data-binding between the view and the ViewModel is good.  I just think the ViewModel shouldn’t try to re-compute the values as part of what it does.&lt;/p&gt;
&lt;p&gt;Leave that to the developer to control.  The problem is, trying to get existing systems that implement two-way data-binding to only work at that level would not work correctly.  &lt;/p&gt;
&lt;h3 id=&#34;Other-places-talking-about-MVVM&#34;&gt;&lt;a href=&#34;#Other-places-talking-about-MVVM&#34; class=&#34;headerlink&#34; title=&#34;Other places talking about MVVM&#34;&gt;&lt;/a&gt;Other places talking about MVVM&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//blogs.msdn.microsoft.com/johngossman/2006/03/04/advantages-and-disadvantages-of-m-v-vm/&#34;&gt;The Advantages and Disadvantages of MVVM&lt;/a&gt; (by John Gossman himself!)&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/test-driven-development-kata-roman-to-arabic-in-javascript/</guid>
            <title>Test Driven Development Kata - Roman to Arabic in JavaScript</title>
            <link>http://davembush.github.com/test-driven-development-kata-roman-to-arabic-in-javascript/</link>
            <category>tdd</category>
            <category>javascript</category>
            <category>kata</category>
            <pubDate>Wed, 20 Jul 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Coding Katas are a way of developing your skills as a programmer.  I thought it might be informative to tackle one of the classics as a blog post. Depending on how this works, I may or may not do another one quite so publicly. The rules I’m going to try to adhere by.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I will document what I am doing as I go.&lt;/li&gt;
&lt;li&gt;This is not a pre-coded blog post.  You’ll get to “see” me code as I go.&lt;/li&gt;
&lt;li&gt;I will write all tests first.&lt;/li&gt;
&lt;li&gt;I will only write enough code to make the current tests succeed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;  &lt;img src=&#34;/uploads/2016/07/image-3.png&#34; alt=&#34;Test Driven Kata - Roman to Arabic&#34; title=&#34;Test Driven Kata - Roman to Arabic&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Today’s-problem&#34;&gt;&lt;a href=&#34;#Today’s-problem&#34; class=&#34;headerlink&#34; title=&#34;Today’s problem:&#34;&gt;&lt;/a&gt;Today’s problem:&lt;/h2&gt;&lt;p&gt;This is a pretty classic coding problem that shows up in interviews, home-work assignments, and code katas.&lt;/p&gt;
&lt;p&gt;As an interview problem, I find it lacking because it typically does not represent the kind of work you will be doing other than proving that you can solve problems in your chosen language.  It is also a standard coding problem, meaning the person interviewing you is using the most obvious problem to see if you can code.  Much like asking “What is your greatest strength?” and “What is your greatest weakness?”  Finally, it takes longer to complete than I believe interview coding problems should.  This is not to say, I don’t jump through these hoops myself.&lt;/p&gt;
&lt;p&gt;As a kata exercise, it is good because there are several ways you might solve the problem.  And for our purposes, it also demonstrates what Test Driven Development might look like using JavaScript.&lt;/p&gt;
&lt;p&gt;So, what is the problem? Write a function that converts Roman numbers into Arabic numbers and throws an error if the Roman number is in an invalid form.&lt;/p&gt;
&lt;p&gt;That sounds pretty easy.  But the first question we need to ask is, “What, exactly are the rules for converting Roman numbers into Arabic numbers?”&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The values for Roman numbers are as follows:&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Roman&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Arabic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;I&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;V&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;X&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;L&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;M&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Repeating a number up to three times adds that value three times.&lt;/li&gt;
&lt;li&gt;A Roman ‘digit’ can’t repeat more than three times.  Instead the previous 1, 10, or 100 equivalent value is used to subtract from the next ‘digit’.  That is,&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Roman&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Arabic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;IV&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;IX&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;XL&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;XC&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CD&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CM&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;900&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;With the exception of the subtraction rule above, all values must decrease in scale from left to right and are added together.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Test-1&#34;&gt;&lt;a href=&#34;#Test-1&#34; class=&#34;headerlink&#34; title=&#34;Test 1&#34;&gt;&lt;/a&gt;Test 1&lt;/h2&gt;&lt;p&gt;Since we will be using JavaScript, the testing framework we will be using is Jasmine.&lt;/p&gt;
&lt;p&gt;Our first test will simply test that when we pass in “I” we get back 1.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;tests/roman-to-arabic/RomanToArabic.spec.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When I is passed in&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;I&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And the code that passes this test is:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;romanNumber&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You might think, what’s the point?  Why just return 1 when you know you are going to have to do more?  Well, when you are doing TDD, you have to work off of what you are testing for now, not what you might test for later.  So, we return 1.&lt;/p&gt;
&lt;h2 id=&#34;Test-2&#34;&gt;&lt;a href=&#34;#Test-2&#34; class=&#34;headerlink&#34; title=&#34;Test 2&#34;&gt;&lt;/a&gt;Test 2&lt;/h2&gt;&lt;p&gt;From here, we can go a couple of different directions.  How about testing for rule 3 next.  How would we do that? To start with, we might just make sure that if we pass in IV, we get back 4.  Now our code is getting a bit more complicated.  But sticking with our TDD principles, we’ll just test for IV.  Another happy path test.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;tests/roman-to-arabic/RomanToArabic.spec.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When I is passed in&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;I&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When IV is passed in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;IV&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 4&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And the code that implements it:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;romanNumber&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(romanNumber)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Test-3&#34;&gt;&lt;a href=&#34;#Test-3&#34; class=&#34;headerlink&#34; title=&#34;Test 3&#34;&gt;&lt;/a&gt;Test 3&lt;/h2&gt;&lt;p&gt;OK.  What happens if IV shows up twice?  That should be a failure.  IV should never show up more than once.  In fact, none of the codes that show up in rule three should show up more than once.  Let’s make sure they don’t.&lt;/p&gt;
&lt;p&gt;The tests for this will be pretty simple, and to save time, we will code for all of them at once.  In fact, we are going to eventually need the conversion tables above, so let’s go ahead and put them in now.&lt;/p&gt;
&lt;p&gt;Here is what our test file looks like now.  Notice that we’ve put several tests in at once.&lt;/p&gt;
&lt;p&gt;Notice that I didn’t have to write multiple tests to do this.  I just created one test and iterated over it.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;tests/roman-to-arabic/RomanToArabic.spec.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When I is passed in&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When IV is passed in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 4&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And the solution also iterates.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;romanNumber&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baseTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// This block is probably inefficient, but it is&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// easy to reason about.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; rx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RegExp&lt;/span&gt;(prop,&lt;span class=&#34;string&#34;&gt;&amp;#x27;g&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((romanNumber.&lt;span class=&#34;title function_&#34;&gt;match&lt;/span&gt;(rx) || []).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Poorly formed Roman number!&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(romanNumber)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Test-4&#34;&gt;&lt;a href=&#34;#Test-4&#34; class=&#34;headerlink&#34; title=&#34;Test 4&#34;&gt;&lt;/a&gt;Test 4&lt;/h2&gt;&lt;p&gt;Just to make sure we aren’t counting how many times in a row this all shows up, let’s add a valid Roman Number in between.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;tests/roman-to-arabic/RomanToArabic.spec.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When I is passed in&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When IV is passed in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 4&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Test-5&#34;&gt;&lt;a href=&#34;#Test-5&#34; class=&#34;headerlink&#34; title=&#34;Test 5&#34;&gt;&lt;/a&gt;Test 5&lt;/h2&gt;&lt;p&gt;Next, we need to make sure that none of the items in our base table show up more than 3 times.  We’ll write a similar test to what we’ve already written with a twist.  If any of those numerals show up more than 4 times, we know we have a problem either because they are out of order or because they show up all in a row.  So, we only need to check the count.  If there are four of any of them, we have a problem.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;tests/roman-to-arabic/RomanToArabic.spec.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baseTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When I is passed in&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When IV is passed in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 4&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; baseTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!baseTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy+propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And the code to implement it.function romanToArabic(romanNumber){&lt;br&gt;    var minusOneTable &amp;#x3D; {&lt;br&gt;        IV: 4,&lt;br&gt;        IX: 9,&lt;br&gt;        XL: 40,&lt;br&gt;        XC: 90,&lt;br&gt;        CD: 400,&lt;br&gt;        CM: 900&lt;br&gt;    };&lt;br&gt;    var baseTable &amp;#x3D; {&lt;br&gt;        I: 1,&lt;br&gt;        V: 5,&lt;br&gt;        X: 10,&lt;br&gt;        L: 50,&lt;br&gt;        C: 100,&lt;br&gt;        D: 500,&lt;br&gt;        M: 1000&lt;br&gt;    };&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// This block is probably inefficient, but it is
// easy to reason about.
for(var prop in minusOneTable)&amp;#123;
    if(!minusOneTable.hasOwnProperty(prop))&amp;#123;
       continue;
    &amp;#125;
    var rx = new RegExp(prop,&amp;#39;g&amp;#39;);
    if((romanNumber.match(rx) || []).length &amp;gt; 1)&amp;#123;
        throw &amp;#39;Poorly formed Roman number!&amp;#39;;
    &amp;#125;

&amp;#125;
for(var prop in baseTable)&amp;#123;
    if(!baseTable.hasOwnProperty(prop))&amp;#123;
        continue;
    &amp;#125;
    var rx = new RegExp(prop,&amp;#39;g&amp;#39;);
    if((romanNumber.match(rx) || []).length &amp;gt; 3)&amp;#123;
        throw &amp;#39;Poorly formed Roman number!&amp;#39;;
    &amp;#125;

&amp;#125;

switch(romanNumber)&amp;#123;
    case &amp;#39;I&amp;#39;:
        return 1;
    case &amp;#39;IV&amp;#39;:
        return 4;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h2 id=&#34;Test-6&#34;&gt;&lt;a href=&#34;#Test-6&#34; class=&#34;headerlink&#34; title=&#34;Test 6&#34;&gt;&lt;/a&gt;Test 6&lt;/h2&gt;&lt;p&gt;So, before we move on to actually computing the value of the Roman number, we should ask ourselves if there are any other ways a Roman number could be passed in incorrectly.&lt;/p&gt;
&lt;p&gt;The next one that occurs to me is this.  If you have a number that contains a ‘digit’ from the minusOneTable, the character that is used to subtract should never follow the digit.  For example, if “IV” shows up, there should not be an “I” immediately after it.  That is, we shouldn’t see “IVI” anywhere in our string.  So let’s add that to our tests.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;tests/roman-to-arabic/RomanToArabic.spec.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baseTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When I is passed in&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When IV is passed in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 4&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; baseTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!baseTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy+propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newProp = prop + prop.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + newProp + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,newProp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And the code to implement it:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;romanNumber&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baseTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// This block is probably inefficient, but it is&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// easy to reason about.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; rx;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RegExp&lt;/span&gt;(prop,&lt;span class=&#34;string&#34;&gt;&amp;#x27;g&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((romanNumber.&lt;span class=&#34;title function_&#34;&gt;match&lt;/span&gt;(rx) || []).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Poorly formed Roman number!&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RegExp&lt;/span&gt;(prop + prop.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;),&lt;span class=&#34;string&#34;&gt;&amp;#x27;g&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((romanNumber.&lt;span class=&#34;title function_&#34;&gt;match&lt;/span&gt;(rx) || []).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Poorly formed Roman number&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; baseTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!baseTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RegExp&lt;/span&gt;(prop,&lt;span class=&#34;string&#34;&gt;&amp;#x27;g&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((romanNumber.&lt;span class=&#34;title function_&#34;&gt;match&lt;/span&gt;(rx) || []).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Poorly formed Roman number!&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(romanNumber)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Step-7&#34;&gt;&lt;a href=&#34;#Step-7&#34; class=&#34;headerlink&#34; title=&#34;Step 7&#34;&gt;&lt;/a&gt;Step 7&lt;/h2&gt;&lt;p&gt;There is one more possible problem we could encounter.  What if someone passes in a character that isn’t a valid Roman number character.  We need to make sure that the only characters that show up are Roman number characters.&lt;/p&gt;
&lt;p&gt;Since testing for all of the characters isn’t practical, we are just going to test for a few and assume that if this were a real business problem we’d go to the trouble of testing more.  But, the basic test is going to look the same.  Toss in bad characters in an otherwise valid string and make sure we throw an error.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;tests/roman-to-arabic/RomanToArabic.spec.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baseTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When I is passed in&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When IV is passed in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 4&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; baseTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!baseTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy+propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newProp = prop + prop.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + newProp + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,newProp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// just test for one each of upper case, lower case, number and lower case valid character&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; invalidCharacters = &amp;#123;&lt;span class=&#34;attr&#34;&gt;A&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;i&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; invalidCharacters)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!invalidCharacters.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And the solution, which is pretty simple:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;romanNumber&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baseTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// This block is probably inefficient, but it is&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// easy to reason about.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; rx;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// make sure minusOne only shows up once&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// and first character isn&amp;#x27;t also the last character. (IVI for example)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RegExp&lt;/span&gt;(prop,&lt;span class=&#34;string&#34;&gt;&amp;#x27;g&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((romanNumber.&lt;span class=&#34;title function_&#34;&gt;match&lt;/span&gt;(rx) || []).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Poorly formed Roman number!&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RegExp&lt;/span&gt;(prop + prop.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;),&lt;span class=&#34;string&#34;&gt;&amp;#x27;g&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((romanNumber.&lt;span class=&#34;title function_&#34;&gt;match&lt;/span&gt;(rx) || []).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Poorly formed Roman number&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; included = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// make sure digits only show up 3 times&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; baseTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!baseTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        included += prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RegExp&lt;/span&gt;(prop,&lt;span class=&#34;string&#34;&gt;&amp;#x27;g&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((romanNumber.&lt;span class=&#34;title function_&#34;&gt;match&lt;/span&gt;(rx) || []).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Poorly formed Roman number!&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// make sure only I, V, X, L, C and D are the only characters that show up&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RegExp&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;[^&amp;#x27;&lt;/span&gt; + included + &lt;span class=&#34;string&#34;&gt;&amp;#x27;]&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;g&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((romanNumber.&lt;span class=&#34;title function_&#34;&gt;match&lt;/span&gt;(rx) || []).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Poorly formed Roman number&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(romanNumber)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Step-8&#34;&gt;&lt;a href=&#34;#Step-8&#34; class=&#34;headerlink&#34; title=&#34;Step 8&#34;&gt;&lt;/a&gt;Step 8&lt;/h2&gt;&lt;p&gt;OK. I think that gets all of the validations except for ensuring that the numbers show up in numerical order.  To make this work, we are going to need to work through the array and assign each digit a value.  The test we need to write is going to put values in the wrong order.&lt;/p&gt;
&lt;p&gt;Our test will put the next value up after the value.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;tests/roman-to-arabic/RomanToArabic.spec.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baseTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When I is passed in&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When IV is passed in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 4&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; baseTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!baseTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy+propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newProp = prop + prop.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + newProp + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,newProp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// just test for one each of upper case, lower case, number and lower case valid character&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; invalidCharacters = &amp;#123;&lt;span class=&#34;attr&#34;&gt;A&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;i&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; invalidCharacters)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!invalidCharacters.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; badOrderPairs = &amp;#123;&lt;span class=&#34;attr&#34;&gt;DM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;LC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;VX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;IXXL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;IXM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badOrderPairs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!badOrderPairs.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And the solution will put them in order and add them along the way.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;romanNumber&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baseTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneSub = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;v&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;l&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;d&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;m&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; compositeValueTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;v&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;l&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;c&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;d&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;m&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// This block is probably inefficient, but it is&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// easy to reason about.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; rx;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// make sure minusOne only shows up once&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// and first character isn&amp;#x27;t also the last character. (IVI for example)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RegExp&lt;/span&gt;(prop,&lt;span class=&#34;string&#34;&gt;&amp;#x27;g&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((romanNumber.&lt;span class=&#34;title function_&#34;&gt;match&lt;/span&gt;(rx) || []).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Poorly formed Roman number!&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RegExp&lt;/span&gt;(prop + prop.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;),&lt;span class=&#34;string&#34;&gt;&amp;#x27;g&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((romanNumber.&lt;span class=&#34;title function_&#34;&gt;match&lt;/span&gt;(rx) || []).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Poorly formed Roman number&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; included = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// make sure digits only show up 3 times&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; baseTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!baseTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        included += prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RegExp&lt;/span&gt;(prop,&lt;span class=&#34;string&#34;&gt;&amp;#x27;g&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((romanNumber.&lt;span class=&#34;title function_&#34;&gt;match&lt;/span&gt;(rx) || []).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Poorly formed Roman number!&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// make sure only I, V, X, L, C and D are the only characters that show up&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RegExp&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;[^&amp;#x27;&lt;/span&gt; + included + &lt;span class=&#34;string&#34;&gt;&amp;#x27;]&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;g&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((romanNumber.&lt;span class=&#34;title function_&#34;&gt;match&lt;/span&gt;(rx) || []).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Poorly formed Roman number&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// substitute the minusOnes with tokens we can use to compute value.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RegExp&lt;/span&gt;(prop,&lt;span class=&#34;string&#34;&gt;&amp;#x27;g&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        romanNumber = romanNumber.&lt;span class=&#34;title function_&#34;&gt;replace&lt;/span&gt;(rx,minusOneSub[prop]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; romanNumberArray = romanNumber.&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; lastValue = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; currentValue = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; numberIndex = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;numberIndex &amp;lt; romanNumberArray.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;;numberIndex++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        currentValue = compositeValueTable[romanNumberArray[numberIndex]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        returnValue += currentValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(numberIndex &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; currentValue &amp;gt; lastValue)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Poorly formed Roman number&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lastValue = currentValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// switch(romanNumber)&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//     case &amp;#x27;I&amp;#x27;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//         return 1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//     case &amp;#x27;IV&amp;#x27;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//         return 4;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Step-9&#34;&gt;&lt;a href=&#34;#Step-9&#34; class=&#34;headerlink&#34; title=&#34;Step 9&#34;&gt;&lt;/a&gt;Step 9&lt;/h2&gt;&lt;p&gt;And finally we add some test to verify that we get the right result.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;tests/roman-to-arabic/RomanToArabic.spec.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baseTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When I is passed in&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When IV is passed in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 4&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; baseTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!baseTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy+propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newProp = prop + prop.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + newProp + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,newProp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// just test for one each of upper case, lower case, number and lower case valid character&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; invalidCharacters = &amp;#123;&lt;span class=&#34;attr&#34;&gt;A&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;i&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; invalidCharacters)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!invalidCharacters.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; badOrderPairs = &amp;#123;&lt;span class=&#34;attr&#34;&gt;DM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;LC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;VX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;IXXL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;IXM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badOrderPairs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!badOrderPairs.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; romanNumbers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;II&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;III&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;19&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;29&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;45&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;46&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;54&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;55&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;56&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;101&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CXI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;111&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CMXCIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;999&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;MDCLXVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1666&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; romanNumbers)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!romanNumbers.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return &amp;#x27;&lt;/span&gt; + romanNumbers[propCopy] ,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(romanNumbers[propCopy]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Review&#34;&gt;&lt;a href=&#34;#Review&#34; class=&#34;headerlink&#34; title=&#34;Review&#34;&gt;&lt;/a&gt;Review&lt;/h2&gt;&lt;p&gt;What?! I thought we were done? Well, we are and we aren’t.  We have code that works.  But is it the best code we can write? Here is what I like about this code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is easy to reason about.&lt;/li&gt;
&lt;li&gt;It allows me to add additional roman numbers by expanding my tables.  No additional code would be needed. (And while it is hard to represent using Arabic letters, there are additional symbols.)&lt;/li&gt;
&lt;li&gt;It works reasonably fast.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But, it does seem to me that we might make it a bit more efficient without sacrificing these advantages too much.  And the great news is, since we have our test in place, we can refactor with impunity.  No worries about breaking something because we will know as soon as we have and we can revert back to the code that was working.&lt;/p&gt;
&lt;h2 id=&#34;Step-12&#34;&gt;&lt;a href=&#34;#Step-12&#34; class=&#34;headerlink&#34; title=&#34;Step 12&#34;&gt;&lt;/a&gt;Step 12&lt;/h2&gt;&lt;p&gt;One pretty simple change we can make is that our error message is scattered throughout our code.  Let’s make that a variable and just throw the variable.&lt;/p&gt;
&lt;p&gt;The other thing I wonder about is how much of our validations can be combined? One check we might safely eliminate at this point is the check to make sure the minus values only show up once.  If any of them were to show up more than once, they would either show up one after the other, which we still can check for, or they would be in the wrong value order which our final check will catch.  So, let’s eliminate that code as well and re-run our tests to make sure nothing broke.&lt;/p&gt;
&lt;p&gt;And now that we’ve eliminated that check, we can create one big string for checking conditions like “IVI” into one string and check it once instead of creating a new RegExp object multiple times.&lt;/p&gt;
&lt;p&gt;Here is the code we have so far:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;tests/roman-to-arabic/RomanToArabic.spec.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baseTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When I is passed in&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When IV is passed in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 4&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; baseTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!baseTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy+propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newProp = prop + prop.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + newProp + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,newProp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// just test for one each of upper case, lower case, number and lower case valid character&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; invalidCharacters = &amp;#123;&lt;span class=&#34;attr&#34;&gt;A&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;i&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; invalidCharacters)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!invalidCharacters.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; badOrderPairs = &amp;#123;&lt;span class=&#34;attr&#34;&gt;DM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;LC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;VX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;IXXL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;IXM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badOrderPairs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!badOrderPairs.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; romanNumbers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;II&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;III&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;19&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;29&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;45&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;46&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;54&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;55&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;56&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;101&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CXI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;111&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CMXCIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;999&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;MDCLXVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1666&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; romanNumbers)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!romanNumbers.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return &amp;#x27;&lt;/span&gt; + romanNumbers[propCopy] ,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(romanNumbers[propCopy]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Step-11&#34;&gt;&lt;a href=&#34;#Step-11&#34; class=&#34;headerlink&#34; title=&#34;Step 11&#34;&gt;&lt;/a&gt;Step 11&lt;/h2&gt;&lt;p&gt;Now that we have our IVI check down to one string, it occurs to me that we can combine this check with our invalid character check.  So, let’s do that next.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;tests/roman-to-arabic/RomanToArabic.spec.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baseTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When I is passed in&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When IV is passed in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 4&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; baseTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!baseTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy+propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newProp = prop + prop.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + newProp + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,newProp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// just test for one each of upper case, lower case, number and lower case valid character&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; invalidCharacters = &amp;#123;&lt;span class=&#34;attr&#34;&gt;A&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;i&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; invalidCharacters)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!invalidCharacters.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; badOrderPairs = &amp;#123;&lt;span class=&#34;attr&#34;&gt;DM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;LC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;VX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;IXXL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;IXM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badOrderPairs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!badOrderPairs.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; romanNumbers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;II&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;III&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;19&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;29&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;45&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;46&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;54&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;55&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;56&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;101&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CXI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;111&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CMXCIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;999&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;MDCLXVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1666&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; romanNumbers)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!romanNumbers.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return &amp;#x27;&lt;/span&gt; + romanNumbers[propCopy] ,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(romanNumbers[propCopy]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Step-12-1&#34;&gt;&lt;a href=&#34;#Step-12-1&#34; class=&#34;headerlink&#34; title=&#34;Step 12&#34;&gt;&lt;/a&gt;Step 12&lt;/h2&gt;&lt;p&gt;And the last place we can optimize is our three digit check.  But instead of limiting it to valid Roman numbers, let’s just check for any sequence of characters that repeats 4 times or more.&lt;/p&gt;
&lt;p&gt;And once we know that is working, we can combine it with our other Regular Expressions.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;tests/roman-to-arabic/RomanToArabic.spec.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baseTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When I is passed in&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When IV is passed in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 4&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; baseTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!baseTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy+propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newProp = prop + prop.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + newProp + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,newProp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// just test for one each of upper case, lower case, number and lower case valid character&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; invalidCharacters = &amp;#123;&lt;span class=&#34;attr&#34;&gt;A&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;i&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; invalidCharacters)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!invalidCharacters.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; badOrderPairs = &amp;#123;&lt;span class=&#34;attr&#34;&gt;DM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;LC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;VX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;IXXL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;IXM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badOrderPairs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!badOrderPairs.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; romanNumbers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;II&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;III&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;19&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;29&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;45&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;46&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;54&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;55&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;56&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;101&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CXI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;111&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CMXCIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;999&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;MDCLXVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1666&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; romanNumbers)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!romanNumbers.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return &amp;#x27;&lt;/span&gt; + romanNumbers[propCopy] ,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(romanNumbers[propCopy]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Step-13&#34;&gt;&lt;a href=&#34;#Step-13&#34; class=&#34;headerlink&#34; title=&#34;Step 13&#34;&gt;&lt;/a&gt;Step 13&lt;/h2&gt;&lt;p&gt;We’ve cleaned up about all of the logic we can without hard coding the values.  But I would like to combine the lookup tables next.  I don’t like having three tables.  Let’s see if we can pull those into one table.&lt;/p&gt;
&lt;p&gt;The first step to doing this is combining the minusOneTable and baseTable into one table.  To differentiate in the code that is using those tables, we’ll just look at the length of the property.&lt;/p&gt;
&lt;p&gt;In the process of doing this, we notice that it would also make sense to combine the substitution table.  And since the values we’ve assigned to the table aren’t even being used at this point, we’ll just use the substitutions instead of the values.&lt;/p&gt;
&lt;p&gt;And if we make the value of each element in the baseTable an array, we could combine the values into that table as well.  But that would over complicate our lookup logic when we compute the value.  So, I think we’ll just leave that as it is.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;tests/roman-to-arabic/RomanToArabic.spec.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baseTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When I is passed in&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When IV is passed in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 4&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; baseTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!baseTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy+propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newProp = prop + prop.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + newProp + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,newProp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// just test for one each of upper case, lower case, number and lower case valid character&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; invalidCharacters = &amp;#123;&lt;span class=&#34;attr&#34;&gt;A&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;i&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; invalidCharacters)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!invalidCharacters.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; badOrderPairs = &amp;#123;&lt;span class=&#34;attr&#34;&gt;DM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;LC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;VX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;IXXL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;IXM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badOrderPairs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!badOrderPairs.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; romanNumbers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;II&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;III&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;19&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;29&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;45&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;46&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;54&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;55&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;56&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;101&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CXI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;111&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CMXCIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;999&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;MDCLXVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1666&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; romanNumbers)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!romanNumbers.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return &amp;#x27;&lt;/span&gt; + romanNumbers[propCopy] ,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(romanNumbers[propCopy]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Step-14&#34;&gt;&lt;a href=&#34;#Step-14&#34; class=&#34;headerlink&#34; title=&#34;Step 14&#34;&gt;&lt;/a&gt;Step 14&lt;/h2&gt;&lt;p&gt;Finally, I think we want to consolidate the loops into one loop.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;tests/roman-to-arabic/RomanToArabic.spec.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; minusOneTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CD&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;900&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baseTable = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;D&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;M&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When I is passed in&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When IV is passed in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;IV&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return 4&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy + &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt; + propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; baseTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!baseTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + prop + prop + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy+propCopy+propCopy+propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; minusOneTable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!minusOneTable.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newProp = prop + prop.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + newProp + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,newProp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// just test for one each of upper case, lower case, number and lower case valid character&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; invalidCharacters = &amp;#123;&lt;span class=&#34;attr&#34;&gt;A&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;i&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; invalidCharacters)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!invalidCharacters.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; badOrderPairs = &amp;#123;&lt;span class=&#34;attr&#34;&gt;DM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;LC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;VX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;IXXL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;IXM&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badOrderPairs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!badOrderPairs.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should throw an exception&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy)&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;toThrow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; romanNumbers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;I&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;II&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;III&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;V&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;VIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;IX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XVIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;19&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXVIII&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;29&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XXX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XL&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;45&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XLVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;46&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;L&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LIV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;54&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LV&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;55&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;56&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;LX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;XC&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;101&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CXI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;111&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;CMXCIX&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;999&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;MDCLXVI&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1666&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; romanNumbers)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!romanNumbers.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;When &amp;#x27;&lt;/span&gt; + prop + &lt;span class=&#34;string&#34;&gt;&amp;#x27; is added&amp;#x27;&lt;/span&gt;,(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;propCopy&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                returnValue = &lt;span class=&#34;title function_&#34;&gt;romanToArabic&lt;/span&gt;(propCopy);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should return &amp;#x27;&lt;/span&gt; + romanNumbers[propCopy] ,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(returnValue).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(romanNumbers[propCopy]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Review-1&#34;&gt;&lt;a href=&#34;#Review-1&#34; class=&#34;headerlink&#34; title=&#34;Review&#34;&gt;&lt;/a&gt;Review&lt;/h2&gt;&lt;p&gt;There are probably a few other optimizations that could be made here.  But I’m afraid that each would sacrifice either the flexibility.  That is, we could hard code the regular expression validations, which would significantly reduce the number of lines of code.  Or we would sacrifice the readability.  Neither of which I am willing to do.&lt;/p&gt;
&lt;p&gt;If you are only interested in the result, you can find the finished project at &lt;a href=&#34;//github.com/DaveMBush/JavaScriptKatas&#34; title=&#34;https://github.com/DaveMBush/JavaScriptKatas&#34;&gt;https://github.com/DaveMBush/JavaScriptKatas&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/7-reasons-to-evade-ext-js/</guid>
            <title>7 Reasons To Evade Ext JS</title>
            <link>http://davembush.github.com/7-reasons-to-evade-ext-js/</link>
            <category>javascript</category>
            <category>ext js</category>
            <category>sencha</category>
            <pubDate>Wed, 13 Jul 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve worked with Ext JS now for a total of 2.5 years.  First with Ext 4.2 and now with Ext 6.x.&lt;/p&gt;
&lt;p&gt;Here’s my experience, and warning, of why you should avoid this disaster of a framework.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/07/image-1.png&#34; alt=&#34;7 Reasons To Evade Ext JS&#34; title=&#34;7 Reasons To Evade Ext JS&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Jack-of-All-Trades&#34;&gt;&lt;a href=&#34;#Jack-of-All-Trades&#34; class=&#34;headerlink&#34; title=&#34;Jack of All Trades&#34;&gt;&lt;/a&gt;Jack of All Trades&lt;/h2&gt;&lt;p&gt;Master of none! One of the great selling points of using Ext JS is the fact that it comes with “Everything you need” to build a web application.  That would be great if it were true.  But the fact of the matter is, it comes with all of the features you need but the features are all only partially implemented.  I’ve complained publicly several times that Sencha can’t possibly be testing the code they release because it only works in their demos.  If you try to use a feature they have documented as being available, you are likely to find that the feature doesn’t actually work.  How is it possible that you’ve written documentation for how something is supposed to work and yet you can release it without it working properly?  I can understand fringe stuff getting by.  We can’t think of every test.  But when this happens over and over again, you start to wonder what exactly they are testing.&lt;/p&gt;
&lt;h2 id=&#34;A-Wolf-in-Sheep’s-Clothing&#34;&gt;&lt;a href=&#34;#A-Wolf-in-Sheep’s-Clothing&#34; class=&#34;headerlink&#34; title=&#34;A Wolf in Sheep’s Clothing&#34;&gt;&lt;/a&gt;A Wolf in Sheep’s Clothing&lt;/h2&gt;&lt;p&gt;When I first started with Ext, the only design pattern they had available was what they referred to as MVC.  It took me two months of playing with the framework before I finally realized that what they were calling MVC wasn’t anything the &lt;a href=&#34;/designPatterns&#34;&gt;Gang of Four&lt;/a&gt; would recognize as MVC.  I guess if you have a View, a Model and a Controller, you can call it MVC?  It doesn’t matter that the Models define records in a table or that the Controller is tightly coupled to your view.&lt;/p&gt;
&lt;h2 id=&#34;Sheep-Without-Legs&#34;&gt;&lt;a href=&#34;#Sheep-Without-Legs&#34; class=&#34;headerlink&#34; title=&#34;Sheep Without Legs&#34;&gt;&lt;/a&gt;Sheep Without Legs&lt;/h2&gt;&lt;p&gt;OK.  So when they introduced the MVVM architecture I actually started to have just a bit of hope.  Yes, there were still some fundamental issues I have, but MVVM would make this tolerable.  But here is the issue.  Their idea of MVVM is that you would only need to implement it on a per page basis.&lt;/p&gt;
&lt;p&gt;Let me try to explain.&lt;/p&gt;
&lt;h3 id=&#34;Broken-Data-Binding&#34;&gt;&lt;a href=&#34;#Broken-Data-Binding&#34; class=&#34;headerlink&#34; title=&#34;Broken Data Binding&#34;&gt;&lt;/a&gt;Broken Data Binding&lt;/h3&gt;&lt;p&gt;In my ideal world, when I build a new component, I would build that component using the framework the rest of my application is using.  So my component uses MVVM.  Sencha’s implementation gives you a View, ViewController, and ViewModel.  Mostly this looks more like MVC if you ask me but whatever, it has two-way databinding, so we’ll call it MVVM for now.  If you build a component that lives inside another component, the first thing you’ll discover is that binding only works from the top down.  That is, I can bind data at the outer layer and it will get reflected all of the way in to the inner most component that uses it.  But, if you change the data in the inner most component, it doesn’t reflect back up to the outer most component.  I’ve written a hack for this, and there is no promise from Sencha that this will ever get fixed properly, so I guess my hack is safe.&lt;/p&gt;
&lt;h3 id=&#34;Broken-Controllers&#34;&gt;&lt;a href=&#34;#Broken-Controllers&#34; class=&#34;headerlink&#34; title=&#34;Broken Controllers&#34;&gt;&lt;/a&gt;Broken Controllers&lt;/h3&gt;&lt;p&gt;But it gets worse.  While child components can find data in models that are in parent components properly, they can’t find references to functions in controllers in the same way.  This is particularly problematic if you write a component that is a container of other components.  You would naturally want the child components to use the controller from the component that they were declared in.  But if you have an outer component that has your container component as a child and then other components inside of that.  The only way you can control what controller the child most components are going to notify of events is by wrapping the inner most components in their own component with their own controller.  This gets to be awkward when all you want to do is provide an event handler for one control in a column of a grid control.  Again, I have a monkey patch that fixes this, but why did I have to write it? This is just one specific example of my “Jack of All Trades” point that I started with.&lt;/p&gt;
&lt;p&gt;We won’t even address the question of if this is really MVVM or not!&lt;/p&gt;
&lt;h2 id=&#34;Never-Use-the-0-release&#34;&gt;&lt;a href=&#34;#Never-Use-the-0-release&#34; class=&#34;headerlink&#34; title=&#34;Never Use the .0 release&#34;&gt;&lt;/a&gt;Never Use the .0 release&lt;/h2&gt;&lt;p&gt;I think most of us now are generally conditioned to be wary of the .0 release of anything that hasn’t been developed using Open Source methods.  There just haven’t been enough eyes on the project to ensure that everything works as it should.&lt;/p&gt;
&lt;p&gt;But with Sencha, this extends to all of the patch releases at the very least and even into some minor releases.&lt;/p&gt;
&lt;p&gt;While the 4.0, 5.0, and 6.0 releases were unacceptably broken, we find that every new patch or minor release that comes out afterward breaks something that was working.  We always have to ask, “Can we live with this?”&lt;/p&gt;
&lt;h2 id=&#34;All-or-Nothing&#34;&gt;&lt;a href=&#34;#All-or-Nothing&#34; class=&#34;headerlink&#34; title=&#34;All or Nothing&#34;&gt;&lt;/a&gt;All or Nothing&lt;/h2&gt;&lt;p&gt;As I said at the beginning, Sencha gives you everything.  That sounds good.  You won’t have to go looking for a grid control, or many other common controls you might want to use.&lt;/p&gt;
&lt;p&gt;But the bad news is, you can only use controls that were written to be used with Ext.  Which other than what Sencha provides in the framework, doesn’t give you a lot of choices.  Don’t go thinking you’ll supplement Ext with a selection of third party controls.  It’s not going to happen.&lt;/p&gt;
&lt;h2 id=&#34;Fences-Protect-AND-Isolate&#34;&gt;&lt;a href=&#34;#Fences-Protect-AND-Isolate&#34; class=&#34;headerlink&#34; title=&#34;Fences Protect AND Isolate&#34;&gt;&lt;/a&gt;Fences Protect AND Isolate&lt;/h2&gt;&lt;p&gt;Up until this point in my post, no one can reasonably argue that anything I’ve said is actually a benefit.  At this point we switch to points that may vary based on how well you know JavaScript, HTML, and CSS.&lt;/p&gt;
&lt;p&gt;You see, the good news, and actually a major selling point to many people, is that you can write a web application using Ext without having to know much, if anything about HTML or CSS.  And for that matter even the amount of JavaScript you need to know is relatively limited.&lt;/p&gt;
&lt;p&gt;That’s the good news.  The bad news is, if you know anything about any of these, you’ll probably end up frustrated by EXT.  This is because Ext’s JavaScript controls most of the layout.  So if you are used to going into developer tools to tweak the CSS and then applying that to your style sheet, you are going to be very disappointed.  Pretty much nothing you do in developer tools is going to work as you would expect.  And figuring out how to apply those to your code is going to be a lot harder than you are used to.&lt;/p&gt;
&lt;h2 id=&#34;Their-Way-or-the-Highway&#34;&gt;&lt;a href=&#34;#Their-Way-or-the-Highway&#34; class=&#34;headerlink&#34; title=&#34;Their Way or the Highway&#34;&gt;&lt;/a&gt;Their Way or the Highway&lt;/h2&gt;&lt;p&gt;Once again, many people see this as an advantage.  And once again if you aren’t familiar with how the rest of the JavaScript world does things, this is going to sound fine.&lt;/p&gt;
&lt;h3 id=&#34;Sencha-CMD&#34;&gt;&lt;a href=&#34;#Sencha-CMD&#34; class=&#34;headerlink&#34; title=&#34;Sencha CMD&#34;&gt;&lt;/a&gt;Sencha CMD&lt;/h3&gt;&lt;p&gt;Everything runs through Sencha CMD.  A tool for building all things Ext.  If you want to bundle and minify your code, the standard way of doing this is by using “requires” statements in your code and then running Sencha CMD and have it figure out what you are using and put it all in one bundle.&lt;/p&gt;
&lt;p&gt;The problem with this is that there are several much better ways of doing this that are available using Node and various NPM packages.  Again, if you are a JavaScript developer, you are going to wonder what Sencha is thinking.&lt;/p&gt;
&lt;h3 id=&#34;Ext-define&#34;&gt;&lt;a href=&#34;#Ext-define&#34; class=&#34;headerlink&#34; title=&#34;Ext.define()&#34;&gt;&lt;/a&gt;Ext.define()&lt;/h3&gt;&lt;p&gt;Another place where proprietary shows up is in how Ext defines “Classes”.  When it was first introduced, TypeScript was new.  But now, we not only have TypeScript, which does much of what Ext does and some things it doesn’t, but we have an evolving JavaScript standard that I’m afraid Sencha won’t be able to keep up with.  They already discourage the use of ‘use strict’;.  Once again, there is only one place where this will get you in trouble, and the work around actually produces more efficient code.  But still, the point is, Sencha is relying on ECMA Script 3 standards while the world has largely moved on to ECMA 2015 and beyond.&lt;/p&gt;
&lt;p&gt;Anyhow, my point here is that Ext is not just a framework but also functions, largely, as its own language.  Not quite as much a fork from the standard as Coffee Script, but also not nearly as close to the JavaScript spec as TypeScript.  So while it is still JavaScript, if you are a JavaScript programmer, it isn’t going to feel quite like JavaScript to you.&lt;/p&gt;
&lt;h3 id=&#34;Themes&#34;&gt;&lt;a href=&#34;#Themes&#34; class=&#34;headerlink&#34; title=&#34;Themes&#34;&gt;&lt;/a&gt;Themes&lt;/h3&gt;&lt;p&gt;The final place you will find “Proprietary” lurking is with the Themes.  There are several really good CSS frameworks out there.  Sencha uses none of them.  And while the syntax they use for creating themes has been SASS up until Ext 6, now they even have their own proprietary SASS compiler.  Watch out here because they are still using the SASS extensions so you are likely to make some assumptions here that aren’t true because, once again, they’ve only implemented enough of the SASS engine to do what THEY need to do.&lt;/p&gt;
&lt;h2 id=&#34;VB-All-Over-Again&#34;&gt;&lt;a href=&#34;#VB-All-Over-Again&#34; class=&#34;headerlink&#34; title=&#34;VB All Over Again&#34;&gt;&lt;/a&gt;VB All Over Again&lt;/h2&gt;&lt;p&gt;Every time I hear someone praise how great Ext is, it is normally because it has everything you need out of the box and allows you to get stuff done quickly.  &lt;/p&gt;
&lt;p&gt;Basically the same argument for using Visual Basic back in the day.  And yet I learned to never take a VB job because it almost every instance, while it was possible to write well structured code in Visual Basic, it was generally so difficult to do that the code I would be maintaining would need to be rewritten in order to make any sense of it. Ext suffers the same issue.  There is nothing in Ext to force you to write well structured code.  The code I have had to maintain has almost always followed every anti-pattern known to man.  In this case, this isn’t Sencha’s fault directly other than the fact that the only reason my code tends to be cleaner than most is because I’m more likely to code a fix to an Ext bug than I am to work around the problem with an anti-pattern.&lt;/p&gt;
&lt;p&gt;In comparison to other frameworks that are available, if all you want is a tool that will get you a semi working application quickly, and you don’t care so much about having to rewrite it when you need to change it in some way, Ext is your tool.  If on the other hand, you care about design and you want to be able to maintain what you’ve written, you should look elsewhere.&lt;/p&gt;
&lt;p&gt;Remember, if it sounds too good to be true, it probably is.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-bind-for-cleaner-code/</guid>
            <title>JavaScript bind() for cleaner code</title>
            <link>http://davembush.github.com/javascript-bind-for-cleaner-code/</link>
            <category>javascript</category>
            <category>bind</category>
            <category>callbacks</category>
            <category>currying</category>
            <category>events</category>
            <pubDate>Wed, 06 Jul 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Several weeks ago, I wrote about &lt;a href=&#34;/why-does-javascript-loop-only-use-last-value/&#34;&gt;how closures impact calling asynchronous functions&lt;/a&gt; in a loop and several ways of dealing with that problem.&lt;/p&gt;
&lt;p&gt;In my recent coding, I’ve discovered an even more simple way of dealing with this problem.&lt;/p&gt;
&lt;p&gt;In the process, it removes the anonymous function and eliminates the linting error, ‘Don’t make functions within a loop’ You see, I’ve been experimenting with JavaScript &lt;code&gt;bind()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And as it turns out, we can use bind in multiple situations, including dealing with the closure issue I mentioned a couple of weeks ago.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/07/image.png &#34;JavaScript bind() for cleaner code&#34;)&lt;figcaption&gt;Photo credit: [Connor Tarter](//www.flickr.com/photos/connortarter/4754231502/) via [VisualHunt](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-Is-bind&#34;&gt;&lt;a href=&#34;#What-Is-bind&#34; class=&#34;headerlink&#34; title=&#34;What Is bind()?&#34;&gt;&lt;/a&gt;What Is bind()?&lt;/h2&gt;&lt;p&gt;The bind function is a recent addition to the JavaScript spec. So, this will only work on recent browsers. You can &lt;a href=&#34;//kangax.github.io/compat-table/es5/&#34;&gt;check the compatibility table&lt;/a&gt; (for all things JavaScript) to see which browser implement &lt;code&gt;bind()&lt;/code&gt; as well as other JavaScript features. I looked over the list and there aren’t any browsers that don’t support &lt;code&gt;bind()&lt;/code&gt; that I care to support, so I’m good. Your mileage may vary.&lt;/p&gt;
&lt;p&gt;What bind does is that it automatically wraps your function in its own closure so that we can bind the context (the this keyword) and a list of parameters to the original function. What you end up with is another function pointer.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a,b&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newFoo = add.&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;newFoo&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that we not only bound this to the &lt;code&gt;foo()&lt;/code&gt; function, but we also bound the two parameters. So, when we call &lt;code&gt;newFoo()&lt;/code&gt; the return value will be 7.&lt;/p&gt;
&lt;p&gt;But what happens if we change the parameters before calling newFoo?&lt;/p&gt;
&lt;h2 id=&#34;Changing-bind-parameters&#34;&gt;&lt;a href=&#34;#Changing-bind-parameters&#34; class=&#34;headerlink&#34; title=&#34;Changing bind parameters&#34;&gt;&lt;/a&gt;Changing bind parameters&lt;/h2&gt;&lt;p&gt;If we bind parameters to &lt;code&gt;foo()&lt;/code&gt; using variables and then change the variables prior to calling &lt;code&gt;newFoo()&lt;/code&gt;, what do you expect the value to be?&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a,b&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newFoo = add.&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;newFoo&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The return value is still going to be 7 because &lt;code&gt;bind()&lt;/code&gt; binds the value of the parameters, not the actual variables. This is good news and, like I said, we can use this to great advantage in our code.&lt;/p&gt;
&lt;p&gt;But where I think it will display the most usefulness to me is in my call backs&lt;/p&gt;
&lt;h2 id=&#34;Bind-and-callbacks&#34;&gt;&lt;a href=&#34;#Bind-and-callbacks&#34; class=&#34;headerlink&#34; title=&#34;Bind and callbacks&#34;&gt;&lt;/a&gt;Bind and callbacks&lt;/h2&gt;&lt;p&gt;You should remember from that article that one of our solutions to dealing with callbacks in loops was to create an anonymous function around the function we wanted to call.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ii&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(ii);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But we can greatly simplify this code by using bind instead.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;consoleLog&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;i&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(consoleLog.&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,i),&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We can do this because each call to bind gives us a new function pointer and the original function remains unchanged.&lt;/p&gt;
&lt;p&gt;Meanwhile, we also remove the linting error ‘Don’t make functions within a loop’ because we aren’t creating the function in a loop, we are just pointing to a function that was created outside of the loop.&lt;/p&gt;
&lt;h2 id=&#34;Bind-for-Event-Handlers&#34;&gt;&lt;a href=&#34;#Bind-for-Event-Handlers&#34; class=&#34;headerlink&#34; title=&#34;Bind for Event Handlers&#34;&gt;&lt;/a&gt;Bind for Event Handlers&lt;/h2&gt;&lt;p&gt;Another place where &lt;code&gt;bind()&lt;/code&gt; will clean up your code is with event handlers.  Everyone knows, or should know, that when an event handler is called, the context it is called on is the thing that generated the event and not the object that the event handler was created in.  But, by using bind, you can be sure that the function is being called on the correct context.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;ClassName&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;eventHandler&lt;/span&gt; = (&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Not that you would write your code exactly like that, but that is just to get the point across.&lt;/p&gt;
&lt;h2 id=&#34;Currying&#34;&gt;&lt;a href=&#34;#Currying&#34; class=&#34;headerlink&#34; title=&#34;Currying&#34;&gt;&lt;/a&gt;Currying&lt;/h2&gt;&lt;p&gt;What?! OK. The best explaination of Currying I can give you is that it allows you to pass parameters to function in multiple steps by making the function return other functions that take the remaining parameters. Many functional languages, like F#, do this for you automatically.&lt;/p&gt;
&lt;p&gt;Using binding, we achieve Currying by writing code that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a,b,c&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a+b+c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; addAgain = add.&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; result = &lt;span class=&#34;title function_&#34;&gt;addAgain&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/exposing-secret-javascript-privates-to-unit-tests/</guid>
            <title>Exposing Secret JavaScript privates to Unit Tests</title>
            <link>http://davembush.github.com/exposing-secret-javascript-privates-to-unit-tests/</link>
            <category>unit test</category>
            <category>javascript</category>
            <category>test driven development</category>
            <pubDate>Thu, 23 Jun 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;The question comes up all the time, “How do I access JavaScript privates from my Unit Tests?”  And invariably, the purist chimes in with the answer, “you don’t”.&lt;/p&gt;
&lt;p&gt;But, isn’t the point of unit testing to allow us to test UNITs?  Why artificially limit our ability to test units if we don’t need to?  If we had the ability to create protected members, wouldn’t we tests those separately? So, what follows is how I surface my private JavaScript members so I can access them during tests without having to make them public during the run of my protection code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/06/image-2.png&#34; alt=&#34;Exposing Secret JavaScript privates to Unit Tests&#34; title=&#34;Exposing Secret JavaScript privates to Unit Tests&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Lean-on-JavaScript&#34;&gt;&lt;a href=&#34;#Lean-on-JavaScript&#34; class=&#34;headerlink&#34; title=&#34;Lean on JavaScript&#34;&gt;&lt;/a&gt;Lean on JavaScript&lt;/h2&gt;&lt;p&gt;My JavaScript unit testing framework of choice is Jasmine.  Not so much because it does all I would like it to do or because there isn’t something ‘better’ available but because it has become the defacto standard for unit testing JavaScript and nothing else I’ve seen is significantly better.  There is one part of this technique that is going to lean on the fact that I am using Jasmine, but I’m sure you can adapt it to your testing framework.&lt;/p&gt;
&lt;p&gt;But first, let’s review how you would create private JavaScript members in the first place.&lt;/p&gt;
&lt;h2 id=&#34;Creating-Private-Members&#34;&gt;&lt;a href=&#34;#Creating-Private-Members&#34; class=&#34;headerlink&#34; title=&#34;Creating Private Members&#34;&gt;&lt;/a&gt;Creating Private Members&lt;/h2&gt;&lt;p&gt;In standard ES5 code, a simple object might be defined using syntax that looks something like this.  Recognize there are multiple ways to create objects and things that look like classes in JavaScript.  What follows is just enough code to get the point across.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;MyClass&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;privateMember&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;publicMember&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        privateMember.&lt;span class=&#34;title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;publicMember&lt;/span&gt; = publicMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Note that our privateMember is used by publicMember but is not accessible from the outside.  I’m also using apply(this) to pass the context to the privateMember function.  This may not be necessary if you aren’t using this in the privateMember function and you could use privateMember.bind(this) to make this automatic.  That’s one of the interesting things about JavaScript.  There are always multiple ways to achieve the same goal.  None of them particularly better than the other but some more standard than the other.&lt;/p&gt;
&lt;p&gt;Notice that the only thing that actually makes our publicMember public is that I’ve attached the function pointer to this.&lt;/p&gt;
&lt;h2 id=&#34;Exposing-Private-for-Jasmine&#34;&gt;&lt;a href=&#34;#Exposing-Private-for-Jasmine&#34; class=&#34;headerlink&#34; title=&#34;Exposing Private for Jasmine&#34;&gt;&lt;/a&gt;Exposing Private for Jasmine&lt;/h2&gt;&lt;p&gt;The easiest way I know of to expose the private member variables for Jasmine is to conditionally assign the private members to this if jasmine is defined.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;MyClass&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;privateMember&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;publicMember&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        privateMember.&lt;span class=&#34;title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;publicMember&lt;/span&gt; = publicMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(jasmine)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;privateMember&lt;/span&gt; = privateMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;As long as you don’t use the jasmine global variable for something other than jasmine, this should work.&lt;/p&gt;
&lt;p&gt;And now you can test your private functions.&lt;/p&gt;
&lt;h2 id=&#34;What-about-Spys&#34;&gt;&lt;a href=&#34;#What-about-Spys&#34; class=&#34;headerlink&#34; title=&#34;What about Spys?&#34;&gt;&lt;/a&gt;What about Spys?&lt;/h2&gt;&lt;p&gt;If you are testing your private functions on their own, you’ll probably have a need to place spys on them when you test the other functions in your application that call them.  This is where things get just a bit interesting.&lt;/p&gt;
&lt;p&gt;If we leave things as they are, and you place a spy on the function that we exposed, your spy will never get called.  The reason for this is because of the way pointers work.&lt;/p&gt;
&lt;p&gt;In our example above, our publicMember() function is going to call our privateMember() function regardless of how we manipulate the this.privateMember pointer.  This is because, while the variables are pointing to the same function, they are still two different variables and, because of the way spys work internally, you’ll end up changing the this.privateMember variable without impacting the call to privateMember().&lt;/p&gt;
&lt;p&gt;We need to write a little extra code in our if(jasmine) block to make sure that after we’ve exposed privateMember(), the now public version of privateMember() gets call by publicMember() instead of the private version of privateMember().&lt;/p&gt;
&lt;p&gt;To do this we are going to need to play “towers of hanoi” with our variables.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;MyClass&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;privateMember&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;publicMember&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        privateMember.&lt;span class=&#34;title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; oldPrivateMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;publicMember&lt;/span&gt; = publicMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(jasmine)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(oldPrivateMember)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            privateMember = oldPrivateMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            oldPrivateMember = privateMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;privateMember&lt;/span&gt; = privateMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        privateMember = (&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;privateMember&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The gist of what this new code does is that it captures the pointer to the privateMember() into oldPrivateMember.  Once we have that, we can make this.privateMember point to the original privateMember and then make our original privateMember point to a new method that calls this.privateMember, which is what our spy will call if we’ve set one up.&lt;/p&gt;
&lt;p&gt;The if(oldPrivateMember) stuff is just protection code to make sure we don’t do this more times than we need and end up calling this.privateMember up the call stack multiple times until we finally get to the privateMember function we ultimately want to call.  Depending on how you implement classes, you may or may not need this code.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/why-does-javascript-loop-only-use-last-value/</guid>
            <title>Why does JavaScript loop only use last value?</title>
            <link>http://davembush.github.com/why-does-javascript-loop-only-use-last-value/</link>
            <category>javascript</category>
            <category>closure</category>
            <category>loops</category>
            <pubDate>Thu, 16 Jun 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;You see variations of the question, “Why does JavaScript loop only use the last value?” on StackOverflow all the time.  At work, the guy that sits next to me just ran into the same issue.  And the answer to the question requires a solid understanding of closures and &lt;a href=&#34;/javascript-scope/&#34;&gt;variable scope&lt;/a&gt;.  Something I’ve &lt;a href=&#34;/javascript-scope/&#34;&gt;written about in the past&lt;/a&gt;.  But, when I went back and looked at that article, I was surprised that I had not covered this particular very common topic.&lt;/p&gt;
&lt;p&gt;So, here is the basic scenario.  You have some sort of for&amp;#x2F;next loop that then calls some asynchronous function.  When the function runs, what you see when the code runs is that the last value of the loop index is the value that gets used in the function for every instance that it gets called.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/06/image-1.png &#34;Why does JavaScript loop only use last value?&#34;)&lt;figcaption&gt;Photo credit: [col_adamson](//www.flickr.com/photos/57855544@N00/340654162/) via [Visualhunt.com](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;An-Example&#34;&gt;&lt;a href=&#34;#An-Example&#34; class=&#34;headerlink&#34; title=&#34;An Example&#34;&gt;&lt;/a&gt;An Example&lt;/h2&gt;&lt;p&gt;Here is a really simple example that demonstrates the problem.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But, you will also see it when you try to fire an event.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; img = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Image&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    img.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(testArray[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Or even more common, when you try to make an AJAX call.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $.&lt;span class=&#34;title function_&#34;&gt;ajax&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;url&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;/* url goes here */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;success&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;moduleHtml&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;For the remainder of this post, we’ll stick with the first example because the problem is the same and the code for that one has the least moving parts.&lt;/p&gt;
&lt;h2 id=&#34;The-Diagnosis&#34;&gt;&lt;a href=&#34;#The-Diagnosis&#34; class=&#34;headerlink&#34; title=&#34;The Diagnosis&#34;&gt;&lt;/a&gt;The Diagnosis&lt;/h2&gt;&lt;p&gt;The solution to the problem starts with understanding how JavaScript works.  In particular how closures work.  What happens when you use a variable that is declared outside the scope the variable is going to be used in, is that it will use the value that variable has at the time it runs.  It doesn’t get a copy of the value at the time the closure is setup.  If you think of closures as pointers rather than values, maybe that will help.&lt;/p&gt;
&lt;p&gt;So, in our working example, when the code actually runs, 10 will get spit out to the console 10 times because by the time the code runs, that is the value that i will have.  Maybe you thought it would be 9.  But the loop stopped looping because i was 10.&lt;/p&gt;
&lt;p&gt;If you think, “OK, so I’ll just make the function fire immediately after I set it up by using setTimeout(func,1), let me remind you that in our second example of firing an event, that is essentially what is happening there.  It won’t work either.&lt;/p&gt;
&lt;h2 id=&#34;Not-a-Matter-of-Timing&#34;&gt;&lt;a href=&#34;#Not-a-Matter-of-Timing&#34; class=&#34;headerlink&#34; title=&#34;Not a Matter of Timing&#34;&gt;&lt;/a&gt;Not a Matter of Timing&lt;/h2&gt;&lt;p&gt;JavaScript has, and probably always will be single threaded.  I say, probably always will be because way too much is relying on the single threaded nature of JavaScript at this point for it to safely change.  If you want to break the web, suddenly change that.&lt;/p&gt;
&lt;p&gt;So, even if we could set a timeout value small enough to execute before the loop will complete, what you have to remember about setTimeout and setInterval is that all we are doing when we make those calls is we are saying, “run this code as soon after the timeout value as possible.”  Under the hood it puts the function in the event queue when the timeout value has expired.&lt;/p&gt;
&lt;p&gt;Since JavaScript is single threaded, none of this will happen until the code we are currently executing has completed.&lt;/p&gt;
&lt;h2 id=&#34;Solution-1&#34;&gt;&lt;a href=&#34;#Solution-1&#34; class=&#34;headerlink&#34; title=&#34;Solution 1&#34;&gt;&lt;/a&gt;Solution 1&lt;/h2&gt;&lt;p&gt;One solution is to wrap our code in another closure that will run immediately.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ii&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(ii);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This example is using an IIFE (Immediately Invoked Function Expression) so that the function runs right away.  The effect is the same as the original code except for now the variable ii is local to our IIFE so it will not change every time the variable i changes.&lt;/p&gt;
&lt;h2 id=&#34;Solution-2&#34;&gt;&lt;a href=&#34;#Solution-2&#34; class=&#34;headerlink&#34; title=&#34;Solution 2&#34;&gt;&lt;/a&gt;Solution 2&lt;/h2&gt;&lt;p&gt;Now, by this point, you might be thinking, why not just create a new variable ii inside the loop?&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; ii = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(ii);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Well, the problem with this is variable hoisting.  Any variable you declare within a function, regardless of where it is declared, is physically declared at the top of the function.  So, you aren’t really creating a variable local to the loop.  You are creating a variable local to the function (or global scope in this case) and you end up with the same problem as before.&lt;/p&gt;
&lt;p&gt;But, ES2015 recognizes and has finally provided a means of creating a variable local to a code block rather than just function blocks.  To do this, they’ve introduced the LET keyword.&lt;/p&gt;
&lt;p&gt;So, if you change your code to:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; ii = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(ii);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The problem of course is that there aren’t a lot of browsers that support the LET keyword right now.  But there are transpilers that will convert your code from ES2015 to ES5.  And the way they do this is our final solution.&lt;/p&gt;
&lt;h2 id=&#34;Solution-3&#34;&gt;&lt;a href=&#34;#Solution-3&#34; class=&#34;headerlink&#34; title=&#34;Solution 3&#34;&gt;&lt;/a&gt;Solution 3&lt;/h2&gt;&lt;p&gt;The problem with solution 1 is that while it works most of the time, it really isn’t the most reliable way of solving the problem.  At the very least it sets up a lot more code that we really need.  If we peek under the hood to how the transpilers implement LET, what we see is that they take advantage of the fact that the CATCH block of the try&amp;#x2F;catch syntax has its own scope.&lt;/p&gt;
&lt;p&gt;So, all we have to do is throw i, catch it in the catch block and use the variable we caught in our callback function.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;&amp;#123;&lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; i&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt;(ii) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(ii);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;It tends to be a bit cleaner than solution 1 and is the solution I prefer.  But, there is another strong reason for using this last solution that most people overlook.  When you wrap a function with an IIFE like we’ve done with solution 1, it changes the meaning inside the IIFE of &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;.  Using the &lt;code&gt;try/catch&lt;/code&gt; mechanism allows you to treat the code as if it were inline with the code the &lt;code&gt;try/catch&lt;/code&gt; is in.  This is probably closer to what you had in mind when you wrote the original code to begin with.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/how-not-to-choose-a-framework/</guid>
            <title>How Not to Choose a Framework</title>
            <link>http://davembush.github.com/how-not-to-choose-a-framework/</link>
            <category>javascript</category>
            <category>react.js</category>
            <category>ext js</category>
            <category>angular.js</category>
            <pubDate>Thu, 02 Jun 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;In my job as a JavaScript architect, trainer and mentor, I’m often asked, “What’s your favorite framework?”  Or “What is the best framework?” And it surprises people when I give them two answers to that question.&lt;/p&gt;
&lt;p&gt;Right now, of the frameworks I’ve looked at, my favorite framework is &lt;a href=&#34;/tags/react-js/&#34;&gt;React JS&lt;/a&gt;.  But if I were picking a corporate framework, at this point I’d probably land on &lt;a href=&#34;/angular-2-first-impressions-compared-to-angular-1/&#34;&gt;Angular 2.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But the question you are probably asking is , “Why two different selections?”  And, I think a more interesting question would be, “How did you select which one to use?” In fact, when I was thinking about writing this post, I was going to title it “How to Choose a JavaScript Framework” but as I considered what I would actually say, I realized that the factors I would use really apply to any language and any time.&lt;/p&gt;
&lt;p&gt;But an even more interesting question is this.  What factors are essential when picking out a framework.  If I ignored these questions, what are the cost? So, I give you…&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/05/image-3.png &#34;How Not to Choose a Framework&#34;)&lt;figcaption&gt;Photo credit: [Tony Webster](//www.flickr.com/photos/diversey/980101167/) via [Visual hunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;How-Not-to-Choose-a-Framework&#34;&gt;&lt;a href=&#34;#How-Not-to-Choose-a-Framework&#34; class=&#34;headerlink&#34; title=&#34;How Not to Choose a Framework&#34;&gt;&lt;/a&gt;How Not to Choose a Framework&lt;/h2&gt;&lt;p&gt;As we progress, I’ll mention frameworks I have experience with.  To be fair, I will let you know my preferences.&lt;/p&gt;
&lt;p&gt;In order, the frameworks I would prefer to use would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React JS&lt;/li&gt;
&lt;li&gt;Angular 2&lt;/li&gt;
&lt;li&gt;Angular 1&lt;/li&gt;
&lt;li&gt;Ext JS 5 or 6&lt;/li&gt;
&lt;li&gt;Ext JS 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I were going to recommend a framework for a large enterprise organization, the order would be slightly different:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Angular 2&lt;/li&gt;
&lt;li&gt;Angular 1&lt;/li&gt;
&lt;li&gt;Ext JS 5 or 6&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Ext JS 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this in mind, here’s what you should pay attention to.&lt;/p&gt;
&lt;h2 id=&#34;Who-Will-Use-The-Framework&#34;&gt;&lt;a href=&#34;#Who-Will-Use-The-Framework&#34; class=&#34;headerlink&#34; title=&#34;Who Will Use The Framework?&#34;&gt;&lt;/a&gt;Who Will Use The Framework?&lt;/h2&gt;&lt;p&gt;At the organization I am working at now, most of the people there are Java programmers.  This means that programming in JavaScript, of any flavor, is going to be as much as a mind-shift as moving from C to C++ or C++ to Java or C#.  Yes, there are similarities to what they are used to, but there are enough differences to consider that you’ll probably gravitate toward a framework that allows them to not have to worry about those differences.  On this point Ext or Angular 2 are probably going to rise to the surface because they, more than any other framework, allow you to work with JavaScript more like it was like Java or C# than any other framework I know about.&lt;/p&gt;
&lt;h2 id=&#34;How-Steep-is-The-Learning-Curve&#34;&gt;&lt;a href=&#34;#How-Steep-is-The-Learning-Curve&#34; class=&#34;headerlink&#34; title=&#34;How Steep is The Learning Curve?&#34;&gt;&lt;/a&gt;How Steep is The Learning Curve?&lt;/h2&gt;&lt;p&gt;Related to who will use the framework is how long will it take them to learn the framework?  For this, you are going to want to look at things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can I buy support so I can get my questions answered?&lt;/li&gt;
&lt;li&gt;How clear is the documentation?&lt;/li&gt;
&lt;li&gt;How popular is the framework?&lt;/li&gt;
&lt;li&gt;Do I already have an expert on my team?&lt;/li&gt;
&lt;li&gt;Is there a public Slack channel for this framework?&lt;/li&gt;
&lt;li&gt;Do the people behind the framework care about the Enterprise?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On this point, depending on the experience of your developers, Ext JS and Angular 2 are probably going to surface as the clear winners while React is going to end up at the very bottom.  As much as I love it personally, I have to admit that learning it has taken me the most amount of time.&lt;/p&gt;
&lt;h2 id=&#34;How-Opinionated-is-the-Framework&#34;&gt;&lt;a href=&#34;#How-Opinionated-is-the-Framework&#34; class=&#34;headerlink&#34; title=&#34;How Opinionated is the Framework?&#34;&gt;&lt;/a&gt;How Opinionated is the Framework?&lt;/h2&gt;&lt;p&gt;I remember when VB 1.0 was first introduced.  The reason everyone gave me for why I should love this new development environment was, “Look how fast I can get something up and running.” Well, yes, but… VB let you write code any way that got the job done.  And coming from C++ and MFC and prior to that, OWL from Borland, I recognized that even though you could still write crappy code using a framework that provided some structure, the amount of crappy code you wrote was inversely proportional to the amount of structure the framework provides.&lt;/p&gt;
&lt;p&gt;When you are working with a large team of developers, something needs to be in place to ensure they are writing code in a highly structured way rather than just getting the job done.&lt;/p&gt;
&lt;p&gt;Once again, this places Angular 2 at the top of the pile of the ones I’ve actually worked with.  Ext sinks to the bottom of the pile.  While Ext does implement something they call MVC and MVVM, they don’t protect the developer from coding outside of what those design patterns are supposed to look like.  In the case of MVC, I’m not even sure the people who wrote it know what MVC is.&lt;/p&gt;
&lt;h2 id=&#34;Industry-Standards&#34;&gt;&lt;a href=&#34;#Industry-Standards&#34; class=&#34;headerlink&#34; title=&#34;Industry Standards&#34;&gt;&lt;/a&gt;Industry Standards&lt;/h2&gt;&lt;p&gt;The easiest way for me to illustrate what I mean here is to point out a few ways this gets violated with the existing frameworks.&lt;/p&gt;
&lt;p&gt;In order to make Ext work more like a desktop development environment, they generate the HTML for you and use their own layout mechanism to control where the various elements appear on the screen.  Every other framework I’ve mentioned lets you control the layout using CSS.  The advantage to Ext is that I don’t have to know HTML or CSS in order to get a screen up that looks nice.  The down side is that if I want to do anything just a bit out of the Ext box, I quickly become frustrated.  It also takes more time to render a screen than if I were using HTML and CSS.  This is particularly true if your components are nested more than 3 deep.&lt;/p&gt;
&lt;p&gt;Further, Ext has enabled JavaScript to look more like Java and C# than JavaScript by implementing a proprietary mechanism for defining a class.  What continually worries me is how well this will continue to work as the ECMAScript standards evolve and provide there own mechanisms for achieving the same results.&lt;/p&gt;
&lt;p&gt;Ext also (sorry, but Ext is the primary violator of this point) uses its own proprietary build process.  It is possible to circumvent their build process for most things.  But the question one has to ask is, “why can’t you just use standards like gulp, grunt or npm scripts?” Even though Angular 2 primarily uses TypeScript, the difference between Angular 2 and Ext is that 1) you don’t HAVE to use TypeScript even though it is highly encourages and 2) TypeScript only implements features that look like they are going to eventually end up in the ECMAScript standards.  So, it is a lot more future proof while adding a lot of the same features that Ext implements in a more proprietary fashion.&lt;/p&gt;
&lt;p&gt;Another framework where this kind of shows up is with React JS.  While everything about building the app is built using industry standards, the unit testing framework doesn’t allow you to use Karma as your test running.  There is another more proprietary implentation called Jest.  However, I also don’t have to use PhantomJS to gets my components.  I wish I could have both.&lt;/p&gt;
&lt;h2 id=&#34;How-Testable-Is-It&#34;&gt;&lt;a href=&#34;#How-Testable-Is-It&#34; class=&#34;headerlink&#34; title=&#34;How Testable Is It?&#34;&gt;&lt;/a&gt;How Testable Is It?&lt;/h2&gt;&lt;p&gt;Anyone who is familiar with my history of posts, who know me personally, know &lt;a href=&#34;/tags/tdd&#34;&gt;I am a huge proponent of TDD&lt;/a&gt;. So, any framework I use has to allow me to unit test. This is why Ext JS 4 ends up dead last on my list. You would think that a framework that says they implement MVC would allow you to test the controller without have the view attached. That’s one of the points of MVC. But Ext doesn’t allow this.&lt;/p&gt;
&lt;p&gt;On the other end of the spectrum, React is testable all the way down. This is why I love it. The only reason I don’t consider it the right choice for the enterprise is because it takes so long to learn and the documentation isn’t very well done.&lt;/p&gt;
&lt;h2 id=&#34;Doing-The-Research&#34;&gt;&lt;a href=&#34;#Doing-The-Research&#34; class=&#34;headerlink&#34; title=&#34;Doing The Research&#34;&gt;&lt;/a&gt;Doing The Research&lt;/h2&gt;&lt;p&gt;OK.  So, this is what you should look for, but when you are looking at the frameworks, how would you know?  Most of this information is only stuff you would find out after your programmers started using the framework.&lt;/p&gt;
&lt;p&gt;One way you can find out is to find people who have used the various frameworks you have under consideration.  One of my first test would be, “How much information can I find on the Internet about this framework?”My second question would be, “How popular is this framework?” and then finally I would look for people who don’t like the framework and try to determine if their points are valid.&lt;/p&gt;
&lt;h2 id=&#34;How-Not-to-Pick-a-Framework&#34;&gt;&lt;a href=&#34;#How-Not-to-Pick-a-Framework&#34; class=&#34;headerlink&#34; title=&#34;How Not to Pick a Framework&#34;&gt;&lt;/a&gt;How Not to Pick a Framework&lt;/h2&gt;&lt;p&gt;If you want to pick the wrong framework, trust the sales literature.  Don’t ask any question.  Ignore the points above.&lt;/p&gt;
&lt;p&gt;Ultimately regret your decision.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-prototypal-inheritance/</guid>
            <title>JavaScript Prototypal Inheritance</title>
            <link>http://davembush.github.com/javascript-prototypal-inheritance/</link>
            <category>javascript</category>
            <category>inheritance</category>
            <category>prototype</category>
            <pubDate>Thu, 19 May 2016 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last several months we’ve looked at several different aspects of how JavaScript deals with objects.  A few weeks ago, we looked at &lt;a href=&#34;/javascript-types-nuance/&#34;&gt;JavaScript Types&lt;/a&gt; and noted that many of the types are actually objects, while not all are.  We’ve also looked at &lt;a href=&#34;/javascript-objectswhat-you-dont-know-can-hurt-you/&#34;&gt;JavaScript Objects&lt;/a&gt; and &lt;a href=&#34;/javascript-fields/&#34;&gt;JavaScript Object Fields&lt;/a&gt;.  This has all been foundational information you need to understand prior to understanding how JavaScript Prototypal Inheritance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/05/image-1.png&#34; alt=&#34;JavaScript Prototypal Inheritance&#34; title=&#34;JavaScript Prototypal Inheritance&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;No-Classes&#34;&gt;&lt;a href=&#34;#No-Classes&#34; class=&#34;headerlink&#34; title=&#34;No Classes&#34;&gt;&lt;/a&gt;No Classes&lt;/h2&gt;&lt;p&gt;If you are coming from an object oriented background, the first thing you need to understand is that JavaScript doesn’t have classes.  Even though the class keyword was introduced in ES2015, there are still no classes.  All the class keyword does for us is formalizes what we’ve been doing for years while making JavaScript feel more like the other languages we know.&lt;/p&gt;
&lt;p&gt;I’m not going to spend a lot of time dealing with ES2015 syntax here for several reasons.  First, it isn’t fully implemented in the browser eco system yet.  Second, most of what we do as programmers is maintain existing code.  There is a lot of existing code that doesn’t use ES2015 yet.  Third, ES2015 hides what is really going on.  I want you to understand how JavaScript works, not just be able to churn out code.&lt;/p&gt;
&lt;p&gt;So, if there are no classes, how does JavaScript achieve inheritance?  By using the delegation pattern.&lt;/p&gt;
&lt;h2 id=&#34;Delegation&#34;&gt;&lt;a href=&#34;#Delegation&#34; class=&#34;headerlink&#34; title=&#34;Delegation&#34;&gt;&lt;/a&gt;Delegation&lt;/h2&gt;&lt;p&gt;In the object oriented world that you are probably coming from, you’ve probably heard the phrase, “Favor composition over inheritance.”  What they are really saying is, “Favor delegation over inheritance.”  So, this shouldn’t be a particularly new concept.  When you create a class that contains other classes, once the class is instantiated, when we need to call a function that the top level class doesn’t implement, we pass it on into an object that is contained by the top level object.  This is delegation.&lt;/p&gt;
&lt;p&gt;Now, remove the classes.  All you have left are the objects those classes would have created.  This is JavaScript.  But, instead of leaving the delegation to you, they’ve provided a default delegation mechanism called the prototype.  In fact, if you’ve ever inspected a JavaScript object in the debugger, you’ve probably seen this field hanging off your functions.  The other place you’ll see evidence of the prototype is in the __proto__ field that hangs off of every object.&lt;/p&gt;
&lt;h2 id=&#34;Default-Inheritance&#34;&gt;&lt;a href=&#34;#Default-Inheritance&#34; class=&#34;headerlink&#34; title=&#34;Default Inheritance&#34;&gt;&lt;/a&gt;Default Inheritance&lt;/h2&gt;&lt;p&gt;Whenever you create a new object using either an object literal, or a function (or the class keyword) the prototype field automatically points to the default empty object.  It is this default object that gives all of our other objects the behavior of an object.  Without this, none of our objects would have a default toString() implementation, for example.  It is the default object that gives all other object their object-ness.&lt;/p&gt;
&lt;h2 id=&#34;Constructors&#34;&gt;&lt;a href=&#34;#Constructors&#34; class=&#34;headerlink&#34; title=&#34;Constructors&#34;&gt;&lt;/a&gt;Constructors&lt;/h2&gt;&lt;p&gt;Once your head stops spinning, come back and check this out.  While we no longer have classes, we still need some way of stamping out objects that all look the same.  We already looked at one way of doing this when we discussed &lt;a href=&#34;/javascript-objectswhat-you-dont-know-can-hurt-you/&#34;&gt;JavaScript Objects&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; self = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.&lt;span class=&#34;property&#34;&gt;someFunction&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And for most of the code we write, this is a perfectly adequate way of creating a constructor. By attaching the functions to the function’s prototype field, we can apply the functionality one more level up the tree, which gives us a certain amount of flexibility. The same code above could be written as:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;A.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;someFunction&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that we didn’t attach someProperty to the prototype.  We want the state information attached to our object.  If you did attach it to the prototype, all it would do is give the object a default value of ‘A’ but as soon as we assign ‘B’ to it, the property gets shadowed anyhow.  If you were to Object.define() someProperty so that it had a setter, which would remove the shadowing, you would also change the value for every instance of the object A when you changed it from any instance.  I suppose if you wanted to implement something that looked like a static variable, this is something you might attempt.&lt;/p&gt;
&lt;p&gt;The key to remember here is that anything you do to the prototype is going to impact all current and future instances of the object.&lt;/p&gt;
&lt;h2 id=&#34;JavaScript-Prototypal-Inheritance&#34;&gt;&lt;a href=&#34;#JavaScript-Prototypal-Inheritance&#34; class=&#34;headerlink&#34; title=&#34;JavaScript Prototypal Inheritance&#34;&gt;&lt;/a&gt;JavaScript Prototypal Inheritance&lt;/h2&gt;&lt;p&gt;By now, I hope you understand that all inheritance happens by delegation through the prototype.  The next obvious question would be, “How do I make one JavaScript ‘class’ inherit&amp;#x2F;delegate to another ‘class’?” One way you might be tempted to implement inheritance is by assigning prototypes.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;A.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;B&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;B.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;bar&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;B.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = A.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But all this does is make B inherit from the same thing A inherited from.  Not exactly what we wanted to see happen.&lt;/p&gt;
&lt;p&gt;OK, you say.  I know what to do, I’ll just create a new object of type A and assign THAT to the prototype of B.&lt;/p&gt;
&lt;p&gt;B.prototype &amp;#x3D; new A();&lt;/p&gt;
&lt;p&gt;You’re closer and it may work a lot of the time, but if your A function that you are using to create that other object does anything, you may end up not doing what you expected.  For really simple objects, this will work, but it is a dangerous habit to get into.&lt;/p&gt;
&lt;p&gt;What you really want to do is to use the Object.create() function.  This creates a new object without calling the constructor function.  No side effects.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;B.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(A.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But, what if that A constructor function did something important? In your B constructor function, you call the A constructor function passing it the current this pointer.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;B&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    A.&lt;span class=&#34;title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If B takes parameter than need to be passed on up to A, you can pass those additional parameters after this in your call to call().&lt;/p&gt;
&lt;p&gt;And that is how we make JavaScript inherit one object from another.  It is a lot of work.  This is why ES2015 introduces the class and extend keywords.  They do a lot of this work for us.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-types-nuance/</guid>
            <title>JavaScript Types Nuance</title>
            <link>http://davembush.github.com/javascript-types-nuance/</link>
            <category>javascript</category>
            <category>types</category>
            <pubDate>Thu, 28 Apr 2016 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I was once teaching a class on JavaScript to a group of C# developers when someone asked a very logical question, “Are JavaScript Types all derived from Object?” I loved teaching this particular group because they were actively engaged in the material.  So many times, when I teach, the students simply absorb what I say, but they don’t interact with it.  They never ask the question, “What are the implications of what is being said.” My initial instinct was to say ‘no’ based on my experience with the language.  But then as I thought about it later, I thought, “But when I use the debugger on what seems to be a primitive, don’t I see it as an object?”  And as it turns out, my instinct was right.  Not everything in JavaScript is an object.  Although there is quite a bit that you wouldn’t think was an object that is.&lt;/p&gt;
&lt;p&gt;Now that we’ve covered &lt;a href=&#34;/javascript-objectswhat-you-dont-know-can-hurt-you/&#34;&gt;JavaScript Objects&lt;/a&gt; and &lt;a href=&#34;/javascript-fields/&#34;&gt;JavaScript Object Fields&lt;/a&gt;, it is time to move on to the specifics of JavaScript types.&lt;/p&gt;
&lt;p&gt;So, why is it, when I look at some primitive values, I see them as objects?  And which types are objects and which are primitives?&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/04/image-4.png &#34;image&#34;) Photo via [Visualhunt](//visualhunt.com/)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;A-Review-of-JavaScript-Types&#34;&gt;&lt;a href=&#34;#A-Review-of-JavaScript-Types&#34; class=&#34;headerlink&#34; title=&#34;A Review of JavaScript Types&#34;&gt;&lt;/a&gt;A Review of JavaScript Types&lt;/h2&gt;&lt;p&gt;The fundamental types available to us in JavaScript are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;object&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, if you use the &lt;code&gt;typeof&lt;/code&gt; operator on null, you’ll get back “object” as the type.&lt;/p&gt;
&lt;p&gt;While &lt;code&gt;null&lt;/code&gt; is a unique type, it makes sense for &lt;code&gt;typeof&lt;/code&gt; to return “object” since the only kind of variable that could return a &lt;code&gt;null&lt;/code&gt; would be an &lt;code&gt;object&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;When-is-an-object-not-and-object&#34;&gt;&lt;a href=&#34;#When-is-an-object-not-and-object&#34; class=&#34;headerlink&#34; title=&#34;When is an object not and object?&#34;&gt;&lt;/a&gt;When is an object not and object?&lt;/h2&gt;&lt;p&gt;There is one other common type that is a bit of an odd ball.  The function type.&lt;/p&gt;
&lt;p&gt;What makes function odd is that it is, technically it is a sub-type of object.  This is good to know, and will put you light years ahead of your peers once you realize the implications.  Because a function IS an object, you can give a function additional fields.  In fact, a common way to override a function looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; originalSubstring;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; substringOverload = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a,b&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;originalSubstring&lt;/span&gt;(a,b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;originalSubstring = a.&lt;span class=&#34;property&#34;&gt;substr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.&lt;span class=&#34;property&#34;&gt;substr&lt;/span&gt; = substringOverload;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;(Note: the code above won’t really work, I’m just illustrating a point).&lt;/p&gt;
&lt;p&gt;You may have done something like the above using functions in libraries.  As long as the field is not read-only, you can do this kind of overload of a function.&lt;/p&gt;
&lt;p&gt;But, a better way, now that we know that a function is just an object, is to assign the old function as a field of the original function:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; substringOverload = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a,b&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; substringOverload.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(a,b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;substringOverload.&lt;span class=&#34;property&#34;&gt;substr&lt;/span&gt; = a.&lt;span class=&#34;property&#34;&gt;substr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.&lt;span class=&#34;property&#34;&gt;substr&lt;/span&gt; = substringOverload;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a.&lt;span class=&#34;title function_&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;What-about-Arrays&#34;&gt;&lt;a href=&#34;#What-about-Arrays&#34; class=&#34;headerlink&#34; title=&#34;What about Arrays?&#34;&gt;&lt;/a&gt;What about Arrays?&lt;/h2&gt;&lt;p&gt;Another place you may not be used to thinking clearly about variable types is with Arrays.  You might think an array is its own type.  That an Array is an Array.  But in reality, Arrays are a type of Object.  In fact, if you were to run the typeof operator against a variable that holds an Array, you would see that it is an object.&lt;/p&gt;
&lt;p&gt;Once again, because you know this, you can use this information to your advantage.&lt;/p&gt;
&lt;p&gt;You could provide your array, its own implementation of each:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Array&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;each&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;callback&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;callback&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.&lt;span class=&#34;title function_&#34;&gt;each&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This is essentially how polyfills are created.  If you write one, make sure you put in the additional code to make sure the function isn’t already implemented.  And don’t ever add a function to a native object like this without it having been declared by the standards committee as a function that is part of the spec.  Polyfills exist so that you can make older JavaScript implementations work as though they were using newer standards.  Not so we can add our own new functions to the language.  If you do, you could find yourself having a maintenance nightmare on your hands some day in the future.&lt;/p&gt;
&lt;h2 id=&#34;Newing-a-Type&#34;&gt;&lt;a href=&#34;#Newing-a-Type&#34; class=&#34;headerlink&#34; title=&#34;Newing a Type&#34;&gt;&lt;/a&gt;Newing a Type&lt;/h2&gt;&lt;p&gt;You can also write JavaScript that looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someNumber = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Number&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someString = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someBool = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Boolean&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Which will give you an Object that contains the value we passed in.  And each of those object will have Number, String, or Boolean functions available to it.&lt;/p&gt;
&lt;p&gt;But, you don’t have to new a Number, String or Boolean to get those functions.  You can get the same ability by simply assigning the value to the variable.  Under the hood, when you want to use the function that are available to all objects, the JavaScript runtime will “box” the number, string, or boolean as an object so that you can access, for example, hasOwnProperty().&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/do-this-to-increase-your-client-side-web-development-speed/</guid>
            <title>Do This To Increase Your Client Side Web Development Speed</title>
            <link>http://davembush.github.com/do-this-to-increase-your-client-side-web-development-speed/</link>
            <category>javascript</category>
            <category>client side</category>
            <category>development</category>
            <pubDate>Thu, 21 Apr 2016 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last year, in particular, I’ve developed a technique for developing the client side of a web application using JavaScript, HTML and CSS that has significantly improved my development speed.  Once I tell you, it will be obvious.  At least, it is to me … now.  But as obvious as it is, I rarely see this technique used on any of the applications my peers are working on.&lt;/p&gt;
&lt;p&gt;And while this technique is an outgrowth of my involvement with TDD, this particular technique can be used with or without TDD.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/04/image-3.png &#34;Do This To Increase Your Client Side Web Development Speed&#34;)&lt;figcaption&gt;Photo credit: [JD Hancock](//www.flickr.com/photos/jdhancock/4367347854/) via [VisualHunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Presentation-First&#34;&gt;&lt;a href=&#34;#Presentation-First&#34; class=&#34;headerlink&#34; title=&#34;Presentation First&#34;&gt;&lt;/a&gt;Presentation First&lt;/h2&gt;&lt;p&gt;For most of my career, I’ve always like to develop applications from the top down.  That is, get the GUI up first.  Don’t make it work.  Just get a picture up that you can show to the client.&lt;/p&gt;
&lt;p&gt;This isn’t the “trick” I have in mind for improving your speed.  But if you aren’t already doing this, the trick won’t help you much.&lt;/p&gt;
&lt;p&gt;The reason “Presentation First” is so important is because of a simple truth I’ve come to realize over the years.  “No one really knows what they want until they see it.”  This is particularly true in software development because, try as we have over the last several decades, we still have not come up with a way of showing in pictures what it is we are going to build.&lt;/p&gt;
&lt;p&gt;The other reason developing the GUI first is important is because it gives the client a sense that you are making rapid development.  It is amazing how much time you’ll have without interruption when you’ve been able to show something that looks really close to the real thing.&lt;/p&gt;
&lt;h2 id=&#34;Attaching-Data&#34;&gt;&lt;a href=&#34;#Attaching-Data&#34; class=&#34;headerlink&#34; title=&#34;Attaching Data&#34;&gt;&lt;/a&gt;Attaching Data&lt;/h2&gt;&lt;p&gt;The next step in my development cycle typically involves attaching data to the presentation.  Most of the programmers I know do this by making whatever REST call they need to make to the server and displaying whatever they get back.  There are at least three problems with this.&lt;/p&gt;
&lt;p&gt;First, as the data in your database changes, what displays in your presentation changes.  If you are working with a local database that you have complete control over, that is a minor problem.  But if you are, as so many of my clients are, using a common development database, you can’t be sure that the data you are playing with won’t change.&lt;/p&gt;
&lt;p&gt;Second, you really can’t be sure that what you are displaying is actually the correct fields unless you go into your database and change the contents of the fields to represent what the fields contain so that you can display that on your data.&lt;/p&gt;
&lt;p&gt;Finally, developing in this way is going to be much slower than it needs to be.&lt;/p&gt;
&lt;h2 id=&#34;The-Trick&#34;&gt;&lt;a href=&#34;#The-Trick&#34; class=&#34;headerlink&#34; title=&#34;The Trick&#34;&gt;&lt;/a&gt;The Trick&lt;/h2&gt;&lt;p&gt;Here’s the deal.  The way most of us develop applications, once we get to the part where we need to attach some data, we attach it directly to the REST end point.  At the very least, this slows our development time down because every time we load the app to make sure it is doing what we had in mind, we have to wait for it to load the data from the server as well.&lt;/p&gt;
&lt;p&gt;But aside from the other problems I mentioned above, it also means that we are dependent on whoever is developing those other end points.  If it is you, it isn’t so bad.  But lately, I’ve been working on projects where the only thing I’ve been responsible for is developing the client side.  In my last contract, I was brought in to build an application that was dependent on data I had no control over.  I did write a little C# code to get the data from a web service into a form my JavaScript client side code could use.  But most of my time was spent writing code on the client side.&lt;/p&gt;
&lt;p&gt;But it didn’t matter, because I mocked out the data on the client side until the server side data was ready.&lt;/p&gt;
&lt;p&gt;In fact, I was able to work ahead of the guy who was providing the data BECAUSE I was mocking out the data.  The project manager spent most of that contract worried that I would end up stalled because the data wasn’t ready and I spent the same amount of time assuring her that I wouldn’t get stalled until the ONLY thing I had left to do was hook the application up to real data.&lt;/p&gt;
&lt;p&gt;At my current contract, I’m working on a team that uses Java for the back end.  How’s that?  A .NET guy working on a Java team?  Well, you see, it doesn’t matter.  I was brought in as a JavaScript specialist.  And my development methodology is the same.  I am using mock data.  When I am finally ready to see it all working live, I’ll call the REST end points that I need.&lt;/p&gt;
&lt;p&gt;But in this particular Java environment, there is an additional hurdle.  If I were to develop this application the way most of my peers are developing, I would need to build the application into JAR, WAR and EAR files and copy those files over to the JBoss server.  While I have created a script for this using Node JS and NPM, the time this takes is a bit excessive.&lt;/p&gt;
&lt;p&gt;So, instead, what I’ve done is I’ve created a separate project for the bits I’m working on.  I’ve setup an Express server using Node JS and installed proxy middleware as my last route handler.  It is setup to point to the JBoss server for anything it can’t find under Node.  So, any files I need that have already been built, I can grab from JBoss, while all of my work runs under Express.&lt;/p&gt;
&lt;p&gt;(Yes, I know Eclipse will auto deploy relatively quickly, but from what I’ve seen of the JavaScript editor, I’m not a fan of Eclipse.  Actually, from what I’ve seen of Eclipse, I’m not a fan.)&lt;/p&gt;
&lt;p&gt;What this means is that I can click the run button to fire up my Express server and it loads my local JavaScript and any stuff I need from JBoss via the proxy.  I never have to deploy my work.  And I only need to wire in the real data once I have everything else working.&lt;/p&gt;
&lt;p&gt;I have the added advantage of being able to switch between my local mock data and the real data simply by loading my local data when I want mocks or the remote data when I want the real deal.  Kind of like you might do with a DI container in .NET only on the client side.&lt;/p&gt;
&lt;h2 id=&#34;TDD-Becomes-Trivial&#34;&gt;&lt;a href=&#34;#TDD-Becomes-Trivial&#34; class=&#34;headerlink&#34; title=&#34;TDD Becomes Trivial&#34;&gt;&lt;/a&gt;TDD Becomes Trivial&lt;/h2&gt;&lt;p&gt;And now that I’m working with known, mock data, implementing Test Driven Development is trivial.  Well, for me it is trivial.  You still need to make sure you write testable code.  But at least you don’t have to worry about the data part of TDD.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-mvvm-you%E2%80%99re-probably-doing-it-wrong/</guid>
            <title>JavaScript MVVM - You’re (Probably) Doing it Wrong</title>
            <link>http://davembush.github.com/javascript-mvvm-you%E2%80%99re-probably-doing-it-wrong/</link>
            <category>javascript</category>
            <category>mvvm</category>
            <pubDate>Thu, 14 Apr 2016 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;If you are using one of the many frameworks that say they are using JavaScript MVVM, you might not be using it the way it should be used. Many of my clients aren’t.&lt;/p&gt;
&lt;p&gt;This article will attempt to answer three questions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is MVVM?&lt;/li&gt;
&lt;li&gt;What are the advantages of MVVM?&lt;/li&gt;
&lt;li&gt;What are good MVVM coding practices?&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;![](/uploads/2016/04/image-1.png &#34;JavaScript &amp; MVVM&#34;)&lt;figcaption&gt;Photo credit: [uka0310](//www.flickr.com/photos/uka0310/8038385310/) via [VisualHunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-is-JavaScript-MVVM&#34;&gt;&lt;a href=&#34;#What-is-JavaScript-MVVM&#34; class=&#34;headerlink&#34; title=&#34;What is JavaScript MVVM?&#34;&gt;&lt;/a&gt;What is JavaScript MVVM?&lt;/h2&gt;&lt;p&gt;The first question we need to ask before we can ever start coding is, “What is MVVM?”  The reason for this is that if you don’t understand what this design pattern is attempting to do, you’ll probably ending up making some pretty severe coding mistakes when it comes time to implement it.&lt;/p&gt;
&lt;p&gt;In the MVVM design pattern, like the MVC design pattern, the first M represents the Model and the first V represents the View.  As with MVC, the Model represents the data you are trying to manipulate.  The View represents the presentation layer.  In MVVM, there is also an entity called a ViewModel which is an object or set of objects that represent the View’s State.  This would include any data you want to present from your Model as well as ancillary states such as what elements are enabled&amp;#x2F;disabled or visible&amp;#x2F;hidden.  Not that these are the only items.  This is just a few examples.&lt;/p&gt;
&lt;p&gt;What makes MVVM cool is that you don’t have to worry about how data gets from the View to the ViewModel or from the ViewModel back into the View.  That all happens automatically.  Although, depending on the implementation, you might have to write a bit more code to notify the View that something changed in the ViewModel so that it knows to update itself.&lt;/p&gt;
&lt;p&gt;But, you may be left wondering, “Where do event handlers go?” Well, that is one of the things I find confusing about calling it MVVM.  Because in every implementation I’ve ever worked on, there is still a controller of some sorts.  Or, call it a ViewController.  It is the thing that responds to events in the view and updates the ViewModel as needed.&lt;/p&gt;
&lt;p&gt;So, in general, you have a View that updates the ViewModel automatically and fires events to the ViewController.  This is all specified declaratively.  When an event is fired, the ViewController responds to the event and updates the ViewModel with any state changes.  When the ViewModel changes, it notifies the View that the View should update the presentation.  When the controller needs to know about the current state of the View, it ask the ViewModel for that information because it should be reflected there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/04/image-2.png&#34; alt=&#34;JavaScript MVVM&#34; title=&#34;JavaScript MVVM&#34;&gt; If you’ve ever used one of the many MVVM frameworks out there, you’ll recognize that many of them combine the ViewModel and the ViewController into one entity.  I’ve separated them out here for clarity and because I believe that if all possible, they should be maintained separately to maintain the Single Responsibility Principle.  However, I recognize that the best you may be able to do is provide to separate sections in one class.  The main point here is that any state changes to the view happen because the ViewModel was updated and not because the ViewController called into the View to make the change.&lt;/p&gt;
&lt;h2 id=&#34;What-JavaScript-MVVM-is-Not&#34;&gt;&lt;a href=&#34;#What-JavaScript-MVVM-is-Not&#34; class=&#34;headerlink&#34; title=&#34;What JavaScript MVVM is Not&#34;&gt;&lt;/a&gt;What JavaScript MVVM is Not&lt;/h2&gt;&lt;p&gt;One rookie mistake with any MV* design pattern is that many programmers think that the View, ViewModel or ViewController are the only three places where code can live in this pattern.  But the truth of the matter is, the pattern only describes how to handle the organization of your presentation code.  MVVM does not specify where your business rules should be located.  But one place they should not go is in your ViewController.  The only code that should be in your ViewController is code that updates or retrieves information from the ViewModel, or code that calls out to another class to perform some sort of business rules.&lt;/p&gt;
&lt;h2 id=&#34;Advantages-of-JavaScript-MVVM&#34;&gt;&lt;a href=&#34;#Advantages-of-JavaScript-MVVM&#34; class=&#34;headerlink&#34; title=&#34;Advantages of JavaScript MVVM&#34;&gt;&lt;/a&gt;Advantages of JavaScript MVVM&lt;/h2&gt;&lt;p&gt;While there are many advantages to using MVVM, the top three on my list are:&lt;/p&gt;
&lt;h3 id=&#34;View-Refactoring&#34;&gt;&lt;a href=&#34;#View-Refactoring&#34; class=&#34;headerlink&#34; title=&#34;View Refactoring&#34;&gt;&lt;/a&gt;View Refactoring&lt;/h3&gt;&lt;p&gt;I’ve worked on several systems in the past where it was necessary for my code to know what more about the View that it should have.  Whenever I wanted to change the ID of an element in my view, it was necessary for me to update code in other parts of my system or the code would break.  When you are using MVVM properly, you can not only change your view however you want, but you don’t have to even have an ID if you don’t need to for some other reason (like running Selenium Tests).&lt;/p&gt;
&lt;h3 id=&#34;Interchangeable&#34;&gt;&lt;a href=&#34;#Interchangeable&#34; class=&#34;headerlink&#34; title=&#34;Interchangeable&#34;&gt;&lt;/a&gt;Interchangeable&lt;/h3&gt;&lt;p&gt;In fact, if you wanted to, you could create multiple views and associate each of them with the same ViewModel and ViewController.  You might create a View for a version of you application that runs on the desktop and another View for a version that runs on a phone.  Implemented correctly, you may have state information in your ViewModel that never makes it to the View because the version of the View you are currently running doesn’t display that information.&lt;/p&gt;
&lt;h3 id=&#34;Testing&#34;&gt;&lt;a href=&#34;#Testing&#34; class=&#34;headerlink&#34; title=&#34;Testing&#34;&gt;&lt;/a&gt;Testing&lt;/h3&gt;&lt;p&gt;For me, the most compelling reason to us MVVM is because it makes it much easier to test my application.  You only need to be able to tell the ViewController where the ViewModel is.  You can call the event handlers directly in your test and verify that they update the ViewModel correctly without ever having to create a View.  Since the View is declarative, you can trust that your framework will do what it should and leave testing the View to a larger Application level test rather than trying to unit test it.&lt;/p&gt;
&lt;h2 id=&#34;JavaScript-MVVM-Best-Practices&#34;&gt;&lt;a href=&#34;#JavaScript-MVVM-Best-Practices&#34; class=&#34;headerlink&#34; title=&#34;JavaScript MVVM Best Practices&#34;&gt;&lt;/a&gt;JavaScript MVVM Best Practices&lt;/h2&gt;&lt;h3 id=&#34;Never-Call-the-View-from-the-ViewController&#34;&gt;&lt;a href=&#34;#Never-Call-the-View-from-the-ViewController&#34; class=&#34;headerlink&#34; title=&#34;Never Call the View from the ViewController&#34;&gt;&lt;/a&gt;Never Call the View from the ViewController&lt;/h3&gt;&lt;p&gt;There are several ways I typically see this rule violated.  The first, and most obvious is when the view is called to retrieve or set state information instead of using the ViewModel.  But another way I typically see this violated is when programmers insist or writing event wire-up code in the ViewController.  The reason wiring up event handlers is a bad idea is because now I have to have some sort of DOM locator code in my ViewController.  This means if I change the identifier or the location of the DOM item, I have to come in and change my locator code.  One way of testing if the code you are writing belongs where you are writing it is to ask the question, “If I executed this code without the View, would it still work correctly?”&lt;/p&gt;
&lt;h3 id=&#34;Event-Handlers-Should-Be-Light&#34;&gt;&lt;a href=&#34;#Event-Handlers-Should-Be-Light&#34; class=&#34;headerlink&#34; title=&#34;Event Handlers Should Be Light&#34;&gt;&lt;/a&gt;Event Handlers Should Be Light&lt;/h3&gt;&lt;p&gt;As I mentioned above, you don’t want to have any more code in your ViewController than is absolutely necessary to update the ViewModel.  This will often mean calling out to some other object to get the actual work done.&lt;/p&gt;
&lt;h3 id=&#34;ViewModel-Should-Only-Contain-ViewState&#34;&gt;&lt;a href=&#34;#ViewModel-Should-Only-Contain-ViewState&#34; class=&#34;headerlink&#34; title=&#34;ViewModel Should Only Contain ViewState&#34;&gt;&lt;/a&gt;ViewModel Should Only Contain ViewState&lt;/h3&gt;&lt;p&gt;It might be tempting to put executable code in your ViewModel at times.  Resist this urge.  If you need a computed property, that’s one thing.  If you start processing business logic, you are probably headed down the wrong path.  My general test here is this.  If I need to write a test case against my ViewModel code directly to get 100% code coverage, I’ve probably coded something wrong.  Of course, you have to be writing unit test and a code coverage tool for this rule to work.&lt;/p&gt;
&lt;h2 id=&#34;If-You-Think-You-Need-to-Violate-A-Best-Practice&#34;&gt;&lt;a href=&#34;#If-You-Think-You-Need-to-Violate-A-Best-Practice&#34; class=&#34;headerlink&#34; title=&#34;If You Think You Need to Violate A Best Practice&#34;&gt;&lt;/a&gt;If You Think You Need to Violate A Best Practice&lt;/h2&gt;&lt;p&gt;Finally, I want to address the issue of, “What if…” This past week, I ran into a situation where the control I was using was not setup to implement MVVM the way my framework intended.  So, this problem is fresh in my mind.  The solution is almost always to extend the component and add in the hooks you need so that you can use the framework properly.  While the temptation to just get something working will be strong, your overall productivity will suffer if you start bending the rules.  If you can’t figure out how to get the code to submit, ask for help.  You may need to break some of the rules in the extension, but at least the violations are isolated from the rest of your code in such a way that if the component ever gets fixed, you can go to one location to update your code.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/ext-js-6-by-sencha-the-good-the-bad-the-ugly/</guid>
            <title>Ext JS 6 by Sencha - The Good, The Bad, The Ugly</title>
            <link>http://davembush.github.com/ext-js-6-by-sencha-the-good-the-bad-the-ugly/</link>
            <category>javascript</category>
            <category>ext js</category>
            <pubDate>Thu, 07 Apr 2016 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Long time readers may remember that I started using Ext JS about 3 years ago.  At the time, I was using version 4.2.2.  I recently started a new contract where they are using Ext JS 6.0.1.  I have to say, this version solves a lot of the architectural issues I had with the 4.x series.  But, there are still problems.&lt;/p&gt;
&lt;p&gt;Since I’ve provided an evaluation of &lt;a href=&#34;/angular-2-first-impressions-compared-to-angular-1/&#34;&gt;Angular 2&lt;/a&gt; and &lt;a href=&#34;/react-js-and-associated-bits/&#34;&gt;React JS&lt;/a&gt;, I thought providing an evaluation of the current version of Ext JS would be appropriate since these three seem to be the main players in the corporate world.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/04/image.png &#34;Ext JS by Sencha - The Good, The Bad, The Ugly&#34;)&lt;figcaption&gt;Photo credit: [sanbeiji](//www.flickr.com/photos/sanbeiji/5606497634/) via [Visual Hunt](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Ext-JS-The-Good&#34;&gt;&lt;a href=&#34;#Ext-JS-The-Good&#34; class=&#34;headerlink&#34; title=&#34;Ext JS - The Good&#34;&gt;&lt;/a&gt;Ext JS - The Good&lt;/h2&gt;&lt;h3 id=&#34;MVVM&#34;&gt;&lt;a href=&#34;#MVVM&#34; class=&#34;headerlink&#34; title=&#34;MVVM&#34;&gt;&lt;/a&gt;MVVM&lt;/h3&gt;&lt;p&gt;I’ve always had three major complaints about Ext JS.  Of the three, the fact that Ext JS is nearly impossible to test is the one that drove me away.  In fact, I almost didn’t interview for the contract I have now because they are using Ext JS.  This is because the 4.2 version that I was using implemented what they called the MVC framework.  The problem is, the MVC framework they implemented was not anything &lt;a href=&#34;/designPatterns&#34;&gt;the Gang of Four&lt;/a&gt; would recognize.  Once I realized that what they were calling MVC wasn’t really MVC, I was able to learn how to use the product much better.&lt;/p&gt;
&lt;p&gt;But being the TDD guy that I am, I was always frustrated by their implementation of MVC because in order to test anything in the Controller, I had to have the view available.  And while I tried several ways of mitigating this problem, I was never completely satisfied with the solution.  I ought to be able to test my controller without a view, or if I have to have a view, it should be some sort of fake view, or be able to render into a fake DOM like React JS does.&lt;/p&gt;
&lt;p&gt;But, in Ext JS 6, they’ve provided an alternate framework.  This time it is also more accurately named.  They have provided an MVVM implementation.  In the View, you provide your layout, declarative syntax to access the View’s state from the ViewModel and to specify the event handlers using listener blocks that tell the view what methods to call in the associated ViewController class.&lt;/p&gt;
&lt;p&gt;In the ViewController, your methods can access the ViewModel by calling getModel() and can set the state of the view by calling the ViewModel’s set() method.  Once this is done, the View can update using the ViewModel’s new state.&lt;/p&gt;
&lt;p&gt;What this means for testing is that I can test without the View by overriding the ViewContoller.getModel() method to return the ViewModel.  Run my test for a method and check the state of the ViewModel.  Look Ma, no View!&lt;/p&gt;
&lt;h3 id=&#34;Everything-You-Need&#34;&gt;&lt;a href=&#34;#Everything-You-Need&#34; class=&#34;headerlink&#34; title=&#34;Everything You Need&#34;&gt;&lt;/a&gt;Everything You Need&lt;/h3&gt;&lt;p&gt;One of the biggest selling points for using Ext JS is that just about everything you could need is provided for you in once product.  Unlike Angular or React JS where one project provides the framework and another project or projects provide components, nearly everything you are going to need for your application is provided out of the box.  This is not to say that there aren’t third party providers for Ext JS, but the need for them is very limited.&lt;/p&gt;
&lt;h3 id=&#34;Consistent-Rendering&#34;&gt;&lt;a href=&#34;#Consistent-Rendering&#34; class=&#34;headerlink&#34; title=&#34;Consistent Rendering&#34;&gt;&lt;/a&gt;Consistent Rendering&lt;/h3&gt;&lt;p&gt;One of the major attractions Ext has offered is that you don’t need to worry about cross browser rendering issues.  If you still need to support REALLY old browsers, this may still be a big selling point for you.  I think this will matter less in the future as the browsers continue to stabilize around standards.&lt;/p&gt;
&lt;h3 id=&#34;Responsive-x2F-Adaptive&#34;&gt;&lt;a href=&#34;#Responsive-x2F-Adaptive&#34; class=&#34;headerlink&#34; title=&#34;Responsive&amp;#x2F;Adaptive&#34;&gt;&lt;/a&gt;Responsive&amp;#x2F;Adaptive&lt;/h3&gt;&lt;p&gt;Even though Ext JS uses a none standard way of rendering controls (see below) they do manage to achieve Adaptive and Responsive designs.&lt;/p&gt;
&lt;h3 id=&#34;Ability-to-Control-DOM-Manipulation&#34;&gt;&lt;a href=&#34;#Ability-to-Control-DOM-Manipulation&#34; class=&#34;headerlink&#34; title=&#34;Ability to Control DOM Manipulation&#34;&gt;&lt;/a&gt;Ability to Control DOM Manipulation&lt;/h3&gt;&lt;p&gt;Finally, if you are having trouble achieving performance with the current way you are rending DOM changes, you will be happy to know that Ext JS does provide a way of turning of rendering to the DOM while you make all the changes and then turning it back on to do the final rendering.  But, at least my last usage of this, indicates that it doesn’t really turn off ALL DOM manipulation.  If you are inserting new DOM elements, those go out to the screen.  All Ext JS really does is to turn off their layout code.&lt;/p&gt;
&lt;h3 id=&#34;Who-Ya-Gonna-Call&#34;&gt;&lt;a href=&#34;#Who-Ya-Gonna-Call&#34; class=&#34;headerlink&#34; title=&#34;Who Ya Gonna Call?&#34;&gt;&lt;/a&gt;Who Ya Gonna Call?&lt;/h3&gt;&lt;p&gt;One of the strongest reasons many organizations choose Ext JS is because the price of the license gives you access to Sencha support.  Companies I’ve worked for have used this for everything from “My code doesn’t work, what am I doing wrong?” and actually getting an answer to “I think you have a bug here.” and getting the bug fixed.  Kind of a private StackOverflow with direct access to the programmers who wrote the framework.&lt;/p&gt;
&lt;h2 id=&#34;Ext-JS-The-Bad&#34;&gt;&lt;a href=&#34;#Ext-JS-The-Bad&#34; class=&#34;headerlink&#34; title=&#34;Ext JS - The Bad&#34;&gt;&lt;/a&gt;Ext JS - The Bad&lt;/h2&gt;&lt;h3 id=&#34;Lock-In&#34;&gt;&lt;a href=&#34;#Lock-In&#34; class=&#34;headerlink&#34; title=&#34;Lock In&#34;&gt;&lt;/a&gt;Lock In&lt;/h3&gt;&lt;p&gt;If you decide to use Ext JS, you are really making a much more significant commitment than if you were choosing to use either Angular or React.  With either of those two, I can write standard JavaScript and I can mix and match several different existing frameworks.  Since just about everything in Ext JS is proprietary, mixing and matching is not only frowned upon, but they warn against it.  If you are using Ext JS, you are going to use ALL of Ext JS for everything.&lt;/p&gt;
&lt;h3 id=&#34;Use-Strict&#34;&gt;&lt;a href=&#34;#Use-Strict&#34; class=&#34;headerlink&#34; title=&#34;Use Strict&#34;&gt;&lt;/a&gt;Use Strict&lt;/h3&gt;&lt;p&gt;Standard JS best practice recommends placing “use strict”; at the top of you IIFE block to protect you from making stupid mistakes.  Unfortunately, you can’t do this in your Ext JS code without having to work around the problems it produces.&lt;/p&gt;
&lt;h3 id=&#34;String-Based&#34;&gt;&lt;a href=&#34;#String-Based&#34; class=&#34;headerlink&#34; title=&#34;String Based&#34;&gt;&lt;/a&gt;String Based&lt;/h3&gt;&lt;p&gt;Ext JS is probably the most string based language I’ve ever seen.  While they now have plugins for some of the more popular IDEs that mitigate against the risk this imposes on your code, in terms of good solid JavaScript, there are much better ways of writing code than what Ext JS forces you into.&lt;/p&gt;
&lt;h3 id=&#34;Nesting-Issues&#34;&gt;&lt;a href=&#34;#Nesting-Issues&#34; class=&#34;headerlink&#34; title=&#34;Nesting Issues&#34;&gt;&lt;/a&gt;Nesting Issues&lt;/h3&gt;&lt;p&gt;As I mentioned above, Ext JS does their own layouts in order to achieve a presentation that will look the same regardless of what browser it is running on.  However, the cost of this is that if you nest components too deeply, rendering your view or changes to your view, will take significantly longer than anyone is willing to wait around for.  So, to get around this, you end up writing sub optimal code from just about every coding principle in existence.  Specifically, DRY and SRP are difficult to achieve using Ext JS views.&lt;/p&gt;
&lt;h3 id=&#34;Version-X-0-0-is-Always-Broken&#34;&gt;&lt;a href=&#34;#Version-X-0-0-is-Always-Broken&#34; class=&#34;headerlink&#34; title=&#34;Version X.0.0 is Always Broken&#34;&gt;&lt;/a&gt;Version X.0.0 is Always Broken&lt;/h3&gt;&lt;p&gt;I’ve complained about this publicly before.  But it seems to me, and everyone else I talk with that has used Ext JS that every .0.0 version is buggy.  Things that used to work in the previous version no longer work.  Despite the assertion from Sencha that they have thousands of tests.  I always wonder what kind of code coverage they have and if they have a test that covers every feature for every component they have documented.&lt;/p&gt;
&lt;h2 id=&#34;Ext-JS-The-Ugly&#34;&gt;&lt;a href=&#34;#Ext-JS-The-Ugly&#34; class=&#34;headerlink&#34; title=&#34;Ext JS - The Ugly&#34;&gt;&lt;/a&gt;Ext JS - The Ugly&lt;/h2&gt;&lt;h3 id=&#34;Ugly-HTML&#34;&gt;&lt;a href=&#34;#Ugly-HTML&#34; class=&#34;headerlink&#34; title=&#34;Ugly HTML&#34;&gt;&lt;/a&gt;Ugly HTML&lt;/h3&gt;&lt;p&gt;There is a lot that is ugly about Ext JS, but nothing is more visibly ugly than the HTML it produces.  This is because, in order to produces a view that will render on any browser, they’ve resorted to using HTML tables to wrap just about every standard control.  This is getting better.  There is less HTML generated in Ext JS 6 than there was in Ext JS 4, but it is still relatively ugly.&lt;/p&gt;
&lt;p&gt;And that whole nesting issue could go away tomorrow if they would give up on trying to control the rendering of the view through JavaScript.  Why do with JavaScript what CSS was designed to do and does MUCH better?!&lt;/p&gt;
&lt;h3 id=&#34;SASS-isn’t-SASS&#34;&gt;&lt;a href=&#34;#SASS-isn’t-SASS&#34; class=&#34;headerlink&#34; title=&#34;SASS isn’t SASS&#34;&gt;&lt;/a&gt;SASS isn’t SASS&lt;/h3&gt;&lt;p&gt;Up until version 6, Sencha’s theming engine used standard SASS.  With version 6, they’ve dumped standard SASS for their own implementation that mostly does what SASS does but has a few embellishments that aren’t all bad, except for the fact that they still kept the SASS extensions for the files and the syntax is mostly the same.&lt;/p&gt;
&lt;h3 id=&#34;None-Standard-JavaScript&#34;&gt;&lt;a href=&#34;#None-Standard-JavaScript&#34; class=&#34;headerlink&#34; title=&#34;None Standard JavaScript&#34;&gt;&lt;/a&gt;None Standard JavaScript&lt;/h3&gt;&lt;p&gt;But of all the issues I have with Ext JS 6, the one that bugs me the most is that their framework provides something that runs on JavaScript but really isn’t JavaScript.  They have their own way of declaring a class.  Their own way of instantiating a class.  Their own requires engine.  Their own bundling and minification engine.&lt;/p&gt;
&lt;p&gt;And since I can’t even use “use strict”; in what they have now – something that has been around long enough that it should be supported by every seriously used framework in existence – it makes me wonder what future embellishments to the JavaScript language we won’t be able to use because Sencha thinks they have a better idea.&lt;/p&gt;
&lt;p&gt;Will I be able to use the “class” keyword in the future instead of Ext.define()?&lt;/p&gt;
&lt;h3 id=&#34;None-Standard-Build-Tools&#34;&gt;&lt;a href=&#34;#None-Standard-Build-Tools&#34; class=&#34;headerlink&#34; title=&#34;None Standard Build Tools&#34;&gt;&lt;/a&gt;None Standard Build Tools&lt;/h3&gt;&lt;p&gt;Not only does Ext JS use none standard JavaScript, but they are using their own proprietary build tools to deploy the final applications.  Along with using their own version of SASS, they also have their own implementation of bundling and minification.  Why not use gulp or grunt and allow us to bundle our apps our way?  Oh, right, they have their own implementation of requires too.  And now they want to sell us proprietary testing tools.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, is Ext JS for you?  That’s a good question.  You’ll need to evaluate if the good parts outweigh the bad parts.  It isn’t like either Angular or React have everything.  There is no perfect choice.  There is the best choice for you and your organization.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/an-explanation-of-the-flux-pattern/</guid>
            <title>An Explanation of the Flux Pattern</title>
            <link>http://davembush.github.com/an-explanation-of-the-flux-pattern/</link>
            <category>javascript</category>
            <category>react.js</category>
            <category>flux</category>
            <pubDate>Thu, 31 Mar 2016 07:28:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last couple of weeks, I’ve mentioned that I’ve been learning React JS.  First in the article “&lt;a href=&#34;/react-js-and-associated-bits/&#34;&gt;Reaction to React JS and Associated Bits&lt;/a&gt;” and then last week in my article “&lt;a href=&#34;/test-driven-learning-an-experiment/&#34;&gt;Test Driven Learning&lt;/a&gt;”. &lt;/p&gt;
&lt;p&gt;In the first article, I mentioned that if you use React JS, you’ll probably end up using the Flux design pattern and since there are multiple ways of implementing flux, getting a clear definition of what it is and how it should work can be confusing.  At least, I found it confusing.&lt;/p&gt;
&lt;p&gt;And now that I’ve figured it out, I thought it might be helpful both to myself and to the programming community at large if I offered my own Explanation of the Flux Pattern.  At the very least, it will give me one more way of solidifying the concept in my own brain.  Maybe it will be helpful to you as well.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2016/03/image-5.png &#34;Flux&#34;)&lt;figcaption&gt;Photo credit: [jeffreagan](//www.flickr.com/photos/jeffreagan/22033828931/) via [VisualHunt.com](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Flux-“One-Way-Data-Binding”&#34;&gt;&lt;a href=&#34;#Flux-“One-Way-Data-Binding”&#34; class=&#34;headerlink&#34; title=&#34;Flux “One Way Data Binding”&#34;&gt;&lt;/a&gt;Flux “One Way Data Binding”&lt;/h2&gt;&lt;p&gt;One of the first concepts you’ll hear when you start to learn Flux is that Flux implements “One Way Data Binding.”  This is unfortunate because if you start implementing Flux thinking it is any kind of data binding, you are already headed in the wrong direction.  Data binding holds with it this concept that things will happen automatically and declaratively.  Neither is true in the Flux world.  In fact, the reason Flux exist at all is because, in the Flux world, control over what happens when is the reason for its existence.  So, forget data binding.  Flux is “One Way Data Flow”.&lt;/p&gt;
&lt;h2 id=&#34;Pub-x2F-Sub&#34;&gt;&lt;a href=&#34;#Pub-x2F-Sub&#34; class=&#34;headerlink&#34; title=&#34;Pub&amp;#x2F;Sub&#34;&gt;&lt;/a&gt;Pub&amp;#x2F;Sub&lt;/h2&gt;&lt;p&gt;Flux is heavily reliant on the pub&amp;#x2F;sub model.  Pub&amp;#x2F;sub is short for Publish&amp;#x2F;Subscribe.  This comes from the real world.  You subscribe to a newspaper, or magazine, or… whatever.  Every time the thing you subscribe to is published, you get it.&lt;/p&gt;
&lt;p&gt;It is no different in Flux.  An object will subscribe to another object.  Anytime the second object does something worth publishing, the first object gets notified. &lt;/p&gt;
&lt;p&gt;The beauty of implementing a system in this way is that the publisher doesn’t need to know anything about the subscribers.  If there is a subscriber, the subscriber gets notified.  If there is no subscriber, nothing happens.  The subscriber does need to know something about the publisher so that he can say he wants to know when something is happening.  While you might thing this would create a tight coupling between the two, it doesn’t have to.&lt;/p&gt;
&lt;h2 id=&#34;Singletons&#34;&gt;&lt;a href=&#34;#Singletons&#34; class=&#34;headerlink&#34; title=&#34;Singletons&#34;&gt;&lt;/a&gt;Singletons&lt;/h2&gt;&lt;p&gt;There is a pattern in object oriented programming called “Singletons.”  Just like the name implies, this means there is only one object of that type in the system.  Some people consider Singletons evil.  But the benefit, especially in the Flux world, is that finding an instance of the object is easy.  You just ask for it.&lt;/p&gt;
&lt;h2 id=&#34;Flux-Dispatcher&#34;&gt;&lt;a href=&#34;#Flux-Dispatcher&#34; class=&#34;headerlink&#34; title=&#34;Flux Dispatcher&#34;&gt;&lt;/a&gt;Flux Dispatcher&lt;/h2&gt;&lt;p&gt;The Dispatcher is the central Flux object.  If you are using the Flux implementation from Facebook, your Dispatcher object will extend the Dispatcher class.  There really isn’t much too it, and you may be able to get away with just using the Dispatcher class directly.  But I create a new derived object so I can extend it if I need to.&lt;/p&gt;
&lt;p&gt;Everything in the system that needs to know when something interesting happens in the view layer of your code, subscribes to the dispatcher.  And anytime something happens in the view layer that other objects in your system might want to know about, the dispatcher is called with a message telling it what action we are looking to perform.&lt;/p&gt;
&lt;p&gt;So, in the demo app I am building, when the main view loads, the componentWillMount() method in my view sends the dispatcher a message telling it that it is looking for a list to display.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;componentWillMount&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;AppDispatch&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;actionType&lt;/span&gt;:&lt;span class=&#34;title class_&#34;&gt;ActionTypes&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;CRUD_LIST&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;  On the other end of this request, I have a store that has registered with the dispatcher.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;AppDispatcher&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;register&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;action&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(action.&lt;span class=&#34;property&#34;&gt;actionType&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ActionTypes&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;CRUD_LIST&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            store.&lt;span class=&#34;title function_&#34;&gt;list&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that I am using “enumerations” to keep the code clean.  The reality is the ActionTypes are just strings.&lt;/p&gt;
&lt;h2 id=&#34;Flux-EventEmitter&#34;&gt;&lt;a href=&#34;#Flux-EventEmitter&#34; class=&#34;headerlink&#34; title=&#34;Flux EventEmitter&#34;&gt;&lt;/a&gt;Flux EventEmitter&lt;/h2&gt;&lt;p&gt;We have notifications flowing down to our store to tell it we need some information or want it to do something, like save the data.  But once that is complete, how do we let the view know that the information it needs to display has changed? Well, it is actually very similar.  The view tells the store, “Hey, any time you do something interesting with the data, let me know.&lt;/p&gt;
&lt;p&gt;So, once again we setup a Pub&amp;#x2F;Sub relationship.  This time, the store is the publisher and the view is the listener.  So, in our view, we’ll setup the listener by adding it to our componentWillMount() method&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;componentWillMount&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CrudStore&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;addChangeListener&lt;/span&gt;(self.&lt;span class=&#34;property&#34;&gt;onChange&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;AppDispatc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;``&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;`h.dispatch(&amp;#123;actionType:ActionTypes.CRUD_LIST&amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;And in our store, our list() method (in this case) will send the message.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;``&lt;/span&gt; javascript&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;list&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    superAgent.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/api/contact&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;end&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;error,response&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!error)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            response.&lt;span class=&#34;property&#34;&gt;body&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                item.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt; = item.&lt;span class=&#34;property&#34;&gt;_id&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                item.&lt;span class=&#34;property&#34;&gt;dob&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Date&lt;/span&gt;(item.&lt;span class=&#34;property&#34;&gt;dob&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;emitChange&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;ActionTypes&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;CRUD_LIST&lt;/span&gt;,response);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I’m using superAgent here to make an ajax call that will get me the list.  When it returns, I call emitChange which will eventually call the callback I passed in from the view to tell the view that something changed.&lt;/p&gt;
&lt;h2 id=&#34;Push-vs-Pull&#34;&gt;&lt;a href=&#34;#Push-vs-Pull&#34; class=&#34;headerlink&#34; title=&#34;Push vs Pull&#34;&gt;&lt;/a&gt;Push vs Pull&lt;/h2&gt;&lt;p&gt;Now, there seems to be two minds about how this all should work.  Do you just notify the view that something happened and let the view go get the data it needs?  Or do you pass the data the view will need along with the notification? It would seem to me that while either one will work, if we think of Flux as “One Way” data flow, or even One Way data binding, it makes a lot more sense to push the data around.  And so, what you’ll see me do in the callbacks that live in my view code, is that they will receive the data and push it into the view state.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;onChange&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;type,data&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(type === &lt;span class=&#34;title class_&#34;&gt;ActionTypes&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;CRUD_LIST&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.&lt;span class=&#34;title function_&#34;&gt;setState&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;data&lt;/span&gt;: data.&lt;span class=&#34;property&#34;&gt;body&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Visually&#34;&gt;&lt;a href=&#34;#Visually&#34; class=&#34;headerlink&#34; title=&#34;Visually&#34;&gt;&lt;/a&gt;Visually&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/uploads/2016/03/image-6.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt; The arrows represent the direction of data flow.  You can assume that if the data is flowing to something, there was a corresponding listener setup.&lt;/p&gt;
&lt;p&gt;The top windows represent the view.  The cog represents the dispatcher (you can see that it sends the notification to everything) and the disks represent the data stores.  You should note that the dispatcher notifies all of the stores because there is only one dispatcher to listen to.  Finally, since not all of the views care about all of the stores, I send notifications to particular views that care.&lt;/p&gt;
&lt;p&gt;There may be cases where you would have something at the store level that isn’t, technically, a store.  That’s OK.  But I think 99% of the time, you’ll end up having stores be thing thing that the dispatchers send information to.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;I have not given a lot of implementation details here because what I wanted to convey was the overarching concept behind Flux.  Once I’ve finished my reference app for this, I may go into more detail at the implementation level.  Don’t forget to sign up for the newsletter so you don’t miss anything.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/reactions-to-react-js-and-associated-bits/</guid>
            <title>Reactions to React JS and Associated Bits</title>
            <link>http://davembush.github.com/reactions-to-react-js-and-associated-bits/</link>
            <category>javascript</category>
            <category>react.js</category>
            <category>flux</category>
            <pubDate>Thu, 17 Mar 2016 08:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve been learning React JS over the last several weeks.  Currently, I now know 4 of the major JavaScript frameworks: Angular 1, Angular 2, EXTjs (4.2 – 6.0.1), and now React JS.  To be clear, I also know Knockout and JQuery.  But I don’t consider these frameworks so much as libraries.  They’ve helped me understand the principles used in the frameworks, but they are not frameworks.  What follows is a summary of what I consider React’s strengths and weaknesses.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/03/image-3.png&#34; alt=&#34;React JS&#34; title=&#34;React JS&#34;&gt; Photo credit: &lt;a href=&#34;//www.flickr.com/photos/steffen-fam-pics/5472880836/&#34;&gt;kristin osier&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com&#34;&gt;VisualHunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt;CC BY&lt;/a&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;What-is-React-JS&#34;&gt;&lt;a href=&#34;#What-is-React-JS&#34; class=&#34;headerlink&#34; title=&#34;What is React JS?&#34;&gt;&lt;/a&gt;What is React JS?&lt;/h2&gt;&lt;p&gt;To be fair, React JS is one of those frameworks that borders on being considered a library.  This is because React itself is only concerned with the presentation layer of your JavaScript code.  However, as I learned over the last several weeks, if you are going to use React JS properly, you’ll also end up using some kind of Flux pattern.  You’ll also need some way of making AJAX calls.  And while each of these are separate decisions you’ll need to make about which library you want to use for these parts of the stack, they are all part of the React coding philosophy.  So React, the philosophy, is more like a framework. React JS, the library, is more concerned with presentation.  And what most people will tell you about React JS is that any DOM changes it makes are all made to a Virtual DOM instead of writing directly to the DOM.  By doing this, screen updates can be bundled into one change and are only made when they are needed.  This is in contrast to most other libraries that allow you to write to the screen directly. As I’ve written before, &lt;a href=&#34;/javascript-performance-tweaks/&#34;&gt;the fewer times you can update your DOM from your JavaScript, the better performance you will see&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;React-JS-Pros&#34;&gt;&lt;a href=&#34;#React-JS-Pros&#34; class=&#34;headerlink&#34; title=&#34;React JS Pros&#34;&gt;&lt;/a&gt;React JS Pros&lt;/h2&gt;&lt;p&gt;So the first main benefit to using React JS is that you gain better performance because you aren’t writing directly to the DOM when you make a change to the presentation layer.&lt;/p&gt;
&lt;p&gt;But, that isn’t what I would consider the best benefit of using React JS.&lt;/p&gt;
&lt;h3 id=&#34;Turtles-All-The-Way-Down&#34;&gt;&lt;a href=&#34;#Turtles-All-The-Way-Down&#34; class=&#34;headerlink&#34; title=&#34;Turtles All The Way Down *&#34;&gt;&lt;/a&gt;Turtles All The Way Down &lt;a href=&#34;//en.wikipedia.org/wiki/Turtles_all_the_way_down&#34;&gt;*&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You see, the reason that React JS can avoid writing to the screen directly is because it puts all of the presentation code in JavaScript using a syntax called ‘JSX’.  Now, as several places I was learning React JS from pointed out, this isn’t as ‘wrong’ as it sounds.&lt;/p&gt;
&lt;p&gt;In Angular, for example, we are accustom to putting JavaScript in our HTML.  Here, we are putting HTML in our JavaScript.  In both cases, the View layer is separate from our business logic or data access (or should be) so we have not violated the Single Responsibility Principle in any way using either approach.&lt;/p&gt;
&lt;p&gt;However, have you tried to unit test code you’ve placed in your HTML?  It is not easy, although I think I have a way that might make that easier now that I’ve done some work with React JS.  But, because everything is JavaScript, it is very easy to mock out a child component and actually Unit Test the presentation layer one component at a time.  In fact, if you concentrate on testing as you go, you will be forced to create very small components that you then compose into your pages.&lt;/p&gt;
&lt;p&gt;In fact, it is the testing story that makes React JS my preferred framework right now.&lt;/p&gt;
&lt;h3 id=&#34;Testing&#34;&gt;&lt;a href=&#34;#Testing&#34; class=&#34;headerlink&#34; title=&#34;Testing&#34;&gt;&lt;/a&gt;Testing&lt;/h3&gt;&lt;p&gt;And while we are on the subject of testing, you might wonder how you test presentation layer stuff.&lt;/p&gt;
&lt;p&gt;The React JS guys have created a test framework based on Jasmine called Jest.  The extensions in Jest let you render a component into a “fake DOM” using JSDom.  From there you can test to make sure the HTML you were expecting got rendered correctly and fire events and test to make sure that what you expected would happen actually happened.&lt;/p&gt;
&lt;p&gt;What it doesn’t do is let you know that the component rendered in the way that you were expecting.  There are other, higher level tools, that are already available to do that.&lt;/p&gt;
&lt;h3 id=&#34;Super-Loose-Coupling&#34;&gt;&lt;a href=&#34;#Super-Loose-Coupling&#34; class=&#34;headerlink&#34; title=&#34;Super Loose Coupling&#34;&gt;&lt;/a&gt;Super Loose Coupling&lt;/h3&gt;&lt;p&gt;The React JS community refers to this feature as “One Way Databinding” and of all the concepts I had to figure out while I was learning how to program using React JS, this was probably the hardest to get my head around.&lt;/p&gt;
&lt;p&gt;When you first hear, “One Way Databinding” you immediately start thinking, “How does that even work?  Eventually data has to get from the view down to the database and from the database back up to the view.  That’s two ways.”  But what they actually mean by “Two Way Databinding” would better be described as “Event Based Data Flow” or at least “Circular Data Flow” In very simple terms, the View fires an event to a “Dispatcher” which is a singleton.  Each repository, or data store, or model (just depends on what you want to call it) registers a listener with the “Dispatcher” that lets the dispatcher know that it wants to know whenever something significant happens.  These repositories are also singletons.  When the Dispatcher receives a notification from a View, it notifies all of the listeners in turn.  The listeners look at the message they receive from the dispatcher to see if it is something they care about.  If it is, they process the message accordingly.  Once they are done, they fire an event to each ControllerView that has registered a listener with them.  The ControllerView then updates the view based on the information it was passed in the event.&lt;/p&gt;
&lt;p&gt;I don’t want this to get too far down the road of “How” but to make the above paragraph just a bit clearer.  There is a top level View item that does no rendering.  It is only responsible for responding to event notifications and passing the data down into the child views.  You may hear this referred to as a ViewController, but it is more accurately a ControllerView.&lt;/p&gt;
&lt;p&gt;Because everything is basically an event (yeah, I know, not really an event in the strictest sense of the word) we can test each layer independent of the other.&lt;/p&gt;
&lt;h3 id=&#34;More-Control&#34;&gt;&lt;a href=&#34;#More-Control&#34; class=&#34;headerlink&#34; title=&#34;More Control&#34;&gt;&lt;/a&gt;More Control&lt;/h3&gt;&lt;p&gt;The final major advantage that I can see with using the React coding philosophy is that you have a lot more control over when things happen.  No longer are you at the mercy of how and when the framework you are using decides to update values.  If you need to update a value or update the screen, you can do that when you want to, as you want to.&lt;/p&gt;
&lt;p&gt;And, because the only framework you are locked into when you are using React is the React JS framework, if you want to use some other implementation of Flux or AJAX, you can use whatever works for your situation.&lt;/p&gt;
&lt;h2 id=&#34;React-JS-Cons&#34;&gt;&lt;a href=&#34;#React-JS-Cons&#34; class=&#34;headerlink&#34; title=&#34;React JS Cons&#34;&gt;&lt;/a&gt;React JS Cons&lt;/h2&gt;&lt;p&gt;With all of what I like about React, there are some things that almost made me give up.&lt;/p&gt;
&lt;h3 id=&#34;Documentation&#34;&gt;&lt;a href=&#34;#Documentation&#34; class=&#34;headerlink&#34; title=&#34;Documentation&#34;&gt;&lt;/a&gt;Documentation&lt;/h3&gt;&lt;p&gt;The week prior to learning React, I learned Angular 2.  I got spoiled.  I have to say, the Angular world seems to have MUCH better documentation.  Maybe this is because they’ve kept things relatively the same between major releases.  So you know, “this documentation belongs to this version.”  As I was learning React, I was never sure if what I was reading or what I was learning was currently the way things worked today.  Even on the main site, the documentation doesn’t seem to be up to date.  I’m pretty sure I could have learned a lot faster if I hadn’t tried to write Unit test at the same time.  Jest is where the documentation seems to be the weakest.  But I had challenged myself to approach learning React in a way different from what I normally do.&lt;/p&gt;
&lt;p&gt;You see, normally, I use the excuse that “I don’t know the framework yet.” as a reason why I shouldn’t write Unit Tests as I go.  But this time, I decided that writing Unit Tests would be part of the learning.  So, before I could write my first view, I needed to be able to write my first test.  And that is when I realized this was going to take a little longer than I was used to.&lt;/p&gt;
&lt;h3 id=&#34;Not-Highly-Opinionated&#34;&gt;&lt;a href=&#34;#Not-Highly-Opinionated&#34; class=&#34;headerlink&#34; title=&#34;Not Highly Opinionated&#34;&gt;&lt;/a&gt;Not Highly Opinionated&lt;/h3&gt;&lt;p&gt;OK, this one could go both ways.  Not being opinionated might be considered a good thing, and I addressed that above.  But, not having one right way to do something is going to be an issue for most large organizations.  In some organizations even Angular, which I would consider pretty opinionated, isn’t opinionated enough.&lt;/p&gt;
&lt;p&gt;But, because React isn’t opinionated, and there is no clear direction in the documentation on how to DO Flux, you can end up getting multiple opinions on how to code Flux as you learn from multiple people.  Which can be confusing.&lt;/p&gt;
&lt;p&gt;If you decide to go with React, just realize that you’ll need someone on your team who REALLY understands React and can make these decisions for your organization.  In my view, at the corporate level (vs the individual level) someone has to impose architecture OR you need to use a tool that has already imposed it.&lt;/p&gt;
&lt;h3 id=&#34;Do-You-Know-React&#34;&gt;&lt;a href=&#34;#Do-You-Know-React&#34; class=&#34;headerlink&#34; title=&#34;Do You Know React?&#34;&gt;&lt;/a&gt;Do You Know React?&lt;/h3&gt;&lt;p&gt;Similar to the opinionated issue but different enough that we should break it out.&lt;/p&gt;
&lt;p&gt;If I put React on my resume.  What does that mean?  What will the hiring manager expect?  He’s been told that the application uses React.  So, he’s looking for a React guy.  But that isn’t all this guy is going to know.  And frankly, React is the easy part to learn.  Is he looking for a guy who knows the React philosophy?  What exactly is the React philosophy? For example, as I was learning, one of the guys was proposing that the store would notify the view that the data had changed, at which point the view would pull from the store.  But, why not just send the data to the view as part of the notification?  Wouldn’t that more loosely couple the architecture?  Both ways are using a React philosophy.  But, I would hope, that only one way is the way that is implemented at any one organization.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Unfortunately, it will be a while before I can actually use React on a real project.  But knowing React, especially the testing end of it, has already influenced the project I am currently working on.  I need a few more weeks yet to make sure there aren’t any snags in how I am doing things, but you can bet the influence will show up in future post.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-object-fields/</guid>
            <title>JavaScript Object Fields</title>
            <link>http://davembush.github.com/javascript-object-fields/</link>
            <category>javascript</category>
            <category>properties</category>
            <category>fields</category>
            <category>methods</category>
            <pubDate>Thu, 10 Mar 2016 08:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Last week as I was discussing the basics of &lt;a href=&#34;/javascript-objectswhat-you-dont-know-can-hurt-you/&#34;&gt;JavaScript Objects&lt;/a&gt;, I kept referring to the members of the object as “fields.”  Never did I call them properties or methods.  This is because all members that are hanging off of an object are treated the same, from a membership perspective.  It is the type of data it contains that makes it behave as what we would normally refer to as a property or a method.&lt;/p&gt;
&lt;p&gt;This is an important distinction.&lt;/p&gt;
&lt;p&gt;In a strongly typed system, we can say that a member of our object is a property or method simply because it was defined as one or the other when we defined our class. In JavaScript we have neither classes where we can define what something is, nor strong typing.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;So, how something functions is determined by the type of variable it is pointing to at run time. &lt;img src=&#34;/uploads/2016/03/image.png&#34; alt=&#34;JavaScript Fields&#34; title=&#34;image&#34;&gt;  As I demonstrated last week, there are several ways that you might add a field to your object.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use object literal notation and create them as you create the object.&lt;/li&gt;
&lt;li&gt;Add them to the object after the fact using dot notation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But these are not the only ways. That was just enough so we could have the discussion about objects generally. As we have already seen, fields can be added to the object dynamically. There is nothing that restricts additional fields from being added. You can also delete a field using the &lt;code&gt;delete&lt;/code&gt; key word.&lt;/p&gt;
&lt;h2 id=&#34;Delete&#34;&gt;&lt;a href=&#34;#Delete&#34; class=&#34;headerlink&#34; title=&#34;Delete&#34;&gt;&lt;/a&gt;Delete&lt;/h2&gt;&lt;p&gt;In fact, one of the most common misconceptions with the JavaScript syntax is that the &lt;code&gt;delete&lt;/code&gt; keyword is how you release memory. So, you’ll find code that looks something like this.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// do some other stuff here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And the people who write this code believe that ‘abc’ will somehow be removed from memory because they’ve done this. But that’s not how &lt;code&gt;delete&lt;/code&gt; works. The proper way to use &lt;code&gt;delete&lt;/code&gt; would look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.&lt;span class=&#34;property&#34;&gt;b&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// do some stuff&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; a.&lt;span class=&#34;property&#34;&gt;b&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And what this would do is that it would remove the &lt;code&gt;b&lt;/code&gt; field from the &lt;code&gt;a&lt;/code&gt; object. The side effect would be that ‘abc’ would be released, but only if nothing else was pointing to it. It is just a side effect. &lt;code&gt;Delete&lt;/code&gt; does not cause the memory to be released, it only enables that to happen if and when it is appropriate.&lt;/p&gt;
&lt;h2 id=&#34;Key-x2F-Value&#34;&gt;&lt;a href=&#34;#Key-x2F-Value&#34; class=&#34;headerlink&#34; title=&#34;Key&amp;#x2F;Value&#34;&gt;&lt;/a&gt;Key&amp;#x2F;Value&lt;/h2&gt;&lt;p&gt;If you are new to JavaScript, you might not realize that fields are just key&amp;#x2F;value pairs. End even if you do know this, you may not immediately realize all the implications this has. What this means is that you can either write your code to look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.&lt;span class=&#34;property&#34;&gt;b&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a.&lt;span class=&#34;property&#34;&gt;b&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Or you can write it like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[&lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a[&lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This means that we can create and access fields by using variables:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; fieldName = &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[fieldName] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Invalid-Field-Name&#34;&gt;&lt;a href=&#34;#Invalid-Field-Name&#34; class=&#34;headerlink&#34; title=&#34;Invalid Field Name&#34;&gt;&lt;/a&gt;Invalid Field Name&lt;/h2&gt;&lt;p&gt;OK. Using a variable as a field name is pretty cool, but did you know that you can also name a field anything you want? That’s right. The only time it matters what you name a field is when you don’t use the key&amp;#x2F;value pair mechanism to create and access your fields. This means you can create a field that is any string that JavaScript will let you create.&lt;/p&gt;
&lt;h2 id=&#34;HashMap&#34;&gt;&lt;a href=&#34;#HashMap&#34; class=&#34;headerlink&#34; title=&#34;HashMap&#34;&gt;&lt;/a&gt;HashMap&lt;/h2&gt;&lt;p&gt;Which leads to another powerful use of using keys for property names. Have you ever wished you could create a HashMap that used strings for the key to some value? Once again, it may look like the only type of list that JavaScript has available to it is the array. But by using this key&amp;#x2F;value pair mechanism for creating properties, we can actually leverage JavaScript’s properties as HashMaps.&lt;/p&gt;
&lt;h2 id=&#34;For-Fields-in-Object&#34;&gt;&lt;a href=&#34;#For-Fields-in-Object&#34; class=&#34;headerlink&#34; title=&#34;For Fields in Object&#34;&gt;&lt;/a&gt;For Fields in Object&lt;/h2&gt;&lt;p&gt;So, you might be thinking, if fields are essentially members of a HashMap, shouldn’t I be able to iterate through them? Well, actually, yes you can.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;c&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(f &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; a) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(f + &lt;span class=&#34;string&#34;&gt;&amp;#x27;: &amp;#x27;&lt;/span&gt; + a[f]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Will output&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a: abc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b: function()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c: 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;to the console. The variable &lt;code&gt;f&lt;/code&gt; is the key and we use &lt;code&gt;a[f]&lt;/code&gt; to get the value. I’ve used this feature to manipulate my code in a lot of creative ways including cloning objects. Be careful with this syntax. For&amp;#x2F;in is not the same as for&amp;#x2F;each and while it may appear to work like for&amp;#x2F;each, it was never intended to work on arrays. There are other ways of iterating through arrays.&lt;/p&gt;
&lt;h2 id=&#34;Fields-and-Inheritance&#34;&gt;&lt;a href=&#34;#Fields-and-Inheritance&#34; class=&#34;headerlink&#34; title=&#34;Fields and Inheritance&#34;&gt;&lt;/a&gt;Fields and Inheritance&lt;/h2&gt;&lt;p&gt;We will have a full discussion of inheritance in a future post. But for today, I just want to touch on the implications of how fields work in light of inheritance.&lt;/p&gt;
&lt;p&gt;Let’s say we have an object &lt;code&gt;a&lt;/code&gt; that inherits from object &lt;code&gt;b&lt;/code&gt;. Object &lt;code&gt;b&lt;/code&gt; has a field on it named, ‘firstName’ that has been set to ‘Dave’. Now, moving over to object &lt;code&gt;a&lt;/code&gt;, we &lt;code&gt;console.log(a.firstName)&lt;/code&gt; and what gets logged out is, of course, ‘Dave’. No big surprise there.&lt;/p&gt;
&lt;p&gt;Next, we set &lt;code&gt;a.firstName&lt;/code&gt; to ‘James’ and &lt;code&gt;console.log(a.firstName)&lt;/code&gt; again. This time we get ‘James’ to display in the console. The question is, what is the value of &lt;code&gt;b.firstName&lt;/code&gt;? You may be surprised to learn that &lt;code&gt;b.firstName&lt;/code&gt; is still set to ‘Dave’ because when you set a field on an object, it is set on that object even if the parent object has the same field name. This is called “shadowing”. Most of the time we don’t care about this because most of the time the end result is what we were expecting anyhow. But, there are times when, if you don’t know this is what will happen, you can shoot yourself in the foot.&lt;/p&gt;
&lt;h2 id=&#34;Control-Your-Fields&#34;&gt;&lt;a href=&#34;#Control-Your-Fields&#34; class=&#34;headerlink&#34; title=&#34;Control Your Fields&#34;&gt;&lt;/a&gt;Control Your Fields&lt;/h2&gt;&lt;p&gt;But what if you want a read only field, or you don’t want to have the field show up in a for&amp;#x2F;in listing? And what do we do about that shadowing issue I just mentioned? ES5 added a new feature that gives us a lot more control using the method named ‘defineProperty’.  It is unfortunately named ‘define&lt;strong&gt;Property&lt;/strong&gt;‘ because what makes it a property or not is how it is used, as I’ve explained.  But this actually works for both properties and methods. The basic syntax for defineProperty is:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.&lt;span class=&#34;title function_&#34;&gt;defineProperty&lt;/span&gt;(propertyName, description);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Where &lt;code&gt;propertyName&lt;/code&gt; is a string and &lt;code&gt;description&lt;/code&gt; is a JavaScript literal in the form of:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;configurable&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;/&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;enumerable&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;/&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;: someValue,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;writable&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;/&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;get&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; value;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;set&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;value&lt;/span&gt;) &amp;#123; backingStore = value;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Let’s step through these one by one.&lt;/p&gt;
&lt;h3 id=&#34;configurable&#34;&gt;&lt;a href=&#34;#configurable&#34; class=&#34;headerlink&#34; title=&#34;configurable:&#34;&gt;&lt;/a&gt;configurable:&lt;/h3&gt;&lt;p&gt;The configurable field defaults to true. If for some reason you don’t want anyone to be able to change the definition of the field in the future, you would set configurable to false.&lt;/p&gt;
&lt;h3 id=&#34;enumerable&#34;&gt;&lt;a href=&#34;#enumerable&#34; class=&#34;headerlink&#34; title=&#34;enumerable:&#34;&gt;&lt;/a&gt;enumerable:&lt;/h3&gt;&lt;p&gt;Remember how we were able to use for&amp;#x2F;in to list out all of our fields. If you don’t want to have a field show up in for&amp;#x2F;in, you would set this configuration option to false. It is true by default. This option also controls if the property will allow you to list this property when you convert the object to a JSON string.&lt;/p&gt;
&lt;h3 id=&#34;value&#34;&gt;&lt;a href=&#34;#value&#34; class=&#34;headerlink&#34; title=&#34;value:&#34;&gt;&lt;/a&gt;value:&lt;/h3&gt;&lt;p&gt;This will let you set the default value of the string.&lt;/p&gt;
&lt;h3 id=&#34;writable&#34;&gt;&lt;a href=&#34;#writable&#34; class=&#34;headerlink&#34; title=&#34;writable:&#34;&gt;&lt;/a&gt;writable:&lt;/h3&gt;&lt;p&gt;The default value for this option is false. You would set this to true if you don’t want the field to change for any reason. Two places where you might use this feature are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you create a string table for constants. These constants should never change, defining them as writable would be a good way to ensure this is true.&lt;/li&gt;
&lt;li&gt;If you are creating a property that is an array. The common way of emptying an array is by assigning an array literal to it.&lt;code&gt;a.b = []&lt;/code&gt;;but that assigns a new array to a.b instead of just resetting the length on the existing array object, which is probably what you wanted to do. This gets a lot of AngularJS programmers in trouble. By setting this field to false, you can still use &lt;code&gt;a.b.length = 0&lt;/code&gt;; to reset the length, but you won’t accidentally assign a new array object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;get&#34;&gt;&lt;a href=&#34;#get&#34; class=&#34;headerlink&#34; title=&#34;get:&#34;&gt;&lt;/a&gt;get:&lt;/h3&gt;&lt;p&gt;The get option allows us to specify a function that returns the value of this field we are defining.&lt;/p&gt;
&lt;h3 id=&#34;set&#34;&gt;&lt;a href=&#34;#set&#34; class=&#34;headerlink&#34; title=&#34;set:&#34;&gt;&lt;/a&gt;set:&lt;/h3&gt;&lt;p&gt;The set option lets us use a function to set the value. Aside from the obvious feature of being able to use a function to set the value, it has one other benefit. Remember that shadowing issue we talked about previously? If you have a field that uses a setter to set the field value, then the setter will get called instead of creating a shadow field in the child object.&lt;/p&gt;
&lt;h2 id=&#34;So-much-to-know&#34;&gt;&lt;a href=&#34;#So-much-to-know&#34; class=&#34;headerlink&#34; title=&#34;So much to know&#34;&gt;&lt;/a&gt;So much to know&lt;/h2&gt;&lt;p&gt;I bet you didn’t know there was so much to know about JavaScript fields.  It is amazing how much we can get done in programming when we only know a small fraction of what is available. If you found this helpful, don’t forget to sign up for the newsletter so you can learn even more about JavaScript.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-objects-what-you-don-t-know-can-hurt-you/</guid>
            <title>JavaScript Objects -- What You Don&#39;t Know CAN Hurt You</title>
            <link>http://davembush.github.com/javascript-objects-what-you-don-t-know-can-hurt-you/</link>
            <category>javascript</category>
            <category>object</category>
            <pubDate>Thu, 03 Mar 2016 08:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I’m assuming that anyone reading this blog has probably been using JavaScript for a while.  Many of you have used a number of the many frameworks that are available and most have used jQuery.  For the most part, you get what needs to be done, done.&lt;/p&gt;
&lt;p&gt;But, I would also say that most of you have no idea how JavaScript works.  This is why I’ve written about &lt;a href=&#34;/javascript-variable-gotchas/&#34;&gt;JavaScript Variables&lt;/a&gt;, &lt;a href=&#34;/javascript-functions-in-depth/&#34;&gt;JavaScript Functions&lt;/a&gt;, and now &lt;a href=&#34;/javascript-objectswhat-you-dont-know-can-hurt-you/&#34;&gt;JavaScript – Objects&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, let’s start with the most basic of JavaScript questions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/02/image-4.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;How-Do-You-Create-A-JavaScript-Object&#34;&gt;&lt;a href=&#34;#How-Do-You-Create-A-JavaScript-Object&#34; class=&#34;headerlink&#34; title=&#34;How Do You Create A JavaScript Object?&#34;&gt;&lt;/a&gt;How Do You Create A JavaScript Object?&lt;/h2&gt;&lt;p&gt;Well, I think this is a basic question, but you would be amazed at how few people can answer this, even though they’ve probably done this an innumerable number of times.&lt;/p&gt;
&lt;p&gt;This simple statement:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;creates an object and assigns it to the variable &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course, it isn’t very useful at this point and it is functionally the same as if we’d written:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that I said, “functionally the same.”  What is going on under the hood isn’t exactly the same, but the result is the same.  In both cases, you end up with an essentially empty object that is assigned to the variable &lt;code&gt;a&lt;/code&gt;.  So, what is the difference between these two methods?&lt;/p&gt;
&lt;p&gt;In the first case, we are assigning an object literal.  &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt; is the object.&lt;/p&gt;
&lt;p&gt;In the second case, it is the &lt;code&gt;new&lt;/code&gt; keyword that creates the object.  This object is then passed into the &lt;code&gt;Object&lt;/code&gt; function and is accessible inside of the Object function as the &lt;code&gt;this&lt;/code&gt; keyword.  It is the same as if we had written our own function that looked like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Object&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now that we have an object, we can attach fields to it that we can use as properties and methods of our object.  And, once again, we can achieve this result in multiple ways.&lt;/p&gt;
&lt;h2 id=&#34;Make-Your-Object-Useful&#34;&gt;&lt;a href=&#34;#Make-Your-Object-Useful&#34; class=&#34;headerlink&#34; title=&#34;Make Your Object Useful&#34;&gt;&lt;/a&gt;Make Your Object Useful&lt;/h2&gt;&lt;p&gt;The easiest way to add fields to our object is to do it as part of creating our object literal.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;someProperty&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;someFunction&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Which we can later access like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = a.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.&lt;span class=&#34;title function_&#34;&gt;someFunction&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But, if you needed to create multiple objects that all look the same, this could get rather tedious.  Fortunately for us, JavaScript provides us the ability to initialize objects using JavaScript functions.  So, the equivalent code using a function initializer, would look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;someFunction&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now when we create a new object using the &lt;code&gt;new&lt;/code&gt; keyword&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;A&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We can call the fields in the same way we did when we used the object literal.&lt;/p&gt;
&lt;h2 id=&#34;A-Word-about-this&#34;&gt;&lt;a href=&#34;#A-Word-about-this&#34; class=&#34;headerlink&#34; title=&#34;A Word about this&#34;&gt;&lt;/a&gt;A Word about &lt;code&gt;this&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;You’ll notice that we are using &lt;code&gt;this&lt;/code&gt; to represent the object that was passed into the function.  But using &lt;code&gt;this&lt;/code&gt; in JavaScript is not the same as using &lt;code&gt;this&lt;/code&gt; in other languages such as C#, Java.  In those languages, &lt;code&gt;this&lt;/code&gt; is “the object that I am.”  In JavaScript, &lt;code&gt;this&lt;/code&gt; is “the context I was called from.”&lt;/p&gt;
&lt;p&gt;What?!&lt;/p&gt;
&lt;p&gt;OK.&lt;/p&gt;
&lt;p&gt;Let’s back up.  Remember, in JavaScript we are using a function to initialize the object.  How did that object get passed to the function?  It got passed to the function as the function’s context.  JavaScript has no concept of an object that is assigned to a specific function.  There are no classes in JavaScript that keep associations between the resulting object and the code it is associated with.  In JavaScript, everything is an object.  And, if you want to, you can call a function passing it whatever object you want!&lt;/p&gt;
&lt;p&gt;In fact, this happens naturally all the time.&lt;/p&gt;
&lt;p&gt;If you use a JavaScript function as an event handler, the object that is passed to that event handler is the DOM element that fired the event.  Probably not what you would have in mind.&lt;/p&gt;
&lt;p&gt;If you call a JavaScript function directly from the global variable context, the context that you would be calling from is the global object.  To illustrate, if we called our &lt;code&gt;A()&lt;/code&gt; function without using &lt;code&gt;new&lt;/code&gt;, we would create a global variable &lt;code&gt;someProperty&lt;/code&gt; and a global function &lt;code&gt;someFunction&lt;/code&gt; as a result of that call.  Once again, probably not what you would normally expect.&lt;/p&gt;
&lt;p&gt;However, if you call a JavaScript function directly from the global context and you have &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt; defined, &lt;code&gt;this&lt;/code&gt; is now &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Making-this-Behave&#34;&gt;&lt;a href=&#34;#Making-this-Behave&#34; class=&#34;headerlink&#34; title=&#34;Making this Behave&#34;&gt;&lt;/a&gt;Making &lt;code&gt;this&lt;/code&gt; Behave&lt;/h2&gt;&lt;p&gt;At this point you should be thinking, “Ug! If I can’t rely on &lt;code&gt;this&lt;/code&gt; to be any specific object, how does object oriented JavaScript even work?”&lt;/p&gt;
&lt;p&gt;Well, if you remember our discussion about variables and closures, you should be able to derive the answer.  The way most of us deal with this specific issue is that we assign &lt;code&gt;this&lt;/code&gt; to some other variable when we initialize our object using the initialization function, and then we use that variable instead of &lt;code&gt;this&lt;/code&gt; throughout the rest of our code.&lt;/p&gt;
&lt;p&gt;Let’s say that we want someFunction to access someProperty:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;someFunction&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In order to ensure we were always accessing the right context, we assign this to a variable and use that variable.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; self = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.&lt;span class=&#34;property&#34;&gt;someFunction&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There are a few standard naming conventions for the variable that represents the original context.  You can use self, like I’ve done above.  I’ve also seen that used. _this is one that I’ve seen but I find way too confusing to be useful. Finally, I’ve seen a variable with the same name as the initialization function.  Assuming the initialization function is upper cased, the variable would be the same name only lower cased.&lt;/p&gt;
&lt;p&gt;Finally, if you want to be a purist and use the most recently sanctioned way of handling the &lt;code&gt;this&lt;/code&gt; problem, you can use &lt;code&gt;bind()&lt;/code&gt;, depending on how far back you need to support browsers.&lt;/p&gt;
&lt;p&gt;If you did want to use &lt;code&gt;bind()&lt;/code&gt;, then you could setup your code like:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;someFunction&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;someFunction&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Which would ensure that &lt;code&gt;this&lt;/code&gt;, really is the &lt;code&gt;this&lt;/code&gt; you are expecting.&lt;/p&gt;
&lt;p&gt;As we move toward ES2015, using &lt;code&gt;bind()&lt;/code&gt; will become more important. But I believe today you are more likely to see the first syntax, as long as we are still using functions to create our classes. Once we move to ES2015 syntax, using &lt;code&gt;bind()&lt;/code&gt; will become more common.&lt;/p&gt;
&lt;h2 id=&#34;Similar-but-Different-Objects&#34;&gt;&lt;a href=&#34;#Similar-but-Different-Objects&#34; class=&#34;headerlink&#34; title=&#34;Similar but Different Objects&#34;&gt;&lt;/a&gt;Similar but Different Objects&lt;/h2&gt;&lt;p&gt;We now have a very convenient way of creating new objects that do something useful.  But, what if we wanted someProperty to start with something other than ‘A’.  What would we do?&lt;/p&gt;
&lt;p&gt;One awkward way to handle this would be to create the object and then change the value of the property.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;A&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But we are using a function to initialize our object.  Why not just pass it a parameter with the value we want to use?&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;A&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;_someProperty&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; self = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt; = _someProperty;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.&lt;span class=&#34;title function_&#34;&gt;someFunction&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.&lt;span class=&#34;property&#34;&gt;someProperty&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;End&#34;&gt;&lt;a href=&#34;#End&#34; class=&#34;headerlink&#34; title=&#34;End&#34;&gt;&lt;/a&gt;End&lt;/h2&gt;&lt;p&gt;There is a lot more to JavaScript objects than I’ve covered here.  If you are interested in going deeper, make sure you &lt;a href=&#34;/news-letter/&#34;&gt;subscribe to the newsletter&lt;/a&gt; so that you don’t miss the next post.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/angular-2-%E2%80%93-first-impressions-compared-to-angular-1/</guid>
            <title>Angular 2 – First Impressions [Compared to Angular 1]</title>
            <link>http://davembush.github.com/angular-2-%E2%80%93-first-impressions-compared-to-angular-1/</link>
            <category>angular</category>
            <category>javascript</category>
            <pubDate>Thu, 25 Feb 2016 08:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve spent the last week putting together &lt;a href=&#34;//github.com/DaveMBush/MEA2N_CRUD_Reference_App&#34;&gt;a reference app for Angular 2&lt;/a&gt;.  It is a great exercise to try to nail down the basics of how a new framework works.  Next week I plan on doing a similar exercise for &lt;a href=&#34;//facebook.github.io/react/&#34;&gt;React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyhow, I thought for this week’s post, I would try to relay some of my impressions, and some of the issues I see with this new framework.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/02/image-3.png&#34; alt=&#34;Angular 2 - First Impressions&#34; title=&#34;Angular 2 - First Impressions&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Why-call-it-Angular-2&#34;&gt;&lt;a href=&#34;#Why-call-it-Angular-2&#34; class=&#34;headerlink&#34; title=&#34;Why call it Angular 2?&#34;&gt;&lt;/a&gt;Why call it Angular 2?&lt;/h2&gt;&lt;p&gt;I realize naming things is always hard, but I think naming something similar to something that already exist is dangerous.&lt;/p&gt;
&lt;p&gt;When .NET first came out, many ASP programmers tried to use ASP.NET as though it were ASP.  That didn’t turn out so well for them and, I think, confused them.&lt;/p&gt;
&lt;p&gt;VB.NET had a similar problem.  During those early days of .NET I was working for a training company.  I had several ex VB6 developers show up to my C# class.  Do you know why?  Because they realized that VB.NET was such an entirely different language, they were better off just starting over with a new language than possibly treating VB.NET as though it were VB6.  Good call if you ask me.&lt;/p&gt;
&lt;p&gt;Most recently, Microsoft has learned from history and decided to rename the product they’ve been referring to as .NET 5 as .NET Core 1.0.  In this case it is enough like .NET that keeping .NET in the name is a good thing.  But starting the versioning at 1.0 again also shows that this is a brand new product with some differences from what we are all used to.&lt;/p&gt;
&lt;p&gt;Rob Eisenburg decided to call his new project Aurelia instead of Durandal 2 because they are enough different from each other.  While I’m not an expert on either product, I’m pretty sure that there are elements of Durandal in Aurelia simply because Rob was significantly involved in both projects.&lt;/p&gt;
&lt;p&gt;Which brings me to Angular 2.&lt;/p&gt;
&lt;p&gt;Why call it Angular anything?!  Angular 2 has very little in common with Angular 1.x other than basic concepts.  But, so much has changed it is like calling “ASP.NET 1.0” “ASP 5”.  It just doesn’t work, and it hides the fact that there is going to be a HUGE learning curve for those who are familiar with Angular 1.&lt;/p&gt;
&lt;h2 id=&#34;So-What-Has-Changed&#34;&gt;&lt;a href=&#34;#So-What-Has-Changed&#34; class=&#34;headerlink&#34; title=&#34;So What Has Changed?&#34;&gt;&lt;/a&gt;So What Has Changed?&lt;/h2&gt;&lt;h3 id=&#34;Case-sensitive-vs-Snake-Case&#34;&gt;&lt;a href=&#34;#Case-sensitive-vs-Snake-Case&#34; class=&#34;headerlink&#34; title=&#34;Case sensitive vs Snake Case&#34;&gt;&lt;/a&gt;Case sensitive vs Snake Case&lt;/h3&gt;&lt;p&gt;In Angular 1, all of the directives that we create are case sensitive in our code and snake-case-in-our-html.  In Angular2, the HTML markup is case sensitive.  Rob went on a rant about this &lt;a href=&#34;//eisenbergeffect.bluespire.com/on-angular-2-and-html/&#34;&gt;here&lt;/a&gt;.  His issue is that Angular 2 isn’t HTML spec compliant because it is case sensitive.  I’m really not sure how much this matters as long as the final result is compliant.  My issue is more along the lines of, “did this really need to change at all?”&lt;/p&gt;
&lt;h3 id=&#34;Basic-Syntax-Changes&#34;&gt;&lt;a href=&#34;#Basic-Syntax-Changes&#34; class=&#34;headerlink&#34; title=&#34;Basic Syntax Changes&#34;&gt;&lt;/a&gt;Basic Syntax Changes&lt;/h3&gt;&lt;p&gt;Then there are the basic syntax changes.  If you want to bind to an html element property you use square brackets.  If you want to fire an event, you use parenthesis.  If you want two way databinding, you use both.&lt;/p&gt;
&lt;p&gt;What? We didn’t need this distinction with Angular 1.  Why the distinction in Angular 2?  I suppose it has something to do with making it easier for Angular 2 to parse the HTML.  But, from the outside looking in, the thing you are binding to should make it clear enough what it is you are trying to do.  It reminds me of Pascal (the language).  More syntax for the sake of making sure the programmer can’t shoot himself in the foot.&lt;/p&gt;
&lt;h3 id=&#34;TypeScript&#34;&gt;&lt;a href=&#34;#TypeScript&#34; class=&#34;headerlink&#34; title=&#34;TypeScript&#34;&gt;&lt;/a&gt;TypeScript&lt;/h3&gt;&lt;p&gt;I fell in love with TypeScript back at version 0.9.  The advantage to an object oriented programmer is that you don’t have to think differently about your client side code using TypeScript than you would about your server side code if you are using a real object oriented language like C#, or Java on the server side.&lt;/p&gt;
&lt;p&gt;But TypeScript isn’t JavaScript.  And while you can write Angular 2 using JavaScript, the preferred language, and the language that the bulk of Angular 2 is written in, is TypeScript.&lt;/p&gt;
&lt;p&gt;To confuse matters, rather than tell the world, “Hey, just use TypeScript” they decided to give us options.  You can use Dart (what’s that?) JavaScript, or TypeScript.  We’ve already been through this with VB.NET and C#.  Doesn’t anyone learn from history?  Eventually C# won.  Oh, there are a few hold outs.  But even most of the VB lovers have given up and moved to C#.  It will be interesting to see how this TypeScript move plays out.&lt;/p&gt;
&lt;p&gt;On the one hand, I think TypeScript is a better version of JavaScript.  On the other hand, if all you know is TypeScript, it will make it harder to find a job as a JavaScript programmer.&lt;/p&gt;
&lt;p&gt;While TypeScript is definitely a better choice than having a new proprietary language just for Angular, which was the original plan, I still think we might have better off using pure JavaScript as the language of choice.&lt;/p&gt;
&lt;p&gt;Like I said, I’m a fan of TypeScript, I’m just not sure making this the default language is a good choice.&lt;/p&gt;
&lt;h3 id=&#34;Everything-Visual-Is-a-Component&#34;&gt;&lt;a href=&#34;#Everything-Visual-Is-a-Component&#34; class=&#34;headerlink&#34; title=&#34;Everything Visual Is a Component&#34;&gt;&lt;/a&gt;Everything Visual Is a Component&lt;/h3&gt;&lt;p&gt;Unlike Angular 1 where you have pages and directives, everything in Angular 2 from a visual perspective maps to an element.  This is a good change.&lt;/p&gt;
&lt;p&gt;At first when I heard this, I had trouble having it make sense in my mind.  But having implemented it once, I see that it really does make a lot of sense.&lt;/p&gt;
&lt;p&gt;You can also create new attributes that you can attach to an element.  But attributes add behavior to an element rather that making an element do or be something entirely different like you could do with Angular 1.&lt;/p&gt;
&lt;h3 id=&#34;Component-CSS&#34;&gt;&lt;a href=&#34;#Component-CSS&#34; class=&#34;headerlink&#34; title=&#34;Component CSS&#34;&gt;&lt;/a&gt;Component CSS&lt;/h3&gt;&lt;p&gt;I’m really not sure if I like this feature or not.  Done right, I think it is a very good thing.  Done poorly, this could be a disaster.&lt;/p&gt;
&lt;p&gt;Here’s the deal. In Angular 1, when you wrote a directive, any CSS you wrote to go with it needed to be included separately by the person using your component.  In Angular 2, you bind that CSS to your component and it gets included in the HEAD of your html.  It also gets mangled, similar to how ASP.NET would mangle IDs in WebForms, so that the CSS from the component won’t conflict with the other CSS that the page is using.&lt;/p&gt;
&lt;p&gt;This is all in preparation for the forthcoming HTML standard that will support Web Components. What is good about this is that the component is stand alone.  What is bad about this is that if I need to override the CSS, that might be a bit more difficult to do than what we are used to.&lt;/p&gt;
&lt;h3 id=&#34;Routing&#34;&gt;&lt;a href=&#34;#Routing&#34; class=&#34;headerlink&#34; title=&#34;Routing&#34;&gt;&lt;/a&gt;Routing&lt;/h3&gt;&lt;p&gt;My biggest disappointment with Angular 2 is with the new router.  Is it better than the router that comes with Angular 1?  Yes.  Absolutely.&lt;/p&gt;
&lt;p&gt;Is it better than &lt;a href=&#34;//angular-ui.github.io/ui-router/&#34;&gt;UI-Router&lt;/a&gt;?  I’m not so sure.&lt;/p&gt;
&lt;p&gt;The new router will let you have nested routes.  While it doesn’t do it in exactly the same way as you can with UI-Router, it can be done.  And like UI-Router’s ng-sref, you can link to routes by name.&lt;/p&gt;
&lt;p&gt;But the part I never could find clear documentation on is how I would create two insertion points in my HTML for route specific content like I could do with UI-Router.  From what little I could find it looks like they had something working that looked a lot like UI-Router and then they ripped it out in favor of some other method that either is not there yet, or is not clearly documented.&lt;/p&gt;
&lt;h3 id=&#34;Singletons&#34;&gt;&lt;a href=&#34;#Singletons&#34; class=&#34;headerlink&#34; title=&#34;Singletons&#34;&gt;&lt;/a&gt;Singletons&lt;/h3&gt;&lt;p&gt;If you’ve done any work with Angular 1, you’ll be familiar with the confusion between the different types of singletons.  The good news with Angular 2 is that everything is just considered a service.  If you decorate your class with “Injectable” the class can be injected into other classes. But, and I consider this a really big stumbling block moving to Angular 2, services are really singletons.  This is both good and bad.&lt;/p&gt;
&lt;p&gt;Typically we create a hierarch of components in our site with components housing other components.  To get singleton behavior, you would declare the need for your service as far up that hierarchy as is practical.  Just not at the app level.  You would hardly ever want to do that.  You only declare the dependency once in your app.  At the point you declare the dependency a new object is created that is injected anywhere else down the component hierarchy you specify that you need it in your constructor.&lt;/p&gt;
&lt;p&gt;But you need to pay attention to how I phrased that last paragraph because what creates the object is the fact that you declared the dependency.  If you declare it again, you get a new object.&lt;/p&gt;
&lt;p&gt;At first glance, this may appear to be a bad thing.  But I can think of situations where I may actually want to either have one object for an entire application or one object per instance of a component.  This new way of implementing injectable objects gives us that flexibility.&lt;/p&gt;
&lt;h3 id=&#34;Promises-vs-Observables&#34;&gt;&lt;a href=&#34;#Promises-vs-Observables&#34; class=&#34;headerlink&#34; title=&#34;Promises vs Observables&#34;&gt;&lt;/a&gt;Promises vs Observables&lt;/h3&gt;&lt;p&gt;While it doesn’t make sense to get into the details here, it is worth mentioning that instead of using Promises to avoid callback hell, Angular 2 is using RXjs’ observables.  It might take a while to get your head around this new paradigm.  But as it turns out, it would appear that observables can be used in more places than promises can because they are stream based.&lt;/p&gt;
&lt;h2 id=&#34;Better-x2F-New-x2F-Enhanced&#34;&gt;&lt;a href=&#34;#Better-x2F-New-x2F-Enhanced&#34; class=&#34;headerlink&#34; title=&#34;Better&amp;#x2F;New&amp;#x2F;Enhanced&#34;&gt;&lt;/a&gt;Better&amp;#x2F;New&amp;#x2F;Enhanced&lt;/h2&gt;&lt;h3 id=&#34;Declarative-or-Explicitly-Coded-Forms&#34;&gt;&lt;a href=&#34;#Declarative-or-Explicitly-Coded-Forms&#34; class=&#34;headerlink&#34; title=&#34;Declarative or Explicitly Coded Forms&#34;&gt;&lt;/a&gt;Declarative or Explicitly Coded Forms&lt;/h3&gt;&lt;p&gt;In Angular 1, just about everything view related is declarative.  This works, but at times I found it awkward to use.  For example, I needed to add validation to an element and it just seemed there must be an easier more direct way to do this than what I was given in Angular 1.&lt;/p&gt;
&lt;p&gt;In Angular 2, you can just put enough code in the HTML to render the element and then attach the JavaScript to it using function calls.  This gives you A LOT more control over you view, even if it does take a bit more work to get it setup.&lt;/p&gt;
&lt;p&gt;I think there are times when it will still make sense to do everything declaratively.  But for anything more than a trivial form, I think you are going to love this new option.&lt;/p&gt;
&lt;h3 id=&#34;Binding-Optimization&#34;&gt;&lt;a href=&#34;#Binding-Optimization&#34; class=&#34;headerlink&#34; title=&#34;Binding Optimization&#34;&gt;&lt;/a&gt;Binding Optimization&lt;/h3&gt;&lt;p&gt;The Angular 2 databinding seems to be optimized.  I don’t fully understand exactly what is different, but I’ll take their word for it that it is, or will be once we are no longer in beta.&lt;/p&gt;
&lt;h2 id=&#34;Still-Needs-Work&#34;&gt;&lt;a href=&#34;#Still-Needs-Work&#34; class=&#34;headerlink&#34; title=&#34;Still Needs Work&#34;&gt;&lt;/a&gt;Still Needs Work&lt;/h2&gt;&lt;h3 id=&#34;Rendering-Optimization&#34;&gt;&lt;a href=&#34;#Rendering-Optimization&#34; class=&#34;headerlink&#34; title=&#34;Rendering Optimization&#34;&gt;&lt;/a&gt;Rendering Optimization&lt;/h3&gt;&lt;p&gt;As I’ve started to look at React, and other systems that create “Virtual DOMs” I keep thinking, “Why can’t Angular do something like this?”  Being able to manipulate all of the DOM and then show the result when you are done is one of the easiest places to improve performance, and yet I don’t see any hooks in Angular that would make this possible.  This isn’t to say that I think React is better than Angular.  So far, I see some really big issues with React as well.  But I’d love to have some kind of Virtual DOM implementation in Angular without losing what is already built in.&lt;/p&gt;
&lt;h3 id=&#34;Testability&#34;&gt;&lt;a href=&#34;#Testability&#34; class=&#34;headerlink&#34; title=&#34;Testability&#34;&gt;&lt;/a&gt;Testability&lt;/h3&gt;&lt;p&gt;I can’t comment fully on the ability to test Angular 2 simply because the documentation for this is not fully baked.  So, I’ll refrain from making any comments at all.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;There are a lot of wins with Angular 2 and I think, in general, you are going to like this new framework.  It will be interesting to see how the UI component space will mature around this new framework.&lt;/p&gt;
&lt;p&gt;If you are interested in learning Angular 2, I would suggest that you work through the &lt;a href=&#34;//angular.io/docs/ts/latest/tutorial/&#34;&gt;tutorial&lt;/a&gt; and read through the &lt;a href=&#34;//angular.io/docs/ts/latest/guide/&#34;&gt;development guide&lt;/a&gt;.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-functions-in-depth/</guid>
            <title>JavaScript Functions -- In-Depth</title>
            <link>http://davembush.github.com/javascript-functions-in-depth/</link>
            <category>javascript</category>
            <category>functions</category>
            <pubDate>Thu, 18 Feb 2016 08:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Last week I talked about &lt;a href=&#34;/javascript-variable-gotchas/&#34;&gt;JavaScript variables gotchas&lt;/a&gt;.  This week, we want to take an in-depth look at JavaScript functions. Why? Well, for the same reason we looked at variables last week.  If you keep using JavaScript the way you think it works instead of the way it really works, at best, you will have a much harder time debugging your JavaScript code.  Worse case, you introduce some pretty nasty bugs into your code.&lt;/p&gt;
&lt;p&gt;So, let’s start with a pretty basic JavaScript function question.  One I would use as a question if I were interviewing someone for a hard core JavaScript job.&lt;/p&gt;
&lt;p&gt;What is the difference between the following two ways of declaring a function?&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; foo = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/uploads/2016/02/image-1.png&#34; alt=&#34;JavaScript Functions -- In-depth&#34; title=&#34;JavaScript Functions -- In-depth&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Declaring-JavaScript-Functions&#34;&gt;&lt;a href=&#34;#Declaring-JavaScript-Functions&#34; class=&#34;headerlink&#34; title=&#34;Declaring JavaScript Functions&#34;&gt;&lt;/a&gt;Declaring JavaScript Functions&lt;/h2&gt;&lt;p&gt;If you think these both do the same thing, you would be almost right.  But here is the key distinction.&lt;/p&gt;
&lt;p&gt;Remember our discussion last week about variable hoisting? When you declare a variable, the declaration is hoisted to the top of the variable scope but it isn’t assigned until the actual assignment in the code.&lt;/p&gt;
&lt;p&gt;So that the following code&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; foo = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Actually compiles to&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// other code may occur here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;foo = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, if you declare functions using&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What happens is that the variable is both declared and assigned at the top of the variable scope.&lt;/p&gt;
&lt;p&gt;In fact, when you use this second method to declare a function, the variable gets declared prior to variables declared with the &lt;code&gt;var&lt;/code&gt; keyword.&lt;/p&gt;
&lt;h2 id=&#34;Why-Does-This-Matter&#34;&gt;&lt;a href=&#34;#Why-Does-This-Matter&#34; class=&#34;headerlink&#34; title=&#34;Why Does This Matter?&#34;&gt;&lt;/a&gt;Why Does This Matter?&lt;/h2&gt;&lt;p&gt;“So,” I hear you thinking, “why the fuss?  My code runs either way.” Or does it.&lt;/p&gt;
&lt;p&gt;If you use &lt;code&gt;var foo()&lt;/code&gt; instead of &lt;code&gt;function foo()&lt;/code&gt;, you can run into a situation where you have one function calling another function before the function variable has been assigned the function pointer.  It doesn’t often happen, and it happens a lot less frequently when you are doing “object oriented” JavaScript, but it can happen.&lt;/p&gt;
&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; foo = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; bar = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Yeah, I know, wrong on so many levels.  But this is how bad code happens.  Implementing best practices at multiple levels makes the code more solid.&lt;/p&gt;
&lt;p&gt;If we rewrite the code to see what is happening the problem becomes clear.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;foo = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bar = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Bar is getting called before we ever assign the function to it. But by simply rewriting this using function declaration, we avoid the issue:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;When we rewrite this as it will compile, we see that we no longer have an issue:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Anonymous-Functions&#34;&gt;&lt;a href=&#34;#Anonymous-Functions&#34; class=&#34;headerlink&#34; title=&#34;Anonymous Functions&#34;&gt;&lt;/a&gt;Anonymous Functions&lt;/h2&gt;&lt;p&gt;A discussion on JavaScript functions would not be complete if we didn’t address the subject of anonymous functions.&lt;/p&gt;
&lt;p&gt;Anonymous functions are functions that show up most often as parameters to other functions.  Rather than declaring a function and passing the function in as a variable pointing to the function&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;callBackFoo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;mainFoo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;callBack&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;callBack&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;mainFoo&lt;/span&gt;(callBackFoo);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We get lazy and just write the function as part of the parameter.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;mainFoo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;callBack&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;callBack&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;mainFoo&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And here again, I hear you thinking, “Yep.  Do that all the time.  What’s wrong with that?”&lt;/p&gt;
&lt;h2 id=&#34;The-Problem-with-Anonymous-Functions&#34;&gt;&lt;a href=&#34;#The-Problem-with-Anonymous-Functions&#34; class=&#34;headerlink&#34; title=&#34;The Problem with Anonymous Functions&#34;&gt;&lt;/a&gt;The Problem with Anonymous Functions&lt;/h2&gt;&lt;p&gt;Well, there are two problems.&lt;/p&gt;
&lt;p&gt;First, when you use an anonymous function and an exception is thrown.  If your anonymous function is part of the call stack for the exception, all you will see in your debugger is something about “anonymous” because it doesn’t have a name associated with it.  Yes, you’ll get a file name and a line number.  But you’ll have to go look at the code to see what function caused the problem.&lt;/p&gt;
&lt;p&gt;The second, and I think more compelling, issue with anonymous functions is “Callback Hell.” You know, a function that takes a callback that calls a function that takes a callback … etc.&lt;/p&gt;
&lt;p&gt;If you haven’t seen this yet, you haven’t coded anything significant in JavaScript yet. This isn’t to say that I haven’t used these same shortcuts.  But they ARE issues you need to consider.  At least when I take the shortcut, I think to myself, “Is the pain really worth it?”&lt;/p&gt;
&lt;h2 id=&#34;Immediately-Invoked-Function-Expressions-IIFE&#34;&gt;&lt;a href=&#34;#Immediately-Invoked-Function-Expressions-IIFE&#34; class=&#34;headerlink&#34; title=&#34;Immediately Invoked Function Expressions (IIFE)&#34;&gt;&lt;/a&gt;Immediately Invoked Function Expressions (IIFE)&lt;/h2&gt;&lt;p&gt;Pronounced “iffy” the Immediately Invoked Function Expression is the one place where I think anonymous functions serve a very helpful purpose. The basic structure of an IIFE looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// code goes here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Or, if you prefer&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// code goes here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The first way makes more sense to me.  But whatever.&lt;/p&gt;
&lt;p&gt;The idea is that we’ve created an anonymous function and executed it right away.  It is the same as if we had written:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// code goes here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But, by doing this we’ve introduced a variable into our scope that we only plan to use once.  If we are doing this in our global namespace, we could be stomping over an existing variable we might want latter.&lt;/p&gt;
&lt;p&gt;Imagine if you were using jQuery and wrote:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;$&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;or worse&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; $ = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;So, IIFEs take care of this issue.  It keeps all of the variables we declare in a file out of global scope while still making them accessible to all of the functions we declare within the IIFE.  Since it runs at load time, we really don’t need a function name for our debug stack.&lt;/p&gt;
&lt;h2 id=&#34;A-Note-About-JavaScript-and-Node-js&#34;&gt;&lt;a href=&#34;#A-Note-About-JavaScript-and-Node-js&#34; class=&#34;headerlink&#34; title=&#34;A Note About JavaScript and Node.js&#34;&gt;&lt;/a&gt;A Note About JavaScript and Node.js&lt;/h2&gt;&lt;p&gt;While everything I’ve said above is true for browser based JavaScript.  When you get into the area of Node.js development, the rules change slightly.  Specifically, each JavaScript file is already wrapped in an IIFE, this is why we need module.exports and why if you assign a variable in one JavaScript file it is not available to you to use in another JavaScript file. &lt;/p&gt;
&lt;h2 id=&#34;JavaScript-Functions-Best-Practices&#34;&gt;&lt;a href=&#34;#JavaScript-Functions-Best-Practices&#34; class=&#34;headerlink&#34; title=&#34;JavaScript Functions Best Practices&#34;&gt;&lt;/a&gt;JavaScript Functions Best Practices&lt;/h2&gt;&lt;p&gt;All of this leads to the following best practices regarding the use of function in JavaScript&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Declare functions using the &lt;code&gt;function&lt;/code&gt; keyword instead of the &lt;code&gt;var&lt;/code&gt; keyword.&lt;/li&gt;
&lt;li&gt;Avoid anonymous functions&lt;/li&gt;
&lt;li&gt;Wrap globally accessible client side code in an IIFE to avoid polluting global variable scope.&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-variable-gotchas/</guid>
            <title>JavaScript Variable Gotchas</title>
            <link>http://davembush.github.com/javascript-variable-gotchas/</link>
            <category>javascript</category>
            <category>scope</category>
            <category>hoisting</category>
            <pubDate>Thu, 11 Feb 2016 08:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;If you’ve been programming using JavaScript for any length of time, you’ve probably run into several of the JavaScript variable scope gotchas.  You may have even been able to fix them.  But you could prevent these gotchas if you understood better why the gotchas exist in the first place.&lt;/p&gt;
&lt;p&gt;My goal, through a series of blog post on the topic, is to make us all better JavaScript programmers.  JavaScript is no longer a toy.  Those who survive in the new JavaScript eco system will be those who understand why JavaScript works the way it does.&lt;/p&gt;
&lt;p&gt;I’m going to approach this topic as a series of puzzles.  This will show the issue and then we can discuss why the issue exist and what to do about it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/02/image.png&#34; alt=&#34;JavaScript Variable Gotchas&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Puzzle-1&#34;&gt;&lt;a href=&#34;#Puzzle-1&#34; class=&#34;headerlink&#34; title=&#34;Puzzle 1&#34;&gt;&lt;/a&gt;Puzzle 1&lt;/h2&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;string&#34;&gt;&amp;#x27;xyz&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Given the code above, what is the value of &lt;code&gt;a&lt;/code&gt; at line 5 and what is the value of &lt;code&gt;a&lt;/code&gt; at line 8? (Play Jeopardy music here) OK.  Times up.  What do you think? If you said that line 5 has the value of ‘abc’, you would be wrong.  But I totally understand why you would think that.  I think everyone would agree that the value at line 8 is now ‘xyz’.  So, we will ignore that.&lt;/p&gt;
&lt;p&gt;Why isn’t the value at line 5 ‘abc’?&lt;/p&gt;
&lt;h3 id=&#34;Hoisting&#34;&gt;&lt;a href=&#34;#Hoisting&#34; class=&#34;headerlink&#34; title=&#34;Hoisting&#34;&gt;&lt;/a&gt;Hoisting&lt;/h3&gt;&lt;p&gt;The first thing we need to understand about variables is that no matter where they are declared, the declaration is always ‘hoisted’ to the top of the scope block the variable is declared in.  The assignment happens where we wrote the code.&lt;/p&gt;
&lt;p&gt;So let’s rewrite our code so that it looks more like what is really happening.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  a = &lt;span class=&#34;string&#34;&gt;&amp;#x27;xyz&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Written this way, it is obvious that &lt;code&gt;a&lt;/code&gt; is either undefined or null at line 6.  Which is it?&lt;/p&gt;
&lt;h3 id=&#34;Undefined-or-Null&#34;&gt;&lt;a href=&#34;#Undefined-or-Null&#34; class=&#34;headerlink&#34; title=&#34;Undefined or Null?&#34;&gt;&lt;/a&gt;Undefined or Null?&lt;/h3&gt;&lt;p&gt;This one always confuses me too.  Mostly because in every other language I work with, if a variable is declared but not assigned, it is almost always null.  The only time it would be undefined is if I had not declared it.&lt;/p&gt;
&lt;p&gt;In JavaScript things are different.&lt;/p&gt;
&lt;p&gt;In a strongly typed language, we know more about our variable types when the variable is declared.  So, if we declare a variable as some object type, it is assigned null by default.  But value types are zero’d out.  Not really always null.&lt;/p&gt;
&lt;p&gt;In JavaScript, we don’t know the type of the variable until it is assigned.  So, all we know when we declare a variable with the var keyword is that there is a variable.  But the type of the variable is undefined.  Therefore, any variable that has not been assigned is going to be undefined.  Not null.&lt;/p&gt;
&lt;h2 id=&#34;Puzzle-2&#34;&gt;&lt;a href=&#34;#Puzzle-2&#34; class=&#34;headerlink&#34; title=&#34;Puzzle 2&#34;&gt;&lt;/a&gt;Puzzle 2&lt;/h2&gt;&lt;p&gt;Let’s move some code around a bit.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  a = &lt;span class=&#34;string&#34;&gt;&amp;#x27;xyz&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What is the value of &lt;code&gt;a&lt;/code&gt; at line 9? I hope this is an easier puzzle to solve.  Notice that we call &lt;code&gt;foo()&lt;/code&gt; at line 7, so when we return from &lt;code&gt;foo()&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; now holds the value of ‘xyz’ because we didn’t redeclare the variable inside of &lt;code&gt;foo()&lt;/code&gt;.  Because of variable scoping, &lt;code&gt;a&lt;/code&gt; assigned the variable that was declared at line 1.&lt;/p&gt;
&lt;h2 id=&#34;Puzzle-3&#34;&gt;&lt;a href=&#34;#Puzzle-3&#34; class=&#34;headerlink&#34; title=&#34;Puzzle 3&#34;&gt;&lt;/a&gt;Puzzle 3&lt;/h2&gt;&lt;p&gt;Once again, let’s move some code around.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  a = &lt;span class=&#34;string&#34;&gt;&amp;#x27;xyz&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that in this case, we have not declared the variable &lt;code&gt;a&lt;/code&gt; at all.  We’ve just assigned ‘xyz’ to it inside of &lt;code&gt;foo()&lt;/code&gt;.  So, what is the value of &lt;code&gt;a&lt;/code&gt; at line 7? What are our options?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The code won’t run.&lt;/li&gt;
&lt;li&gt;a &amp;#x3D;&amp;#x3D;&amp;#x3D; ‘xyz’&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; is undefined.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you were to think that the code won’t run, you would be wrong and you probably haven’t coded with JavaScript very long.  The code will run.&lt;/p&gt;
&lt;p&gt;So the next question you have to ask yourself is where will &lt;code&gt;a&lt;/code&gt; be defined?  Since we haven’t declared it, it must automatically get declared some place.  Is that inside of &lt;code&gt;foo()&lt;/code&gt; or someplace else? The answer is some place else.  The rule is this, if the variable has not been declared in the scope it is being used, the variable is declared as a global variable.  In a browser, this creates a property hanging off the window object.&lt;/p&gt;
&lt;p&gt;And so, the only valid answer is that &lt;code&gt;a === ‘xyz’&lt;/code&gt; at line 7.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-shoot-yourself-in-the-foot&#34;&gt;&lt;a href=&#34;#Don’t-shoot-yourself-in-the-foot&#34; class=&#34;headerlink&#34; title=&#34;Don’t shoot yourself in the foot&#34;&gt;&lt;/a&gt;Don’t shoot yourself in the foot&lt;/h2&gt;&lt;p&gt;As you might imagine, if you aren’t careful, you can really get yourself into a lot of trouble.  Funny thing about computers, they do EXACTLY what they are told.  It really doesn’t matter what you think it should have done. But there is a way to prevent some of the problems above.&lt;/p&gt;
&lt;p&gt;By adding &lt;code&gt;&amp;quot;use strict&amp;quot;;&lt;/code&gt; as a line in your code.  Many of the common errors that we make while programming in JavaScript will be thrown as exceptions.&lt;/p&gt;
&lt;p&gt;The other thing you should put in your arsenal is a tool like jsHint which you can get by using WebEssentials in visual studio.  This will tell you when you’ve done things that might not be right.&lt;/p&gt;
&lt;p&gt;BTW, use jsHint instead of jsLint.  jsLint is WAY too opinionated.  For example, I get Mr. Crawford’s point about forcing the use of a break statement in a switch&amp;#x2F;case block.  But really!  I should be able to turn it off in the places where not having a break statement is EXACTLY what I want.  jsHint gives you this flexibility.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-unit-test-code-coverage-using-nodejs/</guid>
            <title>JavaScript Unit Test Code Coverage Using NodeJS</title>
            <link>http://davembush.github.com/javascript-unit-test-code-coverage-using-nodejs/</link>
            <category>code coverage</category>
            <category>javascript</category>
            <category>istanbul</category>
            <category>jasmine</category>
            <pubDate>Thu, 04 Feb 2016 08:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;A couple of weeks ago, I showed how to get &lt;a href=&#34;/using-node-js-and-gulp-with-an-existing-web-application-in-visual-studio-2015/&#34;&gt;Node.JS and Gulp working with Visual Studio 2015&lt;/a&gt;.  Last week I showed you &lt;a href=&#34;/using-gulp-to-bundle-minify-and-cache-bust/&#34;&gt;how to bundle, minify, and cache-bust using Gulp&lt;/a&gt;.  This week, we are going to use Node.js to provide JavaScript Unit Test Code Coverage.&lt;/p&gt;
&lt;p&gt;The main tools we will be using to pull this off are Karma and Istanbul.  The test we write will be using Jasmine.&lt;/p&gt;
&lt;p&gt;If you don’t use Visual Studio, you should still be able to adapt these instructions to your own environment.  I’ve found getting Istanbul setup kind of tricky at times.  Since everything I’m going to show you here is pure Node.JS, you can ignore the Visual Studio parts.&lt;/p&gt;
&lt;p&gt;Let’s get started.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/01/image-6.png&#34; alt=&#34;JavaScript Unit Test Code Coverage Using NodeJS&#34; title=&#34;JavaScript Unit Test Code Coverage Using NodeJS&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Assumptions&#34;&gt;&lt;a href=&#34;#Assumptions&#34; class=&#34;headerlink&#34; title=&#34;Assumptions&#34;&gt;&lt;/a&gt;Assumptions&lt;/h2&gt;&lt;p&gt;I’m going to assume that you’ve already got a project setup.  For the purposes of this discussion, we are going to assume that the files we want to test are in the &amp;#x2F;app directory and that our test are in the &amp;#x2F;jsTest directory.&lt;/p&gt;
&lt;p&gt;If you are using Visual Studio, one of the first questions you might have is, “if I put my tests in the same project as the app I am testing, won’t those test get deployed with the application?”  And the answer to that question is, “Yes, if you use the defaults.” But we aren’t going to use the defaults.  What we are going to do is that we are going to make sure that any files we create that we don’t want to deploy to the web server have their build action set to “none”.  You can find this in the file’s property window.&lt;/p&gt;
&lt;p&gt;The other way you could solve this problem is that you could have a deploy script written in Gulp that specifies exactly what files should be deployed.&lt;/p&gt;
&lt;h2 id=&#34;A-Simple-Demo-File&#34;&gt;&lt;a href=&#34;#A-Simple-Demo-File&#34; class=&#34;headerlink&#34; title=&#34;A Simple Demo File&#34;&gt;&lt;/a&gt;A Simple Demo File&lt;/h2&gt;&lt;p&gt;Just so we have something to test, I’ve created a really simple demo JavaScript file that looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;demo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; self = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a, b&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.&lt;span class=&#34;property&#34;&gt;add&lt;/span&gt; = add;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;demo&lt;/span&gt; = demo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Yes, just a simple add function.  But that is all we need today.&lt;/p&gt;
&lt;h3 id=&#34;Why-the-IIFE&#34;&gt;&lt;a href=&#34;#Why-the-IIFE&#34; class=&#34;headerlink&#34; title=&#34;Why the IIFE?&#34;&gt;&lt;/a&gt;Why the IIFE?&lt;/h3&gt;&lt;p&gt;You may be wondering why I put an IIFE around such a simple demo.&lt;/p&gt;
&lt;p&gt;I’ve gotten so frustrated reading other people’s blog posts with demo code that confuses me because they have not used best practices for the framework they are using, that I’ve determined to always write my demo code as close to the way I would write production code as possible.  If I were writing a real system, I would place an IIFE around my JavaScript.  So, I’m doing it here.&lt;/p&gt;
&lt;h2 id=&#34;And-A-Simple-Test&#34;&gt;&lt;a href=&#34;#And-A-Simple-Test&#34; class=&#34;headerlink&#34; title=&#34;And A Simple Test&#34;&gt;&lt;/a&gt;And A Simple Test&lt;/h2&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;describe,it,expect&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/jsTests/app/demoTests&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; demo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            demo = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;demo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;demo should truthy&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(demo).&lt;span class=&#34;title function_&#34;&gt;toBeTruthy&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)(&lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;describe&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;it&lt;/span&gt;, &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;expect&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Why-Pass-In-Global-Variables&#34;&gt;&lt;a href=&#34;#Why-Pass-In-Global-Variables&#34; class=&#34;headerlink&#34; title=&#34;Why Pass In Global Variables?&#34;&gt;&lt;/a&gt;Why Pass In Global Variables?&lt;/h3&gt;&lt;p&gt;By passing in the global variables, I can reference them as normal, but JSLint will no longer complain that I’m using an undefined variable.  Passing in the variables also places them in the local scope of the IIFE so that the test code doesn’t have to crawl all the way up the scope chain to find the variables.  Finally, if I were to accidentally create a variable with the same name as a global variable, passing them into the IIFE will cause my development tools to warn me that I’ve overwritten a variable name.&lt;/p&gt;
&lt;h2 id=&#34;Install-Karma-and-Istanbul&#34;&gt;&lt;a href=&#34;#Install-Karma-and-Istanbul&#34; class=&#34;headerlink&#34; title=&#34;Install Karma and Istanbul&#34;&gt;&lt;/a&gt;Install Karma and Istanbul&lt;/h2&gt;&lt;p&gt;The next thing you’ll want to do is to install Karma and Istanbul.  This is rather trivial because you can install both with one NPM command.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install karma karma-cli karma-coverage --save-dev&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;Install-Karma-Jasmine&#34;&gt;&lt;a href=&#34;#Install-Karma-Jasmine&#34; class=&#34;headerlink&#34; title=&#34;Install Karma-Jasmine&#34;&gt;&lt;/a&gt;Install Karma-Jasmine&lt;/h2&gt;&lt;p&gt;&lt;code&gt;npm install karma-jasmine --save-dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you are using some other test runner, you’ll need to install the appropriate karma package for it.&lt;/p&gt;
&lt;h2 id=&#34;Install-PhantomJS&#34;&gt;&lt;a href=&#34;#Install-PhantomJS&#34; class=&#34;headerlink&#34; title=&#34;Install PhantomJS&#34;&gt;&lt;/a&gt;Install PhantomJS&lt;/h2&gt;&lt;p&gt;This is the final install you will need to make.  The truth of the matter is that you can use any browser to run your test.  But, normally, you’ll want to use a headless browser so that you can run the tests in your continuous integration server.&lt;/p&gt;
&lt;p&gt;When I am interested in seeing if my tests passed during development, I’ll run the tests in a regular browser using a regular HTML file.  Standard, old, jasmine tests.  When I want to see the code coverage, I’ll use PhantomJS. To use PhantomJS, go to the site and &lt;a href=&#34;//phantomjs.org/download.html&#34;&gt;download the zip file that contains the EXE&lt;/a&gt; and place it in your PATH environment variable.  Or, you can place it in a known location relative to your project and you can call it directly.  For this demo, we will place it in &amp;#x2F;jsTests&amp;#x2F;phantomjs. You will also need the phantom launcher.  There are several available, but the one I use just installs the launcher and assumes you already have it installed.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install karma-phantomjs-launcher-nonet –save-dev&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;Karma-conf-js&#34;&gt;&lt;a href=&#34;#Karma-conf-js&#34; class=&#34;headerlink&#34; title=&#34;Karma.conf.js&#34;&gt;&lt;/a&gt;Karma.conf.js&lt;/h2&gt;&lt;p&gt;The last step is to create a karma.conf.js file.  I typically put this in my jsTests directory because it is part of the test files.&lt;/p&gt;
&lt;p&gt;Your Karma.conf.js file should contain content that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;exports&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;config&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; path = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;path&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    config.&lt;span class=&#34;title function_&#34;&gt;set&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;browsers&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;PhantomJS&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;phantomjsLauncher&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;cmd&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;win32&lt;/span&gt;: path.&lt;span class=&#34;title function_&#34;&gt;join&lt;/span&gt;(__dirname,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                     &lt;span class=&#34;string&#34;&gt;&amp;#x27;/phantomjs/phantomjs.exe&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// this tells Karma to start Jasmine&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;frameworks&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;jasmine&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;files&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;string&#34;&gt;&amp;#x27;../app/**/*.js&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;string&#34;&gt;&amp;#x27;../jsTests/app/**/*.js&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// coverage reporter generates the coverage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;reporters&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;progress&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;coverage&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;preprocessors&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;../app/**/*.js&amp;#x27;&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;coverage&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// optionally, configure the reporter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;coverageReporter&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;html&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;dir&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;coverage/&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Run-Your-Tests&#34;&gt;&lt;a href=&#34;#Run-Your-Tests&#34; class=&#34;headerlink&#34; title=&#34;Run Your Tests&#34;&gt;&lt;/a&gt;Run Your Tests&lt;/h2&gt;&lt;p&gt;Unlike many of the demos for running Karma that are available.  We are going to run our tests in a slightly different way.  Using Gulp.&lt;/p&gt;
&lt;p&gt;Most people know of Gulp as a file processing tool.  But here we are going to just use its task running capability.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; gulp = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;gulp&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Server&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;karma&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;property&#34;&gt;Server&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;done&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Server&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;configFile&lt;/span&gt;: __dirname + &lt;span class=&#34;string&#34;&gt;&amp;#x27;\\jsTests\\karma.conf.js&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;singleRun&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;browserNoActivityTimeout&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;60000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123; &lt;span class=&#34;title function_&#34;&gt;done&lt;/span&gt;(); &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;start&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This simple task will run Karma for you using the karma.conf.js file we just created in jsTests.&lt;/p&gt;
&lt;p&gt;If you want to have this run every time a file changes once you’ve kicked off this task, change singleRun to false.  As it is written, it only runs the tests on demand.&lt;/p&gt;
&lt;h2 id=&#34;JavaScript-Unit-Test-Code-Coverage&#34;&gt;&lt;a href=&#34;#JavaScript-Unit-Test-Code-Coverage&#34; class=&#34;headerlink&#34; title=&#34;JavaScript Unit Test Code Coverage&#34;&gt;&lt;/a&gt;JavaScript Unit Test Code Coverage&lt;/h2&gt;&lt;p&gt;So, hopefully, you’ve got everything running correctly.  Let’s look at the results.&lt;/p&gt;
&lt;p&gt;The output for the code coverage should now be in &amp;#x2F;jsTests&amp;#x2F;coverage&amp;#x2F;PhantomJS* directory.  Load the index.html file in your browser.&lt;/p&gt;
&lt;p&gt;You should see a screen that looks something like this: &lt;img src=&#34;/uploads/2016/01/image-7.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;   Click on ‘app&amp;#x2F;’ to see this: &lt;img src=&#34;/uploads/2016/01/image-8.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt; And finally, click on ‘Demo.js’ to see &lt;img src=&#34;/uploads/2016/01/image-9.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;The-Shortcut&#34;&gt;&lt;a href=&#34;#The-Shortcut&#34; class=&#34;headerlink&#34; title=&#34;The Shortcut&#34;&gt;&lt;/a&gt;The Shortcut&lt;/h2&gt;&lt;p&gt;Fortunately for you, &lt;a href=&#34;//github.com/DaveMBush/CodeCoverageDemo&#34;&gt;I’ve created a project on GitHub with all of this already done&lt;/a&gt;.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/using-node-js-and-gulp-with-asp-net-in-visual-studio-2015/</guid>
            <title>Using Node.js and Gulp with ASP.NET in Visual Studio 2015</title>
            <link>http://davembush.github.com/using-node-js-and-gulp-with-asp-net-in-visual-studio-2015/</link>
            <category>javascript</category>
            <category>visual studio</category>
            <category>asp.net</category>
            <category>gulp</category>
            <category>node.js</category>
            <pubDate>Thu, 21 Jan 2016 08:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;As I’ve written before, &lt;a href=&#34;/tags/angular-js/&#34;&gt;I’m using AngularJS a lot&lt;/a&gt; recently to write the client side of my web applications.  As I’ve gotten to the end of my current project, I found myself needing to implement cache busting and while I am at it compression.  But because I’m &lt;a href=&#34;/asp-net-angular-js-html5mode/&#34;&gt;using a regular HTML page to serve up the shell for my single page application&lt;/a&gt;, using the regular ASP.NET on the fly compression wasn’t going to work for this application.&lt;/p&gt;
&lt;p&gt;But there are a lot of tools in the Node.js space that will work.  Would it be possible to wire node.js and Gulp with ASP.NET in my existing web project? It turns out you can.&lt;/p&gt;
&lt;p&gt;Although, at this point, it isn’t as straightforward as most other things in Visual Studio.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/01/image-2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Installing-Node-js&#34;&gt;&lt;a href=&#34;#Installing-Node-js&#34; class=&#34;headerlink&#34; title=&#34;Installing Node.js&#34;&gt;&lt;/a&gt;Installing Node.js&lt;/h2&gt;&lt;p&gt;I’m assuming that you’ve already installed Visual Studio 2015.  If you did that, you already have Node.js installed.  The problem is, it isn’t the most recent version.  So, what you want to do is to install the most recent of version from the &lt;a href=&#34;//nodejs.org&#34;&gt;Node.js site&lt;/a&gt; manually.&lt;/p&gt;
&lt;p&gt;Once you have Node.js installed, the next thing you will need to do is that you’ll need to configure Visual Studio to use the version you installed instead of the version it installed.  To do this, navigate to “Tools” &amp;gt; “Options”.  In the resulting dialog, find the “Projects and Solutions” &amp;gt; “External Web Tools” leaf in the tree control and then add the directory to your newly installed Node.js installation to the top of the list of paths to external tools. &lt;a href=&#34;/uploads/2016/01/image-3.png&#34;&gt;&lt;img src=&#34;/uploads/2016/01/image_thumb.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;NPM&#34;&gt;&lt;a href=&#34;#NPM&#34; class=&#34;headerlink&#34; title=&#34;NPM&#34;&gt;&lt;/a&gt;NPM&lt;/h2&gt;&lt;p&gt;To use Gulp, you will need to install Gulp using the Node Package Manager (npm).  There are several places where I got stuck.&lt;/p&gt;
&lt;p&gt;First, I tried to install gulp using the Node Interactive Window (CTRL-K,N).  This works fine when you want to install something globally, but when you want to install something with the –save or –save-dev option, you will get the error message: &lt;code&gt;Please specify a valid Node.js project or project directory.&lt;/code&gt; It took me several tries before it finally dawned on me that it wasn’t just asking “What project do you want to install this in?”  It was asking “What Node project do you want to install this in?” We don’t have a node project, so this will never work.  What you will need to do instead is that you’ll need to shell out to the command prompt, change to the project directory, and then type your npm commands.&lt;/p&gt;
&lt;h2 id=&#34;Productivity-Power-Tools&#34;&gt;&lt;a href=&#34;#Productivity-Power-Tools&#34; class=&#34;headerlink&#34; title=&#34;Productivity Power Tools&#34;&gt;&lt;/a&gt;Productivity Power Tools&lt;/h2&gt;&lt;p&gt;You can shell out to the command prompt much easier if you install the &lt;a href=&#34;//visualstudiogallery.msdn.microsoft.com/34ebc6a2-2777-421d-8914-e29c1dfa7f5d?SRC=VSIDE&#34;&gt;Visual Studio Productivity Power Tools&lt;/a&gt;  Once these are installed, you can right click on the project you want to install npm packages into and select “Power Commands” &amp;gt; “Open Command Prompt…” from the menu.&lt;/p&gt;
&lt;h2 id=&#34;NPM-init&#34;&gt;&lt;a href=&#34;#NPM-init&#34; class=&#34;headerlink&#34; title=&#34;NPM init&#34;&gt;&lt;/a&gt;NPM init&lt;/h2&gt;&lt;p&gt;Much like NuGet’s packages.config file, NPM uses a json file to keep track of what should be installed.  To create this file, run the command &lt;code&gt;npm init&lt;/code&gt; and answer the questions.&lt;/p&gt;
&lt;p&gt;Next, in Visual Studio, click the “Show all files” icon in Solution Explorer, find the package.json file that you just created with the &lt;code&gt;npm init&lt;/code&gt; command, and include the package.json file in your project.  This will cause it to be part of your commit so that anyone who pulls your code down from version control will have the packages installed automatically.&lt;/p&gt;
&lt;h2 id=&#34;Install-Gulp&#34;&gt;&lt;a href=&#34;#Install-Gulp&#34; class=&#34;headerlink&#34; title=&#34;Install Gulp&#34;&gt;&lt;/a&gt;Install Gulp&lt;/h2&gt;&lt;p&gt;Once you’ve shelled out to the command prompt, you’ll need to type in the following two commands.&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install gulp -g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install gulp --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you open your package.json file now, you will see an entry for gulp.&lt;/p&gt;
&lt;h2 id=&#34;Create-a-Gulp-task&#34;&gt;&lt;a href=&#34;#Create-a-Gulp-task&#34; class=&#34;headerlink&#34; title=&#34;Create a Gulp task&#34;&gt;&lt;/a&gt;Create a Gulp task&lt;/h2&gt;&lt;p&gt;The final step in this process is to create the actual Gulp job.  To do that, all you need to do is create a gulpfile.js file in the root of the project.&lt;/p&gt;
&lt;p&gt;Inside the gulpfile.js file, add the following:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; gulp = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;gulp&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;default&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// place code for your default task here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now you have a default task for gulp installed.&lt;/p&gt;
&lt;h2 id=&#34;Make-Gulp-Part-of-the-Build&#34;&gt;&lt;a href=&#34;#Make-Gulp-Part-of-the-Build&#34; class=&#34;headerlink&#34; title=&#34;Make Gulp Part of the Build&#34;&gt;&lt;/a&gt;Make Gulp Part of the Build&lt;/h2&gt;&lt;p&gt;The final step here is that we want to make gulp part of the build.  Otherwise, what’s the point? In Visual Studio 2015, this is really rather simple.&lt;/p&gt;
&lt;p&gt;From the main menu, go to “View” &amp;gt; “Other Windows” &amp;gt; “Task Runner Explorer”.  You should end up looking a a sub windows in Visual Studio that looks like this: &lt;img src=&#34;/uploads/2016/01/image-4.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt; In gulp, you might have multiple tasks in a gulp file. We only have one right now, “default”.  If you right click on that, you will see that you can bind that task to one of the four bindings on the right.&lt;/p&gt;
&lt;p&gt;That’s all you have to do.  Now the gulp task “default” is bound to a specific build step.  You can do all kinds of file processing with this which we may cover in a later post.  But for now, you can at least get it all wired in.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/cross-browser-javascript-copy-and-paste/</guid>
            <title>Cross Browser JavaScript Copy and Paste</title>
            <link>http://davembush.github.com/cross-browser-javascript-copy-and-paste/</link>
            <category>javascript</category>
            <category>copy &amp;amp; paste</category>
            <category>cross browser</category>
            <pubDate>Thu, 14 Jan 2016 08:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve searched all over the Internet for a Cross Browser JavaScript Copy and Paste solution.  I couldn’t find anything that really worked.  But I was able to put together the bits and pieces I found into a rather simple solutions. As you may have noticed, I’ve written &lt;a href=&#34;/tags/javascript/&#34;&gt;quite a few articles about programming in JavaScript&lt;/a&gt; in the past couple of years because I’ve spent most of my time programming in JavaScript.  For the last three months, I’ve been working on a browser based application that needed to be able to copy and paste between the browser and an external spreadsheet.  The main struggle in making this all work correct is that what needs to be copied to the clipboard is the underlying data of the application.&lt;/p&gt;
&lt;p&gt;Getting this all working in IE, even the most recent version that runs under Windows 10, was pretty easy.  And fortunately, the browser of choice at this company is Internet Explorer.  But, it is IE 11, which takes twice as long to do anything with JavaScript as Chrome does.  Chrome is their secondary browser and my mission has been to find a way to get copy and paste working reliably using Chrome so that the end user would have a better experience with the application.&lt;/p&gt;
&lt;p&gt;While the work I’ve been doing has been using Angular, the solution that I provide in this article using plain JavaScript with no dependency on any framework.  I want the solution to be available regardless of what framework you might be predisposed to use.  If you use angular, or jQuery, or whatever, the code should be easy enough to adapt.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/01/image-1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Demo-HTML&#34;&gt;&lt;a href=&#34;#Demo-HTML&#34; class=&#34;headerlink&#34; title=&#34;Demo HTML&#34;&gt;&lt;/a&gt;Demo HTML&lt;/h2&gt;&lt;p&gt;For the purposes of this article, the HTML we are dealing with looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;tabindex&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;element1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Element To Paste Into&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;tabindex&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;element2&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Another Element To Paste Into&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;App/app.js&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;tabindex&lt;/code&gt; attribute makes the element focusable.  We’ll use the &lt;code&gt;id&lt;/code&gt; in our JavaScript to bind event handlers to the element.&lt;/p&gt;
&lt;h2 id=&#34;Demo-CSS&#34;&gt;&lt;a href=&#34;#Demo-CSS&#34; class=&#34;headerlink&#34; title=&#34;Demo CSS&#34;&gt;&lt;/a&gt;Demo CSS&lt;/h2&gt;&lt;p&gt;This is the CSS that we are using in the code to layout the &lt;code&gt;DIV&lt;/code&gt;s:&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-id&#34;&gt;#element1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;width&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;49%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;height&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;float&lt;/span&gt;: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;border&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1px&lt;/span&gt; solid black;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-id&#34;&gt;#element2&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;width&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;49%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;height&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;float&lt;/span&gt;: right;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;border&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1px&lt;/span&gt; solid black;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This is really simple CSS.  Just enough to layout the screen with the &lt;code&gt;DIV&lt;/code&gt;s side by side.&lt;/p&gt;
&lt;h2 id=&#34;Trapping-CTRL-C-and-CTRL-V&#34;&gt;&lt;a href=&#34;#Trapping-CTRL-C-and-CTRL-V&#34; class=&#34;headerlink&#34; title=&#34;Trapping CTRL-C and CTRL-V&#34;&gt;&lt;/a&gt;Trapping CTRL-C and CTRL-V&lt;/h2&gt;&lt;p&gt;To start out with, we need a way of trapping the &lt;code&gt;CTRL-C&lt;/code&gt; and &lt;code&gt;CTRL-V&lt;/code&gt; keystrokes on the element we want to copy or paste or content into.  This is pretty standard JavaScript that anyone who has worked with JavaScript before should already be familiar with.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;keyBoardListener&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;evt&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (evt.&lt;span class=&#34;property&#34;&gt;ctrlKey&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(evt.&lt;span class=&#34;property&#34;&gt;keyCode&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;67&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;// c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;copy&lt;/span&gt;(evt.&lt;span class=&#34;property&#34;&gt;target&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;86&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;// v&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;paste&lt;/span&gt;(evt.&lt;span class=&#34;property&#34;&gt;target&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;element1&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;keydown&amp;#x27;&lt;/span&gt;, keyBoardListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;element2&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;keydown&amp;#x27;&lt;/span&gt;, keyBoardListener);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Internet-Explorer&#34;&gt;&lt;a href=&#34;#Internet-Explorer&#34; class=&#34;headerlink&#34; title=&#34;Internet Explorer&#34;&gt;&lt;/a&gt;Internet Explorer&lt;/h2&gt;&lt;p&gt;You may have noticed that the code above is calling a copy function and a paste function that we have not declared yet.  That is where a lot of the magic happens.&lt;/p&gt;
&lt;p&gt;Implementing copy and paste using Internet Explorer is pretty trivial.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;paste&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;target&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;clipboardData&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        target.&lt;span class=&#34;property&#34;&gt;innerText&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;clipboardData&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .&lt;span class=&#34;title function_&#34;&gt;getData&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Text&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;copy&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;target&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;clipboardData&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;clipboardData&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;setData&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Text&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            target.&lt;span class=&#34;property&#34;&gt;innerText&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;However, keep in mind that this method has been deprecated.  But it gives us a place to start.&lt;/p&gt;
&lt;p&gt;A better way to implement the copy, would be by using newer document.execCommand(‘copy’) because that method generally works well in all three of the major browsers.  &lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;copy&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;target&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    target.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;execCommand&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;copy&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Chrome-amp-Firefox&#34;&gt;&lt;a href=&#34;#Chrome-amp-Firefox&#34; class=&#34;headerlink&#34; title=&#34;Chrome &amp;amp; Firefox&#34;&gt;&lt;/a&gt;Chrome &amp;amp; Firefox&lt;/h2&gt;&lt;p&gt;But the problem with using this method is that in Chrome and Firefox, the copy command only works with elements that are editable.  In chrome the element doesn’t have to be visible and with Firefox it does.  This requires us to change our copy command so that it will work in all three browsers.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;copy&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;target&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// standard way of copying&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; textArea = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createElement&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;textarea&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    textArea.&lt;span class=&#34;property&#34;&gt;setAttribute&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;#x27;style&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;width:1px;border:0;opacity:0;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;body&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;appendChild&lt;/span&gt;(textArea);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    textArea.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt; = target.&lt;span class=&#34;property&#34;&gt;innerHTML&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    textArea.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;execCommand&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;copy&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;body&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;removeChild&lt;/span&gt;(textArea);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;By making the text area 1 pixel wide, giving it no boarder, and making it transparent, it isn’t really visible to the user and it fulfills the requirements of all three browsers.&lt;/p&gt;
&lt;h2 id=&#34;But-What-about-Paste&#34;&gt;&lt;a href=&#34;#But-What-about-Paste&#34; class=&#34;headerlink&#34; title=&#34;But What about Paste?&#34;&gt;&lt;/a&gt;But What about Paste?&lt;/h2&gt;&lt;p&gt;OK.&lt;/p&gt;
&lt;p&gt;Getting copy working in a three browsers is pretty trivial.  But, paste, on the other hand, is where all the tricks come into play.&lt;/p&gt;
&lt;p&gt;In short, you can’t read from the clipboard during the keyboard event.  However, we can trap the system level paste event.  Sometimes.  The problem is that ‘sometimes’ quirk.&lt;/p&gt;
&lt;p&gt;In Chrome the paste event will fire all of the time.  In Firefox, it will only fire when an editable field is on the screen.  Further, the paste event can only be bound to certain elements.  The only one we can be sure will always be available is the window element.  Capturing paste at the window level doesn’t tell us what element we should paste into.&lt;/p&gt;
&lt;p&gt;But with a little JavaScript magic we can use the keyboard event handler in combination with a paste event handler to grab the contents from the clipboard and put the data where we want it.&lt;/p&gt;
&lt;p&gt;We are going to need to put some variables in place that will hold&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A flag that will tell us that the paste event has fired.&lt;/li&gt;
&lt;li&gt;A variable to hold the data from the clipboard that we retrieve.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When the paste event fires, we will set these two variables. Meanwhile, back in our paste event, we will setup a timeout function that will look to see if the flag has been set, and if it has it will retrieve the data from the data variable and place it into the DIV.&lt;/p&gt;
&lt;p&gt;Oh.  And we have that issue that the paste event will only fire if an editable field is on the screen.  Fortunately, paste fires after the keydown event.  So as part of our keydown event, we will dynamically create a textarea to enable the paste event for Firefox.&lt;/p&gt;
&lt;p&gt;So our paste code for Chrome and FireFox looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;paste&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;target&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;waitForPaste&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!systemPasteReady) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(waitForPaste, &lt;span class=&#34;number&#34;&gt;250&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        target.&lt;span class=&#34;property&#34;&gt;innerHTML&lt;/span&gt; = systemPasteContent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        systemPasteReady = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;body&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;removeChild&lt;/span&gt;(textArea);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        textArea = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// FireFox requires at least one editable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// element on the screen for the paste event to fire&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    textArea = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createElement&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;textarea&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    textArea.&lt;span class=&#34;property&#34;&gt;setAttribute&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;#x27;style&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;width:1px;border:0;opacity:0;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;body&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;appendChild&lt;/span&gt;(textArea);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    textArea.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;waitForPaste&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;systemPasteListener&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;evt&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    systemPasteContent =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        evt.&lt;span class=&#34;property&#34;&gt;clipboardData&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getData&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;text/plain&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    systemPasteReady = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    evt.&lt;span class=&#34;title function_&#34;&gt;preventDefault&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;paste&amp;#x27;&lt;/span&gt;,systemPasteListener);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Back-to-Internet-Explorer&#34;&gt;&lt;a href=&#34;#Back-to-Internet-Explorer&#34; class=&#34;headerlink&#34; title=&#34;Back to Internet Explorer&#34;&gt;&lt;/a&gt;Back to Internet Explorer&lt;/h2&gt;&lt;p&gt;I know what you are thinking now.  Why not make Internet Explorer work the same way?  Yeah, I thought the same thing.  But as soon as you take out the lnternet Explorer specific paste code, you get an exception in the paste event handler.  Turns out, the only way the paste event works is if you access the clipboard.getData() method.  At least, that’s how it works today.  So, I’m just leaving that code as it is.&lt;/p&gt;
&lt;p&gt;And there you have it.  Cross browser JavaScript Copy and Paste.&lt;/p&gt;
&lt;h2 id=&#34;Cross-Browser-JavaScript-Copy-and-Paste-Source-Code&#34;&gt;&lt;a href=&#34;#Cross-Browser-JavaScript-Copy-and-Paste-Source-Code&#34; class=&#34;headerlink&#34; title=&#34;Cross Browser JavaScript Copy and Paste Source Code&#34;&gt;&lt;/a&gt;Cross Browser JavaScript Copy and Paste Source Code&lt;/h2&gt;&lt;p&gt;A project with the final code is available on &lt;a href=&#34;//github.com/DaveMBush/CrossBrowserCopyAndPaste&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-alchemy-with-strings-numbers-and-booleans/</guid>
            <title>JavaScript Alchemy with Strings, Numbers, and Booleans.</title>
            <link>http://davembush.github.com/javascript-alchemy-with-strings-numbers-and-booleans/</link>
            <category>javascript</category>
            <category>type conversion</category>
            <pubDate>Fri, 01 Jan 2016 13:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Those who are relatively new to JavaScript might have the impression that JavaScript has no variable types.  After all, we declare everything using var and we can treat&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; == &lt;span class=&#34;string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The same as&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;or&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; == &lt;span class=&#34;string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But the reality is that JavaScript includes a very rich typing system with some well-known, and some little know methods of detecting types and converting from one type to another.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/12/image-2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Strings-and-String-Conversion&#34;&gt;&lt;a href=&#34;#Strings-and-String-Conversion&#34; class=&#34;headerlink&#34; title=&#34;Strings and String Conversion&#34;&gt;&lt;/a&gt;Strings and String Conversion&lt;/h2&gt;&lt;p&gt;The three most familiar types included in JavaScript are the String, Number, and Boolean types.  And one of the oldest tricks in JavaScript is the ability to convert a number to a string simply by concatenating a number on to a string.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someNumber = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someString = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newString = someString + someNumber;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(newString); &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;abc2&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In fact, anytime we “add” anything to a string, it turns it into a string&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someTruth = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someString = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newString = someString + someTruth;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(newString); &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;abctrue&amp;#x27;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And it doesn’t matter where we put the string.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someTruth = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someString = &lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newString =  someTruth + someString;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(newString); &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;trueabc&amp;#x27;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Numbers-and-Number-Conversion&#34;&gt;&lt;a href=&#34;#Numbers-and-Number-Conversion&#34; class=&#34;headerlink&#34; title=&#34;Numbers and Number Conversion&#34;&gt;&lt;/a&gt;Numbers and Number Conversion&lt;/h2&gt;&lt;p&gt;But what happens if the string contains a number and we add that to a number?  Well, it depends.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someNumber = &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someString = &lt;span class=&#34;string&#34;&gt;&amp;#x27;3&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newString =  someString + someNumber;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(newString); &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;39&amp;#x27;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;and&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someNumber = &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someString = &lt;span class=&#34;string&#34;&gt;&amp;#x27;3&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newString =  someNumber + someString;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(newString); &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;93&amp;#x27;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;but&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someNumber = &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someString = &lt;span class=&#34;string&#34;&gt;&amp;#x27;3&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newString =  someNumber + +someString;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(newString); &lt;span class=&#34;comment&#34;&gt;// 12;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Why? Well, prefixing the string variable with + converts that string to a number.  Under the hood, it is the same as if we had used the Number function to convert the string to a number.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someNumber = &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someString = &lt;span class=&#34;string&#34;&gt;&amp;#x27;3&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newString =  someNumber + &lt;span class=&#34;title class_&#34;&gt;Number&lt;/span&gt;(someString);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(newString); &lt;span class=&#34;comment&#34;&gt;// 12;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But what if someString can’t be converted to a number?&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someNumber = &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someString = &lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newString =  someNumber + &lt;span class=&#34;title class_&#34;&gt;Number&lt;/span&gt;(someString);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(newString); &lt;span class=&#34;comment&#34;&gt;// NaN;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;and&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someNumber = &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someString = &lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newString =  someNumber + +someString;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(newString); &lt;span class=&#34;comment&#34;&gt;// NaN;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Boolean-and-Boolean-Conversion&#34;&gt;&lt;a href=&#34;#Boolean-and-Boolean-Conversion&#34; class=&#34;headerlink&#34; title=&#34;Boolean and Boolean Conversion&#34;&gt;&lt;/a&gt;Boolean and Boolean Conversion&lt;/h2&gt;&lt;p&gt;Last week, I discussed &lt;a href=&#34;/javascript-truthy-and-falsy-pain-and-pleasure/&#34;&gt;Truthiness and Falsiness in JavaScript&lt;/a&gt;, but this week, I want to step back and discuss Booleans in the context of type information.&lt;/p&gt;
&lt;p&gt;You can convert any type to a Boolean value simply by putting a bang in front of it&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!anyVariable)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;It doesn’t just invert the truthiness or falsiness of anyVariable, it actually converts it to a Boolean first and then inverts the Boolean value. In some code, you may see&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!!anyVariable)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;because the person who wrote the code wants to test a Boolean value for true or false and not the truthiness of a non-Boolean value.  In my opinion, you don’t really gain anything by using this syntax.  But since you are likely to see it used by people who don’t really understand what JavaScript does under the hood without it, and think they are being more explicit and therefore making JavaScript faster (which they aren’t on both points) I include the syntax for completeness.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-truthy-and-falsy-%E2%80%93-pain-and-pleasure/</guid>
            <title>JavaScript Truthy and Falsy – Pain and Pleasure</title>
            <link>http://davembush.github.com/javascript-truthy-and-falsy-%E2%80%93-pain-and-pleasure/</link>
            <category>javascript</category>
            <category>falsy</category>
            <category>truthy</category>
            <pubDate>Thu, 24 Dec 2015 13:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;If you’ve been working with JavaScript at all for any length of time, you should know by now some of the basic rules of when something is true or false.  And yet, I still see code that messes this up. At the most simple level I see code that often looks like this:&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; trueVariable = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (trueVariable == &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;what a surprise, it is true!&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But the person who wrote this code, could have just as easily, and just as clearly written:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; trueVariable = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (trueVariable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;what a surprise, it is true!&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Unless, of course, they wanted to know that the variable was both truthy and a boolean. In which case neither of the two code snippets above would be correct.  In that case, you would want to write the code like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; trueVariable = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (trueVariable === &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;what a surprise, it is true!&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What do we mean by “truthy” or “falsy”? &lt;img src=&#34;/uploads/2015/12/image-1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Truthy-x2F-Falsy-Basics&#34;&gt;&lt;a href=&#34;#Truthy-x2F-Falsy-Basics&#34; class=&#34;headerlink&#34; title=&#34;Truthy&amp;#x2F;Falsy Basics&#34;&gt;&lt;/a&gt;Truthy&amp;#x2F;Falsy Basics&lt;/h2&gt;&lt;p&gt;JavaScript treats any of the following values as “falsy”.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;NaN (Not a Number.  The value, not the type)&lt;/li&gt;
&lt;li&gt;an empty length string (‘’, or “”)&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Everything else is truthy. Here are some code snippets that demonstrate the rules.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (noneExistantVariable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this console.log should not run&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;noneExistantVariable&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; aNullVariable = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (aNullVariable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this console.log should not run&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;aNullVariable&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; anEmptyString = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (anEmptyString) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this console.log should not run&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;anEmptyString&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; aStringWithZeroInIt = &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (aStringWithZeroInIt) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this console.log should run&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;aStringWithZeroInIt&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; aNumberWithZero = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (aNumberWithZero) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this console.log should not run&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;aNumberWithZero&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; aNumberOtherThanZero = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (aNumberOtherThanZero) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this console.log should run&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;aNumberOtherThanZero&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; aNoneNumericStringConvertedToANumber = &lt;span class=&#34;title class_&#34;&gt;Number&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (aNoneNumericStringConvertedToANumber) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this console.log should not run&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;aNoneNumericStringConvertedToANumber&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Mostly, writing our code like this adds a bit of convenience.  And yet, these shortcuts can also introduce unintended side effects.&lt;/p&gt;
&lt;h2 id=&#34;Truthy-x2F-Falsy-Dangers&#34;&gt;&lt;a href=&#34;#Truthy-x2F-Falsy-Dangers&#34; class=&#34;headerlink&#34; title=&#34;Truthy&amp;#x2F;Falsy Dangers&#34;&gt;&lt;/a&gt;Truthy&amp;#x2F;Falsy Dangers&lt;/h2&gt;&lt;p&gt;For example, I recently ran into some code that looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!obj.&lt;span class=&#34;property&#34;&gt;min&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    obj.&lt;span class=&#34;property&#34;&gt;min&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;NA&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The intention of this code is that if min was null, or had not been defined on the object, we would set the property to ‘NA’.  But what if min is defined as 0?  In that case, we want to leave min as it is.  But this code will reset the value to ‘NA’ which is not at all what we wanted. There are several ways you might fix this code depending on what the surrounding code might look like. You might add a check to see if obj.min is numeric, but what if it accidentally got set to a string?  You might try converting obj.min to a number and then testing the type.  Remember, a string that isn’t numeric converts to NaN. In this case, I think the best solution is to test for exactly what we intended.  Is it not null and not undefined?&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; obj = &amp;#123; &lt;span class=&#34;attr&#34;&gt;min&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (obj.&lt;span class=&#34;property&#34;&gt;min&lt;/span&gt; === &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; obj.&lt;span class=&#34;property&#34;&gt;min&lt;/span&gt; === &lt;span class=&#34;string&#34;&gt;&amp;#x27;undefined&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    obj.&lt;span class=&#34;property&#34;&gt;min&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;NA&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In fact, I use this code so much that I have created a utility class that has this as a function.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isNullOrUndefined&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;v&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (v === &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; v === &lt;span class=&#34;string&#34;&gt;&amp;#x27;undefined&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;What-About&#34;&gt;&lt;a href=&#34;#What-About&#34; class=&#34;headerlink&#34; title=&#34;What About !&#34;&gt;&lt;/a&gt;What About !&lt;/h2&gt;&lt;p&gt;One final place you may get confused working with truthy and falsy is using the not operator, !. Just one quick simple example.  What if we take one of our first examples and place a ! in front of the variable we are testing?&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!noneExistantVariable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Is this truthy or falsy? You may be inclined to think that this is still falsy because the noneExistantVariable is still undefined and putting a ! in front of it will not change the fact.  But, what you may not realize is that the ! converts the expression to a boolean and the expression !noneExistantVariable is not just truthy, but is in fact the boolean value true.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/adventures-working-with-angular%E2%80%99s-scope/</guid>
            <title>Adventures Working With Angular’s $scope</title>
            <link>http://davembush.github.com/adventures-working-with-angular%E2%80%99s-scope/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>scope</category>
            <pubDate>Thu, 26 Nov 2015 08:30:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Every week when I write, I try to think back on the past week and think, “What have I learned that might be useful to others.”  Most weeks that is a pretty easy question to answer because I get most of my pleasure from learning new stuff.  But this week was different.&lt;/p&gt;
&lt;p&gt;When I sat down to write today, I couldn’t come up with a subject that couldn’t be covered with a sentence.  More of a tweet than a blog post.  It was so bad that I decided to go run the errands that are on my list and come back to it once I got home.&lt;/p&gt;
&lt;p&gt;Evidently, that was a good move because I think I have something that will be genuinely useful.  Although I will admit that if you’ve been working with AngularJS for very long at all, you may have already learned what I’m about to explain.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/11/image2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;The-Basics&#34;&gt;&lt;a href=&#34;#The-Basics&#34; class=&#34;headerlink&#34; title=&#34;The Basics&#34;&gt;&lt;/a&gt;The Basics&lt;/h2&gt;&lt;p&gt;To make sure we are all on the same page, I want to cover the basics first.  Every controller has a $scope variable associated with it.  $scopes can be nested within each other, which allows us to either have child scopes add information to parent scopes using prototypical inheritance, or the child $scope can be isolated so that it can’t see the parent $scope up the nesting chain.  In either case, you can gain access to the parent $scope by using the $parent variable.&lt;/p&gt;
&lt;p&gt;What is important to realize about $scope is that it is attached to the element’s this pointer.  Every controller you create is its own object and $scope is just one of many properties that is part of that object.&lt;/p&gt;
&lt;p&gt;Now, in normal Angular programming, you may only ever create one controller per element.  But if you’ve ever created a directive that gets used on multiple places, or you’ve done anything with repeaters, you know that controllers can be created “under the hood.”  So that the $scope for the repeater item isn’t the same as the $scope for the element that holds the main collection.&lt;/p&gt;
&lt;h2 id=&#34;scope-and-ControllerAs&#34;&gt;&lt;a href=&#34;#scope-and-ControllerAs&#34; class=&#34;headerlink&#34; title=&#34;$scope and ControllerAs&#34;&gt;&lt;/a&gt;$scope and ControllerAs&lt;/h2&gt;&lt;p&gt;In version 1.2 of Angular, the ControllerAs syntax was added, this can be added in a number of different ways that I won’t describe here.  That’s old news and there are plenty of places to find that information, including the Angular documentation.  But what isn’t clear at first, is what this feature does for us under the hood. Many people, who haven’t dug in deep under the hood assume that somehow this replaces $scope.  But in fact what it does is that it adds a variable onto $scope.  If you were to use ControllerAs redMonkey, what actually happens under the hood is that you end up with a variable named “redMonkey” that is hanging off of the controller’s $scope variable.&lt;/p&gt;
&lt;p&gt;In fact, what you end up with is this holding a property “$scope” and $scope holding a property “redMonkey” which is actually pointing to the controller’s this pointer.  Further, it is possible to have elements in your view bind to other variables hanging off of $scope while in the same view, other things are bound to variables hanging off of redMonkeys.&lt;/p&gt;
&lt;h2 id=&#34;scope-and-Singletons&#34;&gt;&lt;a href=&#34;#scope-and-Singletons&#34; class=&#34;headerlink&#34; title=&#34;$scope and Singletons&#34;&gt;&lt;/a&gt;$scope and Singletons&lt;/h2&gt;&lt;p&gt;I hope at this point you have a relatively clear picture of how $scope works because this is where things start to get interesting.  You see, just about everything else that you create in Angular is a singleton.  That is, only one instance of it exist in the entire application.  So, what happens if you pass $scope into one of these singletons and you use that singleton multiple times on the same page? Well, there’s no telling for sure.  You might get lucky and everything will seem to work, until one day it doesn’t.  In fact, you may never notice that there is a problem if you only ever call it from one controller or directive at a time.&lt;/p&gt;
&lt;p&gt;But to use singletons effectively, what you need to do is that you will need to pass the scope to each of the functions you need to have use it, unless you can be sure it will only be able to use one scope at a time.  As a general rule, you should never store state in anything that is a singleton.&lt;/p&gt;
&lt;p&gt;How do I know? Well, this week, I was working on some code that I thought was overriding the control’s controller.  But, when I finally got it all working I found that it only worked some of the time because what I had really overridden was a method in a directive.  Another time this week, I was doing something similar thinking I was overriding a function in the main control’s $scope only to find out that the function I was overloading was in a nested repeater item.&lt;/p&gt;
&lt;h2 id=&#34;Finding-scope-for-an-element&#34;&gt;&lt;a href=&#34;#Finding-scope-for-an-element&#34; class=&#34;headerlink&#34; title=&#34;Finding $scope for an element&#34;&gt;&lt;/a&gt;Finding $scope for an element&lt;/h2&gt;&lt;p&gt;If you need help figuring out what $scope is bound to what element in your code, you can use the &lt;a href=&#34;//chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en&#34;&gt;Batarang plugin&lt;/a&gt;.  You can also use the following JavaScript code using any developer tool you might want to use.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;angular.&lt;span class=&#34;title function_&#34;&gt;element&lt;/span&gt;(elementSelector).&lt;span class=&#34;title function_&#34;&gt;scope&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;scope-and-Repeaters&#34;&gt;&lt;a href=&#34;#scope-and-Repeaters&#34; class=&#34;headerlink&#34; title=&#34;$scope and Repeaters&#34;&gt;&lt;/a&gt;$scope and Repeaters&lt;/h2&gt;&lt;p&gt;So, back to one of my issues this week.  What I was working with was a tree control.  The tree was a set of repeaters within repeaters.  The original function that was bound to the click event was bound to the item scope so that each item was bound to its own instance of the onClick method.&lt;/p&gt;
&lt;p&gt;What I was trying to do was to override the function with a function in a directive I had created that wrapped the tree control and added a search box.  Fortunately, the item template could be changed, but how to get it to call MY click handler instead of the one it called by default? To further complicate matters, the $scope in the directives were isolated so I couldn’t add a new function on the scope I had control over and have the child scope see it.&lt;/p&gt;
&lt;p&gt;Or could I? The directive I was creating does have access to the scope of the tree control.  So, all I really needed to do was to create a new variable hanging off the tree control’s scope that pointed to the scope I wanted it to see and then in my template I could point to that variable and the function hanging off of it as the thing that should get called on click.&lt;/p&gt;
&lt;p&gt;Sure enough, that worked.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-crazy-talk-are-you-guilty/</guid>
            <title>JavaScript Crazy Talk - Are you guilty?</title>
            <link>http://davembush.github.com/javascript-crazy-talk-are-you-guilty/</link>
            <category>javascript</category>
            <category>business rules</category>
            <pubDate>Thu, 29 Oct 2015 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I heard this so frequently, I decided it is time to write about it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(When writing web applications)  Business rules always belong on the server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the last conversations I had at the last place I was working was on this same issue.  And, I had a similar reaction a couple of years ago when I was doing a Selenium testing presentation and mentioned that the organization I was currently working for put all of the code on the client side and that the only thing the server did was save the data.&lt;/p&gt;
&lt;p&gt;Maybe you believe the same thing? Nothing is ever that cut and dry.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/10/image3.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;First-Rule-of-Rhetoric&#34;&gt;&lt;a href=&#34;#First-Rule-of-Rhetoric&#34; class=&#34;headerlink&#34; title=&#34;First Rule of Rhetoric&#34;&gt;&lt;/a&gt;First Rule of Rhetoric&lt;/h2&gt;&lt;p&gt;Now, the first rule of rhetoric, and the rule you must always keep in mind is this.  Whenever someone states an absolute, it probably isn’t true.  Including this one &lt;img src=&#34;/uploads/2015/10/wlEmoticon-smile.png&#34; alt=&#34;Smile&#34;&gt;.&lt;/p&gt;
&lt;p&gt;Here’s the deal.&lt;/p&gt;
&lt;p&gt;At one point there were good reasons for not putting business rules on the client side.  Chief among them was that JavaScript was slow.  If if you accounted for the round trip time, performing business logic on the server was generally slower.&lt;/p&gt;
&lt;p&gt;Another reason it was nearly never a good idea to put the business rules on the client is that no one really knew how to write good, structured, testable JavaScript.  But JavaScript has grown up and this is not the problem it once was.&lt;/p&gt;
&lt;p&gt;And finally, and the only reason we have left, is that despite many attempts to obfuscate JavaScript, at the end of the day, JavaScript is available for anyone who wants to, to read and steal trade secrets from.  Things have gotten better, but the truth remains, if I really want to, I can figure out what your JavaScript code is doing.&lt;/p&gt;
&lt;h2 id=&#34;What-Is-a-Business-Rule&#34;&gt;&lt;a href=&#34;#What-Is-a-Business-Rule&#34; class=&#34;headerlink&#34; title=&#34;What Is a Business Rule?&#34;&gt;&lt;/a&gt;What Is a Business Rule?&lt;/h2&gt;&lt;p&gt;OK, so I’ve shown that most of the old rules don’t exist.  We’ll come back to the third old rule later.  What I want to discuss is the chief, “it depends” issue.&lt;/p&gt;
&lt;p&gt;What, exactly, qualifies as a business rule? I have to admit, this question has bothered me for years.&lt;/p&gt;
&lt;h3 id=&#34;Three-Tiered&#34;&gt;&lt;a href=&#34;#Three-Tiered&#34; class=&#34;headerlink&#34; title=&#34;Three Tiered&#34;&gt;&lt;/a&gt;Three Tiered&lt;/h3&gt;&lt;p&gt;Take a look at a typical description of a three tiered architecture.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;View &amp;lt;–&amp;gt; Business Rules &amp;lt;–&amp;gt; Data Access&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don’t know about you, but most of the applications I work on, the business logic layer does little more than pass the data from the Data Access Layer up to the View and back again.  There MAY be some transformations along the way.  It might combine data in a particular way.  But, really, the Business Logic Layer, strictly speaking, isn’t doing anything I would be uncomfortable letting my competitors know about.  There are only a few instances where I could argue that putting that code on the server was going to speed things up in any significant way.&lt;/p&gt;
&lt;h3 id=&#34;Model-View-Whatever&#34;&gt;&lt;a href=&#34;#Model-View-Whatever&#34; class=&#34;headerlink&#34; title=&#34;Model View Whatever&#34;&gt;&lt;/a&gt;Model View Whatever&lt;/h3&gt;&lt;p&gt;Then there is the Model View Whatever patterns.  You know, MVC, MVVM, etc.  In this pattern, our business rules either get stuck in the controller or we put them in classes external to this pattern.  Often this code does little more than decide what elements should be enabled or disabled, assist in validation, and auto populate fields that the user could populate themselves but we do it to make life easier for them.&lt;/p&gt;
&lt;p&gt;Once again, I have to ask, what about a business rule needs to be hidden or would work faster if we put it on the server?&lt;/p&gt;
&lt;h2 id=&#34;Who-Is-Using-Your-Application&#34;&gt;&lt;a href=&#34;#Who-Is-Using-Your-Application&#34; class=&#34;headerlink&#34; title=&#34;Who Is Using Your Application?&#34;&gt;&lt;/a&gt;Who Is Using Your Application?&lt;/h2&gt;&lt;p&gt;Most web applications today are built by organizations to be used by themselves in Intranet environments.  In the last organization I worked for, there was no danger that someone would steal our code.  Most of them had no idea how to do it, and if they did, they wouldn’t be able to read it anyhow.&lt;/p&gt;
&lt;p&gt;By asking the question, “Who is using this application?” You are really asking, “What’s the risk of putting code on the client side?”  Most of the time for most of our code in most of the organizations, including even publicly facing web sites, there is very little risk involved in putting all of our code on the client side.&lt;/p&gt;
&lt;h2 id=&#34;Is-There-Any-Advantage&#34;&gt;&lt;a href=&#34;#Is-There-Any-Advantage&#34; class=&#34;headerlink&#34; title=&#34;Is There Any Advantage?&#34;&gt;&lt;/a&gt;Is There Any Advantage?&lt;/h2&gt;&lt;p&gt;Which comes down to the final question that needs to be asked.  Is there any advantage to putting code on the server instead of the client, or the other way around? In most cases, I think you will find, that the advantage of putting code on the client side far outweighs the advantages of putting that same code on the server side.  In some extreme cases, you may find that there is code that absolutely needs to live on the server.&lt;/p&gt;
&lt;h2 id=&#34;Maybe-I’m-Missing-Something&#34;&gt;&lt;a href=&#34;#Maybe-I’m-Missing-Something&#34; class=&#34;headerlink&#34; title=&#34;Maybe I’m Missing Something?&#34;&gt;&lt;/a&gt;Maybe I’m Missing Something?&lt;/h2&gt;&lt;p&gt;OK.  So, maybe I’m missing something.  Do you agree or not?  Why?  Leave a comment.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/multi-threaded-javascript-not-the-problem-you-think/</guid>
            <title>Multi-Threaded JavaScript - Not The Problem You Think</title>
            <link>http://davembush.github.com/multi-threaded-javascript-not-the-problem-you-think/</link>
            <category>javascript</category>
            <category>threading</category>
            <pubDate>Thu, 22 Oct 2015 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;A couple of weeks ago, I posted &lt;a href=&#34;/7-reasons-every-programmer-needs-to-learn-javascript/&#34;&gt;7 Reasons Every Programmer Needs to Learn JavaScript&lt;/a&gt;.  In the comments, Dean tried to refute my arguments first by claiming that my sources for JavaScript’s popularity were “a problem” because JavaScript is used in combination with other languages.  A point I refute in the comments.  But then he goes on to claim that “JavaScript is poorly suited for client side applications” because JavaScript is “Single Threaded”.  At this point, I just sighed and realized that Dean doesn’t want to learn JavaScript and that there MUST be some reason I’m not seeing for why he is so critical of JavaScript.&lt;/p&gt;
&lt;p&gt;But then Brandon jumped in and offered a very clear defense of JavaScript on the server side.  Nearly making this post unnecessary.&lt;/p&gt;
&lt;p&gt;And yet, there are things that were not said, and most people will never see the great comments that Brandon supplied.  And so we look at Multi-Threaded JavaScript in depth.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/10/image2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;JavaScript-vs-Node-js&#34;&gt;&lt;a href=&#34;#JavaScript-vs-Node-js&#34; class=&#34;headerlink&#34; title=&#34;JavaScript vs Node.js&#34;&gt;&lt;/a&gt;JavaScript vs Node.js&lt;/h2&gt;&lt;p&gt;In Brandon’s first comment, he accurately points out that it is not fair to equate JavaScript the language to Node.js the environment.  This is because Node.js does actually spin up multiple threads as needed to handle the incoming traffic.  In fact, there have been several performance test comparing Node.js to ASP.NET applications which have all found that Node.js either keeps up with, or out performs ASP.NET.  This is because of the way that traffic is handled.  In ASP.NET the default implementation is for an incoming request to block until the response for that request is sent back to the client, while the default mechanism in Node is for the request to NOT block.  In node, everything that should be none-blocking is none-blocking.  This is a HUGE win, essentially making node “Multi-threaded” in the places that matter without having to think about it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Speed comparisons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//www.haneycodes.net/to-node-js-or-not-to-node-js/&#34;&gt;Node.js Compared to ASP.NET without IIS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//mikaelkoskinen.net/post/asp-net-web-api-vs-node-js-benchmark&#34;&gt;WEBAPI vs Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//blog.shinetech.com/2013/10/22/performance-comparison-between-node-js-and-java-ee/&#34;&gt;Node.js Compared to J2EE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//strongloop.com/strongblog/node-js-is-faster-than-java/&#34;&gt;What makes Node.js Faster than Java?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here’s a simple example.  You post data from the web browser to the server that needs to go into a database.  In ASP.NET, the default way of handling this would be to receive the request, send the data to the database, wait for the return value from the database, and return to the server.  All as a blocking call.&lt;/p&gt;
&lt;p&gt;In Node.js, you would&amp;#x2F;could see this default behavior.  Information is sent to the server, the server sends to the database asynchronously and immediately returns to the client.  Of course, there are error handling issues that need to be addressed here, but the main point is that you don’t HAVE to wait and you probably shouldn’t.  If you need to send an error message back, that would be handled separately.&lt;/p&gt;
&lt;p&gt;So, I ask, which is going to appear to be faster?&lt;/p&gt;
&lt;h2 id=&#34;Who-Needs-Multi-threading&#34;&gt;&lt;a href=&#34;#Who-Needs-Multi-threading&#34; class=&#34;headerlink&#34; title=&#34;Who Needs Multi-threading?&#34;&gt;&lt;/a&gt;Who Needs Multi-threading?&lt;/h2&gt;&lt;p&gt;OK.  So, we’ve addressed the environment issue.  But now I have to ask, when is the last time you really needed your application to be multi-threaded?  I can count the number of times that I used multi-threading capabilities in one of my applications (sever side or desktop application) one two hands in the last 28 years of programming.  The need for multi-threading is quite low relative to the number of programs written.  And even if you COULD write a multi-threaded application, the benefit compared to the complexity in your code tends to be relatively minor.&lt;/p&gt;
&lt;h2 id=&#34;Multi-threading-If-You-Need-It-–-Client-Side&#34;&gt;&lt;a href=&#34;#Multi-threading-If-You-Need-It-–-Client-Side&#34; class=&#34;headerlink&#34; title=&#34;Multi-threading If You Need It – Client Side&#34;&gt;&lt;/a&gt;Multi-threading If You Need It – Client Side&lt;/h2&gt;&lt;p&gt;A little known and often under-utilized feature of JavaScript on the client side is Web Workers, which allow us to run a JavaScript file in a separate thread on the client side.  The “disadvantage” of using workers is that 1) they can’t access the DOM and 2) you have to use messaging to have the parent page and the worker talk to each other.  If you absolutely needed multi-threading on the Client Side, this would be the way to make it work today.  If you structure your code correctly, the separation from the DOM shouldn’t be an issue and messaging is a great way of communicating between a View Model and the View, even without the web worker process.&lt;/p&gt;
&lt;h2 id=&#34;Multi-threading-If-You-Need-It-–-Server-Side&#34;&gt;&lt;a href=&#34;#Multi-threading-If-You-Need-It-–-Server-Side&#34; class=&#34;headerlink&#34; title=&#34;Multi-threading If You Need It – Server Side&#34;&gt;&lt;/a&gt;Multi-threading If You Need It – Server Side&lt;/h2&gt;&lt;p&gt;In the response I initially added to the multi-threading issue, I suggested running child processes.  This is the server side equivalent of using a worker process on the client side.  You spawn off some worker processes, wait for them all to return, collect the information they provide, and continue on.  As was pointed out, this is not “true multi-threading” because in a real multi-threaded application, every thread has access to the same memory space.  But you could argue that this is a good thing too.  There are a lot of issues with multiple threads accessing the same shared memory.  I’m not sure I would want the average programmer ABLE to do this.&lt;/p&gt;
&lt;h2 id=&#34;Today-is-Not-Tomorrow&#34;&gt;&lt;a href=&#34;#Today-is-Not-Tomorrow&#34; class=&#34;headerlink&#34; title=&#34;Today is Not Tomorrow&#34;&gt;&lt;/a&gt;Today is Not Tomorrow&lt;/h2&gt;&lt;p&gt;Just because JavaScript doesn’t handle REAL multi-threading today, doesn’t mean this won’t be added in the future.  The language is still evolving.  I could see a point in the next 5 years where this capability is added in, or a framework is created that will make this available, or both.&lt;/p&gt;
&lt;h2 id=&#34;Only-Use-Multi-Threading-Where-You-Need-It&#34;&gt;&lt;a href=&#34;#Only-Use-Multi-Threading-Where-You-Need-It&#34; class=&#34;headerlink&#34; title=&#34;Only Use Multi-Threading Where You Need It&#34;&gt;&lt;/a&gt;Only Use Multi-Threading Where You Need It&lt;/h2&gt;&lt;p&gt;OK.  But what if you REALLY need Multi-threading capabilities? As was pointed out, then JavaScript may not be the right language for the job.  But then, you could easily argue that C#, Java, and many other languages aren’t either.  If you REALLY need that kind of speed, you probably want to drop down to C&amp;#x2F;C++ or even Assembly Language.  But why not mix and match.  It is rarely the case that your entire application needs to be multi-threaded.  In my experience, it is only some small percentage of the overall application that needs that ability.  So, why not create a node module that does the multi-threaded bit and wire it into your broader JavaScript application?&lt;/p&gt;
&lt;h2 id=&#34;Wrapping-It-Up&#34;&gt;&lt;a href=&#34;#Wrapping-It-Up&#34; class=&#34;headerlink&#34; title=&#34;Wrapping It Up&#34;&gt;&lt;/a&gt;Wrapping It Up&lt;/h2&gt;&lt;p&gt;Clearly, JavaScript is a young language and Node.js is a young environment.  There are still issues that need to be worked out.  But for as young as it is, they have some pretty robust capabilities “out-of-the-box” that will only get better in the future.&lt;/p&gt;
&lt;p&gt;I’m excited and optimistic.  Excited about the potential and optimistic about the future capabilities for threading in JavaScript.&lt;/p&gt;
&lt;p&gt;But maybe you aren’t.  You know what, while I think it might be a career mistake, it is your career.  You don’t have to agree with me.  And since neither of us are omniscient, only time will tell which of us made the better choice.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/create-a-desktop-application-using-angular-bootstrap-and-c/</guid>
            <title>Create A Desktop Application using Angular, Bootstrap and C#</title>
            <link>http://davembush.github.com/create-a-desktop-application-using-angular-bootstrap-and-c/</link>
            <category>angular</category>
            <category>javascript</category>
            <category>angular.js</category>
            <category>bootstrap</category>
            <pubDate>Thu, 15 Oct 2015 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Last week I mentioned that it is possible to &lt;a href=&#34;/7-reasons-every-programmer-needs-to-learn-javascript/&#34;&gt;create a desktop application using JavaScript&lt;/a&gt; and that I had actually started working on an application that used Angular and Bootstrap for the presentation layer.  I actually have enough of that working that I can share the “how-to” with you.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/10/image1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Why-Would-You-Do-This&#34;&gt;&lt;a href=&#34;#Why-Would-You-Do-This&#34; class=&#34;headerlink&#34; title=&#34;Why Would You Do This?&#34;&gt;&lt;/a&gt;Why Would You Do This?&lt;/h2&gt;&lt;p&gt;Well, I don’t know why YOU would do this, but the reason I’m doing this is because the more I do on the web, the less able I am to work with Windows Form, and I haven’t even bothered learning WPF.  I decided several years ago that I would niche down over web technologies.  And yet, I want to write this desktop application.  I tried to use Windows Form, which I am most familiar with, and just got frustrated.  I want to use a grid control.  But what I want to do with the control is something more like what I would do with Angular’s ui-grid than what I can do with the grid control built into Windows Form. I’m sure someone who really knew the desktop side of the fence would be able to do what I want to do.  But I want to leverage what I know.  And eventually, I may move the whole thing to Node.js even though to get the thing up and running, I am going to use C# for the main processing.&lt;/p&gt;
&lt;h2 id=&#34;Rendering-HTML&#34;&gt;&lt;a href=&#34;#Rendering-HTML&#34; class=&#34;headerlink&#34; title=&#34;Rendering HTML&#34;&gt;&lt;/a&gt;Rendering HTML&lt;/h2&gt;&lt;p&gt;The first step toward getting all of this working is to just get HTML to render inside of a Windows Form (or WPF) executable.  I decided to use Windows Forms because I don’t need any of the WPF goodness that WPF would give me.  But you could tweak most of the setup I’m going to give you so that it would work with WPF if that’s your preferred platform.&lt;/p&gt;
&lt;p&gt;So, let’s start out by creating a Windows Form based application.  Once you have the project loaded, you’ll want to grab the &lt;a href=&#34;//www.nuget.org/packages/CefSharp.WinForms/&#34;&gt;CefSharp Windows Forms DLL’s and related files&lt;/a&gt;.  You can use NuGet to get these installed.  Just search for, “CefSharp.WinForms”.&lt;/p&gt;
&lt;p&gt;Because chromium uses Win32 or Win64 based C++ DLLs, you’ll need to configure your project to run as one or the other project.  This part was a little tricky.  What I found was that just changing the project settings for the default configuration named “Any CPU” was not enough.  What you need to do is to create a new project named “x64” or “x32” and change the settings there.&lt;/p&gt;
&lt;p&gt;Try compiling now, before you add any code.  If you’ve configured the project correctly with the CefSharp DLLs it should compile.&lt;/p&gt;
&lt;p&gt;The next thing you want to do is to insert the Chromium Browser control into the form.  Yes, it is a control like any other control.  No, you won’t find it on your toolbar.  No, it isn’t worth adding to the toolbar.  It is the only control that is going to be on the form so all you need to do is add it to the form using a few lines of code.&lt;/p&gt;
&lt;p&gt;First, add a private variable to hold the browser control.  It doesn’t need to be a member variable to get the HTML to render, but you’ll want it to be private later on.  So, just make it private to start with.&lt;/p&gt;
&lt;p&gt;Then, in your Load() method, add the following code:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Form1_Load&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Initialize CefSharp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     Cef.Initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Create a new browser window&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _browser =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ChromiumWebBrowser(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://www.google.com/&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Add the new browser window to the form&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Controls.Add(_browser);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You will also need code in your &lt;code&gt;FormClosing()&lt;/code&gt; method.  You can create this in Visual Studio by selecting it from the dropdowns in the upper right corner of the code window.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Form1_FormClosing&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Cef.Shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;OK.  Compile and run.  You should be able to load the Google web site and see it in your Windows Form.&lt;/p&gt;
&lt;h2 id=&#34;Using-Our-Own-Files&#34;&gt;&lt;a href=&#34;#Using-Our-Own-Files&#34; class=&#34;headerlink&#34; title=&#34;Using Our Own Files&#34;&gt;&lt;/a&gt;Using Our Own Files&lt;/h2&gt;&lt;p&gt;OK, so we’ve proven that we can render HTML inside of a Windows Form application.  But that won’t do us much good if we want to run code on our own.  Most of the places on the web that talk about loading HTML inside of a desktop application using Chromium suggest that you copy the HTML files over as content and use the file:&amp;#x2F;&amp;#x2F; protocol to load them.  But there are two problems with doing that.  First, I don’t want the files generally accessible to whoever has this installed.  What if someone decides to change those files? The second problem I have is even worse.  Assuming I could live with the files being available on the file system, Angular doesn’t work from the file system.  It wants to run from &lt;a href=&#34;http://somedomain/&#34;&gt;http://somedomain/&lt;/a&gt;.  So at the very least, we need for our files to LOOK like they’ve been served from a web server.&lt;/p&gt;
&lt;p&gt;Fortunately, we can solve both of these problems.&lt;/p&gt;
&lt;h3 id=&#34;Make-Our-Files-Resources&#34;&gt;&lt;a href=&#34;#Make-Our-Files-Resources&#34; class=&#34;headerlink&#34; title=&#34;Make Our Files Resources&#34;&gt;&lt;/a&gt;Make Our Files Resources&lt;/h3&gt;&lt;p&gt;To start with, we’ll just add one file.  Since it will be the beginning of our main application, name the file index.html and place it in a directory called “web” off the root of your project.  Put enough HTML in there that you’ll know the file actually got loaded.&lt;/p&gt;
&lt;p&gt;Then in the file properties, mark the file as an “Embedded Resource” instead of “Content” To load this file as a resource, you’ll use code that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; assembly = Assembly.GetExecutingAssembly();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; textStream = assembly.GetManifestResourceStream&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 (&lt;span class=&#34;string&#34;&gt;&amp;quot;TopLevelNamespace.web.index.html&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Make-it-LOOK-Like-it-Came-From-a-Server&#34;&gt;&lt;a href=&#34;#Make-it-LOOK-Like-it-Came-From-a-Server&#34; class=&#34;headerlink&#34; title=&#34;Make it LOOK Like it Came From a Server&#34;&gt;&lt;/a&gt;Make it LOOK Like it Came From a Server&lt;/h3&gt;&lt;p&gt;This is where some of the magic starts to happen.  The Chromium APIs have code that will let you register a pre-canned response object with a URL using a dictionary.  So, all we need to do is change the text string that we returned in the code above into a response object and register it with Chromium.&lt;/p&gt;
&lt;p&gt;The code to do that looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; factory = (DefaultResourceHandlerFactory)(browser.ResourceHandlerFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (factory == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; response = ResourceHandler.FromStream(textStream);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;factory.RegisterHandler(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://local/&amp;quot;&lt;/span&gt;, response);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now, when we tell Chromium to load “&lt;a href=&#34;http://local/%E2%80%9D&#34;&gt;http://local/”&lt;/a&gt; it  will render the index.html file from our EXE.&lt;/p&gt;
&lt;p&gt;Cool! Now, loading each file like this is going to get rather tedious pretty fast.  So what we need is a mechanism for loading all of the files in our web directory automatically.  For this we need to be able to iterate over all of our resources in the web namespace and register them with an associated “http:&amp;#x2F;&amp;#x2F;” tag.&lt;/p&gt;
&lt;p&gt;Since the best that we can do is get a list of all of the resources in our assembly, we will have to do some filtering to only register stuff in the “web” namespace.  But, there is another issue.  All of the resources are going to be listed as “TopLevelNamespace.web.subnamespace.filename.extension” and we want to register them as “&lt;a href=&#34;http://local/subnamespace/filename.extension%E2%80%9D&#34;&gt;http://local/subnamespace/filename.extension”&lt;/a&gt;.  So there is a bit of string manipulation that we need to go through to register everything correctly.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Get the list of resources&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; resourceNames = Assembly.GetExecutingAssembly()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .GetManifestResourceNames();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// For each resource&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; resource &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; resourceNames)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// If it isn&amp;#x27;t in the &amp;quot;web&amp;quot; namespace, skip it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!resource.StartsWith(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopLevelNamespace.web&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Strip out the namespace that we don&amp;#x27;t need.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; url = resource.Replace&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;TopLevelNamespace.web.&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Function I made that turns the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// resource into a textStream&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; r = LoadResource(url);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Make the namespace look like a path&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    url = url.Replace(&lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; lastSlash = url.LastIndexOf(&lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        StringComparison.Ordinal);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    url = url.Substring(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, lastSlash) + &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        url.Substring(lastSlash + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Register the response with the URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    factory.RegisterHandler(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://local/&amp;quot;&lt;/span&gt; + url,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ResourceHandler.FromStream(r));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now that I’ve explained all of the code.  The full class for loading the resources looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RegisterWebsite&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Load&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ChromiumWebBrowser browser&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; factory = (DefaultResourceHandlerFactory)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (browser.ResourceHandlerFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (factory == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; response = ResourceHandler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .FromStream(LoadResource(&lt;span class=&#34;string&#34;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        factory.RegisterHandler(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://local/&amp;quot;&lt;/span&gt;, response);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; resourceNames = Assembly.GetExecutingAssembly()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .GetManifestResourceNames();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; resource &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; resourceNames)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!resource.StartsWith(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopLevelNamespace.web&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; url = resource.Replace(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopLevelNamespace.web.&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; r = LoadResource(url);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            url = url.Replace(&lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; lastSlash = url.LastIndexOf(&lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                StringComparison.Ordinal);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            url = url.Substring(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, lastSlash) + &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                url.Substring(lastSlash + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            factory.RegisterHandler(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://local/&amp;quot;&lt;/span&gt; + url,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 ResourceHandler.FromStream(r));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; Stream &lt;span class=&#34;title&#34;&gt;LoadResource&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; filename&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; assembly = Assembly.GetExecutingAssembly();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; textStream = assembly&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .GetManifestResourceStream(&lt;span class=&#34;string&#34;&gt;&amp;quot;TopLevelNamespace.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                + filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; textStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There is some obvious room for improvement here.  But the basics are there, you can tweak as needed.&lt;/p&gt;
&lt;p&gt;The main entry point is the Load method where we pass in a pointer to the browser control we created when we started this project.&lt;/p&gt;
&lt;h2 id=&#34;Getting-JavaScript-to-talk-to-C&#34;&gt;&lt;a href=&#34;#Getting-JavaScript-to-talk-to-C&#34; class=&#34;headerlink&#34; title=&#34;Getting JavaScript to talk to C#&#34;&gt;&lt;/a&gt;Getting JavaScript to talk to C#&lt;/h2&gt;&lt;p&gt;Now that we have the basics out of the way, we need to get the two halves of our project talking to each other.  The first half is that we need a way for our JavaScript client side code to retrieve data and send notifications to our server side code.  Fortunately, the mechanisms for doing this are already built into Chromium.&lt;/p&gt;
&lt;p&gt;Any C# object can be registered with Chromium as a JavaScript object so that any property will become a JavaScript field and any method will become a JavaScript method.&lt;/p&gt;
&lt;p&gt;The API to make this happen looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;_browser&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .RegisterJsObject(&lt;span class=&#34;string&#34;&gt;&amp;quot;NameYouWantJavaScriptToSeeThisObjectAs&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cSharpObjectHere);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In our JavaScript code, we would find that the window object now has a field named “NameYouWantJavaScriptToSeeThisObjectAs”&lt;/p&gt;
&lt;h2 id=&#34;Getting-C-to-talk-to-C&#34;&gt;&lt;a href=&#34;#Getting-C-to-talk-to-C&#34; class=&#34;headerlink&#34; title=&#34;Getting C# to talk to C#&#34;&gt;&lt;/a&gt;Getting C# to talk to C#&lt;/h2&gt;&lt;p&gt;The reverse is just as easy.&lt;/p&gt;
&lt;p&gt;_browser.ExecuteScriptAsync(string) takes a string that is the JavaScript that you want to execute.&lt;/p&gt;
&lt;h2 id=&#34;Getting-the-Communication-To-Play-Nice-with-Angular&#34;&gt;&lt;a href=&#34;#Getting-the-Communication-To-Play-Nice-with-Angular&#34; class=&#34;headerlink&#34; title=&#34;Getting the Communication To Play Nice with Angular&#34;&gt;&lt;/a&gt;Getting the Communication To Play Nice with Angular&lt;/h2&gt;&lt;p&gt;But getting this all to play well with &lt;a href=&#34;//angularjs.org/&#34;&gt;Angular&lt;/a&gt; requires just a little bit more.&lt;/p&gt;
&lt;p&gt;You may find that code on your screen that depends on a field or method that was registered with RegisterJsObject does not update when it should.  In fact, I would guess that this would happen most of the time because our C# object knows nothing of Angular and Angular knows nothing of our C# object.  So to fix this, we will need to make sure we $watch our C# object in our angular code.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$scope.$watch(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;RegisteredObject&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;property&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $scope.&lt;span class=&#34;property&#34;&gt;someField&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;RegisteredObject&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;property&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What this code does is that it tells Angular to check this field when it goes through its $digest cycle.  If it has changed since the last time it looked, it should run the second function that was passed in to $watch().&lt;/p&gt;
&lt;p&gt;But this isn’t the only code you will need to add.  Whenever you make a change to something on the C# side that the Angular code needs to reflect, you’ll need to tell Angular to run the $digest() cycle manually.  To do that, you’ll use that ExecuteScriptAsync() method to run some JavaScript.&lt;/p&gt;
&lt;p&gt;The easiest way to do this is to just run it off the top level $scope object.  The way you find the top level $scope object is to use JavaScript to find the element that you marked as “ng-app” in your HTML.  Once you’ve done that, you will see that it has a scope() method hanging off of it.  So this code will force a $digest cycle on everything from the top level $scope all of the way down.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;_browser&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .ExecuteScriptAsync(&lt;span class=&#34;string&#34;&gt;&amp;quot;angular.element(&amp;#x27;[ng-app]&amp;#x27;).scope().$digest();&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, you could skip setting the watch and have your ExecuteScriptAsync call set the $scope variables directly using something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;_browser.ExecuteScriptAsync(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;angular.element(&amp;#x27;#IdOfViewThatHasAControllerAttached&amp;#x27;).&amp;quot;&lt;/span&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;scope().status = &amp;#x27;this is a new status&amp;#x27;;angular.&amp;quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;element(&amp;#x27;[ng-app]&amp;#x27;).scope().$digest();&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Where #IdOfViewThatHasAControllerAttached is an ID of a element in a view that you’ve associated with a controller.  You’ll still want your controller to pull from the C# JavaScript object for the initial load because the DIV may or may not be there when you do the push.  Personally, I prefer the $watch method.  There is less to think about on the C# side.&lt;/p&gt;
&lt;p&gt;And that’s how you create a desktop application using Angular, Bootstrap and C#.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/7-reasons-every-programmer-needs-to-learn-javascript/</guid>
            <title>7 Reasons Every Programmer Needs to Learn JavaScript</title>
            <link>http://davembush.github.com/7-reasons-every-programmer-needs-to-learn-javascript/</link>
            <category>javascript</category>
            <category>career</category>
            <pubDate>Thu, 08 Oct 2015 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;In my recent discussions with hiring managers about how hard it is to find good developers, the realization has slowly dawned on me that the programming language to learn today is JavaScript.  This is particularly true if you are a web developer, but I would be inclined to just make a blanket statement.  If you are a programmer, you should learn JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/10/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Demand&#34;&gt;&lt;a href=&#34;#Demand&#34; class=&#34;headerlink&#34; title=&#34;Demand&#34;&gt;&lt;/a&gt;Demand&lt;/h2&gt;&lt;p&gt;The main reason that I say this, is that as JavaScript matures and things like Node.js become increasingly viable options, the demand for JavaScript programmers will continue to increase.  &lt;a href=&#34;//www.codingdojo.com/blog/8-most-in-demand-programming-languages-of-2015/&#34;&gt;JavaScript already surpasses C#&lt;/a&gt; as rated by demand, and is surpassed only by Java.  And if you were to take a look at projects available to GitHub, you would find that &lt;a href=&#34;//github.com/blog/2047-language-trends-on-github&#34;&gt;JavaScript has a growing representation&lt;/a&gt; that surpasses previous kingpins including Java and C#.  And finally, looking at the &lt;a href=&#34;//redmonk.com/sogrady/2014/01/22/language-rankings-1-14/&#34;&gt;representation on StackOverflow&lt;/a&gt;, we can see that JavaScript is in the top tier there as well.&lt;/p&gt;
&lt;h2 id=&#34;Better-Pay&#34;&gt;&lt;a href=&#34;#Better-Pay&#34; class=&#34;headerlink&#34; title=&#34;Better Pay&#34;&gt;&lt;/a&gt;Better Pay&lt;/h2&gt;&lt;p&gt;According to SitePoint, &lt;a href=&#34;//www.sitepoint.com/best-programming-language-learn-2015-job-demand-salaries/&#34;&gt;JavaScript pays better than C#&lt;/a&gt;.  Again, Java pays a bit better right now.  But as demand for JavaScript grows, you can expect the pay to increase as well. On Gooroo, &lt;a href=&#34;//gooroo.io/GoorooTHINK/Article/16300/Programming-languages--salaries-and-demand-May-2015/18672#.VhARuXpVhBc&#34;&gt;the pay vs demand shows a little different picture&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;While the demand for JavaScript is evident, it is obvious that several languages that have a smaller demand actually pay better.  I suspect this is because many organizations still think of JavaScript as the language that anyone can use.  It will be a very painful lesson when they find out that “Anyone can program in JavaScript” really means, “Anyone can write crappy code in JavaScript”.  Which is where you and I step in to clean up the mess that was left behind.&lt;/p&gt;
&lt;p&gt;Over on StackOverflow, we see a &lt;a href=&#34;//stackoverflow.com/research/developer-survey-2015&#34;&gt;very detailed breakdown of developers for the last three years&lt;/a&gt;.  When you finally get down to the “Technologies Used” section what we find is that if you just call yourself a JavaScript programmer (I’m assuming client side here) you get paid better than Java and less than C# but if you say you are a Node.js programmer (which is all JavaScript) you are the second highest paid skill.  The only thing that pays better is Objective-C (and I’m assuming soon, Swift).&lt;/p&gt;
&lt;h2 id=&#34;JavaScript-is-Maturing&#34;&gt;&lt;a href=&#34;#JavaScript-is-Maturing&#34; class=&#34;headerlink&#34; title=&#34;JavaScript is Maturing&#34;&gt;&lt;/a&gt;JavaScript is Maturing&lt;/h2&gt;&lt;p&gt;With the recent commitment of the standards committee to release a new JavaScript standard every year, it is clear that the amount of Syntactic Sugar that will be added on to JavaScript is going to be increasing every year for a while now.  One of the features I’m looking forward to is the ability to use the async and await keywords in my JavaScript code to eliminate callback hell.&lt;/p&gt;
&lt;p&gt;But, the reason this matters to you is that the sooner you start learning JavaScript, the easier it will be to learn.  All of the changes that happen after you learn it will all be incremental.  The browsers are also continually improving how they handle JavaScript code.  I can see a time in the future when browsers not only cache the JavaScript files, but cache the compiled version of the JavaScript files.  Bringing us closer to near binary speed.&lt;/p&gt;
&lt;p&gt;It is interesting to me that several years ago, people were debating the future of JavaScript and now, there is active work being done to make JavaScript a first class language.&lt;/p&gt;
&lt;h2 id=&#34;Some-JavaScript-Programmers-Are-More-Equal-Than-Others&#34;&gt;&lt;a href=&#34;#Some-JavaScript-Programmers-Are-More-Equal-Than-Others&#34; class=&#34;headerlink&#34; title=&#34;Some JavaScript Programmers Are More Equal Than Others&#34;&gt;&lt;/a&gt;Some JavaScript Programmers Are More Equal Than Others&lt;/h2&gt;&lt;p&gt;I was talking with an old friend about a year ago.  He mentioned that he was the only one in his group of about 20 programmers who wrote JavaScript in such a way as to eliminate polluting the global scope with variables.  That is just the most simple of examples.  Many people who call themselves &lt;a href=&#34;/7-javascript-interview-questions-to-weed-out-imposters/&#34;&gt;JavaScript programmers, don’t know the basics&lt;/a&gt;.  And that is today.  Imagine what this is going to look like three to five years from now.&lt;/p&gt;
&lt;p&gt;And don’t forget that a lot of the tooling to support profiling and memory leaks is just at its infancy.  If you have those skills today, and you have marketed yourself well, you are already realizing that a lot of what I’m saying here is true.&lt;/p&gt;
&lt;p&gt;If you are interested in this kind of stuff, there are some courses over on PluralSight.  Just search for “JavaScript profiling”&lt;/p&gt;
&lt;h2 id=&#34;Frameworks-Are-Maturing&#34;&gt;&lt;a href=&#34;#Frameworks-Are-Maturing&#34; class=&#34;headerlink&#34; title=&#34;Frameworks Are Maturing&#34;&gt;&lt;/a&gt;Frameworks Are Maturing&lt;/h2&gt;&lt;p&gt;With the new version of Angular in the works, Aurelia in the works as an alternative.  Commercial products such as Scencha’s EXTjs.  Node.js for server side programing.  And others…  No one can say that it is too hard to develop real applications using JavaScript.  I’m pretty sure, if I wanted to, I could write a desktop application that ran using nothing but JavaScript.  Oh.  Wait.  That’s already been done.  (Visual Studio Code for those of you who were asleep for that announcement.) Actually, since I’ve written that last paragraph I’ve started writing a desktop application that uses HTML with Bootstrap and Angular for the presentation layer and C# for mostly data access.  Yes, I know I could do the whole thing in JavaScript if I wanted to, but I’m going with what is most familiar right now.  Apologies to XAML fans.&lt;/p&gt;
&lt;h2 id=&#34;JavaScript-Runs-Everywhere&#34;&gt;&lt;a href=&#34;#JavaScript-Runs-Everywhere&#34; class=&#34;headerlink&#34; title=&#34;JavaScript Runs Everywhere&#34;&gt;&lt;/a&gt;JavaScript Runs Everywhere&lt;/h2&gt;&lt;p&gt;JavaScript runs on every major browser on every major platform.  It runs on the server side on every major operating system.  Anyone writing a web site today of any major functionality is going to need someone who knows JavaScript to write the front end.  It doesn’t matter what the back end code was written in be it Java, PHP, .NET, Node.js or something else, the client side is going to need a JavaScript developer.  In fact, I still run into pockets of developers who just don’t know how powerful JavaScript is.  What this means for you is this.  If you become an awesome JavaScript programmer, you will have jobs available to you across all the various server side platforms.  It will help if you learn a little bit about those platforms.  But I’m talking about niching down in JavaScript so that you become THE go to person.&lt;/p&gt;
&lt;h2 id=&#34;JavaScript-is-a-Compiled-Language&#34;&gt;&lt;a href=&#34;#JavaScript-is-a-Compiled-Language&#34; class=&#34;headerlink&#34; title=&#34;JavaScript is a Compiled Language&#34;&gt;&lt;/a&gt;JavaScript is a Compiled Language&lt;/h2&gt;&lt;p&gt;It may shock you to know that, technically, JavaScript is a compiled language.  This has two implications.  First, once the code is compiled, it is possible for it to run as fast as any other executable.  Second, it is technically possible to write tooling for JavaScript that would create a binary file that does not need to be recompiled every time the code is loaded into memory.&lt;/p&gt;
&lt;h2 id=&#34;What-Do-You-Think&#34;&gt;&lt;a href=&#34;#What-Do-You-Think&#34; class=&#34;headerlink&#34; title=&#34;What Do You Think?&#34;&gt;&lt;/a&gt;What Do You Think?&lt;/h2&gt;&lt;p&gt;Of course this is all totally opinion.  What do you think?  Leave me a comment.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/7-javascript-interview-questions-to-weed-out-imposters/</guid>
            <title>7 JavaScript Interview Questions [To Weed Out Imposters]</title>
            <link>http://davembush.github.com/7-javascript-interview-questions-to-weed-out-imposters/</link>
            <category>javascript</category>
            <category>interview</category>
            <pubDate>Thu, 20 Aug 2015 07:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/08/image2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Last week, I posted &lt;a href=&#34;/7-c-interview-questions-that-weed-out-the-losers/&#34;&gt;7 interview questions for C# programmers.&lt;/a&gt;  I guess I forgot that people can’t see in my brain.  So, let me be very explicit this time.  The “weed out the losers” questions are meant to do just that.  Weed out people who have absolutely no business even applying for the job.&lt;/p&gt;
&lt;p&gt;You would be amazed at how many people interview for a job who have all kinds of cool buzzwords on their resume, but when you ask them about it, they know nothing about the subject.  I’m not sure if this is the recruiter who is representing them trying to help them out by beefing up the resume to get them in the door or if they actually do this themselves.  But, as someone who interviews, I have to have a way of making sure the applicant I’m interviewing is worth interviewing in the first place.  Hopefully, I can do this over the phone in less than a half an hour.&lt;/p&gt;
&lt;p&gt;So, with that said, if your favorite question isn’t on this list, it is probably because it is a question I would save for some future interview.&lt;/p&gt;
&lt;p&gt;Also, to those of you who may think that a technical interview doesn’t really tell you if the programmer is a good programmer or not, I have this to say… You are right.  And when I was a younger programmer and was being interviewed with technical questions, I felt the same way.  But now that I’m on the other side of the table, I find that way too often, the people who can pass a technical interview are a lot more likely to be good programmers than the ones who can’t.&lt;/p&gt;
&lt;p&gt;And finally, I would not rule out an applicant because he got a couple of questions wrong, or didn’t answer them exactly the way I expected.  But if couldn’t answer most of them, that would raise a huge red flag! So, here are 7 JavaScript Interview Questions you should ask first.  Otherwise, you may be wasting your time.&lt;/p&gt;
&lt;h2 id=&#34;What-are-two-ways-you-might-create-an-object-in-JavaScript&#34;&gt;&lt;a href=&#34;#What-are-two-ways-you-might-create-an-object-in-JavaScript&#34; class=&#34;headerlink&#34; title=&#34;What are two ways you might create an object in JavaScript?&#34;&gt;&lt;/a&gt;What are two ways you might create an object in JavaScript?&lt;/h2&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;This is a pretty simple question if you’ve been using JavaScript.  Shoot, you should even be able to guess at one of the answers.  But, still, in my experience, there are a lot of people who say they are JavaScript programmers who don’t know how to answer this question.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the “new” keyword to call a function.&lt;/li&gt;
&lt;li&gt;Use the open&amp;#x2F;close curly braces.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; o = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You might want to follow up with, “using the new keyword, at what point is the object created?”  But, as far as questions that weed out, I would consider that something that could wait until I’m really interviewing to discover how deep the applicant’s knowledge goes.&lt;/p&gt;
&lt;h2 id=&#34;How-would-you-create-an-array&#34;&gt;&lt;a href=&#34;#How-would-you-create-an-array&#34; class=&#34;headerlink&#34; title=&#34;How would you create an array?&#34;&gt;&lt;/a&gt;How would you create an array?&lt;/h2&gt;&lt;p&gt;This is a similar level question to “How do you create an object.”  And yet, there are some who can answer the first who can’t answer this one.&lt;/p&gt;
&lt;p&gt;While it is possible to create an array with&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; myArray = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Array&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;It is a long way of creating an array.  One would hope that the answer included using square brackets.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; myArray = [];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Once again, there are other questions we could ask, but since we only want to know that the applicant is worth further investigation, I would leave the array questioning here.&lt;/p&gt;
&lt;h2 id=&#34;What-is-variable-hoisting&#34;&gt;&lt;a href=&#34;#What-is-variable-hoisting&#34; class=&#34;headerlink&#34; title=&#34;What is variable hoisting?&#34;&gt;&lt;/a&gt;What is variable hoisting?&lt;/h2&gt;&lt;p&gt;This one is a slightly harder question to answer, and I wouldn’t expect anyone to be able to answer this.  But again, we are trying to get a quick determination of the applicant’s skill level.  How well do they understand the language they claim to know? Variable hoisting is the term that refers to the fact that no matter where a variable is declared in a scope, the JavaScript engine will move that declaration to the top of the scope.  If you declare a variable in the middle of a function, for example and assign a value to it all in one line:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// a bunch of code here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The code that actually gets run would look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// a bunch of code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;What-are-the-dangers-of-global-variables-and-how-do-you-protect-against-it&#34;&gt;&lt;a href=&#34;#What-are-the-dangers-of-global-variables-and-how-do-you-protect-against-it&#34; class=&#34;headerlink&#34; title=&#34;What are the dangers of global variables and how do you protect against it?&#34;&gt;&lt;/a&gt;What are the dangers of global variables and how do you protect against it?&lt;/h2&gt;&lt;p&gt;The danger of global variables is that someone else could create a variable with the same name and overwrite the variable you are using.  This is a bad idea in any language.&lt;/p&gt;
&lt;p&gt;You prevent this in a number of ways.  The most common would be to create one global variable that all of your other variables live in:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; applicationName = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then any time you need to create a global variable, you attach it to that object.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;applicationName.&lt;span class=&#34;property&#34;&gt;myVariable&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The other way you can guard against this is by wrapping all of your code in a self-executing function so that any variables that are declared are declared within that function’s scope.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In reality, you’ll probably end up using both methods.&lt;/p&gt;
&lt;h2 id=&#34;How-do-you-iterate-through-members-in-a-JavaScript-object&#34;&gt;&lt;a href=&#34;#How-do-you-iterate-through-members-in-a-JavaScript-object&#34; class=&#34;headerlink&#34; title=&#34;How do you iterate through members in a JavaScript object?&#34;&gt;&lt;/a&gt;How do you iterate through members in a JavaScript object?&lt;/h2&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prop &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; obj)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// bonus points for hasOwnProperty&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(obj.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(prop))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// do something here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;What-is-a-closure&#34;&gt;&lt;a href=&#34;#What-is-a-closure&#34; class=&#34;headerlink&#34; title=&#34;What is a closure?&#34;&gt;&lt;/a&gt;What is a closure?&lt;/h2&gt;&lt;p&gt;A closure is what allows a function inside the scope of another function to still be able to see the variables declared in the outer scope even after everything else about that scope has disappeared.  Bonus points if they state something about the dangers of using a closure inside of a for&amp;#x2F;next loop without declaring a variable to hold the current value of the iteration variable.&lt;/p&gt;
&lt;h2 id=&#34;Describe-your-experience-unit-testing-JavaScript&#34;&gt;&lt;a href=&#34;#Describe-your-experience-unit-testing-JavaScript&#34; class=&#34;headerlink&#34; title=&#34;Describe your experience unit testing JavaScript&#34;&gt;&lt;/a&gt;Describe your experience unit testing JavaScript&lt;/h2&gt;&lt;p&gt;Here we are just trying to find out if they’ve even done unit testing with JavaScript.  It is an open-ended question with no particular right answer but it should tell you something in the process.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-scope/</guid>
            <title>JavaScript Scope</title>
            <link>http://davembush.github.com/javascript-scope/</link>
            <category>javascript</category>
            <category>scope</category>
            <category>hoist</category>
            <pubDate>Thu, 18 Jun 2015 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/06/ppl-men-060.jpg&#34; alt=&#34;ppl-men-060&#34; title=&#34;ppl-men-060&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you’ve been programming in any other environment than JavaScript for a while, you may be making assumptions about JavaScript Scope that just aren’t true.  One of those assumptions is how variables get evaluated when you run the JavaScript code and what variables are visible and at what point in the code they are visible.&lt;/p&gt;
&lt;p&gt;Just as a test to see how well you know your JavaScript, let’s create a few tests scenarios.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Quiz&#34;&gt;&lt;a href=&#34;#Quiz&#34; class=&#34;headerlink&#34; title=&#34;Quiz&#34;&gt;&lt;/a&gt;Quiz&lt;/h2&gt;&lt;h3 id=&#34;1-Given-the-following-code&#34;&gt;&lt;a href=&#34;#1-Given-the-following-code&#34; class=&#34;headerlink&#34; title=&#34;1) Given the following code:&#34;&gt;&lt;/a&gt;1) Given the following code:&lt;/h3&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;foo = &lt;span class=&#34;string&#34;&gt;&amp;quot;xyz&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    foo = &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(foo);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What is displayed in the console window when console.log(foo) is executed?&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;h3 id=&#34;2-Given-the-following-code&#34;&gt;&lt;a href=&#34;#2-Given-the-following-code&#34; class=&#34;headerlink&#34; title=&#34;2) Given the following code:&#34;&gt;&lt;/a&gt;2) Given the following code:&lt;/h3&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;final i: &amp;#x27;&lt;/span&gt; + i);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What is the value of i when &lt;code&gt;console.log(‘final i: ‘ + i)&lt;/code&gt; is executed?&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;h3 id=&#34;3-What-is-wrong-with-the-following-code&#34;&gt;&lt;a href=&#34;#3-What-is-wrong-with-the-following-code&#34; class=&#34;headerlink&#34; title=&#34;3) What is wrong with the following code?&#34;&gt;&lt;/a&gt;3) What is wrong with the following code?&lt;/h3&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; foo = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;foo was called&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;4-Why-would-changing-the-previous-code-to-this-next-block-of-code-fix-the-issue-with-the-previous-code&#34;&gt;&lt;a href=&#34;#4-Why-would-changing-the-previous-code-to-this-next-block-of-code-fix-the-issue-with-the-previous-code&#34; class=&#34;headerlink&#34; title=&#34;4) Why would changing the previous code to this next block of code fix the issue with the previous code?&#34;&gt;&lt;/a&gt;4) Why would changing the previous code to this next block of code fix the issue with the previous code?&lt;/h3&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;foo was called&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Answers&#34;&gt;&lt;a href=&#34;#Answers&#34; class=&#34;headerlink&#34; title=&#34;Answers&#34;&gt;&lt;/a&gt;Answers&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The value of foo when console.log(foo) is executed is “xyz”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The value of i when console.log(‘final i: ‘ + i) is executed is 10&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;foo is declared but undefined when we try to call it on the first line&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;because foo is both declared and defined when it is called on the first line&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Why&#34;&gt;&lt;a href=&#34;#Why&#34; class=&#34;headerlink&#34; title=&#34;Why?&#34;&gt;&lt;/a&gt;Why?&lt;/h2&gt;&lt;p&gt;How did you do?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;“Hoisting”&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;The first thing you need to understand about how JavaScript processes code is that it goes through the block of code you are working with and processes the variable declarations first.  That is anything in the global scope (window for browsers, global for server) or anything within a function block.  From the JavaScript compiler’s perspective, the code in example 1 looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;foo = &lt;span class=&#34;string&#34;&gt;&amp;quot;xyz&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    foo = &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(foo);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;So that the foo &amp;#x3D; “abc” line assigns the string “abc” to the variable foo in the bar function’s local scope.  Not impacting the variable foo in global scope so that the result at the end of the code sample is that the foo variable still has the value “xyz”.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Only functions and catch blocks create “block scope”&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;In most languages that I use, if I wanted to create a variable that only had effect within a for, if, or while block, I could create a variable within the braces, or inline like in this example, and the code in the outer block would be left untouched.  But in JavaScript, this would only work if you were using the LET keyword which only appears in ECMA6 and above.&lt;/p&gt;
&lt;p&gt;In JavaScript, it is perfectly legal to declare a variable multiple time.  The compiler will not complain.  So, when we run the code in example 2, the declaration within the for() is ignored and it just reuses the declaration at the beginning of the code snippet.&lt;/p&gt;
&lt;p&gt;If you really wanted to declare a function within its own scope, you could create the scope with a try&amp;#x2F;catch block, like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; i;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt;(i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i&amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;final i: &amp;#x27;&lt;/span&gt; + i);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Which would give you the behavior you were probably expecting.  The code above will print out ‘final i: 20’ like you were probably expecting above.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;“Hoisting” and function assignments&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Going back to our discussion about variable declarations being processed first, and then doing any assignments, it becomes obvious that we can’t call a function that we haven’t assigned to the variable yet.  I don’t think I need to discuss this any further than I already have.  This works like any other variable declaration as I’ve discussed above.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;“Hoisting” and function declarations&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Function declarations, on the other hand, behave differently than function assignments.  In the case of function declarations, the variable AND the function that is “assigned” to it get pulled to the top of our code.  So using function declarations over function assignments is preferred simply because it assures us that the function pointer is available whenever we need it.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, maybe you thought you knew JavaScript.  Maybe you did.  Maybe you discovered you didn’t know it as well as you thought. I would encourage you to really learn the language.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/node-js-tools-for-visual-studio/</guid>
            <title>Node.js Tools For Visual Studio</title>
            <link>http://davembush.github.com/node-js-tools-for-visual-studio/</link>
            <category>javascript</category>
            <category>express</category>
            <category>node</category>
            <pubDate>Thu, 02 Apr 2015 06:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/03/NodeJsInVisualStudioProjectList.png&#34; alt=&#34;NodeJsInVisualStudioProjectList&#34; title=&#34;NodeJsInVisualStudioProjectList&#34;&gt;&lt;/p&gt;
&lt;p&gt;Several weeks ago now, I started learning &lt;a href=&#34;//nodejs.org/&#34;&gt;Node.js&lt;/a&gt;.  Why?  Well, for a couple of reasons.  First, all the cool kids are using Node.js.  Second, I wanted to use &lt;a href=&#34;//gotwarlost.github.io/istanbul/&#34;&gt;Istanbul&lt;/a&gt; to get an idea of how well my javascript code is covered by test and that runs under Node.js.  Third, &lt;a href=&#34;//blogs.msdn.com/b/webdev/archive/2015/03/19/customize-external-web-tools-in-visual-studio-2015.aspx&#34;&gt;Node.js is going to show up in the next version of Visual Studio&lt;/a&gt;.  And finally, I just like to learn new stuff.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Node-JS&#34;&gt;&lt;a href=&#34;#Node-JS&#34; class=&#34;headerlink&#34; title=&#34;Node.JS&#34;&gt;&lt;/a&gt;Node.JS&lt;/h2&gt;&lt;p&gt;So, I started by installing node and just working in Visual Studio as though my node project was a web site.  It works, but it isn’t pretty.  But it did get me familiar with some basic concepts like using the node package manager (npm) to install what I needed to get Istanbul running.  For those of you who aren’t familiar with npm, it is basically NuGet for node.js.&lt;/p&gt;
&lt;h2 id=&#34;Istanbul-JavaScript-Code-Coverage&#34;&gt;&lt;a href=&#34;#Istanbul-JavaScript-Code-Coverage&#34; class=&#34;headerlink&#34; title=&#34;Istanbul JavaScript Code Coverage&#34;&gt;&lt;/a&gt;Istanbul JavaScript Code Coverage&lt;/h2&gt;&lt;p&gt;For those of you who are interested, I used the instructions &lt;a href=&#34;//ariya.ofilabs.com/2013/10/code-coverage-of-jasmine-tests-using-istanbul-and-karma.html&#34;&gt;here&lt;/a&gt; for getting Istanbul working locally.  They should probably be updated because the example there doesn’t have a good configuration example.  I filled in the rest of what I needed to know from the &lt;a href=&#34;//karma-runner.github.io/0.12/&#34;&gt;Karma site&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Node-for-Visual-Studio&#34;&gt;&lt;a href=&#34;#Node-for-Visual-Studio&#34; class=&#34;headerlink&#34; title=&#34;Node for Visual Studio&#34;&gt;&lt;/a&gt;Node for Visual Studio&lt;/h2&gt;&lt;p&gt;So then I had heard that work was being done on a plugin for Visual Studio 2013 that would allow me to work on Node projects from within Visual Studio.  I found out about this first from &lt;a href=&#34;//www.hanselman.com/blog/IntroducingNodejsToolsForVisualStudio.aspx&#34;&gt;Scott Hanselman’s blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I went  to the &lt;a href=&#34;//nodejstools.codeplex.com/&#34;&gt;plugin site&lt;/a&gt; and got the download and installed it.  This is all pretty straight forward.  Don’t forget, you’ll ALSO need to install node.  So, don’t forget that step.&lt;/p&gt;
&lt;p&gt;OK.  Now that you have the NTVS installed (that’s what they call the plugin) what do you have? Well, you have several new project templates that you can use.  That’s what.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/03/NodeJsInVisualStudioProjectList1.png&#34; alt=&#34;NodeJsInVisualStudioProjectList&#34; title=&#34;NodeJsInVisualStudioProjectList&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Interactive-JavaScript&#34;&gt;&lt;a href=&#34;#Interactive-JavaScript&#34; class=&#34;headerlink&#34; title=&#34;Interactive JavaScript&#34;&gt;&lt;/a&gt;Interactive JavaScript&lt;/h2&gt;&lt;p&gt;But that’s not all you get, you also get an interactive Node.js window that you can get to from the Tools menu (Tools –&amp;gt; Node.js Tools –&amp;gt; Node.js Interactive window) or by pressing the keyboard shortcut, Ctrl+K, N.  Inside this window you can execute JavaScript on the fly: &lt;img src=&#34;/uploads/2015/03/NodeJsInteractiveWindow.png&#34; alt=&#34;NodeJsInteractiveWindow&#34; title=&#34;NodeJsInteractiveWindow&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Node-Package-Manager-in-Visual-Studio&#34;&gt;&lt;a href=&#34;#Node-Package-Manager-in-Visual-Studio&#34; class=&#34;headerlink&#34; title=&#34;Node Package Manager in Visual Studio&#34;&gt;&lt;/a&gt;Node Package Manager in Visual Studio&lt;/h2&gt;&lt;p&gt;Or install other node packages:&lt;/p&gt;
&lt;p&gt;.npm install yourPackageNameHere&lt;/p&gt;
&lt;p&gt;Don’t forget the leading period.  That’s the indication to the window that it needs to do something different from executing javascript in the window.&lt;/p&gt;
&lt;p&gt;Even as I’m writing this, I’m seeing that there is a lot more here than I’m actually telling you now.&lt;/p&gt;
&lt;h2 id=&#34;Starting-a-New-Project&#34;&gt;&lt;a href=&#34;#Starting-a-New-Project&#34; class=&#34;headerlink&#34; title=&#34;Starting a New Project&#34;&gt;&lt;/a&gt;Starting a New Project&lt;/h2&gt;&lt;p&gt;Now, the best way of learning something is by creating some kind of product.  Even if it is for your own use.  So, the next thing I did was to try to create a project.  I have a specific project in mind that should use MongoDB for the database (I’ve been meaning to learn NoSQL for a while now) and since Express seems to come with NTVS, I guess I’ll use that for my web server.  Oh and Angular for the front end.&lt;/p&gt;
&lt;p&gt;Since I was creating a web site, I thought, I should create a new web project that uses node.  In fact, it shows up  in the list of web sites types that you can create.  However, I got an error when I did that, and I don’t see anything in the documentation that says I should be able to use those templates or that I need anything extra to use them.&lt;/p&gt;
&lt;p&gt;However, if you use the project options, you can create a web application.  I decided going with newer is better than older, so I’ve created a “Basic Node.js Express 4 Application”.&lt;/p&gt;
&lt;h2 id=&#34;The-Fun-Is-Just-Beginning&#34;&gt;&lt;a href=&#34;#The-Fun-Is-Just-Beginning&#34; class=&#34;headerlink&#34; title=&#34;The Fun Is Just Beginning&#34;&gt;&lt;/a&gt;The Fun Is Just Beginning&lt;/h2&gt;&lt;p&gt;And now, this is where the fun begins.  Where’s my HTML?  What’s all this “template” stuff?  And how do I install Angular?  Or do I do that manually since it isn’t a server side thing? So much to learn.  But, that’s for another post.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/is-javascript-broken/</guid>
            <title>Is JavaScript Broken?</title>
            <link>http://davembush.github.com/is-javascript-broken/</link>
            <category>javascript</category>
            <category>concatenation</category>
            <category>quirks</category>
            <pubDate>Thu, 15 Jan 2015 08:05:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/01/IsJavaScriptBroken.png&#34; alt=&#34;IsJavaScriptBroken&#34; title=&#34;IsJavaScriptBroken&#34;&gt;&lt;/p&gt;
&lt;p&gt;I read a post this week that was essentially a rant on the way JavaScript handles concatenation.  It states that JavaScript is in someway “broken” (without actually using that word) because JavaScript does not work the way this person expected it to.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Here-is-a-rebuttal&#34;&gt;&lt;a href=&#34;#Here-is-a-rebuttal&#34; class=&#34;headerlink&#34; title=&#34;Here is a rebuttal.&#34;&gt;&lt;/a&gt;Here is a rebuttal.&lt;/h2&gt;&lt;p&gt;JavaScript works the way JavaScript was designed to work, and the way many other languages work.  The fact that it does not have the Do_what_I_was_thinking() function is a separate issue (which so far as I know, no language has yet).&lt;/p&gt;
&lt;p&gt;The main statement I have to take issue with is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The + operator is known to most of us as a symbol for addition, so it does not make sense to use it in [the instance where we want to concatenate strings]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh?  Really? How about C++, C#, Java and the various flavors of VB?  Each of these languages have an overloaded + operator that performs concatenation.&lt;/p&gt;
&lt;p&gt;Then as you read through the article you discover that the REAL issue is the fact that you can’t concatenate numbers by either using the concat() method or by using the + because numbers are … well … numbers.&lt;/p&gt;
&lt;p&gt;But here again I have to point to the fact that JavaScript works similar to other languages that are not type-safe.&lt;/p&gt;
&lt;p&gt;For example VBScript, VB6 using variants and probably others have this same basic issue.  If you are going to use the plus operator for concatenation and for math, you have to have rules about when it will be used for each.  Since numbers are typically ADDED together and strings are typically CONCATENATED, it make sense the the default behavior would be for those behaviors to be primary in those instances.  In the case where you want to concatenate two numbers, the obvious choice would be to somehow force them to be strings instead of numbers.  And in all of the languages I know of where this is needed, putting an empty string in the chain of numbers you want to concatenate is how you achieve this behavior.&lt;/p&gt;
&lt;p&gt;What is humorous is that this person went  through a long series of commands to illustrate how painful it is to actually coerce numbers into being concatenated and then shows a “simple” method they’ve created to create a concat() method for numbers that essentially amounts to what anyone who knows JavaScript well would do inline:&lt;/p&gt;
&lt;p&gt;var newValue &amp;#x3D; “” + number + number&lt;/p&gt;
&lt;p&gt;So, no JavaScript isn’t broken any more than any other language.  It has a defined set of rules that it follows.  Saying that it is broken is like saying English is broken.  And frankly, I could make a much stronger case for English being broken than I could for any programming language being broken including JavaScript.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/responsive-web-design-conversion/</guid>
            <title>Responsive Web Design Conversion</title>
            <link>http://davembush.github.com/responsive-web-design-conversion/</link>
            <category>javascript</category>
            <category>css</category>
            <category>html</category>
            <category>responsive design</category>
            <pubDate>Thu, 25 Dec 2014 07:00:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Several weeks ago, I started the process of converting this blog to a responsive design.  At this point it is mostly done.  But it is done enough that I can tell you the process that I went through to get the site converted. I was surprised by how easy the process was.  But I guess I was lucky because the theme I started out with already was following a number of best practices. So, to start out with, if you want to move your site toward responsive web design, there are some prerequisites that you’ll need to pay attention to.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Responsive-Design-–-Prerequisites&#34;&gt;&lt;a href=&#34;#Responsive-Design-–-Prerequisites&#34; class=&#34;headerlink&#34; title=&#34;Responsive Design – Prerequisites&#34;&gt;&lt;/a&gt;Responsive Design – Prerequisites&lt;/h2&gt;&lt;p&gt;First, before you do anything else, you need to make sure your current theme is not using tables anywhere.  If you are, the first thing you will need to do is to convert your them from tables to using DIVs.  The CSS world has been telling you this for years.  And now you see why this is true. Frankly, if you are using tables instead of DIVs for your layout, you are probably better off just starting over. Second, you need to ensure that you don’t have any CSS embedded in your HTML, or even worse, style attributes in your elements that are going to get in the way of your design.  While it is true, you can override these with JavaScript, the less of this you have to do, the better.  So clean that up now. Third, you need to think about what you really NEED to show on the page and what can be  hidden.  Sidebars are a good candidate for hiding since they aren’t your main content.  On this site I have two side bars.  One on the left and one on the right.  I’ve decided that the right sidebar is more important, so I’ve hidden the left one for small screens and both for tiny screens.  You might decide to move them to the bottom instead.  But you might find that more difficult than hiding them.&lt;/p&gt;
&lt;h2 id=&#34;Responsive-Web-Design-–-HTML&#34;&gt;&lt;a href=&#34;#Responsive-Web-Design-–-HTML&#34; class=&#34;headerlink&#34; title=&#34;Responsive Web Design – HTML&#34;&gt;&lt;/a&gt;Responsive Web Design – HTML&lt;/h2&gt;&lt;p&gt;With the prerequisites taken care of, let’s look at a small HTML change you will need to make. You will need to add the following META tag into the HEAD area of your HTML:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;content&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;width=device-width, initial-scale=1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I’ll let you search for the technical explanation of what this actually does.  What I’ll tell you is why you need it. If you don’t add this then when you go to view your web site on the iPhone and other browsers that are looking for this tag, you’ll see the full site scaled down to fit on the phone instead of the adaptive rendering you were probably expecting. That is, you’ll have everything working on your desktop so that it works on various screen sizes as you expect, but when you try to render it on your phone, it will scale the full version of the site to fit within the screen.&lt;/p&gt;
&lt;h2 id=&#34;Responsive-Web-Design-–-CSS&#34;&gt;&lt;a href=&#34;#Responsive-Web-Design-–-CSS&#34; class=&#34;headerlink&#34; title=&#34;Responsive Web Design – CSS&#34;&gt;&lt;/a&gt;Responsive Web Design – CSS&lt;/h2&gt;&lt;p&gt;Most of your changes will be in the CSS.  This is where a lot of the magic happens.  The first change you are going to want to make to your original design is that you are going to want to make all of your width information percentage values instead of hard pixel values (or EMs, if that’s what you use.) Of course your outer DIV is going to need to be 100%.  But if you do that, and you view your site on a large monitor, your site is going to be really hard to read.   So, to fix that issue, add the max-width attribute to the css definition for that element.&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-class&#34;&gt;.container&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;attribute&#34;&gt;width&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;attribute&#34;&gt;max-width&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1200px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now we have to add rules to tell the browsers how to render the page at different resolutions.  To do that, we use media tags. You may have thought that media tags were just for styling the printed version of your web site, or for telling text to speech engines how to read your page.  But they are also useful for telling the browser what rules to use for the various screen resolutions. You can use media tags for screen in the same way that you use media tags for print.  Either by specifying in your CSS or by specifying  in your LINK statement in the HTML.  I choose to put them in my CSS because I wasn’t adding that much information and I compress my CSS anyhow. The basic syntax looks like:&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@media&lt;/span&gt; screen &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; (some rule here)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;It is the rule bit that gets confusing. The rule bit looks like:&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@media&lt;/span&gt; screen &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; (&lt;span class=&#34;attribute&#34;&gt;max-width&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;600px&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What this says is, only apply this CSS to screen sizes LESS THAN or equal to 600px.  That is, only apply the CSS to a screen who’s max width is 600px. If you are going to mess up anything, this is where it will be. there is also a rule for min-width, so you can say something like&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@media&lt;/span&gt; screen &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; (&lt;span class=&#34;attribute&#34;&gt;max-width&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;600px&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; (&lt;span class=&#34;attribute&#34;&gt;min-width&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;300px&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Which would only apply the CSS to a screen width between 300 and 600 pixels. Now, you might be inclined to use a rule like that, but what I’ve found is that most of my CSS is additive.  That is, the rules I applied to max-with of 900 pixels I also want applied to max-width of 600 pixels.  I just want additional rules applied to max-width of 600.  So, I tend to just stack them instead of making a separate rule set for each resolution. Other than removing the sidebars, you may also want to adjust font sizes and banner sizes based on the size of the screen.  That’s what I did here.  You’ll notice that the banner area shrinks as the screen gets smaller.&lt;/p&gt;
&lt;h2 id=&#34;Responsive-Web-Design-–-JavaScript&#34;&gt;&lt;a href=&#34;#Responsive-Web-Design-–-JavaScript&#34; class=&#34;headerlink&#34; title=&#34;Responsive Web Design – JavaScript&#34;&gt;&lt;/a&gt;Responsive Web Design – JavaScript&lt;/h2&gt;&lt;p&gt;OK, so now you have your screens scaling nicely, but you may notice one final issue.  All of those images you have on your site are all a fixed size.  Some of those you might be able to fix by using CSS.  But, in my case the images I had the most trouble with were the images that show up at the top of the post.  So, in my case, I wrote some JavaScript to scale them to fit the width of the container.  I still have to modify the code in some of my older posts to work better with the JavaScript I wrote.  But for the newer posts, this is all working well.  I’ve been thinking about making the scaling code work as the screen size changes, but that’s a lot of work for something most people aren’t going to use. If you do decide to change the screen size and you see the images bleeding over the width of the container, refresh your browser and the images will scale.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/javascript-boolean-confusion/</guid>
            <title>JavaScript Boolean Confusion</title>
            <link>http://davembush.github.com/javascript-boolean-confusion/</link>
            <category>javascript</category>
            <category>boolean</category>
            <pubDate>Thu, 07 Aug 2014 13:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;What could possibly be confusing about JavaScript Booleans you ask?&lt;/p&gt;
&lt;p&gt;Well, here’s several logical statements written in JavaScript.  Do you know what each does?&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; == &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; === &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!!&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; == &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; != &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; !== &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someVariable;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(someVariable)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(someVariable == &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!someVariable === &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!!someVariable === &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;if-“0”-x3D-x3D-true&#34;&gt;&lt;a href=&#34;#if-“0”-x3D-x3D-true&#34; class=&#34;headerlink&#34; title=&#34;if(“0” &amp;#x3D;&amp;#x3D; true)&#34;&gt;&lt;/a&gt;if(“0” &amp;#x3D;&amp;#x3D; true)&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;quot;0&amp;quot; == true&lt;/code&gt; resolves to false.  Why?  Because both sides of the equal are converted to numerics and then evaluated.  This gives us, &lt;code&gt;0 == 1&lt;/code&gt; which is in fact false.&lt;/p&gt;
&lt;p&gt;However,&lt;/p&gt;
&lt;h2 id=&#34;if-“0”&#34;&gt;&lt;a href=&#34;#if-“0”&#34; class=&#34;headerlink&#34; title=&#34;if(“0”) &#34;&gt;&lt;/a&gt;if(“0”) &lt;/h2&gt;&lt;p&gt;is true.  This is because there is no conversion needed.  Any string is truthy.&lt;/p&gt;
&lt;p&gt;OK.  So then, what would you expect&lt;/p&gt;
&lt;h2 id=&#34;if-“1”-x3D-x3D-x3D-true&#34;&gt;&lt;a href=&#34;#if-“1”-x3D-x3D-x3D-true&#34; class=&#34;headerlink&#34; title=&#34;if(“1” &amp;#x3D;&amp;#x3D;&amp;#x3D; true)&#34;&gt;&lt;/a&gt;if(“1” &amp;#x3D;&amp;#x3D;&amp;#x3D; true)&lt;/h2&gt;&lt;p&gt;to be?  If you said, “true” you would be wrong.  And just when you thought you were getting the hang of this.&lt;/p&gt;
&lt;p&gt;This puzzle illustrates the difference between the double equals (&amp;#x3D;&amp;#x3D;) and triple equals (&amp;#x3D;&amp;#x3D;&amp;#x3D;) evaluators in JavaScript.  You see, if you use double equals, JavaScript will always convert both sides to a common type and then do the evaluation.  However, triple equals says that both sides have to be the same type and the same value to be equal.  Since a String is not a Boolean type, “1” &amp;#x3D;&amp;#x3D;&amp;#x3D; true evaluates to false.&lt;/p&gt;
&lt;p&gt;Do you think you are getting the hang of this yet?  OK.  What does the next statement evaluate to?&lt;/p&gt;
&lt;h2 id=&#34;if-”0”-x3D-x3D-true&#34;&gt;&lt;a href=&#34;#if-”0”-x3D-x3D-true&#34; class=&#34;headerlink&#34; title=&#34;if(!!”0” &amp;#x3D;&amp;#x3D; true)&#34;&gt;&lt;/a&gt;if(!!”0” &amp;#x3D;&amp;#x3D; true)&lt;/h2&gt;&lt;p&gt;This evaluates to true.  If you thought it would be false, you probably applied the !! after the types were converted.  But the operator precedence on this is to apply the ! operators first.  So ! some valid string is false and ! false is true.  So true &amp;#x3D;&amp;#x3D; true is true.&lt;/p&gt;
&lt;h2 id=&#34;The-operator&#34;&gt;&lt;a href=&#34;#The-operator&#34; class=&#34;headerlink&#34; title=&#34;The ! operator&#34;&gt;&lt;/a&gt;The ! operator&lt;/h2&gt;&lt;p&gt;The next two examples I gave were to simply point out that !&amp;#x3D; is the opposite of double equal and !&amp;#x3D;&amp;#x3D; is the opposite of triple equal.  Beyond that, they work the same.&lt;/p&gt;
&lt;p&gt;So, if(“0” !&amp;#x3D; true) would evaluate to true and if(“0” !&amp;#x3D;&amp;#x3D; true) would also evaluate to true.&lt;/p&gt;
&lt;h2 id=&#34;if-someVariable&#34;&gt;&lt;a href=&#34;#if-someVariable&#34; class=&#34;headerlink&#34; title=&#34;if(someVariable)&#34;&gt;&lt;/a&gt;if(someVariable)&lt;/h2&gt;&lt;p&gt;The last set of examples illustrates what happens if a variable is undefined or null.&lt;/p&gt;
&lt;p&gt;Since we never gave someVariable a value, it is undefined and so if(someVariable) would evaluate to false.  Undefined and null variables evaluate to falsy.&lt;/p&gt;
&lt;p&gt;However, that does not mean that it is a boolean value.&lt;/p&gt;
&lt;p&gt;So, if(someVariable &amp;#x3D;&amp;#x3D; true) evaluates to false, if(someVariable &amp;#x3D;&amp;#x3D;&amp;#x3D; false) evaluates to false, if(!someVariable &amp;#x3D;&amp;#x3D;&amp;#x3D; true) evaluates to true and if(!!someVariable &amp;#x3D;&amp;#x3D;&amp;#x3D; true) evaluates to false.&lt;/p&gt;
&lt;h2 id=&#34;Implications&#34;&gt;&lt;a href=&#34;#Implications&#34; class=&#34;headerlink&#34; title=&#34;Implications&#34;&gt;&lt;/a&gt;Implications&lt;/h2&gt;&lt;p&gt;The main implication of all of this is that if you are going to compare two variables for equality, you should first convert them to a common type and then compare them using the triple equals operator.&lt;/p&gt;
&lt;p&gt;However, if you are just evaluating a variable for truthiness, using just the variable, as in if(someVariable) is clear enough.  You don’t gain much by using if(!!someVariable) or even if(!!someVariable &amp;#x3D;&amp;#x3D;&amp;#x3D; true) syntax.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/jquery-events/</guid>
            <title>jQuery - Events</title>
            <link>http://davembush.github.com/jquery-events/</link>
            <category>javascript</category>
            <category>events</category>
            <category>jQuery</category>
            <pubDate>Wed, 06 Nov 2013 15:45:24 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;As well as being able to change the class associated with an element or a set of elements on a screen, jQuery also allows you to fire events.  You might want to do this, for example, if you want to simulate the clicking of a button. Of course, if you are going to fire an event, you’ll probably need some sort of event listener setup to handle that. We will address firing events first since it has the least amount of code needed. All you need to do is select the element or elements using the selectors we’ve already discussed and then call the method trigger(‘eventname’). So, to click a button, your code might look something like this:&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$(&lt;span class=&#34;string&#34;&gt;&amp;quot;#main&amp;quot;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;trigger&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Since the click method is so common, jQuery has a shortcut method, click(), that does the same thing, so we can rewrite our code as:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$(&lt;span class=&#34;string&#34;&gt;&amp;quot;#main&amp;quot;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;click&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But if we click a button, we probably want some JavaScript to execute because of it.  This is where jQuery makes life much easier for the JavaScript programmer. If you are familiar with JavaScript you are probably most familiar with attaching code to your HTML elements by using the on____ attributes.  To attach a method to the click event of the anchor tag you might write something like:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;href&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;onclick&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;method();&amp;quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;text&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you were particularly clever, you might do some sort of event binding using code:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;anchorId&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;property&#34;&gt;onclick&lt;/span&gt; = functionName;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But even doing that we are left with the ugly potential of having already assigned a function to the element, in which case this code would overwrite it. In fact, if you’ve been coding JavaScript for a while, you are probably quite familiar with the problem of needing to add an event handler to the onload event of the document only to find out that doing so wiped out some critical JavaScript code that was already assigned to that event. You’ll be happy to know that assigning code to an event in jQuery is both simple and non-destructive.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$(&lt;span class=&#34;string&#34;&gt;&amp;#x27;#anchorId&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;span class=&#34;comment&#34;&gt;//code goes here &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This code would normally be placed inside the ready handler that you’ve seen in previous posts so that your code would ultimately look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $(&lt;span class=&#34;string&#34;&gt;&amp;#x27;#anchorId&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123; &lt;span class=&#34;comment&#34;&gt;//code goes here &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And since the click event is so common, we can replace &lt;code&gt;bind(&amp;#39;click&amp;#39;,function...)&lt;/code&gt; with &lt;code&gt;click(function()....)&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $(&lt;span class=&#34;string&#34;&gt;&amp;#x27;#anchorId&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;click&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123; &lt;span class=&#34;comment&#34;&gt;//code goes here &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And if someone decides to attach another method to the same click event, both methods will run.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/jquery-expand-collapse-using-head-tags/</guid>
            <title>jQuery Expand/Collapse Using Head Tags</title>
            <link>http://davembush.github.com/jquery-expand-collapse-using-head-tags/</link>
            <category>javascript</category>
            <category>dotnetnuke</category>
            <category>html</category>
            <category>jQuery</category>
            <category>collapse</category>
            <category>expand</category>
            <pubDate>Wed, 25 Sep 2013 12:05:40 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2009/10/animal010.jpg&#34; alt=&#34;animal-010&#34; title=&#34;animal-010&#34;&gt;&lt;/p&gt;
&lt;p&gt;I’ve spent a good chunk of the last two days working on an interesting project for one of my clients that I think the rest of the jQuery community could benefit from.&lt;/p&gt;
&lt;p&gt;The task started when my client came to me with an existing script that was being used in a DotNetNuke system to expand and collapse content under head tags that was produced by an article editing system similar to the Text&amp;#x2F;HTML module.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;The problem with the way the author had created the system is that the content author would have had to add DIV tags to the content and if any additional sections were added to the content the jQuery and CSS code would have to be modified.&lt;/p&gt;
&lt;p&gt;The question that was posed to me was, “Is there any way of protecting the code that is relevant to the jQuery so that the content authors can’t mess it up?”  My response was basically, No, but if the jQuery was written correctly, that shouldn’t be an issue.  You should be able to have the jQuery add the additional DIV tags for you so that the content authors can just concentrate on writing the article.&lt;/p&gt;
&lt;p&gt;Of course, he got all excited about that possibility along with the fact that he’d be able to re-use the code.&lt;/p&gt;
&lt;p&gt;One final note.  We decided to use H4, H5, and H6 tags so that if the user didn’t want the expand collapse functionality for a particular section they could use H1, H2, and H3 for that purpose.&lt;/p&gt;
&lt;p&gt;The first thing we needed to do was place a DIV tag around the content we want to have impacted by our code.  I’m using the class HEC to indicate this.&lt;/p&gt;
&lt;p&gt;In DotNetNuke, there are a bunch of DIV tags that are ultimately surrounding the first tag I want to impact and some other extraneous DIV tags at the bottom that got in the way of the presentation, so rather than creating a selector that looked for the content within the HEC class, I’m looking for the content that is within the parent of the H4 element that is within the HEC class.&lt;/p&gt;
&lt;p&gt;Since the page may have  multiple sections of HEC classes, I iterate through each parent that is found and start a search and replace to add additional DIV tags to the markup.  This allows me to place a DIV around the content that is between each H4 tag and another DIV around the group of H4 and DIV tags that go together.&lt;/p&gt;
&lt;p&gt;I also place open DIV tags at the top of the HTML and closing DIV tags at the end so that we end up with HTML that is as valid as what we started out with.&lt;/p&gt;
&lt;p&gt;For subsections, I grab the first sibling of each H4 tag (and ultimately H5 tag) and change its HTML as well, similar to how I changed the parent elements.&lt;/p&gt;
&lt;p&gt;You’ll notice by looking at the code below that the DIV tags are classed so that you can apply a stylesheet to them.&lt;/p&gt;
&lt;p&gt;The last bit of information is that I insert instructional information and an expand-all and collapse-all button&amp;#x2F;link prior to the first H4 tag.&lt;/p&gt;
&lt;p&gt;All of this work allows the content authors to write using a regular WYSIWYG HTML editor without having to worry about adding none visible markup to make it display correctly.&lt;/p&gt;
&lt;p&gt;Here’s a snippet of the source:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; strHeader = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;div class=&amp;#x27;showHideControls&amp;#x27;&amp;gt;&amp;lt;span class=&amp;#x27;showAll showHide&amp;#x27;&amp;gt;Expand All&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#x27;hideAll showHide&amp;#x27;&amp;gt;Collapse All&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&amp;quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;div class=&amp;#x27;instructions-arrow&amp;#x27;&amp;gt;Click arrow to view step details&amp;lt;/div&amp;gt;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; strHtml;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $(&lt;span class=&#34;string&#34;&gt;&amp;quot;.HEC h4&amp;quot;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;parent&lt;/span&gt;().&lt;span class=&#34;title function_&#34;&gt;each&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        strHtml = $(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;html&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        strHtml = strHtml.&lt;span class=&#34;title function_&#34;&gt;replace&lt;/span&gt;(&lt;span class=&#34;regexp&#34;&gt;/&amp;lt;\/h4&amp;gt;/gi&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;/h4&amp;gt;&amp;lt;div class=&amp;#x27;content&amp;#x27;&amp;gt;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        strHtml = strHtml.&lt;span class=&#34;title function_&#34;&gt;replace&lt;/span&gt;(&lt;span class=&#34;regexp&#34;&gt;/&amp;lt;h4/gi&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#x27;accordian&amp;#x27;&amp;gt;&amp;lt;h4&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        strHtml = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;quot;&lt;/span&gt; + strHtml + &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;html&lt;/span&gt;(strHtml);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $(&lt;span class=&#34;string&#34;&gt;&amp;quot;h4&amp;quot;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;().&lt;span class=&#34;title function_&#34;&gt;slideToggle&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;slow&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// to implement the sub sections, you would select the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// div that is next() to the header and apply similar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// search and replace logic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// start in collapsed mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; $(&lt;span class=&#34;string&#34;&gt;&amp;quot;.HEC .content&amp;quot;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;hide&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $(&lt;span class=&#34;string&#34;&gt;&amp;quot;.HEC .accordian:first&amp;quot;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;before&lt;/span&gt;(strHeader);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $(&lt;span class=&#34;string&#34;&gt;&amp;quot;.HEC .showAll&amp;quot;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $(&lt;span class=&#34;string&#34;&gt;&amp;quot;.HEC .content&amp;quot;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;show&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// other .show()s go here for the subsections&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $(&lt;span class=&#34;string&#34;&gt;&amp;quot;.HEC .hideAll&amp;quot;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $(&lt;span class=&#34;string&#34;&gt;&amp;quot;.HEC .content&amp;quot;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;hide&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// other hide()s go here for the subsections&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/asp-net-response-redirect-and-javascript/</guid>
            <title>ASP.NET Response.Redirect() and JavaScript</title>
            <link>http://davembush.github.com/asp-net-response-redirect-and-javascript/</link>
            <category>javascript</category>
            <category>asp.net</category>
            <category>302</category>
            <category>redirect</category>
            <category>response</category>
            <pubDate>Wed, 28 Jan 2009 05:10:10 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2009/01/toco-toucan.jpg&#34; alt=&#34;A toucan perched on a branch in Brazil.&#34;&gt; Yesterday we covered issues surrounding using ASP.NET’s Response.Redirect in server side code. We noted that not handing it correctly could prevent code from running on the server that we want to run. The other issue is emitting Javascript in the server side in association with Response.Redirect(). This also leads to unexpected problems if you aren’t thinking about what is actually happening with your code.  Take this code as an example:&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Page_Load&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; myscript = &lt;span class=&#34;string&#34;&gt;@&amp;quot;&amp;lt;script language=&amp;#x27;javascript&amp;#x27;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;alert(&amp;#x27;hello world&amp;#x27;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;/script&amp;gt;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ClientScript.RegisterClientScriptBlock&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;.GetType(), &lt;span class=&#34;string&#34;&gt;&amp;quot;s&amp;quot;&lt;/span&gt;, myscript);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Response.Redirect(&lt;span class=&#34;string&#34;&gt;&amp;quot;~/newpage.aspx&amp;quot;&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The question is, why does the javascript never display “hello world”? Actually, the javascript is typically a little more complicated than “hello world.” But the question is always, “Why didn’t my javascript execute? It works fine without the redirect.” Once again, we need to think more clearly about what we’ve actually written. What we’ve actually told the server to do is the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Render the javascript to display “hello world” in an alert box on the client.&lt;/li&gt;
&lt;li&gt;Set the header (not the header element, but the header that tells the browser whether the code executed successfully or not) to “302 redirect.”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When the browser finally gets the stream back from the server, it will actually see step 2 first because the header comes before the javascript code. The browser will look at that 302, ignore everything else on the page, and faithfully redirect to the page specified as part of the 302.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
