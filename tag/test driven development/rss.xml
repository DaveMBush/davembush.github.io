<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;test driven development&#34; tag</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Thu, 23 Jun 2016 06:30:00 -0400</pubDate>
        <lastBuildDate>Thu, 23 Jun 2016 06:30:00 -0400</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/exposing-secret-javascript-privates-to-unit-tests/</guid>
            <title>Exposing Secret JavaScript privates to Unit Tests</title>
            <link>http://davembush.github.com/exposing-secret-javascript-privates-to-unit-tests/</link>
            <category>unit test</category>
            <category>javascript</category>
            <category>test driven development</category>
            <pubDate>Thu, 23 Jun 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;The question comes up all the time, “How do I access JavaScript privates from my Unit Tests?”  And invariably, the purist chimes in with the answer, “you don’t”.&lt;/p&gt;
&lt;p&gt;But, isn’t the point of unit testing to allow us to test UNITs?  Why artificially limit our ability to test units if we don’t need to?  If we had the ability to create protected members, wouldn’t we tests those separately? So, what follows is how I surface my private JavaScript members so I can access them during tests without having to make them public during the run of my protection code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/06/image-2.png&#34; alt=&#34;Exposing Secret JavaScript privates to Unit Tests&#34; title=&#34;Exposing Secret JavaScript privates to Unit Tests&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Lean-on-JavaScript&#34;&gt;&lt;a href=&#34;#Lean-on-JavaScript&#34; class=&#34;headerlink&#34; title=&#34;Lean on JavaScript&#34;&gt;&lt;/a&gt;Lean on JavaScript&lt;/h2&gt;&lt;p&gt;My JavaScript unit testing framework of choice is Jasmine.  Not so much because it does all I would like it to do or because there isn’t something ‘better’ available but because it has become the defacto standard for unit testing JavaScript and nothing else I’ve seen is significantly better.  There is one part of this technique that is going to lean on the fact that I am using Jasmine, but I’m sure you can adapt it to your testing framework.&lt;/p&gt;
&lt;p&gt;But first, let’s review how you would create private JavaScript members in the first place.&lt;/p&gt;
&lt;h2 id=&#34;Creating-Private-Members&#34;&gt;&lt;a href=&#34;#Creating-Private-Members&#34; class=&#34;headerlink&#34; title=&#34;Creating Private Members&#34;&gt;&lt;/a&gt;Creating Private Members&lt;/h2&gt;&lt;p&gt;In standard ES5 code, a simple object might be defined using syntax that looks something like this.  Recognize there are multiple ways to create objects and things that look like classes in JavaScript.  What follows is just enough code to get the point across.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;MyClass&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;privateMember&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;publicMember&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        privateMember.&lt;span class=&#34;title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;publicMember&lt;/span&gt; = publicMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Note that our privateMember is used by publicMember but is not accessible from the outside.  I’m also using apply(this) to pass the context to the privateMember function.  This may not be necessary if you aren’t using this in the privateMember function and you could use privateMember.bind(this) to make this automatic.  That’s one of the interesting things about JavaScript.  There are always multiple ways to achieve the same goal.  None of them particularly better than the other but some more standard than the other.&lt;/p&gt;
&lt;p&gt;Notice that the only thing that actually makes our publicMember public is that I’ve attached the function pointer to this.&lt;/p&gt;
&lt;h2 id=&#34;Exposing-Private-for-Jasmine&#34;&gt;&lt;a href=&#34;#Exposing-Private-for-Jasmine&#34; class=&#34;headerlink&#34; title=&#34;Exposing Private for Jasmine&#34;&gt;&lt;/a&gt;Exposing Private for Jasmine&lt;/h2&gt;&lt;p&gt;The easiest way I know of to expose the private member variables for Jasmine is to conditionally assign the private members to this if jasmine is defined.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;MyClass&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;privateMember&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;publicMember&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        privateMember.&lt;span class=&#34;title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;publicMember&lt;/span&gt; = publicMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(jasmine)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;privateMember&lt;/span&gt; = privateMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;As long as you don’t use the jasmine global variable for something other than jasmine, this should work.&lt;/p&gt;
&lt;p&gt;And now you can test your private functions.&lt;/p&gt;
&lt;h2 id=&#34;What-about-Spys&#34;&gt;&lt;a href=&#34;#What-about-Spys&#34; class=&#34;headerlink&#34; title=&#34;What about Spys?&#34;&gt;&lt;/a&gt;What about Spys?&lt;/h2&gt;&lt;p&gt;If you are testing your private functions on their own, you’ll probably have a need to place spys on them when you test the other functions in your application that call them.  This is where things get just a bit interesting.&lt;/p&gt;
&lt;p&gt;If we leave things as they are, and you place a spy on the function that we exposed, your spy will never get called.  The reason for this is because of the way pointers work.&lt;/p&gt;
&lt;p&gt;In our example above, our publicMember() function is going to call our privateMember() function regardless of how we manipulate the this.privateMember pointer.  This is because, while the variables are pointing to the same function, they are still two different variables and, because of the way spys work internally, you’ll end up changing the this.privateMember variable without impacting the call to privateMember().&lt;/p&gt;
&lt;p&gt;We need to write a little extra code in our if(jasmine) block to make sure that after we’ve exposed privateMember(), the now public version of privateMember() gets call by publicMember() instead of the private version of privateMember().&lt;/p&gt;
&lt;p&gt;To do this we are going to need to play “towers of hanoi” with our variables.&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;MyClass&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;privateMember&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;publicMember&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        privateMember.&lt;span class=&#34;title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; oldPrivateMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;publicMember&lt;/span&gt; = publicMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(jasmine)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(oldPrivateMember)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            privateMember = oldPrivateMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            oldPrivateMember = privateMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;privateMember&lt;/span&gt; = privateMember;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        privateMember = (&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;privateMember&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The gist of what this new code does is that it captures the pointer to the privateMember() into oldPrivateMember.  Once we have that, we can make this.privateMember point to the original privateMember and then make our original privateMember point to a new method that calls this.privateMember, which is what our spy will call if we’ve set one up.&lt;/p&gt;
&lt;p&gt;The if(oldPrivateMember) stuff is just protection code to make sure we don’t do this more times than we need and end up calling this.privateMember up the call stack multiple times until we finally get to the privateMember function we ultimately want to call.  Depending on how you implement classes, you may or may not need this code.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/3-reasons-you-believe-100-code-coverage-is-impossible/</guid>
            <title>3 Reasons You Believe 100% Code Coverage Is Impossible</title>
            <link>http://davembush.github.com/3-reasons-you-believe-100-code-coverage-is-impossible/</link>
            <category>code coverage</category>
            <category>tdd</category>
            <category>test driven development</category>
            <pubDate>Thu, 26 May 2016 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;I’ve written about &lt;a href=&#34;/categories/TDD/&#34;&gt;Test Driven Development&lt;/a&gt; before.  I’ve even written about &lt;a href=&#34;/100-code-coverage/&#34;&gt;100% code coverage&lt;/a&gt; before.  And I haven’t written much about it recently because I’ve been focused on JavaScript.  But, I’ve been thinking about the 100% code coverage debate more and I have a few more thoughts on the subject.&lt;/p&gt;
&lt;p&gt;You see, the more I practice Test Driven Development, the more inclined I am to believe that there are only three reasons for arguing against 100% code coverage.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/05/image-2.png&#34; alt=&#34;100% Code Coverage&#34; title=&#34;100% Code Coverage&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;There-is-Something-Wrong-with-Your-Framework&#34;&gt;&lt;a href=&#34;#There-is-Something-Wrong-with-Your-Framework&#34; class=&#34;headerlink&#34; title=&#34;There is Something Wrong with Your Framework&#34;&gt;&lt;/a&gt;There is Something Wrong with Your Framework&lt;/h2&gt;&lt;p&gt;This will be the easiest one for most people to accept.  It isn’t so personal.&lt;/p&gt;
&lt;p&gt;You see, I’ve been learning &lt;a href=&#34;/tags/react-js/&#34;&gt;React JS&lt;/a&gt; and, as I’ve mentioned before, I decided to learn React AND learn to test it at the same time.  The thing that has impressed me from the outset is that ALL the code that I write is testable.  Where a lot of other frameworks are testable except for the View, React JS is ALL testable.&lt;/p&gt;
&lt;p&gt;And this got me to thinking, if all the code you write is testable, why wouldn’t you write tests?  In fact, as I wrote in “&lt;a href=&#34;/test-driven-learning-an-experiment/&#34;&gt;Test Driven Learning, an Experiment&lt;/a&gt;”, the process of writing the tests as I go has helped me understand React JS better than if I had not.&lt;/p&gt;
&lt;p&gt;But compare this to other frameworks where the View is basically HTML.  There is no really easy way to write tests for HTML.  At least, none that I know about.&lt;/p&gt;
&lt;p&gt;And then there are frameworks that seem to do all they can to make it hard to test.  When I was using Ext JS 4.x, I spent two years looking for a way to make my code testable without having to have the View rendered because the way they had implemented “MVC” made loading the view mandatory.  Talk about tight coupling!  Fortunately, now that they’ve implemented MVVM, if you do this correctly, it solves these problems.&lt;/p&gt;
&lt;p&gt;Another place where I found testing difficult was with Angular 1.  Most of Angular 1 is quite testable.  It was created with testing in mind.  But as I was trying to add a &lt;a href=&#34;//docs.angularjs.org/guide/decorators&#34;&gt;decorator&lt;/a&gt; to the &lt;a href=&#34;//ui-grid.info/&#34;&gt;UI Grid&lt;/a&gt; component, I found that testing the decorator was quite difficult.  This, I believe, said more about how the UI Grid component had been created than about how the Angular framework was put together.  But this just illustrates my point.  Sometimes, the reason you can’t test has more to do with the tools you are using than any other reason.&lt;/p&gt;
&lt;p&gt;Then again, the problem may be you.&lt;/p&gt;
&lt;h2 id=&#34;There-is-Something-Wrong-with-Your-Code&#34;&gt;&lt;a href=&#34;#There-is-Something-Wrong-with-Your-Code&#34; class=&#34;headerlink&#34; title=&#34;There is Something Wrong with Your Code&#34;&gt;&lt;/a&gt;There is Something Wrong with Your Code&lt;/h2&gt;&lt;p&gt;Now, arguably, in my last example, the reason I was not able to test the decorator for my Grid was because I was missing some fundamental concept related to testing decorators in general or how that related to the Grid.&lt;/p&gt;
&lt;p&gt;The reason I say this is because the one thing I’ve noticed the more I test is this.  The more I practice TDD, the easier TDD becomes.&lt;/p&gt;
&lt;p&gt;As I introduce testing into the organizations I work with and as I’ve grown in my own TDD skills, the one thing I’ve noticed is that when we start out learning TDD, it almost always starts out as DDT.  That is, Development Driven Testing.&lt;/p&gt;
&lt;p&gt;This is, of course, better than not testing at all, but if you wait until after you’ve written your code, or you develop your code without thinking about how you will test it, you will almost always end up in a situation where you will have to rearrange your code to make it testable.  Untestable code is probably the single biggest reason why code doesn’t get tested.&lt;/p&gt;
&lt;p&gt;If you were able to make yourself write your tests first, you would be much more likely to write test for everything you wrote.&lt;/p&gt;
&lt;p&gt;This doesn’t help you though if you’ve been tasked with writing tests for all pre-existing code.  Yours on someone else’s.  In this case, the best help I can give you is to recommend the book “&lt;a href=&#34;/qayn&#34;&gt;Working Effectively With Legacy Code&lt;/a&gt;” where Michael Feathers illustrates how to handle a lot of the common scenarios he has run into with various languages and how to untangle the mess so that it can be tested.  I will admit it is a tedious read, but there really is no better resource on the topic.&lt;/p&gt;
&lt;h2 id=&#34;Lack-of-Experience&#34;&gt;&lt;a href=&#34;#Lack-of-Experience&#34; class=&#34;headerlink&#34; title=&#34;Lack of Experience&#34;&gt;&lt;/a&gt;Lack of Experience&lt;/h2&gt;&lt;p&gt;The final reason you might want to think that 100% code coverage is impossible is that you simply don’t have enough experience.&lt;/p&gt;
&lt;p&gt;As I mentioned above, my own experience has been that the more I practice TDD, the easier it gets.  When I started out, I struggled to write test at all.  Then I got to a point where I would at least attempt to write tests after I’d written some code.  I’m now at the point where I’m writing tests as I code.  Soon, I hope to achieve the ultimate goal of writing test prior to writing the real code.  But even though I wasn’t writing the tests first, I can still say that the tests were driving my development because I knew at some point, I was going to have to test the code with unit tests.&lt;/p&gt;
&lt;p&gt;But as I’ve monitored the noise on the Internet about using TDD or not.  As people have discussed how much of their code should be tested.  I wonder, “Just how long has this person been trying to tests?”  Along with that, I wonder, “Do they even want to test?”  My dad used to say, “It is amazing how much I don’t understand when it doesn’t fit my plan.” Let’s face it, for most programmers, writing tests is not nearly as much fun as writing the application.  If this is true, then aren’t you already biased against writing tests for your application?  Wouldn’t you much rather write the app and toss it over the fence for someone else to tests?  I know I would.&lt;/p&gt;
&lt;p&gt;Now combine that with the fact that testing is hard, and you have a recipe for excusing yourself from testing as much of your code as possible.&lt;/p&gt;
&lt;p&gt;But, if you stick with it.  If you make writing bug free code a personal challenge, you will find that the rewards are worth it.&lt;/p&gt;
&lt;p&gt;What would it be like to be THE developer who was always working on new features because no one could find bugs in the features you programmed in the past?  What would that do for your career?&lt;/p&gt;
&lt;h2 id=&#34;The-100-Code-Coverage-Payoff&#34;&gt;&lt;a href=&#34;#The-100-Code-Coverage-Payoff&#34; class=&#34;headerlink&#34; title=&#34;The 100% Code Coverage Payoff&#34;&gt;&lt;/a&gt;The 100% Code Coverage Payoff&lt;/h2&gt;&lt;p&gt;I want to conclude with another story that illustrates how writing tests paid off.&lt;/p&gt;
&lt;p&gt;I’ve been working on a resource scheduling component for the last several weeks.  The bulk of the logic is that if two resources are scheduled for the same time, I need to be able to display that there is a conflict.  It sounds pretty straight forward until you look at all the various ways items can overlap.  I’ve isolated the logic for this into a class that is quite testable and I had created a test suite with about 400 tests when I was told that along with that requirement, there were a particular set of conditions where what looked like a conflict wasn’t really a conflict.  I needed to show that there was an overlap, but I need to display it in such a way as to indicate that it isn’t a conflict.&lt;/p&gt;
&lt;p&gt;As I sat down to add in the new logic, I realized that the path I had been going down wasn’t going to work well given this new scenario.  What I really needed to do is to do some major refactoring.  In fact, you might even say I had to rewrite most of the code I had in place.  Now, in the past, I would have been afraid to tear up all that I had done and start over because it would have meant I would have to retest all that I had already worked on … manually!  But, since I already had tests in place, I was able to 1) commit what I had done so far to version control so I could get it back if I needed and 2) rip up what I had done, rewrite and refactor so that it would work well with the new requirement and 3) retest with the tests I ALREADY had in place.  I’ve added another 100 tests for the new scenarios and I’m pretty confident that the code I’ve written does what it should and doesn’t do what it shouldn’t.&lt;/p&gt;
&lt;p&gt;And that whole refactoring exercise took less than 7 hours.&lt;/p&gt;
&lt;p&gt;Oh.  And I have 100% code coverage!&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/dependency-injection-frameworks-are-not-dependency-injection/</guid>
            <title>Dependency Injection Frameworks Are NOT Dependency Injection</title>
            <link>http://davembush.github.com/dependency-injection-frameworks-are-not-dependency-injection/</link>
            <category>tdd</category>
            <category>test driven development</category>
            <category>testing</category>
            <category>dependency injection</category>
            <pubDate>Thu, 12 Mar 2015 07:00:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/02/land-0148.jpg&#34; alt=&#34;land-0148&#34; title=&#34;land-0148&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you start your journey down the road of Unit Testing you will discover that part of what makes code testable is this concept of &lt;a href=&#34;//en.wikipedia.org/wiki/Dependency_injection&#34; title=&#34;Dependency injection&#34;&gt;Dependency Injection&lt;/a&gt;.  As you explore further, you will see people mentioning various Dependency Injection frameworks.&lt;/p&gt;
&lt;p&gt;You may naturally assume that to implement Dependency Injection, you will need to select an use a Dependency Injection framework.&lt;/p&gt;
&lt;p&gt;But, Dependency Injection has nothing to do with using a Dependency Injection framework.  The frameworks are there because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; much of our existing code is code that has too many dependencies and the framework helps us break those dependencies without having to refactor too much of our code and&lt;/li&gt;
&lt;li&gt;to give us a way to easily swap out one object for another when our code is structured in such a way as to not have dependencies at all.&lt;/li&gt;
&lt;/ol&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;So-what-then-is-Dependency-Injection&#34;&gt;&lt;a href=&#34;#So-what-then-is-Dependency-Injection&#34; class=&#34;headerlink&#34; title=&#34;So, what then is Dependency Injection?&#34;&gt;&lt;/a&gt;So, what then is Dependency Injection?&lt;/h2&gt;&lt;p&gt;I once heard this maxim that explains it best,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Classes should either create stuff, or do stuff, but no one class should do both.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Much of our code looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ReceiveSAMLResponse&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; SAMLResponse samlResponse,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; String relayState&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Receive the [SAML](//en.wikipedia.org/wiki/Security_Assertion_Markup_Language &amp;quot;Security Assertion Markup Language&amp;quot;) response over the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//specified binding.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlElement samlResponseXml;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ServiceProvider.ReceiveSAMLResponseByHTTPPost(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        HttpContext.Current.Request,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; samlResponseXml, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; relayState);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SAMLResponse resp = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SAMLResponse(samlResponseXml);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlElement samlAssertionElement =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        resp.GetSignedAssertions()[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Verify the response&amp;#x27;s signature.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlDocument doc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; XmlDocument();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//metadata file path (holds the description key).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    doc.Load(HttpContext.Current.Server.MapPath(&lt;span class=&#34;string&#34;&gt;&amp;quot;~/SAML.xml&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    XmlElement root = doc.DocumentElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!SAMLAssertionSignature.Verify(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        samlAssertionElement, ReadMetadata(root)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        samlResponse = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        relayState = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Deserialize the XML.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    samlResponse = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SAMLResponse(samlResponseXml);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Yes, this is real code from a system I worked on.  The original code was written three or four years ago and this specific code is code I was given by another company.  I just used copy and paste inheritance to get it working in our code.&lt;/p&gt;
&lt;p&gt;That’s not to say I haven’t written code that has just as many problems.&lt;/p&gt;
&lt;p&gt;There are several things that are wrong with this code, but for now all I want to focus on is the Dependency Injection issue.&lt;/p&gt;
&lt;p&gt;All this code is trying to do is to deserialize the encrypted samlResponse object that was posted to the login form.  At least this code isn’t in the login form!  It has that much going for it.&lt;/p&gt;
&lt;h2 id=&#34;But-here-are-places-where-it-is-dependent-on-too-much&#34;&gt;&lt;a href=&#34;#But-here-are-places-where-it-is-dependent-on-too-much&#34; class=&#34;headerlink&#34; title=&#34;But here are places where it is dependent on too much:&#34;&gt;&lt;/a&gt;But here are places where it is dependent on too much:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ServiceProvider is a static class and called directly.&lt;/li&gt;
&lt;li&gt;ReceiveSAMLResponseByHTTPPost is dependent on the Request object that we retrieve from HttpContext.&lt;/li&gt;
&lt;li&gt;I create a new SAMLResponse object right before I call GetSignedAssertions()&lt;/li&gt;
&lt;li&gt;I create a new XmlDocument object so I can load the SAML.xml file&lt;/li&gt;
&lt;li&gt;SAMLAssertionSignature is static and called directly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In fact, this method is one huge dependency mess.  And I’m very aware of the mess that it is in because the company we wrote this code for just recently switched providers.  As we tried to get this working, I had no way of testing this code in isolation without adding code directly into this method.  We got it working, but it didn’t have to be that hard.&lt;/p&gt;
&lt;h2 id=&#34;So-here’s-what-I’d-do-to-this-code&#34;&gt;&lt;a href=&#34;#So-here’s-what-I’d-do-to-this-code&#34; class=&#34;headerlink&#34; title=&#34;So, here’s what I’d do to this code.&#34;&gt;&lt;/a&gt;So, here’s what I’d do to this code.&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Since ServiceProvider and SAMLAssertionSignature are calls to a third party API, I would wrap them in a none static class that I can instantiate.&lt;/li&gt;
&lt;li&gt;I would have the class that ultimately calls this method either pass in the dependent objects to the constructor, pass them in to the method that calls this, or set properties in the class.  This is what it means to inject dependencies.&lt;/li&gt;
&lt;li&gt;I would look for some way to avoid creating a new SAMLResponse object.  I’m not looking at the API documentation, but it would be great if I could new up the object and call a method, or set a property to give it the samlResponseXml variable.  If I had to, I’d probably wrap SAMLResponse in another class so that I could gain this functionality.&lt;/li&gt;
&lt;li&gt;Finally, I would make each of the dependent object based on an interface so that I could swap them out.  In the case of some of these classes, I may need to wrap them in another class that I have control over so that I can implement an interface.  For example, as things stand, I would not be able to create a fake request object because Request is a system class that does not implement an interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Advantages&#34;&gt;&lt;a href=&#34;#Advantages&#34; class=&#34;headerlink&#34; title=&#34;Advantages&#34;&gt;&lt;/a&gt;Advantages&lt;/h2&gt;&lt;p&gt;After making all of these changes, I would be able to create a test harness for this code, create fake versions of the objects, and verify that this method does what we intend for it do.&lt;/p&gt;
&lt;p&gt;Where this would have been particularly helpful is over this last week when we were trying to get this all working with the new provider.  In that case, I could have faked out the request object with what they were sending us and run it through a debugger to figure out what wasn’t quite right.&lt;/p&gt;
&lt;h2 id=&#34;No-Dependency-Injection-Framework&#34;&gt;&lt;a href=&#34;#No-Dependency-Injection-Framework&#34; class=&#34;headerlink&#34; title=&#34;No Dependency Injection Framework&#34;&gt;&lt;/a&gt;No Dependency Injection Framework&lt;/h2&gt;&lt;p&gt;Finally, you’ll notice that no where in this code did I have to use a Dependency Injection framework to get this all working.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/why-johnny-can-t-do-test-driven-development/</guid>
            <title>Why Johnny Can&#39;t do Test Driven Development</title>
            <link>http://davembush.github.com/why-johnny-can-t-do-test-driven-development/</link>
            <category>tdd</category>
            <category>test driven development</category>
            <category>testing</category>
            <category>bdd</category>
            <pubDate>Thu, 05 Mar 2015 07:00:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/02/ppl-kid-05.jpg&#34; alt=&#34;ppl-kid-05&#34; title=&#34;ppl-kid-05&#34;&gt;&lt;/p&gt;
&lt;p&gt;Last week we looked at a few excuses developers give for not testing their code as they develop it (&lt;a href=&#34;/excuses-for-not-testing/&#34;&gt;Excuses For Not Testing&lt;/a&gt;).  We finished that by mentioning that most of the code you write simply isn’t testable.  You can’t practice Test Driven Development on something that isn’t testable in the first place. And there, folks, is why Johnny can’t test.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;But-it’s-not-Johnny’s-fault&#34;&gt;&lt;a href=&#34;#But-it’s-not-Johnny’s-fault&#34; class=&#34;headerlink&#34; title=&#34;But, it’s not Johnny’s fault.&#34;&gt;&lt;/a&gt;But, it’s not Johnny’s fault.&lt;/h2&gt;&lt;p&gt;Think about what makes code testable.  At it’s core, testable code is loosely coupled.  But what do we mean by “loosely coupled”? Well, let’s start with the large picture.  Assuming you have a multi-layered architecture.  That is, you have your code broken out into View, Business Rules, and Data Access.  Raise your hand if your business rules access your view directly.  Would you be able to test your business rules without your view? At a finer level of detail.  How much of your code creates the objects it needs within the same class, or worse, the same method, that will need it?  Without using a Dependency Injection framework, could you swap out any objects your class uses?  Have you even heard the rule, “Classes should either create things or do things, but never both within the same class?”  If you did that, how much more testable would your code be? If you were to write a test for a method, how much setup work would you have to do?  If it is more than a few lines, your method is probably doing too much, either directly or indirectly.  You’ll need to find a way to make it do less.&lt;/p&gt;
&lt;p&gt;Maybe in future post, I’ll address some of these issues in code.  But for now, I just want to address the problem.&lt;/p&gt;
&lt;p&gt;Again, it isn’t Johnny’s fault that he doesn’t know this stuff.  Think about the code samples we tend to look at.&lt;/p&gt;
&lt;h2 id=&#34;When-is-the-last-time-you-saw-sample-code-that-was-testable&#34;&gt;&lt;a href=&#34;#When-is-the-last-time-you-saw-sample-code-that-was-testable&#34; class=&#34;headerlink&#34; title=&#34;When is the last time you saw sample code that was testable?&#34;&gt;&lt;/a&gt;When is the last time you saw sample code that was testable?&lt;/h2&gt;&lt;p&gt;Short rant here, but I’ve been working with EXTjs (version 4.x) for the last year and a half.  Sencha will tell you that this uses a MVC architecture.  But what they mean by “Controller” really functions more like a “ViewController.”  That is, the controller is tightly bound to the view that it handles events for.  The way they have things setup, you access View elements by getters that are automatically generated for you in the view.&lt;/p&gt;
&lt;p&gt;The problem with this is that you can’t really test the controller logic without bringing along the view.&lt;/p&gt;
&lt;p&gt;Sencha isn’t the only company who does this.  Most of the sample code for WebForms did the same kind of thing.&lt;/p&gt;
&lt;p&gt;Now, the reason this is an issue is that sample code is how most of the newer programmers are learning how to program.&lt;/p&gt;
&lt;p&gt;I heard recently that statistically, because of the growth of the industry, half of the programmers available have 5 years or less of experience.  I don’t know about you, but the first 5 years of my programming career, I was still figuring out how to program.  I wasn’t thinking about architecture issues and I certainly wasn’t thinking about formal testing.  From what I’ve seen of the new recruits, I don’t think they are either.  Shoot.  Some of the ones I’ve interacted with couldn’t code themselves out of a paper bag without help.&lt;/p&gt;
&lt;h2 id=&#34;And-so-what’s-the-conclusion-to-all-of-this&#34;&gt;&lt;a href=&#34;#And-so-what’s-the-conclusion-to-all-of-this&#34; class=&#34;headerlink&#34; title=&#34;And so, what’s the conclusion to all of this?&#34;&gt;&lt;/a&gt;And so, what’s the conclusion to all of this?&lt;/h2&gt;&lt;p&gt;I don’t know.  Maybe the first step is to admit that we have an issue here and that the issue is so much a management or time issue as it is an education and laziness issue.  That the code we generate shouldn’t assume that people will take the code and adapt it into testable code, but that we should write testable code as our sample code.  Maybe colleges should teach basic software architecture and TDD as part of the curriculum.  Maybe those of us who know better should just start testing and figure this all out well enough to explain it to others.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/excuses-for-not-testing/</guid>
            <title>Excuses For Not Testing</title>
            <link>http://davembush.github.com/excuses-for-not-testing/</link>
            <category>tdd</category>
            <category>test driven development</category>
            <category>testing</category>
            <category>bdd</category>
            <pubDate>Thu, 26 Feb 2015 07:00:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2015/02/ppl-kid-044.jpg&#34; alt=&#34;ppl-kid-044&#34; title=&#34;ppl-kid-044&#34;&gt;&lt;/p&gt;
&lt;p&gt;As I started my own journey into unit testing, I slowly began to realize that it was really easy to come up with reasons to NOT test my code as I was writing it, even once I understood what that was supposed to look like. The reason I think most programmers don’t unit test code, once they understand what it is they are supposed to be doing is that they don’t feel like they have permission. To this I also answer, “How much permission do you need?”&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Do-you-really-need-permission&#34;&gt;&lt;a href=&#34;#Do-you-really-need-permission&#34; class=&#34;headerlink&#34; title=&#34;Do you really need permission?&#34;&gt;&lt;/a&gt;Do you really need permission?&lt;/h2&gt;&lt;p&gt;Do you ask for permission to compile and link the code? Do you ask for permission to write every line of code to make the system do what it should do? Do you ask for permission to run your code periodically to make sure it does what you had in mind when you wrote the code? Do you periodically add code that makes you feel good but is not directly related to the task at hand? (Admit it, I don’t think I know of any programmer who doesn’t.) Then why do we feel like we need permission to write unit test for our code?&lt;/p&gt;
&lt;h2 id=&#34;Are-you-convinced-that-you-need-test&#34;&gt;&lt;a href=&#34;#Are-you-convinced-that-you-need-test&#34; class=&#34;headerlink&#34; title=&#34;Are you convinced that you need test?&#34;&gt;&lt;/a&gt;Are you convinced that you need test?&lt;/h2&gt;&lt;p&gt;We don’t write test code because we aren’t convinced it is necessary to do the job we’ve been given. We complain that our managers don’t want us to write unit test. But the problem is that you asked for permission in the first place. And, by asking for permission, you’ve basically told your manager that unit testing is optional. Your manager has said “no” because he thinks YOU think it is optional.&lt;/p&gt;
&lt;h2 id=&#34;It’s-not-your-manager’s-job&#34;&gt;&lt;a href=&#34;#It’s-not-your-manager’s-job&#34; class=&#34;headerlink&#34; title=&#34;It’s not your manager’s job&#34;&gt;&lt;/a&gt;It’s not your manager’s job&lt;/h2&gt;&lt;p&gt;It isn’t his job to understand that not testing will produce technical debt. He’s not even interested in understanding what technical debt is. All he cares about is this. When will this project be done?  When you say it is done, will it work as expected or will it have a lot of bugs that need to be fixed yet? Most of the managers I’ve worked for in the past will accept whatever number I give them once they understand that when I deliver the software to them, it is going to work.  In fact, I’ve even gotten asked to do jobs BECAUSE my code tends to work more often than anyone else they know who could do the job.&lt;/p&gt;
&lt;p&gt;Now, I will admit, that in some cases there are places where you’ve been explicitly told to not create unit test. But even here I will assert it is because someone asked management the question.&lt;/p&gt;
&lt;h2 id=&#34;Why&#34;&gt;&lt;a href=&#34;#Why&#34; class=&#34;headerlink&#34; title=&#34;Why?&#34;&gt;&lt;/a&gt;Why?&lt;/h2&gt;&lt;p&gt;And so, we need to evaluate why it is we think creating unit test are optional. Probably because what we’ve been doing for so long seems to be working and, when we try to incorporate unit test, the process seems slower.&lt;/p&gt;
&lt;p&gt;And it is.&lt;/p&gt;
&lt;p&gt;Initially, writing unit test is slower just like writing using a new language or a new framework or anything else new is slower than what we know.&lt;/p&gt;
&lt;p&gt;But the ultimate efficiency that writing unit test as we code provides has been proven to more than offset the learning curve involved.&lt;/p&gt;
&lt;p&gt;There is one other valid reason for not testing and that is, we simply don’t know how.  This is almost as big of a reason as not believing it is worth while.  But, I think if we thought testing was really worth while, we’d start testing and figure it out as we went along.&lt;/p&gt;
&lt;p&gt;If you think about your career, I bet there are a lot of things you know now that you didn’t know when you started out.  The fact of the matter is, most of us learn on the job.  We start out with basic skills, but it is the day to day implementations that improve those skills.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;Don’t-let-the-good-enough-be-the-enemy-of-the-perfect&#34;&gt;&lt;a href=&#34;#Don’t-let-the-good-enough-be-the-enemy-of-the-perfect&#34; class=&#34;headerlink&#34; title=&#34;Don’t let the good enough be the enemy of the perfect.&#34;&gt;&lt;/a&gt;Don’t let the good enough be the enemy of the perfect.&lt;/h5&gt;&lt;/blockquote&gt;
&lt;p&gt;Don’t let the good enough be the enemy of the perfect.  Your first set of test will be garbage.  As you stick with it, you’ll wonder what you were thinking when you wrote your first test.  But this should not deter you.  This is what happened when you first started coding.  Maybe it is still happening.  No worries.  It is the practice that will make you better able to write tests and better able to write code that is testable.&lt;/p&gt;
&lt;p&gt;And there is another reason we don’t test.  Most of the code you are currently writing simply isn’t testable.  But, that’s the subject for another post.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/specflow-strategy/</guid>
            <title>SpecFlow Strategy</title>
            <link>http://davembush.github.com/specflow-strategy/</link>
            <category>tdd</category>
            <category>programming</category>
            <category>test driven development</category>
            <category>specflow</category>
            <pubDate>Thu, 01 Jan 2015 07:00:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;A while ago I wrote an article &lt;a href=&#34;/what-is-specflow/&#34;&gt;explaining what SpecFlow is, and why you might want to use it&lt;/a&gt;.  I’ve been using it for several months now and I’ve recognized several patterns that have emerged in my usage that I wish I had known when I started, so I thought I’d share them with you today.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Small-Features&#34;&gt;&lt;a href=&#34;#Small-Features&#34; class=&#34;headerlink&#34; title=&#34;Small Features&#34;&gt;&lt;/a&gt;Small Features&lt;/h2&gt;&lt;p&gt;If you are used to BDD or even unit testing, this will be obvious.  But if you are new to all of this, the temptation is going to be to put all of your test in one feature.  While this works in the strictest sense of the word, and you are at least getting test in place, you will find that finding a specific test later on is going to be rather awkward.&lt;/p&gt;
&lt;p&gt;A feature file should really only have a few scenarios that are testing a particular feature in the system.  This is why, at the top of your feature file, you are stating what exactly the feature is:&lt;/p&gt;
&lt;p&gt;As an administrator&lt;br&gt;I need to be able to delete existing users&lt;br&gt;So they cannot access the system any more&lt;/p&gt;
&lt;p&gt;Which we would probably put in the “DeleteUser.feature” file. Now that we’ve specified the feature, we need one or more scenarios for this. Each scenario is going to test the various ways you might be able to delete a user.  Maybe you can check boxes and delete them all at once or you can click one button per user and delete them one at a time.  Each of those is a scenario.  So your scenarios might look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Scenario: Delete one user at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Given I have 10 users in the system&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I have logged in as an administrator&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I have navigated to the user admin page&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    When I click the first delete user button&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Then I only have 9 users in the system&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I remain on the user admin page&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Scenario: Delete one users at a time with checkbox&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Given I have 10 users in the system&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I have logged in as an administrator&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I have navigated to the user admin page&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    When I check the checkbox of the first user&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I click the delete checked users button&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Then I only have 9 users in the system&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    And I remain on the user admin page&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Scenario: multiple users at a time using the checkbox&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    etc ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What about sad path test?  You’ll need to determine if those are another feature or if they are somehow part of the feature you are working on.  For this test, I can’t think of a sad path test for deleting users that is generally applicable.  Most of the time, if you have something that should occur as part of deleting a user, you should be doing that as part of the delete process.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-Repeat-Yourself&#34;&gt;&lt;a href=&#34;#Don’t-Repeat-Yourself&#34; class=&#34;headerlink&#34; title=&#34;Don’t Repeat Yourself&#34;&gt;&lt;/a&gt;Don’t Repeat Yourself&lt;/h2&gt;&lt;p&gt;The next place you are likely to make a mistake as you learn how to use SpecFlow is that you’ll start out thinking of the feature file, the steps implementation for the features and any setup or teardown of the scenarios as all one unit.  As a result of this, you’ll tend to implement the steps and the setup and teardown (what SpecFlow implements as Before and After) all in one file.&lt;/p&gt;
&lt;p&gt;The problem with this is that you’ll end up with a lot of duplicate code in your tests.&lt;/p&gt;
&lt;p&gt;Now, let’s say each of your features have similar setup code you need to implement.  In the case of our user administration example that we started out with, you’ll have code you need to implement for adding a user, deleting a user, adding roles to a user, searching for a user, and probably more.&lt;/p&gt;
&lt;p&gt;For each of those, your Before code is all going to look the same.  So, what I would recommend that you do is create a separate file with your Before and After code in it, nothing more.  You will associate this file with your feature files by associating a category with it and using the category in your feature files.  Now for each feature, the same Before and After code will run.&lt;/p&gt;
&lt;p&gt;The other issue you are going to have is that you are going to have a lot of the same steps between the feature files.  However, my experience has been that there will be a lot more common features between the code I write for a particular screen than there will be for the Before and After code I write.  For example, I might right Before code for various roles&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;As a regular user&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;When I visit the user administration screen&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;I should not be able to view any user other than myself.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;That will require different setup code from “As an administrator” but the steps to implement the scenarios will probably be very similar.&lt;/p&gt;
&lt;p&gt;Therefore, you should have a step file that holds all the steps for a screen full of logic in a file separate from your Before and After logic.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/nunit-visual-studio/</guid>
            <title>NUnit &amp; Visual Studio</title>
            <link>http://davembush.github.com/nunit-visual-studio/</link>
            <category>test driven development</category>
            <category>visual studio</category>
            <category>nunit</category>
            <pubDate>Thu, 04 Dec 2014 07:00:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Many people starting out with Unit testing get stuck when it comes to using their tools with the Visual Studio environment.  If it isn’t built in, how do we make it work with Visual Studio?  In this article I want to explore the basics of creating a unit test for NUnit and getting it running from Visual Studio.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Basic-Structure&#34;&gt;&lt;a href=&#34;#Basic-Structure&#34; class=&#34;headerlink&#34; title=&#34;Basic Structure&#34;&gt;&lt;/a&gt;Basic Structure&lt;/h2&gt;&lt;p&gt;To create a unit test, the first thing you will need to do is to create an assembly with a class file to hold the code.&lt;/p&gt;
&lt;p&gt;The type of assembly you will need to create for your test to be able to run is an assembly of type “Class Library.” I’m going to assume that you don’t need the details on how to create that type of project using whatever version of Visual Studio you happen to be using.&lt;/p&gt;
&lt;p&gt;Within your new Class Library project, you should find a file named Class1.cs. For the purposes of getting started, you can just leave that file. We’ll talk about how to name your class and test later on.&lt;/p&gt;
&lt;p&gt;For now, all we want to concentrate on is the basics of what is involved in getting a basic test going and what the components of a test class are that you will repeat over and over again as you create unit test for your applications.&lt;/p&gt;
&lt;p&gt;Before we add our first line of code, though, you will want to add references to NUnit in your code. The easiest way to do that is by using NuGet. Since I use Visual Studio 2013, all of the references for how to do things will be using Visual Studio (Premium) 2013. So, if you are using that version, you can just follow along. If not, you may need to do some translating.&lt;/p&gt;
&lt;p&gt;From the Visual Studio menu, select “Tools” &amp;gt; “NuGet Package Manager” &amp;gt; “Manage NuGet Packages for Solution…”. A window will pop up. Search for NUnit and install the package named “NUnit”. There are other packages available that we will discus later on.&lt;/p&gt;
&lt;p&gt;Alternatively, you could download NUnit directly from the NUnit site (&lt;a href=&#34;//nunit.org&#34;&gt;http://nunit.org&lt;/a&gt;) and add a reference directly to nunit.framework.dll.&lt;/p&gt;
&lt;h2 id=&#34;Code&#34;&gt;&lt;a href=&#34;#Code&#34; class=&#34;headerlink&#34; title=&#34;Code&#34;&gt;&lt;/a&gt;Code&lt;/h2&gt;&lt;p&gt;Now that you have the DLLs installed and referenced in your project, you’ll need to create a test class. For our purposes, we are going to stick with Class1.cs.&lt;/p&gt;
&lt;p&gt;There are several things that make a class a test class. First, the class has to be attributed with the [TestFixture] attribute. Second, the methods you want to have run the test have to be attributed with the [Test] attribute and must be public. So, your minimal test class will look something like:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;TestFixture&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Class1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;Test&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyFirstTestMethod&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// test code here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Running-Tests&#34;&gt;&lt;a href=&#34;#Running-Tests&#34; class=&#34;headerlink&#34; title=&#34;Running Tests&#34;&gt;&lt;/a&gt;Running Tests&lt;/h2&gt;&lt;p&gt;Now that we have a basic test class, go ahead and compile it. We are going to try running the test next. For that we will need a test runner.&lt;/p&gt;
&lt;p&gt;There are several ways to run NUnit test. For out purposes, we are going to use the runner that comes with NUnit. But you might also be interested in one of the alternatives. You can get a 30 day trial of &lt;a href=&#34;//www.jetbrains.com/resharper/&#34;&gt;ReSharper by JetBrains&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;ReSharper has many features, but the one I want to talk about here is the test runner. Any test you create will be immediately runnable from within Visual Studio by right clicking on an icon to the left of your code. You are presented with a menu of options including debugging your test. Believe me, this is the easiest way to debug NUnit test that I know of.&lt;/p&gt;
&lt;p&gt;Another easy way to run NUnit test from within Visual Studio is by installing the MSTest adapter. You can get this from &lt;a href=&#34;//www.nuget.org/packages/NUnitTestAdapter/&#34;&gt;NuGet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the purposes of this article, we are going to use the test runner that comes with NUnit.&lt;/p&gt;
&lt;p&gt;So the next thing you’ll need to do is go to &lt;a href=&#34;//nunit.org&#34;&gt;NUnit.org&lt;/a&gt; and download and install the latest version of NUnit if you didn’t do that already to get the NUnit DLLs installed. I would suggest using the MSI installer rather than the zip file. All we want to be able to do is to run the test.&lt;/p&gt;
&lt;p&gt;Once you’ve installed NUnit, there should be a menu option “NUnit” that you can click. This should bring up the GUI runner.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2014/11/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Use the “File” -&amp;gt; “Open” to navigate to the “bin” directory of your NUnit test DLL project and open the DLL. You should see a screen that looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2014/11/image1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click the “Run” button to run your test. You should get a green progress bar under the “Run” button and a check box over the icons in the tree on the left indicating that all of the test succeeded.&lt;/p&gt;
&lt;p&gt;“Wait?!”, you say, “I didn’t test anything, how did they succeed?”&lt;/p&gt;
&lt;p&gt;You are right. A test succeeds if it doesn’t fail. Later on this will impact how we structure our test. So keep this in mind.&lt;/p&gt;
&lt;p&gt;One of the nice things about the NUnit GUI runner is that you can keep this up while you work on your tests. By default, the system shadow copies the DLL so that you can compile the DLL in your project. When the NUnit GUI runner sees that the file has changed, it will reload it so that it is always running whatever version you recently compiled. You can change this behavior, if you really feel the need to, by navigating to “Tools” -&amp;gt; “Settings…”&lt;/p&gt;
&lt;h2 id=&#34;Debugging-Tests&#34;&gt;&lt;a href=&#34;#Debugging-Tests&#34; class=&#34;headerlink&#34; title=&#34;Debugging Tests&#34;&gt;&lt;/a&gt;Debugging Tests&lt;/h2&gt;&lt;p&gt;As with all things related to code, eventually you will need to debug your test. To do this using the the tools that come with NUnit, do the following.&lt;/p&gt;
&lt;p&gt;Right click on the project in Solution Explorer that represents your test project. From the resulting menu, select “Properties.” In the resulting window, select the “Debug” tab from the left-hand side of the window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2014/11/image2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;You will want to select “Start external program” and point it to the UNnit runner that got installed when you installed NUnit.&lt;/p&gt;
&lt;p&gt;Now, whenever you run this project, with or without the debugger, NUnit will start up. Note: there is no reason to pass parameters telling it what DLL you want to run because it will load the last DLL it had up. But, if you wanted to do that, you could pass the location of the DLL as a parameter to the GUI runner. There are other parameters you can us. Check the documentation for the version of NUnit you are using for the specifics.&lt;/p&gt;
&lt;p&gt;If you are running .NET 4.x, you’ll want to go to the location in your file system where NUnit.exe lives and find the NUnit.exe.config file. Find the startup element (&lt;startup&gt; …. &lt;/startup&gt;) and place this line in between the open and close startup tags:&lt;/p&gt;
&lt;supportedRuntime version=&#34;4.0&#34; /&gt;

&lt;p&gt;If you miss this step, you won’t be able to debug your 4.0 code. Alternatively, you can just set your project to use .NET 3.5.&lt;/p&gt;
&lt;p&gt;So, let’s give it a try.&lt;/p&gt;
&lt;p&gt;First, put some code in the test method you just created. For our purposes, we’ll just put in a console writeline so we have somplace to put a breakpoint.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyFirstTestMethod&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;Inside MyFirstTestMethod&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next set a breakpoint on the Console.WriteLine method and then run your project with the debugger.&lt;/p&gt;
&lt;p&gt;Once NUnit loads the DLL, click the “Run” button in NUnit. If everything is setup correctly, you should stop on the breakpoint you set.&lt;/p&gt;
&lt;h2 id=&#34;Console-WriteLine&#34;&gt;&lt;a href=&#34;#Console-WriteLine&#34; class=&#34;headerlink&#34; title=&#34;Console.WriteLine()&#34;&gt;&lt;/a&gt;Console.WriteLine()&lt;/h2&gt;&lt;p&gt;You may have noticed that we put several Console.WriteLines() in our code but they aren’t displaying anywhere. So, where did they go? How can we see them?&lt;/p&gt;
&lt;p&gt;By default the “Text Output” tab displays all of the Console.WriteLine() messages as well as all of the test results. If all you care to see is the test results, you should select the “Errors and Failures” tab. Personally, I prefer to work in the “Text Output” tab and I suggest that you do the same.&lt;/p&gt;
&lt;h2 id=&#34;Not-The-Only-Way&#34;&gt;&lt;a href=&#34;#Not-The-Only-Way&#34; class=&#34;headerlink&#34; title=&#34;Not The Only Way&#34;&gt;&lt;/a&gt;Not The Only Way&lt;/h2&gt;&lt;p&gt;This isn’t the only way to get NUnit &amp;amp; Visual Studio working together.  You could also purchase the ReSharper plugin which has many other features.  But one of the ones I use on a regular basis is the NUnit integration.&lt;/p&gt;
&lt;p&gt;You could also use the NUnit test Adapter to make NUnit work with the Visual Studio test engine.  But personally, I don’t like the way the test render using that and I’d much rather use the GUI viewer I’ve discussed in this article.  So, if you want to integrate NUnit &amp;amp; Visual Studio for free, what I’ve outline above is the best way to do it.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/don%E2%80%99t-comment-out-that-test/</guid>
            <title>Don’t Comment Out That Test</title>
            <link>http://davembush.github.com/don%E2%80%99t-comment-out-that-test/</link>
            <category>tdd</category>
            <category>test driven development</category>
            <pubDate>Thu, 24 Apr 2014 11:38:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/04/DeleteTDD.png&#34; alt=&#34;DeleteTDD&#34; title=&#34;DeleteTDD&#34;&gt; First, at the suggestion of one of my friends who now works at &lt;a href=&#34;//smartbear.com/&#34;&gt;SmartBear&lt;/a&gt;, I’m going to experiment with creating audio of my post going forward.  Obviously this will lend itself to some of my post more than others, but I think it is worth experimenting with. Those of you who’ve been with me since the early days remember that I use to produce &lt;a href=&#34;//www.youtube.com/user/davidmbush&#34;&gt;YouTube videos&lt;/a&gt; occasionally.  I haven’t done that in a while because the post production process for videos takes so long.  I’m hoping that I don’t run into the same problem with producing audio.  Anyhow, the point of creating the audio is that many of you don’t have time to read, but would have time to listen to something on the way to work.  Assuming this experiment works out, you should be able to listen to the content on this blog during your commute, or anywhere else you are likely to listen to audio.  If you’d rather listen to this post, you can scroll to the bottom of this post and click the “Play” button.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Today’s-Problem&#34;&gt;&lt;a href=&#34;#Today’s-Problem&#34; class=&#34;headerlink&#34; title=&#34;Today’s Problem&#34;&gt;&lt;/a&gt;Today’s Problem&lt;/h2&gt;&lt;p&gt;What I want to talk about today is the problem anyone who has been using test driven development for a while has run into.  That is, you’ve got a suite of test that are running pretty well but one day, you are working in crunch mode and a set of previously running test stop working because of some change you’ve made recently. What are you going to do?&lt;/p&gt;
&lt;h2 id=&#34;Crunch-Time&#34;&gt;&lt;a href=&#34;#Crunch-Time&#34; class=&#34;headerlink&#34; title=&#34;Crunch Time&#34;&gt;&lt;/a&gt;Crunch Time&lt;/h2&gt;&lt;p&gt;Remember it’s crunch time.  Maybe it was some bug you fixed that caused the test to stop working.  This bug is critical and you need to get the fix into production as quickly as possible.  To further complicate issues, your process won’t let you put anything into production that the &lt;a href=&#34;/make-your-test-work-for-you/&#34;&gt;Continuous Integration&lt;/a&gt; system you have in place says won’t build.  And by “Won’t Build” I mean either, it won’t build or the test won’t past.&lt;/p&gt;
&lt;p&gt;The temptation in this situation is to just comment out the tests with the promise that you’ll come back to it later.  But you and I both know that once you’ve commented out the tests, you are going to forget about them and move on.&lt;/p&gt;
&lt;h2 id=&#34;It’s-Like-A-Car&#34;&gt;&lt;a href=&#34;#It’s-Like-A-Car&#34; class=&#34;headerlink&#34; title=&#34;It’s Like A Car&#34;&gt;&lt;/a&gt;It’s Like A Car&lt;/h2&gt;&lt;p&gt;I had a manager once who said you can compare everything to a car.  So, let’s use that to illustrate this problem.  You are driving down the road and the check engine light comes on.  What are you going to do?  Well, the prudent thing to do would be to find a garage as soon as possible and find out what the issue is.  Maybe you need oil.  Maybe it is something much more serious.  Maybe it is just a flaky light.  But you won’t know until you get it checked out.&lt;/p&gt;
&lt;p&gt;What you don’t want to do is to put a piece of tape over the light and continue on as though nothing were wrong.  Even if the light is faulty, what you want to do is to get the light fixed so that it can warn you properly when something really IS wrong.&lt;/p&gt;
&lt;p&gt;Commenting out test is a lot like putting tape over the check engine light.  Maybe the test are broken but the application really does work.  Maybe the spec changed and you need to change something about the test.  But if you comment out those test, then you don’t really know that the application works.&lt;/p&gt;
&lt;h2 id=&#34;How-Committed-to-Test-Driven-Development-Are-You&#34;&gt;&lt;a href=&#34;#How-Committed-to-Test-Driven-Development-Are-You&#34; class=&#34;headerlink&#34; title=&#34;How Committed to Test Driven Development Are You?&#34;&gt;&lt;/a&gt;How Committed to Test Driven Development Are You?&lt;/h2&gt;&lt;p&gt;It is at this point in the test driven development process that you really show how committed to test driven development you are. If you comment out your test because they aren’t working, then your development process really isn’t driven by tests.  Your tests are driven by development. If you didn’t think the bug was fixed yet, would you still be thinking about moving this to production?  If you could comment out essential code in your application to fix the bug, would you do that? Of course not.  And the reason is clear.  If you did that, someone is likely to notice.&lt;/p&gt;
&lt;p&gt;The reason we are more likely to comment out a test is that it is unlikely that anyone will notice and the faster we get the bug fix into production, the better we look.&lt;/p&gt;
&lt;p&gt;But that’s really just a lie we tell ourselves.  The truth is, if you comment out those test and later a bug crops up that those test were designed to find, or worse those test were designed to catch a bug that previously existed, someone will notice that too.  And then how smart will you look? Crunch mode tells us something about our character.  Something about what we really believe.  If you are willing to comment out test, what else are you willing to take a short cut on?  If you are willing to comment out test, why did you write them to begin with? Someone who really believes that  testing is part of development will fix the test bugs along with the application bugs the same as they would fix a bug in the application that fixing a bug produced.  It’s all part of the same code base.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/make-your-test-work-for-you/</guid>
            <title>Make Your Test Work For You</title>
            <link>http://davembush.github.com/make-your-test-work-for-you/</link>
            <category>tdd</category>
            <category>test driven development</category>
            <category>CI. Continuous Integration</category>
            <pubDate>Fri, 18 Apr 2014 11:53:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/04/TDD-CI.png&#34; alt=&#34;TDD-CI&#34; title=&#34;TDD-CI&#34;&gt; So far we’ve been talking about creating test as part of the development process.  If all you ever used those test for was to make the design of your systems better, you would already be far ahead of most of your peers.&lt;/p&gt;
&lt;p&gt;But now that we have test, we might as well get as much mileage out of them as possible.  To do that, we are going to run our test every time we make a change.&lt;/p&gt;
&lt;p&gt;Now, you COULD run your test every time you make a change manually.  But who has time for that?  Certainly not me.  I doubt you do either.  And even if we did have time, there are better things we could be doing with that time if we could have those test run for us by some other process.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Continuous-Integration&#34;&gt;&lt;a href=&#34;#Continuous-Integration&#34; class=&#34;headerlink&#34; title=&#34;Continuous Integration&#34;&gt;&lt;/a&gt;Continuous Integration&lt;/h2&gt;&lt;p&gt;For this we need a continuous integration server.  Here’s what you want to make sure your CI server is able to do.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run your unit test&lt;/li&gt;
&lt;li&gt;Run your integration test&lt;/li&gt;
&lt;li&gt;Run your acceptance test&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To make sure it can do that, it will also need to be able to pull the source code from version control every time a new change is committed and build the new version.  I would bet that IF you have a CI server at all, this is all that it does.&lt;/p&gt;
&lt;p&gt;It needs to be able to notify  the developer who put the change in that the change caused a problem.  Ideally, it wouldn’t even allow  a change to go into your version control system if committing the change would cause the build or the test to fail.&lt;/p&gt;
&lt;p&gt;By implementing a CI server you are well on your way to ensuring that whatever is in version control can be released without causing any problems.&lt;/p&gt;
&lt;h2 id=&#34;CI-Setup&#34;&gt;&lt;a href=&#34;#CI-Setup&#34; class=&#34;headerlink&#34; title=&#34;CI Setup&#34;&gt;&lt;/a&gt;CI Setup&lt;/h2&gt;&lt;p&gt;Since unit test are the core of your system, you’ll want to make sure that you run these test with every build.  But your integration test, and especially your acceptance test are going to take a lot longer than is practical to run as part of the process that runs with each check in.  I’ve been working on one scree of a system and so far I have about 30 hours of acceptance&amp;#x2F;integration test using Selenium to drive 3 different web browsers.  Even if I narrowed the test down to one browser, that’s about 10 hours of test.  I don’t want to wait 10 hours to find out that my build worked (or not) and the changes that one of those test will fail is pretty small.  So, I’ve scheduled half of my test to run on one day and half of them to run on another day.&lt;/p&gt;
&lt;p&gt;With a good CI setup, you can be sure that changes you are making are not breaking code you’ve already confirmed is working.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/what-not-to-test/</guid>
            <title>What Not To Test</title>
            <link>http://davembush.github.com/what-not-to-test/</link>
            <category>tdd</category>
            <category>programming</category>
            <category>test driven development</category>
            <pubDate>Wed, 09 Apr 2014 12:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/04/WhatNotToTest.png&#34; alt=&#34;WhatNotToTest&#34; title=&#34;WhatNotToTest&#34;&gt;&lt;/p&gt;
&lt;p&gt;Many people believe that implementing Test Driven Development means that you need to have a test for every line of code in your system.  When  they start thinking about TDD in this way, they start to feel overwhelmed and quit before they even start.&lt;/p&gt;
&lt;p&gt;I know I did.&lt;/p&gt;
&lt;p&gt;In fact, I’ve seen suggestions on places like StackOverflow that suggest as much.&lt;/p&gt;
&lt;p&gt;But there is code in your application that you shouldn’t bother to write a test for.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Generated-Code&#34;&gt;&lt;a href=&#34;#Generated-Code&#34; class=&#34;headerlink&#34; title=&#34;Generated Code&#34;&gt;&lt;/a&gt;Generated Code&lt;/h2&gt;&lt;p&gt;Generated code includes any code that uses some automated process to create code your system is using.  This would include code that was written by Entity Framework, NHibernate, or code generators that you may have written.  Of course, I’m assuming that you’ve written test for the code generators that test both that they generate the expected code and the code that was generated works as expected.  But to write a test for every instance of the code the generator writes is quite a bit of overkill.&lt;/p&gt;
&lt;h2 id=&#34;Simple-Getters-and-Setters&#34;&gt;&lt;a href=&#34;#Simple-Getters-and-Setters&#34; class=&#34;headerlink&#34; title=&#34;Simple Getters and Setters&#34;&gt;&lt;/a&gt;Simple Getters and Setters&lt;/h2&gt;&lt;p&gt;If all your getters and setters are doing (properties) are retrieving and setting some backing store, there isn’t much point in writing a test for them.  One would assume that the code will get tested in the course of testing the code that is ultimately using the getters and setters.&lt;/p&gt;
&lt;h2 id=&#34;Third-Party-Libraries&#34;&gt;&lt;a href=&#34;#Third-Party-Libraries&#34; class=&#34;headerlink&#34; title=&#34;Third Party  Libraries&#34;&gt;&lt;/a&gt;Third Party  Libraries&lt;/h2&gt;&lt;p&gt;While I know it isn’t true, you have to assume that the third party library you are using actually works.  If you can’t assume that much, you should probably write it yourself.&lt;/p&gt;
&lt;h2 id=&#34;Your-Thinking-About-It-Wrong&#34;&gt;&lt;a href=&#34;#Your-Thinking-About-It-Wrong&#34; class=&#34;headerlink&#34; title=&#34;Your Thinking About It Wrong&#34;&gt;&lt;/a&gt;Your Thinking About It Wrong&lt;/h2&gt;&lt;p&gt;I would argue that if you are thinking about what you should write a test for, you are probably still thinking of Test Driven Development as something you do for the sake of testing rather than for the sake of &lt;a href=&#34;/tdd-isnt-all-about-testing/&#34;&gt;design, maintenance, and problem solving&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you write code, you should be thinking, “What problem am I trying to solve?”  Or better yet, “How can I state the problem in terms of a ‘When&amp;#x2F;Then’ statement?”&lt;/p&gt;
&lt;p&gt;When you think about the problem this way, what you test becomes that When&amp;#x2F;Then statement.  The class name for the test becomes When and the test becomes Then&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;WhenTheCodeIsInStateXAndIPerformActionYOnIt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;SetUp&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Setup&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// Setup When&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// Perform Action&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;Test&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ThenItShouldEndUpWithZState&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         Assert.That(&lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt;, Is.InSpecificState());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;When you do this, the question no longer is about how much code you have to test, but instead becomes “Have I written a test for every reasonable condition this class may encounter?”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/tdd-isn%E2%80%99t-all-about-testing/</guid>
            <title>TDD Isn’t All About Testing</title>
            <link>http://davembush.github.com/tdd-isn%E2%80%99t-all-about-testing/</link>
            <category>tdd</category>
            <category>programming</category>
            <category>test driven development</category>
            <pubDate>Tue, 25 Mar 2014 13:07:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/03/tran-land-045.jpg&#34; alt=&#34;tran-land-045&#34; title=&#34;tran-land-045&#34;&gt;While the artifact of Test Driven Development is test code, what you get out of test driven development far exceeds the test themselves. &lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Maintainable-Code&#34;&gt;&lt;a href=&#34;#Maintainable-Code&#34; class=&#34;headerlink&#34; title=&#34;Maintainable Code&#34;&gt;&lt;/a&gt;Maintainable Code&lt;/h2&gt;&lt;p&gt;By writing test first, you tend to write code that is more highly maintainable than if you just wrote the code to solve the problem.  By writing a class so that it can be used in both the system you are writing it for and so that it can be tested, you’ve been forced to think about the code in at least one other way from what you would have initially.  The result is your code tends to be more structured than it would have been otherwise.&lt;/p&gt;
&lt;h2 id=&#34;Clear-Specifications&#34;&gt;&lt;a href=&#34;#Clear-Specifications&#34; class=&#34;headerlink&#34; title=&#34;Clear Specifications&#34;&gt;&lt;/a&gt;Clear Specifications&lt;/h2&gt;&lt;p&gt;By writing test first, you are forced to develop clearer specifications.  I’ve run into this recently on a project that I’m currently working on.  I can’t write a test for the code I’m about to implement because I don’t clearly understand how this is supposed to interact with the rest of the application.  Until I do, I really can’t move forward.  If I were not writing a test, this would not be as clear now as it is.  Although, one could argue that eventually it would become clear.  But it is more likely I would leave the feature out completely because I forgot about it entirely.  Something I’ve been known to do in the past.&lt;/p&gt;
&lt;h2 id=&#34;Up-To-Date-Specifications&#34;&gt;&lt;a href=&#34;#Up-To-Date-Specifications&#34; class=&#34;headerlink&#34; title=&#34;Up To Date Specifications&#34;&gt;&lt;/a&gt;Up To Date Specifications&lt;/h2&gt;&lt;p&gt;This leads to another advantage to test driven development that &lt;a href=&#34;/test-driven-specifications/&#34;&gt;I’ve mentioned before&lt;/a&gt;.  By writing test in advance, you have the specification coded.  This forces you to keep the specification up to date if it changes because your test won’t run unless you do.  How many other programming methods are there that force the specifications to be kept up to date?  I can’t think of any.&lt;/p&gt;
&lt;h2 id=&#34;A-Safety-Net-For-Refactoring&#34;&gt;&lt;a href=&#34;#A-Safety-Net-For-Refactoring&#34; class=&#34;headerlink&#34; title=&#34;A Safety Net For Refactoring&#34;&gt;&lt;/a&gt;A Safety Net For Refactoring&lt;/h2&gt;&lt;p&gt;If you’ve ever looked at bad code and thought, “I bet I could make this better.”  But then you were afraid to make any changes because you aren’t sure your improvement wouldn’t break something, you’ll really appreciate TDD.  If there is a good test suite for the code you want to refactor, you can be sure that any changes you make won’t break something it should do.  I’ve left a lot of code alone for fear of breaking something else.&lt;/p&gt;
&lt;h2 id=&#34;Preventing-Feature-Creep&#34;&gt;&lt;a href=&#34;#Preventing-Feature-Creep&#34; class=&#34;headerlink&#34; title=&#34;Preventing Feature Creep&#34;&gt;&lt;/a&gt;Preventing Feature Creep&lt;/h2&gt;&lt;p&gt;Another thing TDD does is that it prevents feature creep on the part of developers.  Face it, how many times have you added a feature into the system that no one asked for?  By coding to the test, you reduce this urge.&lt;/p&gt;
&lt;p&gt;Many people start TDD by writing test after the fact and wonder how this can possibly be helpful.  This is because they’ve written them after they’ve written the code and they’ve completely bypass 80% of the benefits.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/when-you-really-need-all-of-your-nunit-test-in-one-class/</guid>
            <title>When You Really Need All Of Your NUnit Test In One Class</title>
            <link>http://davembush.github.com/when-you-really-need-all-of-your-nunit-test-in-one-class/</link>
            <category>tdd</category>
            <category>test driven development</category>
            <category>nunit</category>
            <category>testcasedata</category>
            <category>testcasesource</category>
            <pubDate>Tue, 18 Mar 2014 13:16:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/03/arct-034.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Last week &lt;a href=&#34;/unit-test-structure/&#34;&gt;I proposed a structure for unit test that follows the pre-condition, action, post-condition workflow&lt;/a&gt;.  Basically what you would see in a Use Case document.&lt;/p&gt;
&lt;p&gt;The result of this structure when applied to a general NUnit class is that we will end up with our pre-condition and action in our setup method and our post-condition asserts in our test methods.&lt;/p&gt;
&lt;p&gt;The problem with this is that sometimes this doesn’t always fit what we are trying to do.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;For example, I’ve been writing selenium test to test web applications I am working on.  Each page I am testing is essentially a form that computes a result at the bottom.  If I were a purest, I would put the page load object and the setup of the state of the page in the setup method.  One for each permutation.  And the assert to verify that it computed correctly.&lt;/p&gt;
&lt;p&gt;In this case, however, I vary slightly because what I really want is all of these similar test together where I can see them.&lt;/p&gt;
&lt;p&gt;But I still keep my code clean by using a TestCaseSource.&lt;/p&gt;
&lt;p&gt;What we are going to do is move just about everything into the TestCaseSource.  The code that is common between each TestCaseSource is going to still go in the SetUp method, but everything else will be declared in the TestCaseSource.&lt;/p&gt;
&lt;p&gt;The basics of how TestCaseSource works is that we setup a Property or a member variable that returns an IEnumerable.  By using the built in TestCaseData class we get a lot of control over what displays.  I’m not going to go over that here.  I’m sure you can &lt;a href=&#34;//www.nunit.org/index.php?p=testCaseSource&amp;r=2.6.3&#34;&gt;read the documentation&lt;/a&gt; as well as I can.&lt;/p&gt;
&lt;p&gt;But what you may not realize when you first look that this documentation is that we can pass in functions and not just objects.  This gives us quite a bit of freedom in what we do here.&lt;/p&gt;
&lt;p&gt;So by setting up our Test method to look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;Test&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;TestCaseSource(&lt;span class=&#34;string&#34;&gt;&amp;quot;DataSource&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Test&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Action pre,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    List&amp;lt;Action&amp;gt; actions,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    Action assert&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pre();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; action &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; actions) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        action();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    assert();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What we are doing is saying that we expect to find a property or member variable called “DataSource” that will pass us a function, a list of functions, and another function.&lt;/p&gt;
&lt;p&gt;The test body runs the first function to do any pre-condition work.  Then it loops through all of the function in the actions list to get the code to the state we need it to be in and then we finally call the assert to test our code.&lt;/p&gt;
&lt;p&gt;Here is a sample of what our DataSource property looks like:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; IEnumerable DataSource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Action pre = () =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;given&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; actions = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;Action&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            () =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;when one&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            () =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;when two&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Action assert = () =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Assert.That(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Is.EqualTo(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;            &lt;span class=&#34;title&#34;&gt;TestCaseData&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;pre, actions, assert&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I’ve broken out the lambda expressions individually so that you can better see what I’m doing.  But in real life, your code will probably look more like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; IEnumerable DataSource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestCaseData&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;            (Action&lt;/span&gt;)(&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;)&lt;/span&gt; =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;given&amp;quot;&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;Action&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                () =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;when one&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                () =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;when two&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (Action)(() =&amp;gt; Assert.That(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Is.EqualTo(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You will need the (Action) cast to make the compiler understand what you are trying to do.  It isn’t smart enough to know that a lambda express is an Action which is a delegate that take no parameters and returns void.&lt;/p&gt;
&lt;p&gt;When you run the code, above, we get this output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2014/03/GivenWhenThenTest.png&#34; alt=&#34;GivenWhenThenTest&#34; title=&#34;GivenWhenThenTest&#34;&gt;&lt;/p&gt;
&lt;p&gt;By chaining on the SetName() call, you can make each iteration show up as it’s own unique test so you can see what is occuring in your test runner.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; IEnumerable DataSource&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestCaseData&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;            (Action&lt;/span&gt;)(&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;)&lt;/span&gt; =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;given&amp;quot;&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;Action&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                () =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;when one&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                () =&amp;gt; Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;when two&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (Action)(() =&amp;gt; Assert.That(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Is.EqualTo(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ).SetName(&lt;span class=&#34;string&#34;&gt;&amp;quot;First Test&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And this looks like this in the test runner:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2014/03/GivenWhenThen2.png&#34; alt=&#34;GivenWhenThen2&#34; title=&#34;GivenWhenThen2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once again, I have to reiterate, this is not something I would do a lot of, but it is a pretty neat trick when you need it. &lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/unit-test-structure/</guid>
            <title>Unit Test Structure</title>
            <link>http://davembush.github.com/unit-test-structure/</link>
            <category>tdd</category>
            <category>unit test</category>
            <category>test driven development</category>
            <pubDate>Tue, 11 Mar 2014 04:38:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/03/UnitTestingScreen.png&#34; alt=&#34;UnitTestingScreen&#34; title=&#34;UnitTestingScreen&#34;&gt;One of the recurring reasons I hear from people for why they are not implementing unit test in their code is because it takes too long.  On one level I get that.  But, my experience tells me that the real problem is more likely that they just don’t understand enough about how to implement unit testing to be able to do it well.&lt;/p&gt;
&lt;p&gt;This is like knowing you are supposed to “eat right” and “exercise” but not having anyone tell you how to do either in such a way that you can maintain the habit.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Start-Small&#34;&gt;&lt;a href=&#34;#Start-Small&#34; class=&#34;headerlink&#34; title=&#34;Start Small&#34;&gt;&lt;/a&gt;Start Small&lt;/h2&gt;&lt;p&gt;So the first rule of unit testing structure, just like the first rule of diet and exercise, is to start small.&lt;/p&gt;
&lt;p&gt;When I first started to take a look at unit testing, the general advice was to create a unit test class for each class.  Then you were suppose to create a test method for each class.  I still see a lot of code as I travel that looks like this as I watch people try to implement the practice.&lt;/p&gt;
&lt;p&gt;But how frustrating.  And how is that suppose to work when I’m modifying existing code?&lt;/p&gt;
&lt;h2 id=&#34;Here-is-how-I-write-unit-test…&#34;&gt;&lt;a href=&#34;#Here-is-how-I-write-unit-test…&#34; class=&#34;headerlink&#34; title=&#34;Here is how I write unit test…&#34;&gt;&lt;/a&gt;Here is how I write unit test…&lt;/h2&gt;&lt;p&gt;I’ve had exposure to UML and the most useful part of UML that I tend to use over and over again is the Use Case document.  I don’t care so much about the diagram.  But the document is really helpful.&lt;/p&gt;
&lt;p&gt;In the document we have three parts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pre conditions&lt;/li&gt;
&lt;li&gt;Actions&lt;/li&gt;
&lt;li&gt;Post conditions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you start thinking about your test under this framework, I think you’ll find that writing test become much easier.&lt;/p&gt;
&lt;p&gt;You may be thinking, “But Dave, that’s application level testing, not unit testing.”  And my answer would be, “Yes, it is, but your class is a mini application so it can apply to it as well.&lt;/p&gt;
&lt;h2 id=&#34;So-let’s-take-the-classic-Person-class-as-an-example&#34;&gt;&lt;a href=&#34;#So-let’s-take-the-classic-Person-class-as-an-example&#34; class=&#34;headerlink&#34; title=&#34;So, let’s take the classic Person class as an example:&#34;&gt;&lt;/a&gt;So, let’s take the classic Person class as an example:&lt;/h2&gt;&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Person&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; FirstName &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;; &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; LastName &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;; &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; FullName&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; FirstName + &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                + LastName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Our preconditions might be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The object has been created&lt;/li&gt;
&lt;li&gt;The FirstName has been set to a known value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of our actions is going to be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The LastName property is set to another known value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The post condition will be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The FullName should end up being whatever we had in the first name plus a space plus whatever we added to the last name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So now that we have a use case for our class, how do we model this in our unit test?&lt;/p&gt;
&lt;h2 id=&#34;Converting-the-Use-Case-to-a-Test-Case&#34;&gt;&lt;a href=&#34;#Converting-the-Use-Case-to-a-Test-Case&#34; class=&#34;headerlink&#34; title=&#34;Converting the Use Case to a Test Case&#34;&gt;&lt;/a&gt;Converting the Use Case to a Test Case&lt;/h2&gt;&lt;p&gt;Using NUnit since it is still the most popular, our resulting code might look something like:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GivenAnObjectOfTypePersonWithFirstNameSetToBob&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;WhenISetTheLastNameToJones&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Person _person;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [&lt;span class=&#34;meta&#34;&gt;SetUp&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Setup&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// The precondition&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            _person = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Person&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                FirstName = &lt;span class=&#34;string&#34;&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// The action&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            _person.LastName = &lt;span class=&#34;string&#34;&gt;&amp;quot;Jones&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [&lt;span class=&#34;meta&#34;&gt;Test&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TheFullNameShouldBeBobJones&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Assert.That(_person.FullName,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                Is.EqualTo(&lt;span class=&#34;string&#34;&gt;&amp;quot;Bob Jones&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice how I created a namespace for the given.  This makes the code readable in our test runner.  I put the precondition and the action in the SetUp method because I want to start fresh with each test.  In this case, I only have one test, but in most scenarios, you will have multiple test.  You should plan for multiple test.&lt;/p&gt;
&lt;p&gt;In this particular case, I only have one post condition.  But if I had multiple post conditions, each one would be it’s own Test method with it’s own Assert.&lt;/p&gt;
&lt;p&gt;One of the biggest issues I see is people putting multiple asserts inside of one Test method.    You don’t want to do this.  You want one and only one Assert per Test method.  Otherwise, you never know by looking at your test what exactly failed or if the code were to run, that any of the other Asserts fail.&lt;/p&gt;
&lt;p&gt;Because we named our namespace, class, and test methods what we are testing, when a test fails, our test runner will display the names for us.&lt;/p&gt;
&lt;p&gt;If you think it makes the code more readable, you can use underscores to separate the names.  The goal is to make the code read something like your use case.&lt;/p&gt;
&lt;p&gt;One final note before we end.  Your namespace should match up to the directory the class file is in and the class name should match the file name.  This will make the code easy to find.  This is something I shouldn’t have to mention, but once again, I’ve seen people ignore the simplest of organizational strategies.&lt;/p&gt;
&lt;p&gt;This is just one of several patterns I use for testing my code.  What I like about this particular pattern is that it forces my test code to follow the Single responsibility principle.  In the case above, this test class is only responsible for testing what happens when I set the LastName property when I’ve already set the FirstName property.  I can write another class to test what happens when the FirstName property has not yet been set and yet another for what happens when I set the LastName property first and then set the FirstName property.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/test-driven-specifications/</guid>
            <title>Test Driven Specifications</title>
            <link>http://davembush.github.com/test-driven-specifications/</link>
            <category>tdd</category>
            <category>agile</category>
            <category>test driven development</category>
            <category>testing</category>
            <pubDate>Tue, 25 Feb 2014 03:44:00 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/uploads/2014/02/spider.jpg&#34; alt=&#34;spider&#34; title=&#34;spider&#34;&gt;Several years ago, long before the community was actively talking about Test Driven Development, I worked for a short time at a company as a “bug fixer.”  That was my role.  They had hired me because they had some software that was “basically done” but “had some issues.”  It should only take a few weeks.&lt;/p&gt;
&lt;p&gt;The first thing they needed me to fix was that the website was supposed to send out email.  It turns out it was a configuration problem.  But they were so impressed (“the last guy we had in here spent two weeks on that problem and still hadn’t solved the problem.”) that they gave me more and more bugs.&lt;/p&gt;
&lt;h2 id=&#34;This-Is-The-Job-That-Never-Ends&#34;&gt;&lt;a href=&#34;#This-Is-The-Job-That-Never-Ends&#34; class=&#34;headerlink&#34; title=&#34;This Is The Job That Never Ends&#34;&gt;&lt;/a&gt;This Is The Job That Never Ends&lt;/h2&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;The gig that was supposed to be a couple of weeks long was quickly turning into a perpetual job.  Soon I learned that what I was working with was a system that had a lot of bugs, but no one was willing to admit that.  Eventually, frustrated by the fact that this system seemed to have a new bug every day, I asked for the specs so that I could create a test plan.  That’s when I found out the worse news of all about this system.&lt;/p&gt;
&lt;h2 id=&#34;Lost-Specifications&#34;&gt;&lt;a href=&#34;#Lost-Specifications&#34; class=&#34;headerlink&#34; title=&#34;Lost Specifications&#34;&gt;&lt;/a&gt;Lost Specifications&lt;/h2&gt;&lt;p&gt;They had lost the specs.  Not only had they lost the specs, but they were unwilling to admit this to the client and instead they were relying on the process of fixing the bugs to eventually squash all  the bugs so they could end up with a stable system.&lt;/p&gt;
&lt;p&gt;Since I was not yet familiar with the concepts of unit testing or Test Driven Development, I accepted this as the best we could do.  Hey!  At least I was getting paid well.&lt;/p&gt;
&lt;p&gt;Oh, but the story gets worse.&lt;/p&gt;
&lt;h2 id=&#34;The-Plot-Thickens&#34;&gt;&lt;a href=&#34;#The-Plot-Thickens&#34; class=&#34;headerlink&#34; title=&#34;The Plot Thickens&#34;&gt;&lt;/a&gt;The Plot Thickens&lt;/h2&gt;&lt;p&gt;About three months into this gig, the manager of my project went on vacation which left the project in HIS manager’s hands.  That’s when the poop hit the fan.&lt;/p&gt;
&lt;p&gt;The Oracle consultant that was working with me and I were called into the office.&lt;/p&gt;
&lt;p&gt;“Why does this system still have bugs?!!”  Oh, he was angry.  That should be all bold and all caps and all underlined.&lt;/p&gt;
&lt;p&gt;Well sir, several weeks ago I asked for the requirements document so that I could write a test plan and I was told the requirements were lost.  If we can’t write a test plan, we never will be able to ensure that the system is working the way that it should.&lt;/p&gt;
&lt;p&gt;“I want you to write a test plan.”&lt;/p&gt;
&lt;p&gt;To which I repeated my need for a requirements document.&lt;/p&gt;
&lt;p&gt;We went back and forth with him insisting that I write a test plan and me stating that it could not be done until I finally said, “I think I’ve done all I can do here.”  Walked out of the office, packed up my stuff, went home, and immediately called my recruiter to make sure he got MY version of what happened first.&lt;/p&gt;
&lt;p&gt;But, it didn’t have to end like that.&lt;/p&gt;
&lt;h2 id=&#34;A-Better-Way&#34;&gt;&lt;a href=&#34;#A-Better-Way&#34; class=&#34;headerlink&#34; title=&#34;A Better Way&#34;&gt;&lt;/a&gt;A Better Way&lt;/h2&gt;&lt;p&gt;Had I known about test driven development, every time a new bug came in, I could have written a new test, even if it was only unit test and not acceptance test, every time a new bug came in.  Eventually, I would have created not only the test plan, but I would have created the specification, or at least the parts that tended to break, and we would have ended up with a stable system like they thought they were going to get.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
