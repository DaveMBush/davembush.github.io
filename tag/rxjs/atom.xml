<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://davembush.github.com</id>
    <title>Dave&#39;s Notebook • Posts by &#34;rxjs&#34; tag</title>
    <link href="http://davembush.github.com" />
    <updated>2020-11-05T13:01:10.000Z</updated>
    <category term="project management" />
    <category term="code coverage" />
    <category term="tdd" />
    <category term="unit test" />
    <category term="code" />
    <category term="programming" />
    <category term="angular" />
    <category term="javascript" />
    <category term="performance" />
    <category term="react.js" />
    <category term="agile" />
    <category term="failure" />
    <category term="kanban" />
    <category term="scrum" />
    <category term="interview" />
    <category term="job search" />
    <category term="test driven development" />
    <category term="mvvm" />
    <category term="DRY" />
    <category term="loose coupling" />
    <category term="single responsibility" />
    <category term="c#" />
    <category term="learning" />
    <category term="bug" />
    <category term="ext js" />
    <category term="sencha" />
    <category term="career" />
    <category term="react" />
    <category term="ngrx" />
    <category term="redux" />
    <category term="functional" />
    <category term="reactive" />
    <category term="mvp" />
    <category term="private" />
    <category term="testing" />
    <category term="typescript" />
    <category term="routing" />
    <category term="pointers" />
    <category term="unsafe" />
    <category term="class diagram" />
    <category term="vb.net" />
    <category term="visual studio" />
    <category term="flux" />
    <category term="lazy loading" />
    <category term="scope" />
    <category term="DOM" />
    <category term="ionic" />
    <category term="putty" />
    <category term="ssh" />
    <category term="formgroup" />
    <category term="validation" />
    <category term="angular-cli" />
    <category term="modules" />
    <category term="ngmodule" />
    <category term="observables" />
    <category term="RxJS" />
    <category term="model driven" />
    <category term="reactive forms" />
    <category term="estimating" />
    <category term="story points" />
    <category term="best practices" />
    <category term="design patterns" />
    <category term="architecture" />
    <category term="asp.net" />
    <category term="memory" />
    <category term="angular.js" />
    <category term="iis" />
    <category term="ajax" />
    <category term="json" />
    <category term="controller" />
    <category term="MVC" />
    <category term="view" />
    <category term="404" />
    <category term="application_error" />
    <category term="exceptions" />
    <category term="viewstate" />
    <category term="archietcture" />
    <category term="bll" />
    <category term="dal" />
    <category term="Three Tiered" />
    <category term=".net" />
    <category term="enums" />
    <category term="tutorial" />
    <category term="code quality" />
    <category term="cyclomatic" />
    <category term="halstead" />
    <category term="child component" />
    <category term="CefSharp" />
    <category term="Chromium" />
    <category term="Vista" />
    <category term="VPN" />
    <category term="xp" />
    <category term="get" />
    <category term="properties" />
    <category term="set" />
    <category term="empty" />
    <category term="string" />
    <category term="habits" />
    <category term="application testing" />
    <category term="dependency injection" />
    <category term="debugging" />
    <category term="cms" />
    <category term="dotnetnuke" />
    <category term="WordPress" />
    <category term="authority" />
    <category term="confidence" />
    <category term="datalist" />
    <category term="listview" />
    <category term="comments" />
    <category term="tdd. agile" />
    <category term="bootstrap" />
    <category term="copy &amp;amp; paste" />
    <category term="cross browser" />
    <category term="idisposable" />
    <category term="animation" />
    <category term="css" />
    <category term="html" />
    <category term="debug" />
    <category term="checked" />
    <category term="double" />
    <category term="float" />
    <category term="int" />
    <category term="long" />
    <category term="short" />
    <category term="unchecked" />
    <category term="currency" />
    <category term="decimal" />
    <category term="floating point math" />
    <category term="single" />
    <category term="authentication" />
    <category term="isinrole" />
    <category term="roles" />
    <category term="user" />
    <category term="definition of done" />
    <category term="DoD" />
    <category term="dispose" />
    <category term="finalize" />
    <category term="suppressfinalize" />
    <category term="education" />
    <category term="client side" />
    <category term="development" />
    <category term="class" />
    <category term="dynamic classing" />
    <category term="gridview" />
    <category term="college" />
    <category term="freshman" />
    <category term="babel" />
    <category term="es2015" />
    <category term="es6" />
    <category term="jest" />
    <category term="bdd" />
    <category term="Single Responsibility" />
    <category term="Architecture" />
    <category term="full stack developer" />
    <category term="web development" />
    <category term="formsauthentication" />
    <category term="manual" />
    <category term="redirectfromloginpage" />
    <category term="setauthcookie" />
    <category term="NgRX" />
    <category term="luck" />
    <category term="social skills" />
    <category term="brain" />
    <category term="health" />
    <category term="programmer" />
    <category term="productivity" />
    <category term="QA" />
    <category term="extreme programming" />
    <category term="software" />
    <category term="httpcontext" />
    <category term="items" />
    <category term="session" />
    <category term="naming conventions" />
    <category term="variables" />
    <category term="self improvement" />
    <category term="301" />
    <category term="302" />
    <category term="fiddler" />
    <category term="infinite loop" />
    <category term="images" />
    <category term="iTextSharp" />
    <category term="PDF" />
    <category term="concatenation" />
    <category term="quirks" />
    <category term="parsing" />
    <category term="xhtml" />
    <category term="fonts" />
    <category term="stack" />
    <category term="htmltidy" />
    <category term="tables" />
    <category term="acrofields" />
    <category term="form fields" />
    <category term="outputstream" />
    <category term="pdfreader" />
    <category term="pdfstamper" />
    <category term="bind" />
    <category term="callbacks" />
    <category term="currying" />
    <category term="events" />
    <category term="business rules" />
    <category term="boolean" />
    <category term="fields" />
    <category term="methods" />
    <category term="object" />
    <category term="functions" />
    <category term="inheritance" />
    <category term="prototype" />
    <category term="hoist" />
    <category term="falsy" />
    <category term="truthy" />
    <category term="istanbul" />
    <category term="jasmine" />
    <category term="hoisting" />
    <category term="types" />
    <category term="type conversion" />
    <category term="dialog" />
    <category term="jQuery" />
    <category term="validation controls" />
    <category term="async" />
    <category term="each" />
    <category term="collapse" />
    <category term="expand" />
    <category term="load" />
    <category term="partial content" />
    <category term="tooltip" />
    <category term="regions" />
    <category term="limiting beliefs" />
    <category term="angular material" />
    <category term="linkedin" />
    <category term="social media" />
    <category term="tips" />
    <category term="CI. Continuous Integration" />
    <category term="magic numbers" />
    <category term="magic strings" />
    <category term="flex" />
    <category term="multiview" />
    <category term="wizard" />
    <category term="threading" />
    <category term="intern" />
    <category term="express" />
    <category term="node" />
    <category term="nunit" />
    <category term="object initializers" />
    <category term="video" />
    <category term="reflection" />
    <category term="unity" />
    <category term="best practice" />
    <category term="asp.net postback button" />
    <category term="iText" />
    <category term="property based testing" />
    <category term="cli" />
    <category term="software architecture" />
    <category term="rxjs. angular 2" />
    <category term="redirect" />
    <category term="response" />
    <category term="responsive design" />
    <category term="parallel" />
    <category term="selenium" />
    <category term="Marble Testing" />
    <category term="java" />
    <category term="grid" />
    <category term="hub" />
    <category term="serialization" />
    <category term="specflow" />
    <category term="like" />
    <category term="sql" />
    <category term="tsql" />
    <category term="where clause" />
    <category term="do while" />
    <category term="for next" />
    <category term="ms-sql" />
    <category term="while" />
    <category term="gamification" />
    <category term="paired programming" />
    <category term="reference types" />
    <category term="stringbuilder" />
    <category term="value types" />
    <category term="technical debt" />
    <category term="activetabindex" />
    <category term="postback" />
    <category term="tab control" />
    <category term="tabcontrol" />
    <category term="kata" />
    <category term="extjs" />
    <category term="email" />
    <category term="mailaddress" />
    <category term="mailmessage" />
    <category term="smtpclient" />
    <category term="Quality" />
    <category term="behavior" />
    <category term="psychology" />
    <category term="portal" />
    <category term="web 1.0" />
    <category term="web 2.0" />
    <category term="trace" />
    <category term="compiler" />
    <category term="errror" />
    <category term="warning" />
    <category term="connection string" />
    <category term="dataset" />
    <category term="error" />
    <category term="web.config" />
    <category term="tslint" />
    <category term="emotions" />
    <category term="hiring" />
    <category term="aspnet_regsql" />
    <category term="forms based authentication" />
    <category term="jsdom" />
    <category term="karma" />
    <category term="noTDD" />
    <category term="bundling" />
    <category term="gulp" />
    <category term="minification" />
    <category term="node.js" />
    <category term="file upload" />
    <category term="objects" />
    <category term="hide" />
    <category term="vb.net attributes" />
    <category term="nothing" />
    <category term="nullable" />
    <category term="conditional startup" />
    <category term="windows forms" />
    <category term="winforms" />
    <category term="char" />
    <category term="split" />
    <category term="strict" />
    <category term="clarity" />
    <category term="ui" />
    <category term="ux" />
    <category term="asmx" />
    <category term="error handling" />
    <category term="webservice" />
    <category term="binary" />
    <category term="bitwise" />
    <category term="operators" />
    <category term="automation" />
    <category term="browser" />
    <category term="mstest" />
    <category term="immutable" />
    <category term="global" />
    <category term="await" />
    <category term="webapi" />
    <category term="configuration" />
    <category term="devops" />
    <category term="testcasedata" />
    <category term="testcasesource" />
    <category term="closure" />
    <category term="loops" />
    <category term="certification" />
    <category term="mcsd" />
    <category term="microsoft" />
    <category term="inversion of control" />
    <category term="ioc" />
    <category term="casting" />
    <category term="convert" />
    <category term="arguements" />
    <category term="command line" />
    <category term="main" />
    <category term="yagni" />
    <category term="npm" />
    <category term="nvm" />
    <category term="resumes" />
    <category term="change-detection" />
    <category term="state-management" />
    <category term="web-workers" />
    <category term="libraries" />
    <category term="strong typing" />
    <category term="linting" />
    <category term="constructors" />
    <category term="clean code" />
    <category term="smart-ngrx" />
    <category term="ngrx-store" />
    <category term="ngrx-entity" />
    <category term="ngrx-effects" />
    <category term="TypeScript" />
    <category term="Performance" />
    <entry>
        <id>http://davembush.github.com/rxjs-conditional-logic/</id>
        <title>rxjs-conditional-logic</title>
        <link rel="alternate" href="http://davembush.github.com/rxjs-conditional-logic/"/>
        <content type="html">&lt;p&gt;The temptation, when using RxJS is to include conditional logic inside your map, tap, or subscribe blocks.  But there is a much better way to deal with conditional logic that will make your code much easier to read and reason about. It also should make your code easier to test. But of course, once you have code that is easy to test, you probably no longer need to test it.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Filter&#34;&gt;&lt;a href=&#34;#Filter&#34; class=&#34;headerlink&#34; title=&#34;Filter&#34;&gt;&lt;/a&gt;Filter&lt;/h2&gt;&lt;p&gt;The easiest, most straight forward way to handle conditional logic is by using the &lt;code&gt;filter()&lt;/code&gt; operator.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;streamThing.&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; condition),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// additional code here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This code shouldn’t look so strange.  It pulls your logic out from within whatever additional logic you have and also reduces your need for multi-line map, tap or subscribe blocks.&lt;/p&gt;
&lt;h2 id=&#34;Partition&#34;&gt;&lt;a href=&#34;#Partition&#34; class=&#34;headerlink&#34; title=&#34;Partition&#34;&gt;&lt;/a&gt;Partition&lt;/h2&gt;&lt;p&gt;On the other hand, you may need an if&amp;#x2F;else block.  This is what &lt;code&gt;partition&lt;/code&gt; is for.  The partition function is considered an Observable creation function because it takes one stream and returns two more.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;partition&lt;/code&gt; function works similar to the &lt;code&gt;filter()&lt;/code&gt; operator.  You pass in the stream you want to split and the predicate for the truthy evaluation and the function returns an array where element 0 is the true Observable and element 1 is the false Observable.&lt;/p&gt;
&lt;p&gt;Where things can get tricky with this operator is that each stream inherits the stream it was based on.  If you subscribe to either, it will trigger whatever action created the original Observable.  That is, if your original Observable is based on a call to the server and you subscribe to both of the new Observables that &lt;code&gt;partition()&lt;/code&gt; created, you call to the server will happen twice.&lt;/p&gt;
&lt;p&gt;Therefore, you should &lt;code&gt;share()&lt;/code&gt; the original Observable before you split it with &lt;code&gt;partition()&lt;/code&gt;.  This will prevent the original Observable creations from getting called twice.&lt;/p&gt;
&lt;p&gt;Once you have the two Observables, you’ll probably want to merge them back together at some point and subscribe to both at the same time.  There are multiple ways you might consider doing this, but you will use &lt;code&gt;merge()&lt;/code&gt; most often.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; [trueObs, falseObs] =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;partition&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    originalObs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;share&lt;/span&gt;()),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* x true condition */&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;merge&lt;/span&gt;(trueObs, falseObs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Case-Statements&#34;&gt;&lt;a href=&#34;#Case-Statements&#34; class=&#34;headerlink&#34; title=&#34;Case Statements?&#34;&gt;&lt;/a&gt;Case Statements?&lt;/h2&gt;&lt;p&gt;The closest operator we have to a being able to perform case statements is &lt;code&gt;groupBy()&lt;/code&gt;. But this is not typically not what you want because you have no idea where the result will show up in the results.&lt;/p&gt;
&lt;p&gt;No, the best you can do is to start with a base &lt;code&gt;Observeable&lt;/code&gt; and use a filter against it for each of the conditions and then merge all the results back together.&lt;/p&gt;
&lt;p&gt;In fact, you may find that using two filters makes your code easier to reason about than if you were to use &lt;code&gt;partition()&lt;/code&gt;.&lt;/p&gt;
</content>
        <category term="RxJS" />
        <updated>2020-11-05T13:01:10.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/replacing-an-element-in-an-array-with-rxjs/</id>
        <title>Replacing an Element in an Array with RxJS</title>
        <link rel="alternate" href="http://davembush.github.com/replacing-an-element-in-an-array-with-rxjs/"/>
        <content type="html">&lt;p&gt;It is not uncommon in our programming endeavors to need to replace one element in an array.  Using old school procedural programming, this would be relatively easy.  Loop through the elements, when we find the one we want to replace, change the value.  Basic for&amp;#x2F;next loop with a conditional statement. &lt;/p&gt;
&lt;p&gt;But when you move to a more functional way of programming as we need to do for NgRX, or are encouraged to do to make our code more testable, the problem becomes less straight forward. &lt;/p&gt;
&lt;p&gt;The initial solution you might try would be to just run &lt;code&gt;reduce()&lt;/code&gt; against the array.  But if we do this, we still need to put that nasty conditional within our reducer function.  This is something we’d prefer to avoid.  Yes, it will work.  But it isn’t Functional.  This problem has bothered me for months.  I’ve finally spent the time to figure out the solution. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/11/2017-11-21.jpg&#34; title=&#34;Replacing an Element in an Array with RxJS&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/manchesterlibrary/2034771121/&#34;&gt;Manchester Library&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/1b8ae8&#34;&gt;Visualhunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by-sa/2.0/&#34;&gt; CC BY-SA&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Simple-Problem&#34;&gt;&lt;a href=&#34;#Simple-Problem&#34; class=&#34;headerlink&#34; title=&#34;Simple Problem&#34;&gt;&lt;/a&gt;Simple Problem&lt;/h2&gt;&lt;p&gt;For the purposes of our discussion, we are going to assume that we have an array of integers, 1 through 5.  We want to change the value of 3 to 33.  If we were going to just extract the value and change it, we would use a filter.  But what we want to do here instead is split the array into two streams.  Elements that are 3 and elements that are not three.  You might reach for the filter function to do this. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; array = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; item = array.&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x === &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; notItem = array.&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x !== &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Merging-Arrays&#34;&gt;&lt;a href=&#34;#Merging-Arrays&#34; class=&#34;headerlink&#34; title=&#34;Merging Arrays?&#34;&gt;&lt;/a&gt;Merging Arrays?&lt;/h2&gt;&lt;p&gt;But the problem you’ll run into almost immediately is that now that we have the array split in two, how are we going to merge them back together again?  For this, we would need the &lt;code&gt;Observable.merge()&lt;/code&gt; method.  But, arrays are not &lt;code&gt;Observables&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Now, let’s rethink this problem.  What if we turn the array into an observable?&lt;/p&gt;
&lt;h2 id=&#34;Observable-Arrays&#34;&gt;&lt;a href=&#34;#Observable-Arrays&#34; class=&#34;headerlink&#34; title=&#34;Observable Arrays&#34;&gt;&lt;/a&gt;Observable Arrays&lt;/h2&gt;&lt;p&gt;We can still use the &lt;code&gt;filter()&lt;/code&gt; but now we can merge the results. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; array = &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;from&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; item = array.&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x === &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; notItem = array.&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x !== &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; mergedList = &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;merge&lt;/span&gt;(notItem, item.&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Reconstitution&#34;&gt;&lt;a href=&#34;#Reconstitution&#34; class=&#34;headerlink&#34; title=&#34;Reconstitution&#34;&gt;&lt;/a&gt;Reconstitution&lt;/h2&gt;&lt;p&gt;And now that our array, that is now an observable, is merged back together again, we can use &lt;code&gt;reduce()&lt;/code&gt; to turn it back into an array. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; reduced = &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mergedList.&lt;span class=&#34;title function_&#34;&gt;reduce&lt;/span&gt;((&lt;span class=&#34;attr&#34;&gt;acc&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&amp;gt;, &lt;span class=&#34;attr&#34;&gt;element&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;): &lt;span class=&#34;title class_&#34;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&amp;gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [...acc, element], []);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And subscribe() to get the return valued. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;reduced.&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: &lt;span class=&#34;built_in&#34;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&amp;gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the array here */&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Out-of-Order&#34;&gt;&lt;a href=&#34;#Out-of-Order&#34; class=&#34;headerlink&#34; title=&#34;Out of Order&#34;&gt;&lt;/a&gt;Out of Order&lt;/h2&gt;&lt;p&gt;But, we still have a problem.  Because we are working with an array, there is no timing to make sure the 33 is where the 3 was.  So, we end up with an array that has 33 at the end.  Maybe that’s OK.  But there are times when we need to change the array without changing the order of the elements.  What do we do now?&lt;/p&gt;
&lt;h2 id=&#34;Async-to-the-Rescue&#34;&gt;&lt;a href=&#34;#Async-to-the-Rescue&#34; class=&#34;headerlink&#34; title=&#34;Async to the Rescue&#34;&gt;&lt;/a&gt;Async to the Rescue&lt;/h2&gt;&lt;p&gt;It turns out that &lt;code&gt;Observable.from()&lt;/code&gt; takes a second parameter that controls how the elements are handled.  If we pass in &lt;code&gt;async&lt;/code&gt; for that parameter, the elements stay in order.&lt;/p&gt;
&lt;h2 id=&#34;One-pass-Filter&#34;&gt;&lt;a href=&#34;#One-pass-Filter&#34; class=&#34;headerlink&#34; title=&#34;One pass Filter&#34;&gt;&lt;/a&gt;One pass Filter&lt;/h2&gt;&lt;p&gt;Now that we have this all working, there is one final tweak we can make.  Rather than creating two different, but very similar filters, we can use the partition() method to achieve the same result in one pass. &lt;/p&gt;
&lt;p&gt;This, combined with array destructuring, allows us to simplify the code where our filter is, to &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [item, notItem] = array.&lt;span class=&#34;title function_&#34;&gt;partition&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x === &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now you have a Functional replacement of an element using RxJS.&lt;/p&gt;
&lt;h2 id=&#34;Final-Code&#34;&gt;&lt;a href=&#34;#Final-Code&#34; class=&#34;headerlink&#34; title=&#34;Final Code&#34;&gt;&lt;/a&gt;Final Code&lt;/h2&gt;&lt;p&gt;Imports you’ll need:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/scheduler/async&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;IntervalObservable&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/observable/IntervalObservable&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;TimerObservable&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/observable/TimerObservable&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;Scheduler&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/Scheduler&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;Component&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/Observable&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/add/observable/interval&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/add/observable/from&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/add/operator/partition&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/add/operator/map&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/add/operator/reduce&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/add/observable/merge&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Code:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; array = &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;from&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;], &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [item, notItem] = array.&lt;span class=&#34;title function_&#34;&gt;partition&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x ===&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;merge&lt;/span&gt;(notItem, item.&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;reduce&lt;/span&gt;((&lt;span class=&#34;attr&#34;&gt;acc&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&amp;gt;, &lt;span class=&#34;attr&#34;&gt;element&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;): &lt;span class=&#34;title class_&#34;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&amp;gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    acc = [...acc, element]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  , [])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: &lt;span class=&#34;built_in&#34;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&amp;gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;title&lt;/span&gt; += &lt;span class=&#34;title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;stringify&lt;/span&gt;(x));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="RxJS" />
        <updated>2017-11-21T11:30:34.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/angular-observable-secrets-revealed/</id>
        <title>Angular Observable Secrets Revealed</title>
        <link rel="alternate" href="http://davembush.github.com/angular-observable-secrets-revealed/"/>
        <content type="html">&lt;p&gt;If you’ve been programming JavaScript based applications for any length of time, you’ve probably already made the progression from callback hell to promises, but just to recap.  Whenever we make any kind of asynchronous call in JavaScript, we need to provide a callback function to the call so that, when the call completes, the function can be called with any resulting data.  Function calls you may typically make that need this kind of feature are &lt;code&gt;setTimeout()&lt;/code&gt;, &lt;code&gt;setInterval(),&lt;/code&gt; and AJAX calls using the various libraries that support this. &lt;/p&gt;
&lt;p&gt;The problem with using callbacks is that you can end up with “Callback Hell” where you have callbacks inside of other callbacks.  Our code becomes messy and difficult to reason about. &lt;/p&gt;
&lt;p&gt;To try to flatten this situation out, promises were created.  Instead of creating a callback function and passing it into the asynchronous function, the asynchronous function returns a promise that has a function we can pass our function into.  This function can return yet another promise.  The result is that instead of having nested callbacks, all of our callbacks live at the same level. &lt;/p&gt;
&lt;p&gt;However, in the process, we lost the ability to cancel an asynchronous function using callbacks.  Most of the time, this was not a huge concern, but in the case of AJAX calls, we did end up making more request than we really needed to.  Most people never even recognized this as an issue.  But if you go and take a look at some of your older code, you will see that you have several places where the code would work more efficiently if you were able to cancel a call that was being superseded by a new call. &lt;/p&gt;
&lt;p&gt;Meanwhile, some additional functions were added to JavaScript Arrays.  Maybe you’ve seen some of them?  map(), reduce(), and filter() are three of the more common functions. &lt;/p&gt;
&lt;p&gt;What?  You haven’t seen these?  If you have and you know how they work, you can skip this next section.  But, if you haven’t, pay careful attention because this next section is critical to understanding how Observables work. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/08/2017-08-08.jpg&#34; title=&#34;Angular Observable Secrets Revealed&#34;&gt; Photo via &lt;a href=&#34;//visualhunt.com/re/4ba464&#34;&gt;VisualHunt.com&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Array-Functions&#34;&gt;&lt;a href=&#34;#Array-Functions&#34; class=&#34;headerlink&#34; title=&#34;Array Functions&#34;&gt;&lt;/a&gt;Array Functions&lt;/h2&gt;&lt;h3 id=&#34;map&#34;&gt;&lt;a href=&#34;#map&#34; class=&#34;headerlink&#34; title=&#34;map()&#34;&gt;&lt;/a&gt;map()&lt;/h3&gt;&lt;p&gt;Let’s say you have a list of objects that you need to transform into another form.  In the example below, we want to transform our list of objects into a list that can be used in a dropdown list using fullName for the display and id for the value. &lt;/p&gt;
&lt;p&gt;Without using &lt;code&gt;map()&lt;/code&gt;, your code might look something like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newArray = []; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; someList.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; item = someList[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   newArray.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;fullName&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;firstName&lt;/span&gt; + ‘ ‘ +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The thing is, we do most of the code from &lt;code&gt;newArray = []&lt;/code&gt; on down over and over again.  It is only the code in the &lt;code&gt;push()&lt;/code&gt; that changes. &lt;/p&gt;
&lt;p&gt;What if we were to make the code into a function?  That’s what &lt;code&gt;map()&lt;/code&gt; does.  It takes a function as a parameter that takes an item as a parameter.  Inside the function, we use that item to specify how we want to transform the item and the whole map() function returns the new array. &lt;/p&gt;
&lt;p&gt;The code above, turns into this.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newArray = someList.&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;attr&#34;&gt;fullName&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;firstName&lt;/span&gt; + ‘ ‘ +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;filter&#34;&gt;&lt;a href=&#34;#filter&#34; class=&#34;headerlink&#34; title=&#34;filter()&#34;&gt;&lt;/a&gt;filter()&lt;/h3&gt;&lt;p&gt;Now, let’s say that for some reason, you only want to include items in the new array that include a last name that starts with ‘B’. Our old style code would look something like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newArray = []; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; someList.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; item = someList[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;startsWith&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;‘B’&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       newArray.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And once again, this is code we tend to write quite a bit.  So, what if we had a function that did this for us? &lt;/p&gt;
&lt;p&gt;This is exactly what the &lt;code&gt;filter()&lt;/code&gt; function is for.  So, rewriting the code above using &lt;code&gt;filter()&lt;/code&gt; would look like this.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;newArray = someList.&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;startsWith&lt;/span&gt;(‘B’);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Chaining&#34;&gt;&lt;a href=&#34;#Chaining&#34; class=&#34;headerlink&#34; title=&#34;Chaining&#34;&gt;&lt;/a&gt;Chaining&lt;/h3&gt;&lt;p&gt;Once again, you can see that we passed in a function that takes the current item as a parameter.  The function returns true or false.  If it returns true, the item gets included in the new array. &lt;/p&gt;
&lt;p&gt;What if we want to filter AND transform the data? &lt;/p&gt;
&lt;p&gt;The temptation for programmers new to this model is to use the map and push the item into an array that was declared outside of the map. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newArray = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;someList.&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;startsWith&lt;/span&gt;(‘B’)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       newArray.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;fullName&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;firstName&lt;/span&gt; + ‘ ‘ +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But that really isn’t all that much better than if we were just using a for&amp;#x2F;next loop like we’ve been doing.  Old habits die hard. &lt;/p&gt;
&lt;p&gt;Instead, we can take advantage of function chaining. What this allows us to do is to filter and then map. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Dave&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Bush&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;John&lt;/span&gt;’, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: ‘&lt;span class=&#34;title class_&#34;&gt;Doe&lt;/span&gt;’&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;newArray = someList.&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;startsWith&lt;/span&gt;(‘B’);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;.&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;attr&#34;&gt;fullName&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;firstName&lt;/span&gt; + ‘ ‘ +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       item.&lt;span class=&#34;property&#34;&gt;lastName&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: item.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;So much cleaner.&lt;/p&gt;
&lt;h3 id=&#34;reduce&#34;&gt;&lt;a href=&#34;#reduce&#34; class=&#34;headerlink&#34; title=&#34;reduce()&#34;&gt;&lt;/a&gt;reduce()&lt;/h3&gt;&lt;p&gt;The final useful function we have available to us for dealing with common array loops is reduce().  reduce() allows to loop through an array and accumulate the items in an array into another array, an object, or a value. &lt;/p&gt;
&lt;p&gt;The reduce() function take two parameters.  The first parameter is a function.  The second parameter is the starting value for the accumulator. &lt;/p&gt;
&lt;p&gt;The function that we pass in takes three parameters.  The current value of the accumulator, the current item, and the current item index.  Most people only use the first two parameters in their function.  The function returns the new accumulator value that then gets passed into the next call to the function. &lt;/p&gt;
&lt;p&gt;So, a really simple example would be, given an array of numbers, add them all up. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; numbers = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; total = numbers.&lt;span class=&#34;title function_&#34;&gt;reduce&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;sum, item&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; sum + item;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;I’ve also used this to turn an array of name&amp;#x2F;value pairs into an object where the properties are the name and the values are the values that were paired with the names.&lt;/p&gt;
&lt;h2 id=&#34;Events-as-Arrays&#34;&gt;&lt;a href=&#34;#Events-as-Arrays&#34; class=&#34;headerlink&#34; title=&#34;Events as Arrays&#34;&gt;&lt;/a&gt;Events as Arrays&lt;/h2&gt;&lt;p&gt;Now, imagine that events that fire are part of one long continuous array.  An array that never ends. If this were true listening to events would be as familiar as processing an array. &lt;/p&gt;
&lt;p&gt;This is all an observable is.  It treats everything as though it were an array, adds several other functions that give us even greater functionality, and several functions that allow us to deal with the fact that events are not only sequential, but also time based. &lt;/p&gt;
&lt;p&gt;And because events aren’t really arrays, we call this series of items a “stream.”  So, when you read about “streams” while working with Observables think, “list of items.”&lt;/p&gt;
&lt;h3 id=&#34;Button-Click&#34;&gt;&lt;a href=&#34;#Button-Click&#34; class=&#34;headerlink&#34; title=&#34;Button Click&#34;&gt;&lt;/a&gt;Button Click&lt;/h3&gt;&lt;p&gt;For example, let’s say you have a button on your screen and you want to know when it is pressed.  Let’s say your button is represented by a member variable name “myButton”.  In your code, you would listen to a button click by writing code that looks something like: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fromEvent&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;myButton&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;/* do something in response to the click here */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You will notice that we used the &lt;code&gt;subscribe()&lt;/code&gt; function instead of &lt;code&gt;map()&lt;/code&gt;.  We still have a &lt;code&gt;map()&lt;/code&gt; function.  But, &lt;code&gt;subscribe()&lt;/code&gt; is how we tell the application, “we want to start listening to the stream now.”  Otherwise, &lt;code&gt;subscribe()&lt;/code&gt; works just like map() does. &lt;/p&gt;
&lt;p&gt;Yes, I know what you’re thinking.  “How is that better than just having the template call an event handler?” &lt;/p&gt;
&lt;p&gt;Well, the fact of the matter is, it really isn’t all that much better.  But, here is where it does make more sense.&lt;/p&gt;
&lt;h3 id=&#34;Debouncing-Keystrokes&#34;&gt;&lt;a href=&#34;#Debouncing-Keystrokes&#34; class=&#34;headerlink&#34; title=&#34;Debouncing Keystrokes&#34;&gt;&lt;/a&gt;Debouncing Keystrokes&lt;/h3&gt;&lt;p&gt;If you’ve been writing application in JavaScript for a while, I’m sure you’ve written classic debounce handlers.  You know.  Don’t actually fire this event until you are no longer receiving change events from the input field. &lt;/p&gt;
&lt;p&gt;I won’t write out the old code here.  It is relatively long, hard to follow, and therefore somewhat complicated. &lt;/p&gt;
&lt;p&gt;But here is how we handle it using Observables. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fromEvent&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;myInput&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;change&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;debounceTime&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;250&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;/* do something in response to the input field change here */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;debounceTime(250)&lt;/code&gt; tells the Observable to wait for 250 milliseconds to see if there is some other event that comes in and use that event instead.  That is much easier than the old way.&lt;/p&gt;
&lt;h3 id=&#34;AJAX&#34;&gt;&lt;a href=&#34;#AJAX&#34; class=&#34;headerlink&#34; title=&#34;AJAX&#34;&gt;&lt;/a&gt;AJAX&lt;/h3&gt;&lt;p&gt;While you could handle button clicks and debounce logic using old school JavaScript tricks, in Angular, it is practically impossible to make an AJAX call without using Observables.  This is because the &lt;code&gt;Http&lt;/code&gt; service and the &lt;code&gt;HttpClient&lt;/code&gt; that was introduced in Angular 4.3 use Observables instead of callbacks or promises to manage dealing with the data that eventually is returned from the AJAX call. &lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;Http&lt;/code&gt; and &lt;code&gt;HttpClient&lt;/code&gt; are similar, we will continue our discussion of handling AJAX calls using &lt;code&gt;HttpClient&lt;/code&gt;.  The main advantage to using &lt;code&gt;HttpClient&lt;/code&gt; is that it handles parsing the response into a JavaScript object we can use.  &lt;code&gt;Http&lt;/code&gt; just returns the raw Response object and parsing it out is up to us. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;HttpClient&lt;/code&gt;, on the other hand, returns the object we would have parsed out with &lt;code&gt;Http&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;NOw, assuming you’ve injected HttpClient into the class that is going to use it, a typical get might looks something like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;httpClient&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;TypeInfo&lt;/span&gt;&amp;gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/api/get-data&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: TypeInfo&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the data */&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;So, walking through this, you may notice that some things look very similar to Promises and then, there are some other things that aren’t so much.  But trust me this gets much better.  We are just starting out small. &lt;/p&gt;
&lt;p&gt;First, what is that &lt;code&gt;TypeInfo&lt;/code&gt; thing? &lt;/p&gt;
&lt;p&gt;You see, our get call is what is normally referred to as a “templated method.”  In simple terms, get doesn’t know what type it returns until you tell it.  So, we are telling it that it returns a &lt;code&gt;TypeInfo&lt;/code&gt; type.  &lt;code&gt;TypeInfo&lt;/code&gt; is just a name I made up.  You would create an interface that is relevant to the type of information that your AJAX code is returning. &lt;/p&gt;
&lt;p&gt;Other than that, we subscribe to the observable that get() returns and process the data. &lt;/p&gt;
&lt;p&gt;Noq, what if our get call fails? &lt;/p&gt;
&lt;p&gt;Oh! We have methods for that. &lt;/p&gt;
&lt;p&gt;First, we can trap failures with a &lt;code&gt;catch()&lt;/code&gt; call. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;httpClient&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;TypeInfo&lt;/span&gt;&amp;gt;(‘/api/get-data’)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;err&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;Error&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the error */&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: TypeInfo&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the data */&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Next, maybe you want to &lt;code&gt;retry&lt;/code&gt; the failed call before you give up. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;httpClient&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;TypeInfo&lt;/span&gt;&amp;gt;(‘/api/get-data’)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;retry&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;err&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;Error&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the error */&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: TypeInfo&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/* do something with the data */&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And because we have a &lt;code&gt;catch()&lt;/code&gt;, with must have a &lt;code&gt;finally&lt;/code&gt; too, right? &lt;/p&gt;
&lt;p&gt;Try doing all of that with a Promise or a Callback. &lt;/p&gt;
&lt;p&gt;Oh, and did I mention you can cancel AJAX calls using Observables?  Yep.  It’s true.  In fact, my experience has been that if you make the same call from the same service two times in a row, it will cancel the first call before it makes the second.  Pretty cool. &lt;/p&gt;
&lt;p&gt;The final thing that tends to trip people up who are learning about Observables is that nothing in the observable chain executes until you subscribe to the observable and an event happens. &lt;/p&gt;
&lt;p&gt;Once you start getting comfortable with all of the methods you have available to you, you’ll begin to see the power of using Observables over using Promises or Callbacks, even if there are similarities.&lt;/p&gt;
</content>
        <category term="angular" />
        <category term="observables" />
        <category term="RxJS" />
        <updated>2017-08-08T10:30:11.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/real-world-rxjs-marble-testing-revealed/</id>
        <title>Real World RxJS Marble Testing Revealed</title>
        <link rel="alternate" href="http://davembush.github.com/real-world-rxjs-marble-testing-revealed/"/>
        <content type="html">&lt;p&gt;There must be some evil plot to keep this information a secret because whenever I search for how to use RxJS Marble Testing all I see is how to use it to write tests for RxJS.  Well I’ve finally “cracked the code.” &lt;/p&gt;
&lt;p&gt;In this article you’ll learn the basics of RxJS Marble Testing and how to apply Marble Testing to your own code.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/06/2017-06-13.jpg &#34;Real World RxJS Marble Testing Revealed&#34;) Photo via [Visualhunt](//visualhunt.com/re/9662e0)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;It-All-Started-When-…&#34;&gt;&lt;a href=&#34;#It-All-Started-When-…&#34; class=&#34;headerlink&#34; title=&#34;It All Started When …&#34;&gt;&lt;/a&gt;It All Started When …&lt;/h2&gt;&lt;p&gt;It all started about a month ago when I needed to write a unit test for code that updated the screen once every 15 seconds. Writing a test that would simulate the clock moving forward 15 seconds in old school JavaScript would have been pretty easy.  But I had written my code using RxJS instead of the old school &lt;code&gt;setTimeout()&lt;/code&gt; method we’ve been using for this kind of feature in the past. &lt;/p&gt;
&lt;p&gt;Specifically, I had used &lt;code&gt;Observable.timer(0, 15000);&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;My first attempt to write tests for this were based on the assumption that, under the hood, &lt;code&gt;setTimeout()&lt;/code&gt; was still being used. Just a simple matter of mocking the clock and advancing the timer. Right?&lt;/p&gt;
&lt;p&gt;Wrong!&lt;/p&gt;
&lt;p&gt;Then my initial search brought me to the NgRX 4 way of writing tests for Observables. Only, I didn’t find that out until I had written some code that didn’t work. &lt;/p&gt;
&lt;p&gt;Eventually, I found this thing called Marble Testing. But, as I’ve already mentioned, all the examples I’ve found for how to write test are for written test for the various methods available in the RxJS library. &lt;/p&gt;
&lt;p&gt;I’m guess, if you are still reading, I’ve described your journey as well.&lt;/p&gt;
&lt;h2 id=&#34;Assumptions&#34;&gt;&lt;a href=&#34;#Assumptions&#34; class=&#34;headerlink&#34; title=&#34;Assumptions&#34;&gt;&lt;/a&gt;Assumptions&lt;/h2&gt;&lt;p&gt;For the remainder of this article, I’m going to assume you know how to use RxJS. If you don’t there is already a lot of good information available on that topic that you should easily be able to find by using one of the search engines.&lt;/p&gt;
&lt;p&gt;I’m also going to describe how to use marbles in your tests using Jasmine. I use Jasmine because that is the engine all the frameworks that I use end up using. There are other tools that may or may not be better. But I have no reason to leave what everyone else has already picked as a defacto standard.&lt;/p&gt;
&lt;h2 id=&#34;Marble-Basics&#34;&gt;&lt;a href=&#34;#Marble-Basics&#34; class=&#34;headerlink&#34; title=&#34;Marble Basics&#34;&gt;&lt;/a&gt;Marble Basics&lt;/h2&gt;&lt;p&gt;Since there is a lot of detail on the basics of using Marbles, I only plan on summarizing what you need to know here.  For more details, check out &lt;a href=&#34;//github.com/ReactiveX/rxjs/blob/master/doc/writing-marble-tests.md&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;Create-Observables&#34;&gt;&lt;a href=&#34;#Create-Observables&#34; class=&#34;headerlink&#34; title=&#34;Create Observables&#34;&gt;&lt;/a&gt;Create Observables&lt;/h3&gt;&lt;p&gt;First, you can create either hot observables or cold observables. To do this, you’ll need to create an instance of &lt;code&gt;TestScheduler&lt;/code&gt; and then you call either &lt;code&gt;createHotObservable()&lt;/code&gt; or &lt;code&gt;createColdObservable()&lt;/code&gt; passing a string that defines what you want your observables to do. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; testScheduler = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestScheduler&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; hotObservable = testScheduler.&lt;span class=&#34;title function_&#34;&gt;createHotObservable&lt;/span&gt;(hotMarbleString);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; coldObservable = testScheduler.&lt;span class=&#34;title function_&#34;&gt;createColdObservable&lt;/span&gt;(coldMarbleString);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Marble-Syntax&#34;&gt;&lt;a href=&#34;#Marble-Syntax&#34; class=&#34;headerlink&#34; title=&#34;Marble Syntax&#34;&gt;&lt;/a&gt;Marble Syntax&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;-&amp;quot;&lt;/code&gt; time: 10 “frames” of time passage.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;|&amp;quot;&lt;/code&gt; complete: The successful completion of an observable. This is the observable producer signaling &lt;code&gt;complete()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;#&amp;quot;&lt;/code&gt; error: An error terminating the observable. This is the observable producer signaling &lt;code&gt;error()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt; any character: All other characters represent a value being emitted by the producer signaling &lt;code&gt;next()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;()&amp;quot;&lt;/code&gt; sync groupings: When multiple events need to single in the same frame synchronously, parenthesis are used to group those events. You can group next values, a completion or an error in this manner. The position of the initial &lt;code&gt;(&lt;/code&gt;determines the time at which its values are emitted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;^&amp;quot;&lt;/code&gt; subscription point: (hot observables only) shows the point at which the tested observables will be subscribed to the hot observable. This is the “zero frame” for that observable, every frame before the &lt;code&gt;^&lt;/code&gt; will be negative.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most simple of observables using marbles would look like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;a|&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This would cause an observable event to fire right away and it would pass “a” as the data for the observable.  The observable would then end because the | comes next. &lt;/p&gt;
&lt;p&gt;In the case of the timer I was testing, I don’t need the data, I just need the “event” to fire so my code runs.&lt;/p&gt;
&lt;h2 id=&#34;Marbles-as-Mocks&#34;&gt;&lt;a href=&#34;#Marbles-as-Mocks&#34; class=&#34;headerlink&#34; title=&#34;Marbles as Mocks&#34;&gt;&lt;/a&gt;Marbles as Mocks&lt;/h2&gt;&lt;p&gt;So far, I probably haven’t told you anything that you couldn’t already figure out by doing a basic search.  But, the question remains, how do we use this marble stuff in our own test? &lt;/p&gt;
&lt;p&gt;And the answer that no one seems to be talking about is that you use marbles to mock out the real observable just like you might create a mock object to replace a real object in any other test. &lt;/p&gt;
&lt;p&gt;In the case of the timer problem above, what I needed to do was to make sure that &lt;code&gt;Observable.timer(0, 15000);&lt;/code&gt; returns an observable that was created with a marble instead of an observable created with the timer.  In Jasmine, we do that with &lt;code&gt;spyOn()&lt;/code&gt; &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;testScheduler = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestScheduler&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;spyOn&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;timer&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;property&#34;&gt;and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;returnValue&lt;/span&gt;(testScheduler.&lt;span class=&#34;title function_&#34;&gt;createHotObservable&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;---a|&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The rest of your code really doesn’t care what kind of observable it is, it will do whatever it is it has been coded to do. &lt;/p&gt;
&lt;p&gt;The only thing you need to do to make sure the observable and subscribes do their thing is to make sure you call &lt;code&gt;flush()&lt;/code&gt; on the &lt;code&gt;TestScheduler&lt;/code&gt; instance prior to running an &lt;code&gt;expect()&lt;/code&gt; in your Jasmine test.&lt;/p&gt;
&lt;h2 id=&#34;Other-Uses&#34;&gt;&lt;a href=&#34;#Other-Uses&#34; class=&#34;headerlink&#34; title=&#34;Other Uses&#34;&gt;&lt;/a&gt;Other Uses&lt;/h2&gt;&lt;p&gt;What I’ve shown so far takes care of my 15 second refresh issue. But now, what if I have an observable that expects data? For example, how would I write a test that uses an observable based on an AJAX request as a dependency? In Angular, this would be Http. &lt;/p&gt;
&lt;p&gt;This is actually very simple. The second parameter to either &lt;code&gt;createHotObservable()&lt;/code&gt; or &lt;code&gt;createColdObservable()&lt;/code&gt; is the data you want to send on to the subscribe when it hits the associated marble. You pass this in as an object literal. So, just to keep things simple. Say that when you hit the “a” marble, you want to pass the subscribe an object that has a first name and a last name. Your code might look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;testScheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;createHotObservable&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;-a|&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;: &amp;#123;&lt;span class=&#34;attr&#34;&gt;firstName&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Dave&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;lastName&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Bush&amp;#x27;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;By using this type of marble mocking, you could not just create unit tests, but you could also create End to End tests that use marbles to return consistent data rather than hitting the back end. Obviously, you would still need to write tests that ensure your back end is going to return the same type of data, but I see that as a separate issue from ensuring that the front end does everything it should do as a system. Anyhow, it is an option.&lt;/p&gt;
</content>
        <category term="angular" />
        <category term="RxJS" />
        <category term="Marble Testing" />
        <updated>2017-06-13T10:30:25.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/functional-reactive-angular-revealed/</id>
        <title>Functional Reactive Angular Revealed</title>
        <link rel="alternate" href="http://davembush.github.com/functional-reactive-angular-revealed/"/>
        <content type="html">&lt;p&gt;Over the last month or so, I’ve been presenting the basics of &lt;a href=&#34;/tags/ngrx/&#34;&gt;how to use NgRX&amp;#x2F;Store with Angular&lt;/a&gt;. In the past, I’ve praised the virtues of &lt;a href=&#34;/tags/reactive-forms/&#34;&gt;Reactive Forms&lt;/a&gt;, also known as &lt;a href=&#34;/tags/model-driven/&#34;&gt;Model Driven Forms&lt;/a&gt;. These along with RxJS make up the pillars of Functional Reactive Angular Programming.&lt;/p&gt;
&lt;p&gt;What is sad is that this reality is lost on so much of the Angular community. When I listen to podcast where they talk about any of these concepts individually, Function Reactive Programming (FRP) is barely, if ever, mentioned.&lt;/p&gt;
&lt;p&gt;But the scary thing is this, there are many people who are going to use the new Angular the way they used the old Angular and they will completely miss the main advantages. They may even jump from Angular to React or (even) Aurelia. And that’s just picking on the most recent frameworks. Some will want to go back to Egypt and decide jQuery is a good choice!&lt;/p&gt;
&lt;p&gt;Functional Reactive Programming is not just a hot new model. It solves a lot of problems.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/05/2017-05-30.png &#34;Functional Reactive Angular Revealed&#34;) Photo via [VisualHunt.com](//visualhunt.com/re/b10788)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Object-Oriented-Failure&#34;&gt;&lt;a href=&#34;#Object-Oriented-Failure&#34; class=&#34;headerlink&#34; title=&#34;Object-Oriented Failure&#34;&gt;&lt;/a&gt;Object-Oriented Failure&lt;/h2&gt;&lt;p&gt;Several years ago, I wrote an article called, “&lt;a href=&#34;/object-oriented-programming-has-failed-us/&#34;&gt;Object-Oriented Programming Has Failed Us&lt;/a&gt;”. In the article, I put forth the reality that most people are unable to think in object-oriented terms. Humans think sequentially and chunk down. Object-Oriented Programming requires us to think holistically, frequently in parallel, and chunk up.&lt;/p&gt;
&lt;p&gt;So, lets define some terms. Chunking down is the act of finding differences between things. This is why we discriminate. At times, it is useful to find differences. If you are a microbiologist, you want to do this so you know you are working with one strain of virus vs some other strain.&lt;/p&gt;
&lt;p&gt;As you might have guessed, Chunking Up, is the exact opposite. We look for commonalities. Given two different things, what is the same between them?&lt;/p&gt;
&lt;p&gt;The problem is, that’s not how most of us naturally process the world. There are other problems with Object-Oriented Programming.&lt;/p&gt;
&lt;h3 id=&#34;Hard-to-Reason-About&#34;&gt;&lt;a href=&#34;#Hard-to-Reason-About&#34; class=&#34;headerlink&#34; title=&#34;Hard to Reason About&#34;&gt;&lt;/a&gt;Hard to Reason About&lt;/h3&gt;&lt;p&gt;Back when I was teaching for a training company, I was explaining some concept of Object-Oriented Programming, probably Virtual Functions, to a student that came from a procedural programming world. His comment was, “this is going to make the code really hard to debug!” to which I responded, “not if you step through with the debugger.” But, the truth is, he was right. Debugging Object-Oriented code is difficult because the code is hard to read and reason about. Looking at any one class, am I ever sure that I’m seeing the whole picture?&lt;/p&gt;
&lt;p&gt;Think about this. When you write a class, and have a member variable, how long is it before you’ve forgotten the fact that the variable exists and is implicitly a parameter that is being passed to your function. Not long! And this means that you can never really be sure that when you go to use that function, the state of the object will always be the same.&lt;/p&gt;
&lt;p&gt;This makes the code incredibly hard to test. I’m not even talking about using Test Driven Development. Just any kind of test that have way ensures that the code you’ve written does what you think it does and doesn’t do what you don’t think it does.&lt;/p&gt;
&lt;h3 id=&#34;Single-Responsibility&#34;&gt;&lt;a href=&#34;#Single-Responsibility&#34; class=&#34;headerlink&#34; title=&#34;Single Responsibility&#34;&gt;&lt;/a&gt;Single Responsibility&lt;/h3&gt;&lt;p&gt;One of the rules for Object-Oriented Programming is that we should follow the “Single Responsibility Principle” I ask you, how far do we chunk down to ensure we are only doing one thing in our class?  In fact, many of the principles we have developed are trying to put fences around the inherent problems with programming in an Object-Oriented mindset.&lt;/p&gt;
&lt;h2 id=&#34;Procedural-Programming&#34;&gt;&lt;a href=&#34;#Procedural-Programming&#34; class=&#34;headerlink&#34; title=&#34;Procedural Programming&#34;&gt;&lt;/a&gt;Procedural Programming&lt;/h2&gt;&lt;p&gt;The benefit of Procedural Programming is that I at least knew what parameters I was always going to get.  The disadvantage is that it was still incredibly hard to test because my function could call other function that could call yet other functions.  This meant that I could only really test the functions that were at the end of the hierarchy and really had no good way of mocking out child functions.  While testing is hard in an Object-Oriented world, it is nearly impossible in a procedural world.&lt;/p&gt;
&lt;h2 id=&#34;What-If&#34;&gt;&lt;a href=&#34;#What-If&#34; class=&#34;headerlink&#34; title=&#34;What If&#34;&gt;&lt;/a&gt;What If&lt;/h2&gt;&lt;p&gt;But, what if there were a way to write code that solved most of these problems. A way that better mirrored how we thought, that is easier to reason about, that allows you to chunk down – that forced you to chunk down. A way of coding that was so easy to test, that you frequently didn’t even need to write the test. This is the advantage of Functional Programming generally, and the reason you want to use the combination of NgRX&amp;#x2F;Store, Reactive Forms, and RxJS in the bulk of your Angular code.&lt;/p&gt;
&lt;h2 id=&#34;How-To&#34;&gt;&lt;a href=&#34;#How-To&#34; class=&#34;headerlink&#34; title=&#34;How To&#34;&gt;&lt;/a&gt;How To&lt;/h2&gt;&lt;h3 id=&#34;Basics&#34;&gt;&lt;a href=&#34;#Basics&#34; class=&#34;headerlink&#34; title=&#34;Basics&#34;&gt;&lt;/a&gt;Basics&lt;/h3&gt;&lt;p&gt;You’ll remember from our discussion of NgRX that we setup a reducer to return a new state object for a particular entity in our store. You’ll also remember that we are able to create an entity that has child entities and that we can subscribe to any entity using code that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;entityName&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;or&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;entityName&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;subEntity&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you need to, you can read my previous articles that I’ve already referred to.&lt;/p&gt;
&lt;p&gt;I normally setup an entity in my store for each screen, then for data I am just displaying I subscribe in the template using&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&amp;#123;(observerThing | async)?.variableThing&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;(observerThing | async)&lt;/code&gt; is the same as the code we would normally write in TypeScript:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;observerThing.&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;async&lt;/code&gt; does the &lt;code&gt;subscribe&lt;/code&gt; and returns &lt;code&gt;x&lt;/code&gt;. The &lt;code&gt;?&lt;/code&gt; ensures that we don’t attempt to go after &lt;code&gt;.variableThing&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is all pretty basic stuff.&lt;/p&gt;
&lt;p&gt;But what about working with forms.&lt;/p&gt;
&lt;h3 id=&#34;Forms&#34;&gt;&lt;a href=&#34;#Forms&#34; class=&#34;headerlink&#34; title=&#34;Forms&#34;&gt;&lt;/a&gt;Forms&lt;/h3&gt;&lt;p&gt;I’ve found that the best way to work with forms is to create a structure in my entity that maps directly to my form. So, if I have a form with firstName, lastName, and birthDate, I’ll define my form in my template with a form group using firstName, lastName, and birthDate as formControlName values.&lt;/p&gt;
&lt;p&gt;Next, in my TypeScript code, I’ll subscribe to the form group’s valueChanges property. Any time my form changes, the subscribe dispatches the changes to the reducer for my entity and updates the store.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;property&#34;&gt;myFormGroup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;property&#34;&gt;valueChanges&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; store.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;comment&#34;&gt;/* action thing goes here */&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, I can setup a &lt;code&gt;subscribe&lt;/code&gt; on my entity and any time the data in the entity changes, I can update the form group.&lt;/p&gt;
&lt;p&gt;There is a small little trick you need to know about here. I already showed you how to update the form group using &lt;code&gt;patchValue()&lt;/code&gt; &lt;a href=&#34;/angular2-model-driven-forms-are-superior/&#34;&gt;here&lt;/a&gt;. But because we were not dealing with a fully Functional Reactive programming model, I left out a part you’ll need here.&lt;/p&gt;
&lt;p&gt;When you update your code using &lt;code&gt;patchValue()&lt;/code&gt;, the first parameter will still be the data you want to change. That is, the values from the store’s entity. But for the second parameter, you’ll need to pass in &lt;code&gt;&amp;#123;emitEvent: false&amp;#125;&lt;/code&gt;, otherwise, you’ll end up with an infinite loop. Your form will cause your reducer to change and your store will cause your form to change. What that second parameter is saying is that we don’t want any of the change events to fire because we’ve updated the form.&lt;/p&gt;
&lt;p&gt;You may also want to consider writing code in your reducer that only returns a new state object if no data has changed.&lt;/p&gt;
&lt;h3 id=&#34;RxJS&#34;&gt;&lt;a href=&#34;#RxJS&#34; class=&#34;headerlink&#34; title=&#34;RxJS&#34;&gt;&lt;/a&gt;RxJS&lt;/h3&gt;&lt;p&gt;Now, nothing about anything I’ve written in the “how to” is particularly Functional, but it is Reactive. By virtue of the subscribes, it is reacting to state change and reacting to changes in the form. What makes our code Functional, is that we make use of RxJS, a Reactive library, to process the data. If you’ve already been using the Http object in Angular, you’ve already been using RxJS.&lt;/p&gt;
&lt;p&gt;There is a great &lt;a href=&#34;//reactivex.io/learnrx/&#34;&gt;tutorial for learning RxJS&lt;/a&gt; that the guys at NetFlix have put together. I’m not even going to attempt to teach RxJS here. They’ve got the best material and it is what helped me wrap my head around the basic concepts.&lt;/p&gt;
&lt;p&gt;What I do want to point out here is what makes Functional programming Functional so that you end up using RxJS correctly.  While these are not hard and fast rules, I would encourage you to break these rules only after you can’t find any other way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The output of one function becomes the input for the next function.&lt;/li&gt;
&lt;li&gt;A function never causes a side effect (this is why NgRX has Effects)&lt;/li&gt;
&lt;li&gt;The same parameters in will always produce the same data out.&lt;/li&gt;
&lt;li&gt;Avoid conditionals and use .filter(), .case() etc instead.&lt;/li&gt;
&lt;li&gt;Ideally the cyclomatic complexity of a function should be 1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By following these rules, you will find that most of the code you write doesn’t need to have any test.  Why would you ever test a function with a cyclomatic complexity of 1, or code that has no conditions?&lt;/p&gt;
&lt;h2 id=&#34;The-Right-Tool-for-the-Job&#34;&gt;&lt;a href=&#34;#The-Right-Tool-for-the-Job&#34; class=&#34;headerlink&#34; title=&#34;The Right Tool for the Job&#34;&gt;&lt;/a&gt;The Right Tool for the Job&lt;/h2&gt;&lt;p&gt;While I would love to be able to use Functional programming everywhere, I recognize that it isn’t always the best tool for the job. For example, at least with Angular, there isn’t a good way of writing our components and pages in a strictly Functional way. However, if you use what I’ve illustrated here, you’ll find that even though the structure of your components are Object-Oriented, much of the code within the component is quite functional.&lt;/p&gt;
</content>
        <category term="angular" />
        <category term="RxJS" />
        <category term="NgRX" />
        <updated>2017-05-30T10:30:46.000Z</updated>
    </entry>
</feed>
