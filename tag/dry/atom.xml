<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://davembush.github.com</id>
    <title>Dave&#39;s Notebook • Posts by &#34;dry&#34; tag</title>
    <link href="http://davembush.github.com" />
    <updated>2016-09-27T10:30:00.000Z</updated>
    <category term="project management" />
    <category term="code coverage" />
    <category term="tdd" />
    <category term="unit test" />
    <category term="code" />
    <category term="programming" />
    <category term="angular" />
    <category term="javascript" />
    <category term="performance" />
    <category term="react.js" />
    <category term="agile" />
    <category term="failure" />
    <category term="kanban" />
    <category term="scrum" />
    <category term="interview" />
    <category term="job search" />
    <category term="test driven development" />
    <category term="mvvm" />
    <category term="DRY" />
    <category term="loose coupling" />
    <category term="single responsibility" />
    <category term="c#" />
    <category term="learning" />
    <category term="bug" />
    <category term="ext js" />
    <category term="sencha" />
    <category term="career" />
    <category term="react" />
    <category term="ngrx" />
    <category term="redux" />
    <category term="functional" />
    <category term="reactive" />
    <category term="mvp" />
    <category term="private" />
    <category term="testing" />
    <category term="typescript" />
    <category term="routing" />
    <category term="pointers" />
    <category term="unsafe" />
    <category term="class diagram" />
    <category term="vb.net" />
    <category term="visual studio" />
    <category term="flux" />
    <category term="lazy loading" />
    <category term="scope" />
    <category term="DOM" />
    <category term="ionic" />
    <category term="putty" />
    <category term="ssh" />
    <category term="formgroup" />
    <category term="validation" />
    <category term="angular-cli" />
    <category term="modules" />
    <category term="ngmodule" />
    <category term="observables" />
    <category term="RxJS" />
    <category term="model driven" />
    <category term="reactive forms" />
    <category term="estimating" />
    <category term="story points" />
    <category term="best practices" />
    <category term="design patterns" />
    <category term="architecture" />
    <category term="asp.net" />
    <category term="memory" />
    <category term="angular.js" />
    <category term="iis" />
    <category term="ajax" />
    <category term="json" />
    <category term="controller" />
    <category term="MVC" />
    <category term="view" />
    <category term="404" />
    <category term="application_error" />
    <category term="exceptions" />
    <category term="viewstate" />
    <category term="archietcture" />
    <category term="bll" />
    <category term="dal" />
    <category term="Three Tiered" />
    <category term=".net" />
    <category term="enums" />
    <category term="tutorial" />
    <category term="code quality" />
    <category term="cyclomatic" />
    <category term="halstead" />
    <category term="child component" />
    <category term="CefSharp" />
    <category term="Chromium" />
    <category term="Vista" />
    <category term="VPN" />
    <category term="xp" />
    <category term="get" />
    <category term="properties" />
    <category term="set" />
    <category term="empty" />
    <category term="string" />
    <category term="habits" />
    <category term="application testing" />
    <category term="dependency injection" />
    <category term="debugging" />
    <category term="cms" />
    <category term="dotnetnuke" />
    <category term="WordPress" />
    <category term="authority" />
    <category term="confidence" />
    <category term="datalist" />
    <category term="listview" />
    <category term="comments" />
    <category term="tdd. agile" />
    <category term="bootstrap" />
    <category term="copy &amp;amp; paste" />
    <category term="cross browser" />
    <category term="idisposable" />
    <category term="animation" />
    <category term="css" />
    <category term="html" />
    <category term="debug" />
    <category term="checked" />
    <category term="double" />
    <category term="float" />
    <category term="int" />
    <category term="long" />
    <category term="short" />
    <category term="unchecked" />
    <category term="currency" />
    <category term="decimal" />
    <category term="floating point math" />
    <category term="single" />
    <category term="authentication" />
    <category term="isinrole" />
    <category term="roles" />
    <category term="user" />
    <category term="definition of done" />
    <category term="DoD" />
    <category term="dispose" />
    <category term="finalize" />
    <category term="suppressfinalize" />
    <category term="education" />
    <category term="client side" />
    <category term="development" />
    <category term="class" />
    <category term="dynamic classing" />
    <category term="gridview" />
    <category term="college" />
    <category term="freshman" />
    <category term="babel" />
    <category term="es2015" />
    <category term="es6" />
    <category term="jest" />
    <category term="bdd" />
    <category term="Single Responsibility" />
    <category term="Architecture" />
    <category term="full stack developer" />
    <category term="web development" />
    <category term="formsauthentication" />
    <category term="manual" />
    <category term="redirectfromloginpage" />
    <category term="setauthcookie" />
    <category term="NgRX" />
    <category term="luck" />
    <category term="social skills" />
    <category term="brain" />
    <category term="health" />
    <category term="programmer" />
    <category term="productivity" />
    <category term="QA" />
    <category term="extreme programming" />
    <category term="software" />
    <category term="httpcontext" />
    <category term="items" />
    <category term="session" />
    <category term="naming conventions" />
    <category term="variables" />
    <category term="self improvement" />
    <category term="301" />
    <category term="302" />
    <category term="fiddler" />
    <category term="infinite loop" />
    <category term="images" />
    <category term="iTextSharp" />
    <category term="PDF" />
    <category term="concatenation" />
    <category term="quirks" />
    <category term="parsing" />
    <category term="xhtml" />
    <category term="fonts" />
    <category term="stack" />
    <category term="htmltidy" />
    <category term="tables" />
    <category term="acrofields" />
    <category term="form fields" />
    <category term="outputstream" />
    <category term="pdfreader" />
    <category term="pdfstamper" />
    <category term="bind" />
    <category term="callbacks" />
    <category term="currying" />
    <category term="events" />
    <category term="business rules" />
    <category term="boolean" />
    <category term="fields" />
    <category term="methods" />
    <category term="object" />
    <category term="functions" />
    <category term="inheritance" />
    <category term="prototype" />
    <category term="hoist" />
    <category term="falsy" />
    <category term="truthy" />
    <category term="istanbul" />
    <category term="jasmine" />
    <category term="hoisting" />
    <category term="types" />
    <category term="type conversion" />
    <category term="dialog" />
    <category term="jQuery" />
    <category term="validation controls" />
    <category term="async" />
    <category term="each" />
    <category term="collapse" />
    <category term="expand" />
    <category term="load" />
    <category term="partial content" />
    <category term="tooltip" />
    <category term="regions" />
    <category term="limiting beliefs" />
    <category term="angular material" />
    <category term="linkedin" />
    <category term="social media" />
    <category term="tips" />
    <category term="CI. Continuous Integration" />
    <category term="magic numbers" />
    <category term="magic strings" />
    <category term="flex" />
    <category term="multiview" />
    <category term="wizard" />
    <category term="threading" />
    <category term="intern" />
    <category term="express" />
    <category term="node" />
    <category term="nunit" />
    <category term="object initializers" />
    <category term="video" />
    <category term="reflection" />
    <category term="unity" />
    <category term="best practice" />
    <category term="asp.net postback button" />
    <category term="iText" />
    <category term="property based testing" />
    <category term="cli" />
    <category term="software architecture" />
    <category term="rxjs. angular 2" />
    <category term="redirect" />
    <category term="response" />
    <category term="responsive design" />
    <category term="parallel" />
    <category term="selenium" />
    <category term="Marble Testing" />
    <category term="java" />
    <category term="grid" />
    <category term="hub" />
    <category term="serialization" />
    <category term="specflow" />
    <category term="like" />
    <category term="sql" />
    <category term="tsql" />
    <category term="where clause" />
    <category term="do while" />
    <category term="for next" />
    <category term="ms-sql" />
    <category term="while" />
    <category term="gamification" />
    <category term="paired programming" />
    <category term="reference types" />
    <category term="stringbuilder" />
    <category term="value types" />
    <category term="technical debt" />
    <category term="activetabindex" />
    <category term="postback" />
    <category term="tab control" />
    <category term="tabcontrol" />
    <category term="kata" />
    <category term="extjs" />
    <category term="email" />
    <category term="mailaddress" />
    <category term="mailmessage" />
    <category term="smtpclient" />
    <category term="Quality" />
    <category term="behavior" />
    <category term="psychology" />
    <category term="portal" />
    <category term="web 1.0" />
    <category term="web 2.0" />
    <category term="trace" />
    <category term="compiler" />
    <category term="errror" />
    <category term="warning" />
    <category term="connection string" />
    <category term="dataset" />
    <category term="error" />
    <category term="web.config" />
    <category term="tslint" />
    <category term="emotions" />
    <category term="hiring" />
    <category term="aspnet_regsql" />
    <category term="forms based authentication" />
    <category term="jsdom" />
    <category term="karma" />
    <category term="noTDD" />
    <category term="bundling" />
    <category term="gulp" />
    <category term="minification" />
    <category term="node.js" />
    <category term="file upload" />
    <category term="objects" />
    <category term="hide" />
    <category term="vb.net attributes" />
    <category term="nothing" />
    <category term="nullable" />
    <category term="conditional startup" />
    <category term="windows forms" />
    <category term="winforms" />
    <category term="char" />
    <category term="split" />
    <category term="strict" />
    <category term="clarity" />
    <category term="ui" />
    <category term="ux" />
    <category term="asmx" />
    <category term="error handling" />
    <category term="webservice" />
    <category term="binary" />
    <category term="bitwise" />
    <category term="operators" />
    <category term="automation" />
    <category term="browser" />
    <category term="mstest" />
    <category term="immutable" />
    <category term="global" />
    <category term="await" />
    <category term="webapi" />
    <category term="configuration" />
    <category term="devops" />
    <category term="testcasedata" />
    <category term="testcasesource" />
    <category term="closure" />
    <category term="loops" />
    <category term="certification" />
    <category term="mcsd" />
    <category term="microsoft" />
    <category term="inversion of control" />
    <category term="ioc" />
    <category term="casting" />
    <category term="convert" />
    <category term="arguements" />
    <category term="command line" />
    <category term="main" />
    <category term="yagni" />
    <category term="npm" />
    <category term="nvm" />
    <category term="resumes" />
    <category term="change-detection" />
    <category term="state-management" />
    <category term="web-workers" />
    <category term="libraries" />
    <category term="strong typing" />
    <category term="linting" />
    <category term="constructors" />
    <category term="clean code" />
    <category term="smart-ngrx" />
    <category term="ngrx-store" />
    <category term="ngrx-entity" />
    <category term="ngrx-effects" />
    <category term="TypeScript" />
    <category term="Performance" />
    <entry>
        <id>http://davembush.github.com/4-reasons-to-write-loosely-coupled-code/</id>
        <title>4 Reasons to Write Loosely Coupled Code</title>
        <link rel="alternate" href="http://davembush.github.com/4-reasons-to-write-loosely-coupled-code/"/>
        <content type="html">&lt;p&gt;This past week I got into a small discussion about the importance of loosely coupled code.  Specifically, I was looking at event handler code that did nothing more than change the size of another element on the screen.  But the event handler code was in the controller which in the particular implementation we are using was the event handler portion of our Model in a MVVM architecture.  The question becomes does this code belong in the view, or does it belong in the controller? The question of where code belongs leads eventually to arguments for loosely coupled code.  If I put code in my controller that is manipulating the view, then I either need to mock out my view in order to test my controller or I have to have an instance of my view available to test my controller.  Having coded enough systems to know that both of those choices are problematic, I opt for placing the view specific code in the view.  Another place where you might place this code would be in a View Specific event handler class.  But that would only be for the purposes of clean separation.  Something we might consider doing if the View were plain HTML.  But in our particular case, the view is generated from code, so placing the handlers in that same code seems to be the most appropriate location for it.&lt;/p&gt;
&lt;p&gt;But all of this leads to a larger question.  Why should your code be loosely coupled at all? &lt;figure&gt;&lt;img src=&#34;/uploads/2016/09/image-2.png&#34; title=&#34;4 Reasons to Write Loosely Coupled Code&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/hernanpc/7115374283/&#34;&gt;Hernan Piñera&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by-sa/2.0/&#34;&gt;CC BY-SA&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Refactoring&#34;&gt;&lt;a href=&#34;#Refactoring&#34; class=&#34;headerlink&#34; title=&#34;Refactoring&#34;&gt;&lt;/a&gt;Refactoring&lt;/h2&gt;&lt;p&gt;One of the main advantages of loosely coupled code is that this combined with granularity makes code refactoring easier.  Because my controller class only handles events that cause data to be manipulated and does not cause any changes to the view, I know that any changes I make to my controller will not cause any unexpected presentation layer changes.&lt;/p&gt;
&lt;p&gt;Similarly, and in this case, more importantly, any changes I make to the view will not force me to make changes to the controller class.  That is, all of the code that could be impacted by any one change happen in one and only one class.&lt;/p&gt;
&lt;p&gt;Loose coupling can also occur horizontally, and often does without us thinking too intensely about it.  Have you ever used a control from one vendor only to find another control works better?  The more easily those controls match each other’s programmable interface, the easier the job was to swap them out.  We can do the same type of thing in our own code.  The more granular the code is broken down; the easier any one part of the code can be replaced by something that works “better”.&lt;/p&gt;
&lt;h2 id=&#34;More-Maintainable&#34;&gt;&lt;a href=&#34;#More-Maintainable&#34; class=&#34;headerlink&#34; title=&#34;More Maintainable&#34;&gt;&lt;/a&gt;More Maintainable&lt;/h2&gt;&lt;p&gt;But the argument might be make that this is a lot of work for something that isn’t very likely to happen.  But anyone who has been programming more than a few years on essentially the same system knows that it does.&lt;/p&gt;
&lt;p&gt;Here’s how it looks.  You start out writing a system and you care very little about coupling or not.  Hey, we’ve got code to write and very little time.  Full steam ahead and forget best practices.  And for now, let’s assume you have a small enough system that you actually pull it off.  You get the system delivered, and somehow it miraculously works.  Congratulations.&lt;/p&gt;
&lt;p&gt;A few months go by and you get a new requirement or a change request comes in for an existing requirement.  Either way, you manage to shoe horn the change in.&lt;/p&gt;
&lt;p&gt;More time goes by and a change to the last set of changes comes in.  And now you realize that what you have is a rather fragile architecture that can’t possibly sustain the new request.  A change that might have taken a month given a more loosely coupled architecture is now going to take three because of the amount of rework that is going to be required.&lt;/p&gt;
&lt;p&gt;Another way that loosely coupled code helps is when you are writing a very large system.  Let’s say the system is large.  You write this for a few months and everything seems to be going fine when you hit that first, “oops! we forgot” moment.  So you have to go back and retro fit the change into your tightly coupled code.  And then you progress some more and hit even more of those kind of changes.  Eventually, everyone learns to hate this system because it is so hard to work on and every change we make to existing code causes more and more bugs.&lt;/p&gt;
&lt;h2 id=&#34;Cross-Platform&#34;&gt;&lt;a href=&#34;#Cross-Platform&#34; class=&#34;headerlink&#34; title=&#34;Cross Platform&#34;&gt;&lt;/a&gt;Cross Platform&lt;/h2&gt;&lt;p&gt;Refactoring and maintenance have some practical implications beyond just being able to work on your code.  In this world of multiple platforms, you may find yourself wanting to run some of what you’ve written on another platform.  There are multiple ways you might do this, but keeping your code isolated is going to make this easier.  Say you want to run your code on the web, as a desktop application, on the various mobile phones and tablets that are available.  Even if you do this all in the confines of HTML, JavaScript and CSS, you will most likely have different presentation layers.  If you have view specific code (to use our example again) that isn’t in the view, you’ll need to write code in the controller that detects which of the platforms you are running on.&lt;/p&gt;
&lt;p&gt;But if you’ve decided to use native components on each of the platforms, the view layer is actually going to change drastically.  And the view specific code you wrote might not even work on the new platform.  All the more reason to keep the view code isolated.&lt;/p&gt;
&lt;h2 id=&#34;Cross-Framework&#34;&gt;&lt;a href=&#34;#Cross-Framework&#34; class=&#34;headerlink&#34; title=&#34;Cross Framework&#34;&gt;&lt;/a&gt;Cross Framework&lt;/h2&gt;&lt;p&gt;Or, maybe you are going to upgrade your framework.  Angular 2 just released and it is drastically different from Angular 1.  I can tell you right now, the organizations who wrote loosely coupled Angular 1 code are going to have a much easier time transitioning to Angular 2.  Or maybe you want to switch from Angular to React, or from any of the multitude of frameworks to another.  The more loosely coupled your code, the easier it will be to move.  And nowhere is this more obvious than in the fast moving JavaScript world.&lt;/p&gt;
&lt;h2 id=&#34;Single-Responsibility&#34;&gt;&lt;a href=&#34;#Single-Responsibility&#34; class=&#34;headerlink&#34; title=&#34;Single Responsibility&#34;&gt;&lt;/a&gt;Single Responsibility&lt;/h2&gt;&lt;p&gt;Loosely coupled code is strongly related to the Single Responsibility principle.  You can’t have loosely coupled code unless the code follows the Single Responsibility principle.  And in the case above, putting view code in our controller actually violates both at the same time.  The controller is for manipulating view agnostic data.  The view is where your presentation layer code goes.  Of course, we could turn this around and remove the controller and put all of our code in the View.  Now that would definitely violate the single responsibility principle while giving the appearance of loose coupling.  But if we ever had to create multiple views we would quickly violate yet another principle.  Don’t Repeat Yourself.&lt;/p&gt;
&lt;h2 id=&#34;Testing&#34;&gt;&lt;a href=&#34;#Testing&#34; class=&#34;headerlink&#34; title=&#34;Testing?&#34;&gt;&lt;/a&gt;Testing?&lt;/h2&gt;&lt;p&gt;Normally, I would lead off with testing.  But the argument could be made, “If I’m not going to write unit test, do I still need to do this?”  Actually, someone did make that argument.  And for now, ignoring that not writing unit test is a bad idea that I’ve written about before.  Writing unit test helps us think about these issues up front.  It isn’t that testing is the reason we write good code, although if that’s how you want to think about it I’m not going to stop you.  It is just that writing good test causes us to write good code.  Since it is the most visible benefit we tend to think of it first.  But testing isn’t at all why we do this.  We write test because it provides benefits much like loose coupling does.  Saying that we write loosely coupled code that follows the single responsibility principle so we can test would be like saying we don’t get lost so we can use our GPS.  It is the GPS that helps us to not get lost.  In the same way, it is the test that cause is to write good code.&lt;/p&gt;
&lt;h2 id=&#34;Best-Practices&#34;&gt;&lt;a href=&#34;#Best-Practices&#34; class=&#34;headerlink&#34; title=&#34;Best Practices&#34;&gt;&lt;/a&gt;Best Practices&lt;/h2&gt;&lt;p&gt;I know I’ve been following best practices for so long that I often forget why I’m doing them.  They work.  I do them.  But every once in a while, I need to step back and take a look at what I’m doing and ask “Why?” once again.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="DRY" />
        <category term="loose coupling" />
        <category term="single responsibility" />
        <updated>2016-09-27T10:30:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/dry-programming/</id>
        <title>DRY Programming</title>
        <link rel="alternate" href="http://davembush.github.com/dry-programming/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2014/05/DRY.png&#34; alt=&#34;DRY&#34; title=&#34;DRY&#34;&gt;Today I thought I’d talk to you about the programming principle known as DRY.  As you may know, DRY stands for “Don’t Repeat Yourself” and it shows up in a lot more places than you might expect.  Even when you try really, really hard to not repeat yourself, you end up repeating yourself.  You repeat yourself even when you think you aren’t.  Lots of people repeat themselves.  Do you know of any? Ok.  I think you get the point.  Just like it is silly for me to repeat myself over and over again, it is silly for you to write the same code, or perform the same steps, over and over again.&lt;/p&gt;
&lt;p&gt;To drive the point home just a little bit more.  Do you know what the acronym WET stands for?  We Enjoy Typing.  While it doesn’t capture all of what DRY is trying to combat, I think it hits about 80% of the issue.  Have you typed something that is really similar to something you already typed?&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Copy-and-Paste&#34;&gt;&lt;a href=&#34;#Copy-and-Paste&#34; class=&#34;headerlink&#34; title=&#34;Copy and Paste&#34;&gt;&lt;/a&gt;Copy and Paste&lt;/h2&gt;&lt;p&gt;The most obvious form of something that is WET is code that is an exact duplicate of something you already wrote some place else.  This can be something as mundane as code that is in the same class, to code that exist in multiple classes. In fact, I just ran into this today with some code I was working on.  The person who had written the code had created a local variable to hold a string that he was then passing into multiple methods.  That was good.  This allows us to change the string once instead of changing it in multiple places.&lt;/p&gt;
&lt;p&gt;However, he was doing the same thing in three different methods of the same class.  And in two other places he was using that same string as a string instead of using a variable.&lt;/p&gt;
&lt;p&gt;Since the string was a reference to a field name, it seemed to me to make more sense to create the variable as a constant member variable in the class and use it in all of the locations.&lt;/p&gt;
&lt;p&gt;Copy and paste issue solved.&lt;/p&gt;
&lt;p&gt;But what about the case where you need to do something similar but the code is in multiple classes?  In this case, what you’d probably want to do is to create a static class that will have a static property that will return the string.  Better yet, you could put the string in a resource file that you can reference from the static class.&lt;/p&gt;
&lt;h2 id=&#34;Copy-Paste-and-Modify&#34;&gt;&lt;a href=&#34;#Copy-Paste-and-Modify&#34; class=&#34;headerlink&#34; title=&#34;Copy, Paste and Modify&#34;&gt;&lt;/a&gt;Copy, Paste and Modify&lt;/h2&gt;&lt;p&gt;The most difficult area in our code to detect that our code is WETter than it should be is when we create code that we’ve done the Copy, Paste, and Modify routine to.  This is because it is similar but not exactly similar.  This is where a huge chunk of our WET code resides.&lt;/p&gt;
&lt;p&gt;So as you navigate through your code, you should be looking for code that is similar but not exactly the same and you should be asking yourself this question, “Is there any way I can merge this code so that it only appears once?” One way you might  make this kind of code DRY is by creating a method that takes parameters.  The parameters will let you pass in the stuff that is different while allowing the bulk of the code that is similar to be in one location.&lt;/p&gt;
&lt;p&gt;Another way you might deal with this problem is by creating a class with virtual functions that get called by a main method.  Then you can create child classes that have overridden methods that handle the differences in functionality.&lt;/p&gt;
&lt;h2 id=&#34;Similar-Steps&#34;&gt;&lt;a href=&#34;#Similar-Steps&#34; class=&#34;headerlink&#34; title=&#34;Similar Steps&#34;&gt;&lt;/a&gt;Similar Steps&lt;/h2&gt;&lt;p&gt;The hardest type of duplicate code to detect is code that has similar steps.  If you find yourself doing the same thing over and over again, you probably have an area the you either need to deal with, like we dealt with Copy, Paste, and Modify, or you may need to think about creating code that writes your code for you.&lt;/p&gt;
&lt;p&gt;This is what techniques like T4 templates were created for.&lt;/p&gt;
&lt;h2 id=&#34;Similar-Code-in-Different-Environments&#34;&gt;&lt;a href=&#34;#Similar-Code-in-Different-Environments&#34; class=&#34;headerlink&#34; title=&#34;Similar Code in Different Environments&#34;&gt;&lt;/a&gt;Similar Code in Different Environments&lt;/h2&gt;&lt;p&gt;One of the most natural places to deal with duplicate code is in the area of database access.  Typically we have to create tables or stored procedures in SQL, and then to access that code we need to write code in our main development language that mirrors the SQL code.  In CSharp, we create POCOs and CRUD routines.  And then if we are working on a web site, we need to mirror that code once again in JavaScript.&lt;/p&gt;
&lt;p&gt;This is a prime candidate for code that writes code.  If you don’t already have something that will do it for you, write some code that will look at your SQL and generate the code you need from that.  DRY says there should be one place that gets modified when a change to the database occurs.  That would be the database.&lt;/p&gt;
&lt;h2 id=&#34;Not-Just-About-Code&#34;&gt;&lt;a href=&#34;#Not-Just-About-Code&#34; class=&#34;headerlink&#34; title=&#34;Not Just About Code&#34;&gt;&lt;/a&gt;Not Just About Code&lt;/h2&gt;&lt;p&gt;But DRY isn’t just about code.&lt;/p&gt;
&lt;p&gt;There are things we do every day that have nothing to do with code that are costing us time and money.  In fact, they probably cost more time and money than your WET code because they take longer to perform.&lt;/p&gt;
&lt;p&gt;One place this occurs all of the time is in making sure that your code builds.  If you are still doing this manually, you are wasting your time.  If you aren’t doing it at all, that’s even worse.  You may not know for months that your code isn’t building and you will find out at the worst possible time.  And assuming that you have been practicing Test Driven Development, how are you making sure that those tests still work every time you make a change to your code? The obvious solution is a Continuous Integration server that reports back to you that there was a problem.&lt;/p&gt;
&lt;p&gt;What about error logs?  You are logging the errors that your system generates, right?  Are you checking the error log?  Manually?  Did you know you could setup a job to email those errors to you as soon as they occur?  No more checking needed, unless you don’t check your email.  In that case, have it send a message to your cell phone or IM you with the error, or at least have it send you a message telling you to check the log.&lt;/p&gt;
&lt;p&gt;So, those are some possible places to look for WET code.  Be on the lookout today for places that are WET and spend a little time DRYing things up.&lt;/p&gt;
</content>
        <category term="programming" />
        <category term="DRY" />
        <category term="best practices" />
        <updated>2014-05-29T16:34:00.000Z</updated>
    </entry>
</feed>
