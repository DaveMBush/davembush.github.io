<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Dave&#39;s Notebook • Posts by &#34;ngrx&#34; tag</title>
        <link>http://davembush.github.com</link>
        <description></description>
        <language>English</language>
        <pubDate>Sun, 15 Dec 2024 11:29:45 -0500</pubDate>
        <lastBuildDate>Sun, 15 Dec 2024 11:29:45 -0500</lastBuildDate>
        <category>project management</category>
        <category>code coverage</category>
        <category>tdd</category>
        <category>unit test</category>
        <category>code</category>
        <category>programming</category>
        <category>angular</category>
        <category>javascript</category>
        <category>performance</category>
        <category>react.js</category>
        <category>agile</category>
        <category>failure</category>
        <category>kanban</category>
        <category>scrum</category>
        <category>interview</category>
        <category>job search</category>
        <category>test driven development</category>
        <category>mvvm</category>
        <category>DRY</category>
        <category>loose coupling</category>
        <category>single responsibility</category>
        <category>c#</category>
        <category>learning</category>
        <category>bug</category>
        <category>ext js</category>
        <category>sencha</category>
        <category>career</category>
        <category>react</category>
        <category>ngrx</category>
        <category>redux</category>
        <category>functional</category>
        <category>reactive</category>
        <category>mvp</category>
        <category>private</category>
        <category>testing</category>
        <category>typescript</category>
        <category>routing</category>
        <category>pointers</category>
        <category>unsafe</category>
        <category>class diagram</category>
        <category>vb.net</category>
        <category>visual studio</category>
        <category>flux</category>
        <category>lazy loading</category>
        <category>scope</category>
        <category>DOM</category>
        <category>ionic</category>
        <category>putty</category>
        <category>ssh</category>
        <category>formgroup</category>
        <category>validation</category>
        <category>angular-cli</category>
        <category>modules</category>
        <category>ngmodule</category>
        <category>observables</category>
        <category>RxJS</category>
        <category>model driven</category>
        <category>reactive forms</category>
        <category>estimating</category>
        <category>story points</category>
        <category>best practices</category>
        <category>design patterns</category>
        <category>architecture</category>
        <category>asp.net</category>
        <category>memory</category>
        <category>angular.js</category>
        <category>iis</category>
        <category>ajax</category>
        <category>json</category>
        <category>controller</category>
        <category>MVC</category>
        <category>view</category>
        <category>404</category>
        <category>application_error</category>
        <category>exceptions</category>
        <category>viewstate</category>
        <category>archietcture</category>
        <category>bll</category>
        <category>dal</category>
        <category>Three Tiered</category>
        <category>.net</category>
        <category>enums</category>
        <category>tutorial</category>
        <category>code quality</category>
        <category>cyclomatic</category>
        <category>halstead</category>
        <category>child component</category>
        <category>CefSharp</category>
        <category>Chromium</category>
        <category>Vista</category>
        <category>VPN</category>
        <category>xp</category>
        <category>get</category>
        <category>properties</category>
        <category>set</category>
        <category>empty</category>
        <category>string</category>
        <category>habits</category>
        <category>application testing</category>
        <category>dependency injection</category>
        <category>debugging</category>
        <category>cms</category>
        <category>dotnetnuke</category>
        <category>WordPress</category>
        <category>authority</category>
        <category>confidence</category>
        <category>datalist</category>
        <category>listview</category>
        <category>comments</category>
        <category>tdd. agile</category>
        <category>bootstrap</category>
        <category>copy &amp;amp; paste</category>
        <category>cross browser</category>
        <category>idisposable</category>
        <category>animation</category>
        <category>css</category>
        <category>html</category>
        <category>debug</category>
        <category>checked</category>
        <category>double</category>
        <category>float</category>
        <category>int</category>
        <category>long</category>
        <category>short</category>
        <category>unchecked</category>
        <category>currency</category>
        <category>decimal</category>
        <category>floating point math</category>
        <category>single</category>
        <category>authentication</category>
        <category>isinrole</category>
        <category>roles</category>
        <category>user</category>
        <category>definition of done</category>
        <category>DoD</category>
        <category>dispose</category>
        <category>finalize</category>
        <category>suppressfinalize</category>
        <category>education</category>
        <category>client side</category>
        <category>development</category>
        <category>class</category>
        <category>dynamic classing</category>
        <category>gridview</category>
        <category>college</category>
        <category>freshman</category>
        <category>babel</category>
        <category>es2015</category>
        <category>es6</category>
        <category>jest</category>
        <category>bdd</category>
        <category>Single Responsibility</category>
        <category>Architecture</category>
        <category>full stack developer</category>
        <category>web development</category>
        <category>formsauthentication</category>
        <category>manual</category>
        <category>redirectfromloginpage</category>
        <category>setauthcookie</category>
        <category>NgRX</category>
        <category>luck</category>
        <category>social skills</category>
        <category>brain</category>
        <category>health</category>
        <category>programmer</category>
        <category>productivity</category>
        <category>QA</category>
        <category>extreme programming</category>
        <category>software</category>
        <category>httpcontext</category>
        <category>items</category>
        <category>session</category>
        <category>naming conventions</category>
        <category>variables</category>
        <category>self improvement</category>
        <category>301</category>
        <category>302</category>
        <category>fiddler</category>
        <category>infinite loop</category>
        <category>images</category>
        <category>iTextSharp</category>
        <category>PDF</category>
        <category>concatenation</category>
        <category>quirks</category>
        <category>parsing</category>
        <category>xhtml</category>
        <category>fonts</category>
        <category>stack</category>
        <category>htmltidy</category>
        <category>tables</category>
        <category>acrofields</category>
        <category>form fields</category>
        <category>outputstream</category>
        <category>pdfreader</category>
        <category>pdfstamper</category>
        <category>bind</category>
        <category>callbacks</category>
        <category>currying</category>
        <category>events</category>
        <category>business rules</category>
        <category>boolean</category>
        <category>fields</category>
        <category>methods</category>
        <category>object</category>
        <category>functions</category>
        <category>inheritance</category>
        <category>prototype</category>
        <category>hoist</category>
        <category>falsy</category>
        <category>truthy</category>
        <category>istanbul</category>
        <category>jasmine</category>
        <category>hoisting</category>
        <category>types</category>
        <category>type conversion</category>
        <category>dialog</category>
        <category>jQuery</category>
        <category>validation controls</category>
        <category>async</category>
        <category>each</category>
        <category>collapse</category>
        <category>expand</category>
        <category>load</category>
        <category>partial content</category>
        <category>tooltip</category>
        <category>regions</category>
        <category>limiting beliefs</category>
        <category>angular material</category>
        <category>linkedin</category>
        <category>social media</category>
        <category>tips</category>
        <category>CI. Continuous Integration</category>
        <category>magic numbers</category>
        <category>magic strings</category>
        <category>flex</category>
        <category>multiview</category>
        <category>wizard</category>
        <category>threading</category>
        <category>intern</category>
        <category>express</category>
        <category>node</category>
        <category>nunit</category>
        <category>object initializers</category>
        <category>video</category>
        <category>reflection</category>
        <category>unity</category>
        <category>best practice</category>
        <category>asp.net postback button</category>
        <category>iText</category>
        <category>property based testing</category>
        <category>cli</category>
        <category>software architecture</category>
        <category>rxjs. angular 2</category>
        <category>redirect</category>
        <category>response</category>
        <category>responsive design</category>
        <category>parallel</category>
        <category>selenium</category>
        <category>Marble Testing</category>
        <category>java</category>
        <category>grid</category>
        <category>hub</category>
        <category>serialization</category>
        <category>specflow</category>
        <category>like</category>
        <category>sql</category>
        <category>tsql</category>
        <category>where clause</category>
        <category>do while</category>
        <category>for next</category>
        <category>ms-sql</category>
        <category>while</category>
        <category>gamification</category>
        <category>paired programming</category>
        <category>reference types</category>
        <category>stringbuilder</category>
        <category>value types</category>
        <category>technical debt</category>
        <category>activetabindex</category>
        <category>postback</category>
        <category>tab control</category>
        <category>tabcontrol</category>
        <category>kata</category>
        <category>extjs</category>
        <category>email</category>
        <category>mailaddress</category>
        <category>mailmessage</category>
        <category>smtpclient</category>
        <category>Quality</category>
        <category>behavior</category>
        <category>psychology</category>
        <category>portal</category>
        <category>web 1.0</category>
        <category>web 2.0</category>
        <category>trace</category>
        <category>compiler</category>
        <category>errror</category>
        <category>warning</category>
        <category>connection string</category>
        <category>dataset</category>
        <category>error</category>
        <category>web.config</category>
        <category>tslint</category>
        <category>emotions</category>
        <category>hiring</category>
        <category>aspnet_regsql</category>
        <category>forms based authentication</category>
        <category>jsdom</category>
        <category>karma</category>
        <category>noTDD</category>
        <category>bundling</category>
        <category>gulp</category>
        <category>minification</category>
        <category>node.js</category>
        <category>file upload</category>
        <category>objects</category>
        <category>hide</category>
        <category>vb.net attributes</category>
        <category>nothing</category>
        <category>nullable</category>
        <category>conditional startup</category>
        <category>windows forms</category>
        <category>winforms</category>
        <category>char</category>
        <category>split</category>
        <category>strict</category>
        <category>clarity</category>
        <category>ui</category>
        <category>ux</category>
        <category>asmx</category>
        <category>error handling</category>
        <category>webservice</category>
        <category>binary</category>
        <category>bitwise</category>
        <category>operators</category>
        <category>automation</category>
        <category>browser</category>
        <category>mstest</category>
        <category>immutable</category>
        <category>global</category>
        <category>await</category>
        <category>webapi</category>
        <category>configuration</category>
        <category>devops</category>
        <category>testcasedata</category>
        <category>testcasesource</category>
        <category>closure</category>
        <category>loops</category>
        <category>certification</category>
        <category>mcsd</category>
        <category>microsoft</category>
        <category>inversion of control</category>
        <category>ioc</category>
        <category>casting</category>
        <category>convert</category>
        <category>arguements</category>
        <category>command line</category>
        <category>main</category>
        <category>yagni</category>
        <category>npm</category>
        <category>nvm</category>
        <category>resumes</category>
        <category>change-detection</category>
        <category>state-management</category>
        <category>web-workers</category>
        <category>libraries</category>
        <category>strong typing</category>
        <category>linting</category>
        <category>constructors</category>
        <category>clean code</category>
        <category>smart-ngrx</category>
        <category>ngrx-store</category>
        <category>ngrx-entity</category>
        <category>ngrx-effects</category>
        <category>TypeScript</category>
        <category>Performance</category>
        <item>
            <guid isPermalink="true">http://davembush.github.com/ngrx-performance-improvement/</guid>
            <title>NgRX Performance Improvement</title>
            <link>http://davembush.github.com/ngrx-performance-improvement/</link>
            <category>angular</category>
            <category>ngrx</category>
            <category>ngrx-store</category>
            <category>ngrx-entity</category>
            <category>ngrx-effects</category>
            <pubDate>Sun, 15 Dec 2024 11:29:45 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the course of working on &lt;a href=&#34;https://github.com/DaveMBush/SmartNgRX&#34;&gt;SmartNgRX&lt;/a&gt;, I’ve discovered a secret to making NgRX faster. A way that is so obvious now that I know about it, I’m surprised this isn’t the recommended way to use NgRX.&lt;/p&gt;
&lt;p&gt;As most discoveries occur, I’m building on the backs of giants. In this case, I’m specifically building on the back of the increasingly popular NgRX facade pattern (done well) and a statement with regard to Angular Signals that says “Don’t use Signal Effects.”&lt;/p&gt;
&lt;p&gt;There are, of course, other minor improvements but these are the top two catalysts for what I want to share with you today.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Facade-Pattern&#34;&gt;&lt;a href=&#34;#Facade-Pattern&#34; class=&#34;headerlink&#34; title=&#34;Facade Pattern&#34;&gt;&lt;/a&gt;Facade Pattern&lt;/h2&gt;&lt;p&gt;Several guys at the place I work now, have been using the NgRX facade pattern for a while. Even when I interview, people mention it. What most have never been able to convince me of is why I’d want to use it. Where I’ve gotten stuck is that most people use it as nothing more than a pass-through to plain old vanilla NgRX.&lt;/p&gt;
&lt;p&gt;That is, they’ll create a facade class that basically looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; [&lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt;]&lt;span class=&#34;title class_&#34;&gt;Facade&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;store&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Store&lt;/span&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [actionName]() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; [&lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt;]&lt;span class=&#34;title class_&#34;&gt;Actions&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;SomeAction&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And create methods for each action.&lt;/p&gt;
&lt;p&gt;If that’s you, I’m sorry. You’re doing it wrong.&lt;/p&gt;
&lt;p&gt;But going back to my article about what I learned building (SmartNgRX)[&lt;a href=&#34;https://davembush.github.io/what-i-learned-writing-smartngrx/]&#34;&gt;https://davembush.github.io/what-i-learned-writing-smartngrx/]&lt;/a&gt;, what you want to do in the facade pattern is to do everything that isn’t related to NgRX in the facade and then dispatch the action from the facade to update the resulting state.&lt;/p&gt;
&lt;p&gt;By doing this, you’re able to keep your NgRX code clean and simple.&lt;/p&gt;
&lt;h2 id=&#34;Dispatch-Time&#34;&gt;&lt;a href=&#34;#Dispatch-Time&#34; class=&#34;headerlink&#34; title=&#34;Dispatch Time&#34;&gt;&lt;/a&gt;Dispatch Time&lt;/h2&gt;&lt;p&gt;In SmartNgRX, one of the things I do is buffer the dispatch actions that retrieve the IDs so I can dispatch them all at once. Originally, I put the buffering code in an effect. But one day I thought, “What if I buffer the IDs and THEN dispatch the actions?”  It turns out that is faster.&lt;/p&gt;
&lt;p&gt;That’s when I realized (and found out I was wrong - see below) that when you dispatch an action, NgRX has to run it through every typeOf() in your effects regardless of if the effect needs to process it or not.  It’s a lot like the chick going around the farm yard asking “Are you my mother?” instead of mama chicken coming to the chick and saying “I’m your mother, come here and I’ll take care of you.”&lt;/p&gt;
&lt;p&gt;Reducers are a bit different. If you are using the newest on() syntax for reducers, this translates to a map statement so you end up with the benefits of O(1) time. If you are using older syntax, you have an increasingly complex switch statement that is O(n) time until switch statements are optimized.&lt;/p&gt;
&lt;p&gt;The take away from this, I thought, is that you want as few effects as possible in your code.&lt;/p&gt;
&lt;p&gt;I almost titled this article “Ban NgRX Effects” but that wouldn’t give you the full picture.&lt;/p&gt;
&lt;h2 id=&#34;Signals&#34;&gt;&lt;a href=&#34;#Signals&#34; class=&#34;headerlink&#34; title=&#34;Signals&#34;&gt;&lt;/a&gt;Signals&lt;/h2&gt;&lt;p&gt;And then I stumbled across a video about Signals where Alex Rickabaugh from the Angular Core team said “(Don’t use Effects)[&lt;a href=&#34;https://www.youtube.com/watch?v=aKxcIQMWSNU&amp;ab_channel=TechStackNation%5D&#34;&gt;https://www.youtube.com/watch?v=aKxcIQMWSNU&amp;amp;ab_channel=TechStackNation]&lt;/a&gt;.”&lt;/p&gt;
&lt;p&gt;And then it struck me. If I’m using a facade, I don’t need to use effects.&lt;/p&gt;
&lt;p&gt;Think about why we typically use effects. Isn’t it so that we can ultimately call a service that will grab data from the server? And then, what do we do with that data? We fire an action to update the state.&lt;/p&gt;
&lt;h2 id=&#34;Ban-Effects&#34;&gt;&lt;a href=&#34;#Ban-Effects&#34; class=&#34;headerlink&#34; title=&#34;Ban Effects&#34;&gt;&lt;/a&gt;Ban Effects&lt;/h2&gt;&lt;p&gt;Instead, why not just call the service directly from our facade?&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; [&lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt;]&lt;span class=&#34;title class_&#34;&gt;Facade&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;service&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt;]&lt;span class=&#34;title class_&#34;&gt;Service&lt;/span&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [methodName]() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// For optimistic updates, dispatch an action to update the state here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;service&lt;/span&gt;.[methodName]().&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// process data from the backend and then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// dispatch an action to update the state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ).&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Even better would be to use promises:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; [&lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt;]&lt;span class=&#34;title class_&#34;&gt;Facade&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;service&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt;]&lt;span class=&#34;title class_&#34;&gt;Service&lt;/span&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [methodName]() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// For optimistic updates, dispatch an action to update the state here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; resultawait &lt;span class=&#34;title function_&#34;&gt;lastValueFrom&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;service&lt;/span&gt;.[methodName]());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// process data from the backend and then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// dispatch an action to update the state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, you don’t need effects.&lt;/p&gt;
&lt;p&gt;The additional beauty of this is that you should be able to use NgRX Signals instead of NgRX from your facade with very little effort.  The methods you put in withMethods() will be correspond to your Actions. computed() signals will be your selectors. Done. With some nice dependency injection added in, you can switch between the two with ease.&lt;/p&gt;
&lt;p&gt;There are, of course, other improvements you can make to your code. For example, your code will generally run faster if you are using NgRX Entities for your state management and retrieve the data from the server as you need it. You could roll your own, but I’ve already done that work for you.  Check out the &lt;a href=&#34;https://github.com/DaveMBush/SmartNgRX&#34;&gt;SmartNgRX&lt;/a&gt; library.&lt;/p&gt;
&lt;h2 id=&#34;Timings&#34;&gt;&lt;a href=&#34;#Timings&#34; class=&#34;headerlink&#34; title=&#34;Timings&#34;&gt;&lt;/a&gt;Timings&lt;/h2&gt;&lt;p&gt;And then I went to actually prove everything I’ve said above.&lt;/p&gt;
&lt;p&gt;I created a simple Angular application that dispatches an action to an effect and then had that effect call a service that would return an action asynchronously that would then be dispatched to a reducer.&lt;/p&gt;
&lt;p&gt;I also added 50 other effects that just had ofType() to emulate the need to check for every action.&lt;/p&gt;
&lt;p&gt;No matter how I ran this code, I could not see any timing difference between using one effect or 50 effects. So, my statement above that started me on this journey was wrong. We, evidently, do not suffer a performance hit based on the number of effects we have.&lt;/p&gt;
&lt;p&gt;However, I did find some interesting performance marks that still indicate that you might want to call your effects services directly.&lt;/p&gt;
&lt;p&gt;Along with the code I mentioned above, I modified the code to call the service directly and then dispatch the resulting action.&lt;/p&gt;
&lt;p&gt;Here are the results from running the code on my computer:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;TL w&amp;#x2F; Effects&lt;/th&gt;
&lt;th&gt;TL Direct&lt;/th&gt;
&lt;th&gt;SL w&amp;#x2F; Effects&lt;/th&gt;
&lt;th&gt;SL Direct&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Average&lt;/td&gt;
&lt;td&gt;176.2232ms&lt;/td&gt;
&lt;td&gt;0.0158ms&lt;/td&gt;
&lt;td&gt;0.3688ms&lt;/td&gt;
&lt;td&gt;0.1875ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max Time&lt;/td&gt;
&lt;td&gt;202ms&lt;/td&gt;
&lt;td&gt;0.7000ms&lt;/td&gt;
&lt;td&gt;1.1000ms&lt;/td&gt;
&lt;td&gt;0.4000ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;TL &amp;#x3D; Tight Loop (for&amp;#x2F;next loop)&lt;br&gt;SL &amp;#x3D; Spaced Loop ( using rxjs of().pipe(repeat({count: 1000, delay: 100 })))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In both the tight loop and the spaced loop, the direct call outperforms dispatching to the effect. But, the difference is not significant for most applications and should be considered a micro-optimization.&lt;/p&gt;
&lt;p&gt;On the other hand, if you are doing a lot of dispatching to effects at any one time, these difference could add up and you might want to consider using the direct call.&lt;/p&gt;
&lt;h2 id=&#34;Other-Considerations&#34;&gt;&lt;a href=&#34;#Other-Considerations&#34; class=&#34;headerlink&#34; title=&#34;Other Considerations&#34;&gt;&lt;/a&gt;Other Considerations&lt;/h2&gt;&lt;p&gt;While banning effects for performance reasons may not be useful for most existing applications, there are other reasons you might want to consider banning them.&lt;/p&gt;
&lt;p&gt;As I’ve moved from organization to organization, I’ve seen some pretty ugly NgRX code. Much of it is due to the complexity of effects. If the people using NgRX were not forced to use RxJS because of the effects, the code would be easier to read and we’d avoid a lot of the effect chaining that I’ve seen. While effects themselves aren’t particularly slow, chaining the effects and using RxJS operators can be.&lt;/p&gt;
&lt;p&gt;Since I’ve already removed the effects from SmartNgRX, and there is a slight performance benefit from doing so, I’m not going to revert that change. Especially since it should allow me to use 99% of the same code to implement the Signals version.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/smart-ngrx/</guid>
            <title>smart-ngrx</title>
            <link>http://davembush.github.com/smart-ngrx/</link>
            <category>angular</category>
            <category>ngrx</category>
            <pubDate>Tue, 29 Oct 2024 13:36:27 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Imagine an NgRX world where you almost never knew you were using NgRX. A world where you never had to write a &lt;code&gt;reducer&lt;/code&gt;, &lt;code&gt;action&lt;/code&gt;, or &lt;code&gt;effect&lt;/code&gt;. A world where you never had to call &lt;code&gt;store.dispatch()&lt;/code&gt;. A world where the data you worked automatically persist to the server. A world where the data is retrieved from the server as it is needed and removed from memory when it is not, or never removed if that’s what you want. A world where the data automatically refreshes from the server, or you can use websocket messages to refresh the data and, in either case, the only data that refreshes is the data the code is actively using. A world where optimistic UI is built into the framework.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Introducing &lt;a href=&#34;https://www.npmjs.com/package/@smarttools/smart-ngrx&#34;&gt;SmartNgRX&lt;/a&gt;. A framework I’ve been working on for over a year that does everything I just mentioned and more. It’s a framework that is built on top of NgRX and works with your existing NgRX code.&lt;/p&gt;
&lt;p&gt;The full documentation is available at &lt;a href=&#34;https://davembush.github.io/SmartNgRX/home&#34;&gt;SmartNgRX Documentation&lt;/a&gt; but let me give you a brief overview of how it works.&lt;/p&gt;
&lt;h2 id=&#34;Brief-Overview&#34;&gt;&lt;a href=&#34;#Brief-Overview&#34; class=&#34;headerlink&#34; title=&#34;Brief Overview&#34;&gt;&lt;/a&gt;Brief Overview&lt;/h2&gt;&lt;p&gt;First, there are two providers you will need to add to your application. The first is &lt;code&gt;provideSmartNgRX()&lt;/code&gt; which is added to the &lt;code&gt;providers&lt;/code&gt; array in you &lt;code&gt;AppModule&lt;/code&gt;. The second is &lt;code&gt;provideSmartFeatureEntities()&lt;/code&gt; which is added to the module, or route, nearest where you’ll use it.&lt;/p&gt;
&lt;p&gt;These two providers setup the configuration information that SmartNgRX will need to work. They control things such as how often to refresh the data, when to remove unused data from memory, what service to call to retrieve the data for an NgRX slice looks like and what a placeholder row looks like for a particular slice of data.&lt;/p&gt;
&lt;p&gt;For you to define the service an the SmartNgRX effect will call, you’ll need to create an EffectService. This service is where you control how the CRUD operations interact with the server. This and the selectors are the only code you’ll need to write.&lt;/p&gt;
&lt;p&gt;Which brings us to the selectors. Instead of using the &lt;code&gt;createSelector&lt;/code&gt; function from NgRX, you’ll use the &lt;code&gt;createSmartNgRXSelector&lt;/code&gt; function from SmartNgRX. This function defines the relationship between a parent selector and any children it may have. You can use selectors created with createSmartNgRXSelector with selectors created with createSelector and mix and match them as needed.&lt;/p&gt;
&lt;p&gt;That’s it. All the other code you normally write is handled by SmartNgRX.&lt;/p&gt;
&lt;p&gt;Give it a try and let me know what you think.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/what-i-learned-writing-smartngrx/</guid>
            <title>What I Learned Writing SmartNgRX</title>
            <link>http://davembush.github.com/what-i-learned-writing-smartngrx/</link>
            <category>angular</category>
            <category>ngrx</category>
            <category>smart-ngrx</category>
            <pubDate>Mon, 14 Oct 2024 07:12:03 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Last week, I announced a project I had been working on for over 10 months. I call it &lt;a href=&#34;/smart-ngrx/&#34;&gt;SmartNgRX&lt;/a&gt; and it solves many common issues most of us have using SmartNgRX, including the boilerplate issue, over-fetching, and memory pressure caused by stale data.&lt;/p&gt;
&lt;p&gt;Today I want to talk about a few things I learned while creating SmartNgRX that can be applied globally to any project.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;No-Boilerplate-Needed&#34;&gt;&lt;a href=&#34;#No-Boilerplate-Needed&#34; class=&#34;headerlink&#34; title=&#34;No Boilerplate Needed&#34;&gt;&lt;/a&gt;No Boilerplate Needed&lt;/h2&gt;&lt;p&gt;While SmartNgRX solves the boilerplate issue, you can apply this to your code simply by making all your NgRX slices behave the same. Once you’ve done that, you can create a single factory function for each of your Actions, Reducers, and Effects and use that to generate the Actions, Reducers, and Effects you need.&lt;/p&gt;
&lt;p&gt;You can see how I’ve done this by looking at the source code for SmartNgRX.&lt;/p&gt;
&lt;h3 id=&#34;Generic-Actions&#34;&gt;&lt;a href=&#34;#Generic-Actions&#34; class=&#34;headerlink&#34; title=&#34;Generic Actions&#34;&gt;&lt;/a&gt;Generic Actions&lt;/h3&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; actionGroupCache = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;unknown&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; actionFactory&amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SmartNgRXRowBase&lt;/span&gt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;feature&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;): &lt;span class=&#34;title class_&#34;&gt;ActionGroup&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; source = &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;feature&amp;#125;&lt;/span&gt;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;psi&amp;#125;&lt;/span&gt;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;entity&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; cached = actionGroupCache.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(source) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ActionGroup&lt;/span&gt;&amp;lt;T&amp;gt; | &lt;span class=&#34;literal&#34;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cached) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; cached;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; actionGroup = &lt;span class=&#34;title function_&#34;&gt;createActionGroup&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;source&lt;/span&gt;: source &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;events&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;#x27;Update Many&amp;#x27;&lt;/span&gt;: props&amp;lt;&lt;span class=&#34;title class_&#34;&gt;UpdateChanges&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Remove&lt;/span&gt;: props&amp;lt;&lt;span class=&#34;title class_&#34;&gt;IdsProp&lt;/span&gt;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;#x27;Load By Ids&amp;#x27;&lt;/span&gt;: props&amp;lt;&lt;span class=&#34;title class_&#34;&gt;IdsProp&lt;/span&gt;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;#x27;Load By Ids Preload&amp;#x27;&lt;/span&gt;: props&amp;lt;&lt;span class=&#34;title class_&#34;&gt;IdsProp&lt;/span&gt;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;#x27;Store Rows&amp;#x27;&lt;/span&gt;: props&amp;lt;&lt;span class=&#34;title class_&#34;&gt;RowsProp&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Update&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;old&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;RowProp&lt;/span&gt;&amp;lt;T&amp;gt;; &lt;span class=&#34;attr&#34;&gt;new&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;RowProp&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;#x27;Add To Store&amp;#x27;&lt;/span&gt;: props&amp;lt;&lt;span class=&#34;title class_&#34;&gt;RowProp&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt;: props&amp;lt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;row&lt;/span&gt;: T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;parentId&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;parentFeature&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;parentEntityName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;#x27;Add Success&amp;#x27;&lt;/span&gt;: props&amp;lt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;newRow&lt;/span&gt;: T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;oldRow&lt;/span&gt;: T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;parentId&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;parentFeature&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;parentEntityName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Delete&lt;/span&gt;: props&amp;lt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;parentInfo&lt;/span&gt;: &amp;#123; &lt;span class=&#34;attr&#34;&gt;feature&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;; &lt;span class=&#34;attr&#34;&gt;ids&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;[] &amp;#125;[];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  actionGroupCache.&lt;span class=&#34;title function_&#34;&gt;set&lt;/span&gt;(source, actionGroup);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; actionGroup;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;A casual glance will show you that all I’ve done is wrap the &lt;code&gt;createActionGroup&lt;/code&gt; function from NgRX with a function that takes a feature and entity name and returns an ActionGroup. This is a simple example of reducing boilerplate in your code. We use the feature name and the entity name to generate the source name for the ActionGroup which makes it unique.&lt;/p&gt;
&lt;p&gt;You’ll notice that I’ve also cached the &lt;code&gt;ActionGroup&lt;/code&gt; so that if you call it again, you’ll get the same &lt;code&gt;ActionGroup&lt;/code&gt; back. This simple optimization allows you to use the factory function to retrieve the action wherever you need it instead of passing it around. In my case, I needed this because the library doesn’t expose the actions used by NgRX and I wanted to let the developers using SmartNgRX use the actions in their code if they desired.&lt;/p&gt;
&lt;h3 id=&#34;Reducers&#34;&gt;&lt;a href=&#34;#Reducers&#34; class=&#34;headerlink&#34; title=&#34;Reducers&#34;&gt;&lt;/a&gt;Reducers&lt;/h3&gt;&lt;p&gt;Similarly, I’ve wrapped &lt;code&gt;createReducer&lt;/code&gt; with a factory function that takes the feature and entity name and returns a reducer. Again, this is all you need to ensure the reducer is unique.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; reducerFactory&amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SmartNgRXRowBase&lt;/span&gt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;feature&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;): &lt;span class=&#34;title class_&#34;&gt;ActionReducer&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;EntityState&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; adapter = entityDefinitionCache&amp;lt;T&amp;gt;(feature, entity).&lt;span class=&#34;property&#34;&gt;entityAdapter&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; initialState = adapter.&lt;span class=&#34;title function_&#34;&gt;getInitialState&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; actions = actionFactory&amp;lt;T&amp;gt;(feature, entity);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;createReducer&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    initialState,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;add&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; row &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; adapter.&lt;span class=&#34;title function_&#34;&gt;upsertOne&lt;/span&gt;(row, state)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;addSuccess&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; newRow &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      adapter.&lt;span class=&#34;title function_&#34;&gt;upsertOne&lt;/span&gt;(newRow, state),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;updateMany&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; changes &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; adapter.&lt;span class=&#34;title function_&#34;&gt;updateMany&lt;/span&gt;(changes, state);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;remove&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; ids &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; adapter.&lt;span class=&#34;title function_&#34;&gt;removeMany&lt;/span&gt;(ids, state)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;update&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt;: &amp;#123; row &amp;#125; &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      adapter.&lt;span class=&#34;title function_&#34;&gt;upsertOne&lt;/span&gt;(row, state),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;storeRows&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; rows &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; adapter.&lt;span class=&#34;title function_&#34;&gt;upsertMany&lt;/span&gt;(rows, state)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Effects&#34;&gt;&lt;a href=&#34;#Effects&#34; class=&#34;headerlink&#34; title=&#34;Effects&#34;&gt;&lt;/a&gt;Effects&lt;/h3&gt;&lt;p&gt;Finally, I’ve wrapped &lt;code&gt;createEffect&lt;/code&gt; with a factory function that takes the feature and entity name and returns an effect. This is the same as the other two examples.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; effectsFactory&amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SmartNgRXRowBase&lt;/span&gt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;feature&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;entityName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;effectsServiceToken&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;InjectionToken&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;EffectService&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;): &lt;span class=&#34;title class_&#34;&gt;Record&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;EffectsFactoryKeys&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;FunctionalEffect&lt;/span&gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; actions = actionFactory&amp;lt;T&amp;gt;(feature, entityName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityDefinition = entityDefinitionCache&amp;lt;T&amp;gt;(feature, entityName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; adapter = entityDefinition.&lt;span class=&#34;property&#34;&gt;entityAdapter&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * Ends up calling the `EffectService` to delete the row specified&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * by the ID in the action.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;delete&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;createEffect&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title function_&#34;&gt;deleteEffect&lt;/span&gt;(effectsServiceToken, actions),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      dispatchFalse,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * Ends up calling the `EffectService` to determine what rows&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * need to be loaded yet and returns dummy rows for those rows.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;loadByIdsPreload&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;createEffect&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title function_&#34;&gt;loadByIdsPreloadEffect&lt;/span&gt;(feature, entityName, actions),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      dispatchFalse,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * Ends up calling the `EffectService` to load the rows specified&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * from the server.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;loadByIds&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;createEffect&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title function_&#34;&gt;loadByIdsEffect&lt;/span&gt;(effectsServiceToken, actions, feature, entityName),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      dispatchFalse,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * Ends up calling the `EffectService` to update the row specified&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * by the row in the action.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;update&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;createEffect&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      updateEffect&amp;lt;T&amp;gt;(effectsServiceToken, actions, feature, entityName),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      dispatchFalse,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * Ends up calling the `EffectService` to add the row specified&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * by the row in the action.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;add&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;createEffect&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;addEffect&lt;/span&gt;(effectsServiceToken, actions), dispatchTrue),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * Handles adding the new row to the store and removing the dummy row&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * that was added so we could edit it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;addSuccess&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;createEffect&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      addSuccessEffect&amp;lt;T&amp;gt;(effectsServiceToken, actions, adapter),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      dispatchFalse,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;By now, you get the general idea. A couple of things to note about the &lt;code&gt;effectsFactory&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First we pass in an &lt;code&gt;InjectionToken&lt;/code&gt; that is used to get the &lt;code&gt;EffectService&lt;/code&gt; that is used by the effects. By doing this, all we need to do is make sure your effects services conform to the &lt;code&gt;EffectService&lt;/code&gt; abstract class and we can use them in the effects.&lt;/p&gt;
&lt;p&gt;This is how SmartNgRX can hide NgRX from the developer and just let them implement the specifics for each entity.&lt;/p&gt;
&lt;p&gt;You’ll also notice that to keep the code clean, I’ve implemented the details in other functions that I call. If you want to see the details, you can &lt;a href=&#34;https://github.com/DaveMBush/SmartNgRX/tree/cbec5143855b1916e0c67776b22a6134a18d5ee4/libs/smart-ngrx/src/effects&#34;&gt;look at the source code for the effects in SmartNgRX&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Second, we use the cached &lt;code&gt;ActionGroup&lt;/code&gt; by calling the &lt;code&gt;actionFactory&lt;/code&gt; function to get the actions we need for the effects instance. Now we don’t need to know about a specific instance and find some way to pass it into the effect.&lt;/p&gt;
&lt;p&gt;Finally, we need access to the EntityAdapter for the entity we are working with. We create the entity adapter when we configure SmartNgRX. The two lines of code, above, that retrieve the adapter are retrieving it from a map where we set it during SmartNgRX setup&lt;/p&gt;
&lt;p&gt;And that’s how you avoid NgRX boilerplate in your code.&lt;/p&gt;
&lt;h2 id=&#34;Too-Many-Actions-and-Reducers&#34;&gt;&lt;a href=&#34;#Too-Many-Actions-and-Reducers&#34; class=&#34;headerlink&#34; title=&#34;Too Many Actions and Reducers&#34;&gt;&lt;/a&gt;Too Many Actions and Reducers&lt;/h2&gt;&lt;p&gt;I’ve been saying this for several years and still managed to get this “wrong” while writing my code.&lt;/p&gt;
&lt;p&gt;Here’s the basic issue. Reducers and Effects have specific purposes. Where I went wrong is with my reducers. But I’ll address both Reducers and Effects here.&lt;/p&gt;
&lt;p&gt;But first, let’s take a detour and talk about an ideal NgRX setup.&lt;/p&gt;
&lt;h3 id=&#34;Ideal-NgRX-Setup&#34;&gt;&lt;a href=&#34;#Ideal-NgRX-Setup&#34; class=&#34;headerlink&#34; title=&#34;Ideal NgRX Setup&#34;&gt;&lt;/a&gt;Ideal NgRX Setup&lt;/h3&gt;&lt;p&gt;The Redux pattern, generally, and NgRX, specifically, were created to store states predictably. “State only” is my motto. This means that logic should be kept out of our NgRX code. This keeps our NgRX code simple and reduces bugs. You wouldn’t believe some of the code I’ve seen that violates this principle. Then again, maybe you could. You’ve probably written it.&lt;/p&gt;
&lt;p&gt;So, if we want to keep logic out of NgRX, where should it go?&lt;/p&gt;
&lt;h3 id=&#34;Action-Services&#34;&gt;&lt;a href=&#34;#Action-Services&#34; class=&#34;headerlink&#34; title=&#34;Action Services&#34;&gt;&lt;/a&gt;Action Services&lt;/h3&gt;&lt;p&gt;It goes in a service. When you call an action, it should already have the data in the form that NgRX ultimately needs. The reducer can then take this data and store it in the store without doing anything to it.&lt;/p&gt;
&lt;p&gt;Notice how small my reducer code is.&lt;/p&gt;
&lt;h3 id=&#34;Effects-Service&#34;&gt;&lt;a href=&#34;#Effects-Service&#34; class=&#34;headerlink&#34; title=&#34;Effects Service&#34;&gt;&lt;/a&gt;Effects Service&lt;/h3&gt;&lt;p&gt;Similarly, when you call an effect, it should already have the data to do whatever it needs. Again, in an ideal world, all the effect does is call what I’ve come to term the effect service. The effect service can do whatever work needs to be done.&lt;/p&gt;
&lt;p&gt;For example, say you are calling the server, but the shape of the data you get back isn’t what your application will need. The place to do the transformation is in the effect service. Not in the effect.&lt;/p&gt;
&lt;p&gt;By doing this, you’ll only need actions that perform basic CRUD operations. You shouldn’t see actions for every possible way you could change the state of your application. Most of that can, and should, be handled in an Action Service.&lt;/p&gt;
&lt;p&gt;There has been a lot of noise in the community about using the “facade” pattern with NgRX but most implementations I’ve seen just put a class in front of the same actions we’ve always had. This is not a facade pattern. This is just a bulky, excessive layer in front of what we’ve always been doing.&lt;/p&gt;
&lt;p&gt;What I’m doing is closer to a facade pattern because now all those action calls become calls to a service. The service does the transformations and dispatches whatever action is appropriate to update the store.&lt;/p&gt;
&lt;h3 id=&#34;Command-or-Event-Pattern&#34;&gt;&lt;a href=&#34;#Command-or-Event-Pattern&#34; class=&#34;headerlink&#34; title=&#34;Command or Event Pattern&#34;&gt;&lt;/a&gt;Command or Event Pattern&lt;/h3&gt;&lt;p&gt;By following these tip, the question of using the command or event patterns with NgRX becomes moot. The argument for using the event pattern is that your actions now give you some idea of what triggered them by using the action name as the where. In the pattern I’ve described, 100% of your actions (should) get triggered by the same code every time if you’ve structured things correctly.  That code gets triggered by multiple other places just like any other function in your code does. Now, you can evaluate the call stack. You can still use the event pattern. But, there isn’t a strong argument for it anymore.&lt;/p&gt;
&lt;p&gt;The best part about using this pattern is that I’m in a great position to convert SmartNgRX to use Signals instead of Observables and most of my code won’t change.&lt;/p&gt;
&lt;p&gt;As far as NgRX code is concerned, the only NgRX place you should have any logic at all is in Selectors, but that’s a topic for another day.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/avoiding-ngrx-boilerplate/</guid>
            <title>Avoiding NgRx Boilerplate</title>
            <link>http://davembush.github.com/avoiding-ngrx-boilerplate/</link>
            <category>angular</category>
            <category>ngrx</category>
            <category>state-management</category>
            <pubDate>Sat, 19 Nov 2022 12:17:54 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;One of the recurring complaints I hear about NgRX is that it requires too much boiler plate code. But, it doesn’t have to be this way. In fact, I’ve been working on a project that has a lot of NgRX code and I’ve been able to reduce the amount of boilerplate code to a minimum and gain features in the process.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;If you look at your NgRX code you should find that your actions, reducers, and effects are all very similar. If you don’t find this to be true in your own code, you should consider this a code smell. While how we each use NgRX may vary from project to project, within a project there should be enough consistency that you can reduce the boiler plate code you write and just supply the differences rather than repeating yourself over and over again.&lt;/p&gt;
&lt;h2 id=&#34;NgRX-Entities&#34;&gt;&lt;a href=&#34;#NgRX-Entities&#34; class=&#34;headerlink&#34; title=&#34;NgRX Entities&#34;&gt;&lt;/a&gt;NgRX Entities&lt;/h2&gt;&lt;p&gt;One reason you may find your code does not lend itself to common actions, reducers, and effects is because you have not yet discovered NgRX Entities. NgRX Entities are an “Optional” NgRX add-on that allow you to reduce quite a bit of redundant code, especially in the Reducers where you can just make a call to an Adapter function to do all the work for you. The end result is that your store is an array of IDs and an object of type &lt;code&gt;Record&amp;lt;string, T&amp;gt;&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; describes the shape of your record and &lt;code&gt;string&lt;/code&gt; is the ID of the record. Using this pattern it is very easy to find a record by the ID so we can easily join to slices of our store together using a selector.&lt;/p&gt;
&lt;p&gt;The remainder of this article assumes you are familiar with NgRX Entities and how to use them. If you are not, I recommend you read the &lt;a href=&#34;https://ngrx.io/guide/entity&#34;&gt;NgRX Entity Documentation&lt;/a&gt; and then come back to this article.&lt;/p&gt;
&lt;h2 id=&#34;Actions&#34;&gt;&lt;a href=&#34;#Actions&#34; class=&#34;headerlink&#34; title=&#34;Actions&#34;&gt;&lt;/a&gt;Actions&lt;/h2&gt;&lt;p&gt;The first, very obvious place we find boiler plate code in NgRX is with actions. The more recent release of NgRX already makes creating actions relatively easy by providing the &lt;code&gt;createActionGroup&lt;/code&gt; function. This function allows you to create a group of actions with a single function call. However, it still requires you to provide the action type and the action payload. This is where we can start to reduce the boiler plate code.&lt;/p&gt;
&lt;p&gt;Let’s say, for a start, that all your actions look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityActions = &lt;span class=&#34;title function_&#34;&gt;createActionGroup&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;source&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;events&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Load&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAll&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;ids&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAllSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entities&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt;[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAllFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Create&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CreateSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CreateFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Update&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;UpdateSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Entity&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;UpdateFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Delete&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;DeleteSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;DeleteFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Even if you create some generator to create this code for you, it is still quite a bit of code that needs to be compiled and shipped to the browser.&lt;/p&gt;
&lt;p&gt;What if, instead, all we had to do was write this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityActions = &lt;span class=&#34;title function_&#34;&gt;createActionGroup&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;All you need to do, for this to work, is create a new &lt;code&gt;createActionGroup&lt;/code&gt; function that returns the NgRX version of the same method with everything filled out.&lt;/p&gt;
&lt;p&gt;Well, “all you have to do” is a bit of an exaggeration as there are some typing issues you’ll need to address.&lt;/p&gt;
&lt;p&gt;Here is the code:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; createActionGroup &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; ngrxCreateActionGroup, props &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./types/ngrx-action-group.type&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * StringLiteralCheck was copied from NgRX because it is hidden.  It forces&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * the source parameter to be a string literal.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;StringLiteralCheck&lt;/span&gt;&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Str&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt; = &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Str&lt;/span&gt; ? &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;Name&amp;#125;&lt;/span&gt; must be a string literal type`&lt;/span&gt; : &lt;span class=&#34;built_in&#34;&gt;unknown&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;StringLiteralSource&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&amp;gt; = &lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt; &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;StringLiteralCheck&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;source&amp;#x27;&lt;/span&gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * createActionGroup creates all the actions an entity will need reducing quite a bit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * of boilerplate code.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * The `source` parameter is the same as the `source` parameter in NgRX&amp;#x27;s createActionGroup.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; createActionGroup = &amp;lt;&lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;, T&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;source&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;StringLiteralSource&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Source&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;): &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt;&amp;lt;T&amp;gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;ngrxCreateActionGroup&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// because ngrxCreateActionGroup expects a string literal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// we have to cast as any to get around the type check&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// this is why we made sure our source parameter does the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// string literal check.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;source&lt;/span&gt;: source &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;events&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Load&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadAll&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;ids&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadAllSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entities&lt;/span&gt;: T[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;LoadAllFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Create&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;CreateSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;CreateFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Update&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;UpdateSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;UpdateFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;Delete&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;DeleteSuccess&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;DeleteFailure&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that I’ve added a new type &lt;code&gt;NgrxActionGroup&lt;/code&gt; as the return value. This ensures that the return value is strongly typed to the information provided.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt;&amp;lt;T&amp;gt; = &lt;span class=&#34;title class_&#34;&gt;ActionGroup&lt;/span&gt;&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// using any here is the only way I could get this to work&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// without worse hacks or rewriting createActionGroup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Load&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAll&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;ids&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAllSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entities&lt;/span&gt;: T[] &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;LoadAllFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Create&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CreateSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;CreateFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Update&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;UpdateSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;entity&lt;/span&gt;: T &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;UpdateFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Delete&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;DeleteSuccess&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;DeleteFailure&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionCreatorProps&lt;/span&gt;&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Most of the work in getting that all working correctly was with the strong typing. You may need to tweak for your purposes, but this is the basic idea.&lt;/p&gt;
&lt;p&gt;If you need to add actions that are unique to a particular entity, you can use the &lt;code&gt;createActionGroup&lt;/code&gt; function from NgRX and then return the combined actions using the spread operator.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityActions = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;span class=&#34;title function_&#34;&gt;createActionGroup&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;span class=&#34;title function_&#34;&gt;ngrxCreateActionGroup&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;source&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;events&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;UniqueAction&lt;/span&gt;: props&amp;lt;&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#125;&amp;gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Reducers&#34;&gt;&lt;a href=&#34;#Reducers&#34; class=&#34;headerlink&#34; title=&#34;Reducers&#34;&gt;&lt;/a&gt;Reducers&lt;/h2&gt;&lt;p&gt;Reducers are very similar. Once again, NgRX already gives us a way of creating a Reducer function with one call.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityReducer = &lt;span class=&#34;title function_&#34;&gt;createReducer&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  initialState,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(entityActions.&lt;span class=&#34;property&#34;&gt;Load&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; id &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ...state,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;loading&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// etc...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But if the on() code is the same, why repeat it over and over?  Just create a new factory function that specifies what is unique and let it do the rest of the work.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; createReducer = &amp;lt;T, N &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;adapter&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;EntityAdapter&lt;/span&gt;&amp;lt;T&amp;gt;, &lt;span class=&#34;comment&#34;&gt;// EntityAdapter is an NgRX Entities type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;entityName&lt;/span&gt;: N,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;actions&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;): &lt;span class=&#34;title class_&#34;&gt;ActionReducer&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;EntityState&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt; =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;ngrxCreateReducer&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    adapter.&lt;span class=&#34;title function_&#34;&gt;getInitialState&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(actions.&lt;span class=&#34;property&#34;&gt;load&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state, &amp;#123; id &amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      adapter.&lt;span class=&#34;title function_&#34;&gt;upsertOne&lt;/span&gt;(id, state)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// etc...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now, you can create all your reducers using your new createReducer function.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entityReducer = &lt;span class=&#34;title function_&#34;&gt;createReducer&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  entityAdapter,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;Entity Name Here&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  entityActions&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Effects&#34;&gt;&lt;a href=&#34;#Effects&#34; class=&#34;headerlink&#34; title=&#34;Effects&#34;&gt;&lt;/a&gt;Effects&lt;/h2&gt;&lt;p&gt;Effects are a little more complicated. The basic idea is that you want to create an generic class with abstract methods it can use to pull in what is different from the class that implements it. To be honest, there is still quite a bit of code you have to write but there are two advantages. Since you are only providing the differences, there is much less code to write and because it is the same code being used everywhere, once you get it working, it works everywhere, reducing the chance of errors.&lt;/p&gt;
&lt;p&gt;Because your code is probably going to look much different than the code I’m using, I’m going to provide samples of the code rather than the full blown implementation.&lt;/p&gt;
&lt;p&gt;This also takes advantage of the new createEffect() function in NgRX 8.0.0.&lt;/p&gt;
&lt;p&gt;Our generic class is going to look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SmartEffects&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * actions is the action group for this entity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;actions&lt;/span&gt;(): &lt;span class=&#34;title class_&#34;&gt;NgrxActionGroup&lt;/span&gt;&amp;lt;T&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * adapter is the entity adapter for this entity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;adapter&lt;/span&gt;(): &lt;span class=&#34;title class_&#34;&gt;EntityAdapter&lt;/span&gt;&amp;lt;T&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * updateOperator is the method that will run when the update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   *   action is dispatched.  You would create a similar operator&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   *   method for any other calls you&amp;#x27;d make to the server or other&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   *   insertion points you would need for an effect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;action&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;updateOperator&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// have to use any here because that is how NgRX defines it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;: &amp;#123;&lt;span class=&#34;attr&#34;&gt;row&lt;/span&gt;: T&amp;#125; &amp;amp; &lt;span class=&#34;title class_&#34;&gt;TypedAction&lt;/span&gt;&amp;lt;&lt;span class=&#34;string&#34;&gt;`[&lt;span class=&#34;subst&#34;&gt;$&amp;#123;&lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&amp;#125;&lt;/span&gt;] Update`&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ): &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;T&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You might thing you could use an abstract field instead of  an abstract getter. But, javascript initializes the parent class prior to the child class and the field you need won’t be available when the effects are created.&lt;/p&gt;
&lt;p&gt;You’ll need to make the calls to the createEffect() methods inside the constructor. Again, the order that code gets executed between parent classes and child classes forces this to be done in the constructor.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Once you’ve created a consistent way of using NgRX throughout your code, you not only reduce the amount of boiler plate code you have to write, but you also reduce errors, make your code more maintainable, and create consistency throughout your code which will make it significantly more understandable.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/clean-state-management-with-ngrx/</guid>
            <title>Clean State Management with NgRx</title>
            <link>http://davembush.github.com/clean-state-management-with-ngrx/</link>
            <category>angular</category>
            <category>ngrx</category>
            <category>state-management</category>
            <pubDate>Mon, 04 Jul 2022 12:46:07 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Once again I’ve run into a situation where the code I’m looking at doesn’t resemble how the code was meant to be written.&lt;/p&gt;
&lt;p&gt;I’ve spent the last month fixing bugs that can all be summarized by the following problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducers updating nested data.&lt;/li&gt;
&lt;li&gt;Storing data manipulations that Selectors could perform&lt;/li&gt;
&lt;li&gt;Using Effects as Selectors&lt;/li&gt;
&lt;li&gt;Components doing too much data manipulation&lt;/li&gt;
&lt;li&gt;Too many actions and indirection&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Unfortunately, the people who need to hear this the most are the ones who will never read this article. Some of what I’m about to say, I may have discovered over the last several years of programming but I’m sure I didn’t discover this in isolation.&lt;/p&gt;
&lt;p&gt;So, lets review how NgRX should be used effectively.&lt;/p&gt;
&lt;h2 id=&#34;The-Problem-with-Nested-Data&#34;&gt;&lt;a href=&#34;#The-Problem-with-Nested-Data&#34; class=&#34;headerlink&#34; title=&#34;The Problem with Nested Data&#34;&gt;&lt;/a&gt;The Problem with Nested Data&lt;/h2&gt;&lt;p&gt;If you’ve ever worked on a system with nested state data as part of one slice, you know that updating that nested data is a pain. For those of you who haven’t, having to update that data makes your reducer 10 times longer and 3 times more complicated than it needs to be.&lt;/p&gt;
&lt;p&gt;This means, first, you’ve written more code than you need. This means there is a higher possibility of errors.  But beyond that, the code your customer has to download is also larger than it needs to be.  Worse, because it runs every time the nested data is updated, the code performs slower than it needs to.&lt;/p&gt;
&lt;p&gt;That last point might surprise you. Why does it run slower? Simply because you may end up running that code when it was not necessary.&lt;/p&gt;
&lt;h2 id=&#34;The-Problem-with-Storing-State-the-Way-You-Want-to-Use-It&#34;&gt;&lt;a href=&#34;#The-Problem-with-Storing-State-the-Way-You-Want-to-Use-It&#34; class=&#34;headerlink&#34; title=&#34;The Problem with Storing State the Way You Want to Use It&#34;&gt;&lt;/a&gt;The Problem with Storing State the Way You Want to Use It&lt;/h2&gt;&lt;p&gt;Related to nested data is the urge to store state the way you want to use it later on in the application.&lt;/p&gt;
&lt;p&gt;The main problem with doing this is that you need to make sure that state gets updated correctly from every place you update the raw data. In the process, you will invariably run the the derived state code multiple times when you could have only run it once or in many cases, not at all.&lt;/p&gt;
&lt;p&gt;Instead, you should modify the data into something your presentation needs using Selectors. Since everyone should be using the Selectors to get the information they need, and that selector is looking at the raw data, you can be sure that everyone is getting the correct data. Also, if nothing is listening to the observable that the selector returns, you will not be running the selector code more times than is necessary.&lt;/p&gt;
&lt;p&gt;You also have the advantage of taking advantage of memoization so that this data manipulation only happens when the data is needed and when it changes.&lt;/p&gt;
&lt;h2 id=&#34;Storing-State&#34;&gt;&lt;a href=&#34;#Storing-State&#34; class=&#34;headerlink&#34; title=&#34;Storing State&#34;&gt;&lt;/a&gt;Storing State&lt;/h2&gt;&lt;p&gt;Rule number one of state management is to store state at the most granular level you can. This means, in part, that each slice of your state, the table in your store, should be flat.&lt;/p&gt;
&lt;p&gt;What does it mean that the data is flat? It means that the object only contains primitive values. Strings, number, booleans, dates, or collections of objects that only contain primitive values. Just like you would in a relational database table.&lt;/p&gt;
&lt;p&gt;But, this may not be the most granular level.&lt;/p&gt;
&lt;p&gt;Say you have a row in your database that contains 3 fields that you always want but 50 or so that you only want if a particular presentation is running.  I would recommend creating a slice for the 3 main fields and then another slice or more, for the remaining fields and allow for the fact that you may not have all of them all the time.&lt;/p&gt;
&lt;p&gt;While most systems don’t need this. The system I’m working on does.&lt;/p&gt;
&lt;p&gt;This solves the storing nested data issue.&lt;/p&gt;
&lt;h2 id=&#34;The-Job-of-Effects&#34;&gt;&lt;a href=&#34;#The-Job-of-Effects&#34; class=&#34;headerlink&#34; title=&#34;The Job of Effects&#34;&gt;&lt;/a&gt;The Job of Effects&lt;/h2&gt;&lt;p&gt;Apparently, some people think that the job of an effect is to manipulate data.  But as we’ve already established, manipulating data is the job of selectors. No, the job of Effects is to retrieve data from wherever we are persisting it and to update the persistent store with any changes we’ve made. If we need to manipulate data to do either of those, again, Selectors is where we would do this work.&lt;/p&gt;
&lt;p&gt;Once you’ve narrowed the job of your effects down to this, you no longer need to return multiple actions from an effect.  Ideally an effect should fire one action.  But, no more than two.&lt;/p&gt;
&lt;h2 id=&#34;The-Job-of-Reducers&#34;&gt;&lt;a href=&#34;#The-Job-of-Reducers&#34; class=&#34;headerlink&#34; title=&#34;The Job of Reducers&#34;&gt;&lt;/a&gt;The Job of Reducers&lt;/h2&gt;&lt;p&gt;Reducers only have three jobs: add new data to the slice, remove data from the slice, and update data in the slice. That’s it. If your reducers are doing more than that, you’re doing it wrong.&lt;/p&gt;
&lt;h2 id=&#34;Extra-Credit&#34;&gt;&lt;a href=&#34;#Extra-Credit&#34; class=&#34;headerlink&#34; title=&#34;Extra Credit&#34;&gt;&lt;/a&gt;Extra Credit&lt;/h2&gt;&lt;p&gt;The above, is the bare minimum and may server you well for small projects. However, for larger projects you will want to consider using NgRX Entities.  This will reduce the amount of boiler plate code you need to write as well as making it easy to join your slices however you need to.&lt;/p&gt;
&lt;p&gt;One place in the code I’m working on this would be particularly useful is to see what slice owns another slice.  As the data is stored and returned we only know who the children are most of the time.  To find the parent, we have to iterate through the data to find the child and then look at what parent we are in.&lt;/p&gt;
&lt;p&gt;It gets even more complicated when a row of data could have more than one parent.&lt;/p&gt;
&lt;h2 id=&#34;Thinking-About-Code&#34;&gt;&lt;a href=&#34;#Thinking-About-Code&#34; class=&#34;headerlink&#34; title=&#34;Thinking About Code&#34;&gt;&lt;/a&gt;Thinking About Code&lt;/h2&gt;&lt;p&gt;The last point I want to make regarding state management is that how we think about our code impacts how we write our code.&lt;/p&gt;
&lt;p&gt;I’ve discovered over the years that most of us think about code from a GUI perspective. But, by doing this, we also tend to put a lot of logic in our components and keep doing so, until that doesn’t work any more. At that point, we start to consider state management.&lt;/p&gt;
&lt;p&gt;But what if we thought about code strictly from a data perspective? If every time you thought about the code you were writing and though, “what if I didn’t have a presentation layer? What problem am I trying to solve really? How can I do this without a presentation layer?” Then, your code would be more flexible, easier to maintain, and more scalable.&lt;/p&gt;
&lt;p&gt;How would it be more flexible?&lt;/p&gt;
&lt;p&gt;Back as the dotCom days were starting I had a manager come to me with a VB6 😝 application he had had build and said, “I’d like to take this code and run it on the web, or from a phone, or from the desktop.”  And my response to him was, “You can’t get their from here.” because the code was so tightly coupled to the presentation layer.&lt;/p&gt;
&lt;p&gt;But to bring it today, we often have the same kind of requirements. We originally solve a problem only to have our managers come to us with a new requirement that suggest using the same data to look at the code in a different way.  If all your data logic is in the presentation layer, you might achieve the goal but you’ll also have a lot of duplicate code if you are very careful. But, lets say you manage to pull that off. Six months later you are working on a bug in one of those two views. You fix it, but you forget about that other view and never think to fix it there too. And this is where your troubles begin.&lt;/p&gt;
&lt;p&gt;By pushing code as far down the stack as is practical, you reduce the amount of code you write, reduce the size of the code that your customer has to download, reduce the code you have to maintain, and in the case of NgRX end up writing code that performs faster.&lt;/p&gt;
&lt;p&gt;So, how might you force yourself to think in this way? By following this simple rule: Presentational components should only 1) display the data they’ve been give or 2) fire events indicating that some action has taken place.&lt;/p&gt;
&lt;p&gt;There is another type of component generally referred to as “Smart” components. They too have a rule. They should only 1) retrieve data from the store via Selectors and 2) fire actions to update the Store or trigger an Effect.&lt;/p&gt;
&lt;h2 id=&#34;Storing-Ancillary-State&#34;&gt;&lt;a href=&#34;#Storing-Ancillary-State&#34; class=&#34;headerlink&#34; title=&#34;Storing Ancillary State&#34;&gt;&lt;/a&gt;Storing Ancillary State&lt;/h2&gt;&lt;p&gt;Thinking about your code this way leads to the last point I want to make. If your data is always your single source of truth, you’ll want to store information in the Store that will help you determine things like sort order and filtering as well as other information that may be in your form.&lt;/p&gt;
&lt;p&gt;Personally, I tend to store all my form data in my store beyond, and including, the data I need to send back to the server. This helps me derive the data for my presentation layer and allows my actions to have smaller payloads.&lt;/p&gt;
&lt;p&gt;Many of you send all your form data with your action to update the database because you still think of the update as something the presentation layer is doing. The way I work with data is I just send an action that notifies the store that I want to update the data with the data from my form. The Effect grabs that data from the store and sends it to the server.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;While I’ve centered the discussion above to NgRX. The main ideas port to other methods of state management including things like Redux, MobX, and even Apollo GraphQL.&lt;/p&gt;
&lt;p&gt;By following the above architecture and design patterns your code will be easier to maintain, have fewer bugs and scale better.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/rethinking-action-names-redux-ngrx/</guid>
            <title>Rethinking Action Names (Redux/NgRX)</title>
            <link>http://davembush.github.com/rethinking-action-names-redux-ngrx/</link>
            <category>angular</category>
            <category>react</category>
            <category>ngrx</category>
            <category>redux</category>
            <pubDate>Sat, 29 May 2021 06:52:47 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;If you’ve been using some form of Redux, you are familiar with the basic flow of data through the Redux loop. Central to this flow are Actions, the messages that trigger code in our Reducer or Effect&amp;#x2F;Epic&amp;#x2F;Saga (depending on what flavor of Redux you are using).&lt;/p&gt;
&lt;p&gt;The model allows us to disconnect our code so that it only cares that an action was triggered in some way.  That is, “when this action occurs, I will run this code.”&lt;/p&gt;
&lt;p&gt;Because of this, we can create an action that triggers multiple code blocks to run. Our only concern is that the code that gets triggered can’t depend on each other.&lt;/p&gt;
&lt;p&gt;In fact, much of the official literature encourages this practice.&lt;/p&gt;
&lt;p&gt;And, this is where all our troubles begin.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Current-Recommendation&#34;&gt;&lt;a href=&#34;#Current-Recommendation&#34; class=&#34;headerlink&#34; title=&#34;Current Recommendation&#34;&gt;&lt;/a&gt;Current Recommendation&lt;/h2&gt;&lt;p&gt;You see, the official literature around actions also suggest a naming convention that is tied to what we want to happen, rather than what just happened or something otherwise more generic.&lt;/p&gt;
&lt;p&gt;For example, take the simple act of loading a list of employees from the server. To do this, we would typically create two actions.  The first would be &lt;code&gt;LoadEmployees&lt;/code&gt; and the second would be &lt;code&gt;LoadEmployeeResults&lt;/code&gt;. Both of these actions represent what we want to do, not what just happened.&lt;/p&gt;
&lt;p&gt;Now, let’s say we also want to display some sort of wait state and that we want to control it using Redux.  For that we would create a Reducer in our store.  Let’s call it &lt;code&gt;Wait&lt;/code&gt;. And for the purposes of this post, we will assume that &lt;code&gt;Wait&lt;/code&gt; tracks wait state by incrementing and decrementing a counter.&lt;/p&gt;
&lt;p&gt;But, we don’t need to create new Actions for our Wait state because we can re-use the actions we’ve already created. When we fire &lt;code&gt;LoadEmployees&lt;/code&gt; we can increment &lt;code&gt;Wait&lt;/code&gt; and when we fire &lt;code&gt;LoadEmployeesResult&lt;/code&gt; we can decrement the load.&lt;/p&gt;
&lt;h2 id=&#34;What’s-Wrong-With-That&#34;&gt;&lt;a href=&#34;#What’s-Wrong-With-That&#34; class=&#34;headerlink&#34; title=&#34;What’s Wrong With That?&#34;&gt;&lt;/a&gt;What’s Wrong With That?&lt;/h2&gt;&lt;p&gt;Do you see the problem here? We now have a reducer responding to an event that is not obviously tied to an action that has anything to do with the code that is getting executed. &lt;code&gt;Wait&lt;/code&gt; is not a &lt;code&gt;LoadEmployees&lt;/code&gt; thing although, you might reasonably say it is a &lt;code&gt;Load&lt;/code&gt; thing.&lt;/p&gt;
&lt;p&gt;And so how might we think about restructuring our code so that this makes more sense.&lt;/p&gt;
&lt;h2 id=&#34;A-Change-In-Perspective&#34;&gt;&lt;a href=&#34;#A-Change-In-Perspective&#34; class=&#34;headerlink&#34; title=&#34;A Change In Perspective&#34;&gt;&lt;/a&gt;A Change In Perspective&lt;/h2&gt;&lt;p&gt;What if instead of naming actions what we wanted to do, we named them something more along the lines of what just happened.  That would make our &lt;code&gt;LoadEmployees&lt;/code&gt; action &lt;code&gt;NeedEmployees&lt;/code&gt; and our &lt;code&gt;LoadEmployeesResult&lt;/code&gt; action, &lt;code&gt;EmployeesLoaded&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even these names don’t get at the fact that Needing Employees doesn’t mean we need to increment the wait state.&lt;/p&gt;
&lt;h2 id=&#34;Rethinking-The-Problem&#34;&gt;&lt;a href=&#34;#Rethinking-The-Problem&#34; class=&#34;headerlink&#34; title=&#34;Rethinking The Problem&#34;&gt;&lt;/a&gt;Rethinking The Problem&lt;/h2&gt;&lt;p&gt;One way we can think about this problem is to look at other messaging systems, like the windows messaging system. It’s been a while since I’ve used the raw messages in Windows but I seem to recall a &lt;code&gt;WM_BUTTON&lt;/code&gt; or &lt;code&gt;WM_BUTTON_CLICK&lt;/code&gt; message that would get passed to my application when a button was clicked.  One message for every button in my system that had, as part of the payload, what button was clicked so my code could listen for that message for that button and do something because of it.&lt;/p&gt;
&lt;p&gt;We could do something similar with the code above. Instead of tying the actions to particular code we want to run, our actions could be more generic.&lt;br&gt;What if we had two generic messages, &lt;code&gt;Load&lt;/code&gt; and &lt;code&gt;LoadResult&lt;/code&gt;. The payload for these messages could then have a &lt;code&gt;LoadType&lt;/code&gt; property that defined WHAT we were loading so that we could Load Employees, Addresses, and Phone Numbers all using the same two actions and we could also use &lt;code&gt;Load&lt;/code&gt; and &lt;code&gt;LoadResult&lt;/code&gt; to increment and decrement our wait state.&lt;/p&gt;
&lt;p&gt;This would work except we still have a problem.&lt;/p&gt;
&lt;h2 id=&#34;That’s-Not-How-It-Was-Designed&#34;&gt;&lt;a href=&#34;#That’s-Not-How-It-Was-Designed&#34; class=&#34;headerlink&#34; title=&#34;That’s Not How It Was Designed&#34;&gt;&lt;/a&gt;That’s Not How It Was Designed&lt;/h2&gt;&lt;p&gt;Most of the tools we currently have in place to reduce the boiler plate code we need to write are based on a one-to-one relationship between actions and the code that gets run. This isn’t to say that we couldn’t adapt them but doing so would be more trouble than it is worth because we would be working against the intended design.&lt;/p&gt;
&lt;p&gt;And so, I would suggest to you that the advice the current literature gives us about using Actions to trigger multiple blocks of code is wrong. Since Actions are primarily used as loosely coupled method calls, using them in unrelated places violates the Single Responsibility Principle and makes the code hard to follow.&lt;/p&gt;
&lt;p&gt;I’ve seen one code base where the code that gets triggered has absolutely nothing to do with the Action that triggers it. Not something in the simple case of LoadEmployee triggering Wait, but in more obscure relationship like &lt;code&gt;LoadCandyBars&lt;/code&gt; triggering &lt;code&gt;LoadSteakDinner&lt;/code&gt;.  The result is that the code becomes extremely difficult to follow. This is one of the biggest causes of bugs in this system.&lt;/p&gt;
&lt;h2 id=&#34;Maybe-This-Will-Work&#34;&gt;&lt;a href=&#34;#Maybe-This-Will-Work&#34; class=&#34;headerlink&#34; title=&#34;Maybe This Will Work&#34;&gt;&lt;/a&gt;Maybe This Will Work&lt;/h2&gt;&lt;p&gt;For our discussion about the Wait state, I would suggest that we create a separate set of Actions for our Wait state, possibly WaitStart() and WaitEnd() that get fired when we fire EmployeeLoad() and EmployeeLoadResult(). You could wrap these calls in a function or method to ensure they always get called together, but the actions themselves need to be unique to make the code easier to follow.&lt;/p&gt;
&lt;p&gt;Currently, this is my recommended implementation. While not ideal, it gets the job done and makes maintaining the code simple and straight forward even if I do have to duplicate more Actions that I would like to.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/how-to-avoid-binding-to-computed-values-in-angular/</guid>
            <title>How to Avoid Binding to Computed Values in Angular</title>
            <link>http://davembush.github.com/how-to-avoid-binding-to-computed-values-in-angular/</link>
            <category>angular</category>
            <category>ngrx</category>
            <category>functional</category>
            <category>reactive</category>
            <category>mvp</category>
            <pubDate>Sat, 08 May 2021 11:55:53 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;In my previous article about &lt;a href=&#34;../optimizing-angular-for-speed/&#34;&gt;Angular Performance&lt;/a&gt;, I indicated that one of the many ways you can produce an Angular application that performs well is by ensuring that you bind to a computed value.&lt;/p&gt;
&lt;p&gt;First, what did I mean by that?&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;There two ways you might bind to a computed value.&lt;/p&gt;
&lt;p&gt;The most obvious way is by calling a method in the template’s corresponding class. But, properties count to. To be clear, a property is some code that uses a &lt;code&gt;get&lt;/code&gt; prefix.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;somePropertyNameHere&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;something here&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, you might think you need to avoid this when you use the square brackets to assign a variable to a component property, but this also goes for ngIf and ngFor code as well.&lt;/p&gt;
&lt;p&gt;What we are striving for is to not have the template recompute anything unless the data has actually changed.&lt;/p&gt;
&lt;p&gt;The only exception to this is the ngFor trackBy attribute which is used to ensure the whole list doesn’t re-render just because the array changed. I’m assuming you are using this.&lt;/p&gt;
&lt;p&gt;But, you say, I NEED to compute those values in order to display them correctly.&lt;/p&gt;
&lt;p&gt;OK, let’s assume for a second that this is true. The way you do this is with pipes.&lt;/p&gt;
&lt;h2 id=&#34;Pipes&#34;&gt;&lt;a href=&#34;#Pipes&#34; class=&#34;headerlink&#34; title=&#34;Pipes&#34;&gt;&lt;/a&gt;Pipes&lt;/h2&gt;&lt;p&gt;You should already be familiar with pipes because this is how we format dates, format numbers and subscribe to observables in the template.  But you aren’t limited to using the built-in pipes. You can create your own, and it is quite easy to do.&lt;/p&gt;
&lt;p&gt;All you need is a class with the &lt;code&gt;@pipe&lt;/code&gt; attribute that implements the &lt;code&gt;PipeTransform&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;The code you would normally place in the method of property of your component class can go in here instead.&lt;/p&gt;
&lt;p&gt;By doing this, Angular can see that the variable that is passed to it has changed, or not, and can determine when the code needs to be recomputed.&lt;/p&gt;
&lt;h2 id=&#34;ngOnChanges&#34;&gt;&lt;a href=&#34;#ngOnChanges&#34; class=&#34;headerlink&#34; title=&#34;ngOnChanges()&#34;&gt;&lt;/a&gt;ngOnChanges()&lt;/h2&gt;&lt;p&gt;Another way you might achieve the same goal is by trapping the &lt;code&gt;ngOnChanges()&lt;/code&gt; event for the component.&lt;/p&gt;
&lt;p&gt;Many times, any value that we would compute in a method or property to be pulled from the template is only going to change if an &lt;code&gt;@input&lt;/code&gt; value changed.&lt;/p&gt;
&lt;p&gt;Instead of pulling the value and computing it on every change detection cycle, you can listen for the dependency during the &lt;code&gt;ngOnChanges&lt;/code&gt; event and assign the new value to a class field and have your template look at the field instead.&lt;/p&gt;
&lt;p&gt;Be careful though. If you are lazy and recompute the field every time &lt;code&gt;ngOnChanges()&lt;/code&gt; is called, you really haven’t gained anything by it.  &lt;code&gt;ngOnChanges()&lt;/code&gt; will pass into you exactly what changed and you can use that to determine if the value should be recomputed.&lt;/p&gt;
&lt;h2 id=&#34;NgRX-Store-Selector&#34;&gt;&lt;a href=&#34;#NgRX-Store-Selector&#34; class=&#34;headerlink&#34; title=&#34;NgRX Store Selector&#34;&gt;&lt;/a&gt;NgRX Store Selector&lt;/h2&gt;&lt;p&gt;My favorite means of achieving the goal of not calling computed values is by using NgRX Store Selectors.&lt;/p&gt;
&lt;p&gt;When you are new to NgRX you may only be using the simple selector.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; observerThing = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;storeSlice&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And of course you can drill down from storeSlice into children if you need to.&lt;/p&gt;
&lt;p&gt;If you’ve graduated to Feature Selectors, your code may have graduated to:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; observerThing = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(featureSelector));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;where &lt;code&gt;featureSelector&lt;/code&gt; looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;createFeatureSelector&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;feature&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;featureSlice&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;but there are other uses for &lt;code&gt;createSelector&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can use it to combine slices:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  slice1Selector,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  slice2Selector,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;s1, s2&lt;/span&gt;) =&amp;gt;&lt;/span&gt; combineLogicGoesHere&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Or, you can use it to create a selector for a specific bit of information.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  sliceSelector,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;s1&lt;/span&gt; =&amp;gt;&lt;/span&gt; s1.&lt;span class=&#34;property&#34;&gt;s1Part&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And by combining this, we can create a selector that does our formatting for us only when the underlying data has changed.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; partSelector = &lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  sliceSelector,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;s1&lt;/span&gt; =&amp;gt;&lt;/span&gt; s1.&lt;span class=&#34;property&#34;&gt;s1Part&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; formatedPart = &lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  partSelector,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;ps&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;formatPsHere&lt;/span&gt;(ps)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now, our template can listen to this the same as it would listen to any other selector.&lt;/p&gt;
&lt;p&gt;This is the method I most prefer. By pushing this code down into a selector, I don’t have to be concerned with explicitly detecting what has changed. I let the selector do that for me. I just respond to the change when it happens.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/an-angular-application-architecture-that-works/</guid>
            <title>An Angular Application Architecture That Works</title>
            <link>http://davembush.github.com/an-angular-application-architecture-that-works/</link>
            <category>angular</category>
            <category>ngrx</category>
            <category>functional</category>
            <category>reactive</category>
            <category>mvp</category>
            <pubDate>Wed, 01 Jan 2020 11:55:53 -0500</pubDate>
            <description><![CDATA[ &lt;p&gt;The purpose of this article is to specify a working architecture that everyone can use for any Angular applications.  This architecture aims to achieve the following goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure that all parts of an application have a home so that anyone can pick up any application that uses this architecture and modify the application without having to learn where everything lives.&lt;/li&gt;
&lt;li&gt;Reduce the overall complexity of any one application by using well-established design patterns that work within the Angular ecosystem.&lt;/li&gt;
&lt;li&gt;Reduce the number of bugs introduced into an application by reducing the need for duplicate code.&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Guiding-Principles&#34;&gt;&lt;a href=&#34;#Guiding-Principles&#34; class=&#34;headerlink&#34; title=&#34;Guiding Principles&#34;&gt;&lt;/a&gt;Guiding Principles&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Largely adhere to the &lt;a href=&#34;https://angular.io/guide/styleguide&#34;&gt;Angular Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prefer Functional&amp;#x2F;Reactive programming over Imperative&amp;#x2F;Object Oriented programming.&lt;/li&gt;
&lt;li&gt;Prefer Composition over Inheritance when using Object Oriented programming&lt;/li&gt;
&lt;li&gt;For Object Oriented code, and where it applies, Functional&amp;#x2F;Reactive code, make your code S..D&lt;ul&gt;
&lt;li&gt;Adhere to the Single Responsibility Principle:&lt;ul&gt;
&lt;li&gt;Keep the size of the individual files (html, css, ts) small&lt;/li&gt;
&lt;li&gt;Separate file for each class, function, interface, enum, etc.&lt;/li&gt;
&lt;li&gt;Keep the cyclomatic complexity of functions and methods small.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keep your code DRY&lt;/li&gt;
&lt;li&gt;Because we prefer Composition over Inheritance, the OLI part of SOLID don’t apply.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prefer composition over child routes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Directory-Structure&#34;&gt;&lt;a href=&#34;#Directory-Structure&#34; class=&#34;headerlink&#34; title=&#34;Directory Structure&#34;&gt;&lt;/a&gt;Directory Structure&lt;/h2&gt;&lt;p&gt;Let’s start with the directory structure our applications will use.  To start with, the directory structure outlined in the &lt;a href=&#34;https://angular.io/guide/styleguide&#34;&gt;Angular Style Guide&lt;/a&gt; should be used with some minor modifications that still obey the general principles outlined in the style guide.&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;projectFolder&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+- src&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  +- core&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  +- dialogs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- dialog1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      +- helper-component-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      +- helper-component-2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      main dialog files go here directly&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      under the dialog directory&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        - html, css, ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        - dialog specific NgRX code&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- dialog2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      +- helperComponent3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      main dialog files go here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- etc...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  +- routes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- route-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      +- supporting-component-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      +- store&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        supporting route specific NgRX files go here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        these include actions, effects, services, reducers,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        and selectors.  Each set of files get their own&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        directory. The extensions for each are:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        - *.actions.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        - *.effects.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        - *.service.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        - *.reducer.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        - *.selector.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        route store slice module goes here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      route1 components go here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      route1 module goes here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- route-1-subroute-a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      similar to above.  This is only IF you have sub-routes.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      I strongly advise against them.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  +- shared&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- components&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      only components that are shared between routes go here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- store&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      only store files that are shared between routes go here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    +- services&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      only services, if any, that aren&amp;#x27;t used by your store go here&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What is slightly different from the style guide is that a separate directory is created for dialogs and routes as these will be where my top-level components will live.  Within a route or a dialog, everything that route or dialog needs should live under it.  In the case where a class is needed by multiple routes or dialogs, these files live under shared.&lt;/p&gt;
&lt;p&gt;As a guiding principle, you should think of each route as a stand-alone application with its own module.  It should be able to run on its own using the classes, functions, etc from either its directory and sub-directories or the classes, functions, etc in the shared directory.&lt;/p&gt;
&lt;p&gt;This leads us to Lazy Loading&lt;/p&gt;
&lt;h2 id=&#34;Lazy-Loading&#34;&gt;&lt;a href=&#34;#Lazy-Loading&#34; class=&#34;headerlink&#34; title=&#34;Lazy Loading&#34;&gt;&lt;/a&gt;Lazy Loading&lt;/h2&gt;&lt;p&gt;While it is possible to create an application where the routes are all specified in one file, this file will quickly get out of hand if you are working with a large application.  You can save yourself a lot of trouble and reduce the cognitive load necessary to digest one file with all the routes if you commit to lazy loading up front.&lt;/p&gt;
&lt;h3 id=&#34;Routes&#34;&gt;&lt;a href=&#34;#Routes&#34; class=&#34;headerlink&#34; title=&#34;Routes&#34;&gt;&lt;/a&gt;Routes&lt;/h3&gt;&lt;p&gt;What this means from a practical perspective is that each route will be loaded in as it is needed. One of the side benefits of this is that the files necessary to run each route will only be loaded as they are needed. This will decrease the time it takes to load the application.&lt;/p&gt;
&lt;p&gt;You will, however, need to ensure that each route can be loaded directly because sometimes taking the expected path will load modules that you forgot to load as part of the route.&lt;/p&gt;
&lt;h3 id=&#34;NgRX&#34;&gt;&lt;a href=&#34;#NgRX&#34; class=&#34;headerlink&#34; title=&#34;NgRX&#34;&gt;&lt;/a&gt;NgRX&lt;/h3&gt;&lt;p&gt;Similarly, you should make use of feature stores in NgRX so that you can dynamically add in store slices with each module rather than loading them all in when the application loads.  Done correctly, this will also reduce the cognitive load around your store structure as you will only need to be concerned about the store structure for each route.&lt;/p&gt;
&lt;p&gt;For consistency’s sake, I create feature slices in my shared folder for NgRX slices that are shared rather than load them all at the application level. Again, this reduces the cognitive load necessary to understand any one part of the application. It has the added benefit of making it easier to move slices of the store from a route feature to a shared feature because the structure remains essentially the same.&lt;/p&gt;
&lt;h2 id=&#34;Components&#34;&gt;&lt;a href=&#34;#Components&#34; class=&#34;headerlink&#34; title=&#34;Components&#34;&gt;&lt;/a&gt;Components&lt;/h2&gt;&lt;p&gt;A large part of the front-end code is written using components which include the route, controls, and components that encompass blocks of components.&lt;/p&gt;
&lt;p&gt;The following addresses how to create components in a way that can be maintained.&lt;/p&gt;
&lt;h3 id=&#34;Keep-em-Small&#34;&gt;&lt;a href=&#34;#Keep-em-Small&#34; class=&#34;headerlink&#34; title=&#34;Keep em Small&#34;&gt;&lt;/a&gt;Keep em Small&lt;/h3&gt;&lt;p&gt;One of the main problems I’ve seen in my career with all code, but especially components, is that we try to put all the code for a page all in one place. We don’t even think of the third category of components.  My advice for your template code is that once it has gotten past the point of code that can’t fit in a file that is 150 lines long and 80 characters wide, or has nested to a point beyond 6 elements, you should consider breaking them out. There may be a few exceptions, but this metric will keep your code easy to understand.&lt;/p&gt;
&lt;p&gt;One way you can reduce the nesting without a lot of effort is to style the @host element of the template rather that using a containing DIV tag around the other elements that are the functional components of your component.  Other than because it reduces nesting, it also eliminates a layer of HTML that needs to be rendered. Since we are going to favor lots of small components over a few large components, this will, ultimately, impact the performance of your application.&lt;/p&gt;
&lt;p&gt;Another way you can reduce nesting is by recognizing patterns in your code and extracting them into their own component.&lt;/p&gt;
&lt;p&gt;Finally, consider measuring the cyclomatic complexity of your templates.  Codelyzer has a rule you can add to your linting.  I’d set this to no more than 10.  Cyclomatic complexity measures how many paths there are through your code.  Once you’ve added if, switch or for loops in your template, you’ve introduced some cyclomatic complexity. If you keep to the metrics I’ve already mentioned, you should never hit the cyclomatic complexity metric.&lt;/p&gt;
&lt;h3 id=&#34;Component-Services&#34;&gt;&lt;a href=&#34;#Component-Services&#34; class=&#34;headerlink&#34; title=&#34;Component Services&#34;&gt;&lt;/a&gt;Component Services&lt;/h3&gt;&lt;p&gt;Let’s talk about the purpose of components for a bit. The point of components is to allow the end user to interact with the program. In practical terms this means it has two jobs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Display data that is meaningful to the user&lt;/li&gt;
&lt;li&gt;Allow the user to issue commands that either manipulate the data or take them to another screen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is true for whatever programming environment you are using.&lt;/p&gt;
&lt;p&gt;I’ve been programming now for 32 years and I still see programmers who try to make the component, or the view as they are sometimes called, do something else.&lt;/p&gt;
&lt;p&gt;This also means that business rules have no place in a component.&lt;/p&gt;
&lt;p&gt;Having said that, it is often true that to get the data to display we often need to introduce logic into our component somewhere. Once we’ve introduced logic, it would be great if we could also write unit tests for that logic without a lot of pain.&lt;/p&gt;
&lt;p&gt;If we put this code in the TS file that is our component, this means that in order to test the logic we need to scaffold the component.  Wouldn’t it be better or at least easier, if we didn’t need the component at all?&lt;/p&gt;
&lt;p&gt;This is where component services come in.  If you are familiar with the Model View Presenter design pattern, this is an adaptation of that.&lt;/p&gt;
&lt;p&gt;You can read details of how this is implemented on the following two sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://davembush.github.io/model-view-presenter-angular-and-testing/&#34;&gt;Model View Presenter, Angular, and Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/this-is-angular/model-view-presenter-with-angular-533h&#34;&gt;Model View Presenter with Angular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The basic idea is that you leave the component as the thing that only presents the data and receives notifications from the user. Any logic that is needed goes into an Angular service that is registered with the component using the viewProviders property of the @Component decorator.&lt;/p&gt;
&lt;p&gt;One thing to be careful of here is that you may be tempted, as I have been for a while, to pull the information from the service up into the view. The problem with this is that it is not an optimal implementation for change detections.&lt;/p&gt;
&lt;p&gt;The preferred method would be to use the model as it was originally intended and have the service set fields in the presentation layer so that change detection only happens when the data actually changes rather than every time the component is checked simply because your data has to be computed in a property or method every time.&lt;/p&gt;
&lt;p&gt;And while we are discussing change detection, you should also avoid changing the state of your component internally. By using OnPush notification, all changes have to come in on an &lt;code&gt;@Input()&lt;/code&gt; field for the component to know it has to do change detection. You can, of course, get around this by using &lt;code&gt;markForCheck()&lt;/code&gt; but the disadvantage there is that you may force change detection more often than it is actually needed.&lt;/p&gt;
&lt;p&gt;This is why we prefer the smart component&amp;#x2F;dumb component model. It forces many of these issues. To do this properly, you’ll probably need to create child components so you can take advantage of the &lt;code&gt;@Input()&lt;/code&gt; fields.&lt;/p&gt;
&lt;h3 id=&#34;Smart-x2F-Dumb&#34;&gt;&lt;a href=&#34;#Smart-x2F-Dumb&#34; class=&#34;headerlink&#34; title=&#34;Smart&amp;#x2F;Dumb&#34;&gt;&lt;/a&gt;Smart&amp;#x2F;Dumb&lt;/h3&gt;&lt;p&gt;Broadly speaking, Angular components can be classified as “Smart Components” or “Dumb Components”.  Smart Components get their data form the outside world and pass data out to the outside world.  In the architecture defined here, that will be from the NgRX store via selectors and into the NgRX store using Actions.&lt;/p&gt;
&lt;p&gt;Dumb Components render data they are passed via the @Input() decorators and fire events back up to the containing component via @Output() decorators.&lt;/p&gt;
&lt;p&gt;A lot of people understand these concepts but misunderstand how they apply to an Angular application. You can’t follow these rules simply by wrapping your Dumb Components in Smart Components. While this technically obeys the definition, the result is code that is hard to understand. What we want is a central location in our code that is always responsible for getting data to and from the store.&lt;/p&gt;
&lt;p&gt;We do this by specifying that our Routes are the Smart Components.  This includes child routes, if you have them.&lt;/p&gt;
&lt;p&gt;I’ve found that it is often easier to make a dialog a smart component as well, so if you find this is easier than passing the data that the dialog needs to the dialog, you can make dialogs smart as well. This is why we have a &lt;code&gt;dialogs&lt;/code&gt; directory and a &lt;code&gt;routes&lt;/code&gt; directory as immediate children of the &lt;code&gt;app&lt;/code&gt; directory.&lt;/p&gt;
&lt;h3 id=&#34;Forms&#34;&gt;&lt;a href=&#34;#Forms&#34; class=&#34;headerlink&#34; title=&#34;Forms&#34;&gt;&lt;/a&gt;Forms&lt;/h3&gt;&lt;p&gt;Technically, there are two ways of programming forms using Angular. The first way uses the old 2-way data-binding model and is called “Templated Forms.” These were popular in AngularJS (aka Angular 1).  The second is new to Angular (aka Angular 2+) and is called “Reactive Forms”. Our architecture will use the newer model because it conforms to the guiding principle of keeping things as Functional as possible and removing as much logic from the component as possible.&lt;/p&gt;
&lt;p&gt;There are several implications of how we program our forms related to this.&lt;/p&gt;
&lt;p&gt;First, you will define your FormGroup(s) in the Route’s component service.&lt;/p&gt;
&lt;p&gt;Second, in order to keep your templates small, you may be a need to put bits of your form in child components. You will find that each child component needs its own &lt;code&gt;formGroup&lt;/code&gt; attribute around the &lt;code&gt;formControls&lt;/code&gt; that it is responsible for.  The best way to do this is to pass the &lt;code&gt;formGroup&lt;/code&gt; down from the router into the child components and then assign that variable to the &lt;code&gt;formGroup&lt;/code&gt; attribute in the child component’s template.&lt;/p&gt;
&lt;p&gt;For particularly complex forms, I recommend creating a formGroup object as a separate file in each component’s directory and then use &lt;code&gt;Object.assign()&lt;/code&gt; to concatenate the parts into one whole.  This keeps the related code together while allowing you to assemble them into a form that Angular can use.&lt;/p&gt;
&lt;h3 id=&#34;onPush-Notification&#34;&gt;&lt;a href=&#34;#onPush-Notification&#34; class=&#34;headerlink&#34; title=&#34;onPush Notification&#34;&gt;&lt;/a&gt;onPush Notification&lt;/h3&gt;&lt;p&gt;One of the optimizations available to Angular is a method of change detection called “Push Notification”.  Simply stated, with Push Notification enabled, change detection for the component is only initiated if new data has been pushed into it via one of it’s @Input() variables. Otherwise it is skipped.&lt;/p&gt;
&lt;p&gt;In a large application, the performance gains using this mechanism are enormous. This is particularly true of an application that has an extremely nested or repetitive set of components. Each instance will be checked with each event that would cause the change detection cycle to kick off.&lt;/p&gt;
&lt;p&gt;Since we will be striving to keep our components small, our apps are even more susceptible to the problems associated with change detection.&lt;/p&gt;
&lt;p&gt;While it is true that Push Notification handles most of the situations, you will find that occasionally data in your component changes for some other reason. For this, you should use the ChangeDetectorRef methods.&lt;/p&gt;
&lt;h3 id=&#34;Styling&#34;&gt;&lt;a href=&#34;#Styling&#34; class=&#34;headerlink&#34; title=&#34;Styling&#34;&gt;&lt;/a&gt;Styling&lt;/h3&gt;&lt;p&gt;In an ideal world, you would have a theme that is external to all of your projects and that can be &lt;code&gt;npm install&lt;/code&gt;ed into all the projects you work on.  This should control the basic look and feel of your application including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;font color, size, family etc&lt;/li&gt;
&lt;li&gt;background color&lt;/li&gt;
&lt;li&gt;default style for common components&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lacking a separate project for your theming information, place this information in a global styles.css file.&lt;/p&gt;
&lt;p&gt;Under no circumstance would you ever place the above information directly in a component file within your application.&lt;/p&gt;
&lt;p&gt;Also, because all the main information is going to be in your theme, there is no benefit to using SCSS within your project. And, in fact, every project I’ve ever been a part of that tried to use SCSS as part of the project has become more of a mess and harder to maintain because of it.&lt;/p&gt;
&lt;p&gt;Use SCSS for your theme project and CSS for your application projects.&lt;/p&gt;
&lt;h2 id=&#34;NgRX-1&#34;&gt;&lt;a href=&#34;#NgRX-1&#34; class=&#34;headerlink&#34; title=&#34;NgRX&#34;&gt;&lt;/a&gt;NgRX&lt;/h2&gt;&lt;p&gt;We’ve already addressed some of how NgRX should be used when we talked about using Features instead of one great big Store blob.&lt;/p&gt;
&lt;p&gt;But, there are some other major places where NgRX gets misused that need to be addressed.&lt;/p&gt;
&lt;h3 id=&#34;One-to-One-vs-One-to-Many&#34;&gt;&lt;a href=&#34;#One-to-One-vs-One-to-Many&#34; class=&#34;headerlink&#34; title=&#34;One to One vs One to Many&#34;&gt;&lt;/a&gt;One to One vs One to Many&lt;/h3&gt;&lt;p&gt;If you are new to NgRX, one of the first things that will seem like a really good idea is that you should be able to create an action and have multiple Reducers or Effects respond to it. If you were to act on this impulse, you would (eventually) find that this ultimately makes your code hard to maintain because you are now calling multiple functions “at the same time.”&lt;/p&gt;
&lt;p&gt;From a maintenance perspective, this is a problem.  Imagine trying to track down the flow of execution in your application only to find that when you get to point X you now have to trace the action down multiple paths, not really knowing which ultimately is executing the code you are really interested in.&lt;/p&gt;
&lt;p&gt;But, you have a further hidden problem. The order those functions get called is, for all practical purposes, undefined. At least, from a programming perspective, they should be considered undefined. The order is probably deterministic for any particular version of NgRX that you are running, but when you upgrade there is no reason to believe the code will still execute in the same order.&lt;/p&gt;
&lt;p&gt;Similarly, your actions, reducers, and effects should only relate to each other. You shouldn’t have an action that is part of slice A being handled by slice B even if it is a one-to-one relationship.&lt;/p&gt;
&lt;p&gt;Some code I’ve seen has also aliased actions so that, technically action A is actually action B. Don’t do that! All the above make your code incredibly hard to track flow of control.&lt;/p&gt;
&lt;p&gt;If you were to do this, which I still don’t recommend, you should create actions that are clearly multi-use actions.&lt;/p&gt;
&lt;p&gt;So what if indeed a particular event needs to kick-off or update seperate slices of a store? The can be answered in a few ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It may be worthwhile re-examining the architecture of your overall store. Is there a good rational for why a single Action will impact separate slices of a store in the first place? This is especially important if the resulting actions end up doing the same thing or are using the same data. If so, consider normalizing the store slices and removing redundancies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If that passes the sniff test, consider dispatching different actions in sequence for that event. For example, you may be updating different parts of the application each with different information and structure or different service calls. Under this scenario, separate store slices will be updated via different store action sets and different information structures, regardless of whether they were initiated by the same event.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To reiterate, do not mix the various store slice actions just to intercept the same event.&lt;/p&gt;
&lt;h3 id=&#34;Flat-Store&#34;&gt;&lt;a href=&#34;#Flat-Store&#34; class=&#34;headerlink&#34; title=&#34;Flat Store&#34;&gt;&lt;/a&gt;Flat Store&lt;/h3&gt;&lt;p&gt;Another temptation you may encounter when you start working with NgRX is that you’ll return data from the server in a nested format and then try to deal with it in your reducer in that form.&lt;/p&gt;
&lt;p&gt;Don’t do that!&lt;/p&gt;
&lt;p&gt;Instead, flatten the data into multiple slices and use the Selectors to reassemble the data when you need it.&lt;/p&gt;
&lt;p&gt;If you are going to flatten the data on the client side, you should use &lt;a href=&#34;https://www.npmjs.com/package/normalizr&#34;&gt;Normalizr&lt;/a&gt;. Or, you could use &lt;a href=&#34;https://www.npmjs.com/package/normalizr&#34;&gt;NgRX-Normalizr&lt;/a&gt; and let it do some of the work for you.&lt;/p&gt;
&lt;p&gt;If you have the option, you should flatten your data on the server before you return it. The main advantage to doing this is that you will return less data.&lt;/p&gt;
&lt;p&gt;The reason you want to work with a flat store is because of immutability. Because the store is immutable, or at least, it SHOULD be, you will need to ensure that when you change an element of the data the object pointers above it all change as well. If you don’t, your change detection mechanisms won’t work correctly.&lt;/p&gt;
&lt;p&gt;If you use Normalizr and reassemble the nesting in your selectors, you won’t have to deal with this mess.&lt;/p&gt;
&lt;h3 id=&#34;Store-Everything&#34;&gt;&lt;a href=&#34;#Store-Everything&#34; class=&#34;headerlink&#34; title=&#34;Store Everything&#34;&gt;&lt;/a&gt;Store Everything&lt;/h3&gt;&lt;p&gt;You also may be tempted to only store some of your application state in the NgRX store.  Maybe you think storing search form data is overkill. That you’ll pass the data over as it is needed. That might work, for a while.&lt;/p&gt;
&lt;p&gt;But think about this. Once you’ve placed the data in the store, when you come back to a particular route, the data is still there. If you don’t, the data is gone and you have to fill in the form again.&lt;/p&gt;
&lt;p&gt;You might say, “But that’s what I want them to do.” Yes, but, what if the customer changes their mind? Now you have options.&lt;/p&gt;
&lt;p&gt;Another advantage to the “Store Everything” approach is that you’ve pushed the logic for handling the data changes further down the stack. One place this becomes noticeable is that when you decide to process the data, you no longer have to pass the data with the Action to process the data. The Effect that processes the Action can now retrieve the data from the store.&lt;/p&gt;
&lt;p&gt;If nothing else, this makes the code easier to test.  Code that is easier to test is code that is easier to maintain, even if you never write any test for the code.&lt;/p&gt;
&lt;h3 id=&#34;Data-Transformation&#34;&gt;&lt;a href=&#34;#Data-Transformation&#34; class=&#34;headerlink&#34; title=&#34;Data Transformation&#34;&gt;&lt;/a&gt;Data Transformation&lt;/h3&gt;&lt;p&gt;There are two places where data transformations might need to occur.  The first is after we retrieve the data or right before we send the data back. In an ideal world the server would always send back exactly what we need in the form we need it and we would send it back in a similar form. There are at least two advantages to this.  The first is that it will reduce the amount of processing that the client side code has to perform. Second, the data that that comes back will be generally smaller.&lt;/p&gt;
&lt;p&gt;The second place is as we are working with the data on the client side.&lt;/p&gt;
&lt;p&gt;One scenario where this would occur is when you update a field and the side effect is that data someplace else on the screen should change as well. Not because you retrieved data from somewhere but simply because you changed data in an input field.&lt;/p&gt;
&lt;p&gt;As I’ve already mentioned, we want to keep processing of data out of our components or even our component services unless the processing is specific to what the component does. The next logical place to put the processing of our store data is in our reducers.  But this has problems too. Maybe the data you want to display has no resemblance to the data that is in your store. Beyond that, this gets difficult to manage.&lt;/p&gt;
&lt;p&gt;Instead, the best place to handle data transformation is in your selector. Selectors have a function call as their last parameter that takes all the data slices from the previous parameters. This function can manipulate the data and return it in any way that makes sense for the application. It has the added advantage of being able to leverage memoization and changing the object pointer as I’ve already mentioned.&lt;/p&gt;
&lt;h3 id=&#34;Services&#34;&gt;&lt;a href=&#34;#Services&#34; class=&#34;headerlink&#34; title=&#34;Services&#34;&gt;&lt;/a&gt;Services&lt;/h3&gt;&lt;p&gt;A final temptation may be to ditch the Services that the Effects use and go after the REST end points directly. This seems to make sense since the Effects and the Services are both &lt;code&gt;@Injectable()&lt;/code&gt;s but the problem with this is primarily that it violates the Single Responsibility Principle.&lt;/p&gt;
&lt;p&gt;For retrieval of data, the Service is responsible for retrieving the data and possibly morphing it into the shape that we want it in. The Effect is primarily responsible for moving the resulting data into the store.&lt;/p&gt;
&lt;p&gt;The reverse is also true. Effects are responsible for collecting the data from wherever it is in the store and passing it to the Service.  The Service is responsible for sending that data to the server in the form that it needs it.&lt;/p&gt;
&lt;p&gt;One error I’ve seen is to inject the Store into the Service. The only &lt;code&gt;@Injectable()&lt;/code&gt; that should be injected into your HTTP Service is HttpClient.&lt;/p&gt;
&lt;h2 id=&#34;Angular-as-Functional-x2F-Reactive&#34;&gt;&lt;a href=&#34;#Angular-as-Functional-x2F-Reactive&#34; class=&#34;headerlink&#34; title=&#34;Angular as Functional&amp;#x2F;Reactive&#34;&gt;&lt;/a&gt;Angular as Functional&amp;#x2F;Reactive&lt;/h2&gt;&lt;p&gt;At the beginning of this article, I said one of the guiding principles of how we code is that we prefer Functional&amp;#x2F;Reactive programming over Imperative&amp;#x2F;Object Oriented programming.&lt;/p&gt;
&lt;p&gt;What does that mean?&lt;/p&gt;
&lt;p&gt;Imperative programming is code most of us are familiar with. It is code that says, do this, then do that, then do something else. Everything happens in sequence and it is very clear what happens when because the code says so.&lt;/p&gt;
&lt;p&gt;The problem with imperative programming is that it often contributes to tightly coupled code. In fact, this is the main reason Object Oriented code uses dependency injection and inversion of control.&lt;/p&gt;
&lt;p&gt;Object Oriented programming adds a layer on to imperative programming and tries to model everything in the world as a thing.  For example, a database Table, and User Interfaces are things. They lend themselves well to Object Oriented programming. By layering in dependency injection they decouple a lot of the code.&lt;/p&gt;
&lt;p&gt;But Object Oriented code still suffers from a problem. Not everything we are trying to write code for is a thing. Most of what we code is a process. Until recently, we’ve tried to shoehorn in a programming model that works for things and tried to make processes things somehow. It hasn’t worked well.&lt;/p&gt;
&lt;p&gt;Another problem with Imperative&amp;#x2F;Object Oriented programming is that it mutates memory and each function can return different values even though I’ve passed in the same values. This can make this model difficult to test.&lt;/p&gt;
&lt;p&gt;Think about it, which would you rather write a test for?  Code that given the same parameters always returns the same value, or code that is indeterminate.&lt;/p&gt;
&lt;p&gt;But wait, you say, all code is deterministic. Or is it?&lt;/p&gt;
&lt;p&gt;Take for example a method in a class that has two member variables.  The method itself takes a parameter and makes a call out to a database. How many possible return values are there for any given value we pass in?&lt;/p&gt;
&lt;p&gt;Well, here’s the problem, you actually have 4 parameters and one of these is difficult to control. Oh, sure, you could mock the call to the database and get some control. But if you could write code that didn’t require taming, wouldn’t that be helpful?&lt;/p&gt;
&lt;p&gt;Which leads us to Functional Programming. In Functional Programming we have a number of key advantages. First any given function passed the same parameters always returns the same value. Testing issues solved! Second, strictly functional code has no variables. As one article I read states, “You can’t screw up what you can’t change.” Third, everything is a function.&lt;/p&gt;
&lt;p&gt;This is an oversimplification, you can read more on functional programming elsewhere. One final advantage that most of the literature doesn’t mention is that Functional Programming models processes better than Object Oriented programming. And because of the features I mentioned above, it is also much easier to test and much more deterministic.&lt;/p&gt;
&lt;p&gt;Which leads to Reactive. Aside from the fact that we are using RxJS in Angular which is a Reactive library, this also means that we react to “events” that get fired.  This is essentially what is happening when you dispatch an action in NgRX, what you are effectively saying is, “someone do this thing for me.”&lt;/p&gt;
&lt;p&gt;In the past, you would have just coded for that process to start. Here, that action could just as easily happen on some other computer, or at least some other thread. And so, instead of coding “do this, then that, then this other thing.”  You are coding, “when I get notified, I’m going to do this and then, optionally, notify the system that I’m done.”&lt;/p&gt;
&lt;p&gt;And so, we favor Functional&amp;#x2F;Reactive programming because it makes our programs more stable but we admit that not everything can be done using a Functional&amp;#x2F;Reactive model.&lt;/p&gt;
&lt;h2 id=&#34;Data-over-Presentation&#34;&gt;&lt;a href=&#34;#Data-over-Presentation&#34; class=&#34;headerlink&#34; title=&#34;Data over Presentation&#34;&gt;&lt;/a&gt;Data over Presentation&lt;/h2&gt;&lt;p&gt;This is a specific instance of the previous point, but I want to call it out directly because I recognize that it is not quite as obvious to most people as it is to me.&lt;/p&gt;
&lt;p&gt;Most programmers, because they are still thinking in an imperative model, think of their code in terms of the presentation layer. What this means in terms of how they code is that when an event occurs in the view, they tend to fire an action. Sometimes this is the right thing to do. But, if the action that just occurred in the view also changed the state of your data in someway, it would make more sense to observe the data change in your store and react to it there than to fire off an event from the view to do the same thing.&lt;/p&gt;
&lt;p&gt;By following the rule of Data over Presentation, you benefit in two ways. The first is that more of your code will transfer to whatever JavaScript framework or library becomes popular in the future because RxJS is agnostic to which one you use.&lt;/p&gt;
&lt;p&gt;Second, by observing the data using &lt;code&gt;distinctUntilChanged()&lt;/code&gt; you can ensure that you only respond when the data actually changed instead of every time it looks like there may have been a change.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/ngrx-actions-class-vs-object-literal/</guid>
            <title>NgRX Actions - Class vs Object Literal</title>
            <link>http://davembush.github.com/ngrx-actions-class-vs-object-literal/</link>
            <category>angular</category>
            <category>NgRX</category>
            <pubDate>Tue, 03 Jul 2018 06:30:58 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;When NgRX 4 came out and I discovered that the “right” way of creating Actions is to use TypeScript classes and not Object Literals, I was a bit surprised.  Why would you use a Class that requires you to use the “new” keyword?  Why would you put multiple classes in one file?  This is insane! &lt;figure&gt;&lt;img src=&#34;/uploads/2018/07/2018-07-04.png&#34; title=&#34;NgRX Actions - Class vs Object Literal&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/dkobras/8342620023/&#34;&gt;dkobras&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by-sa/2.0/&#34;&gt; CC BY-SA&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Options&#34;&gt;&lt;a href=&#34;#Options&#34; class=&#34;headerlink&#34; title=&#34;Options&#34;&gt;&lt;/a&gt;Options&lt;/h2&gt;&lt;p&gt;An Action is an object that contains a type variable and optionally, a payload. Depending on how you code your action, the payload may or may not have “payload” as the variable name. In NgRX version 2, payload was an optional variable. To improve type checking, payload was removed from the Action interface. &lt;/p&gt;
&lt;p&gt;The official documentation for NgRX version 4 encourages us to create a class for each action we want to dispatch. &lt;/p&gt;
&lt;p&gt;Suppose you have a Wait reducer that needs a Start action and an End action.  The code might look something like:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.End&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;To use this code in our reducer or effects you would import like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then we would dispatch the action using the store we’ve injected into our code. We’ll cover that later. But for now, the dispatch basically looks like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you need to pass other information to an Action, your constructor can accept them: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ACTION_WITH_MESSAGE&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.ActionWithMessage&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ActionWithMessage&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;ACTION_WITH_MESSAGE&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; message: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This allows us to access the action payload as &lt;code&gt;Wait.message&lt;/code&gt; instead of &lt;code&gt;Wait.payload&lt;/code&gt;. Contrast this to putting the same code in a class with static methods as I’ve explained in previous articles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/how-to-upgrade-ngrx-to-4-x/&#34;&gt;How to Upgrade to NgRX 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ACTION_WITH_MESSAGE&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.ActionWithMessage&amp;#x27;&lt;/span&gt;;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;start&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;end&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;actionWithMessage&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;message: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ACTION_WITH_MESSAGE&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;payload&lt;/span&gt;: message&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In summary, we can have multiple classes and new them up.  Or we can have one class with multiple static methods that return object literals.&lt;/p&gt;
&lt;h2 id=&#34;Advantage-Object-Literal&#34;&gt;&lt;a href=&#34;#Advantage-Object-Literal&#34; class=&#34;headerlink&#34; title=&#34;Advantage Object Literal&#34;&gt;&lt;/a&gt;Advantage Object Literal&lt;/h2&gt;&lt;p&gt;The main advantage to using the object literal way is that you don’t need to create an object.  You also stay with the “One class, one file” model that is so common in Angular. On the surface, this seems to be a clear winner.&lt;/p&gt;
&lt;h2 id=&#34;Advantage-Classes&#34;&gt;&lt;a href=&#34;#Advantage-Classes&#34; class=&#34;headerlink&#34; title=&#34;Advantage Classes&#34;&gt;&lt;/a&gt;Advantage Classes&lt;/h2&gt;&lt;p&gt;But, because of the way we import the class bundles, the way we end up using the code looks nearly the same.  The main difference is that we must instantiate the class.  But we also get the option of having a different variable type for each action, we aren’t forced to use a variable named “payload” to hold all the associated data.  Further, if you need multiple payloads, you can do that.  You aren’t limited by how many parameters&amp;#x2F;member variables each of your Action classes use.  When using Effects, we can type the return value of the Effect to the Action we want it to return. &lt;/p&gt;
&lt;p&gt;In fact, it is this type safety that is the main reason we should be creating Actions using the Class method instead of the object literal method.&lt;/p&gt;
&lt;h2 id=&#34;Tweaking-Classes-For-Bigger-Advantage&#34;&gt;&lt;a href=&#34;#Tweaking-Classes-For-Bigger-Advantage&#34; class=&#34;headerlink&#34; title=&#34;Tweaking Classes For Bigger Advantage&#34;&gt;&lt;/a&gt;Tweaking Classes For Bigger Advantage&lt;/h2&gt;&lt;p&gt;There is a further tweak we can make to using classes that will give us an additional advantage when we use the code in our Reducers. Instead of marking the action types as strings, we can make them enums.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.End&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You’ll see below that this will give us extra type safety in our Reducers.&lt;/p&gt;
&lt;h2 id=&#34;Type-Safety-in-Reducers&#34;&gt;&lt;a href=&#34;#Type-Safety-in-Reducers&#34; class=&#34;headerlink&#34; title=&#34;Type Safety in Reducers&#34;&gt;&lt;/a&gt;Type Safety in Reducers&lt;/h2&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;ActionReducer&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// This could go in wait.actions.ts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;End&lt;/span&gt; | &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Start&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;WaitReducer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;  state = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, action: Action&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(action.&lt;span class=&#34;property&#34;&gt;type&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;..&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We’ve ensured that the only Actions we will get are from Wait.&lt;/p&gt;
&lt;p&gt;Now, what you can’t see here is that if the payload we were send were of different types, each case statement would automatically typecast the action to the proper type.  This only works with Enums.  If you try this with strings, it won’t work the same way.&lt;/p&gt;
&lt;h2 id=&#34;Type-Safety-in-Effects&#34;&gt;&lt;a href=&#34;#Type-Safety-in-Effects&#34; class=&#34;headerlink&#34; title=&#34;Type Safety in Effects&#34;&gt;&lt;/a&gt;Type Safety in Effects&lt;/h2&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Injectable&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;WaitEffects&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;start$&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt;&amp;gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;actions$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;action: Wait.Add&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;((): &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&amp;#123;&lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ADD&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;payload&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;end$&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt;&amp;gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;actions$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;action: Wait.End&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;((): &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      (&amp;#123;&lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ADD&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;payload&lt;/span&gt;: -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; actions$: Actions&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We’ve ensured that the only Action that get returned from either Effect is the Add action.&lt;/p&gt;
&lt;h2 id=&#34;Tweak-Object-Literal-Implementation&#34;&gt;&lt;a href=&#34;#Tweak-Object-Literal-Implementation&#34; class=&#34;headerlink&#34; title=&#34;Tweak Object Literal Implementation&#34;&gt;&lt;/a&gt;Tweak Object Literal Implementation&lt;/h2&gt;&lt;p&gt;Now, you might think, “I can get all that type safety by creating a separate interface for each action type.  And this would be true.  But this would be even more files and the only thing to be gained is that your Action object gets created faster because you are using Object Literals.  I’m not sure the advantage is worth the pain.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;If you are converting an NgRX 2 site to NgRX 4, you’ll probably want to follow the advice I originally gave for upgrading.  But, once you’ve upgraded, you’ll want to move to using Classes so that you can take advantage of the stronger typings this will afford you.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/implementing-ngrx-4/</guid>
            <title>Implementing NgRX 4+</title>
            <link>http://davembush.github.com/implementing-ngrx-4/</link>
            <category>angular</category>
            <category>NgRX</category>
            <pubDate>Tue, 24 Oct 2017 06:30:46 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;There seems to be a lot of confusion about Implement NgRX 4 and above in an Angular application.  Some of it I’ve contributed to because NgRX 2 isn’t quite the same as NgRX 4 and as I’ve transitioned, I’ve learned better ways.  In other words, I was wrong and I’m correcting my mistake!  Below is the correct, NgRX approved way, of implementing NgRX 4. &lt;/p&gt;
&lt;p&gt;If you are looking for information about how to convert to NgRX 4 from NgRX 2, you can visit my previous article, &lt;a href=&#34;/how-to-upgrade-ngrx-to-4-x/&#34;&gt;How to Upgrade to NgRX 4&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Before we get started, make sure you have TypeScript 2.4.x or above installed in your local project.  The CLI may complain, depending on what version of it you are using.  But, NgRX 4 requires us to use TypeScript 2.4.x. You should also have RxJS 5.4.x or above installed. &lt;/p&gt;
&lt;p&gt;You will also need to install @ngrx.  You can do this using the following NPM command: &lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install --save @ngrx/store @ngrx/effects&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And finally, I’ve found that I need to use the –aot switch both when I’m using production and development builds, so you’ll want to add that to your scripts in your &lt;code&gt;package.json&lt;/code&gt; file. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/10/2017-10-24.jpg&#34; title=&#34;Implementing NgRX 4&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/cfaobam/12119410373/&#34;&gt;cfaobam&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/300eff&#34;&gt;VisualHunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h3 id=&#34;Actions&#34;&gt;&lt;a href=&#34;#Actions&#34; class=&#34;headerlink&#34; title=&#34;Actions&#34;&gt;&lt;/a&gt;Actions&lt;/h3&gt;&lt;p&gt;An Action is an object that contains a type variable and optionally, a payload.  Depending on how you code your action, the payload may or may not have “payload” as the variable name.  In NgRX version 2, payload was an optional variable.  To improve type checking, payload was removed from the Action interface. &lt;/p&gt;
&lt;p&gt;The official documentation for NgRX version 4 encourages us to create a class for each action we want to dispatch. &lt;/p&gt;
&lt;p&gt;Assuming we have a Wait component we want to display when a counter is incremented and that should be removed when the counter returns to zero, you might want a Start wait action and an End wait action.  So, you would create a wait.action.ts file that has two classes in it.  A Start action and an End action. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.End&amp;#x27;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;While this violates the “one class per file” rule, it actually provides us the ability to group our Actions together in one file, as you will see soon. &lt;/p&gt;
&lt;p&gt;To use these actions in our code, we would import them as a bundle: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This particular way of importing a packages groups all of the exported items under the variable named Wait.  Which allows us to dispatch the action using the store we’ve injected into our code using:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Start&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Start is an exported class from &lt;code&gt;wait.actions&lt;/code&gt; that we’ve grouped under &lt;code&gt;Wait&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;What makes this method of creating actions useful is that when we need to pass additional data along with our action, we can do that simply by adding parameters to our constructor.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Add&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; payload: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We don’t even have to call the payload, “payload.”  How about calling it “value.” &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Add&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; value: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And if you need more than one payload item, you can pass in multiple parameters.&lt;/p&gt;
&lt;h3 id=&#34;Improved-Actions&#34;&gt;&lt;a href=&#34;#Improved-Actions&#34; class=&#34;headerlink&#34; title=&#34;Improved Actions&#34;&gt;&lt;/a&gt;Improved Actions&lt;/h3&gt;&lt;p&gt;We can improve our actions even further by using &lt;code&gt;enums&lt;/code&gt; instead of &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;START&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Start&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;END&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.End&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Add&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then we can use the types in our Action classes like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;ADD&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Wait.Add&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ADD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; value: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What this does for us that &lt;code&gt;const&lt;/code&gt; doesn’t is that it when we use our case statements in the reducer, it will save us having to cast everything because TypeScript will know what type it should be because of the &lt;code&gt;enum&lt;/code&gt; that was assigned to the type field.&lt;/p&gt;
&lt;h3 id=&#34;Reducers&#34;&gt;&lt;a href=&#34;#Reducers&#34; class=&#34;headerlink&#34; title=&#34;Reducers&#34;&gt;&lt;/a&gt;Reducers&lt;/h3&gt;&lt;p&gt;Reducers are functions that allow us to change the state of our entity within our application Store.  Reducers respond to the actions that have been dispatched and return a new object based on the changes requested. &lt;/p&gt;
&lt;p&gt;To continue on with our Wait example, &lt;code&gt;wait.reducer.ts&lt;/code&gt; might look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123;&lt;span class=&#34;title class_&#34;&gt;ActionReducer&lt;/span&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// This could (and probably should) go in wait.actions.ts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; | &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;End&lt;/span&gt; | &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Start&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;WaitReducer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;  state = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, action: Action&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(action.&lt;span class=&#34;property&#34;&gt;type&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Types&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;ADD&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// TypeScript knows that our action have a value field here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state + action.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Notice that we have a &lt;code&gt;default&lt;/code&gt; in our switch statement.  Don’t forget to add this.  It isn’t an accident.  You see, when we register our Reducers and Effects with the store and then subsequently dispatch actions to them, all the reducers and effects get called.  In the case of reducers, if you don’t return something for each one of them, you’ll end up with a store that doesn’t know what kind of state it is in.  So, always return the current state as your default. &lt;/p&gt;
&lt;p&gt;The one thing that may not be obvious here is that the Reducer is a function.  Not a class.  This means you can’t inject other classes into it.  This is one of the reasons that the file is named &lt;code&gt;wait.reducer.ts&lt;/code&gt; and not &lt;code&gt;wait.reducer**s**.ts&lt;/code&gt;. But, Effects are different.&lt;/p&gt;
&lt;h3 id=&#34;Effects&#34;&gt;&lt;a href=&#34;#Effects&#34; class=&#34;headerlink&#34; title=&#34;Effects&#34;&gt;&lt;/a&gt;Effects&lt;/h3&gt;&lt;p&gt;Effects are classes.  Each Effect within the Effects class is a member variable.  This means, we name our Effects file for Wait, &lt;code&gt;wait.effects.ts&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Now, remember I said that Effects were for things that caused side effects?  You may wonder, why kind of side effect does our Wait stuff need? &lt;/p&gt;
&lt;p&gt;Under normal circumstances, not any.  However, you can get into a situation in development mode where one of the safe guards Angular provides for you detects that you’ve changed the state of wait multiple times in a change detection loop.  Angular expects changes to be static. &lt;/p&gt;
&lt;p&gt;One way we can deal with this is to delay incrementing and decrementing to another change detection loop using setTimeout() indirectly. &lt;/p&gt;
&lt;p&gt;To do this, we are going to rip out the START and END case statements from our Reducer and add them into our Effects class. And then in &lt;code&gt;wait.effects.ts&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;rxjs/Rx&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;Injectable&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;Actions&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Effect&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;``&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/effects&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.actions&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Injectable&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;WaitEffects&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;start$&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt;&amp;gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;actions$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;START&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ).&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;((): &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;end$&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt;&amp;gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;actions$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;END&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;action: Wait.End&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;take&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ).&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;((): &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Add&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          (&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Wait&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Add&lt;/span&gt;(-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; actions$: Actions&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can name the member variables whatever you want.  They never get used.  &lt;code&gt;ofType()&lt;/code&gt; is a filter that makes the observable stuff only fire for that particular type. &lt;/p&gt;
&lt;p&gt;The magic happens in the &lt;code&gt;Observable.timer(1).take(1)&lt;/code&gt;.  Here we wait for one millisecond, take the first item out of the stream and immediately close the observable.  Once that completes, the &lt;code&gt;map()&lt;/code&gt; returns a new action. &lt;/p&gt;
&lt;p&gt;Every Effect must return an action or you must tell the Effect that it won’t return an action.  Notice that we don’t dispatch the action.  That is done by NgRX for us.  We just return the action. &lt;/p&gt;
&lt;p&gt;To tell an Effect that no action will be returned, pass &lt;code&gt;&amp;#123;dispatch: false&amp;#125;&lt;/code&gt; into &lt;code&gt;@Effect()&lt;/code&gt;. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;dispatch&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&amp;#125;) …&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Returning-Multiple-Actions-from-Effects&#34;&gt;&lt;a href=&#34;#Returning-Multiple-Actions-from-Effects&#34; class=&#34;headerlink&#34; title=&#34;Returning Multiple Actions from Effects&#34;&gt;&lt;/a&gt;Returning Multiple Actions from Effects&lt;/h3&gt;&lt;p&gt;At the other end of possibilities, you may need to return multiple Actions from an Effect.  One way to do this is by using mergeMap().&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;.&lt;span class=&#34;title function_&#34;&gt;mergeMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* previous value here */&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ActionGroup&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Action1&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ActionGroup&lt;/span&gt;.&lt;span class=&#34;title class_&#34;&gt;Action2&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Registration&#34;&gt;&lt;a href=&#34;#Registration&#34; class=&#34;headerlink&#34; title=&#34;Registration&#34;&gt;&lt;/a&gt;Registration&lt;/h3&gt;&lt;p&gt;Now, none of this is going to work if we don’t register our Reducers and Effects with the NgRX Store. &lt;/p&gt;
&lt;p&gt;If you look at a lot of the literature on how to write NgRX code, you’ll often see that they recommend that you put the code in AppModule.  That will work, but how much more effective to put the code for your Store in its own module.  I create a Module class called AppStores and put it in a file named &lt;code&gt;app.stores.ts&lt;/code&gt;.  I know, technically it is a module and it should be &lt;code&gt;app-stores.module.ts&lt;/code&gt;.  Using &lt;code&gt;app.stores.ts&lt;/code&gt; isolates it from a normal module.  All I want to put in here is Store stuff. &lt;/p&gt;
&lt;p&gt;Then, in my &lt;code&gt;app.stores.ts&lt;/code&gt; file, I put code that looks like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;WaitEffects&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.effects&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;AppState&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./app.state&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;WaitReducer&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./wait.reducer&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;NgModule&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@angular/core&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;StoreModule&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;ActionReducerMap&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/store&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;title class_&#34;&gt;EffectsModule&lt;/span&gt; &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;@ngrx/effects&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;reducers&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionReducerMap&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;AppState&lt;/span&gt;&amp;gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;wait&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;WaitReducer&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;StoreModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;(reducers),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;EffectsModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;([&lt;span class=&#34;title class_&#34;&gt;WaitEffects&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppStore&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And the AppState interface that I used for my reducer map looks like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppState&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;wait&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;A couple of things you should notice about this code.  First, the reducers object we create at the top of the file describes what our store looks like.  So far, we have an entity named “wait” that is controlled by our WaitReducer. &lt;/p&gt;
&lt;p&gt;Then to register the reducers with our application, we pass them on to &lt;code&gt;StoreModule.forRoot()&lt;/code&gt; in the imports section of our module definition. &lt;/p&gt;
&lt;p&gt;Similarly, we must register our Effects with the application.  We do this by passing an array of Effects to &lt;code&gt;EffectsModule.forRoot()&lt;/code&gt; in the imports section of our module definition. &lt;/p&gt;
&lt;p&gt;Of course, none of this code will even get included in your project unless you import this module into your AppModule class. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@NgModule&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;declarations&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;BrowserModule&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    **&lt;span class=&#34;title class_&#34;&gt;AppStore&lt;/span&gt;**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;providers&lt;/span&gt;: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;bootstrap&lt;/span&gt;: [&lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppModule&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Retrieving-Data&#34;&gt;&lt;a href=&#34;#Retrieving-Data&#34; class=&#34;headerlink&#34; title=&#34;Retrieving Data&#34;&gt;&lt;/a&gt;Retrieving Data&lt;/h2&gt;&lt;p&gt;Retrieving an entity from a store is quite simple.  Leaving out the imports that a good editor should help you with, here is the relevant code: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppComponent&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;wait&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;store: Store&amp;lt;AppState&amp;gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;wait&lt;/span&gt; = store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;s: AppState&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;      =&amp;gt;&lt;/span&gt; s.&lt;span class=&#34;property&#34;&gt;wait&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And now you can subscribe to wait and whenever the value changes, you’ll get a notification and can do something with it.&lt;/p&gt;
&lt;h2 id=&#34;Lazy-Loading-NgRX&#34;&gt;&lt;a href=&#34;#Lazy-Loading-NgRX&#34; class=&#34;headerlink&#34; title=&#34;Lazy-Loading NgRX&#34;&gt;&lt;/a&gt;Lazy-Loading NgRX&lt;/h2&gt;&lt;p&gt;Prior to NgRX version 4, all our state stuff had to live in the root of the application.  This was problematic because it also meant we were unable to easily locate our Actions, Reducers and Effects with the Routes they belonged to.  So, we had feature level components but everything else was more function based.  That is, all our State stuff lived together in one directory separate from the feature they supported.  Ugly! &lt;/p&gt;
&lt;p&gt;But now, we can create Reducers and Effects that live with the feature we support.&lt;/p&gt;
&lt;h3 id=&#34;Always-Import-forRoot&#34;&gt;&lt;a href=&#34;#Always-Import-forRoot&#34; class=&#34;headerlink&#34; title=&#34;Always Import forRoot()&#34;&gt;&lt;/a&gt;Always Import forRoot()&lt;/h3&gt;&lt;p&gt;The first thing you’ll need to be aware of is that even if you aren’t storing any state at the application level, you will need to call &lt;code&gt;StoreModule.forRoot()&lt;/code&gt; and &lt;code&gt;EffectsModule.forRoot()&lt;/code&gt; with an empty object and array. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;StoreModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;(&amp;#123;&amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;EffectsModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forRoot&lt;/span&gt;([])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;AppState-vs-FeatureState&#34;&gt;&lt;a href=&#34;#AppState-vs-FeatureState&#34; class=&#34;headerlink&#34; title=&#34;AppState vs FeatureState&#34;&gt;&lt;/a&gt;AppState vs FeatureState&lt;/h3&gt;&lt;p&gt;You’ll remember that you’ll typically use an interface called AppState to define the structure of the Store for your application.  You are going to want to create a separate interface for each set of feature reducers you are loading.&lt;/p&gt;
&lt;h3 id=&#34;Feature-Name-as-AppState-Property&#34;&gt;&lt;a href=&#34;#Feature-Name-as-AppState-Property&#34; class=&#34;headerlink&#34; title=&#34;Feature Name as AppState Property&#34;&gt;&lt;/a&gt;Feature Name as AppState Property&lt;/h3&gt;&lt;p&gt;When you add a feature reducer, you’ll need to supply a name as the first parameter. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;StoreModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forFeature&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;featureName&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    featureReducers),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Where &lt;code&gt;featureReducers&lt;/code&gt; is the map of reducers for the feature.  Like what we did for the root level reducers. &lt;/p&gt;
&lt;p&gt;This “featureName” becomes the name of the store entity you’ll need to select to get at the store entities in your feature reducers. &lt;/p&gt;
&lt;p&gt;Imagine you have a feature named “featureName” as we’ve coded above and your &lt;code&gt;featureReducer&lt;/code&gt; object has a feature property named “sub”.  Not super original, but it will do for an example. To select “sub” from your store, you would use code that would look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;s&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  s.&lt;span class=&#34;property&#34;&gt;featureName&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;sub&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This means that if you want to strongly type your selections using AppState, you will need to define a field in your AppState interface as “featureName” that is typed as the State interface for that feature.  Let’s call that FeatureState. &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FeatureState&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;sub&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;SubModel&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then our AppState would look like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppState&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;featureName&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;FeatureState&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And now we can write our select code like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: AppState&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;featureName&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;sub&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you have Effects that go with your reducers, you’ll also need to import them with &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;imports&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;EffectsModule&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;forFeature&lt;/span&gt;([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    …list &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt; effects here&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Features-Without-AppState&#34;&gt;&lt;a href=&#34;#Features-Without-AppState&#34; class=&#34;headerlink&#34; title=&#34;Features Without AppState&#34;&gt;&lt;/a&gt;Features Without AppState&lt;/h3&gt;&lt;p&gt;It is possible to access the feature state without putting it in your AppState.  This alternate method may be the only way you can access the code, but you might want to implement this method generally so that your features don’t necessarily have to know about the application. &lt;/p&gt;
&lt;p&gt;To implement this access method, you use the &lt;code&gt;createFeatureSelector()&lt;/code&gt;and &lt;code&gt;createSelector()&lt;/code&gt; methods which you can import from &lt;code&gt;@ngrx/store&lt;/code&gt;. The above code using these methods would look something like this: &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; featureSelector = createFeatureSelector&amp;lt;&lt;span class=&#34;title class_&#34;&gt;FeatureState&lt;/span&gt;&amp;gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;featureName&amp;#x27;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; subSelector = &lt;span class=&#34;title function_&#34;&gt;createSelector&lt;/span&gt;(featureSelector, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;x: FeatureState&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;sub&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(subSelector);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Where store is injected using &lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;store: Store&amp;lt;FeatureState&amp;gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Note: I’m not suggesting that you write your code like this.  If you are repeating the &lt;code&gt;createFeatureSelector()&lt;/code&gt; &lt;code&gt;createSelector()&lt;/code&gt; code in multiple places, you should look for a way of not repeating yourself.  I’ve put it all in one place here, so you can see how the methods tie together in the bigger picture.  In my production code, I tend to write this as a separate function in a separate file that can be called from anywhere.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/using-ngrx-to-cleanly-aggregate-data/</guid>
            <title>Using NgRX to Cleanly Aggregate Data</title>
            <link>http://davembush.github.com/using-ngrx-to-cleanly-aggregate-data/</link>
            <category>angular</category>
            <category>design patterns</category>
            <category>NgRX</category>
            <pubDate>Tue, 03 Oct 2017 06:30:50 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;For the last 18 months, I’ve been working for an organization that has what some might consider a unique requirement.  Because of where our application’s data is sourced, we need to aggregate data on the client side rather than on the server.  What this means is that for any one screen, we may make multiple calls to the server to grab all the data we need.  Fortunately, because we adopted NgRX early in our adoption of Angular, we could avoid a lot of the headaches associated with client-side aggregation. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/09/2017-10-03.png&#34; title=&#34;Using NgRX to Cleanly Aggregate Data&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/gsfc/14486243743/&#34;&gt;NASA Goddard Photo and Video&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/296da9&#34;&gt;Visualhunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt; CC BY&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;The-Problem&#34;&gt;&lt;a href=&#34;#The-Problem&#34; class=&#34;headerlink&#34; title=&#34;The Problem&#34;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;&lt;p&gt;There are multiple ways this problem might manifest itself in an application.  But one of the most common is a basic search screen that displays a list of results.  Everything is simple when your data comes back with all the data you need.  But in our case, the data that is returned might contain all but one or two fields that we need.  Those fields exist in other end points.  To keep the basic problem small, let’s just assume that you search for a list of records.  That search returns 10 items.  For each of those records, you now need to make two more calls to retrieve the content of the two missing fields.  This means that to get a complete result set back, you need to make a total of 21 calls.  The problem becomes even worse if you have a total of 100 records, or you now have 3 fields that you need to retrieve for each row.&lt;/p&gt;
&lt;h2 id=&#34;The-Old-Way&#34;&gt;&lt;a href=&#34;#The-Old-Way&#34; class=&#34;headerlink&#34; title=&#34;The Old Way&#34;&gt;&lt;/a&gt;The Old Way&lt;/h2&gt;&lt;p&gt;Prior to using NgRX, the main way we might solve this problem would be to introduce callback hell, or promise hell if you are that lucky.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make a call for the original list&lt;/li&gt;
&lt;li&gt;When the list gets returned&lt;ul&gt;
&lt;li&gt;Iterate through the records and&lt;ul&gt;
&lt;li&gt;Make a call for Child Record One&lt;ul&gt;
&lt;li&gt;When callback returns, add the new value to the parent record&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make a call for Child Record Two&lt;ul&gt;
&lt;li&gt;When the callback returns, add the new value to the parent record&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Once all the calls have returned, return the list so it can be displayed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, this not only becomes difficult to manage, but it also introduces a system that is going to be perceived as slow. &lt;/p&gt;
&lt;p&gt;But, now, we can do better.&lt;/p&gt;
&lt;h2 id=&#34;Using-NgRX&#34;&gt;&lt;a href=&#34;#Using-NgRX&#34; class=&#34;headerlink&#34; title=&#34;Using NgRX&#34;&gt;&lt;/a&gt;Using NgRX&lt;/h2&gt;&lt;p&gt;By using NgRX, we use a series of Effects to retrieve our data, typically via a Service.  When the effect is done, it returns the results to a reducer which puts them in our store entity for us. &lt;/p&gt;
&lt;p&gt;The basic work flow looks like something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dispatch an action to get the main results&lt;/li&gt;
&lt;li&gt;Effect hears the action and makes a call for the top-level list&lt;/li&gt;
&lt;li&gt;When the list returns,&lt;ul&gt;
&lt;li&gt;Iterate through the records and&lt;ul&gt;
&lt;li&gt;we dispatch an action to get Child Record One&lt;/li&gt;
&lt;li&gt;we dispatch an action to get Child Record Two&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Return an Action that will use a reducer to fill our list&lt;/li&gt;
&lt;li&gt;Child Record One Effect hears the actions for each of the rows&lt;/li&gt;
&lt;li&gt;When each of the values are retrieved the Effect returns an Action that uses a Reducer to put the value in the store&lt;/li&gt;
&lt;li&gt;Child Record Two Effect hears the actions for each of the rows&lt;/li&gt;
&lt;li&gt;When each of the values are retrieved, the Effect returns an Action that uses a Reducer to put the value in the store&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You’ll notice, we no longer have the nesting mess that we had using the old way and we can list our results as soon as the first set of data is returned.&lt;/p&gt;
&lt;h2 id=&#34;Meanwhile-back-on-our-View&#34;&gt;&lt;a href=&#34;#Meanwhile-back-on-our-View&#34; class=&#34;headerlink&#34; title=&#34;Meanwhile, back on our View&#34;&gt;&lt;/a&gt;Meanwhile, back on our View&lt;/h2&gt;&lt;p&gt;Now, there are two ways you can deal with displaying this information in your view and it all depends on what you are doing. &lt;/p&gt;
&lt;p&gt;The easy way is to just let the View display the information as it comes back.  Most of the time this will work.  If you need to filter your data in the display once it comes back, you will need to decide if data that doesn’t have the child fields yet should, or should not be displayed. &lt;/p&gt;
&lt;p&gt;Another quirk I had to deal with was that we were displaying child rows with child rows.  Letting the data display as we got it back gave the screen a kind of exploding effect.  For this, I added a debounceTime(500) to the store observer so that the screen only updated once all the data had been retrieved.  Using the pattern above was still easier to reason about than the old way, we just didn’t get the added benefit of being able to see the data as it was being retrieved.&lt;/p&gt;
&lt;h2 id=&#34;Watch-Out&#34;&gt;&lt;a href=&#34;#Watch-Out&#34; class=&#34;headerlink&#34; title=&#34;Watch Out!&#34;&gt;&lt;/a&gt;Watch Out!&lt;/h2&gt;&lt;p&gt;One of the wrong ways you might be tempted to use this pattern would be to chain all the child stuff in one effect and dispatch actions to your reducers from within the one Effect.  This would be a mistake.  Sure, it would work.  But now because your effect is doing more than one thing, your code becomes MUCH harder to reason about.  While each of your Effects may ultimately call the same reducer function, or not, you definitely want to have a separate set of Actions and Effects that retrieve the data from the server.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/thinking-in-javascript/</guid>
            <title>Thinking in JavaScript</title>
            <link>http://davembush.github.com/thinking-in-javascript/</link>
            <category>javascript</category>
            <category>mvvm</category>
            <category>redux</category>
            <category>MVC</category>
            <category>NgRX</category>
            <pubDate>Tue, 05 Sep 2017 06:30:54 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last week I’ve gradually come to the realization that the fundamental reason why most people have trouble with JavaScript is because it doesn’t fit their mental model of how programming should be done.  This isn’t to say that most programmers don’t manage to achieve their end goal.  But if you sit back and take an objective look at the code we end up writing, you have to admit, the code ends up being quite ugly. &lt;/p&gt;
&lt;p&gt;Now, this isn’t a dig at the way we’ve been doing things.  We’ve all been doing the best we can with what we have.  But, the JavaScript world has progressed and there is a better mental model that has developed and should even be expanded which will allow us to develop more complex and feature rich applications now and well into the future. &lt;figure&gt;&lt;img src=&#34;/uploads/2017/09/2017-09-05.jpg&#34; title=&#34;Thinking in JavaScript&#34;&gt;&lt;figcaption&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/froderik/8283727226/&#34;&gt;freddie boy&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com/re/fb4c57&#34;&gt;Visual Hunt&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by-sa/2.0/&#34;&gt; CC BY-SA&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 

&lt;h2 id=&#34;Where-We’ve-Been&#34;&gt;&lt;a href=&#34;#Where-We’ve-Been&#34; class=&#34;headerlink&#34; title=&#34;Where We’ve Been&#34;&gt;&lt;/a&gt;Where We’ve Been&lt;/h2&gt;&lt;p&gt;I’ve been saying for years that the thing that holds most programmers back is that they always want to treat whatever new thing they are using like the last thing they were using.  And nowhere has this displayed itself more apparently than with JavaScript. &lt;/p&gt;
&lt;p&gt;Take the most obvious of examples.  Everyone knows, or should know by now, that JavaScript is not really object-oriented.  And yet, we’ve been trying to force JavaScript to BE object-oriented pretty much from the beginning.  This hasn’t been such a big problem, although one could argue that by trying to make JavaScript object-oriented, we’ve prevented it from being able to do some of the things it does best. &lt;/p&gt;
&lt;p&gt;Where we really run into trouble is with the event based, and often asynchronous nature of JavaScript. Think about this.  For years, we’ve been trying to synchronize something that is inherently asynchronous.  And this is where the real trouble begins. &lt;/p&gt;
&lt;p&gt;First, we had call back. Then promises. Now Observables. Soon async and await. And while callbacks are how the asynchronous nature of JavaScript is handle under the hood, the others are attempts to tame the asynchronous beast.  Especially async and await.&lt;/p&gt;
&lt;h2 id=&#34;Why&#34;&gt;&lt;a href=&#34;#Why&#34; class=&#34;headerlink&#34; title=&#34;Why?&#34;&gt;&lt;/a&gt;Why?&lt;/h2&gt;&lt;p&gt;Now, this is where we are. Constantly trying to make JavaScript be something it isn’t. But, why is this? &lt;/p&gt;
&lt;p&gt;I believe it is because we are trying to impose models onto JavaScript that were useful in our desktop and server-side applications.  MVC, MVVM, Object-Oriented, and others all grew up in a world that was both synchronous, multi-threaded, and lent themselves well to an object-oriented model.  As various frameworks have evolved, the attempt has been to take these familiar models and apply them to an asynchronous, single threaded and not really object-oriented.  From where I sit, I am amazed any of this worked at all.  It seems to me it should have failed long ago.&lt;/p&gt;
&lt;h2 id=&#34;A-Light-in-The-Darkness&#34;&gt;&lt;a href=&#34;#A-Light-in-The-Darkness&#34; class=&#34;headerlink&#34; title=&#34;A Light in The Darkness&#34;&gt;&lt;/a&gt;A Light in The Darkness&lt;/h2&gt;&lt;p&gt;Hey, I’ve been stuck in the old school model too.  But, I’m starting to think there may be a better way.  I’ve written about Redux and NgRX a lot on this blog.  I’ve fielded a lot of questions on the Angular slack channel.  Most of the questions revolve around the basic question of handling multiple asynchronous calls for data as part of one action.  All of the questions presuppose you would need to make each of the calls for data and then use some method of waiting for everything to return and assemble the data before moving on.  In each case, I recommend an alternative.  What if, each call was a unique action.  When each returns, another action is fired that places the return data in the appropriate store, or sub store.  In this model, we don’t care when the data comes back.  When it comes back, we deal with it appropriately.&lt;/p&gt;
&lt;h2 id=&#34;An-Example&#34;&gt;&lt;a href=&#34;#An-Example&#34; class=&#34;headerlink&#34; title=&#34;An Example&#34;&gt;&lt;/a&gt;An Example&lt;/h2&gt;&lt;p&gt;Let’s go with one of the more common examples I see. &lt;/p&gt;
&lt;p&gt;I need to make a request for a set of records.  Once I have the results, for each record in the result, I need to go get a set of child records.  Here is how I would deal with this at a very high level using NgRX.  I’m sure this would work for multiple Redux patterns but they may call things by different names.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fire an Action that request the main set of records.&lt;/li&gt;
&lt;li&gt;The appropriate Effect responds to the action by making an AJAX call for the data.&lt;/li&gt;
&lt;li&gt;When the AJAX call returns,&lt;ul&gt;
&lt;li&gt;fire an Action that puts the main records in the store.&lt;/li&gt;
&lt;li&gt;for each record in the result fire an Action asking for the child record(s).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The appropriate Effect(s) responds to the request for child records by making AJAX calls.&lt;/li&gt;
&lt;li&gt;When the data returns fire an Action that places the data in the store.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since your view is listening for changes on the entities in your store, it will update as the data comes in. Even better if you setup a debounce on your listener, the screen will update only when all of the data has been retrieved.&lt;/p&gt;
&lt;h2 id=&#34;The-Key-Concept&#34;&gt;&lt;a href=&#34;#The-Key-Concept&#34; class=&#34;headerlink&#34; title=&#34;The Key Concept&#34;&gt;&lt;/a&gt;The Key Concept&lt;/h2&gt;&lt;p&gt;The key concept here is that we no longer care WHEN something happens.  We only care THAT it happens.  And rather than trying to setup forkJoins() or some other mechanism to flatten this all out, our code ends up being quite simple.  Discrete bits of functionality.  And now, all our asynchronous code becomes Reactive code.  We no longer need to flatten anything out.&lt;/p&gt;
&lt;h2 id=&#34;Server-Side&#34;&gt;&lt;a href=&#34;#Server-Side&#34; class=&#34;headerlink&#34; title=&#34;Server Side&#34;&gt;&lt;/a&gt;Server Side&lt;/h2&gt;&lt;p&gt;Sadly, on the server side, things aren’t quite so easy.  At best we are tied to an implementation Observables and the various methods of combining Observables.  But I could also see some kind of client&amp;#x2F;server implementation that used a framework like SignalR or Socket.io so that as the various Observables complete, the data on the client would get updated.  An interesting way to make all of the AJAXy calls rather transparent to the user.&lt;/p&gt;
&lt;h2 id=&#34;Taking-it-To-the-Next-Level&#34;&gt;&lt;a href=&#34;#Taking-it-To-the-Next-Level&#34; class=&#34;headerlink&#34; title=&#34;Taking it To the Next Level&#34;&gt;&lt;/a&gt;Taking it To the Next Level&lt;/h2&gt;&lt;p&gt;You may call me a dreamer, but what if we made a JavaScript framework that was all message driven and reactive like I’ve described above?  We’ve done it before. &lt;/p&gt;
&lt;p&gt;When Windows was first created in ran on single core CPUs.  It was essentially single threaded.  The way it worked was primarily by putting “events” on a que and then sending the events to the appropriate application that needed to know about them. &lt;/p&gt;
&lt;p&gt;If you applied this model to JavaScript and folded in what I’ve described above, you could easily have a system that appeared to be multi-threaded even though it was single threaded at its core.&lt;/p&gt;
&lt;h2 id=&#34;Don’t-Throw-the-Baby-Out-…&#34;&gt;&lt;a href=&#34;#Don’t-Throw-the-Baby-Out-…&#34; class=&#34;headerlink&#34; title=&#34;Don’t Throw the Baby Out …&#34;&gt;&lt;/a&gt;Don’t Throw the Baby Out …&lt;/h2&gt;&lt;p&gt;Now, you may think I’m endorsing throwing out object-oriented JavaScript.  Actually, I think most of the View stuff we do lends itself well to object-oriented programming.  But, most of our business rules lend themselves better to the model I’ve described above.  Functional and Reactive.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/ngrx-store-coding-sanity-epiphany/</guid>
            <title>NgRX/Store Coding Sanity Epiphany</title>
            <link>http://davembush.github.com/ngrx-store-coding-sanity-epiphany/</link>
            <category>angular</category>
            <category>design patterns</category>
            <category>NgRX</category>
            <pubDate>Tue, 06 Jun 2017 06:30:44 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Maybe this is all obvious to you, but since I don’t see anyone talking about this when I search for “how to do NgRX” or the various variants, I thought I’d call it out in this weeks post.&lt;/p&gt;
&lt;p&gt;If you haven’t been following along, you’ll want to review &lt;a href=&#34;/tags/ngrx/&#34;&gt;my previous posts on NgRX&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/06/2017-06-06.jpg &#34;NgRX/Store Coding Sanity Epiphany&#34;)&lt;figcaption&gt;Photo credit: [spcbrass](//www.flickr.com/photos/spcbrass/394867154/) via [Visual Hunt](//visualhunt.com/re/cff786) / [ CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;If it isn’t clear yet, I’m still sorting out a lot of this Angular&amp;#x2F;Redux&amp;#x2F;NgRX stuff. But as I was working on my current project this week, I realized I have WAY too much code in my presentation layer.&lt;/p&gt;
&lt;h2 id=&#34;The-Epiphany&#34;&gt;&lt;a href=&#34;#The-Epiphany&#34; class=&#34;headerlink&#34; title=&#34;The Epiphany&#34;&gt;&lt;/a&gt;The Epiphany&lt;/h2&gt;&lt;p&gt;I have two main screens I’m working on. As you read the articles on the Internet that explain how to use this pattern or the Redux pattern it was derived from, you’ll quickly learn that you want to work with a “Smart Component.” This component is kind of a traffic cop. It uses observables to listen to state change in your Store and it sends actions to, primarily, update the database and change the store’s state. From what I’ve been able to gather, the expectation is that a lot of the logic that would be needed to actually process the data is going to go in this smart component. The first screen I worked on, followed this basic pattern. This put a whole crap load of code in my smart component.&lt;/p&gt;
&lt;p&gt;On the second page, I kind of stumbled onto what I believe is a cleaner model. I realized that I was hanging onto data in my smart component that was also in my store. That seems kind of dumb. If all I need is in my store, why not just fire off an action to do whatever it is I want to do and have the @Effect grab the data from the store?&lt;/p&gt;
&lt;p&gt;This is why I ended up making my smart component listen to the observables and dispatch events to the store based on changes in my components. This includes things like button clicks. Any other processing that needs to take place takes place in either an @Effect or is called from an @Effect.&lt;/p&gt;
&lt;p&gt;I can’t describe for you how much cleaner my codebase is as a result! WOW!&lt;/p&gt;
&lt;p&gt;But, will it work on the first page the same as it works on the second page?&lt;/p&gt;
&lt;h2 id=&#34;The-Test&#34;&gt;&lt;a href=&#34;#The-Test&#34; class=&#34;headerlink&#34; title=&#34;The Test&#34;&gt;&lt;/a&gt;The Test&lt;/h2&gt;&lt;p&gt;You see, there is a big difference between the first page and the second page. The first page is basically a search and list page. The second page is an edit page for an item. On the first page, I had multiple store entities for the various parts. I had an entity for the search fields. An entity for the search results. And others. Let’s just say my model isn’t very flat.&lt;/p&gt;
&lt;p&gt;The fact of the matter is, the second page that I created wasn’t really all that flat either. But because I started with the concept of not putting any logic in my smart component, it felt easier to manage.&lt;/p&gt;
&lt;p&gt;So, the first thing I wanted to do was to create a reducer for the page. All this reducer will do is distribute the action down into sub-reducers. This allowed me to keep all of my action code the same. The only thing that changes is that the directories for my sub-reducers and the @Effects, Actions and Interfaces that are associated with them go under my directory for my main Reducer and Model.&lt;/p&gt;
&lt;p&gt;I still have a bit of code that I’d like to clean up, but on the whole, I like this pattern much better than what I was doing before.&lt;/p&gt;
&lt;h2 id=&#34;Advantages&#34;&gt;&lt;a href=&#34;#Advantages&#34; class=&#34;headerlink&#34; title=&#34;Advantages&#34;&gt;&lt;/a&gt;Advantages&lt;/h2&gt;&lt;p&gt;The main advantage to using this new architecture is that it simplifies and reduces testing considerations.&lt;/p&gt;
&lt;p&gt;For example, because all my presentation layer is now doing is either reflecting the state that is in my store or telling my store to do something, there really isn’t much, if anything, left to test in my presentation layer. If you’ve written your code correctly, none of the methods in your view should have a cyclomatic complexity of greater than two. You may still want to write some end-to-end tests to make sure that the NgRX&amp;#x2F;Store loop is working correctly. But that is an entirely different subject.&lt;/p&gt;
&lt;p&gt;This does not mean that we don’t have to test anything. All of that code had to go some place, right?&lt;/p&gt;
&lt;p&gt;But, here’s the deal. Because the code is in an @Effect or a Service (generally) your tests become much more simple. You might have to dummy up a store or a service. But for the most part, your tests won’t really look much different that tests you would write for regular JavaScript code without a framework.&lt;/p&gt;
&lt;p&gt;The other HUGE advantage to using this architecture is that it allows you to distribute your code so that no file is too large and hard to reason about. It allows you to follow the “Single Responsibility Principle” in greater granularity than you might otherwise be able to do.&lt;/p&gt;
&lt;p&gt;And finally, this architecture allows you to treat all the component code: the html template, the CSS, and the TypeScript file, as all View code. And I think this is where many people are confused about Angular.&lt;/p&gt;
&lt;h2 id=&#34;View-Confusion&#34;&gt;&lt;a href=&#34;#View-Confusion&#34; class=&#34;headerlink&#34; title=&#34;View Confusion&#34;&gt;&lt;/a&gt;View Confusion&lt;/h2&gt;&lt;p&gt;In a MVC or even an MVVM pattern, we’ve also considered the HTML template the “View” and the JavaScript (or in our case, TypeScript) code the controller. This is a common misconception that I believe the ASP.NET crowd still gets wrong. Code-behind code isn’t your controller. It is helper code for your View. And so, we end up putting processing code in our view, when it really belongs in an entirely different file. This is what the Model View Presenter pattern solves. If you aren’t going to use NgRX and Reactive Forms, you should check out MVP as a way of architecting your code using the older Template Driven Forms approach that was common in AngularJS.&lt;/p&gt;
&lt;h2 id=&#34;Code&#34;&gt;&lt;a href=&#34;#Code&#34; class=&#34;headerlink&#34; title=&#34;Code&#34;&gt;&lt;/a&gt;Code&lt;/h2&gt;&lt;p&gt;For the purposes of this article, I’m going to assume you’ve read my other articles which I’ve linked to at the beginning of this post.&lt;/p&gt;
&lt;p&gt;So first, the basic directory and file structure of this new method might look something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;app/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; +-store/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   +-route1/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     +-sub-reducer1/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       --sub-reducer1.actions.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       --sub-reducer1.effects.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       --sub-reducer1.model.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       --sub-reducer1.reducer.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     +-sub-reducer2/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     --route1.actions.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     --route1.effects.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     --route1.model.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     --route1.reducer.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   +-route2/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Some things to note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Your Actions are defined in the target. You would seldom, if ever, define an action at the route level.&lt;/li&gt;
&lt;li&gt;Effects are optional, just like any other time you would use them.&lt;/li&gt;
&lt;li&gt;Effects are seldom, if ever, defined at the route level.&lt;/li&gt;
&lt;li&gt;I’m using “route1” etc and “sub-reducer1” etc as sample names. Use names that represent your route names and the data you are storing.&lt;/li&gt;
&lt;li&gt;The only reducers that gets defined in our app.store.ts file are the reducers in the route directories.&lt;/li&gt;
&lt;li&gt;You still need to register each of your effects in app.store.ts as you have been doing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The next thing that is probably not clear is that your top-level model, ie “route1.model.ts” should only hold the sub-reducers. I’ve also found it useful to make all of my top-level properties optional.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Route1Model&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  subItem1?: &lt;span class=&#34;title class_&#34;&gt;SubModel1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   subItem2?: &lt;span class=&#34;title class_&#34;&gt;SubModel2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And this is used in your route reducer as:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;route1Reducer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;state: Route1Model =&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    subReducer1: &amp;#123;/* subReducer definition here */&amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    subReducer2: &amp;#123;/* subReducer definition here */&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;  &amp;#125;, action: Action&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;// process action here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Route1Reducer&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;ActionReducer&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Route1Model&lt;/span&gt;&amp;gt; = route1Reducer;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now, the trick we need to implement is that we need to delegate the actions down to the appropriate reducers and we only want to change the state object to a new object if a child state has changed.&lt;/p&gt;
&lt;p&gt;In the top level reducer, you need to put code that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; reducerList = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;subReducer1&lt;/span&gt;: subReducer1,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;subReducer2&lt;/span&gt;: subReducer2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; returnState = state;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;keys&lt;/span&gt;(reducerList).&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; newState = reducerList[item](state[item], action);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(newState !== state[item]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; newItem = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      newItem[item] = newState;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      returnState = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;assign&lt;/span&gt;(&amp;#123;&amp;#125;, returnState, newItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; returnState;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The key here is that you want the property names in the reducerList to be the same name as what is in the Route1Model and you want the values assigned to them to be the function pointer (notice, no parenthesis) that should be called.&lt;/p&gt;
&lt;p&gt;The actual sub-reducers look like a regular reducer.  The only real difference is that you will be calling the function that returns the state, the second export statement we normally put in our reducers that returns the ActionReducer&amp;lt;&amp;gt; is not needed.&lt;/p&gt;
&lt;p&gt;So, our Object.keys().map() processes each reducer and updates the parent object if the child has changed.&lt;/p&gt;
&lt;p&gt;Now, by way of reminder. You can observe all the store, or part of the store. So, your smart component might observe just a sub entity or the whole entity depending on the need at the moment.&lt;/p&gt;
&lt;p&gt;Finally, lets say you want to have a “Save” button that causes the information in your store to be persisted to a database. You would place a method in your smart component that gets triggered by the button and fires a “Save” action to an @Effect.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;save&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  event.&lt;span class=&#34;title function_&#34;&gt;stopPropagation&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Route1Actions&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;save&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Your @effect will respond, and since @Effects typically already have a store injected into them, you can use the store to retrieve the data.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Effect&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;dispatch&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&amp;#125;) _save$ = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;update$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;ofType&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;StagedEditActions&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;SAVE&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;switchMap&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;route1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;first&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;route1Data&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;service&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;save&lt;/span&gt;(route1Data))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(requestId$ =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    requestId$.&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;id&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;store&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(route1Actions.&lt;span class=&#34;title function_&#34;&gt;load&lt;/span&gt;(id))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/functional-reactive-angular-revealed/</guid>
            <title>Functional Reactive Angular Revealed</title>
            <link>http://davembush.github.com/functional-reactive-angular-revealed/</link>
            <category>angular</category>
            <category>RxJS</category>
            <category>NgRX</category>
            <pubDate>Tue, 30 May 2017 06:30:46 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last month or so, I’ve been presenting the basics of &lt;a href=&#34;/tags/ngrx/&#34;&gt;how to use NgRX&amp;#x2F;Store with Angular&lt;/a&gt;. In the past, I’ve praised the virtues of &lt;a href=&#34;/tags/reactive-forms/&#34;&gt;Reactive Forms&lt;/a&gt;, also known as &lt;a href=&#34;/tags/model-driven/&#34;&gt;Model Driven Forms&lt;/a&gt;. These along with RxJS make up the pillars of Functional Reactive Angular Programming.&lt;/p&gt;
&lt;p&gt;What is sad is that this reality is lost on so much of the Angular community. When I listen to podcast where they talk about any of these concepts individually, Function Reactive Programming (FRP) is barely, if ever, mentioned.&lt;/p&gt;
&lt;p&gt;But the scary thing is this, there are many people who are going to use the new Angular the way they used the old Angular and they will completely miss the main advantages. They may even jump from Angular to React or (even) Aurelia. And that’s just picking on the most recent frameworks. Some will want to go back to Egypt and decide jQuery is a good choice!&lt;/p&gt;
&lt;p&gt;Functional Reactive Programming is not just a hot new model. It solves a lot of problems.&lt;/p&gt;
&lt;figure&gt;![](/uploads/2017/05/2017-05-30.png &#34;Functional Reactive Angular Revealed&#34;) Photo via [VisualHunt.com](//visualhunt.com/re/b10788)&lt;/figure&gt;

&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Object-Oriented-Failure&#34;&gt;&lt;a href=&#34;#Object-Oriented-Failure&#34; class=&#34;headerlink&#34; title=&#34;Object-Oriented Failure&#34;&gt;&lt;/a&gt;Object-Oriented Failure&lt;/h2&gt;&lt;p&gt;Several years ago, I wrote an article called, “&lt;a href=&#34;/object-oriented-programming-has-failed-us/&#34;&gt;Object-Oriented Programming Has Failed Us&lt;/a&gt;”. In the article, I put forth the reality that most people are unable to think in object-oriented terms. Humans think sequentially and chunk down. Object-Oriented Programming requires us to think holistically, frequently in parallel, and chunk up.&lt;/p&gt;
&lt;p&gt;So, lets define some terms. Chunking down is the act of finding differences between things. This is why we discriminate. At times, it is useful to find differences. If you are a microbiologist, you want to do this so you know you are working with one strain of virus vs some other strain.&lt;/p&gt;
&lt;p&gt;As you might have guessed, Chunking Up, is the exact opposite. We look for commonalities. Given two different things, what is the same between them?&lt;/p&gt;
&lt;p&gt;The problem is, that’s not how most of us naturally process the world. There are other problems with Object-Oriented Programming.&lt;/p&gt;
&lt;h3 id=&#34;Hard-to-Reason-About&#34;&gt;&lt;a href=&#34;#Hard-to-Reason-About&#34; class=&#34;headerlink&#34; title=&#34;Hard to Reason About&#34;&gt;&lt;/a&gt;Hard to Reason About&lt;/h3&gt;&lt;p&gt;Back when I was teaching for a training company, I was explaining some concept of Object-Oriented Programming, probably Virtual Functions, to a student that came from a procedural programming world. His comment was, “this is going to make the code really hard to debug!” to which I responded, “not if you step through with the debugger.” But, the truth is, he was right. Debugging Object-Oriented code is difficult because the code is hard to read and reason about. Looking at any one class, am I ever sure that I’m seeing the whole picture?&lt;/p&gt;
&lt;p&gt;Think about this. When you write a class, and have a member variable, how long is it before you’ve forgotten the fact that the variable exists and is implicitly a parameter that is being passed to your function. Not long! And this means that you can never really be sure that when you go to use that function, the state of the object will always be the same.&lt;/p&gt;
&lt;p&gt;This makes the code incredibly hard to test. I’m not even talking about using Test Driven Development. Just any kind of test that have way ensures that the code you’ve written does what you think it does and doesn’t do what you don’t think it does.&lt;/p&gt;
&lt;h3 id=&#34;Single-Responsibility&#34;&gt;&lt;a href=&#34;#Single-Responsibility&#34; class=&#34;headerlink&#34; title=&#34;Single Responsibility&#34;&gt;&lt;/a&gt;Single Responsibility&lt;/h3&gt;&lt;p&gt;One of the rules for Object-Oriented Programming is that we should follow the “Single Responsibility Principle” I ask you, how far do we chunk down to ensure we are only doing one thing in our class?  In fact, many of the principles we have developed are trying to put fences around the inherent problems with programming in an Object-Oriented mindset.&lt;/p&gt;
&lt;h2 id=&#34;Procedural-Programming&#34;&gt;&lt;a href=&#34;#Procedural-Programming&#34; class=&#34;headerlink&#34; title=&#34;Procedural Programming&#34;&gt;&lt;/a&gt;Procedural Programming&lt;/h2&gt;&lt;p&gt;The benefit of Procedural Programming is that I at least knew what parameters I was always going to get.  The disadvantage is that it was still incredibly hard to test because my function could call other function that could call yet other functions.  This meant that I could only really test the functions that were at the end of the hierarchy and really had no good way of mocking out child functions.  While testing is hard in an Object-Oriented world, it is nearly impossible in a procedural world.&lt;/p&gt;
&lt;h2 id=&#34;What-If&#34;&gt;&lt;a href=&#34;#What-If&#34; class=&#34;headerlink&#34; title=&#34;What If&#34;&gt;&lt;/a&gt;What If&lt;/h2&gt;&lt;p&gt;But, what if there were a way to write code that solved most of these problems. A way that better mirrored how we thought, that is easier to reason about, that allows you to chunk down – that forced you to chunk down. A way of coding that was so easy to test, that you frequently didn’t even need to write the test. This is the advantage of Functional Programming generally, and the reason you want to use the combination of NgRX&amp;#x2F;Store, Reactive Forms, and RxJS in the bulk of your Angular code.&lt;/p&gt;
&lt;h2 id=&#34;How-To&#34;&gt;&lt;a href=&#34;#How-To&#34; class=&#34;headerlink&#34; title=&#34;How To&#34;&gt;&lt;/a&gt;How To&lt;/h2&gt;&lt;h3 id=&#34;Basics&#34;&gt;&lt;a href=&#34;#Basics&#34; class=&#34;headerlink&#34; title=&#34;Basics&#34;&gt;&lt;/a&gt;Basics&lt;/h3&gt;&lt;p&gt;You’ll remember from our discussion of NgRX that we setup a reducer to return a new state object for a particular entity in our store. You’ll also remember that we are able to create an entity that has child entities and that we can subscribe to any entity using code that looks something like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;entityName&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;or&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;store.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&#34;property&#34;&gt;entityName&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;subEntity&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you need to, you can read my previous articles that I’ve already referred to.&lt;/p&gt;
&lt;p&gt;I normally setup an entity in my store for each screen, then for data I am just displaying I subscribe in the template using&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&amp;#123;(observerThing | async)?.variableThing&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;(observerThing | async)&lt;/code&gt; is the same as the code we would normally write in TypeScript:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;observerThing.&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;async&lt;/code&gt; does the &lt;code&gt;subscribe&lt;/code&gt; and returns &lt;code&gt;x&lt;/code&gt;. The &lt;code&gt;?&lt;/code&gt; ensures that we don’t attempt to go after &lt;code&gt;.variableThing&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is all pretty basic stuff.&lt;/p&gt;
&lt;p&gt;But what about working with forms.&lt;/p&gt;
&lt;h3 id=&#34;Forms&#34;&gt;&lt;a href=&#34;#Forms&#34; class=&#34;headerlink&#34; title=&#34;Forms&#34;&gt;&lt;/a&gt;Forms&lt;/h3&gt;&lt;p&gt;I’ve found that the best way to work with forms is to create a structure in my entity that maps directly to my form. So, if I have a form with firstName, lastName, and birthDate, I’ll define my form in my template with a form group using firstName, lastName, and birthDate as formControlName values.&lt;/p&gt;
&lt;p&gt;Next, in my TypeScript code, I’ll subscribe to the form group’s valueChanges property. Any time my form changes, the subscribe dispatches the changes to the reducer for my entity and updates the store.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;property&#34;&gt;myFormGroup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;property&#34;&gt;valueChanges&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; store.&lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;comment&#34;&gt;/* action thing goes here */&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, I can setup a &lt;code&gt;subscribe&lt;/code&gt; on my entity and any time the data in the entity changes, I can update the form group.&lt;/p&gt;
&lt;p&gt;There is a small little trick you need to know about here. I already showed you how to update the form group using &lt;code&gt;patchValue()&lt;/code&gt; &lt;a href=&#34;/angular2-model-driven-forms-are-superior/&#34;&gt;here&lt;/a&gt;. But because we were not dealing with a fully Functional Reactive programming model, I left out a part you’ll need here.&lt;/p&gt;
&lt;p&gt;When you update your code using &lt;code&gt;patchValue()&lt;/code&gt;, the first parameter will still be the data you want to change. That is, the values from the store’s entity. But for the second parameter, you’ll need to pass in &lt;code&gt;&amp;#123;emitEvent: false&amp;#125;&lt;/code&gt;, otherwise, you’ll end up with an infinite loop. Your form will cause your reducer to change and your store will cause your form to change. What that second parameter is saying is that we don’t want any of the change events to fire because we’ve updated the form.&lt;/p&gt;
&lt;p&gt;You may also want to consider writing code in your reducer that only returns a new state object if no data has changed.&lt;/p&gt;
&lt;h3 id=&#34;RxJS&#34;&gt;&lt;a href=&#34;#RxJS&#34; class=&#34;headerlink&#34; title=&#34;RxJS&#34;&gt;&lt;/a&gt;RxJS&lt;/h3&gt;&lt;p&gt;Now, nothing about anything I’ve written in the “how to” is particularly Functional, but it is Reactive. By virtue of the subscribes, it is reacting to state change and reacting to changes in the form. What makes our code Functional, is that we make use of RxJS, a Reactive library, to process the data. If you’ve already been using the Http object in Angular, you’ve already been using RxJS.&lt;/p&gt;
&lt;p&gt;There is a great &lt;a href=&#34;//reactivex.io/learnrx/&#34;&gt;tutorial for learning RxJS&lt;/a&gt; that the guys at NetFlix have put together. I’m not even going to attempt to teach RxJS here. They’ve got the best material and it is what helped me wrap my head around the basic concepts.&lt;/p&gt;
&lt;p&gt;What I do want to point out here is what makes Functional programming Functional so that you end up using RxJS correctly.  While these are not hard and fast rules, I would encourage you to break these rules only after you can’t find any other way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The output of one function becomes the input for the next function.&lt;/li&gt;
&lt;li&gt;A function never causes a side effect (this is why NgRX has Effects)&lt;/li&gt;
&lt;li&gt;The same parameters in will always produce the same data out.&lt;/li&gt;
&lt;li&gt;Avoid conditionals and use .filter(), .case() etc instead.&lt;/li&gt;
&lt;li&gt;Ideally the cyclomatic complexity of a function should be 1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By following these rules, you will find that most of the code you write doesn’t need to have any test.  Why would you ever test a function with a cyclomatic complexity of 1, or code that has no conditions?&lt;/p&gt;
&lt;h2 id=&#34;The-Right-Tool-for-the-Job&#34;&gt;&lt;a href=&#34;#The-Right-Tool-for-the-Job&#34; class=&#34;headerlink&#34; title=&#34;The Right Tool for the Job&#34;&gt;&lt;/a&gt;The Right Tool for the Job&lt;/h2&gt;&lt;p&gt;While I would love to be able to use Functional programming everywhere, I recognize that it isn’t always the best tool for the job. For example, at least with Angular, there isn’t a good way of writing our components and pages in a strictly Functional way. However, if you use what I’ve illustrated here, you’ll find that even though the structure of your components are Object-Oriented, much of the code within the component is quite functional.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://davembush.github.com/using-real-world-ngrx/</guid>
            <title>Using Real World NgRX</title>
            <link>http://davembush.github.com/using-real-world-ngrx/</link>
            <category>angular</category>
            <category>design patterns</category>
            <category>NgRX</category>
            <pubDate>Tue, 09 May 2017 06:30:00 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;This week, I want to demonstrate some ways you might use NgRX in your own code.&lt;/p&gt;
&lt;h2 id=&#34;Review&#34;&gt;&lt;a href=&#34;#Review&#34; class=&#34;headerlink&#34; title=&#34;Review&#34;&gt;&lt;/a&gt;Review&lt;/h2&gt;&lt;p&gt;Last week we went into a lot of detail about how the NgRX system should be wired together. Here is all of that in picture form.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2017/05/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;A component fires an event to either an effect or a reducer using an action. If an effect was called, it fires another action which is normally picked up by a reducer. The Reducer mutates the state which then gets placed in the store. “Magic happens here.” You don’t write any code to get it to the store other than that you create a reducer. Anything that is observing the table in the store that got changed will get notified via RxJS observables and the cycle is complete.&lt;/p&gt;
&lt;p&gt;Note that the action you dispatch can be handled by either an Effect, a Reducer or both.&lt;/p&gt;
&lt;h2 id=&#34;Basic-CRUD&#34;&gt;&lt;a href=&#34;#Basic-CRUD&#34; class=&#34;headerlink&#34; title=&#34;Basic CRUD&#34;&gt;&lt;/a&gt;Basic CRUD&lt;/h2&gt;&lt;p&gt;Most of the time, we think of NgRX as a way of handling CRUD operations. We need to see the current record so we fire off a LOAD action that uses an effect to retrieve the data from the database. Once the data comes back, we return an action that tells the reducer to put that new data into the store. Since our component is observing the store, it updates the screen with the new values.&lt;/p&gt;
&lt;p&gt;If we need to add a record, we fire an ADD action. If we need to delete we fire a DELETE action. If we need to update, we fire an UPDATE action. Each of these are picked up by the Effect, which then fires an action that places new state information in the store via the Reducer.&lt;/p&gt;
&lt;h2 id=&#34;Wait-State&#34;&gt;&lt;a href=&#34;#Wait-State&#34; class=&#34;headerlink&#34; title=&#34;Wait State&#34;&gt;&lt;/a&gt;Wait State&lt;/h2&gt;&lt;p&gt;When most people think of how to use NgRX or any similar pattern, they immediately think of the CRUD pattern I mentioned above. But, we don’t have to start the Action chain from a component. For that matter, we don’t have to listen to our Store data from a component either.&lt;/p&gt;
&lt;p&gt;One way I’ve implemented NgRX that solves a lot of common issues is that I’ve created a wait state component that shows when a count variable has been incremented and doesn’t show when the count is zero. Since Store is &lt;code&gt;Injectable&lt;/code&gt;, I can increment and decrement the count from just about anywhere. Most often I increment it from an effect just before I make an AJAX call and decrement it in a finally() block of the Http observable. I have a start() action that increments the count and an end() action that decrements the count and ensures that I never go below zero. I can start off multiple asynchronous processes which will all increment the counter and decrement the counter appropriately. The wait state GUI displays until everything has finished.&lt;/p&gt;
&lt;p&gt;This is OH! So much easier than how we’ve had to handle this problem with other design patterns. I’m not saying it couldn’t be done, or that it was even particularly hard. But this way is easier.&lt;/p&gt;
&lt;h2 id=&#34;Error-Handling&#34;&gt;&lt;a href=&#34;#Error-Handling&#34; class=&#34;headerlink&#34; title=&#34;Error Handling&#34;&gt;&lt;/a&gt;Error Handling&lt;/h2&gt;&lt;p&gt;Another place where you might want to present information but trigger the display from just about anywhere is with error handling. In the code I work on, I have a modal popup component that displays whenever my error collection has something in it. Anytime I need to display an error, I add the error to the collection via an Action and it magically displays. The great thing about this mechanism is that regardless of how many errors I send to the collection, they all display until I close the window, which clears out the collection.&lt;/p&gt;
&lt;h2 id=&#34;Page-State&#34;&gt;&lt;a href=&#34;#Page-State&#34; class=&#34;headerlink&#34; title=&#34;Page State&#34;&gt;&lt;/a&gt;Page State&lt;/h2&gt;&lt;p&gt;Most page state is handled by the fact that we’ve stored the data into a database. But there are times when we want to come back to a page we had been working on previously and we want it to display with the data that was on it at the time we left.&lt;/p&gt;
&lt;p&gt;Or maybe you want to work on a series of pages prior to saving so that everything gets saved as a set.&lt;/p&gt;
&lt;p&gt;No matter. You can use NgRX to store everything into the store and a separate action can trigger an effect that pushes that data to the database.&lt;/p&gt;
&lt;p&gt;Or, as is the case in an application I’m working on, I’m using a form to search a database. When I come back, I want the same search fields and I want the search to reinitialized. In my particular case, I don’t have a search field. You change a field, a new search is automatically initiated. This case is just a little bit more complicated than what we’ve looked at so far.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2017/05/image-1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;In order to keep the state information available so that it is there when I come back to it, I need to store that information in the search table via the Search Reducer. So, every time something changes in the Search Form, I send off an action to the Search Reducer so that the change can be recorded.&lt;/p&gt;
&lt;p&gt;Meanwhile, the Search Form also is listening to the Search Table so that when it comes back it can put the changes in the form, and it can send an action to the Search Results Reducer telling it to search for the information. When it gets the results, the Search Results Table picks them up and since the Search Results Component is listening to the Search Results Table, they display.&lt;/p&gt;
&lt;p&gt;If I leave the page, the Search Form grabs the current search parameters from the Search Table and Fills the Form and sends the action to the Search Results Reducer and the page is back where we left it.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;The point is, NgRX isn’t just about basic CRUD forms and because there are multiple ways you can mix and match the parts, even your basic CRUD implementation has a lot more flexibility than you might be used to.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
