<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://davembush.github.com</id>
    <title>Dave&#39;s Notebook • Posts by &#34;bdd&#34; tag</title>
    <link href="http://davembush.github.com" />
    <updated>2016-08-16T10:30:00.000Z</updated>
    <category term="project management" />
    <category term="code coverage" />
    <category term="tdd" />
    <category term="unit test" />
    <category term="code" />
    <category term="programming" />
    <category term="angular" />
    <category term="javascript" />
    <category term="performance" />
    <category term="react.js" />
    <category term="agile" />
    <category term="failure" />
    <category term="kanban" />
    <category term="scrum" />
    <category term="interview" />
    <category term="job search" />
    <category term="test driven development" />
    <category term="mvvm" />
    <category term="DRY" />
    <category term="loose coupling" />
    <category term="single responsibility" />
    <category term="c#" />
    <category term="learning" />
    <category term="bug" />
    <category term="ext js" />
    <category term="sencha" />
    <category term="career" />
    <category term="react" />
    <category term="ngrx" />
    <category term="redux" />
    <category term="functional" />
    <category term="reactive" />
    <category term="mvp" />
    <category term="private" />
    <category term="testing" />
    <category term="typescript" />
    <category term="routing" />
    <category term="pointers" />
    <category term="unsafe" />
    <category term="class diagram" />
    <category term="vb.net" />
    <category term="visual studio" />
    <category term="flux" />
    <category term="lazy loading" />
    <category term="scope" />
    <category term="DOM" />
    <category term="ionic" />
    <category term="putty" />
    <category term="ssh" />
    <category term="formgroup" />
    <category term="validation" />
    <category term="angular-cli" />
    <category term="modules" />
    <category term="ngmodule" />
    <category term="observables" />
    <category term="RxJS" />
    <category term="model driven" />
    <category term="reactive forms" />
    <category term="estimating" />
    <category term="story points" />
    <category term="best practices" />
    <category term="design patterns" />
    <category term="architecture" />
    <category term="asp.net" />
    <category term="memory" />
    <category term="angular.js" />
    <category term="iis" />
    <category term="ajax" />
    <category term="json" />
    <category term="controller" />
    <category term="MVC" />
    <category term="view" />
    <category term="404" />
    <category term="application_error" />
    <category term="exceptions" />
    <category term="viewstate" />
    <category term="archietcture" />
    <category term="bll" />
    <category term="dal" />
    <category term="Three Tiered" />
    <category term=".net" />
    <category term="enums" />
    <category term="tutorial" />
    <category term="code quality" />
    <category term="cyclomatic" />
    <category term="halstead" />
    <category term="child component" />
    <category term="CefSharp" />
    <category term="Chromium" />
    <category term="Vista" />
    <category term="VPN" />
    <category term="xp" />
    <category term="get" />
    <category term="properties" />
    <category term="set" />
    <category term="empty" />
    <category term="string" />
    <category term="habits" />
    <category term="application testing" />
    <category term="dependency injection" />
    <category term="debugging" />
    <category term="cms" />
    <category term="dotnetnuke" />
    <category term="WordPress" />
    <category term="authority" />
    <category term="confidence" />
    <category term="datalist" />
    <category term="listview" />
    <category term="comments" />
    <category term="tdd. agile" />
    <category term="bootstrap" />
    <category term="copy &amp;amp; paste" />
    <category term="cross browser" />
    <category term="idisposable" />
    <category term="animation" />
    <category term="css" />
    <category term="html" />
    <category term="debug" />
    <category term="checked" />
    <category term="double" />
    <category term="float" />
    <category term="int" />
    <category term="long" />
    <category term="short" />
    <category term="unchecked" />
    <category term="currency" />
    <category term="decimal" />
    <category term="floating point math" />
    <category term="single" />
    <category term="authentication" />
    <category term="isinrole" />
    <category term="roles" />
    <category term="user" />
    <category term="definition of done" />
    <category term="DoD" />
    <category term="dispose" />
    <category term="finalize" />
    <category term="suppressfinalize" />
    <category term="education" />
    <category term="client side" />
    <category term="development" />
    <category term="class" />
    <category term="dynamic classing" />
    <category term="gridview" />
    <category term="college" />
    <category term="freshman" />
    <category term="babel" />
    <category term="es2015" />
    <category term="es6" />
    <category term="jest" />
    <category term="bdd" />
    <category term="Single Responsibility" />
    <category term="Architecture" />
    <category term="full stack developer" />
    <category term="web development" />
    <category term="formsauthentication" />
    <category term="manual" />
    <category term="redirectfromloginpage" />
    <category term="setauthcookie" />
    <category term="NgRX" />
    <category term="luck" />
    <category term="social skills" />
    <category term="brain" />
    <category term="health" />
    <category term="programmer" />
    <category term="productivity" />
    <category term="QA" />
    <category term="extreme programming" />
    <category term="software" />
    <category term="httpcontext" />
    <category term="items" />
    <category term="session" />
    <category term="naming conventions" />
    <category term="variables" />
    <category term="self improvement" />
    <category term="301" />
    <category term="302" />
    <category term="fiddler" />
    <category term="infinite loop" />
    <category term="images" />
    <category term="iTextSharp" />
    <category term="PDF" />
    <category term="concatenation" />
    <category term="quirks" />
    <category term="parsing" />
    <category term="xhtml" />
    <category term="fonts" />
    <category term="stack" />
    <category term="htmltidy" />
    <category term="tables" />
    <category term="acrofields" />
    <category term="form fields" />
    <category term="outputstream" />
    <category term="pdfreader" />
    <category term="pdfstamper" />
    <category term="bind" />
    <category term="callbacks" />
    <category term="currying" />
    <category term="events" />
    <category term="business rules" />
    <category term="boolean" />
    <category term="fields" />
    <category term="methods" />
    <category term="object" />
    <category term="functions" />
    <category term="inheritance" />
    <category term="prototype" />
    <category term="hoist" />
    <category term="falsy" />
    <category term="truthy" />
    <category term="istanbul" />
    <category term="jasmine" />
    <category term="hoisting" />
    <category term="types" />
    <category term="type conversion" />
    <category term="dialog" />
    <category term="jQuery" />
    <category term="validation controls" />
    <category term="async" />
    <category term="each" />
    <category term="collapse" />
    <category term="expand" />
    <category term="load" />
    <category term="partial content" />
    <category term="tooltip" />
    <category term="regions" />
    <category term="limiting beliefs" />
    <category term="angular material" />
    <category term="linkedin" />
    <category term="social media" />
    <category term="tips" />
    <category term="CI. Continuous Integration" />
    <category term="magic numbers" />
    <category term="magic strings" />
    <category term="flex" />
    <category term="multiview" />
    <category term="wizard" />
    <category term="threading" />
    <category term="intern" />
    <category term="express" />
    <category term="node" />
    <category term="nunit" />
    <category term="object initializers" />
    <category term="video" />
    <category term="reflection" />
    <category term="unity" />
    <category term="best practice" />
    <category term="asp.net postback button" />
    <category term="iText" />
    <category term="property based testing" />
    <category term="cli" />
    <category term="software architecture" />
    <category term="rxjs. angular 2" />
    <category term="redirect" />
    <category term="response" />
    <category term="responsive design" />
    <category term="parallel" />
    <category term="selenium" />
    <category term="Marble Testing" />
    <category term="java" />
    <category term="grid" />
    <category term="hub" />
    <category term="serialization" />
    <category term="specflow" />
    <category term="like" />
    <category term="sql" />
    <category term="tsql" />
    <category term="where clause" />
    <category term="do while" />
    <category term="for next" />
    <category term="ms-sql" />
    <category term="while" />
    <category term="gamification" />
    <category term="paired programming" />
    <category term="reference types" />
    <category term="stringbuilder" />
    <category term="value types" />
    <category term="technical debt" />
    <category term="activetabindex" />
    <category term="postback" />
    <category term="tab control" />
    <category term="tabcontrol" />
    <category term="kata" />
    <category term="extjs" />
    <category term="email" />
    <category term="mailaddress" />
    <category term="mailmessage" />
    <category term="smtpclient" />
    <category term="Quality" />
    <category term="behavior" />
    <category term="psychology" />
    <category term="portal" />
    <category term="web 1.0" />
    <category term="web 2.0" />
    <category term="trace" />
    <category term="compiler" />
    <category term="errror" />
    <category term="warning" />
    <category term="connection string" />
    <category term="dataset" />
    <category term="error" />
    <category term="web.config" />
    <category term="tslint" />
    <category term="emotions" />
    <category term="hiring" />
    <category term="aspnet_regsql" />
    <category term="forms based authentication" />
    <category term="jsdom" />
    <category term="karma" />
    <category term="noTDD" />
    <category term="bundling" />
    <category term="gulp" />
    <category term="minification" />
    <category term="node.js" />
    <category term="file upload" />
    <category term="objects" />
    <category term="hide" />
    <category term="vb.net attributes" />
    <category term="nothing" />
    <category term="nullable" />
    <category term="conditional startup" />
    <category term="windows forms" />
    <category term="winforms" />
    <category term="char" />
    <category term="split" />
    <category term="strict" />
    <category term="clarity" />
    <category term="ui" />
    <category term="ux" />
    <category term="asmx" />
    <category term="error handling" />
    <category term="webservice" />
    <category term="binary" />
    <category term="bitwise" />
    <category term="operators" />
    <category term="automation" />
    <category term="browser" />
    <category term="mstest" />
    <category term="immutable" />
    <category term="global" />
    <category term="await" />
    <category term="webapi" />
    <category term="configuration" />
    <category term="devops" />
    <category term="testcasedata" />
    <category term="testcasesource" />
    <category term="closure" />
    <category term="loops" />
    <category term="certification" />
    <category term="mcsd" />
    <category term="microsoft" />
    <category term="inversion of control" />
    <category term="ioc" />
    <category term="casting" />
    <category term="convert" />
    <category term="arguements" />
    <category term="command line" />
    <category term="main" />
    <category term="yagni" />
    <category term="npm" />
    <category term="nvm" />
    <category term="resumes" />
    <category term="change-detection" />
    <category term="state-management" />
    <category term="web-workers" />
    <category term="libraries" />
    <category term="strong typing" />
    <category term="linting" />
    <category term="constructors" />
    <category term="clean code" />
    <category term="smart-ngrx" />
    <category term="ngrx-store" />
    <category term="ngrx-entity" />
    <category term="ngrx-effects" />
    <category term="TypeScript" />
    <category term="Performance" />
    <entry>
        <id>http://davembush.github.com/using-javascript-to-drive-selenium-tests/</id>
        <title>Using JavaScript to Drive Selenium Tests</title>
        <link rel="alternate" href="http://davembush.github.com/using-javascript-to-drive-selenium-tests/"/>
        <content type="html">&lt;p&gt;I’ve written about &lt;a href=&#34;/tags/selenium/&#34;&gt;using Selenium to test web applications before&lt;/a&gt;.  But all of those articles have assumed you are using C#.  I’ve realized that Selenium has multiple language bindings which allow me to use any language I want but C# just seemed easier at the time.  But, now I’m in an environment that doesn’t use .NET at all.  They use Java.  I know Java, but I choose not to use it and instead my focus at this shop is all JavaScript.  Which means, if I want to write Selenium tests to verify my work, I need to write my tests in JavaScript.  But Using JavaScript to Drive Selenium is, in my opinion what everyone should be doing.  At least everyone who is writing most of their web application using client side code.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Think about it, the primary language you wrote the client side with is JavaScript, and yet you are going to write your tests using C#, Java, PHP… when you could be writing the tests using JavaScript.  The same language you used to write the bulk of your application.  Further, when you write your tests using C# or Java, you’ll probably either write the tests using a unit testing framework (MSTest, NUnit, JUnit) or you’ll use some sort of BDD adapter like SpecFlow to coerce the unit testing framework into the behavioral pattern you need.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2016/08/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;  If, you use JavaScript, you can use Jasmine, which is already behavioral, to run your tests.&lt;/p&gt;
&lt;p&gt;Another added advantage to the binding I’m going to recommend in this post, is that you get parallelization right out of the box.  You don’t need to write any funky code to &lt;a href=&#34;/running-selenium-in-parallel-with-any-net-unit-testing-tool/&#34;&gt;make your tests run in parallel&lt;/a&gt;.  You get that for free.&lt;/p&gt;
&lt;p&gt;Another advantage I see for large companies is that not every group is going to be using the same server side language.  Where I’m at there are several groups using .NET and several groups using Java.  But everyone is using JavaScript.  If we all use JavaScript to drive our Selenium tests, we can share the knowledge we learn with other groups.&lt;/p&gt;
&lt;p&gt;So, let’s get started.&lt;/p&gt;
&lt;p&gt;For the purposes of this article, I’m going to assume you’ve already &lt;a href=&#34;/you-can-start-using-node-today/&#34;&gt;setup your node environment using the instructions I provided a couple of weeks ago&lt;/a&gt;.  If you haven’t, you should do that now.  If you already have Node setup on your computer, but you are still using a version less that 6.3, I’m going to suggest you upgrade to the current version so that you can use some of the new ES2015 functionality like fat arrows.&lt;/p&gt;
&lt;h2 id=&#34;Setup&#34;&gt;&lt;a href=&#34;#Setup&#34; class=&#34;headerlink&#34; title=&#34;Setup&#34;&gt;&lt;/a&gt;Setup&lt;/h2&gt;&lt;p&gt;The tools we are going to use for testing using JavaScript, other than Node are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//webdriver.io/&#34;&gt;WebDriver.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//webdriver.io/guide/reporters/spec.html&#34;&gt;WebDriver.io Spec Reporter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//jasmine.github.io/&#34;&gt;Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And while the documentation on the WebDriver.IO site is quite complete, you would need to wade through quite a bit of information you don’t need to get this all setup and going.  We are going to give you just enough to get started.  If you want more information, I invite you to visit the website I’ve linked to above.&lt;/p&gt;
&lt;p&gt;For the purposes of this walk through, we are going to ignore the Selenium Grid part.  I’ve written about setting up Selenium Grid before.  Using the grid from WebDriver.io will just be a matter of changing some configurations.  Similarly, if you want to run the test from a cloud provider, the docs for that are on the website.&lt;/p&gt;
&lt;p&gt;Here, we are just going to get setup with a standalone server.  This suits my typical use of Selenium is to write a test for one specific tests at a time.  Once I have it working, I disable the tests.  The only time I run all of my test is prior to deploying the code to DEV just to make sure I didn’t break anything along the way.  Besides, setting up a standalone environment gets you started quickly.&lt;/p&gt;
&lt;p&gt;Before we really get started with the JavaScript stuff, make sure you have Java installed on your computer.  You’ll need that to run the Selenium stuff.&lt;/p&gt;
&lt;p&gt;So, to start out, install WebDriver.io First create a project directory for your new test project.  You can, of course, name it whatever you want.  Just make sure you make that directory your current working directory (CD into it.) Once you’re in the project directory, create your package.json file by typing in npm init Which will ask you several questions about your project.  Answer the questions and&amp;#x2F;or accept the defaults.&lt;/p&gt;
&lt;p&gt;Then install WebDriver.io by using the NPM command &lt;code&gt;npm install webdriverio --save-dev&lt;/code&gt; This should place wdio in your .&amp;#x2F;node_modules&amp;#x2F;.bin directory.  Run &lt;code&gt;./node_modules/.bin/wdio --help&lt;/code&gt; To verify that it is working.  If you are running on a Windows computer, you’ll want to make those forward slashes back slashes.&lt;/p&gt;
&lt;p&gt;Now that it is working, we are going to use it to configure a test runner file.  Type in .&amp;#x2F;node_module&amp;#x2F;.bin&amp;#x2F;wdio config One of the questions it is going to ask is which framework you want to use.  Pick ‘Jasmine’ Then it will ask if it should install the framework for you, pick ‘Yes’ Then it will ask where your tests are located.  Type in the correct location.&lt;/p&gt;
&lt;p&gt;Then it will ask which adapter you want to use.  Pick ‘spec’ and have it install that library for you.&lt;/p&gt;
&lt;p&gt;For Service, select ‘selenium-standalone’ and let it install that for you as well.  (Noticing a theme here?) For base URL, pick &lt;a href=&#34;//www.google.com&#34;&gt;https://www.google.com&lt;/a&gt; because we are going to write out demo tests against google.&lt;/p&gt;
&lt;p&gt;Now sit back and let the wdio config install the missing parts it needs for your tests.&lt;/p&gt;
&lt;p&gt;By default, this setup makes FireFox the test browser.  You can change that using the instructions located here: &lt;a href=&#34;//webdriver.io/guide/testrunner/configurationfile.html&#34; title=&#34;http://webdriver.io/guide/testrunner/configurationfile.html&#34;&gt;http://webdriver.io/guide/testrunner/configurationfile.html&lt;/a&gt; I know that looks like a lot of setup, but it really is pretty easy.  One NPM command to install webdriver.io and another wdio command to get the config file setup and the rest of the dependencies installed.  Pretty sweet.&lt;/p&gt;
&lt;p&gt;Now, let’s write our first test.&lt;/p&gt;
&lt;h2 id=&#34;Writing-Tests&#34;&gt;&lt;a href=&#34;#Writing-Tests&#34; class=&#34;headerlink&#34; title=&#34;Writing Tests&#34;&gt;&lt;/a&gt;Writing Tests&lt;/h2&gt;&lt;p&gt;We are going to put our test in the directory we specified in our config file.  In my case, I put my tests under &amp;#x2F;tests&amp;#x2F;**&amp;#x2F;*.js Just to make sure everything is working correctly, we are going to write a pretty simple first test.&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;First test&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        browser.&lt;span class=&#34;title function_&#34;&gt;url&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://www.google.com&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should display &amp;quot;Google&amp;quot; in the title&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(browser.&lt;span class=&#34;title function_&#34;&gt;getTitle&lt;/span&gt;()).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Google&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There are some bits that might look new here.&lt;/p&gt;
&lt;p&gt;First, because we are running this in node, only the file has scope so we can place ‘use strict’; at the top.&lt;/p&gt;
&lt;p&gt;Second, we are making use of the fat arrow functions.  For our purposes today, ()&amp;#x3D;&amp;gt;{} is the same as function(){}.  Just a bit easier to write.&lt;/p&gt;
&lt;p&gt;Third, we are using a browser variable that hasn’t been defined anywhere.  At least not that we can see.  This is a design decision the WebDriverIO team made that I don’t necessarily agree with.  We should require() it into our module when we need it.  But it is what it is.&lt;/p&gt;
&lt;p&gt;You can checkout the API for the browser object here: &lt;a href=&#34;//webdriver.io/api.html&#34; title=&#34;http://webdriver.io/api.html&#34;&gt;http://webdriver.io/api.html&lt;/a&gt; So, our test is loading the default URL and checking the contents of the title tag.&lt;/p&gt;
&lt;p&gt;Now we run our test with wdio &lt;code&gt;./node_modules/.bin/wdio wdio.conf.js&lt;/code&gt; Our test should pass.&lt;/p&gt;
&lt;h2 id=&#34;Page-Objects&#34;&gt;&lt;a href=&#34;#Page-Objects&#34; class=&#34;headerlink&#34; title=&#34;Page Objects&#34;&gt;&lt;/a&gt;Page Objects&lt;/h2&gt;&lt;p&gt;So that’s the basics.&lt;/p&gt;
&lt;p&gt;If you are already familiar with writing Selenium testing, that’s the guts of what you need to know to get going.&lt;/p&gt;
&lt;p&gt;If you aren’t, or you’ve never heard of Page Objects, that is what I plan to cover next.&lt;/p&gt;
&lt;p&gt;Generally, when we write our selenium test, we want to use a Page Object.  That is, we want to hide all of our Selenium specific stuff under an object so we can write our test without having to worry about the location of the elements on the screen changing.&lt;/p&gt;
&lt;p&gt;You see, here’s the problem you are going to run into.  You are going to write lots of tests.  At least I hope you do.  And then someday, you are going to want to change an ID of an element, or otherwise change how you find it.  If you write all of the tests so that they code directly to the Selenium code, you’ll need to find every place you were looking for that element and replace it with the new lookup.  Not very DRY.&lt;/p&gt;
&lt;p&gt;But, if you create a page object, you’ll put your code there and call it from your tests.&lt;/p&gt;
&lt;p&gt;So for an example.  Let’s create a GooglePage definition.  Once again, because we are using Node 6.3 (or above) we can use the class keyword.  The browser variable is still available to us because it is global.&lt;/p&gt;
&lt;p&gt;So, a pretty simple page object for Google search might look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;load&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        browser.&lt;span class=&#34;title function_&#34;&gt;url&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://www.google.com&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;title&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; browser.&lt;span class=&#34;title function_&#34;&gt;getTitle&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;searchInput&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; browser.&lt;span class=&#34;title function_&#34;&gt;element&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;input[name=&amp;quot;q&amp;quot;]&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;searchButton&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; browser.&lt;span class=&#34;title function_&#34;&gt;element&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;input[name=&amp;quot;btnK&amp;quot;]&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;search&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;value&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;searchInput&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;setValue&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Node.js&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        browser.&lt;span class=&#34;title function_&#34;&gt;pause&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;exports&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And then to access it from our test, we modify the test file above to look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;../pages/GooglePage&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;First test&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;load&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should display &amp;quot;Google&amp;quot; in the title&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;title&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Google&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;describe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;and I search for &amp;quot;Node.JS&amp;quot;&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;beforeEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;search&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Node.JS&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;it&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;should display &amp;quot;Node.JS&amp;quot; in the title&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;GooglePage&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;title&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;toBe&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;node.js - Google Search&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This is a pretty simple example for demonstration purposes.  If you’ve never done any kind of Selenium testing before, I recommend you dig a little deeper than where I’ve gone here&lt;/p&gt;
&lt;h2 id=&#34;Project&#34;&gt;&lt;a href=&#34;#Project&#34; class=&#34;headerlink&#34; title=&#34;Project&#34;&gt;&lt;/a&gt;Project&lt;/h2&gt;&lt;p&gt;The completed project is available on GitHub here &lt;a href=&#34;//github.com/DaveMBush/WebDriverIO-Sample&#34; title=&#34;https://github.com/DaveMBush/WebDriverIO-Sample&#34;&gt;https://github.com/DaveMBush/WebDriverIO-Sample&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;Photo credit: &lt;a href=&#34;//www.flickr.com/photos/smjb/8107539280/&#34;&gt;smjbk&lt;/a&gt; via &lt;a href=&#34;//visualhunt.com&#34;&gt;Visualhunt.com&lt;/a&gt; &amp;#x2F; &lt;a href=&#34;//creativecommons.org/licenses/by/2.0/&#34;&gt;CC BY&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="javascript" />
        <category term="bdd" />
        <category term="selenium" />
        <updated>2016-08-16T10:30:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/setting-up-specflow/</id>
        <title>Setting up SpecFlow</title>
        <link rel="alternate" href="http://davembush.github.com/setting-up-specflow/"/>
        <content type="html">&lt;p&gt;I’ve been asked to train a group of developers in the use of &lt;a href=&#34;//www.specflow.org/&#34;&gt;SpecFlow&lt;/a&gt; so that they can use it to write Selenium Tests.  So, in an attempt to “kill two birds with one stone” I thought today’s post would cover how to get the SpecFlow environment setup.  Not only will it help me prepare for the training session I will be leading, but it will help me when I need to set this up the next time because it tends to be a bit confusing when you setup a new project.  You’ll see why in a bit.&lt;/p&gt;
&lt;h2 id=&#34;Installing-SpecFlow&#34;&gt;&lt;a href=&#34;#Installing-SpecFlow&#34; class=&#34;headerlink&#34; title=&#34;Installing SpecFlow&#34;&gt;&lt;/a&gt;Installing SpecFlow&lt;/h2&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;The first thing you’ll want to do is to install the SpecFlow Visual Studio integration.  You do this by navigating to “Tools” –&amp;gt; “Extension and Updates …” &lt;img src=&#34;/uploads/2015/05/image.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt; This will bring up a dialog box where you’ll want to select the “Online” branch &lt;img src=&#34;/uploads/2015/05/image1.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt; You will notice in the upper right corner of this dialog, a search box.  Type in “SpecFlow” to find the SpecFlow extensions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image2.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt; In the image above, I’ve already installed it, so there is a check box.  You’ll want to click the “Download” or “Install” button that displays when it isn’t installed.&lt;/p&gt;
&lt;h2 id=&#34;Creating-a-Test-Project&#34;&gt;&lt;a href=&#34;#Creating-a-Test-Project&#34; class=&#34;headerlink&#34; title=&#34;Creating a Test Project&#34;&gt;&lt;/a&gt;Creating a Test Project&lt;/h2&gt;&lt;p&gt;Now that you’ve installed the extension, you can create a new test project.  You might expect a SpecFlow template to appear somewhere in the project list.  Sorry, that’s not what you get.  You could create one yourself if you really wanted.  To create a SpecFlow project, all you really need to do is to create a Class Library project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image3.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Adding-a-Reference&#34;&gt;&lt;a href=&#34;#Adding-a-Reference&#34; class=&#34;headerlink&#34; title=&#34;Adding a Reference&#34;&gt;&lt;/a&gt;Adding a Reference&lt;/h2&gt;&lt;p&gt;And now, this is where I always get tripped up for a minute.  You can create a new feature file, but there is a menu item you should see that will allow you to add feature steps to a class file and you won’t see that until you add a reference to SpecFlow.  To do that, you will need to go back to NuGet.  This time use the menu option, “Tools” –&amp;gt; “NuGet Package Manager” –&amp;gt; “Manage NuGet Packages for Solution…”&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image4.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once again a dialog will display.  Make sure you are in the “Online” branch on the left and type “SpecFlow” into the search area in the upper right corner of the dialog.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image5.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;I always use SpecFlow with NUnit, if you install SpecFlow.NUnit it will automatically install the SpecFlow dependencies with it.  If you prefer to use xUnit, you can install that and the SpecFlow dependencies will install automatically.&lt;/p&gt;
&lt;h2 id=&#34;Create-Your-First-Feature-File&#34;&gt;&lt;a href=&#34;#Create-Your-First-Feature-File&#34; class=&#34;headerlink&#34; title=&#34;Create Your First Feature File&#34;&gt;&lt;/a&gt;Create Your First Feature File&lt;/h2&gt;&lt;p&gt;Now that you have the environment setup, you can actually use SpecFlow.  To create your first feature file, you can right click on the project and select “Add” –&amp;gt; “New Item…” from the context menu.  Just like you would add a new file to the project any other time.  From the resulting dialog, select “SpecFlow Feature File”, give it an appropriate file name, and click the “Add” button.  When I name my SpecFlow feature files, I try to name them similar to the feature it will be testing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image6.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;The resulting feature file will have a sample of how your feature will be setup.  You will want to change this to test whatever it is you are testing.  The next thing you will want to do is to create a Step Definition file.  This is a regular C# file with a Binding attribute added.  The file that SpecFlow will generate for you will match the template they provided in the feature file.  What I want you to do next is the delete all of the methods in the class so that I can show you how to add additional methods.  I’m not going to go to the trouble of showing you the screen shots.  I figure you know how to get to it and the image above shows it listed in the “Add File” dialog.&lt;/p&gt;
&lt;p&gt;Next, go back to your feature file and right click on the provided “Given” line, you should see a menu option that says, “Generate Step Definitions”&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image7.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you click this, you’ll get a dialog like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/uploads/2015/05/image8.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;A couple of things you should notice.  One is the name of the class you are going to create if you click the “Generate” button.  I would advise against using the generate button.  Instead, we are going to use the “Copy methods to clipboard” method.  If you want to try to keep things segmented, you might choose to copy some of the steps to the clipboard and paste them into one file and copy others and paste them into another file.  This list will only list steps that you don’t already have definitions for, so you don’t need to worry about producing duplicate definitions.&lt;/p&gt;
&lt;p&gt;If you copy the methods onto the clipboard and paste them into the step file, you should end up with code that is functionally equivalent to what the new file template created for you.&lt;/p&gt;
&lt;h2 id=&#34;Just-A-Start&#34;&gt;&lt;a href=&#34;#Just-A-Start&#34; class=&#34;headerlink&#34; title=&#34;Just A Start&#34;&gt;&lt;/a&gt;Just A Start&lt;/h2&gt;&lt;p&gt;This is enough to get you setup, but there is more to cover, so make sure you subscribe to the mailing list to get notified when I post another article about SpecFlow.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="testing" />
        <category term="bdd" />
        <category term="specflow" />
        <updated>2015-05-21T10:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/why-johnny-can-t-do-test-driven-development/</id>
        <title>Why Johnny Can&#39;t do Test Driven Development</title>
        <link rel="alternate" href="http://davembush.github.com/why-johnny-can-t-do-test-driven-development/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/02/ppl-kid-05.jpg&#34; alt=&#34;ppl-kid-05&#34; title=&#34;ppl-kid-05&#34;&gt;&lt;/p&gt;
&lt;p&gt;Last week we looked at a few excuses developers give for not testing their code as they develop it (&lt;a href=&#34;/excuses-for-not-testing/&#34;&gt;Excuses For Not Testing&lt;/a&gt;).  We finished that by mentioning that most of the code you write simply isn’t testable.  You can’t practice Test Driven Development on something that isn’t testable in the first place. And there, folks, is why Johnny can’t test.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;But-it’s-not-Johnny’s-fault&#34;&gt;&lt;a href=&#34;#But-it’s-not-Johnny’s-fault&#34; class=&#34;headerlink&#34; title=&#34;But, it’s not Johnny’s fault.&#34;&gt;&lt;/a&gt;But, it’s not Johnny’s fault.&lt;/h2&gt;&lt;p&gt;Think about what makes code testable.  At it’s core, testable code is loosely coupled.  But what do we mean by “loosely coupled”? Well, let’s start with the large picture.  Assuming you have a multi-layered architecture.  That is, you have your code broken out into View, Business Rules, and Data Access.  Raise your hand if your business rules access your view directly.  Would you be able to test your business rules without your view? At a finer level of detail.  How much of your code creates the objects it needs within the same class, or worse, the same method, that will need it?  Without using a Dependency Injection framework, could you swap out any objects your class uses?  Have you even heard the rule, “Classes should either create things or do things, but never both within the same class?”  If you did that, how much more testable would your code be? If you were to write a test for a method, how much setup work would you have to do?  If it is more than a few lines, your method is probably doing too much, either directly or indirectly.  You’ll need to find a way to make it do less.&lt;/p&gt;
&lt;p&gt;Maybe in future post, I’ll address some of these issues in code.  But for now, I just want to address the problem.&lt;/p&gt;
&lt;p&gt;Again, it isn’t Johnny’s fault that he doesn’t know this stuff.  Think about the code samples we tend to look at.&lt;/p&gt;
&lt;h2 id=&#34;When-is-the-last-time-you-saw-sample-code-that-was-testable&#34;&gt;&lt;a href=&#34;#When-is-the-last-time-you-saw-sample-code-that-was-testable&#34; class=&#34;headerlink&#34; title=&#34;When is the last time you saw sample code that was testable?&#34;&gt;&lt;/a&gt;When is the last time you saw sample code that was testable?&lt;/h2&gt;&lt;p&gt;Short rant here, but I’ve been working with EXTjs (version 4.x) for the last year and a half.  Sencha will tell you that this uses a MVC architecture.  But what they mean by “Controller” really functions more like a “ViewController.”  That is, the controller is tightly bound to the view that it handles events for.  The way they have things setup, you access View elements by getters that are automatically generated for you in the view.&lt;/p&gt;
&lt;p&gt;The problem with this is that you can’t really test the controller logic without bringing along the view.&lt;/p&gt;
&lt;p&gt;Sencha isn’t the only company who does this.  Most of the sample code for WebForms did the same kind of thing.&lt;/p&gt;
&lt;p&gt;Now, the reason this is an issue is that sample code is how most of the newer programmers are learning how to program.&lt;/p&gt;
&lt;p&gt;I heard recently that statistically, because of the growth of the industry, half of the programmers available have 5 years or less of experience.  I don’t know about you, but the first 5 years of my programming career, I was still figuring out how to program.  I wasn’t thinking about architecture issues and I certainly wasn’t thinking about formal testing.  From what I’ve seen of the new recruits, I don’t think they are either.  Shoot.  Some of the ones I’ve interacted with couldn’t code themselves out of a paper bag without help.&lt;/p&gt;
&lt;h2 id=&#34;And-so-what’s-the-conclusion-to-all-of-this&#34;&gt;&lt;a href=&#34;#And-so-what’s-the-conclusion-to-all-of-this&#34; class=&#34;headerlink&#34; title=&#34;And so, what’s the conclusion to all of this?&#34;&gt;&lt;/a&gt;And so, what’s the conclusion to all of this?&lt;/h2&gt;&lt;p&gt;I don’t know.  Maybe the first step is to admit that we have an issue here and that the issue is so much a management or time issue as it is an education and laziness issue.  That the code we generate shouldn’t assume that people will take the code and adapt it into testable code, but that we should write testable code as our sample code.  Maybe colleges should teach basic software architecture and TDD as part of the curriculum.  Maybe those of us who know better should just start testing and figure this all out well enough to explain it to others.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="test driven development" />
        <category term="testing" />
        <category term="bdd" />
        <updated>2015-03-05T12:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/excuses-for-not-testing/</id>
        <title>Excuses For Not Testing</title>
        <link rel="alternate" href="http://davembush.github.com/excuses-for-not-testing/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/uploads/2015/02/ppl-kid-044.jpg&#34; alt=&#34;ppl-kid-044&#34; title=&#34;ppl-kid-044&#34;&gt;&lt;/p&gt;
&lt;p&gt;As I started my own journey into unit testing, I slowly began to realize that it was really easy to come up with reasons to NOT test my code as I was writing it, even once I understood what that was supposed to look like. The reason I think most programmers don’t unit test code, once they understand what it is they are supposed to be doing is that they don’t feel like they have permission. To this I also answer, “How much permission do you need?”&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Do-you-really-need-permission&#34;&gt;&lt;a href=&#34;#Do-you-really-need-permission&#34; class=&#34;headerlink&#34; title=&#34;Do you really need permission?&#34;&gt;&lt;/a&gt;Do you really need permission?&lt;/h2&gt;&lt;p&gt;Do you ask for permission to compile and link the code? Do you ask for permission to write every line of code to make the system do what it should do? Do you ask for permission to run your code periodically to make sure it does what you had in mind when you wrote the code? Do you periodically add code that makes you feel good but is not directly related to the task at hand? (Admit it, I don’t think I know of any programmer who doesn’t.) Then why do we feel like we need permission to write unit test for our code?&lt;/p&gt;
&lt;h2 id=&#34;Are-you-convinced-that-you-need-test&#34;&gt;&lt;a href=&#34;#Are-you-convinced-that-you-need-test&#34; class=&#34;headerlink&#34; title=&#34;Are you convinced that you need test?&#34;&gt;&lt;/a&gt;Are you convinced that you need test?&lt;/h2&gt;&lt;p&gt;We don’t write test code because we aren’t convinced it is necessary to do the job we’ve been given. We complain that our managers don’t want us to write unit test. But the problem is that you asked for permission in the first place. And, by asking for permission, you’ve basically told your manager that unit testing is optional. Your manager has said “no” because he thinks YOU think it is optional.&lt;/p&gt;
&lt;h2 id=&#34;It’s-not-your-manager’s-job&#34;&gt;&lt;a href=&#34;#It’s-not-your-manager’s-job&#34; class=&#34;headerlink&#34; title=&#34;It’s not your manager’s job&#34;&gt;&lt;/a&gt;It’s not your manager’s job&lt;/h2&gt;&lt;p&gt;It isn’t his job to understand that not testing will produce technical debt. He’s not even interested in understanding what technical debt is. All he cares about is this. When will this project be done?  When you say it is done, will it work as expected or will it have a lot of bugs that need to be fixed yet? Most of the managers I’ve worked for in the past will accept whatever number I give them once they understand that when I deliver the software to them, it is going to work.  In fact, I’ve even gotten asked to do jobs BECAUSE my code tends to work more often than anyone else they know who could do the job.&lt;/p&gt;
&lt;p&gt;Now, I will admit, that in some cases there are places where you’ve been explicitly told to not create unit test. But even here I will assert it is because someone asked management the question.&lt;/p&gt;
&lt;h2 id=&#34;Why&#34;&gt;&lt;a href=&#34;#Why&#34; class=&#34;headerlink&#34; title=&#34;Why?&#34;&gt;&lt;/a&gt;Why?&lt;/h2&gt;&lt;p&gt;And so, we need to evaluate why it is we think creating unit test are optional. Probably because what we’ve been doing for so long seems to be working and, when we try to incorporate unit test, the process seems slower.&lt;/p&gt;
&lt;p&gt;And it is.&lt;/p&gt;
&lt;p&gt;Initially, writing unit test is slower just like writing using a new language or a new framework or anything else new is slower than what we know.&lt;/p&gt;
&lt;p&gt;But the ultimate efficiency that writing unit test as we code provides has been proven to more than offset the learning curve involved.&lt;/p&gt;
&lt;p&gt;There is one other valid reason for not testing and that is, we simply don’t know how.  This is almost as big of a reason as not believing it is worth while.  But, I think if we thought testing was really worth while, we’d start testing and figure it out as we went along.&lt;/p&gt;
&lt;p&gt;If you think about your career, I bet there are a lot of things you know now that you didn’t know when you started out.  The fact of the matter is, most of us learn on the job.  We start out with basic skills, but it is the day to day implementations that improve those skills.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;Don’t-let-the-good-enough-be-the-enemy-of-the-perfect&#34;&gt;&lt;a href=&#34;#Don’t-let-the-good-enough-be-the-enemy-of-the-perfect&#34; class=&#34;headerlink&#34; title=&#34;Don’t let the good enough be the enemy of the perfect.&#34;&gt;&lt;/a&gt;Don’t let the good enough be the enemy of the perfect.&lt;/h5&gt;&lt;/blockquote&gt;
&lt;p&gt;Don’t let the good enough be the enemy of the perfect.  Your first set of test will be garbage.  As you stick with it, you’ll wonder what you were thinking when you wrote your first test.  But this should not deter you.  This is what happened when you first started coding.  Maybe it is still happening.  No worries.  It is the practice that will make you better able to write tests and better able to write code that is testable.&lt;/p&gt;
&lt;p&gt;And there is another reason we don’t test.  Most of the code you are currently writing simply isn’t testable.  But, that’s the subject for another post.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="test driven development" />
        <category term="testing" />
        <category term="bdd" />
        <updated>2015-02-26T12:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://davembush.github.com/selenium-performance-improvements/</id>
        <title>Selenium Performance Improvements</title>
        <link rel="alternate" href="http://davembush.github.com/selenium-performance-improvements/"/>
        <content type="html">&lt;p&gt;As many of you know, I’ve been using &lt;a href=&#34;//www.seleniumhq.org/&#34;&gt;Selenium&lt;/a&gt; to do my website testing.  And, if you’ve done any testing with Selenium yourself, you know that Selenium can be even slower if you are using Selenium Grid. There are several things you might do today to achieve Selenium Performance improvements in order to increase the speed that your of your test run.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;CacheLookup-attribute-or-Annotation-if-you-are-using-Java&#34;&gt;&lt;a href=&#34;#CacheLookup-attribute-or-Annotation-if-you-are-using-Java&#34; class=&#34;headerlink&#34; title=&#34;CacheLookup attribute (or Annotation if you are using Java)&#34;&gt;&lt;/a&gt;CacheLookup attribute (or Annotation if you are using Java)&lt;/h2&gt;&lt;p&gt;This is probably the most obvious place for improvement.  Assuming you are using the Page Model pattern in your testing, your page model should have properties that already look something like:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;FindsBy(How = How.Id, Using = &lt;span class=&#34;string&#34;&gt;&amp;quot;radioButton&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; IWebElement RadioButton&amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;; &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What you may not know is that the way this works is that EVERY time you access the property named RadioButton it will lookup the location of the radio button.  The RadioButton property is actually a proxy for the real IWebElement that it will lookup on the fly. So, if you are using the element more than once in your test, it will perform the lookup each time you access the RadioButton property. By adding the CacheLookup attribute to the RadioButton property,&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;FindsBy(How = How.Id, Using = &lt;span class=&#34;string&#34;&gt;&amp;quot;radioButton&amp;quot;&lt;/span&gt;), CacheLookup&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; IWebElement RadioButton&amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;; &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;you can force the RadioButton to be resolved once and only once. Most of my test ask for elements once per test, so I didn’t see any major performance gains by adding this.  Your mileage may vary.&lt;/p&gt;
&lt;h2 id=&#34;CacheLookup-Warning&#34;&gt;&lt;a href=&#34;#CacheLookup-Warning&#34; class=&#34;headerlink&#34; title=&#34;CacheLookup Warning&#34;&gt;&lt;/a&gt;CacheLookup Warning&lt;/h2&gt;&lt;p&gt;Be careful when adding CacheLookup to your properties because any time the HTML is recreated, the element will become “stale” and you’ll need to look it up again. For example, in one of the pages I’m testing, I have two modal windows that get created as part of the test.  Each time they are created, they have to be resolved again because the old ones no longer exist. It would be like trying to reference a pointer to an object that no longer exist because something else deleted it.  Actually, that’s exactly what is happening.&lt;/p&gt;
&lt;h2 id=&#34;CacheLookup-Only-Solves-One-of-Your-Problems&#34;&gt;&lt;a href=&#34;#CacheLookup-Only-Solves-One-of-Your-Problems&#34; class=&#34;headerlink&#34; title=&#34;CacheLookup Only Solves One of Your Problems&#34;&gt;&lt;/a&gt;CacheLookup Only Solves One of Your Problems&lt;/h2&gt;&lt;p&gt;But if all you do to your site is add CacheLookup, you are wasting your time.  You have to start thinking like your code. Did you know that every time you access a property on an IWebElement, Selenium has to make a call to the browser to access the current value? Yep. Actually, if you think about it, this is what you hope it does.  It is what makes code like this work:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Wait.Until(x =&amp;gt; Page.RadioButton.GetAttrinbute(&lt;span class=&#34;string&#34;&gt;&amp;quot;disabled&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But how many times to we write code that goes after a property multiple times when we know the value, or at least we assume the value, hasn’t changed? Or how many of you are doing the same thing multiple times in the same test? For example, in the code I’m testing currently, I have a header and a footer that I need to hide so that when an element is scrolled into view by Selenium, it doesn’t scroll under the header or the footer. I’m currently hiding and showing every time I perform some action on an element.  But now that I’m starting to think about performance, I’m asking myself, “What was I thinking?!” In this case, I would save a lot of time by turning the header off once a the beginning of my test.  I bet my test end up running twice as fast simply by doing that. So, keep in mind that every Selenium call you make is probably going to have to access the server in order to perform the action or retrieve the value you are looking for and try to write your code so that you are only making that call to the server one time per test. I bet you see some performance improvements.&lt;/p&gt;
</content>
        <category term="tdd" />
        <category term="c#" />
        <category term="bdd" />
        <category term="selenium" />
        <category term="java" />
        <updated>2014-10-02T10:00:00.000Z</updated>
    </entry>
</feed>
